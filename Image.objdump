
Image.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

const piniod_t __input_pins [] = INPUT_PIN_LIST;

void pin_sensor_init () { __pinsen_setedge_irq; }

void pin_sensor_read (word st, const byte *junk, address val) {
       0:	20005000 	andcs	r5, r0, r0

	const piniod_t *p;
	word i;
	byte v;

	if (val == NULL) {
       4:	000023c9 	andeq	r2, r0, r9, asr #7
		// Called to issue a wait request
		if (st == WNONE)
       8:	000023c3 	andeq	r2, r0, r3, asr #7
       c:	000023c5 	andeq	r2, r0, r5, asr #7
			// Make sure this is not WNONE
			return;
		cli;
		__pinsen_clear_and_enable;
      10:	000023c7 	andeq	r2, r0, r7, asr #7
      14:	000023c7 	andeq	r2, r0, r7, asr #7
		when (&__input_pins, st);
      18:	000023c7 	andeq	r2, r0, r7, asr #7
	...
	}

	*val = 0;
	for (i = 0, p = __input_pins;
	    	    i < sizeof (__input_pins) / sizeof (piniod_t); i++, p++)
		*val |= __port_in_value (p) << i;
      2c:	000023c7 	andeq	r2, r0, r7, asr #7
      30:	000023c7 	andeq	r2, r0, r7, asr #7
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Return the input value from the specified DIO.
    //
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      34:	00000000 	andeq	r0, r0, r0
      38:	000023c7 	andeq	r2, r0, r7, asr #7
      3c:	000023c7 	andeq	r2, r0, r7, asr #7
      40:	000010ad 	andeq	r1, r0, sp, lsr #1
      44:	000023c7 	andeq	r2, r0, r7, asr #7
      48:	000023c7 	andeq	r2, r0, r7, asr #7
}
      4c:	000023c7 	andeq	r2, r0, r7, asr #7
      50:	00000c6d 	andeq	r0, r0, sp, ror #24
      54:	00000f6d 	andeq	r0, r0, sp, ror #30
	if (!button_still_pressed (__button_list [pbutton]))
		goto Done;

	if (BUTTON_REPEAT (__button_list [pbutton])) {
		// Wait for repeat
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      58:	000023c7 	andeq	r2, r0, r7, asr #7
	    pbutton++) {
      5c:	000023c7 	andeq	r2, r0, r7, asr #7
      60:	000023c7 	andeq	r2, r0, r7, asr #7
	if (!button_still_pressed (__button_list [pbutton]))
      64:	00002df9 	strdeq	r2, [r0], -r9
      68:	000023c7 	andeq	r2, r0, r7, asr #7
      6c:	000023c7 	andeq	r2, r0, r7, asr #7
      70:	000023c7 	andeq	r2, r0, r7, asr #7
      74:	000023c7 	andeq	r2, r0, r7, asr #7
	if (BUTTON_REPEAT (__button_list [pbutton])) {
      78:	000023c7 	andeq	r2, r0, r7, asr #7
      7c:	000023c7 	andeq	r2, r0, r7, asr #7
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      80:	000023c7 	andeq	r2, r0, r7, asr #7
      84:	000023c7 	andeq	r2, r0, r7, asr #7
	} else
		goto Debounce;

  entry (BU_LOOP)

	if (!button_still_pressed (__button_list [pbutton]))
      88:	000023c7 	andeq	r2, r0, r7, asr #7
      8c:	000023c7 	andeq	r2, r0, r7, asr #7
      90:	000023c7 	andeq	r2, r0, r7, asr #7
      94:	000023c7 	andeq	r2, r0, r7, asr #7
      98:	000023c7 	andeq	r2, r0, r7, asr #7
		goto Done;

	if (baction == NULL)
      9c:	000023c7 	andeq	r2, r0, r7, asr #7
      a0:	000023c7 	andeq	r2, r0, r7, asr #7
		goto Term;

	(*baction) (pbutton);
      a4:	000023c7 	andeq	r2, r0, r7, asr #7

	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);

endthread
      a8:	000023c7 	andeq	r2, r0, r7, asr #7
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	000023c7 	andeq	r2, r0, r7, asr #7
      b0:	000023c7 	andeq	r2, r0, r7, asr #7
endthread
      b4:	000023c7 	andeq	r2, r0, r7, asr #7
      b8:	000023c7 	andeq	r2, r0, r7, asr #7
      bc:	000023c7 	andeq	r2, r0, r7, asr #7
      c0:	000023c7 	andeq	r2, r0, r7, asr #7
      c4:	000023c7 	andeq	r2, r0, r7, asr #7

000000c8 <sender>:
	return response_message;

};

// sends packet information to other nodes
fsm sender(struct ResponseMessage *message) {
      c8:	b538      	push	{r3, r4, r5, lr}
      ca:	4605      	mov	r5, r0
      cc:	b128      	cbz	r0, da <sender+0x12>
      ce:	2801      	cmp	r0, #1
      d0:	d023      	beq.n	11a <_Min_Stack_Size+0x1a>
	state CONFIRM_message:
		// Display message was sent
		ser_out(CONFIRM_message, "Message sent\r\n");
		// Exit out of fsm
		finish;
}
      d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d6:	f001 bb07 	b.w	16e8 <__pi_badstate>
fsm sender(struct ResponseMessage *message) {
      da:	4b20      	ldr	r3, [pc, #128]	; (15c <_Min_Stack_Size+0x5c>)
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	4920      	ldr	r1, [pc, #128]	; (160 <_Min_Stack_Size+0x60>)
fsm sender(struct ResponseMessage *message) {
      de:	681b      	ldr	r3, [r3, #0]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      e0:	2222      	movs	r2, #34	; 0x22
fsm sender(struct ResponseMessage *message) {
      e2:	689c      	ldr	r4, [r3, #8]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      e4:	6809      	ldr	r1, [r1, #0]
      e6:	4603      	mov	r3, r0
      e8:	f001 ffa6 	bl	2038 <tcv_wnps>
		packet[0] = 0;
      ec:	8005      	strh	r5, [r0, #0]
		*p = message->gid;
      ee:	8822      	ldrh	r2, [r4, #0]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	4b1c      	ldr	r3, [pc, #112]	; (164 <_Min_Stack_Size+0x64>)
		*p = message->gid;
      f2:	7082      	strb	r2, [r0, #2]
		*p = message->tpe;p++;
      f4:	78a2      	ldrb	r2, [r4, #2]
      f6:	461d      	mov	r5, r3
      f8:	7102      	strb	r2, [r0, #4]
		*p = message->request_number;p++;
      fa:	78e2      	ldrb	r2, [r4, #3]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      fc:	6018      	str	r0, [r3, #0]
		*p = message->request_number;p++;
      fe:	7142      	strb	r2, [r0, #5]
		*p = message->sender_id;p++;
     100:	7922      	ldrb	r2, [r4, #4]
     102:	7182      	strb	r2, [r0, #6]
		*p = message->receiver_id;p++;
     104:	7962      	ldrb	r2, [r4, #5]
     106:	71c2      	strb	r2, [r0, #7]
		switch(message->tpe) {
     108:	78a2      	ldrb	r2, [r4, #2]
     10a:	2a04      	cmp	r2, #4
     10c:	d80e      	bhi.n	12c <_Min_Stack_Size+0x2c>
     10e:	2a02      	cmp	r2, #2
     110:	d81e      	bhi.n	150 <_Min_Stack_Size+0x50>
     112:	d016      	beq.n	142 <_Min_Stack_Size+0x42>
		tcv_endp(packet);
     114:	6828      	ldr	r0, [r5, #0]
     116:	f001 fea5 	bl	1e64 <tcv_endp>
		ser_out(CONFIRM_message, "Message sent\r\n");
     11a:	2001      	movs	r0, #1
     11c:	4912      	ldr	r1, [pc, #72]	; (168 <_Min_Stack_Size+0x68>)
     11e:	f002 fa27 	bl	2570 <ser_out>
}
     122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		finish;
     126:	2000      	movs	r0, #0
     128:	f001 bcbe 	b.w	1aa8 <kill>
     12c:	2a05      	cmp	r2, #5
     12e:	d1f1      	bne.n	114 <_Min_Stack_Size+0x14>
				*p = message->status;p++;
     130:	79a3      	ldrb	r3, [r4, #6]
				strncpy(p, message->record, sizeof(message->record));
     132:	2214      	movs	r2, #20
				*p = message->status;p++;
     134:	7203      	strb	r3, [r0, #8]
				*p = message->padding;p++;
     136:	79e3      	ldrb	r3, [r4, #7]
				strncpy(p, message->record, sizeof(message->record));
     138:	f104 0108 	add.w	r1, r4, #8
				*p = message->padding;p++;
     13c:	7243      	strb	r3, [r0, #9]
				strncpy(p, message->record, sizeof(message->record));
     13e:	300a      	adds	r0, #10
     140:	e003      	b.n	14a <_Min_Stack_Size+0x4a>
				strncpy(p, message->record, sizeof(message->record));
     142:	2214      	movs	r2, #20
     144:	f104 0108 	add.w	r1, r4, #8
     148:	3008      	adds	r0, #8
				strncpy(p, message->record, sizeof(message->record));
     14a:	f001 fbe2 	bl	1912 <__pi_strncpy>
				break;
     14e:	e7e1      	b.n	114 <_Min_Stack_Size+0x14>
				*p = message->record_index;p++;
     150:	7f23      	ldrb	r3, [r4, #28]
     152:	7203      	strb	r3, [r0, #8]
				*p = message->padding;
     154:	79e3      	ldrb	r3, [r4, #7]
     156:	7243      	strb	r3, [r0, #9]
				break;
     158:	e7dc      	b.n	114 <_Min_Stack_Size+0x14>
     15a:	bf00      	nop
     15c:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
     160:	20000000 	andcs	r0, r0, r0
     164:	2000055c 	andcs	r0, r0, ip, asr r5
     168:	00004958 	andeq	r4, r0, r8, asr r9

0000016c <reset_array>:
		node->nnodes[i] = 0;
     16c:	2200      	movs	r2, #0
     16e:	f500 638d 	add.w	r3, r0, #1128	; 0x468
     172:	f200 4081 	addw	r0, r0, #1153	; 0x481
     176:	f803 2b01 	strb.w	r2, [r3], #1
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     17a:	4283      	cmp	r3, r0
     17c:	d1fb      	bne.n	176 <reset_array+0xa>
}
     17e:	4770      	bx	lr

00000180 <init_node>:
bool init_node(struct Node* node){
     180:	b510      	push	{r4, lr}
    node->id  = 0;                  // default id value 0
     182:	2400      	movs	r4, #0
     184:	7004      	strb	r4, [r0, #0]
    node->gid = 0;                  // default gid value 0
     186:	8044      	strh	r4, [r0, #2]
    node->index = 0;                // default entry count 0
     188:	f880 4481 	strb.w	r4, [r0, #1153]	; 0x481
    node->data_base.item_count = 0; // default no items in array
     18c:	f880 4464 	strb.w	r4, [r0, #1124]	; 0x464
	reset_array(node);
     190:	f7ff ffec 	bl	16c <reset_array>
    DEBUG_PRINT("Error initializing node...\n");
     194:	4802      	ldr	r0, [pc, #8]	; (1a0 <init_node+0x20>)
     196:	f001 fd29 	bl	1bec <diag>
};
     19a:	4620      	mov	r0, r4
     19c:	bd10      	pop	{r4, pc}
     19e:	bf00      	nop
     1a0:	00004967 	andeq	r4, r0, r7, ror #18

000001a4 <generate_request_num>:
uint8_t generate_request_num(void){
     1a4:	b508      	push	{r3, lr}
    return (uint8_t) (rand() % 255);
     1a6:	f004 fb91 	bl	48cc <rand>
     1aa:	23ff      	movs	r3, #255	; 0xff
     1ac:	fb90 f3f3 	sdiv	r3, r0, r3
     1b0:	4418      	add	r0, r3
}
     1b2:	b2c0      	uxtb	r0, r0
     1b4:	bd08      	pop	{r3, pc}

000001b6 <clear_node_neighbour_array>:
            node->nnodes[i] = 0; // set to null byte
     1b6:	2200      	movs	r2, #0
     1b8:	f500 638d 	add.w	r3, r0, #1128	; 0x468
     1bc:	f200 4081 	addw	r0, r0, #1153	; 0x481
     1c0:	f803 2b01 	strb.w	r2, [r3], #1
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1c4:	4283      	cmp	r3, r0
     1c6:	d1fb      	bne.n	1c0 <clear_node_neighbour_array+0xa>
};
     1c8:	2001      	movs	r0, #1
     1ca:	4770      	bx	lr

000001cc <delete_record>:
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1cc:	f890 3464 	ldrb.w	r3, [r0, #1124]	; 0x464
     1d0:	b143      	cbz	r3, 1e4 <delete_record+0x18>
        node->data_base.item_array[index].data_entry[0] = '\0';
     1d2:	221c      	movs	r2, #28
     1d4:	fb02 0101 	mla	r1, r2, r1, r0
     1d8:	2200      	movs	r2, #0
        node->data_base.item_count -= 1;
     1da:	3b01      	subs	r3, #1
        node->data_base.item_array[index].data_entry[0] = '\0';
     1dc:	714a      	strb	r2, [r1, #5]
        node->data_base.item_array[index].timestamp = 0;
     1de:	61ca      	str	r2, [r1, #28]
        node->data_base.item_count -= 1;
     1e0:	f880 3464 	strb.w	r3, [r0, #1124]	; 0x464
};
     1e4:	2000      	movs	r0, #0
     1e6:	4770      	bx	lr

000001e8 <receiver>:

// receives packet information from wireless connected nodes
fsm receiver(struct Node* node_db) {
     1e8:	b570      	push	{r4, r5, r6, lr}
     1ea:	4ba3      	ldr	r3, [pc, #652]	; (478 <receiver+0x290>)
     1ec:	b090      	sub	sp, #64	; 0x40
     1ee:	681b      	ldr	r3, [r3, #0]
     1f0:	689c      	ldr	r4, [r3, #8]
     1f2:	2809      	cmp	r0, #9
     1f4:	f200 8192 	bhi.w	51c <receiver+0x334>
     1f8:	e8df f000 	tbb	[pc, r0]
     1fc:	7f780c05 	svcvc	0x00780c05
     200:	a3998d86 	orrsge	r8, r9, #8576	; 0x2180
     204:	4b9db7ad 	blmi	fe76e0c0 <_estack+0xde7690c0>
	address incoming_packet;
	char array[20];

	state receiving:
		// Get the next packet queued for input at the session (sfd)
		incoming_packet = tcv_rnp(receiving, sfd);
     208:	2000      	movs	r0, #0
     20a:	6819      	ldr	r1, [r3, #0]
     20c:	f001 fed4 	bl	1fb8 <tcv_rnp>
     210:	4b9b      	ldr	r3, [pc, #620]	; (480 <receiver+0x298>)
     212:	6018      	str	r0, [r3, #0]
	state ok:
		uint8_t tpe;
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     214:	4d9a      	ldr	r5, [pc, #616]	; (480 <receiver+0x298>)
     216:	f10d 0107 	add.w	r1, sp, #7
     21a:	6828      	ldr	r0, [r5, #0]
     21c:	2201      	movs	r2, #1
     21e:	3006      	adds	r0, #6
     220:	f001 ff68 	bl	20f4 <tcv_read>

		if (bytes_read != 1){
			//proceed error; //NOTE: NO ERROR STATE
		};
		// in each switch case where we send a response using call (), we may be able to remove the return state...
		switch (tpe){
     224:	f89d 1007 	ldrb.w	r1, [sp, #7]
     228:	2905      	cmp	r1, #5
     22a:	f200 8173 	bhi.w	514 <receiver+0x32c>
     22e:	e8df f011 	tbh	[pc, r1, lsl #1]
     232:	00320006 	eorseq	r0, r2, r6
     236:	00cc00a4 	sbceq	r0, ip, r4, lsr #1
     23a:	010400dc 	ldrdeq	r0, [r4, -ip]
			*/
			case DISCOVERY_REQUEST: ;
				// respondng with this
				struct ResponseMessage *response_message_0;
				// receiving this
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     23e:	682d      	ldr	r5, [r5, #0]

				/*DEBUGGING*/
				DEBUG_PRINT("\r\nRECEIVED GID: %u", discovery_request_message->gid);
     240:	4890      	ldr	r0, [pc, #576]	; (484 <receiver+0x29c>)
     242:	8869      	ldrh	r1, [r5, #2]
     244:	f001 fcd2 	bl	1bec <diag>
				DEBUG_PRINT("\rRECEIVED TYPE: %u", discovery_request_message->tpe);
     248:	7929      	ldrb	r1, [r5, #4]
     24a:	488f      	ldr	r0, [pc, #572]	; (488 <receiver+0x2a0>)
     24c:	f001 fcce 	bl	1bec <diag>
				DEBUG_PRINT("\r\nRECEIVED REQ NUM: %u", discovery_request_message->request_number);
     250:	7969      	ldrb	r1, [r5, #5]
     252:	488e      	ldr	r0, [pc, #568]	; (48c <receiver+0x2a4>)
     254:	f001 fcca 	bl	1bec <diag>
				DEBUG_PRINT("\r\nRECEIVED SID: %u", discovery_request_message->sender_id);
     258:	79a9      	ldrb	r1, [r5, #6]
     25a:	488d      	ldr	r0, [pc, #564]	; (490 <receiver+0x2a8>)
     25c:	f001 fcc6 	bl	1bec <diag>
				DEBUG_PRINT("\r\nRECEIVED RID: %u", discovery_request_message->receiver_id);
     260:	79e9      	ldrb	r1, [r5, #7]
     262:	488c      	ldr	r0, [pc, #560]	; (494 <receiver+0x2ac>)
     264:	f001 fcc2 	bl	1bec <diag>

				// if the group_ids match
				if (discovery_request_message->gid == node_db->gid){
     268:	886a      	ldrh	r2, [r5, #2]
     26a:	8863      	ldrh	r3, [r4, #2]
     26c:	4293      	cmp	r3, r2
     26e:	d13d      	bne.n	2ec <receiver+0x104>
					response_message_0->gid = discovery_request_message->gid;
     270:	2100      	movs	r1, #0
     272:	800b      	strh	r3, [r1, #0]
					response_message_0->tpe = DISCOVERY_RESPONSE;
     274:	2301      	movs	r3, #1
     276:	708b      	strb	r3, [r1, #2]
					response_message_0->request_number = discovery_request_message->request_number;
     278:	796b      	ldrb	r3, [r5, #5]
     27a:	70cb      	strb	r3, [r1, #3]
					response_message_0->sender_id = node_db->id;
     27c:	7823      	ldrb	r3, [r4, #0]
     27e:	710b      	strb	r3, [r1, #4]
					response_message_0->receiver_id = discovery_request_message->sender_id;
     280:	79ab      	ldrb	r3, [r5, #6]
     282:	714b      	strb	r3, [r1, #5]

					// NOTE: return_from_sender might be optional, in which case it should just return to here and then break
					call sender(response_message_0, done_case);
     284:	4884      	ldr	r0, [pc, #528]	; (498 <receiver+0x2b0>)
     286:	f001 fc8b 	bl	1ba0 <__pi_fork>
     28a:	2102      	movs	r1, #2
     28c:	f001 faf2 	bl	1874 <__pi_join>
     290:	b360      	cbz	r0, 2ec <receiver+0x104>
     292:	f001 f84b 	bl	132c <__pi_release>

			Based on the specifications, there is no response when this kind of message is received.
			*/
			case DISCOVERY_RESPONSE: ;
				// receiving this, no response.
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     296:	682d      	ldr	r5, [r5, #0]

				/*DEBUGGING*/
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
     298:	4880      	ldr	r0, [pc, #512]	; (49c <receiver+0x2b4>)
     29a:	8869      	ldrh	r1, [r5, #2]
     29c:	f001 fca6 	bl	1bec <diag>
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
     2a0:	7929      	ldrb	r1, [r5, #4]
     2a2:	487f      	ldr	r0, [pc, #508]	; (4a0 <receiver+0x2b8>)
     2a4:	f001 fca2 	bl	1bec <diag>
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
     2a8:	7969      	ldrb	r1, [r5, #5]
     2aa:	487e      	ldr	r0, [pc, #504]	; (4a4 <receiver+0x2bc>)
     2ac:	f001 fc9e 	bl	1bec <diag>
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
     2b0:	79a9      	ldrb	r1, [r5, #6]
     2b2:	487d      	ldr	r0, [pc, #500]	; (4a8 <receiver+0x2c0>)
     2b4:	f001 fc9a 	bl	1bec <diag>
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
     2b8:	79e9      	ldrb	r1, [r5, #7]
     2ba:	487c      	ldr	r0, [pc, #496]	; (4ac <receiver+0x2c4>)
     2bc:	f001 fc96 	bl	1bec <diag>

				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2c0:	886b      	ldrh	r3, [r5, #2]
     2c2:	8862      	ldrh	r2, [r4, #2]
     2c4:	429a      	cmp	r2, r3
     2c6:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
     2ca:	d103      	bne.n	2d4 <receiver+0xec>
     2cc:	79aa      	ldrb	r2, [r5, #6]
     2ce:	1e51      	subs	r1, r2, #1
     2d0:	2917      	cmp	r1, #23
     2d2:	d902      	bls.n	2da <receiver+0xf2>
     2d4:	18e2      	adds	r2, r4, r3
     2d6:	f892 2468 	ldrb.w	r2, [r2, #1128]	; 0x468
     2da:	18e1      	adds	r1, r4, r3
     2dc:	f881 2468 	strb.w	r2, [r1, #1128]	; 0x468
				// increment the index if the insertion succeeded.
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     2e0:	79a9      	ldrb	r1, [r5, #6]
     2e2:	4291      	cmp	r1, r2
     2e4:	d102      	bne.n	2ec <receiver+0x104>
					node_db->index+=1;
     2e6:	3301      	adds	r3, #1
     2e8:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
				break;

		};
	state done_case:
		tcv_endp(incoming_packet);
     2ec:	4b64      	ldr	r3, [pc, #400]	; (480 <receiver+0x298>)
     2ee:	6818      	ldr	r0, [r3, #0]
     2f0:	f001 fdb8 	bl	1e64 <tcv_endp>
		proceed receiving;
     2f4:	2000      	movs	r0, #0
     2f6:	f001 fa7f 	bl	17f8 <proceed>
	
	// Succeeded in performing requested action
	state response_1_create:
		ser_out(response_1_create, "\r\nData Saved");
     2fa:	2003      	movs	r0, #3
     2fc:	496c      	ldr	r1, [pc, #432]	; (4b0 <receiver+0x2c8>)
     2fe:	f002 f937 	bl	2570 <ser_out>
		proceed receiving;
     302:	2000      	movs	r0, #0
     304:	f001 fa78 	bl	17f8 <proceed>
	state response_1_delete:
		ser_out(response_1_delete, "\r\nRecord Deleted");
     308:	2004      	movs	r0, #4
     30a:	496a      	ldr	r1, [pc, #424]	; (4b4 <receiver+0x2cc>)
     30c:	f002 f930 	bl	2570 <ser_out>
		proceed receiving;
     310:	2000      	movs	r0, #0
     312:	f001 fa71 	bl	17f8 <proceed>
	state response_1_retrieve:
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     316:	4b68      	ldr	r3, [pc, #416]	; (4b8 <receiver+0x2d0>)
     318:	2005      	movs	r0, #5
     31a:	681a      	ldr	r2, [r3, #0]
     31c:	4967      	ldr	r1, [pc, #412]	; (4bc <receiver+0x2d4>)
     31e:	f102 0308 	add.w	r3, r2, #8
     322:	7912      	ldrb	r2, [r2, #4]
     324:	f002 f996 	bl	2654 <ser_outf>
		proceed receiving;
     328:	2000      	movs	r0, #0
     32a:	f001 fa65 	bl	17f8 <proceed>
	
	// Failed to perform requests action
	state response_2:
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     32e:	4b62      	ldr	r3, [pc, #392]	; (4b8 <receiver+0x2d0>)
     330:	2006      	movs	r0, #6
     332:	681b      	ldr	r3, [r3, #0]
     334:	4962      	ldr	r1, [pc, #392]	; (4c0 <receiver+0x2d8>)
     336:	791a      	ldrb	r2, [r3, #4]
     338:	f002 f98c 	bl	2654 <ser_outf>
		proceed receiving;
     33c:	2000      	movs	r0, #0
     33e:	f001 fa5b 	bl	17f8 <proceed>
	state response_3:
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     342:	4b5d      	ldr	r3, [pc, #372]	; (4b8 <receiver+0x2d0>)
     344:	2007      	movs	r0, #7
     346:	681b      	ldr	r3, [r3, #0]
     348:	495e      	ldr	r1, [pc, #376]	; (4c4 <receiver+0x2dc>)
     34a:	791a      	ldrb	r2, [r3, #4]
     34c:	f002 f982 	bl	2654 <ser_outf>
		proceed receiving;
     350:	2000      	movs	r0, #0
     352:	f001 fa51 	bl	17f8 <proceed>
	state response_4:
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     356:	4b58      	ldr	r3, [pc, #352]	; (4b8 <receiver+0x2d0>)
     358:	2008      	movs	r0, #8
     35a:	681b      	ldr	r3, [r3, #0]
     35c:	495a      	ldr	r1, [pc, #360]	; (4c8 <receiver+0x2e0>)
     35e:	791a      	ldrb	r2, [r3, #4]
     360:	f002 f978 	bl	2654 <ser_outf>
		proceed receiving;
     364:	2000      	movs	r0, #0
     366:	f001 fa47 	bl	17f8 <proceed>

	// likely want to respond with error message
	state error:
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     36a:	4858      	ldr	r0, [pc, #352]	; (4cc <receiver+0x2e4>)
     36c:	f001 fc3e 	bl	1bec <diag>
		// handle error
		// retry?
		proceed receiving;
     370:	2000      	movs	r0, #0
     372:	f001 fa41 	bl	17f8 <proceed>
		
}
     376:	b010      	add	sp, #64	; 0x40
     378:	bd70      	pop	{r4, r5, r6, pc}
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     37a:	682d      	ldr	r5, [r5, #0]
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     37c:	4847      	ldr	r0, [pc, #284]	; (49c <receiver+0x2b4>)
     37e:	8869      	ldrh	r1, [r5, #2]
     380:	f001 fc34 	bl	1bec <diag>
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     384:	7929      	ldrb	r1, [r5, #4]
     386:	4846      	ldr	r0, [pc, #280]	; (4a0 <receiver+0x2b8>)
     388:	f001 fc30 	bl	1bec <diag>
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
     38c:	7969      	ldrb	r1, [r5, #5]
     38e:	4845      	ldr	r0, [pc, #276]	; (4a4 <receiver+0x2bc>)
     390:	f001 fc2c 	bl	1bec <diag>
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     394:	79a9      	ldrb	r1, [r5, #6]
     396:	4844      	ldr	r0, [pc, #272]	; (4a8 <receiver+0x2c0>)
     398:	f001 fc28 	bl	1bec <diag>
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     39c:	79e9      	ldrb	r1, [r5, #7]
     39e:	4843      	ldr	r0, [pc, #268]	; (4ac <receiver+0x2c4>)
     3a0:	f001 fc24 	bl	1bec <diag>
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     3a4:	484a      	ldr	r0, [pc, #296]	; (4d0 <receiver+0x2e8>)
     3a6:	f105 0108 	add.w	r1, r5, #8
     3aa:	f001 fc1f 	bl	1bec <diag>
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     3ae:	7822      	ldrb	r2, [r4, #0]
     3b0:	79eb      	ldrb	r3, [r5, #7]
     3b2:	4293      	cmp	r3, r2
     3b4:	d19a      	bne.n	2ec <receiver+0x104>
     3b6:	886a      	ldrh	r2, [r5, #2]
     3b8:	429a      	cmp	r2, r3
     3ba:	d197      	bne.n	2ec <receiver+0x104>
		strncpy(response_message->record, rec, 20);
     3bc:	2214      	movs	r2, #20
     3be:	4945      	ldr	r1, [pc, #276]	; (4d4 <receiver+0x2ec>)
     3c0:	2008      	movs	r0, #8
     3c2:	f001 faa6 	bl	1912 <__pi_strncpy>
					call sender(response_message_4, done_case);
     3c6:	2100      	movs	r1, #0
     3c8:	e75c      	b.n	284 <receiver+0x9c>
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     3ca:	682b      	ldr	r3, [r5, #0]
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3cc:	8862      	ldrh	r2, [r4, #2]
     3ce:	8859      	ldrh	r1, [r3, #2]
     3d0:	4291      	cmp	r1, r2
     3d2:	d18b      	bne.n	2ec <receiver+0x104>
     3d4:	79d9      	ldrb	r1, [r3, #7]
     3d6:	7822      	ldrb	r2, [r4, #0]
     3d8:	4291      	cmp	r1, r2
     3da:	d187      	bne.n	2ec <receiver+0x104>
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     3dc:	7a19      	ldrb	r1, [r3, #8]
     3de:	2928      	cmp	r1, #40	; 0x28
     3e0:	d884      	bhi.n	2ec <receiver+0x104>
					if (delete_record(node_db, delete_record_message->record_index)){
     3e2:	4620      	mov	r0, r4
     3e4:	f7ff fef2 	bl	1cc <delete_record>
     3e8:	e7e8      	b.n	3bc <receiver+0x1d4>
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3ea:	2200      	movs	r2, #0
     3ec:	8811      	ldrh	r1, [r2, #0]
     3ee:	8862      	ldrh	r2, [r4, #2]
     3f0:	4291      	cmp	r1, r2
     3f2:	f47f af7b 	bne.w	2ec <receiver+0x104>
     3f6:	2200      	movs	r2, #0
     3f8:	7951      	ldrb	r1, [r2, #5]
     3fa:	7822      	ldrb	r2, [r4, #0]
     3fc:	4291      	cmp	r1, r2
     3fe:	f47f af75 	bne.w	2ec <receiver+0x104>
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     402:	682b      	ldr	r3, [r5, #0]
     404:	7a1b      	ldrb	r3, [r3, #8]
     406:	2b28      	cmp	r3, #40	; 0x28
     408:	f63f af70 	bhi.w	2ec <receiver+0x104>
    return node->data_base.item_array[index];
     40c:	221c      	movs	r2, #28
     40e:	fb02 4403 	mla	r4, r2, r3, r4
     412:	ad09      	add	r5, sp, #36	; 0x24
     414:	3404      	adds	r4, #4
     416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     418:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     41a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     41e:	ae09      	add	r6, sp, #36	; 0x24
     420:	ac02      	add	r4, sp, #8
    return node->data_base.item_array[index];
     422:	e885 0007 	stmia.w	r5, {r0, r1, r2}
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     426:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     42a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
     42e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		strncpy(response_message->record, rec, 20);
     432:	2214      	movs	r2, #20
     434:	f10d 0109 	add.w	r1, sp, #9
     438:	e7c2      	b.n	3c0 <receiver+0x1d8>
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     43a:	682a      	ldr	r2, [r5, #0]
     43c:	4d1e      	ldr	r5, [pc, #120]	; (4b8 <receiver+0x2d0>)
     43e:	1c91      	adds	r1, r2, #2
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     440:	8850      	ldrh	r0, [r2, #2]
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     442:	6029      	str	r1, [r5, #0]
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     444:	8861      	ldrh	r1, [r4, #2]
     446:	4288      	cmp	r0, r1
     448:	f47f af50 	bne.w	2ec <receiver+0x104>
     44c:	79d2      	ldrb	r2, [r2, #7]
     44e:	7823      	ldrb	r3, [r4, #0]
     450:	429a      	cmp	r2, r3
     452:	f47f af4b 	bne.w	2ec <receiver+0x104>
				if(!response_flag){
     456:	4820      	ldr	r0, [pc, #128]	; (4d8 <receiver+0x2f0>)
     458:	8803      	ldrh	r3, [r0, #0]
     45a:	b91b      	cbnz	r3, 464 <receiver+0x27c>
					response_flag=1;
     45c:	2301      	movs	r3, #1
     45e:	8003      	strh	r3, [r0, #0]
					trigger(&response_flag);
     460:	f001 f9ee 	bl	1840 <__pi_trigger>
				switch(response_message_5->status){
     464:	682a      	ldr	r2, [r5, #0]
     466:	7993      	ldrb	r3, [r2, #6]
     468:	3b01      	subs	r3, #1
     46a:	2b03      	cmp	r3, #3
     46c:	f63f af3e 	bhi.w	2ec <receiver+0x104>
     470:	e8df f003 	tbb	[pc, r3]
     474:	4e4c4a34 			; <UNDEFINED> instruction: 0x4e4c4a34
     478:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
     47c:	20000000 	andcs	r0, r0, r0
     480:	20000558 	andcs	r0, r0, r8, asr r5
     484:	00004983 	andeq	r4, r0, r3, lsl #19
     488:	00004996 	muleq	r0, r6, r9
     48c:	000049a9 	andeq	r4, r0, r9, lsr #19
     490:	000049c0 	andeq	r4, r0, r0, asr #19
     494:	000049d3 	ldrdeq	r4, [r0], -r3
     498:	000000c9 	andeq	r0, r0, r9, asr #1
     49c:	000049e6 	andeq	r4, r0, r6, ror #19
     4a0:	000049f8 	strdeq	r4, [r0], -r8
     4a4:	00004a0b 	andeq	r4, r0, fp, lsl #20
     4a8:	00004a21 	andeq	r4, r0, r1, lsr #20
     4ac:	00004a33 	andeq	r4, r0, r3, lsr sl
     4b0:	00004a8d 	andeq	r4, r0, sp, lsl #21
     4b4:	00004a9a 	muleq	r0, sl, sl
     4b8:	20000564 	andcs	r0, r0, r4, ror #10
     4bc:	00004aab 	andeq	r4, r0, fp, lsr #21
     4c0:	00004ac9 	andeq	r4, r0, r9, asr #21
     4c4:	00004af0 	strdeq	r4, [r0], -r0
     4c8:	00004b18 	andeq	r4, r0, r8, lsl fp
     4cc:	00004b3f 	andeq	r4, r0, pc, lsr fp
     4d0:	00004a45 	andeq	r4, r0, r5, asr #20
     4d4:	20000540 	andcs	r0, r0, r0, asr #10
     4d8:	20000560 	andcs	r0, r0, r0, ror #10
						if (response_checker[0] == response_message_5->request_number){
     4dc:	4b11      	ldr	r3, [pc, #68]	; (524 <receiver+0x33c>)
     4de:	78d2      	ldrb	r2, [r2, #3]
     4e0:	6819      	ldr	r1, [r3, #0]
     4e2:	4291      	cmp	r1, r2
     4e4:	f47f af02 	bne.w	2ec <receiver+0x104>
							switch(response_checker[1]){
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	2b03      	cmp	r3, #3
     4ec:	d008      	beq.n	500 <receiver+0x318>
     4ee:	2b04      	cmp	r3, #4
     4f0:	d008      	beq.n	504 <receiver+0x31c>
     4f2:	2b02      	cmp	r3, #2
     4f4:	f47f aefa 	bne.w	2ec <receiver+0x104>
									proceed response_1_create;
     4f8:	2003      	movs	r0, #3
						proceed response_2;
     4fa:	f001 f97d 	bl	17f8 <proceed>
						break;
     4fe:	e6f5      	b.n	2ec <receiver+0x104>
									proceed response_1_delete;
     500:	2004      	movs	r0, #4
     502:	e7fa      	b.n	4fa <receiver+0x312>
									proceed response_1_retrieve;
     504:	2005      	movs	r0, #5
     506:	e7f8      	b.n	4fa <receiver+0x312>
						proceed response_2;
     508:	2006      	movs	r0, #6
     50a:	e7f6      	b.n	4fa <receiver+0x312>
						proceed response_3;
     50c:	2007      	movs	r0, #7
     50e:	e7f4      	b.n	4fa <receiver+0x312>
						proceed response_4;
     510:	2008      	movs	r0, #8
     512:	e7f2      	b.n	4fa <receiver+0x312>
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     514:	4804      	ldr	r0, [pc, #16]	; (528 <receiver+0x340>)
     516:	f001 fb69 	bl	1bec <diag>
				break;
     51a:	e6e7      	b.n	2ec <receiver+0x104>
}
     51c:	f001 f8e4 	bl	16e8 <__pi_badstate>
     520:	e729      	b.n	376 <receiver+0x18e>
     522:	bf00      	nop
     524:	20000660 	andcs	r0, r0, r0, ror #12
     528:	00004a5a 	andeq	r4, r0, sl, asr sl

0000052c <delete_all>:
bool delete_all(struct Node *node){
     52c:	b510      	push	{r4, lr}
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     52e:	f890 4464 	ldrb.w	r4, [r0, #1124]	; 0x464
     532:	b164      	cbz	r4, 54e <delete_all+0x22>
        for(int i = 0; i <= node->data_base.item_count; i++){
     534:	2300      	movs	r3, #0
     536:	4601      	mov	r1, r0
            node->data_base.item_array[i].data_entry[0] = '\0';
     538:	461a      	mov	r2, r3
        for(int i = 0; i <= node->data_base.item_count; i++){
     53a:	3301      	adds	r3, #1
     53c:	429c      	cmp	r4, r3
            node->data_base.item_array[i].data_entry[0] = '\0';
     53e:	714a      	strb	r2, [r1, #5]
            node->data_base.item_array[i].timestamp = 0;
     540:	f841 2f1c 	str.w	r2, [r1, #28]!
        for(int i = 0; i <= node->data_base.item_count; i++){
     544:	daf9      	bge.n	53a <delete_all+0xe>
    node->data_base.item_count = 0;
     546:	f880 2464 	strb.w	r2, [r0, #1124]	; 0x464
    	return false;
     54a:	2000      	movs	r0, #0
}
     54c:	bd10      	pop	{r4, pc}
        return true;
     54e:	2001      	movs	r0, #1
     550:	e7fc      	b.n	54c <delete_all+0x20>
	...

00000554 <root>:

fsm root {
     554:	b5f0      	push	{r4, r5, r6, r7, lr}
     556:	b085      	sub	sp, #20
     558:	2820      	cmp	r0, #32
     55a:	f200 8289 	bhi.w	a70 <root+0x51c>
     55e:	e8df f010 	tbh	[pc, r0, lsl #1]
     562:	00480021 	subeq	r0, r8, r1, lsr #32
     566:	00770055 	rsbseq	r0, r7, r5, asr r0
     56a:	008b007b 	addeq	r0, fp, fp, ror r0
     56e:	00b1008f 	adcseq	r0, r1, pc, lsl #1
     572:	00c900bc 	strheq	r0, [r9], #12
     576:	01390102 	teqeq	r9, r2, lsl #2
     57a:	0153014f 	cmpeq	r3, pc, asr #2
     57e:	01690165 	cmneq	r9, r5, ror #2
     582:	0196016e 	orrseq	r0, r6, lr, ror #2
     586:	01ac019a 			; <UNDEFINED> instruction: 0x01ac019a
     58a:	01c101b0 	strheq	r0, [r1, #16]
     58e:	01ed01e9 	mvneq	r0, r9, ror #3
     592:	020301ff 	andeq	r0, r3, #-1073741761	; 0xc000003f
     596:	023c0214 	eorseq	r0, ip, #20, 4	; 0x40000001
     59a:	024c0240 	subeq	r0, ip, #64, 4
     59e:	02760253 	rsbseq	r0, r6, #805306373	; 0x30000005
     5a2:	f240027d 	vqsub.s8	q8, q0, <illegal reg q14.5>

	
	state initialize_node:
		// cast node_db to struct node * and malloc to it the size of a struct node
		// setup node structure
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     5a6:	4084      	lsls	r4, r0
     5a8:	f001 faa6 	bl	1af8 <__pi_malloc>
     5ac:	4c76      	ldr	r4, [pc, #472]	; (788 <root+0x234>)
     5ae:	6020      	str	r0, [r4, #0]

		// Bool condition, check for failure
		init_node(node_db);
     5b0:	f7ff fde6 	bl	180 <init_node>

		phys_cc1350(0, MAX_PKT_LEN);
     5b4:	21fa      	movs	r1, #250	; 0xfa
     5b6:	2000      	movs	r0, #0
     5b8:	f002 fc56 	bl	2e68 <phys_cc1350>
				  the null plugin offers only a single session per physical interface. This session is explicitly 
				  setup (opened) through tcv_open().

			See docs section 3 pg11/20 for the struct of this plugin
		*/
		tcv_plug (0, &plug_null);
     5bc:	4973      	ldr	r1, [pc, #460]	; (78c <root+0x238>)
     5be:	2000      	movs	r0, #0
     5c0:	f001 fce8 	bl	1f94 <tcv_plug>
		   the abbreviation "sfd"). A return of -1 means an Error has occured.

		   NOTE: the maxmium number of sessions that can be open at any time is default 8. We can redfine this in
		   options.h by setting TCV_MAX_DESC to something higher.
		*/
		sfd = tcv_open (WNONE, 0, 0);
     5c4:	2200      	movs	r2, #0
     5c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
     5ca:	4611      	mov	r1, r2
     5cc:	f001 fc82 	bl	1ed4 <tcv_open>
     5d0:	4a6f      	ldr	r2, [pc, #444]	; (790 <root+0x23c>)

		if (sfd < 0) {
     5d2:	2800      	cmp	r0, #0
		sfd = tcv_open (WNONE, 0, 0);
     5d4:	6010      	str	r0, [r2, #0]
		if (sfd < 0) {
     5d6:	da04      	bge.n	5e2 <root+0x8e>
			diag("Cannot open tcv interface");
     5d8:	486e      	ldr	r0, [pc, #440]	; (794 <root+0x240>)
     5da:	f001 fb07 	bl	1bec <diag>
			halt();
     5de:	f000 ffd1 	bl	1584 <halt>

		  This function is referenced only twice in the docs. To my understainding, it determines if the
		  sfd is interpreted as a plugin id or a physical module. 
		
		*/
		tcv_control(sfd, PHYSOPT_ON, NULL);
     5e2:	2104      	movs	r1, #4
     5e4:	2200      	movs	r2, #0
     5e6:	f001 fdb9 	bl	215c <tcv_control>

		runfsm receiver(node_db);
     5ea:	6821      	ldr	r1, [r4, #0]
     5ec:	486a      	ldr	r0, [pc, #424]	; (798 <root+0x244>)
     5ee:	f001 fad7 	bl	1ba0 <__pi_fork>

	state menu:
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     5f2:	2028      	movs	r0, #40	; 0x28
     5f4:	4b64      	ldr	r3, [pc, #400]	; (788 <root+0x234>)
     5f6:	6819      	ldr	r1, [r3, #0]
     5f8:	780b      	ldrb	r3, [r1, #0]
     5fa:	884a      	ldrh	r2, [r1, #2]
     5fc:	9001      	str	r0, [sp, #4]
     5fe:	f891 1481 	ldrb.w	r1, [r1, #1153]	; 0x481
     602:	2001      	movs	r0, #1
     604:	9100      	str	r1, [sp, #0]
     606:	4965      	ldr	r1, [pc, #404]	; (79c <root+0x248>)
     608:	f002 f824 	bl	2654 <ser_outf>

	state get_choice:
		ser_inf(get_choice, "%c", &CHOICE);
     60c:	4c64      	ldr	r4, [pc, #400]	; (7a0 <root+0x24c>)
     60e:	2002      	movs	r0, #2
     610:	4622      	mov	r2, r4
     612:	4964      	ldr	r1, [pc, #400]	; (7a4 <root+0x250>)
     614:	f002 f848 	bl	26a8 <ser_inf>
		switch(CHOICE) {
     618:	7823      	ldrb	r3, [r4, #0]
     61a:	2b53      	cmp	r3, #83	; 0x53
     61c:	d80f      	bhi.n	63e <root+0xea>
     61e:	2b42      	cmp	r3, #66	; 0x42
     620:	d911      	bls.n	646 <root+0xf2>
     622:	3b43      	subs	r3, #67	; 0x43
     624:	2b10      	cmp	r3, #16
     626:	d80e      	bhi.n	646 <root+0xf2>
     628:	e8df f003 	tbb	[pc, r3]
     62c:	818b8583 	orrhi	r8, fp, r3, lsl #11
     630:	0d0d0d0f 	stceq	13, cr0, [sp, #-60]	; 0xffffffc4
     634:	7f0d0d0d 	svcvc	0x000d0d0d
     638:	870d0d0d 	strhi	r0, [sp, -sp, lsl #26]
     63c:	3b630089 	blcc	18c0868 <__ccfg+0x18a08c0>
     640:	b2da      	uxtb	r2, r3
     642:	2a10      	cmp	r2, #16
     644:	d9ee      	bls.n	624 <root+0xd0>
			case 'e':
			case 'E':
				proceed del_local;
				break;
			default:
				proceed menu;
     646:	2001      	movs	r0, #1
     648:	e000      	b.n	64c <root+0xf8>
				proceed get_new_group_id;
     64a:	2003      	movs	r0, #3
				proceed menu;
     64c:	f001 f8d4 	bl	17f8 <proceed>
				break;
		}

	state get_new_group_id:
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     650:	2003      	movs	r0, #3
     652:	4955      	ldr	r1, [pc, #340]	; (7a8 <root+0x254>)
     654:	f001 ff8c 	bl	2570 <ser_out>

	/*NOTE: Do we need to add new checks here? what are the limitations on group IDs*/
	state new_group_id:
		uint16_t NEW_NODE_GID;
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     658:	aa03      	add	r2, sp, #12
     65a:	4954      	ldr	r1, [pc, #336]	; (7ac <root+0x258>)
     65c:	2004      	movs	r0, #4
     65e:	f002 f823 	bl	26a8 <ser_inf>
		
		DEBUG_PRINT("setting node group ID");
     662:	4853      	ldr	r0, [pc, #332]	; (7b0 <root+0x25c>)
     664:	f001 fac2 	bl	1bec <diag>

		if (!set_node_gid(node_db, NEW_NODE_GID)){
     668:	4b47      	ldr	r3, [pc, #284]	; (788 <root+0x234>)
    node->gid = gid; 
     66a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     66e:	681b      	ldr	r3, [r3, #0]
			DEBUG_PRINT("setting node group ID failed");
			strncpy(reason, "Error setting node ID", 50);
			proceed invalid_node_id;
		};

		proceed menu;
     670:	2001      	movs	r0, #1
    node->gid = gid; 
     672:	805a      	strh	r2, [r3, #2]
		proceed menu;
     674:	f001 f8c0 	bl	17f8 <proceed>

	state get_new_node_id:
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     678:	2005      	movs	r0, #5
     67a:	494e      	ldr	r1, [pc, #312]	; (7b4 <root+0x260>)
     67c:	f001 ff78 	bl	2570 <ser_out>
	state new_node_id:
		uint8_t NEW_NODE_ID;
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);

		// Bool condition, check for failure
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     680:	4d41      	ldr	r5, [pc, #260]	; (788 <root+0x234>)
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     682:	494a      	ldr	r1, [pc, #296]	; (7ac <root+0x258>)
     684:	aa03      	add	r2, sp, #12
     686:	2006      	movs	r0, #6
     688:	f002 f80e 	bl	26a8 <ser_inf>
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     68c:	682a      	ldr	r2, [r5, #0]
     68e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    node->id = id;
     692:	7011      	strb	r1, [r2, #0]
			strncpy(reason, "Error setting node ID", 50);
			proceed invalid_node_id;
		};
		
		// Check to see if the number given is within range.
		if((node_db->id < 1) || (node_db->id > 25)){
     694:	682a      	ldr	r2, [r5, #0]
     696:	7812      	ldrb	r2, [r2, #0]
     698:	3a01      	subs	r2, #1
     69a:	2a18      	cmp	r2, #24
     69c:	d907      	bls.n	6ae <root+0x15a>
			strncpy(reason, "Out of Range", 50);
     69e:	4846      	ldr	r0, [pc, #280]	; (7b8 <root+0x264>)
     6a0:	2232      	movs	r2, #50	; 0x32
     6a2:	4946      	ldr	r1, [pc, #280]	; (7bc <root+0x268>)
     6a4:	f001 f935 	bl	1912 <__pi_strncpy>
			proceed invalid_node_id;
     6a8:	2007      	movs	r0, #7
     6aa:	f001 f8a5 	bl	17f8 <proceed>
fsm root {
     6ae:	2400      	movs	r4, #0
		};
		
		// Check to see if the number give is unique
		for(int i = 0; i < node_db->index; i++){
			if(node_db->id == node_db->nnodes[i]){
				strncpy(reason, "ID is already in use", 50);
     6b0:	4e43      	ldr	r6, [pc, #268]	; (7c0 <root+0x26c>)
     6b2:	4f41      	ldr	r7, [pc, #260]	; (7b8 <root+0x264>)
		for(int i = 0; i < node_db->index; i++){
     6b4:	682b      	ldr	r3, [r5, #0]
     6b6:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
     6ba:	42a2      	cmp	r2, r4
     6bc:	dc43      	bgt.n	746 <root+0x1f2>
				proceed invalid_node_id;
			};
		};
		
		proceed menu;
     6be:	2001      	movs	r0, #1
     6c0:	f001 f89a 	bl	17f8 <proceed>

	// NOTE: to prevent unwanted behaviour, we will likely want to clear the array in here
	state invalid_node_id:
		// NOTE: node_db->id will not be set if they provide an invalid reason, so we can't do this like this
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     6c4:	4b30      	ldr	r3, [pc, #192]	; (788 <root+0x234>)
     6c6:	2007      	movs	r0, #7
     6c8:	681a      	ldr	r2, [r3, #0]
     6ca:	493e      	ldr	r1, [pc, #248]	; (7c4 <root+0x270>)
     6cc:	4b3a      	ldr	r3, [pc, #232]	; (7b8 <root+0x264>)
     6ce:	7812      	ldrb	r2, [r2, #0]
     6d0:	f001 ffc0 	bl	2654 <ser_outf>
		proceed get_new_node_id;
     6d4:	2005      	movs	r0, #5
     6d6:	f001 f88f 	bl	17f8 <proceed>
		   
	  Then prints the list of neighbours
	
	*/
	state clear_neighbour_array:
		if (!clear_node_neighbour_array(node_db)){
     6da:	4b2b      	ldr	r3, [pc, #172]	; (788 <root+0x234>)
     6dc:	6818      	ldr	r0, [r3, #0]
     6de:	f7ff fd6a 	bl	1b6 <clear_node_neighbour_array>
     6e2:	b938      	cbnz	r0, 6f4 <root+0x1a0>
			strncpy(reason, "Error Clearing Node Array", 50);
     6e4:	4834      	ldr	r0, [pc, #208]	; (7b8 <root+0x264>)
     6e6:	2232      	movs	r2, #50	; 0x32
     6e8:	4937      	ldr	r1, [pc, #220]	; (7c8 <root+0x274>)
     6ea:	f001 f912 	bl	1912 <__pi_strncpy>
			proceed error;
     6ee:	2020      	movs	r0, #32
     6f0:	f001 f882 	bl	17f8 <proceed>
		};

	state find_proto_start:

		struct ResponseMessage *request_packet;
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     6f4:	201e      	movs	r0, #30
     6f6:	f001 f9ff 	bl	1af8 <__pi_malloc>

		request_packet->gid = node_db->gid;
		request_packet->tpe = DISCOVERY_REQUEST;
     6fa:	2500      	movs	r5, #0
		request_packet->gid = node_db->gid;
     6fc:	4e22      	ldr	r6, [pc, #136]	; (788 <root+0x234>)
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     6fe:	4604      	mov	r4, r0
		request_packet->gid = node_db->gid;
     700:	6833      	ldr	r3, [r6, #0]
     702:	885b      	ldrh	r3, [r3, #2]
		request_packet->tpe = DISCOVERY_REQUEST;
     704:	7085      	strb	r5, [r0, #2]
		request_packet->gid = node_db->gid;
     706:	8003      	strh	r3, [r0, #0]
		request_packet->request_number = generate_request_num();
     708:	f7ff fd4c 	bl	1a4 <generate_request_num>
     70c:	70e0      	strb	r0, [r4, #3]
		request_packet->sender_id = node_db->id;
     70e:	6833      	ldr	r3, [r6, #0]
		request_packet->receiver_id=0;

		call sender(request_packet, wait_discovery);
     710:	4621      	mov	r1, r4
		request_packet->sender_id = node_db->id;
     712:	781b      	ldrb	r3, [r3, #0]
		call sender(request_packet, wait_discovery);
     714:	482d      	ldr	r0, [pc, #180]	; (7cc <root+0x278>)
		request_packet->sender_id = node_db->id;
     716:	7123      	strb	r3, [r4, #4]
		request_packet->receiver_id=0;
     718:	7165      	strb	r5, [r4, #5]
		call sender(request_packet, wait_discovery);
     71a:	f001 fa41 	bl	1ba0 <__pi_fork>
     71e:	210a      	movs	r1, #10
     720:	f001 f8a8 	bl	1874 <__pi_join>
     724:	b1f8      	cbz	r0, 766 <root+0x212>
	
	state wait_discovery:
		if (discovery_wait_flag == 0){
			discovery_wait_flag=1;
			delay(3000, find_proto_start);
			release;
     726:	f000 fe01 	bl	132c <__pi_release>
				proceed get_new_node_id;
     72a:	2005      	movs	r0, #5
     72c:	e78e      	b.n	64c <root+0xf8>
				proceed clear_neighbour_array;
     72e:	2008      	movs	r0, #8
     730:	e78c      	b.n	64c <root+0xf8>
				proceed create_proto_start;
     732:	200c      	movs	r0, #12
     734:	e78a      	b.n	64c <root+0xf8>
				proceed start_delete_proto;
     736:	2011      	movs	r0, #17
     738:	e788      	b.n	64c <root+0xf8>
				proceed retrieve_proto;
     73a:	201a      	movs	r0, #26
     73c:	e786      	b.n	64c <root+0xf8>
				proceed display_db;
     73e:	201b      	movs	r0, #27
     740:	e784      	b.n	64c <root+0xf8>
				proceed del_local;
     742:	201d      	movs	r0, #29
     744:	e782      	b.n	64c <root+0xf8>
			if(node_db->id == node_db->nnodes[i]){
     746:	1919      	adds	r1, r3, r4
     748:	781a      	ldrb	r2, [r3, #0]
     74a:	f891 3468 	ldrb.w	r3, [r1, #1128]	; 0x468
     74e:	429a      	cmp	r2, r3
     750:	d107      	bne.n	762 <root+0x20e>
				strncpy(reason, "ID is already in use", 50);
     752:	4638      	mov	r0, r7
     754:	2232      	movs	r2, #50	; 0x32
     756:	4631      	mov	r1, r6
     758:	f001 f8db 	bl	1912 <__pi_strncpy>
				proceed invalid_node_id;
     75c:	2007      	movs	r0, #7
     75e:	f001 f84b 	bl	17f8 <proceed>
		for(int i = 0; i < node_db->index; i++){
     762:	3401      	adds	r4, #1
     764:	e7a6      	b.n	6b4 <root+0x160>
		if (discovery_wait_flag == 0){
     766:	4b1a      	ldr	r3, [pc, #104]	; (7d0 <root+0x27c>)
     768:	681a      	ldr	r2, [r3, #0]
     76a:	b93a      	cbnz	r2, 77c <root+0x228>
			discovery_wait_flag=1;
     76c:	2201      	movs	r2, #1
			delay(3000, find_proto_start);
     76e:	2109      	movs	r1, #9
			discovery_wait_flag=1;
     770:	601a      	str	r2, [r3, #0]
			delay(3000, find_proto_start);
     772:	f640 30b8 	movw	r0, #3000	; 0xbb8
     776:	f001 f88f 	bl	1898 <delay>
     77a:	e7d4      	b.n	726 <root+0x1d2>
		}
		if (discovery_wait_flag == 1){
     77c:	2a01      	cmp	r2, #1
     77e:	d129      	bne.n	7d4 <root+0x280>
			discovery_wait_flag=0;
     780:	2200      	movs	r2, #0
			delay(3000, display_neighbour_nodes);
     782:	210b      	movs	r1, #11
			discovery_wait_flag=0;
     784:	601a      	str	r2, [r3, #0]
			delay(3000, display_neighbour_nodes);
     786:	e7f4      	b.n	772 <root+0x21e>
     788:	2000069c 	mulcs	r0, ip, r6
     78c:	00005a04 	andeq	r5, r0, r4, lsl #20
     790:	20000000 	andcs	r0, r0, r0
     794:	00004b74 	andeq	r4, r0, r4, ror fp
     798:	000001e9 	andeq	r0, r0, r9, ror #3
     79c:	00004b8e 	andeq	r4, r0, lr, lsl #23
     7a0:	2000069a 	mulcs	r0, sl, r6
     7a4:	00004c7a 	andeq	r4, r0, sl, ror ip
     7a8:	00004c7d 	andeq	r4, r0, sp, ror ip
     7ac:	00004993 	muleq	r0, r3, r9
     7b0:	00004c9e 	muleq	r0, lr, ip
     7b4:	00004cb4 			; <UNDEFINED> instruction: 0x00004cb4
     7b8:	20000668 	andcs	r0, r0, r8, ror #12
     7bc:	00004ce7 	andeq	r4, r0, r7, ror #25
     7c0:	00004cf4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
     7c4:	00004d09 	andeq	r4, r0, r9, lsl #26
     7c8:	00004d36 	andeq	r4, r0, r6, lsr sp
     7cc:	000000c9 	andeq	r0, r0, r9, asr #1
     7d0:	20000554 	andcs	r0, r0, r4, asr r5
			release;
		}
	
	state display_neighbour_nodes:
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     7d4:	200b      	movs	r0, #11
     7d6:	49a8      	ldr	r1, [pc, #672]	; (a78 <root+0x524>)
     7d8:	f001 feca 	bl	2570 <ser_out>
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7dc:	2400      	movs	r4, #0
			if (node_db->nnodes[i] == 0) break;
     7de:	4ea7      	ldr	r6, [pc, #668]	; (a7c <root+0x528>)
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     7e0:	4da7      	ldr	r5, [pc, #668]	; (a80 <root+0x52c>)
			if (node_db->nnodes[i] == 0) break;
     7e2:	6833      	ldr	r3, [r6, #0]
     7e4:	4423      	add	r3, r4
     7e6:	f893 2468 	ldrb.w	r2, [r3, #1128]	; 0x468
     7ea:	b132      	cbz	r2, 7fa <root+0x2a6>
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     7ec:	4629      	mov	r1, r5
     7ee:	200b      	movs	r0, #11
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7f0:	3401      	adds	r4, #1
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     7f2:	f001 ff2f 	bl	2654 <ser_outf>
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7f6:	2c19      	cmp	r4, #25
     7f8:	d1f3      	bne.n	7e2 <root+0x28e>
		}
		proceed menu;
     7fa:	2001      	movs	r0, #1
     7fc:	f000 fffc 	bl	17f8 <proceed>
		4) if no repsone is received, the node indicates this to the user through UART
		5) if a response is received, the node sends through UART the appropriate response message
	
	*/
	state create_proto_start:
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     800:	200c      	movs	r0, #12
     802:	49a0      	ldr	r1, [pc, #640]	; (a84 <root+0x530>)
     804:	f001 feb4 	bl	2570 <ser_out>

	state get_id_for_create:
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     808:	4c9f      	ldr	r4, [pc, #636]	; (a88 <root+0x534>)
     80a:	200d      	movs	r0, #13
     80c:	4622      	mov	r2, r4
     80e:	499f      	ldr	r1, [pc, #636]	; (a8c <root+0x538>)
     810:	f001 ff4a 	bl	26a8 <ser_inf>

		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     814:	7823      	ldrb	r3, [r4, #0]
     816:	3b01      	subs	r3, #1
     818:	2b18      	cmp	r3, #24
     81a:	d907      	bls.n	82c <root+0x2d8>
			strncpy(reason, "Error: improper ID", 50);
     81c:	489c      	ldr	r0, [pc, #624]	; (a90 <root+0x53c>)
     81e:	2232      	movs	r2, #50	; 0x32
     820:	499c      	ldr	r1, [pc, #624]	; (a94 <root+0x540>)
     822:	f001 f876 	bl	1912 <__pi_strncpy>
			proceed error;
     826:	2020      	movs	r0, #32
     828:	f000 ffe6 	bl	17f8 <proceed>
		};

	state ask_for_record_to_create:
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     82c:	200e      	movs	r0, #14
     82e:	499a      	ldr	r1, [pc, #616]	; (a98 <root+0x544>)
     830:	f001 fe9e 	bl	2570 <ser_out>

	state get_record_to_create:
		ser_in(get_record_to_create, user_provided_record, 20);
     834:	2214      	movs	r2, #20
     836:	200f      	movs	r0, #15
     838:	4998      	ldr	r1, [pc, #608]	; (a9c <root+0x548>)
     83a:	f001 fecf 	bl	25dc <ser_in>

	state init_create_record_message:

		struct ResponseMessage *create_message;
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     83e:	201e      	movs	r0, #30
     840:	f001 f95a 	bl	1af8 <__pi_malloc>
		create_message->gid = node_db->gid;
     844:	4d8d      	ldr	r5, [pc, #564]	; (a7c <root+0x528>)
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     846:	4604      	mov	r4, r0
		create_message->gid = node_db->gid;
     848:	682b      	ldr	r3, [r5, #0]
     84a:	885b      	ldrh	r3, [r3, #2]
     84c:	8003      	strh	r3, [r0, #0]
		create_message->tpe = 2;
     84e:	2302      	movs	r3, #2
     850:	7083      	strb	r3, [r0, #2]
		create_message->request_number = generate_request_num();
     852:	f7ff fca7 	bl	1a4 <generate_request_num>
     856:	70e0      	strb	r0, [r4, #3]
		create_message->sender_id = node_db->id;
     858:	682b      	ldr	r3, [r5, #0]
		create_message->receiver_id = user_provided_receiver_id;
		strncpy(create_message->record, user_provided_record, 20);
     85a:	2214      	movs	r2, #20
		create_message->sender_id = node_db->id;
     85c:	781b      	ldrb	r3, [r3, #0]
		strncpy(create_message->record, user_provided_record, 20);
     85e:	498f      	ldr	r1, [pc, #572]	; (a9c <root+0x548>)
		create_message->sender_id = node_db->id;
     860:	7123      	strb	r3, [r4, #4]
		create_message->receiver_id = user_provided_receiver_id;
     862:	4b89      	ldr	r3, [pc, #548]	; (a88 <root+0x534>)
		strncpy(create_message->record, user_provided_record, 20);
     864:	f104 0008 	add.w	r0, r4, #8
		create_message->receiver_id = user_provided_receiver_id;
     868:	781b      	ldrb	r3, [r3, #0]
     86a:	7163      	strb	r3, [r4, #5]
		strncpy(create_message->record, user_provided_record, 20);
     86c:	f001 f851 	bl	1912 <__pi_strncpy>
		
		// Store create message type & request number for response message parsing
		response_checker[0] = create_message->request_number;
     870:	78e2      	ldrb	r2, [r4, #3]
     872:	4b8b      	ldr	r3, [pc, #556]	; (aa0 <root+0x54c>)
		response_checker[1] = create_message->tpe;

		call sender(create_message, wait);
     874:	4621      	mov	r1, r4
		response_checker[0] = create_message->request_number;
     876:	601a      	str	r2, [r3, #0]
		response_checker[1] = create_message->tpe;
     878:	78a2      	ldrb	r2, [r4, #2]
		call sender(create_message, wait);
     87a:	488a      	ldr	r0, [pc, #552]	; (aa4 <root+0x550>)
		response_checker[1] = create_message->tpe;
     87c:	605a      	str	r2, [r3, #4]
		call sender(create_message, wait);
     87e:	f001 f98f 	bl	1ba0 <__pi_fork>
     882:	211e      	movs	r1, #30
     884:	f000 fff6 	bl	1874 <__pi_join>
     888:	2800      	cmp	r0, #0
     88a:	f47f af4c 	bne.w	726 <root+0x1d2>
		3.The node then waits to receive the response message with a maximum waiting interval of 3 seconds 
		4.If no response is received, the node sends the following message through the UART “\r\nFailed to reach the destination”
		5.
	*/
	state start_delete_proto:
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     88e:	2011      	movs	r0, #17
     890:	497c      	ldr	r1, [pc, #496]	; (a84 <root+0x530>)
     892:	f001 fe6d 	bl	2570 <ser_out>

	state get_id_for_delete:
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     896:	4c7c      	ldr	r4, [pc, #496]	; (a88 <root+0x534>)
     898:	2012      	movs	r0, #18
     89a:	4622      	mov	r2, r4
     89c:	497b      	ldr	r1, [pc, #492]	; (a8c <root+0x538>)
     89e:	f001 ff03 	bl	26a8 <ser_inf>

		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     8a2:	7823      	ldrb	r3, [r4, #0]
     8a4:	3b01      	subs	r3, #1
     8a6:	2b18      	cmp	r3, #24
     8a8:	d907      	bls.n	8ba <root+0x366>
			strncpy(reason, "Error: improper node ID", 50);
     8aa:	4879      	ldr	r0, [pc, #484]	; (a90 <root+0x53c>)
     8ac:	2232      	movs	r2, #50	; 0x32
     8ae:	497e      	ldr	r1, [pc, #504]	; (aa8 <root+0x554>)
     8b0:	f001 f82f 	bl	1912 <__pi_strncpy>
			proceed error;
     8b4:	2020      	movs	r0, #32
     8b6:	f000 ff9f 	bl	17f8 <proceed>
		};

	state ask_for_record_index:
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     8ba:	2013      	movs	r0, #19
     8bc:	497b      	ldr	r1, [pc, #492]	; (aac <root+0x558>)
     8be:	f001 fe57 	bl	2570 <ser_out>

	state get_index_for_delete:
		ser_inf(get_index_for_delete, "%d", &user_provided_index);
     8c2:	4c7b      	ldr	r4, [pc, #492]	; (ab0 <root+0x55c>)
     8c4:	2014      	movs	r0, #20
     8c6:	4622      	mov	r2, r4
     8c8:	4970      	ldr	r1, [pc, #448]	; (a8c <root+0x538>)
     8ca:	f001 feed 	bl	26a8 <ser_inf>

		if (user_provided_index < 0 || user_provided_index > 40){
     8ce:	7823      	ldrb	r3, [r4, #0]
     8d0:	2b28      	cmp	r3, #40	; 0x28
     8d2:	d907      	bls.n	8e4 <root+0x390>
			strncpy(reason, "Error: invalid index", 50);
     8d4:	486e      	ldr	r0, [pc, #440]	; (a90 <root+0x53c>)
     8d6:	2232      	movs	r2, #50	; 0x32
     8d8:	4976      	ldr	r1, [pc, #472]	; (ab4 <root+0x560>)
     8da:	f001 f81a 	bl	1912 <__pi_strncpy>
			proceed error;
     8de:	2020      	movs	r0, #32
     8e0:	f000 ff8a 	bl	17f8 <proceed>
		};

	state init_delete_record_message:

		struct ResponseMessage *delete_record;
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     8e4:	201e      	movs	r0, #30
     8e6:	f001 f907 	bl	1af8 <__pi_malloc>
		delete_record->gid = node_db->gid;
		delete_record->tpe = DELETE_RECORD;
     8ea:	2203      	movs	r2, #3
		delete_record->gid = node_db->gid;
     8ec:	4c63      	ldr	r4, [pc, #396]	; (a7c <root+0x528>)
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     8ee:	9002      	str	r0, [sp, #8]
		delete_record->gid = node_db->gid;
     8f0:	6823      	ldr	r3, [r4, #0]
     8f2:	885b      	ldrh	r3, [r3, #2]
     8f4:	8003      	strh	r3, [r0, #0]
		delete_record->tpe = DELETE_RECORD;
     8f6:	9b02      	ldr	r3, [sp, #8]
     8f8:	709a      	strb	r2, [r3, #2]
		delete_record->request_number = generate_request_num();
     8fa:	9d02      	ldr	r5, [sp, #8]
     8fc:	f7ff fc52 	bl	1a4 <generate_request_num>
     900:	70e8      	strb	r0, [r5, #3]
		delete_record->sender_id = node_db->id;
     902:	6822      	ldr	r2, [r4, #0]
     904:	9b02      	ldr	r3, [sp, #8]
     906:	7812      	ldrb	r2, [r2, #0]
		delete_record->receiver_id = user_provided_receiver_id;
		delete_record->record_index = user_provided_index;
		// NOTE: something to do with padding here?

		// Store delete record message type & request number for response message parsing
		response_checker[0] = delete_record->request_number;
     908:	78d9      	ldrb	r1, [r3, #3]
		delete_record->sender_id = node_db->id;
     90a:	711a      	strb	r2, [r3, #4]
		delete_record->receiver_id = user_provided_receiver_id;
     90c:	4a5e      	ldr	r2, [pc, #376]	; (a88 <root+0x534>)
		response_checker[1] = delete_record->tpe;

		call sender(&delete_record, wait);
     90e:	4865      	ldr	r0, [pc, #404]	; (aa4 <root+0x550>)
		delete_record->receiver_id = user_provided_receiver_id;
     910:	7812      	ldrb	r2, [r2, #0]
     912:	715a      	strb	r2, [r3, #5]
		delete_record->record_index = user_provided_index;
     914:	4a66      	ldr	r2, [pc, #408]	; (ab0 <root+0x55c>)
     916:	7812      	ldrb	r2, [r2, #0]
     918:	771a      	strb	r2, [r3, #28]
		response_checker[0] = delete_record->request_number;
     91a:	4a61      	ldr	r2, [pc, #388]	; (aa0 <root+0x54c>)
     91c:	6011      	str	r1, [r2, #0]
		response_checker[1] = delete_record->tpe;
     91e:	789b      	ldrb	r3, [r3, #2]
		call sender(&delete_record, wait);
     920:	a902      	add	r1, sp, #8
		response_checker[1] = delete_record->tpe;
     922:	6053      	str	r3, [r2, #4]
		call sender(&delete_record, wait);
     924:	f001 f93c 	bl	1ba0 <__pi_fork>
     928:	211e      	movs	r1, #30
     92a:	f000 ffa3 	bl	1874 <__pi_join>
     92e:	2800      	cmp	r0, #0
     930:	f47f aef9 	bne.w	726 <root+0x1d2>
		3.The node then waits to receive the response message with a maximum waiting interval of 3 seconds 
		4.If no response is received, the node sends the following message through the UART “\r\nFailed to reach the destination”
		5.
	*/
	state start_retrieve_proto:
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     934:	2016      	movs	r0, #22
     936:	4953      	ldr	r1, [pc, #332]	; (a84 <root+0x530>)
     938:	f001 fe1a 	bl	2570 <ser_out>

	state get_id_for_retrieve:
		ser_inf(get_id_for_retrieve, "%d", &user_provided_receiver_id);
     93c:	4c52      	ldr	r4, [pc, #328]	; (a88 <root+0x534>)
     93e:	2017      	movs	r0, #23
     940:	4622      	mov	r2, r4
     942:	4952      	ldr	r1, [pc, #328]	; (a8c <root+0x538>)
     944:	f001 feb0 	bl	26a8 <ser_inf>

		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     948:	7823      	ldrb	r3, [r4, #0]
     94a:	3b01      	subs	r3, #1
     94c:	2b18      	cmp	r3, #24
     94e:	d907      	bls.n	960 <root+0x40c>
			strncpy(reason, "Error: improper node ID", 50);
     950:	484f      	ldr	r0, [pc, #316]	; (a90 <root+0x53c>)
     952:	2232      	movs	r2, #50	; 0x32
     954:	4954      	ldr	r1, [pc, #336]	; (aa8 <root+0x554>)
     956:	f000 ffdc 	bl	1912 <__pi_strncpy>
			proceed error;
     95a:	2020      	movs	r0, #32
     95c:	f000 ff4c 	bl	17f8 <proceed>
		};

	state ask_for_record_retrieve_index:
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     960:	2018      	movs	r0, #24
     962:	4952      	ldr	r1, [pc, #328]	; (aac <root+0x558>)
     964:	f001 fe04 	bl	2570 <ser_out>

	state get_index_for_retrieve:
		ser_inf(get_index_for_retrieve, "%d", &user_provided_index);
     968:	4c51      	ldr	r4, [pc, #324]	; (ab0 <root+0x55c>)
     96a:	2019      	movs	r0, #25
     96c:	4622      	mov	r2, r4
     96e:	4947      	ldr	r1, [pc, #284]	; (a8c <root+0x538>)
     970:	f001 fe9a 	bl	26a8 <ser_inf>

		if (user_provided_index < 0 || user_provided_index > 40){
     974:	7823      	ldrb	r3, [r4, #0]
     976:	2b28      	cmp	r3, #40	; 0x28
     978:	d907      	bls.n	98a <root+0x436>
			strncpy(reason, "Error: invalid index", 50);
     97a:	4845      	ldr	r0, [pc, #276]	; (a90 <root+0x53c>)
     97c:	2232      	movs	r2, #50	; 0x32
     97e:	494d      	ldr	r1, [pc, #308]	; (ab4 <root+0x560>)
     980:	f000 ffc7 	bl	1912 <__pi_strncpy>
			proceed error;
     984:	2020      	movs	r0, #32
     986:	f000 ff37 	bl	17f8 <proceed>
		};

	state retrieve_proto:

		struct ResponseMessage *retrieve_record;
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     98a:	201e      	movs	r0, #30
     98c:	f001 f8b4 	bl	1af8 <__pi_malloc>
		retrieve_record->gid = node_db->gid;
		retrieve_record->tpe = RETRIEVE_RECORD;
     990:	2204      	movs	r2, #4
		retrieve_record->gid = node_db->gid;
     992:	4c3a      	ldr	r4, [pc, #232]	; (a7c <root+0x528>)
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     994:	9003      	str	r0, [sp, #12]
		retrieve_record->gid = node_db->gid;
     996:	6823      	ldr	r3, [r4, #0]
     998:	885b      	ldrh	r3, [r3, #2]
     99a:	8003      	strh	r3, [r0, #0]
		retrieve_record->tpe = RETRIEVE_RECORD;
     99c:	9b03      	ldr	r3, [sp, #12]
     99e:	709a      	strb	r2, [r3, #2]
		retrieve_record->request_number = generate_request_num();
     9a0:	9d03      	ldr	r5, [sp, #12]
     9a2:	f7ff fbff 	bl	1a4 <generate_request_num>
     9a6:	70e8      	strb	r0, [r5, #3]
		retrieve_record->sender_id = node_db->id;
     9a8:	6822      	ldr	r2, [r4, #0]
     9aa:	9b03      	ldr	r3, [sp, #12]
     9ac:	7812      	ldrb	r2, [r2, #0]
		retrieve_record->receiver_id = user_provided_receiver_id;
		retrieve_record->record_index = user_provided_index;
		// NOTE: something to do with padding here?

		// Store retrieve record message type & request number for response message parsing
		response_checker[0] = retrieve_record->request_number;
     9ae:	78d9      	ldrb	r1, [r3, #3]
		retrieve_record->sender_id = node_db->id;
     9b0:	711a      	strb	r2, [r3, #4]
		retrieve_record->receiver_id = user_provided_receiver_id;
     9b2:	4a35      	ldr	r2, [pc, #212]	; (a88 <root+0x534>)
		response_checker[1] = retrieve_record->tpe;
		
		call sender(&retrieve_record, wait);
     9b4:	483b      	ldr	r0, [pc, #236]	; (aa4 <root+0x550>)
		retrieve_record->receiver_id = user_provided_receiver_id;
     9b6:	7812      	ldrb	r2, [r2, #0]
     9b8:	715a      	strb	r2, [r3, #5]
		retrieve_record->record_index = user_provided_index;
     9ba:	4a3d      	ldr	r2, [pc, #244]	; (ab0 <root+0x55c>)
     9bc:	7812      	ldrb	r2, [r2, #0]
     9be:	771a      	strb	r2, [r3, #28]
		response_checker[0] = retrieve_record->request_number;
     9c0:	4a37      	ldr	r2, [pc, #220]	; (aa0 <root+0x54c>)
     9c2:	6011      	str	r1, [r2, #0]
		response_checker[1] = retrieve_record->tpe;
     9c4:	789b      	ldrb	r3, [r3, #2]
		call sender(&retrieve_record, wait);
     9c6:	a903      	add	r1, sp, #12
		response_checker[1] = retrieve_record->tpe;
     9c8:	6053      	str	r3, [r2, #4]
		call sender(&retrieve_record, wait);
     9ca:	f001 f8e9 	bl	1ba0 <__pi_fork>
     9ce:	211e      	movs	r1, #30
     9d0:	f000 ff50 	bl	1874 <__pi_join>
     9d4:	2800      	cmp	r0, #0
     9d6:	f47f aea6 	bne.w	726 <root+0x1d2>
		
	state display_db:
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     9da:	201b      	movs	r0, #27
     9dc:	4936      	ldr	r1, [pc, #216]	; (ab8 <root+0x564>)
     9de:	f001 fdc7 	bl	2570 <ser_out>
		
	state loop_through_data:
		if(node_db->data_base.item_count != 0){
     9e2:	4d26      	ldr	r5, [pc, #152]	; (a7c <root+0x528>)
     9e4:	682a      	ldr	r2, [r5, #0]
     9e6:	f892 2464 	ldrb.w	r2, [r2, #1124]	; 0x464
     9ea:	bb62      	cbnz	r2, a46 <root+0x4f2>
			for(int i = 0; i <= node_db->data_base.item_count; i++){
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
			}
		}
		ser_out(loop_through_data, "\r\n");
     9ec:	201c      	movs	r0, #28
     9ee:	4933      	ldr	r1, [pc, #204]	; (abc <root+0x568>)
     9f0:	f001 fdbe 	bl	2570 <ser_out>
		proceed menu;
     9f4:	2001      	movs	r0, #1
     9f6:	f000 feff 	bl	17f8 <proceed>

	state del_local:
		delete_all(node_db);
     9fa:	4b20      	ldr	r3, [pc, #128]	; (a7c <root+0x528>)
     9fc:	6818      	ldr	r0, [r3, #0]
     9fe:	f7ff fd95 	bl	52c <delete_all>
		proceed menu;
     a02:	2001      	movs	r0, #1
     a04:	f000 fef8 	bl	17f8 <proceed>

	state wait:
		delay(3000, timeout);
     a08:	211f      	movs	r1, #31
     a0a:	f640 30b8 	movw	r0, #3000	; 0xbb8
     a0e:	f000 ff43 	bl	1898 <delay>
		when(&response_flag, menu);
     a12:	2101      	movs	r1, #1
     a14:	482a      	ldr	r0, [pc, #168]	; (ac0 <root+0x56c>)
     a16:	f000 fef9 	bl	180c <__pi_wait>
		release;
     a1a:	e684      	b.n	726 <root+0x1d2>
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a1c:	fb06 f204 	mul.w	r2, r6, r4
     a20:	1898      	adds	r0, r3, r2
     a22:	3205      	adds	r2, #5
     a24:	4413      	add	r3, r2
     a26:	9301      	str	r3, [sp, #4]
     a28:	7903      	ldrb	r3, [r0, #4]
     a2a:	4622      	mov	r2, r4
     a2c:	9300      	str	r3, [sp, #0]
     a2e:	69c3      	ldr	r3, [r0, #28]
     a30:	4639      	mov	r1, r7
     a32:	201c      	movs	r0, #28
     a34:	f001 fe0e 	bl	2654 <ser_outf>
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     a38:	3401      	adds	r4, #1
     a3a:	682b      	ldr	r3, [r5, #0]
     a3c:	f893 2464 	ldrb.w	r2, [r3, #1124]	; 0x464
     a40:	42a2      	cmp	r2, r4
     a42:	daeb      	bge.n	a1c <root+0x4c8>
     a44:	e7d2      	b.n	9ec <root+0x498>
     a46:	2400      	movs	r4, #0
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a48:	261c      	movs	r6, #28
     a4a:	4f1e      	ldr	r7, [pc, #120]	; (ac4 <root+0x570>)
     a4c:	e7f5      	b.n	a3a <root+0x4e6>
	
	state timeout:
		ser_out(timeout, "\r\nFailed to reach the destination");
     a4e:	201f      	movs	r0, #31
     a50:	491d      	ldr	r1, [pc, #116]	; (ac8 <root+0x574>)
     a52:	f001 fd8d 	bl	2570 <ser_out>
		proceed menu;
     a56:	2001      	movs	r0, #1
     a58:	f000 fece 	bl	17f8 <proceed>
	
	// NOTE: to prevent unwanted behaviour, we will likely want to clear the array in here
	state error:
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     a5c:	2007      	movs	r0, #7
     a5e:	4a0c      	ldr	r2, [pc, #48]	; (a90 <root+0x53c>)
     a60:	491a      	ldr	r1, [pc, #104]	; (acc <root+0x578>)
     a62:	f001 fdf7 	bl	2654 <ser_outf>
		proceed menu;
     a66:	2001      	movs	r0, #1
     a68:	f000 fec6 	bl	17f8 <proceed>
}
     a6c:	b005      	add	sp, #20
     a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a70:	f000 fe3a 	bl	16e8 <__pi_badstate>
     a74:	e7fa      	b.n	a6c <root+0x518>
     a76:	bf00      	nop
     a78:	00004d50 	andeq	r4, r0, r0, asr sp
     a7c:	2000069c 	mulcs	r0, ip, r6
     a80:	00004d5e 	andeq	r4, r0, lr, asr sp
     a84:	00004d63 	andeq	r4, r0, r3, ror #26
     a88:	20000569 	andcs	r0, r0, r9, ror #10
     a8c:	0000508b 	andeq	r5, r0, fp, lsl #1
     a90:	20000668 	andcs	r0, r0, r8, ror #12
     a94:	00004d85 	andeq	r4, r0, r5, lsl #27
     a98:	00004d98 	muleq	r0, r8, sp
     a9c:	2000056a 	andcs	r0, r0, sl, ror #10
     aa0:	20000660 	andcs	r0, r0, r0, ror #12
     aa4:	000000c9 	andeq	r0, r0, r9, asr #1
     aa8:	00004dc1 	andeq	r4, r0, r1, asr #27
     aac:	00004dd9 	ldrdeq	r4, [r0], -r9
     ab0:	20000568 	andcs	r0, r0, r8, ror #10
     ab4:	00004e02 	andeq	r4, r0, r2, lsl #28
     ab8:	00004e17 	andeq	r4, r0, r7, lsl lr
     abc:	00004964 	andeq	r4, r0, r4, ror #18
     ac0:	20000560 	andcs	r0, r0, r0, ror #10
     ac4:	00004e40 	andeq	r4, r0, r0, asr #28
     ac8:	00004e50 	andeq	r4, r0, r0, asr lr
     acc:	00004e72 	andeq	r4, r0, r2, ror lr

00000ad0 <devinit_uart>:
			/* No return */
			return 0;
	}
}

static void devinit_uart (int devnum) {
     ad0:	4601      	mov	r1, r0

	adddevfunc (ioreq_uart_a, devnum);
     ad2:	4801      	ldr	r0, [pc, #4]	; (ad8 <devinit_uart+0x8>)
     ad4:	f000 bf3c 	b.w	1950 <adddevfunc>
     ad8:	00000e5d 	andeq	r0, r0, sp, asr lr

00000adc <udelay>:
void udelay (volatile word n) {
     adc:	b082      	sub	sp, #8
     ade:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     ae2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     ae6:	b29b      	uxth	r3, r3
     ae8:	b90b      	cbnz	r3, aee <udelay+0x12>
}
     aea:	b002      	add	sp, #8
     aec:	4770      	bx	lr
		_gdelay (__USEC_DELAY);
     aee:	2304      	movs	r3, #4
	while (n--);
     af0:	461a      	mov	r2, r3
     af2:	3b01      	subs	r3, #1
     af4:	b29b      	uxth	r3, r3
     af6:	2a00      	cmp	r2, #0
     af8:	d1fa      	bne.n	af0 <udelay+0x14>
		n--;
     afa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     afe:	3b01      	subs	r3, #1
     b00:	b29b      	uxth	r3, r3
     b02:	f8ad 3006 	strh.w	r3, [sp, #6]
     b06:	e7ec      	b.n	ae2 <udelay+0x6>

00000b08 <mdelay>:
void mdelay (volatile word n) {
     b08:	b507      	push	{r0, r1, r2, lr}
     b0a:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     b0e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     b12:	b29b      	uxth	r3, r3
     b14:	b913      	cbnz	r3, b1c <mdelay+0x14>
}
     b16:	b003      	add	sp, #12
     b18:	f85d fb04 	ldr.w	pc, [sp], #4
		udelay (999);
     b1c:	f240 30e7 	movw	r0, #999	; 0x3e7
     b20:	f7ff ffdc 	bl	adc <udelay>
		n--;
     b24:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     b28:	3b01      	subs	r3, #1
     b2a:	b29b      	uxth	r3, r3
     b2c:	f8ad 3006 	strh.w	r3, [sp, #6]
     b30:	e7ed      	b.n	b0e <mdelay+0x6>
	...

00000b34 <__pi_ondomain>:
void __pi_ondomain (lword d) {
     b34:	b538      	push	{r3, r4, r5, lr}
	if (d & PRCM_DOMAIN_RFCORE) {
     b36:	07c3      	lsls	r3, r0, #31
void __pi_ondomain (lword d) {
     b38:	4604      	mov	r4, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     b3a:	d505      	bpl.n	b48 <__pi_ondomain+0x14>
		if (__pi_systat.effpdm > 1)
     b3c:	4b0a      	ldr	r3, [pc, #40]	; (b68 <__pi_ondomain+0x34>)
     b3e:	78da      	ldrb	r2, [r3, #3]
     b40:	2a01      	cmp	r2, #1
			__pi_systat.effpdm = 1;
     b42:	bf84      	itt	hi
     b44:	2201      	movhi	r2, #1
     b46:	70da      	strbhi	r2, [r3, #3]
	PRCMPowerDomainOn (d);
     b48:	4d08      	ldr	r5, [pc, #32]	; (b6c <__pi_ondomain+0x38>)
     b4a:	4620      	mov	r0, r4
     b4c:	682b      	ldr	r3, [r5, #0]
     b4e:	695b      	ldr	r3, [r3, #20]
     b50:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     b52:	682b      	ldr	r3, [r5, #0]
     b54:	4620      	mov	r0, r4
     b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     b58:	4798      	blx	r3
     b5a:	2801      	cmp	r0, #1
     b5c:	d1f9      	bne.n	b52 <__pi_ondomain+0x1e>
	__pi_systat.ondmns |= d;
     b5e:	4b02      	ldr	r3, [pc, #8]	; (b68 <__pi_ondomain+0x34>)
     b60:	6858      	ldr	r0, [r3, #4]
     b62:	4304      	orrs	r4, r0
     b64:	605c      	str	r4, [r3, #4]
}
     b66:	bd38      	pop	{r3, r4, r5, pc}
     b68:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
     b6c:	100001b8 			; <UNDEFINED> instruction: 0x100001b8

00000b70 <__pi_offdomain>:
void __pi_offdomain (lword d) {
     b70:	b538      	push	{r3, r4, r5, lr}
	PRCMPowerDomainOff (d);
     b72:	4d0d      	ldr	r5, [pc, #52]	; (ba8 <__pi_offdomain+0x38>)
void __pi_offdomain (lword d) {
     b74:	4604      	mov	r4, r0
	PRCMPowerDomainOff (d);
     b76:	682b      	ldr	r3, [r5, #0]
     b78:	699b      	ldr	r3, [r3, #24]
     b7a:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     b7c:	682b      	ldr	r3, [r5, #0]
     b7e:	4620      	mov	r0, r4
     b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     b82:	4798      	blx	r3
     b84:	2802      	cmp	r0, #2
     b86:	d1f9      	bne.n	b7c <__pi_offdomain+0xc>
	if (d & PRCM_DOMAIN_RFCORE) {
     b88:	f014 0f01 	tst.w	r4, #1
     b8c:	4b07      	ldr	r3, [pc, #28]	; (bac <__pi_offdomain+0x3c>)
     b8e:	d006      	beq.n	b9e <__pi_offdomain+0x2e>
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     b90:	7899      	ldrb	r1, [r3, #2]
     b92:	78da      	ldrb	r2, [r3, #3]
     b94:	4291      	cmp	r1, r2
			__pi_systat.effpdm = __pi_systat.reqpdm;
     b96:	bf82      	ittt	hi
     b98:	789a      	ldrbhi	r2, [r3, #2]
     b9a:	b2d2      	uxtbhi	r2, r2
     b9c:	70da      	strbhi	r2, [r3, #3]
	__pi_systat.ondmns &= ~d;
     b9e:	6858      	ldr	r0, [r3, #4]
     ba0:	ea20 0404 	bic.w	r4, r0, r4
     ba4:	605c      	str	r4, [r3, #4]
}
     ba6:	bd38      	pop	{r3, r4, r5, pc}
     ba8:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     bac:	200006b4 			; <UNDEFINED> instruction: 0x200006b4

00000bb0 <__pi_syserror>:
void __pi_syserror (word ec, const char *m) {
     bb0:	460a      	mov	r2, r1
     bb2:	b580      	push	{r7, lr}
	diag ("SYSERR: %x, %s", ec, m);
     bb4:	4601      	mov	r1, r0
     bb6:	480f      	ldr	r0, [pc, #60]	; (bf4 <__pi_syserror+0x44>)
     bb8:	f001 f818 	bl	1bec <diag>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     bbc:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Set the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     bbe:	2540      	movs	r5, #64	; 0x40
     bc0:	462f      	mov	r7, r5
     bc2:	4e0d      	ldr	r6, [pc, #52]	; (bf8 <__pi_syserror+0x48>)
     bc4:	2480      	movs	r4, #128	; 0x80
		all_leds_blink;
     bc6:	490d      	ldr	r1, [pc, #52]	; (bfc <__pi_syserror+0x4c>)
     bc8:	6037      	str	r7, [r6, #0]
     bca:	6034      	str	r4, [r6, #0]
     bcc:	780b      	ldrb	r3, [r1, #0]
     bce:	780b      	ldrb	r3, [r1, #0]
     bd0:	20c8      	movs	r0, #200	; 0xc8
     bd2:	f36f 1307 	bfc	r3, #4, #4
     bd6:	700b      	strb	r3, [r1, #0]
     bd8:	f7ff ff96 	bl	b08 <mdelay>
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     bdc:	4b08      	ldr	r3, [pc, #32]	; (c00 <__pi_syserror+0x50>)
     bde:	20c8      	movs	r0, #200	; 0xc8
     be0:	601d      	str	r5, [r3, #0]
     be2:	601c      	str	r4, [r3, #0]
     be4:	780b      	ldrb	r3, [r1, #0]
     be6:	780b      	ldrb	r3, [r1, #0]
     be8:	f36f 1307 	bfc	r3, #4, #4
     bec:	700b      	strb	r3, [r1, #0]
     bee:	f7ff ff8b 	bl	b08 <mdelay>
	while (1) {
     bf2:	e7e7      	b.n	bc4 <__pi_syserror+0x14>
     bf4:	00004e7e 	andeq	r4, r0, lr, ror lr
     bf8:	40022090 	mulmi	r2, r0, r0
     bfc:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
     c00:	400220a0 	andmi	r2, r2, r0, lsr #1

00000c04 <tci_run_delay_timer>:
void tci_run_delay_timer () {
     c04:	b510      	push	{r4, lr}
	setdel = __pi_mintk - __pi_old;
     c06:	4b0a      	ldr	r3, [pc, #40]	; (c30 <tci_run_delay_timer+0x2c>)
     c08:	881c      	ldrh	r4, [r3, #0]
     c0a:	4b0a      	ldr	r3, [pc, #40]	; (c34 <tci_run_delay_timer+0x30>)
     c0c:	8818      	ldrh	r0, [r3, #0]
     c0e:	4b0a      	ldr	r3, [pc, #40]	; (c38 <tci_run_delay_timer+0x34>)
     c10:	1b00      	subs	r0, r0, r4
     c12:	b284      	uxth	r4, r0
     c14:	801c      	strh	r4, [r3, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c16:	f002 fe4b 	bl	38b0 <NOROM_AONRTCCurrent64BitValueGet>
	sti_tim;
     c1a:	2201      	movs	r2, #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c1c:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     c1e:	4b07      	ldr	r3, [pc, #28]	; (c3c <tci_run_delay_timer+0x38>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c20:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     c24:	eb00 1084 	add.w	r0, r0, r4, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     c28:	6018      	str	r0, [r3, #0]
	sti_tim;
     c2a:	4b05      	ldr	r3, [pc, #20]	; (c40 <tci_run_delay_timer+0x3c>)
     c2c:	601a      	str	r2, [r3, #0]
}
     c2e:	bd10      	pop	{r4, pc}
     c30:	200006b2 			; <UNDEFINED> instruction: 0x200006b2
     c34:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
     c38:	2000057e 	andcs	r0, r0, lr, ror r5
     c3c:	40092018 	andmi	r2, r9, r8, lsl r0
     c40:	43240280 			; <UNDEFINED> instruction: 0x43240280

00000c44 <tci_run_auxiliary_timer>:
	cli_aux;
     c44:	2300      	movs	r3, #0
void tci_run_auxiliary_timer () {
     c46:	b510      	push	{r4, lr}
	cli_aux;
     c48:	4c06      	ldr	r4, [pc, #24]	; (c64 <tci_run_auxiliary_timer+0x20>)
     c4a:	6023      	str	r3, [r4, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c4c:	f002 fe30 	bl	38b0 <NOROM_AONRTCCurrent64BitValueGet>
     c50:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     c52:	4b05      	ldr	r3, [pc, #20]	; (c68 <tci_run_auxiliary_timer+0x24>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c54:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     c58:	3040      	adds	r0, #64	; 0x40
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     c5a:	6018      	str	r0, [r3, #0]
	sti_aux;
     c5c:	2301      	movs	r3, #1
     c5e:	6023      	str	r3, [r4, #0]
}
     c60:	bd10      	pop	{r4, pc}
     c62:	bf00      	nop
     c64:	432402c0 			; <UNDEFINED> instruction: 0x432402c0
     c68:	40092020 	andmi	r2, r9, r0, lsr #32

00000c6c <AONRTCIntHandler>:
void AONRTCIntHandler () {
     c6c:	b510      	push	{r4, lr}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     c6e:	4b3b      	ldr	r3, [pc, #236]	; (d5c <AONRTCIntHandler+0xf0>)
     c70:	6818      	ldr	r0, [r3, #0]
     c72:	f000 1201 	and.w	r2, r0, #65537	; 0x10001
	if (events & AON_RTC_EVFLAGS_CH2) {
     c76:	03c4      	lsls	r4, r0, #15
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     c78:	601a      	str	r2, [r3, #0]
	if (events & AON_RTC_EVFLAGS_CH2) {
     c7a:	d542      	bpl.n	d02 <AONRTCIntHandler+0x96>
		if (__pi_utims [0] == 0)
     c7c:	4b38      	ldr	r3, [pc, #224]	; (d60 <AONRTCIntHandler+0xf4>)
     c7e:	6819      	ldr	r1, [r3, #0]
     c80:	2900      	cmp	r1, #0
     c82:	d053      	beq.n	d2c <AONRTCIntHandler+0xc0>
		if (*(__pi_utims [0])) {
     c84:	880a      	ldrh	r2, [r1, #0]
     c86:	2a00      	cmp	r2, #0
     c88:	d04e      	beq.n	d28 <AONRTCIntHandler+0xbc>
			(*(__pi_utims [0]))--;
     c8a:	3a01      	subs	r2, #1
     c8c:	800a      	strh	r2, [r1, #0]
			aux_timer_inactive = 0;
     c8e:	2200      	movs	r2, #0
		if (__pi_utims [1] == 0)
     c90:	685c      	ldr	r4, [r3, #4]
     c92:	b194      	cbz	r4, cba <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [1])) {
     c94:	8821      	ldrh	r1, [r4, #0]
     c96:	b111      	cbz	r1, c9e <AONRTCIntHandler+0x32>
			aux_timer_inactive = 0;
     c98:	2200      	movs	r2, #0
			(*(__pi_utims [1]))--;
     c9a:	3901      	subs	r1, #1
     c9c:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [2] == 0)
     c9e:	689c      	ldr	r4, [r3, #8]
     ca0:	b15c      	cbz	r4, cba <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [2])) {
     ca2:	8821      	ldrh	r1, [r4, #0]
     ca4:	b111      	cbz	r1, cac <AONRTCIntHandler+0x40>
			aux_timer_inactive = 0;
     ca6:	2200      	movs	r2, #0
			(*(__pi_utims [2]))--;
     ca8:	3901      	subs	r1, #1
     caa:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [3] != 0) {
     cac:	68d9      	ldr	r1, [r3, #12]
     cae:	b121      	cbz	r1, cba <AONRTCIntHandler+0x4e>
			if (*(__pi_utims [3])) {
     cb0:	880b      	ldrh	r3, [r1, #0]
     cb2:	b113      	cbz	r3, cba <AONRTCIntHandler+0x4e>
				aux_timer_inactive = 0;
     cb4:	2200      	movs	r2, #0
				(*(__pi_utims [3]))--;
     cb6:	3b01      	subs	r3, #1
     cb8:	800b      	strh	r3, [r1, #0]
/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

	if (__pi_systat.ledsts) {
     cba:	4b2a      	ldr	r3, [pc, #168]	; (d64 <AONRTCIntHandler+0xf8>)
     cbc:	7819      	ldrb	r1, [r3, #0]
     cbe:	0909      	lsrs	r1, r1, #4
     cc0:	d047      	beq.n	d52 <AONRTCIntHandler+0xe6>
		// Some leds are supposed to blink
		if (__pi_systat.ledblc++ == 0) {
     cc2:	7859      	ldrb	r1, [r3, #1]
     cc4:	1c4a      	adds	r2, r1, #1
     cc6:	b2d2      	uxtb	r2, r2
     cc8:	705a      	strb	r2, [r3, #1]
     cca:	b9d1      	cbnz	r1, d02 <AONRTCIntHandler+0x96>
			if (__pi_systat.ledblk) {
     ccc:	781a      	ldrb	r2, [r3, #0]
     cce:	f012 0f08 	tst.w	r2, #8
				if (__pi_systat.ledsts & 0x1)
     cd2:	781a      	ldrb	r2, [r3, #0]
			if (__pi_systat.ledblk) {
     cd4:	d02c      	beq.n	d30 <AONRTCIntHandler+0xc4>
				if (__pi_systat.ledsts & 0x1)
     cd6:	06d1      	lsls	r1, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     cd8:	bf42      	ittt	mi
     cda:	2140      	movmi	r1, #64	; 0x40
     cdc:	4a22      	ldrmi	r2, [pc, #136]	; (d68 <AONRTCIntHandler+0xfc>)
     cde:	6011      	strmi	r1, [r2, #0]
					LED0_ON;
				if (__pi_systat.ledsts & 0x2)
     ce0:	781a      	ldrb	r2, [r3, #0]
     ce2:	0692      	lsls	r2, r2, #26
     ce4:	bf42      	ittt	mi
     ce6:	2180      	movmi	r1, #128	; 0x80
     ce8:	4a1f      	ldrmi	r2, [pc, #124]	; (d68 <AONRTCIntHandler+0xfc>)
     cea:	6011      	strmi	r1, [r2, #0]
					LED1_ON;
				if (__pi_systat.ledsts & 0x4)
     cec:	781a      	ldrb	r2, [r3, #0]
					LED2_ON;
				if (__pi_systat.ledsts & 0x8)
     cee:	781a      	ldrb	r2, [r3, #0]
					LED3_ON;
				__pi_systat.ledblk = 0;
     cf0:	781a      	ldrb	r2, [r3, #0]
     cf2:	f36f 02c3 	bfc	r2, #3, #1
					LED1_OFF;
				if (__pi_systat.ledsts & 0x4)
					LED2_OFF;
				if (__pi_systat.ledsts & 0x8)
					LED3_OFF;
				__pi_systat.ledblk = 1;
     cf6:	701a      	strb	r2, [r3, #0]
			}
			if (__pi_systat.fstblk)
     cf8:	781a      	ldrb	r2, [r3, #0]
     cfa:	0752      	lsls	r2, r2, #29
     cfc:	d501      	bpl.n	d02 <AONRTCIntHandler+0x96>
				__pi_systat.ledblc = 200;
     cfe:	22c8      	movs	r2, #200	; 0xc8
     d00:	705a      	strb	r2, [r3, #1]
	if (events & AON_RTC_EVFLAGS_CH0) {
     d02:	07c3      	lsls	r3, r0, #31
     d04:	d50f      	bpl.n	d26 <AONRTCIntHandler+0xba>
		cli_tim;
     d06:	2100      	movs	r1, #0
     d08:	4b18      	ldr	r3, [pc, #96]	; (d6c <AONRTCIntHandler+0x100>)
		__pi_new += setdel;
     d0a:	4a19      	ldr	r2, [pc, #100]	; (d70 <AONRTCIntHandler+0x104>)
     d0c:	4819      	ldr	r0, [pc, #100]	; (d74 <AONRTCIntHandler+0x108>)
		cli_tim;
     d0e:	6019      	str	r1, [r3, #0]
		__pi_new += setdel;
     d10:	8803      	ldrh	r3, [r0, #0]
     d12:	8814      	ldrh	r4, [r2, #0]
		setdel = 0;
     d14:	8011      	strh	r1, [r2, #0]
		__pi_new += setdel;
     d16:	4423      	add	r3, r4
		RISE_N_SHINE;
     d18:	4a12      	ldr	r2, [pc, #72]	; (d64 <AONRTCIntHandler+0xf8>)
		__pi_new += setdel;
     d1a:	b29b      	uxth	r3, r3
     d1c:	8003      	strh	r3, [r0, #0]
		RISE_N_SHINE;
     d1e:	7813      	ldrb	r3, [r2, #0]
     d20:	f043 0302 	orr.w	r3, r3, #2
     d24:	7013      	strb	r3, [r2, #0]
}
     d26:	bd10      	pop	{r4, pc}
		aux_timer_inactive = 1;
     d28:	2201      	movs	r2, #1
     d2a:	e7b1      	b.n	c90 <AONRTCIntHandler+0x24>
     d2c:	2201      	movs	r2, #1
     d2e:	e7c4      	b.n	cba <AONRTCIntHandler+0x4e>
				if (__pi_systat.ledsts & 0x1)
     d30:	06d4      	lsls	r4, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d32:	bf42      	ittt	mi
     d34:	2140      	movmi	r1, #64	; 0x40
     d36:	4a10      	ldrmi	r2, [pc, #64]	; (d78 <AONRTCIntHandler+0x10c>)
     d38:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x2)
     d3a:	781a      	ldrb	r2, [r3, #0]
     d3c:	0691      	lsls	r1, r2, #26
     d3e:	bf42      	ittt	mi
     d40:	2180      	movmi	r1, #128	; 0x80
     d42:	4a0d      	ldrmi	r2, [pc, #52]	; (d78 <AONRTCIntHandler+0x10c>)
     d44:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x4)
     d46:	781a      	ldrb	r2, [r3, #0]
				if (__pi_systat.ledsts & 0x8)
     d48:	781a      	ldrb	r2, [r3, #0]
				__pi_systat.ledblk = 1;
     d4a:	781a      	ldrb	r2, [r3, #0]
     d4c:	f042 0208 	orr.w	r2, r2, #8
     d50:	e7d1      	b.n	cf6 <AONRTCIntHandler+0x8a>
		if (aux_timer_inactive) {
     d52:	2a00      	cmp	r2, #0
     d54:	d0d5      	beq.n	d02 <AONRTCIntHandler+0x96>
			cli_aux;
     d56:	4b09      	ldr	r3, [pc, #36]	; (d7c <AONRTCIntHandler+0x110>)
     d58:	6019      	str	r1, [r3, #0]
     d5a:	e7d2      	b.n	d02 <AONRTCIntHandler+0x96>
     d5c:	40092004 	andmi	r2, r9, r4
     d60:	200006c0 	andcs	r0, r0, r0, asr #13
     d64:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
     d68:	40022090 	mulmi	r2, r0, r0
     d6c:	43240280 			; <UNDEFINED> instruction: 0x43240280
     d70:	2000057e 	andcs	r0, r0, lr, ror r5
     d74:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
     d78:	400220a0 	andmi	r2, r2, r0, lsr #1
     d7c:	432402c0 			; <UNDEFINED> instruction: 0x432402c0

00000d80 <tci_update_delay_ticks>:
word tci_update_delay_ticks (Boolean force) {
     d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cli_tim;
     d82:	2600      	movs	r6, #0
     d84:	4b0e      	ldr	r3, [pc, #56]	; (dc0 <tci_update_delay_ticks+0x40>)
	if (setdel) {
     d86:	4f0f      	ldr	r7, [pc, #60]	; (dc4 <tci_update_delay_ticks+0x44>)
	cli_tim;
     d88:	601e      	str	r6, [r3, #0]
	if (setdel) {
     d8a:	883d      	ldrh	r5, [r7, #0]
     d8c:	b19d      	cbz	r5, db6 <tci_update_delay_ticks+0x36>
		if (force) {
     d8e:	b1a0      	cbz	r0, dba <tci_update_delay_ticks+0x3a>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d90:	4b0d      	ldr	r3, [pc, #52]	; (dc8 <tci_update_delay_ticks+0x48>)
     d92:	681c      	ldr	r4, [r3, #0]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     d94:	f002 fd8c 	bl	38b0 <NOROM_AONRTCCurrent64BitValueGet>
     d98:	0d80      	lsrs	r0, r0, #22
     d9a:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d9e:	f3c4 148f 	ubfx	r4, r4, #6, #16
				AON_RTC_O_CH0CMP)) - gettav ());
     da2:	b280      	uxth	r0, r0
     da4:	1a24      	subs	r4, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     da6:	1b2c      	subs	r4, r5, r4
	return NO;
     da8:	4635      	mov	r5, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     daa:	4b08      	ldr	r3, [pc, #32]	; (dcc <tci_update_delay_ticks+0x4c>)
			setdel = 0;
     dac:	803e      	strh	r6, [r7, #0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     dae:	881a      	ldrh	r2, [r3, #0]
     db0:	4414      	add	r4, r2
     db2:	b2a4      	uxth	r4, r4
     db4:	801c      	strh	r4, [r3, #0]
}
     db6:	4628      	mov	r0, r5
     db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sti_tim;
     dba:	2501      	movs	r5, #1
     dbc:	601d      	str	r5, [r3, #0]
		return YES;
     dbe:	e7fa      	b.n	db6 <tci_update_delay_ticks+0x36>
     dc0:	43240280 			; <UNDEFINED> instruction: 0x43240280
     dc4:	2000057e 	andcs	r0, r0, lr, ror r5
     dc8:	40092018 	andmi	r2, r9, r8, lsl r0
     dcc:	200006bc 			; <UNDEFINED> instruction: 0x200006bc

00000dd0 <__pi_uart_setrate>:
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     dd0:	b570      	push	{r4, r5, r6, lr}
	UARTDisable (UART0_BASE);
     dd2:	4e0f      	ldr	r6, [pc, #60]	; (e10 <__pi_uart_setrate+0x40>)
     dd4:	4d0f      	ldr	r5, [pc, #60]	; (e14 <__pi_uart_setrate+0x44>)
     dd6:	6833      	ldr	r3, [r6, #0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     dd8:	4604      	mov	r4, r0
	UARTDisable (UART0_BASE);
     dda:	68db      	ldr	r3, [r3, #12]
     ddc:	4628      	mov	r0, r5
     dde:	4798      	blx	r3
	UARTConfigSetExpClk (UART0_BASE,
     de0:	2264      	movs	r2, #100	; 0x64
     de2:	6833      	ldr	r3, [r6, #0]
     de4:	4628      	mov	r0, r5
     de6:	4362      	muls	r2, r4
     de8:	685e      	ldr	r6, [r3, #4]
     dea:	490b      	ldr	r1, [pc, #44]	; (e18 <__pi_uart_setrate+0x48>)
     dec:	2360      	movs	r3, #96	; 0x60
     dee:	47b0      	blx	r6
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     df0:	4a0a      	ldr	r2, [pc, #40]	; (e1c <__pi_uart_setrate+0x4c>)
}
     df2:	2001      	movs	r0, #1
     df4:	6813      	ldr	r3, [r2, #0]
     df6:	f043 0310 	orr.w	r3, r3, #16
     dfa:	6013      	str	r3, [r2, #0]

    //
    // Enable RX, TX, and the UART.
    //
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     dfc:	6853      	ldr	r3, [r2, #4]
     dfe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     e02:	f043 0301 	orr.w	r3, r3, #1
     e06:	6053      	str	r3, [r2, #4]
	urates [0] = rate;
     e08:	4b05      	ldr	r3, [pc, #20]	; (e20 <__pi_uart_setrate+0x50>)
     e0a:	801c      	strh	r4, [r3, #0]
}
     e0c:	bd70      	pop	{r4, r5, r6, pc}
     e0e:	bf00      	nop
     e10:	100001d0 	ldrdne	r0, [r0], -r0	; <UNPREDICTABLE>
     e14:	40001000 	andmi	r1, r0, r0
     e18:	02dc6c00 	sbcseq	r6, ip, #0, 24
     e1c:	4000102c 	andmi	r1, r0, ip, lsr #32
     e20:	20000580 	andcs	r0, r0, r0, lsl #11

00000e24 <reinit_uart>:
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e24:	4a08      	ldr	r2, [pc, #32]	; (e48 <reinit_uart+0x24>)
	__pi_uart_setrate (urates [0], __pi_uart);
     e26:	4909      	ldr	r1, [pc, #36]	; (e4c <reinit_uart+0x28>)
     e28:	6813      	ldr	r3, [r2, #0]
     e2a:	f043 0310 	orr.w	r3, r3, #16
     e2e:	6013      	str	r3, [r2, #0]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     e30:	2212      	movs	r2, #18
     e32:	4b07      	ldr	r3, [pc, #28]	; (e50 <reinit_uart+0x2c>)
     e34:	601a      	str	r2, [r3, #0]
    //
    // Check the arguments.
    //
    ASSERT( UARTBaseValid( ui32Base ));

    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     e36:	4a07      	ldr	r2, [pc, #28]	; (e54 <reinit_uart+0x30>)
     e38:	6813      	ldr	r3, [r2, #0]
     e3a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     e3e:	6013      	str	r3, [r2, #0]
     e40:	4b05      	ldr	r3, [pc, #20]	; (e58 <reinit_uart+0x34>)
     e42:	8818      	ldrh	r0, [r3, #0]
     e44:	f7ff bfc4 	b.w	dd0 <__pi_uart_setrate>
     e48:	4000102c 	andmi	r1, r0, ip, lsr #32
     e4c:	200006a0 	andcs	r0, r0, r0, lsr #13
     e50:	40001034 	andmi	r1, r0, r4, lsr r0
     e54:	40001030 	andmi	r1, r0, r0, lsr r0
     e58:	20000580 	andcs	r0, r0, r0, lsl #11

00000e5c <ioreq_uart_a>:
	switch (operation) {
     e5c:	3001      	adds	r0, #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     e5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     e62:	460d      	mov	r5, r1
     e64:	4614      	mov	r4, r2
     e66:	2803      	cmp	r0, #3
     e68:	d86e      	bhi.n	f48 <ioreq_uart_a+0xec>
     e6a:	e8df f000 	tbb	[pc, r0]
     e6e:	5a471253 	bpl	11c57c2 <__ccfg+0x11a581a>
				*buf++ = uart_a_read;
     e72:	f8d9 3000 	ldr.w	r3, [r9]
				len--;
     e76:	3e01      	subs	r6, #1
				*buf++ = uart_a_read;
     e78:	f805 3b01 	strb.w	r3, [r5], #1
			while (len && uart_a_char_available) {
     e7c:	b11e      	cbz	r6, e86 <ioreq_uart_a+0x2a>
     e7e:	f8d8 3000 	ldr.w	r3, [r8]
     e82:	06d8      	lsls	r0, r3, #27
     e84:	d5f5      	bpl.n	e72 <ioreq_uart_a+0x16>
			if (len != operation) {
     e86:	42a6      	cmp	r6, r4
     e88:	d00a      	beq.n	ea0 <ioreq_uart_a+0x44>
				return operation - len;
     e8a:	1ba4      	subs	r4, r4, r6
}
     e8c:	4620      	mov	r0, r4
     e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				*buf++ = uart_a_read;
     e92:	4616      	mov	r6, r2
			uart_a_disable_int;
     e94:	4f2e      	ldr	r7, [pc, #184]	; (f50 <ioreq_uart_a+0xf4>)
			if (uart_a_char_available) {
     e96:	f8df 80cc 	ldr.w	r8, [pc, #204]	; f64 <ioreq_uart_a+0x108>
				*buf++ = uart_a_read;
     e9a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; f68 <ioreq_uart_a+0x10c>
     e9e:	e7ed      	b.n	e7c <ioreq_uart_a+0x20>
			uart_a_disable_int;
     ea0:	683b      	ldr	r3, [r7, #0]
     ea2:	2015      	movs	r0, #21
     ea4:	695b      	ldr	r3, [r3, #20]
     ea6:	4798      	blx	r3
			if (uart_a_char_available) {
     ea8:	f8d8 3000 	ldr.w	r3, [r8]
     eac:	06d9      	lsls	r1, r3, #27
     eae:	d404      	bmi.n	eba <ioreq_uart_a+0x5e>
				uart_a_enable_int;
     eb0:	683b      	ldr	r3, [r7, #0]
     eb2:	2015      	movs	r0, #21
     eb4:	691b      	ldr	r3, [r3, #16]
     eb6:	4798      	blx	r3
				goto Redo_rx;
     eb8:	e7e0      	b.n	e7c <ioreq_uart_a+0x20>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     eba:	4a26      	ldr	r2, [pc, #152]	; (f54 <ioreq_uart_a+0xf8>)
     ebc:	7993      	ldrb	r3, [r2, #6]
     ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			return -2;
     ec2:	f06f 0401 	mvn.w	r4, #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     ec6:	7193      	strb	r3, [r2, #6]
			return -2;
     ec8:	e7e0      	b.n	e8c <ioreq_uart_a+0x30>
				uart_a_write (*buf);
     eca:	f815 3b01 	ldrb.w	r3, [r5], #1
				len--;
     ece:	3e01      	subs	r6, #1
				uart_a_write (*buf);
     ed0:	f8c9 3000 	str.w	r3, [r9]
			while (len && uart_a_room_in_tx) {
     ed4:	b11e      	cbz	r6, ede <ioreq_uart_a+0x82>
     ed6:	f8d8 3000 	ldr.w	r3, [r8]
     eda:	069a      	lsls	r2, r3, #26
     edc:	d5f5      	bpl.n	eca <ioreq_uart_a+0x6e>
			if (len != operation) {
     ede:	42a6      	cmp	r6, r4
     ee0:	d1d3      	bne.n	e8a <ioreq_uart_a+0x2e>
			uart_a_disable_int;
     ee2:	683b      	ldr	r3, [r7, #0]
     ee4:	2015      	movs	r0, #21
     ee6:	695b      	ldr	r3, [r3, #20]
     ee8:	4798      	blx	r3
			if (uart_a_room_in_tx) {
     eea:	f8d8 3000 	ldr.w	r3, [r8]
     eee:	069b      	lsls	r3, r3, #26
     ef0:	d40b      	bmi.n	f0a <ioreq_uart_a+0xae>
				uart_a_enable_int;
     ef2:	683b      	ldr	r3, [r7, #0]
     ef4:	2015      	movs	r0, #21
     ef6:	691b      	ldr	r3, [r3, #16]
     ef8:	4798      	blx	r3
				goto Redo_tx;
     efa:	e7eb      	b.n	ed4 <ioreq_uart_a+0x78>
				*buf++ = uart_a_read;
     efc:	4616      	mov	r6, r2
			uart_a_disable_int;
     efe:	4f14      	ldr	r7, [pc, #80]	; (f50 <ioreq_uart_a+0xf4>)
			if (uart_a_room_in_tx) {
     f00:	f8df 8060 	ldr.w	r8, [pc, #96]	; f64 <ioreq_uart_a+0x108>
				uart_a_write (*buf);
     f04:	f8df 9060 	ldr.w	r9, [pc, #96]	; f68 <ioreq_uart_a+0x10c>
     f08:	e7e4      	b.n	ed4 <ioreq_uart_a+0x78>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     f0a:	4a12      	ldr	r2, [pc, #72]	; (f54 <ioreq_uart_a+0xf8>)
     f0c:	7993      	ldrb	r3, [r2, #6]
     f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     f12:	e7d6      	b.n	ec2 <ioreq_uart_a+0x66>
			uart_a_enable_int;
     f14:	4b0e      	ldr	r3, [pc, #56]	; (f50 <ioreq_uart_a+0xf4>)
     f16:	2015      	movs	r0, #21
     f18:	681b      	ldr	r3, [r3, #0]
			return 0;
     f1a:	2400      	movs	r4, #0
			uart_a_enable_int;
     f1c:	691b      	ldr	r3, [r3, #16]
     f1e:	4798      	blx	r3
			return 0;
     f20:	e7b4      	b.n	e8c <ioreq_uart_a+0x30>
			if (len == UART_CNTRL_SETRATE) {
     f22:	2a01      	cmp	r2, #1
     f24:	d109      	bne.n	f3a <ioreq_uart_a+0xde>
				if (__pi_uart_setrate (*((word*)buf),
     f26:	490b      	ldr	r1, [pc, #44]	; (f54 <ioreq_uart_a+0xf8>)
     f28:	8828      	ldrh	r0, [r5, #0]
     f2a:	f7ff ff51 	bl	dd0 <__pi_uart_setrate>
     f2e:	2800      	cmp	r0, #0
     f30:	d1ac      	bne.n	e8c <ioreq_uart_a+0x30>
				syserror (EREQPAR, "uar");
     f32:	2003      	movs	r0, #3
     f34:	4908      	ldr	r1, [pc, #32]	; (f58 <ioreq_uart_a+0xfc>)
			syserror (ENOOPER, "uai");
     f36:	f7ff fe3b 	bl	bb0 <__pi_syserror>
			if (len == UART_CNTRL_GETRATE) {
     f3a:	2a02      	cmp	r2, #2
     f3c:	d104      	bne.n	f48 <ioreq_uart_a+0xec>
	return urates [0];
     f3e:	4b07      	ldr	r3, [pc, #28]	; (f5c <ioreq_uart_a+0x100>)
				return 1;
     f40:	2401      	movs	r4, #1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     f42:	881b      	ldrh	r3, [r3, #0]
     f44:	800b      	strh	r3, [r1, #0]
				return 1;
     f46:	e7a1      	b.n	e8c <ioreq_uart_a+0x30>
			syserror (ENOOPER, "uai");
     f48:	2002      	movs	r0, #2
     f4a:	4905      	ldr	r1, [pc, #20]	; (f60 <ioreq_uart_a+0x104>)
     f4c:	e7f3      	b.n	f36 <ioreq_uart_a+0xda>
     f4e:	bf00      	nop
     f50:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     f54:	200006a0 	andcs	r0, r0, r0, lsr #13
     f58:	00004e8d 	andeq	r4, r0, sp, lsl #29
     f5c:	20000580 	andcs	r0, r0, r0, lsl #11
     f60:	00004e91 	muleq	r0, r1, lr
     f64:	40001018 	andmi	r1, r0, r8, lsl r0
     f68:	40001000 	andmi	r1, r0, r0

00000f6c <UART0IntHandler>:
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     f6c:	f240 72f2 	movw	r2, #2034	; 0x7f2
}

void UART0IntHandler () {
     f70:	b530      	push	{r4, r5, lr}
     f72:	4b29      	ldr	r3, [pc, #164]	; (1018 <UART0IntHandler+0xac>)

	uart_a_clear_interrupts;

	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     f74:	4c29      	ldr	r4, [pc, #164]	; (101c <UART0IntHandler+0xb0>)
     f76:	601a      	str	r2, [r3, #0]
     f78:	6822      	ldr	r2, [r4, #0]
     f7a:	06d5      	lsls	r5, r2, #27
     f7c:	d423      	bmi.n	fc6 <UART0IntHandler+0x5a>
     f7e:	4b28      	ldr	r3, [pc, #160]	; (1020 <UART0IntHandler+0xb4>)
     f80:	799a      	ldrb	r2, [r3, #6]
     f82:	0610      	lsls	r0, r2, #24
     f84:	d51f      	bpl.n	fc6 <UART0IntHandler+0x5a>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     f86:	799a      	ldrb	r2, [r3, #6]
     f88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     f8c:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     f8e:	4a25      	ldr	r2, [pc, #148]	; (1024 <UART0IntHandler+0xb8>)
     f90:	7813      	ldrb	r3, [r2, #0]
     f92:	f043 0302 	orr.w	r3, r3, #2
     f96:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, READ));
     f98:	4b23      	ldr	r3, [pc, #140]	; (1028 <UART0IntHandler+0xbc>)
     f9a:	681a      	ldr	r2, [r3, #0]
     f9c:	b19a      	cbz	r2, fc6 <UART0IntHandler+0x5a>
     f9e:	4610      	mov	r0, r2
     fa0:	2300      	movs	r3, #0
     fa2:	f830 1b10 	ldrh.w	r1, [r0], #16
     fa6:	f001 0107 	and.w	r1, r1, #7
     faa:	4299      	cmp	r1, r3
     fac:	dd09      	ble.n	fc2 <UART0IntHandler+0x56>
     fae:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     fb2:	3301      	adds	r3, #1
     fb4:	f515 7f81 	cmn.w	r5, #258	; 0x102
     fb8:	d1f7      	bne.n	faa <UART0IntHandler+0x3e>
     fba:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     fbe:	889b      	ldrh	r3, [r3, #4]
     fc0:	8013      	strh	r3, [r2, #0]
     fc2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     fc4:	e7ea      	b.n	f9c <UART0IntHandler+0x30>
	}

	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     fc6:	6823      	ldr	r3, [r4, #0]
     fc8:	0699      	lsls	r1, r3, #26
     fca:	d424      	bmi.n	1016 <UART0IntHandler+0xaa>
     fcc:	4b14      	ldr	r3, [pc, #80]	; (1020 <UART0IntHandler+0xb4>)
     fce:	799a      	ldrb	r2, [r3, #6]
     fd0:	0652      	lsls	r2, r2, #25
     fd2:	d520      	bpl.n	1016 <UART0IntHandler+0xaa>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
		RISE_N_SHINE;
		i_trigger (devevent (UART_A, WRITE));
     fd4:	f46f 7480 	mvn.w	r4, #256	; 0x100
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     fd8:	799a      	ldrb	r2, [r3, #6]
     fda:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
     fde:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     fe0:	4a10      	ldr	r2, [pc, #64]	; (1024 <UART0IntHandler+0xb8>)
     fe2:	7813      	ldrb	r3, [r2, #0]
     fe4:	f043 0302 	orr.w	r3, r3, #2
     fe8:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, WRITE));
     fea:	4b0f      	ldr	r3, [pc, #60]	; (1028 <UART0IntHandler+0xbc>)
     fec:	681a      	ldr	r2, [r3, #0]
     fee:	b192      	cbz	r2, 1016 <UART0IntHandler+0xaa>
     ff0:	4610      	mov	r0, r2
     ff2:	2300      	movs	r3, #0
     ff4:	f830 1b10 	ldrh.w	r1, [r0], #16
     ff8:	f001 0107 	and.w	r1, r1, #7
     ffc:	4299      	cmp	r1, r3
     ffe:	dd08      	ble.n	1012 <UART0IntHandler+0xa6>
    1000:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    1004:	3301      	adds	r3, #1
    1006:	42a5      	cmp	r5, r4
    1008:	d1f8      	bne.n	ffc <UART0IntHandler+0x90>
    100a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    100e:	889b      	ldrh	r3, [r3, #4]
    1010:	8013      	strh	r3, [r2, #0]
    1012:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1014:	e7eb      	b.n	fee <UART0IntHandler+0x82>
	}

	RTNI;
}
    1016:	bd30      	pop	{r4, r5, pc}
    1018:	40001044 	andmi	r1, r0, r4, asr #32
    101c:	40001018 	andmi	r1, r0, r8, lsl r0
    1020:	200006a0 	andcs	r0, r0, r0, lsr #13
    1024:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
    1028:	20000584 	andcs	r0, r0, r4, lsl #11

0000102c <__buttons_setirq>:

// ============================================================================

#ifdef	BUTTON_LIST

void __buttons_setirq (int val) {
    102c:	b570      	push	{r4, r5, r6, lr}
    102e:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the event status for the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1030:	2101      	movs	r1, #1
	int i;
	lword bn;

	cli;
	for (i = 0; i < N_BUTTONS; i++) {
		bn = BUTTON_GPIO (__button_list [i]);
    1032:	4e0c      	ldr	r6, [pc, #48]	; (1064 <__buttons_setirq+0x38>)
    1034:	4d0c      	ldr	r5, [pc, #48]	; (1068 <__buttons_setirq+0x3c>)
    1036:	8833      	ldrh	r3, [r6, #0]
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1038:	4c0c      	ldr	r4, [pc, #48]	; (106c <__buttons_setirq+0x40>)
		bn = BUTTON_GPIO (__button_list [i]);
    103a:	0a1b      	lsrs	r3, r3, #8
    103c:	fa01 f203 	lsl.w	r2, r1, r3
    1040:	602a      	str	r2, [r5, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1042:	01da      	lsls	r2, r3, #7
		bn = BUTTON_GPIO (__button_list [i]);
    1044:	8873      	ldrh	r3, [r6, #2]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1046:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
		bn = BUTTON_GPIO (__button_list [i]);
    104a:	0a1b      	lsrs	r3, r3, #8
    104c:	4099      	lsls	r1, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    104e:	01db      	lsls	r3, r3, #7
    1050:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
    1054:	4322      	orrs	r2, r4
    1056:	4323      	orrs	r3, r4
    1058:	6010      	str	r0, [r2, #0]
    105a:	6029      	str	r1, [r5, #0]
    105c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    105e:	b662      	cpsie	i
			val;
	}
	sti;
}
    1060:	bd70      	pop	{r4, r5, r6, pc}
    1062:	bf00      	nop
    1064:	00005026 	andeq	r5, r0, r6, lsr #32
    1068:	400220e0 	andmi	r2, r2, r0, ror #1
    106c:	42000048 	andmi	r0, r0, #72	; 0x48

00001070 <__pinlist_setirq>:

#endif

#ifdef	INPUT_PIN_LIST

void __pinlist_setirq (int val) {
    1070:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1072:	b672      	cpsid	i

	int i;
	lword bn;

	cli;
	for (i = 0; i < N_PINLIST; i++) {
    1074:	2200      	movs	r2, #0
    1076:	2601      	movs	r6, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1078:	4f09      	ldr	r7, [pc, #36]	; (10a0 <__pinlist_setirq+0x30>)
    107a:	4c0a      	ldr	r4, [pc, #40]	; (10a4 <__pinlist_setirq+0x34>)
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    107c:	490a      	ldr	r1, [pc, #40]	; (10a8 <__pinlist_setirq+0x38>)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    107e:	5cbb      	ldrb	r3, [r7, r2]
	for (i = 0; i < N_PINLIST; i++) {
    1080:	3201      	adds	r2, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1086:	fa06 f503 	lsl.w	r5, r6, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    108a:	01db      	lsls	r3, r3, #7
    108c:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
    1090:	430b      	orrs	r3, r1
	for (i = 0; i < N_PINLIST; i++) {
    1092:	2a04      	cmp	r2, #4
    1094:	6025      	str	r5, [r4, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1096:	6018      	str	r0, [r3, #0]
	for (i = 0; i < N_PINLIST; i++) {
    1098:	d1f1      	bne.n	107e <__pinlist_setirq+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
    109a:	b662      	cpsie	i
			val;
	}
	sti;
}
    109c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    109e:	bf00      	nop
    10a0:	00005021 	andeq	r5, r0, r1, lsr #32
    10a4:	400220e0 	andmi	r2, r2, r0, ror #1
    10a8:	42000048 	andmi	r0, r0, #72	; 0x48

000010ac <GPIOIntHandler>:
void GPIOIntHandler () {
    10ac:	b570      	push	{r4, r5, r6, lr}
if (buttons_int) {
    10ae:	4c23      	ldr	r4, [pc, #140]	; (113c <GPIOIntHandler+0x90>)
    10b0:	6822      	ldr	r2, [r4, #0]
    10b2:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
    10b6:	d01e      	beq.n	10f6 <GPIOIntHandler+0x4a>
	buttons_disable ();
    10b8:	2000      	movs	r0, #0
    10ba:	f7ff ffb7 	bl	102c <__buttons_setirq>
	i_trigger ((aword)&__button_list);
    10be:	4b20      	ldr	r3, [pc, #128]	; (1140 <GPIOIntHandler+0x94>)
    10c0:	4d20      	ldr	r5, [pc, #128]	; (1144 <GPIOIntHandler+0x98>)
    10c2:	681a      	ldr	r2, [r3, #0]
    10c4:	b192      	cbz	r2, 10ec <GPIOIntHandler+0x40>
    10c6:	4610      	mov	r0, r2
    10c8:	2300      	movs	r3, #0
    10ca:	f830 1b10 	ldrh.w	r1, [r0], #16
    10ce:	f001 0107 	and.w	r1, r1, #7
    10d2:	4299      	cmp	r1, r3
    10d4:	dd08      	ble.n	10e8 <GPIOIntHandler+0x3c>
    10d6:	f850 6033 	ldr.w	r6, [r0, r3, lsl #3]
    10da:	3301      	adds	r3, #1
    10dc:	42ae      	cmp	r6, r5
    10de:	d1f8      	bne.n	10d2 <GPIOIntHandler+0x26>
    10e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    10e4:	889b      	ldrh	r3, [r3, #4]
    10e6:	8013      	strh	r3, [r2, #0]
    10e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    10ea:	e7eb      	b.n	10c4 <GPIOIntHandler+0x18>
	RISE_N_SHINE;
    10ec:	4a16      	ldr	r2, [pc, #88]	; (1148 <GPIOIntHandler+0x9c>)
    10ee:	7813      	ldrb	r3, [r2, #0]
    10f0:	f043 0302 	orr.w	r3, r3, #2
    10f4:	7013      	strb	r3, [r2, #0]
if (pin_sensor_int) {
    10f6:	6823      	ldr	r3, [r4, #0]
    10f8:	f013 5ff0 	tst.w	r3, #503316480	; 0x1e000000
    10fc:	d01d      	beq.n	113a <GPIOIntHandler+0x8e>
	i_trigger ((aword)(&__input_pins));
    10fe:	4b10      	ldr	r3, [pc, #64]	; (1140 <GPIOIntHandler+0x94>)
    1100:	4c12      	ldr	r4, [pc, #72]	; (114c <GPIOIntHandler+0xa0>)
    1102:	6818      	ldr	r0, [r3, #0]
    1104:	b190      	cbz	r0, 112c <GPIOIntHandler+0x80>
    1106:	4601      	mov	r1, r0
    1108:	2300      	movs	r3, #0
    110a:	f831 2b10 	ldrh.w	r2, [r1], #16
    110e:	f002 0207 	and.w	r2, r2, #7
    1112:	429a      	cmp	r2, r3
    1114:	dd08      	ble.n	1128 <GPIOIntHandler+0x7c>
    1116:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
    111a:	3301      	adds	r3, #1
    111c:	42a5      	cmp	r5, r4
    111e:	d1f8      	bne.n	1112 <GPIOIntHandler+0x66>
    1120:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    1124:	889b      	ldrh	r3, [r3, #4]
    1126:	8003      	strh	r3, [r0, #0]
    1128:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    112a:	e7eb      	b.n	1104 <GPIOIntHandler+0x58>
	__pinsen_disable_and_clear;
    112c:	f7ff ffa0 	bl	1070 <__pinlist_setirq>
	RISE_N_SHINE;
    1130:	4a05      	ldr	r2, [pc, #20]	; (1148 <GPIOIntHandler+0x9c>)
    1132:	7813      	ldrb	r3, [r2, #0]
    1134:	f043 0302 	orr.w	r3, r3, #2
    1138:	7013      	strb	r3, [r2, #0]
}
    113a:	bd70      	pop	{r4, r5, r6, pc}
    113c:	400220e0 	andmi	r2, r2, r0, ror #1
    1140:	20000584 	andcs	r0, r0, r4, lsl #11
    1144:	00005026 	andeq	r5, r0, r6, lsr #32
    1148:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
    114c:	00005021 	andeq	r5, r0, r1, lsr #32

00001150 <system_init>:
#endif

// ============================================================================
// ============================================================================

void system_init () {
    1150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	__pi_ondomain (PRCM_DOMAIN_PERIPH);

	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1154:	4c58      	ldr	r4, [pc, #352]	; (12b8 <system_init+0x168>)
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    1156:	2004      	movs	r0, #4
    1158:	f7ff fcec 	bl	b34 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    115c:	6823      	ldr	r3, [r4, #0]
    115e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    1162:	69db      	ldr	r3, [r3, #28]
    1164:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1166:	6823      	ldr	r3, [r4, #0]
    1168:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    116e:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1170:	6823      	ldr	r3, [r4, #0]
    1172:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    1176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1178:	4798      	blx	r3
PRCMLoadSet(void)
{
    //
    // Enable the update of all load related registers.
    //
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    117a:	2301      	movs	r3, #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    117c:	2600      	movs	r6, #0
    117e:	4c4f      	ldr	r4, [pc, #316]	; (12bc <system_init+0x16c>)
    1180:	4f4f      	ldr	r7, [pc, #316]	; (12c0 <system_init+0x170>)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1182:	f8df c17c 	ldr.w	ip, [pc, #380]	; 1300 <system_init+0x1b0>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1186:	f8df e17c 	ldr.w	lr, [pc, #380]	; 1304 <system_init+0x1b4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    118a:	f8df 8140 	ldr.w	r8, [pc, #320]	; 12cc <system_init+0x17c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    118e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 12c4 <system_init+0x174>
    1192:	6023      	str	r3, [r4, #0]
		pin = (port_confs [i] >> 19) & 0x1f;
    1194:	f857 5b04 	ldr.w	r5, [r7], #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1198:	3601      	adds	r6, #1
		pin = (port_confs [i] >> 19) & 0x1f;
    119a:	f3c5 42c4 	ubfx	r2, r5, #19, #5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    119e:	0091      	lsls	r1, r2, #2
    11a0:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
    11a4:	f500 2001 	add.w	r0, r0, #528384	; 0x81000
    11a8:	ea05 0a0c 	and.w	sl, r5, ip
    11ac:	f8c0 a000 	str.w	sl, [r0]
		if (port_confs [i] & 0x80)
    11b0:	0628      	lsls	r0, r5, #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    11b2:	bf44      	itt	mi
    11b4:	ea41 010e 	orrmi.w	r1, r1, lr
    11b8:	600b      	strmi	r3, [r1, #0]
		if (port_confs [i] & 0x40)
    11ba:	fa03 f202 	lsl.w	r2, r3, r2
    11be:	0669      	lsls	r1, r5, #25
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11c0:	bf4c      	ite	mi
    11c2:	f8c9 2000 	strmi.w	r2, [r9]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11c6:	f8c8 2000 	strpl.w	r2, [r8]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    11ca:	2e11      	cmp	r6, #17
    11cc:	d1e2      	bne.n	1194 <system_init+0x44>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11ce:	2540      	movs	r5, #64	; 0x40
    11d0:	2680      	movs	r6, #128	; 0x80
    11d2:	4b3c      	ldr	r3, [pc, #240]	; (12c4 <system_init+0x174>)

	// Initialize DIO ports
	port_config ();

#if	LEDS_DRIVER
	all_leds_blink;
    11d4:	493c      	ldr	r1, [pc, #240]	; (12c8 <system_init+0x178>)
    11d6:	601d      	str	r5, [r3, #0]
    11d8:	601e      	str	r6, [r3, #0]
    11da:	780b      	ldrb	r3, [r1, #0]
    11dc:	780b      	ldrb	r3, [r1, #0]
    11de:	20c8      	movs	r0, #200	; 0xc8
    11e0:	f36f 1307 	bfc	r3, #4, #4
    11e4:	700b      	strb	r3, [r1, #0]
    11e6:	f7ff fc8f 	bl	b08 <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11ea:	4b38      	ldr	r3, [pc, #224]	; (12cc <system_init+0x17c>)
    11ec:	20c8      	movs	r0, #200	; 0xc8
    11ee:	601d      	str	r5, [r3, #0]
    11f0:	601e      	str	r6, [r3, #0]

	// The autoincrement value on channel 2 set to 1 msec
	AONRTCIncValueCh2Set (TCI_TINCR (1));
	// Enable continuous operation of channel 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CHCTL,
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    11f2:	2601      	movs	r6, #1
	all_leds_blink;
    11f4:	780b      	ldrb	r3, [r1, #0]
    11f6:	780b      	ldrb	r3, [r1, #0]
    11f8:	f36f 1307 	bfc	r3, #4, #4
    11fc:	700b      	strb	r3, [r1, #0]
    11fe:	f7ff fc83 	bl	b08 <mdelay>
//
//*****************************************************************************
__STATIC_INLINE void
AONRTCIncValueCh2Set(uint32_t ui32IncValue)
{
    HWREG(AON_RTC_BASE + AON_RTC_O_CH2CMPINC) = ui32IncValue;
    1202:	4b33      	ldr	r3, [pc, #204]	; (12d0 <system_init+0x180>)

	// Define the combined event as consisting of channels 0 and 2 and
	// enable the clock
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1204:	4a33      	ldr	r2, [pc, #204]	; (12d4 <system_init+0x184>)
    1206:	601d      	str	r5, [r3, #0]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1208:	4b33      	ldr	r3, [pc, #204]	; (12d8 <system_init+0x188>)
		// For the radio
		AON_RTC_CTL_RTC_UPD_EN |
		AON_RTC_CTL_EN;

	// Enable RTC interrupts
	IntEnable (INT_AON_RTC_COMB);
    120a:	4d34      	ldr	r5, [pc, #208]	; (12dc <system_init+0x18c>)
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    120c:	601e      	str	r6, [r3, #0]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    120e:	4b34      	ldr	r3, [pc, #208]	; (12e0 <system_init+0x190>)
	IntEnable (INT_AON_RTC_COMB);
    1210:	2014      	movs	r0, #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1212:	601a      	str	r2, [r3, #0]
	IntEnable (INT_AON_RTC_COMB);
    1214:	682b      	ldr	r3, [r5, #0]
    1216:	691b      	ldr	r3, [r3, #16]
    1218:	4798      	blx	r3

	// Initialize the memory allocator
	__pi_malloc_init ();
    121a:	f000 fbf9 	bl	1a10 <__pi_malloc_init>

	// Enable GPIO interrupts
	IntEnable (INT_AON_GPIO_EDGE);
    121e:	682b      	ldr	r3, [r5, #0]
    1220:	2010      	movs	r0, #16
    1222:	691b      	ldr	r3, [r3, #16]
    1224:	4798      	blx	r3
		EMERGENCY_STARTUP_ACTION;
	}
#endif

#ifdef	NEED_SERIAL_DOMAIN
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1226:	2002      	movs	r0, #2
    1228:	f7ff fc84 	bl	b34 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    122c:	68ab      	ldr	r3, [r5, #8]
    122e:	f44f 7000 	mov.w	r0, #512	; 0x200
    1232:	69db      	ldr	r3, [r3, #28]
    1234:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1236:	68ab      	ldr	r3, [r5, #8]
    1238:	f44f 7000 	mov.w	r0, #512	; 0x200
    123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    123e:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1240:	68ab      	ldr	r3, [r5, #8]
    1242:	f44f 7000 	mov.w	r0, #512	; 0x200
    1246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1248:	4798      	blx	r3
	urates [0] = UART_RATE / 100;
    124a:	2260      	movs	r2, #96	; 0x60
    124c:	4b25      	ldr	r3, [pc, #148]	; (12e4 <system_init+0x194>)
    124e:	6026      	str	r6, [r4, #0]
    1250:	801a      	strh	r2, [r3, #0]
	reinit_uart ();
    1252:	f7ff fde7 	bl	e24 <reinit_uart>
	__pi_init_actuators ();
#endif

#ifdef	EXTRA_INITIALIZERS
	// Extra initialization
	EXTRA_INITIALIZERS;
    1256:	f001 f977 	bl	2548 <ee_open>
    125a:	f001 f97f 	bl	255c <ee_close>
#endif
	// If waking from shutdown, unfreeze the I/O
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    125e:	f003 fa49 	bl	46f4 <NOROM_SysCtrlResetSourceGet>
    1262:	2808      	cmp	r0, #8
    1264:	d11a      	bne.n	129c <system_init+0x14c>
AONIOCFreezeDisable(void)
{
    //
    // Set the AON IOC latches as transparent.
    //
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    1266:	4b20      	ldr	r3, [pc, #128]	; (12e8 <system_init+0x198>)
    1268:	601e      	str	r6, [r3, #0]
{
    //
    // Open the IO latches at AON_IOC level and in the padring
    //
    AONIOCFreezeDisable();
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    126a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    126e:	3b04      	subs	r3, #4
    1270:	601e      	str	r6, [r3, #0]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1272:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    1276:	3324      	adds	r3, #36	; 0x24
    1278:	681b      	ldr	r3, [r3, #0]
	}

#if	MAX_DEVICES
	for (int i = UART; i < MAX_DEVICES; i++)
		if (devinit [i] . init != NULL)
			devinit [i] . init (devinit [i] . param);
    127a:	2000      	movs	r0, #0
    127c:	f7ff fc28 	bl	ad0 <devinit_uart>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1280:	4a1a      	ldr	r2, [pc, #104]	; (12ec <system_init+0x19c>)
#endif

#ifdef	N_UARTS
	// The same for UART_DRIVER and UART_TCV
	enable_uart_interrupts ();
	IntEnable (INT_UART0_COMB);
    1282:	2015      	movs	r0, #21
    1284:	6813      	ldr	r3, [r2, #0]
    1286:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    128a:	6013      	str	r3, [r2, #0]
    128c:	4b13      	ldr	r3, [pc, #76]	; (12dc <system_init+0x18c>)
    128e:	681b      	ldr	r3, [r3, #0]
    1290:	691b      	ldr	r3, [r3, #16]
    1292:	4798      	blx	r3
#endif
	// Kick the auxiliary timer in case something is needed by the
	// drivers
	tci_run_auxiliary_timer ();
}
    1294:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tci_run_auxiliary_timer ();
    1298:	f7ff bcd4 	b.w	c44 <tci_run_auxiliary_timer>
		diag ("");
    129c:	4814      	ldr	r0, [pc, #80]	; (12f0 <system_init+0x1a0>)
    129e:	f000 fca5 	bl	1bec <diag>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    12a2:	4814      	ldr	r0, [pc, #80]	; (12f4 <system_init+0x1a4>)
    12a4:	f000 fca2 	bl	1bec <diag>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    12a8:	4913      	ldr	r1, [pc, #76]	; (12f8 <system_init+0x1a8>)
		diag ("Leftover RAM: %d bytes",
    12aa:	4814      	ldr	r0, [pc, #80]	; (12fc <system_init+0x1ac>)
    12ac:	f5c1 4198 	rsb	r1, r1, #19456	; 0x4c00
    12b0:	b289      	uxth	r1, r1
    12b2:	f000 fc9b 	bl	1bec <diag>
    12b6:	e7e0      	b.n	127a <system_init+0x12a>
    12b8:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
    12bc:	60082028 	andvs	r2, r8, r8, lsr #32
    12c0:	00004f08 	andeq	r4, r0, r8, lsl #30
    12c4:	40022090 	mulmi	r2, r0, r0
    12c8:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
    12cc:	400220a0 	andmi	r2, r2, r0, lsr #1
    12d0:	40092024 	andmi	r2, r9, r4, lsr #32
    12d4:	00050003 	andeq	r0, r5, r3
    12d8:	432402c8 			; <UNDEFINED> instruction: 0x432402c8
    12dc:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    12e0:	40092000 	andmi	r2, r9, r0
    12e4:	20000580 	andcs	r0, r0, r0, lsl #11
    12e8:	4009400c 	andmi	r4, r9, ip
    12ec:	40001038 	andmi	r1, r0, r8, lsr r0
    12f0:	00004966 	andeq	r4, r0, r6, ror #18
    12f4:	00004e95 	muleq	r0, r5, lr
    12f8:	200006d4 	ldrdcs	r0, [r0], -r4
    12fc:	00004ee1 	andeq	r4, r0, r1, ror #29
    1300:	7f077f3f 	svcvc	0x00077f3f
    1304:	42441a00 	submi	r1, r4, #0, 20

00001308 <setpowermode>:
//
	if (mode > 3)
		// This is the maximum
		mode = 3;

	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1308:	2803      	cmp	r0, #3
    130a:	4603      	mov	r3, r0
    130c:	bf28      	it	cs
    130e:	2303      	movcs	r3, #3
    1310:	4a05      	ldr	r2, [pc, #20]	; (1328 <setpowermode+0x20>)
    1312:	b2db      	uxtb	r3, r3
    1314:	2801      	cmp	r0, #1
    1316:	7093      	strb	r3, [r2, #2]
    1318:	d904      	bls.n	1324 <setpowermode+0x1c>
	    (__pi_systat.ondmns & PRCM_DOMAIN_RFCORE) == 0) ?
    131a:	6851      	ldr	r1, [r2, #4]
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    131c:	f011 0f01 	tst.w	r1, #1
    1320:	bf18      	it	ne
    1322:	2301      	movne	r3, #1
    1324:	70d3      	strb	r3, [r2, #3]
		mode : 1;
}
    1326:	4770      	bx	lr
    1328:	200006b4 			; <UNDEFINED> instruction: 0x200006b4

0000132c <__pi_release>:
	return sc;
}

#endif

__attribute__ ((noreturn)) void __pi_release () {
    132c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    1330:	b083      	sub	sp, #12
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1332:	4b79      	ldr	r3, [pc, #484]	; (1518 <__pi_release+0x1ec>)
    1334:	af00      	add	r7, sp, #0
    1336:	f383 8808 	msr	MSP, r3

	__set_MSP ((lword)(STACK_START));

	check_stack_overflow;
    133a:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
    133e:	681a      	ldr	r2, [r3, #0]
    1340:	4b76      	ldr	r3, [pc, #472]	; (151c <__pi_release+0x1f0>)
    1342:	429a      	cmp	r2, r3
    1344:	d127      	bne.n	1396 <__pi_release+0x6a>
SysCtrlAonSync(void)
{
    //
    // Sync the AON interface
    //
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1346:	4e76      	ldr	r6, [pc, #472]	; (1520 <__pi_release+0x1f4>)

#ifdef	MONITOR_PIN_SCHED
	_PVS (MONITOR_PIN_SCHED, 1);
#endif
	// Catch up with time
	update_n_wake (MAX_WORD, NO);
    1348:	2100      	movs	r1, #0
    134a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    134e:	f000 f9ed 	bl	172c <update_n_wake>

	// Run the first ready process
	for_all_tasks (__pi_curr) {
    1352:	4a74      	ldr	r2, [pc, #464]	; (1524 <__pi_release+0x1f8>)
    1354:	4b74      	ldr	r3, [pc, #464]	; (1528 <__pi_release+0x1fc>)
    1356:	6812      	ldr	r2, [r2, #0]
    1358:	601a      	str	r2, [r3, #0]
    135a:	681a      	ldr	r2, [r3, #0]
    135c:	b9fa      	cbnz	r2, 139e <__pi_release+0x72>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    135e:	4c73      	ldr	r4, [pc, #460]	; (152c <__pi_release+0x200>)
  __ASM volatile ("cpsid i" : : : "memory");
    1360:	b672      	cpsid	i
	entropy++;
#endif

#else	/* NOT SPIN_WHEN_HALTED */

	__SLEEP;
    1362:	4d73      	ldr	r5, [pc, #460]	; (1530 <__pi_release+0x204>)
    1364:	782b      	ldrb	r3, [r5, #0]
    1366:	f3c3 0240 	ubfx	r2, r3, #1, #1
    136a:	0798      	lsls	r0, r3, #30
    136c:	607a      	str	r2, [r7, #4]
    136e:	f100 80cd 	bmi.w	150c <__pi_release+0x1e0>
	system_event_count ++;
    1372:	4a70      	ldr	r2, [pc, #448]	; (1534 <__pi_release+0x208>)
    1374:	6813      	ldr	r3, [r2, #0]
    1376:	3301      	adds	r3, #1
    1378:	6013      	str	r3, [r2, #0]
	switch (__pi_systat.effpdm) {
    137a:	78ea      	ldrb	r2, [r5, #3]
    137c:	2a01      	cmp	r2, #1
    137e:	b2d3      	uxtb	r3, r2
    1380:	d017      	beq.n	13b2 <__pi_release+0x86>
    1382:	2b02      	cmp	r3, #2
    1384:	d031      	beq.n	13ea <__pi_release+0xbe>
    1386:	2b00      	cmp	r3, #0
    1388:	f040 8095 	bne.w	14b6 <__pi_release+0x18a>
			__WFI ();
    138c:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
    138e:	b662      	cpsie	i
    1390:	bf00      	nop
    1392:	bf00      	nop
    1394:	e7e4      	b.n	1360 <__pi_release+0x34>
	check_stack_overflow;
    1396:	200b      	movs	r0, #11
    1398:	4967      	ldr	r1, [pc, #412]	; (1538 <__pi_release+0x20c>)
    139a:	f7ff fc09 	bl	bb0 <__pi_syserror>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    139e:	6851      	ldr	r1, [r2, #4]
    13a0:	b129      	cbz	r1, 13ae <__pi_release+0x82>
    13a2:	8810      	ldrh	r0, [r2, #0]
    13a4:	0704      	lsls	r4, r0, #28
    13a6:	d102      	bne.n	13ae <__pi_release+0x82>
			(__pi_curr->code) (tstate (__pi_curr));
    13a8:	0900      	lsrs	r0, r0, #4
    13aa:	4788      	blx	r1
			goto Redo;
    13ac:	e7cc      	b.n	1348 <__pi_release+0x1c>
	for_all_tasks (__pi_curr) {
    13ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    13b0:	e7d2      	b.n	1358 <__pi_release+0x2c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    13b2:	4a62      	ldr	r2, [pc, #392]	; (153c <__pi_release+0x210>)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    13b4:	2020      	movs	r0, #32
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    13b6:	6813      	ldr	r3, [r2, #0]
    13b8:	f043 0301 	orr.w	r3, r3, #1
    13bc:	6013      	str	r3, [r2, #0]
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionEnable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    13be:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    13c2:	f043 0303 	orr.w	r3, r3, #3
    13c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    13ca:	4b5d      	ldr	r3, [pc, #372]	; (1540 <__pi_release+0x214>)
    13cc:	681b      	ldr	r3, [r3, #0]
    13ce:	699b      	ldr	r3, [r3, #24]
    13d0:	4798      	blx	r3
    13d2:	6833      	ldr	r3, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    13d4:	6823      	ldr	r3, [r4, #0]
    13d6:	f043 0304 	orr.w	r3, r3, #4
    13da:	6023      	str	r3, [r4, #0]
			__WFI ();
    13dc:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    13de:	6823      	ldr	r3, [r4, #0]
    13e0:	f023 0304 	bic.w	r3, r3, #4
    13e4:	6023      	str	r3, [r4, #0]
    13e6:	6833      	ldr	r3, [r6, #0]
}
    13e8:	e7d1      	b.n	138e <__pi_release+0x62>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    13ea:	f04f 0801 	mov.w	r8, #1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    13ee:	687a      	ldr	r2, [r7, #4]
    13f0:	4b54      	ldr	r3, [pc, #336]	; (1544 <__pi_release+0x218>)
    // Check the arguments.
    ASSERT((ui32Mode == AONWUC_AUX_WAKEUP) ||
           (ui32Mode == AONWUC_AUX_ALLOW_SLEEP));

    // Wake up the AUX domain.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    13f2:	f8df b188 	ldr.w	fp, [pc, #392]	; 157c <__pi_release+0x250>
    13f6:	601a      	str	r2, [r3, #0]
    13f8:	687b      	ldr	r3, [r7, #4]
			PRCMPowerDomainOff (__pi_systat.ondmns |
    13fa:	f8df a144 	ldr.w	sl, [pc, #324]	; 1540 <__pi_release+0x214>
    13fe:	f8cb 3000 	str.w	r3, [fp]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1402:	6833      	ldr	r3, [r6, #0]
    1404:	4b50      	ldr	r3, [pc, #320]	; (1548 <__pi_release+0x21c>)
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionDisable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1406:	f8df 9178 	ldr.w	r9, [pc, #376]	; 1580 <__pi_release+0x254>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    140a:	f8c3 8000 	str.w	r8, [r3]
    140e:	6868      	ldr	r0, [r5, #4]
    1410:	f8da 3000 	ldr.w	r3, [sl]
    1414:	f040 0020 	orr.w	r0, r0, #32
    1418:	699b      	ldr	r3, [r3, #24]
    141a:	4798      	blx	r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    141c:	4b4b      	ldr	r3, [pc, #300]	; (154c <__pi_release+0x220>)
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    141e:	2103      	movs	r1, #3
    1420:	f8c3 8000 	str.w	r8, [r3]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1424:	f8d9 3000 	ldr.w	r3, [r9]
    1428:	4849      	ldr	r0, [pc, #292]	; (1550 <__pi_release+0x224>)
    142a:	f023 0303 	bic.w	r3, r3, #3
    142e:	f8c9 3000 	str.w	r3, [r9]
    1432:	4b48      	ldr	r3, [pc, #288]	; (1554 <__pi_release+0x228>)
    1434:	681a      	ldr	r2, [r3, #0]
    1436:	6852      	ldr	r2, [r2, #4]
    1438:	4790      	blx	r2
			SysCtrlSetRechargeBeforePowerDown
    143a:	6878      	ldr	r0, [r7, #4]
    143c:	f003 f81a 	bl	4474 <NOROM_SysCtrlSetRechargeBeforePowerDown>
    1440:	6832      	ldr	r2, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1442:	6822      	ldr	r2, [r4, #0]
    1444:	f042 0204 	orr.w	r2, r2, #4
    1448:	6022      	str	r2, [r4, #0]
			__WFI ();
    144a:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    144c:	6822      	ldr	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    144e:	4b41      	ldr	r3, [pc, #260]	; (1554 <__pi_release+0x228>)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1450:	f022 0204 	bic.w	r2, r2, #4
    1454:	6022      	str	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    1456:	681b      	ldr	r3, [r3, #0]
    1458:	4641      	mov	r1, r8
    145a:	685b      	ldr	r3, [r3, #4]
    145c:	483c      	ldr	r0, [pc, #240]	; (1550 <__pi_release+0x224>)
    145e:	4798      	blx	r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1460:	f8d9 3000 	ldr.w	r3, [r9]
AONWUCPowerStatusGet(void)
{
    //
    // Return the power status.
    //
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1464:	4a3c      	ldr	r2, [pc, #240]	; (1558 <__pi_release+0x22c>)
    1466:	f043 0303 	orr.w	r3, r3, #3
    146a:	f8c9 3000 	str.w	r3, [r9]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    146e:	f8cb 8000 	str.w	r8, [fp]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1472:	6813      	ldr	r3, [r2, #0]
			while (!(AONWUCPowerStatusGet () &
    1474:	0699      	lsls	r1, r3, #26
    1476:	d5fc      	bpl.n	1472 <__pi_release+0x146>
			PRCMPowerDomainOn (__pi_systat.ondmns);
    1478:	f8da 3000 	ldr.w	r3, [sl]
    147c:	6868      	ldr	r0, [r5, #4]
    147e:	695b      	ldr	r3, [r3, #20]
    1480:	4798      	blx	r3
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    1482:	4d2f      	ldr	r5, [pc, #188]	; (1540 <__pi_release+0x214>)
    1484:	4b2a      	ldr	r3, [pc, #168]	; (1530 <__pi_release+0x204>)
    1486:	6858      	ldr	r0, [r3, #4]
    1488:	682b      	ldr	r3, [r5, #0]
    148a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    148c:	4798      	blx	r3
    148e:	2801      	cmp	r0, #1
    1490:	d1f8      	bne.n	1484 <__pi_release+0x158>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1492:	4b2d      	ldr	r3, [pc, #180]	; (1548 <__pi_release+0x21c>)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1494:	4a2d      	ldr	r2, [pc, #180]	; (154c <__pi_release+0x220>)
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1496:	6018      	str	r0, [r3, #0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1498:	2300      	movs	r3, #0
    149a:	6013      	str	r3, [r2, #0]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    149c:	4b29      	ldr	r3, [pc, #164]	; (1544 <__pi_release+0x218>)
    149e:	6018      	str	r0, [r3, #0]
    14a0:	6833      	ldr	r3, [r6, #0]
			SysCtrlAdjustRechargeAfterPowerDown ();
    14a2:	f003 f8f7 	bl	4694 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
			reinit_uart ();
    14a6:	f7ff fcbd 	bl	e24 <reinit_uart>
    14aa:	4a2c      	ldr	r2, [pc, #176]	; (155c <__pi_release+0x230>)
    14ac:	6813      	ldr	r3, [r2, #0]
    14ae:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    14b2:	6013      	str	r3, [r2, #0]
}
    14b4:	e76b      	b.n	138e <__pi_release+0x62>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    14b6:	4b2a      	ldr	r3, [pc, #168]	; (1560 <__pi_release+0x234>)
    14b8:	2001      	movs	r0, #1
    14ba:	681b      	ldr	r3, [r3, #0]
    14bc:	68db      	ldr	r3, [r3, #12]
    14be:	4798      	blx	r3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    14c0:	4a28      	ldr	r2, [pc, #160]	; (1564 <__pi_release+0x238>)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    14c2:	4929      	ldr	r1, [pc, #164]	; (1568 <__pi_release+0x23c>)
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    14c4:	6813      	ldr	r3, [r2, #0]
    14c6:	f023 0301 	bic.w	r3, r3, #1
    14ca:	6013      	str	r3, [r2, #0]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    14cc:	4b27      	ldr	r3, [pc, #156]	; (156c <__pi_release+0x240>)
    14ce:	681a      	ldr	r2, [r3, #0]
    14d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    14d4:	601a      	str	r2, [r3, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    14d6:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
    14da:	600a      	str	r2, [r1, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    14dc:	604a      	str	r2, [r1, #4]
    14de:	6832      	ldr	r2, [r6, #0]
__STATIC_INLINE void
AONWUCShutDownEnable(void)
{
    // Ensure the JTAG domain is turned off;
    // otherwise MCU domain can't be turned off.
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    14e0:	687a      	ldr	r2, [r7, #4]
    14e2:	601a      	str	r2, [r3, #0]

    // Enable shutdown of the device.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    14e4:	687a      	ldr	r2, [r7, #4]
    14e6:	4b22      	ldr	r3, [pc, #136]	; (1570 <__pi_release+0x244>)
    14e8:	601a      	str	r2, [r3, #0]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    14ea:	2201      	movs	r2, #1
    14ec:	4b21      	ldr	r3, [pc, #132]	; (1574 <__pi_release+0x248>)
    14ee:	601a      	str	r2, [r3, #0]
    14f0:	6833      	ldr	r3, [r6, #0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    14f2:	4a19      	ldr	r2, [pc, #100]	; (1558 <__pi_release+0x22c>)
    14f4:	6813      	ldr	r3, [r2, #0]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    14f6:	069b      	lsls	r3, r3, #26
    14f8:	d4fc      	bmi.n	14f4 <__pi_release+0x1c8>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    14fa:	2201      	movs	r2, #1
    14fc:	4b1e      	ldr	r3, [pc, #120]	; (1578 <__pi_release+0x24c>)
			PRCMPowerDomainOff (
    14fe:	2037      	movs	r0, #55	; 0x37
    1500:	601a      	str	r2, [r3, #0]
    1502:	4b0f      	ldr	r3, [pc, #60]	; (1540 <__pi_release+0x214>)
    1504:	681b      	ldr	r3, [r3, #0]
    1506:	699b      	ldr	r3, [r3, #24]
    1508:	4798      	blx	r3
			goto DeepSleep;
    150a:	e763      	b.n	13d4 <__pi_release+0xa8>
	__SLEEP;
    150c:	782b      	ldrb	r3, [r5, #0]
    150e:	f36f 0341 	bfc	r3, #1, #1
    1512:	702b      	strb	r3, [r5, #0]
    1514:	b662      	cpsie	i

#endif	/* SPIN_WHEN_HALTED */

	goto Redo;
    1516:	e717      	b.n	1348 <__pi_release+0x1c>
    1518:	20005000 	andcs	r5, r0, r0
    151c:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
    1520:	4009202c 	andmi	r2, r9, ip, lsr #32
    1524:	20000584 	andcs	r0, r0, r4, lsl #11
    1528:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    152c:	e000ed10 	and	lr, r0, r0, lsl sp
    1530:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
    1534:	200006a8 	andcs	r0, r0, r8, lsr #13
    1538:	00004ef8 	strdeq	r4, [r0], -r8
    153c:	4008218c 	andmi	r2, r8, ip, lsl #3
    1540:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
    1544:	4009400c 	andmi	r4, r9, ip
    1548:	60082028 	andvs	r2, r8, r8, lsr #32
    154c:	43040180 	movwmi	r0, #16768	; 0x4180
    1550:	40034000 	andmi	r4, r3, r0
    1554:	100001d8 	ldrdne	r0, [r0], -r8
    1558:	40091014 	andmi	r1, r9, r4, lsl r0
    155c:	40001038 	andmi	r1, r0, r8, lsr r0
    1560:	100001a0 	andne	r0, r0, r0, lsr #3
    1564:	40091010 	andmi	r1, r9, r0, lsl r0
    1568:	40093000 	andmi	r3, r9, r0
    156c:	40091040 	andmi	r1, r9, r0, asr #32
    1570:	43220420 			; <UNDEFINED> instruction: 0x43220420
    1574:	40091018 	andmi	r1, r9, r8, lsl r0
    1578:	43040188 	movwmi	r0, #16776	; 0x4188
    157c:	43220200 			; <UNDEFINED> instruction: 0x43220200
    1580:	40082224 	andmi	r2, r8, r4, lsr #4

00001584 <halt>:
	cli_tim;
    1584:	2400      	movs	r4, #0
void halt (void) {
    1586:	b508      	push	{r3, lr}
	cli_tim;
    1588:	4b07      	ldr	r3, [pc, #28]	; (15a8 <halt+0x24>)
	diag ("PicOS halted");
    158a:	4808      	ldr	r0, [pc, #32]	; (15ac <halt+0x28>)
	cli_tim;
    158c:	601c      	str	r4, [r3, #0]
	diag ("PicOS halted");
    158e:	f000 fb2d 	bl	1bec <diag>
	mdelay (500);
    1592:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1596:	f7ff fab7 	bl	b08 <mdelay>
	setpowermode (2);
    159a:	2002      	movs	r0, #2
    159c:	f7ff feb4 	bl	1308 <setpowermode>
	__PCB = NULL;
    15a0:	4b03      	ldr	r3, [pc, #12]	; (15b0 <halt+0x2c>)
    15a2:	601c      	str	r4, [r3, #0]
	release;
    15a4:	f7ff fec2 	bl	132c <__pi_release>
    15a8:	43240280 			; <UNDEFINED> instruction: 0x43240280
    15ac:	00004efb 	strdeq	r4, [r0], -fp
    15b0:	20000584 	andcs	r0, r0, r4, lsl #11

000015b4 <main>:

#include "scheduler.h"

}

int main (void) {
    15b4:	b510      	push	{r4, lr}
    15b6:	4b11      	ldr	r3, [pc, #68]	; (15fc <main+0x48>)

#if	STACK_GUARD
	{
		register sint i;
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    15b8:	4911      	ldr	r1, [pc, #68]	; (1600 <main+0x4c>)
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    15ba:	4a12      	ldr	r2, [pc, #72]	; (1604 <main+0x50>)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    15bc:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    15c0:	4293      	cmp	r3, r2
    15c2:	d1fb      	bne.n	15bc <main+0x8>
#if	TCV_PRESENT
	tcv_init ();
#endif

	// For standby mode wakeup on timer
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    15c4:	4c10      	ldr	r4, [pc, #64]	; (1608 <main+0x54>)
	system_init ();
    15c6:	f7ff fdc3 	bl	1150 <system_init>
	tcv_init ();
    15ca:	f000 fef9 	bl	23c0 <tcv_init>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    15ce:	6823      	ldr	r3, [r4, #0]
    15d0:	2129      	movs	r1, #41	; 0x29
    15d2:	2000      	movs	r0, #0
    15d4:	681b      	ldr	r3, [r3, #0]
    15d6:	4798      	blx	r3
	// Edge on any I/O, will it take care of UART? No, of course not!
	// But it does work for buttons.
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    15d8:	6823      	ldr	r3, [r4, #0]
    15da:	2120      	movs	r1, #32
    15dc:	681b      	ldr	r3, [r3, #0]
    15de:	2001      	movs	r0, #1
    15e0:	4798      	blx	r3

	// Assume root process identity
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    15e2:	2100      	movs	r1, #0
    15e4:	4809      	ldr	r0, [pc, #36]	; (160c <main+0x58>)
    15e6:	f000 fadb 	bl	1ba0 <__pi_fork>
    15ea:	4b09      	ldr	r3, [pc, #36]	; (1610 <main+0x5c>)
	// Delay root startup for 16 msec to make sure that the drivers go
	// first
	delay (16, 0);
    15ec:	2100      	movs	r1, #0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    15ee:	6018      	str	r0, [r3, #0]
	delay (16, 0);
    15f0:	2010      	movs	r0, #16
    15f2:	f000 f951 	bl	1898 <delay>
    15f6:	b662      	cpsie	i

	sti;

	__pi_release ();
    15f8:	f7ff fe98 	bl	132c <__pi_release>
    15fc:	20004bfc 	strdcs	r4, [r0], -ip
    1600:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
    1604:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
    1608:	10000184 	andne	r0, r0, r4, lsl #3
    160c:	00000555 	andeq	r0, r0, r5, asr r5
    1610:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>

00001614 <killev>:
	}

	return i->Timer - __pi_old;
}

static void killev (__pi_pcb_t *pid) {
    1614:	b570      	push	{r4, r5, r6, lr}
	aword wfun;
	int j;
	__pi_pcb_t *i;

	wfun = (aword)(pid->code);
	for_all_tasks (i) {
    1616:	4b0d      	ldr	r3, [pc, #52]	; (164c <killev+0x38>)
	wfun = (aword)(pid->code);
    1618:	6846      	ldr	r6, [r0, #4]
	for_all_tasks (i) {
    161a:	681a      	ldr	r2, [r3, #0]
    161c:	b1aa      	cbz	r2, 164a <killev+0x36>
		for (j = 0; j < nevents (i); j++) {
    161e:	4614      	mov	r4, r2
    1620:	f834 1b10 	ldrh.w	r1, [r4], #16
    1624:	2300      	movs	r3, #0
    1626:	f001 0107 	and.w	r1, r1, #7
    162a:	e001      	b.n	1630 <killev+0x1c>
			if (i->Events [j] . Event == (aword)pid
			    || i->Events [j] . Event == wfun
    162c:	42b5      	cmp	r5, r6
    162e:	d006      	beq.n	163e <killev+0x2a>
		for (j = 0; j < nevents (i); j++) {
    1630:	4299      	cmp	r1, r3
    1632:	dd08      	ble.n	1646 <killev+0x32>
			if (i->Events [j] . Event == (aword)pid
    1634:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    1638:	3301      	adds	r3, #1
    163a:	42a8      	cmp	r0, r5
    163c:	d1f6      	bne.n	162c <killev+0x18>
			    ) {
				wakeupev (i, j);
    163e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1642:	889b      	ldrh	r3, [r3, #4]
    1644:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    1646:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1648:	e7e8      	b.n	161c <killev+0x8>
				break;
			}
		}
	}
}
    164a:	bd70      	pop	{r4, r5, r6, pc}
    164c:	20000584 	andcs	r0, r0, r4, lsl #11

00001650 <qfree>:
	// volatile
#endif
	aword *chunk, *cc;

	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1650:	4a1d      	ldr	r2, [pc, #116]	; (16c8 <qfree+0x78>)
static void qfree (aword *ch) {
    1652:	b530      	push	{r4, r5, lr}
    1654:	4614      	mov	r4, r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1656:	6813      	ldr	r3, [r2, #0]
    1658:	b93b      	cbnz	r3, 166a <qfree+0x1a>
		}
	}

	/* Insert */
	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    165a:	6823      	ldr	r3, [r4, #0]
	cc = (aword*)(mpools + MA_NP);
    165c:	4a1a      	ldr	r2, [pc, #104]	; (16c8 <qfree+0x78>)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    165e:	bb53      	cbnz	r3, 16b6 <qfree+0x66>
		chunk = m_nextp (chunk))
			if (m_size (chunk) >= m_size (ch))
				break;

	m_setnextp (ch, chunk);
    1660:	6003      	str	r3, [r0, #0]
	m_setnextp (cc, ch);

#if	MALLOC_SAFE
	m_magic (ch) = MALLOC_MAGIC;
    1662:	4b1a      	ldr	r3, [pc, #104]	; (16cc <qfree+0x7c>)
	m_setnextp (cc, ch);
    1664:	6010      	str	r0, [r2, #0]
	m_magic (ch) = MALLOC_MAGIC;
    1666:	6043      	str	r3, [r0, #4]
#endif

#undef	MA_NP
}
    1668:	bd30      	pop	{r4, r5, pc}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    166a:	e953 1501 	ldrd	r1, r5, [r3, #-4]
    166e:	3101      	adds	r1, #1
    1670:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1674:	4288      	cmp	r0, r1
    1676:	d10b      	bne.n	1690 <qfree+0x40>
			m_setnextp (cc, m_nextp (chunk));
    1678:	6015      	str	r5, [r2, #0]
			m_size (chunk) += m_hdrlen + m_size (ch);
    167a:	f850 0c04 	ldr.w	r0, [r0, #-4]
    167e:	f853 1c04 	ldr.w	r1, [r3, #-4]
    1682:	4401      	add	r1, r0
    1684:	4618      	mov	r0, r3
    1686:	3101      	adds	r1, #1
    1688:	f843 1c04 	str.w	r1, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    168c:	681b      	ldr	r3, [r3, #0]
    168e:	e7e3      	b.n	1658 <qfree+0x8>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    1690:	f850 1c04 	ldr.w	r1, [r0, #-4]
    1694:	3101      	adds	r1, #1
    1696:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    169a:	428b      	cmp	r3, r1
			m_setnextp (cc, m_nextp (chunk));
    169c:	bf03      	ittte	eq
    169e:	6015      	streq	r5, [r2, #0]
			m_size (ch) += m_hdrlen + m_size (chunk);
    16a0:	f850 1c04 	ldreq.w	r1, [r0, #-4]
    16a4:	f853 5c04 	ldreq.w	r5, [r3, #-4]
    16a8:	461a      	movne	r2, r3
    16aa:	bf02      	ittt	eq
    16ac:	1949      	addeq	r1, r1, r5
    16ae:	3101      	addeq	r1, #1
    16b0:	f840 1c04 	streq.w	r1, [r0, #-4]
    16b4:	e7ea      	b.n	168c <qfree+0x3c>
			if (m_size (chunk) >= m_size (ch))
    16b6:	f853 4c04 	ldr.w	r4, [r3, #-4]
    16ba:	f850 1c04 	ldr.w	r1, [r0, #-4]
    16be:	428c      	cmp	r4, r1
    16c0:	d2ce      	bcs.n	1660 <qfree+0x10>
		chunk = m_nextp (chunk))
    16c2:	461a      	mov	r2, r3
    16c4:	681b      	ldr	r3, [r3, #0]
    16c6:	e7ca      	b.n	165e <qfree+0xe>
    16c8:	20000598 	mulcs	r0, r8, r5
    16cc:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}

000016d0 <dgout>:
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    16d0:	4a03      	ldr	r2, [pc, #12]	; (16e0 <dgout+0x10>)
    16d2:	6813      	ldr	r3, [r2, #0]

#if	dbg_level != 0 || DIAG_MESSAGES

static void dgout (word c) {

	diag_wait (a);
    16d4:	071b      	lsls	r3, r3, #28
    16d6:	d4fc      	bmi.n	16d2 <dgout+0x2>
	diag_wchar (c, a);
    16d8:	4b02      	ldr	r3, [pc, #8]	; (16e4 <dgout+0x14>)
    16da:	b2c0      	uxtb	r0, r0
    16dc:	6018      	str	r0, [r3, #0]
}
    16de:	4770      	bx	lr
    16e0:	40001018 	andmi	r1, r0, r8, lsl r0
    16e4:	40001000 	andmi	r1, r0, r0

000016e8 <__pi_badstate>:
	syserror (ESTATE, "state");
    16e8:	2007      	movs	r0, #7
void __pi_badstate (void) {
    16ea:	b508      	push	{r3, lr}
	syserror (ESTATE, "state");
    16ec:	4901      	ldr	r1, [pc, #4]	; (16f4 <__pi_badstate+0xc>)
    16ee:	f7ff fa5f 	bl	bb0 <__pi_syserror>
    16f2:	bf00      	nop
    16f4:	00004f4c 	andeq	r4, r0, ip, asr #30

000016f8 <utimer_add>:
	for (i = 0; i < MAX_UTIMERS; i++)
    16f8:	4a08      	ldr	r2, [pc, #32]	; (171c <utimer_add+0x24>)
void utimer_add (address ut) {
    16fa:	4603      	mov	r3, r0
    16fc:	4611      	mov	r1, r2
	for (i = 0; i < MAX_UTIMERS; i++)
    16fe:	2000      	movs	r0, #0
void utimer_add (address ut) {
    1700:	b510      	push	{r4, lr}
		if (__pi_utims [i] == NULL)
    1702:	f852 4b04 	ldr.w	r4, [r2], #4
    1706:	b12c      	cbz	r4, 1714 <utimer_add+0x1c>
	for (i = 0; i < MAX_UTIMERS; i++)
    1708:	3001      	adds	r0, #1
    170a:	2804      	cmp	r0, #4
    170c:	d1f9      	bne.n	1702 <utimer_add+0xa>
		syserror (ERESOURCE, "ut a");
    170e:	4904      	ldr	r1, [pc, #16]	; (1720 <utimer_add+0x28>)
    1710:	f7ff fa4e 	bl	bb0 <__pi_syserror>
	__pi_utims [i] = ut;
    1714:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
    1718:	bd10      	pop	{r4, pc}
    171a:	bf00      	nop
    171c:	200006c0 	andcs	r0, r0, r0, asr #13
    1720:	00004f52 	andeq	r4, r0, r2, asr pc

00001724 <__pi_utimer_set>:
	*t = v;
    1724:	8001      	strh	r1, [r0, #0]
	TCI_RUN_AUXILIARY_TIMER;
    1726:	f7ff ba8d 	b.w	c44 <tci_run_auxiliary_timer>
	...

0000172c <update_n_wake>:
void update_n_wake (word min, Boolean force) {
    172c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    172e:	4604      	mov	r4, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
    1730:	4608      	mov	r0, r1
    1732:	f7ff fb25 	bl	d80 <tci_update_delay_ticks>
    1736:	2800      	cmp	r0, #0
    1738:	d154      	bne.n	17e4 <update_n_wake+0xb8>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    173a:	4b2b      	ldr	r3, [pc, #172]	; (17e8 <update_n_wake+0xbc>)
    173c:	4d2b      	ldr	r5, [pc, #172]	; (17ec <update_n_wake+0xc0>)
    173e:	8819      	ldrh	r1, [r3, #0]
    1740:	882a      	ldrh	r2, [r5, #0]
    1742:	b289      	uxth	r1, r1
    1744:	428a      	cmp	r2, r1
    1746:	492a      	ldr	r1, [pc, #168]	; (17f0 <update_n_wake+0xc4>)
    1748:	d803      	bhi.n	1752 <update_n_wake+0x26>
    174a:	8808      	ldrh	r0, [r1, #0]
    174c:	b280      	uxth	r0, r0
    174e:	4282      	cmp	r2, r0
    1750:	d20d      	bcs.n	176e <update_n_wake+0x42>
    1752:	881e      	ldrh	r6, [r3, #0]
    1754:	8808      	ldrh	r0, [r1, #0]
    1756:	b2b6      	uxth	r6, r6
    1758:	b280      	uxth	r0, r0
    175a:	4286      	cmp	r6, r0
    175c:	d236      	bcs.n	17cc <update_n_wake+0xa0>
    175e:	8818      	ldrh	r0, [r3, #0]
    1760:	b280      	uxth	r0, r0
    1762:	4282      	cmp	r2, r0
    1764:	d903      	bls.n	176e <update_n_wake+0x42>
    1766:	8808      	ldrh	r0, [r1, #0]
    1768:	b280      	uxth	r0, r0
    176a:	4282      	cmp	r2, r0
    176c:	d32e      	bcc.n	17cc <update_n_wake+0xa0>
		for_all_tasks (i) {
    176e:	4a21      	ldr	r2, [pc, #132]	; (17f4 <update_n_wake+0xc8>)
    1770:	6810      	ldr	r0, [r2, #0]
    1772:	b918      	cbnz	r0, 177c <update_n_wake+0x50>
	__pi_mintk = znew + min;
    1774:	8818      	ldrh	r0, [r3, #0]
    1776:	4404      	add	r4, r0
    1778:	802c      	strh	r4, [r5, #0]
    177a:	e02c      	b.n	17d6 <update_n_wake+0xaa>
			if (!twaiting (i))
    177c:	8806      	ldrh	r6, [r0, #0]
    177e:	0732      	lsls	r2, r6, #28
    1780:	d51b      	bpl.n	17ba <update_n_wake+0x8e>
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1782:	881f      	ldrh	r7, [r3, #0]
    1784:	8842      	ldrh	r2, [r0, #2]
    1786:	b2bf      	uxth	r7, r7
    1788:	42ba      	cmp	r2, r7
    178a:	d803      	bhi.n	1794 <update_n_wake+0x68>
    178c:	880f      	ldrh	r7, [r1, #0]
    178e:	b2bf      	uxth	r7, r7
    1790:	42ba      	cmp	r2, r7
    1792:	d20f      	bcs.n	17b4 <update_n_wake+0x88>
    1794:	f8b3 c000 	ldrh.w	ip, [r3]
    1798:	880f      	ldrh	r7, [r1, #0]
    179a:	fa1f fc8c 	uxth.w	ip, ip
    179e:	b2bf      	uxth	r7, r7
    17a0:	45bc      	cmp	ip, r7
    17a2:	d20c      	bcs.n	17be <update_n_wake+0x92>
    17a4:	881f      	ldrh	r7, [r3, #0]
    17a6:	b2bf      	uxth	r7, r7
    17a8:	42ba      	cmp	r2, r7
    17aa:	d903      	bls.n	17b4 <update_n_wake+0x88>
    17ac:	880f      	ldrh	r7, [r1, #0]
    17ae:	b2bf      	uxth	r7, r7
    17b0:	42ba      	cmp	r2, r7
    17b2:	d304      	bcc.n	17be <update_n_wake+0x92>
				wakeuptm (i);
    17b4:	f026 060f 	bic.w	r6, r6, #15
    17b8:	8006      	strh	r6, [r0, #0]
		for_all_tasks (i) {
    17ba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    17bc:	e7d9      	b.n	1772 <update_n_wake+0x46>
				d = i->Timer - znew;
    17be:	881e      	ldrh	r6, [r3, #0]
    17c0:	1b92      	subs	r2, r2, r6
    17c2:	b292      	uxth	r2, r2
    17c4:	4294      	cmp	r4, r2
    17c6:	bf28      	it	cs
    17c8:	4614      	movcs	r4, r2
    17ca:	e7f6      	b.n	17ba <update_n_wake+0x8e>
		if ((word)(__pi_mintk - znew) < min) 
    17cc:	8818      	ldrh	r0, [r3, #0]
    17ce:	1a12      	subs	r2, r2, r0
    17d0:	b292      	uxth	r2, r2
    17d2:	4294      	cmp	r4, r2
    17d4:	d9ce      	bls.n	1774 <update_n_wake+0x48>
	__pi_old = znew;
    17d6:	881b      	ldrh	r3, [r3, #0]
    17d8:	b29b      	uxth	r3, r3
    17da:	800b      	strh	r3, [r1, #0]
}
    17dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TCI_RUN_DELAY_TIMER;
    17e0:	f7ff ba10 	b.w	c04 <tci_run_delay_timer>
}
    17e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17e6:	bf00      	nop
    17e8:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
    17ec:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
    17f0:	200006b2 			; <UNDEFINED> instruction: 0x200006b2
    17f4:	20000584 	andcs	r0, r0, r4, lsl #11

000017f8 <proceed>:
void proceed (word state) {
    17f8:	b508      	push	{r3, lr}
	prcdstate (__pi_curr, state);
    17fa:	4b03      	ldr	r3, [pc, #12]	; (1808 <proceed+0x10>)
    17fc:	0100      	lsls	r0, r0, #4
    17fe:	681b      	ldr	r3, [r3, #0]
    1800:	8018      	strh	r0, [r3, #0]
	release;
    1802:	f7ff fd93 	bl	132c <__pi_release>
    1806:	bf00      	nop
    1808:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>

0000180c <__pi_wait>:
void __pi_wait (aword event, word state) {
    180c:	b510      	push	{r4, lr}
	sint j = nevents (__pi_curr);
    180e:	4b0a      	ldr	r3, [pc, #40]	; (1838 <__pi_wait+0x2c>)
    1810:	681c      	ldr	r4, [r3, #0]
    1812:	8823      	ldrh	r3, [r4, #0]
	if (j >= MAX_EVENTS_PER_TASK)
    1814:	f013 0f04 	tst.w	r3, #4
    1818:	f003 0207 	and.w	r2, r3, #7
    181c:	d003      	beq.n	1826 <__pi_wait+0x1a>
		syserror (ENEVENTS, "sw");
    181e:	2005      	movs	r0, #5
    1820:	4906      	ldr	r1, [pc, #24]	; (183c <__pi_wait+0x30>)
    1822:	f7ff f9c5 	bl	bb0 <__pi_syserror>
	setestate (__pi_curr->Events [j], state, event);
    1826:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    182a:	0109      	lsls	r1, r1, #4
	incwait (__pi_curr);
    182c:	3301      	adds	r3, #1
	setestate (__pi_curr->Events [j], state, event);
    182e:	8191      	strh	r1, [r2, #12]
    1830:	6110      	str	r0, [r2, #16]
	incwait (__pi_curr);
    1832:	8023      	strh	r3, [r4, #0]
}
    1834:	bd10      	pop	{r4, pc}
    1836:	bf00      	nop
    1838:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    183c:	00004f57 	andeq	r4, r0, r7, asr pc

00001840 <__pi_trigger>:
void __pi_trigger (aword event) {
    1840:	b530      	push	{r4, r5, lr}
	for_all_tasks (i) {
    1842:	4b0b      	ldr	r3, [pc, #44]	; (1870 <__pi_trigger+0x30>)
    1844:	681a      	ldr	r2, [r3, #0]
    1846:	b192      	cbz	r2, 186e <__pi_trigger+0x2e>
		for (j = 0; j < nevents (i); j++) {
    1848:	4614      	mov	r4, r2
    184a:	2300      	movs	r3, #0
    184c:	f834 1b10 	ldrh.w	r1, [r4], #16
    1850:	f001 0107 	and.w	r1, r1, #7
    1854:	4299      	cmp	r1, r3
    1856:	dd08      	ble.n	186a <__pi_trigger+0x2a>
			if (i->Events [j] . Event == event) {
    1858:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    185c:	3301      	adds	r3, #1
    185e:	4285      	cmp	r5, r0
    1860:	d1f8      	bne.n	1854 <__pi_trigger+0x14>
				wakeupev (i, j);
    1862:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1866:	889b      	ldrh	r3, [r3, #4]
    1868:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    186a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    186c:	e7eb      	b.n	1846 <__pi_trigger+0x6>
}
    186e:	bd30      	pop	{r4, r5, pc}
    1870:	20000584 	andcs	r0, r0, r4, lsl #11

00001874 <__pi_join>:
aword __pi_join (aword pid, word st) {
    1874:	b510      	push	{r4, lr}
    1876:	4604      	mov	r4, r0
	for_all_tasks (i) {
    1878:	4b06      	ldr	r3, [pc, #24]	; (1894 <__pi_join+0x20>)
    187a:	681b      	ldr	r3, [r3, #0]
    187c:	b90b      	cbnz	r3, 1882 <__pi_join+0xe>
	return 0;
    187e:	461c      	mov	r4, r3
    1880:	e004      	b.n	188c <__pi_join+0x18>
		if ((aword)i == pid) {
    1882:	42a3      	cmp	r3, r4
    1884:	d104      	bne.n	1890 <__pi_join+0x1c>
			__pi_wait (pid, st);
    1886:	4620      	mov	r0, r4
    1888:	f7ff ffc0 	bl	180c <__pi_wait>
}
    188c:	4620      	mov	r0, r4
    188e:	bd10      	pop	{r4, pc}
	for_all_tasks (i) {
    1890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1892:	e7f3      	b.n	187c <__pi_join+0x8>
    1894:	20000584 	andcs	r0, r0, r4, lsl #11

00001898 <delay>:
void delay (word d, word state) {
    1898:	b538      	push	{r3, r4, r5, lr}
    189a:	4604      	mov	r4, r0
	settstate (__pi_curr, state);
    189c:	4d0a      	ldr	r5, [pc, #40]	; (18c8 <delay+0x30>)
    189e:	682a      	ldr	r2, [r5, #0]
    18a0:	8813      	ldrh	r3, [r2, #0]
    18a2:	f003 0307 	and.w	r3, r3, #7
    18a6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    18aa:	8013      	strh	r3, [r2, #0]
	update_n_wake (d, YES);
    18ac:	2101      	movs	r1, #1
    18ae:	f7ff ff3d 	bl	172c <update_n_wake>
	__pi_curr->Timer = __pi_old + d;
    18b2:	4b06      	ldr	r3, [pc, #24]	; (18cc <delay+0x34>)
    18b4:	8818      	ldrh	r0, [r3, #0]
    18b6:	682b      	ldr	r3, [r5, #0]
    18b8:	4404      	add	r4, r0
    18ba:	805c      	strh	r4, [r3, #2]
	inctimer (__pi_curr);
    18bc:	682a      	ldr	r2, [r5, #0]
    18be:	8813      	ldrh	r3, [r2, #0]
    18c0:	f043 0308 	orr.w	r3, r3, #8
    18c4:	8013      	strh	r3, [r2, #0]
}
    18c6:	bd38      	pop	{r3, r4, r5, pc}
    18c8:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    18cc:	200006b2 			; <UNDEFINED> instruction: 0x200006b2

000018d0 <running>:
	if (fun == NULL)
    18d0:	4603      	mov	r3, r0
    18d2:	b910      	cbnz	r0, 18da <running+0xa>
		return (int) __pi_curr;
    18d4:	4b05      	ldr	r3, [pc, #20]	; (18ec <running+0x1c>)
    18d6:	6818      	ldr	r0, [r3, #0]
    18d8:	4770      	bx	lr
	for_all_tasks (i)
    18da:	4a05      	ldr	r2, [pc, #20]	; (18f0 <running+0x20>)
    18dc:	6810      	ldr	r0, [r2, #0]
    18de:	b900      	cbnz	r0, 18e2 <running+0x12>
}
    18e0:	4770      	bx	lr
		if (i->code == fun)
    18e2:	6842      	ldr	r2, [r0, #4]
    18e4:	429a      	cmp	r2, r3
    18e6:	d0fb      	beq.n	18e0 <running+0x10>
	for_all_tasks (i)
    18e8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    18ea:	e7f8      	b.n	18de <running+0xe>
    18ec:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    18f0:	20000584 	andcs	r0, r0, r4, lsl #11

000018f4 <__pi_strlen>:
int __pi_strlen (const char *s) {
    18f4:	4603      	mov	r3, r0
	for (i = 0; *(s+i) != '\0'; i++);
    18f6:	2000      	movs	r0, #0
    18f8:	5c1a      	ldrb	r2, [r3, r0]
    18fa:	b902      	cbnz	r2, 18fe <__pi_strlen+0xa>
}
    18fc:	4770      	bx	lr
	for (i = 0; *(s+i) != '\0'; i++);
    18fe:	3001      	adds	r0, #1
    1900:	e7fa      	b.n	18f8 <__pi_strlen+0x4>

00001902 <__pi_strcpy>:
	while ((Boolean)(*d++ = *s++));
    1902:	3801      	subs	r0, #1
    1904:	f811 3b01 	ldrb.w	r3, [r1], #1
    1908:	f800 3f01 	strb.w	r3, [r0, #1]!
    190c:	2b00      	cmp	r3, #0
    190e:	d1f9      	bne.n	1904 <__pi_strcpy+0x2>
}
    1910:	4770      	bx	lr

00001912 <__pi_strncpy>:
	while (n-- && (*s != '\0'))
    1912:	3901      	subs	r1, #1
    1914:	4402      	add	r2, r0
    1916:	4290      	cmp	r0, r2
    1918:	d102      	bne.n	1920 <__pi_strncpy+0xe>
	*d = '\0';
    191a:	2300      	movs	r3, #0
    191c:	7003      	strb	r3, [r0, #0]
}
    191e:	4770      	bx	lr
	while (n-- && (*s != '\0'))
    1920:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    1924:	2b00      	cmp	r3, #0
    1926:	d0f8      	beq.n	191a <__pi_strncpy+0x8>
		*d++ = *s++;
    1928:	f800 3b01 	strb.w	r3, [r0], #1
    192c:	e7f3      	b.n	1916 <__pi_strncpy+0x4>

0000192e <__pi_memcpy>:
	while (n--)
    192e:	3801      	subs	r0, #1
    1930:	440a      	add	r2, r1
    1932:	4291      	cmp	r1, r2
    1934:	d100      	bne.n	1938 <__pi_memcpy+0xa>
}
    1936:	4770      	bx	lr
		*dest++ = *src++;
    1938:	f811 3b01 	ldrb.w	r3, [r1], #1
    193c:	f800 3f01 	strb.w	r3, [r0, #1]!
    1940:	e7f7      	b.n	1932 <__pi_memcpy+0x4>

00001942 <__pi_memset>:
	while (n--)
    1942:	4402      	add	r2, r0
    1944:	4290      	cmp	r0, r2
    1946:	d100      	bne.n	194a <__pi_memset+0x8>
}
    1948:	4770      	bx	lr
		*dest++ = c;
    194a:	f800 1b01 	strb.w	r1, [r0], #1
    194e:	e7f9      	b.n	1944 <__pi_memset+0x2>

00001950 <adddevfunc>:
void adddevfunc (devreqfun_t rf, int loc) {
    1950:	b508      	push	{r3, lr}
	if (loc < 0 || loc >= MAX_DEVICES)
    1952:	b119      	cbz	r1, 195c <adddevfunc+0xc>
		syserror (EREQPAR, "addv");
    1954:	2003      	movs	r0, #3
    1956:	4905      	ldr	r1, [pc, #20]	; (196c <adddevfunc+0x1c>)
		syserror (ERESOURCE, "addv");
    1958:	f7ff f92a 	bl	bb0 <__pi_syserror>
	if (ioreq [loc] != NULL)
    195c:	4b04      	ldr	r3, [pc, #16]	; (1970 <adddevfunc+0x20>)
    195e:	681a      	ldr	r2, [r3, #0]
    1960:	b112      	cbz	r2, 1968 <adddevfunc+0x18>
		syserror (ERESOURCE, "addv");
    1962:	2004      	movs	r0, #4
    1964:	4901      	ldr	r1, [pc, #4]	; (196c <adddevfunc+0x1c>)
    1966:	e7f7      	b.n	1958 <adddevfunc+0x8>
	ioreq [loc] = rf;
    1968:	6018      	str	r0, [r3, #0]
}
    196a:	bd08      	pop	{r3, pc}
    196c:	00004f5a 	andeq	r4, r0, sl, asr pc
    1970:	20000588 	andcs	r0, r0, r8, lsl #11

00001974 <io>:
sint io (word retry, word dev, word operation, char *buf, word len) {
    1974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1978:	4604      	mov	r4, r0
    197a:	4616      	mov	r6, r2
    197c:	461d      	mov	r5, r3
    197e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1982:	b921      	cbnz	r1, 198e <io+0x1a>
    1984:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1a0c <io+0x98>
    1988:	f8d9 3000 	ldr.w	r3, [r9]
    198c:	b91b      	cbnz	r3, 1996 <io+0x22>
		syserror (ENODEVICE, "io");
    198e:	2001      	movs	r0, #1
    1990:	491d      	ldr	r1, [pc, #116]	; (1a08 <io+0x94>)
    1992:	f7ff f90d 	bl	bb0 <__pi_syserror>
	if (len == 0)
    1996:	f1b8 0f00 	cmp.w	r8, #0
    199a:	d028      	beq.n	19ee <io+0x7a>
	ret = (ioreq [dev]) (operation, buf, len);
    199c:	4642      	mov	r2, r8
    199e:	4629      	mov	r1, r5
    19a0:	4630      	mov	r0, r6
    19a2:	4798      	blx	r3
	if (ret >= 0)
    19a4:	2800      	cmp	r0, #0
    19a6:	da23      	bge.n	19f0 <io+0x7c>
	if (ret == -1) {
    19a8:	1c41      	adds	r1, r0, #1
    19aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    19ae:	d108      	bne.n	19c2 <io+0x4e>
		if (retry == WNONE)
    19b0:	429c      	cmp	r4, r3
    19b2:	d01c      	beq.n	19ee <io+0x7a>
		iowait (dev, operation, retry);
    19b4:	4621      	mov	r1, r4
    19b6:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    19ba:	f7ff ff27 	bl	180c <__pi_wait>
			release;
    19be:	f7ff fcb5 	bl	132c <__pi_release>
	if (ret == -2) {
    19c2:	1c82      	adds	r2, r0, #2
    19c4:	d116      	bne.n	19f4 <io+0x80>
		if (retry != WNONE) {
    19c6:	429c      	cmp	r4, r3
    19c8:	f8d9 9000 	ldr.w	r9, [r9]
    19cc:	d00a      	beq.n	19e4 <io+0x70>
			iowait (dev, operation, retry);
    19ce:	4621      	mov	r1, r4
    19d0:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    19d4:	f7ff ff1a 	bl	180c <__pi_wait>
			(ioreq [dev]) (NONE, buf, len);
    19d8:	4642      	mov	r2, r8
    19da:	4629      	mov	r1, r5
    19dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    19e0:	47c8      	blx	r9
    19e2:	e7ec      	b.n	19be <io+0x4a>
		(ioreq [dev]) (NONE, buf, len);
    19e4:	4642      	mov	r2, r8
    19e6:	4629      	mov	r1, r5
    19e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    19ec:	47c8      	blx	r9
		return 0;
    19ee:	2000      	movs	r0, #0
}
    19f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (retry != WNONE) {
    19f4:	429c      	cmp	r4, r3
    19f6:	d0fa      	beq.n	19ee <io+0x7a>
		delay (-ret - 2, retry);
    19f8:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    19fc:	30fe      	adds	r0, #254	; 0xfe
    19fe:	4621      	mov	r1, r4
    1a00:	b280      	uxth	r0, r0
    1a02:	f7ff ff49 	bl	1898 <delay>
		release;
    1a06:	e7da      	b.n	19be <io+0x4a>
    1a08:	00004f5f 	andeq	r4, r0, pc, asr pc
    1a0c:	20000588 	andcs	r0, r0, r8, lsl #11

00001a10 <__pi_malloc_init>:
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1a10:	4a0d      	ldr	r2, [pc, #52]	; (1a48 <__pi_malloc_init+0x38>)
void __pi_malloc_init () {
    1a12:	b508      	push	{r3, lr}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1a14:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
    1a18:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
    1a1c:	089b      	lsrs	r3, r3, #2
    1a1e:	1e59      	subs	r1, r3, #1
    1a20:	29ff      	cmp	r1, #255	; 0xff
    1a22:	d803      	bhi.n	1a2c <__pi_malloc_init+0x1c>
		syserror (ERESOURCE, "mal1");
    1a24:	2004      	movs	r0, #4
    1a26:	4909      	ldr	r1, [pc, #36]	; (1a4c <__pi_malloc_init+0x3c>)
    1a28:	f7ff f8c2 	bl	bb0 <__pi_syserror>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1a2c:	4908      	ldr	r1, [pc, #32]	; (1a50 <__pi_malloc_init+0x40>)
    1a2e:	1d10      	adds	r0, r2, #4
    1a30:	6008      	str	r0, [r1, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a32:	2000      	movs	r0, #0
    1a34:	4907      	ldr	r1, [pc, #28]	; (1a54 <__pi_malloc_init+0x44>)
	m_size (mpools [0]) = mlen - m_hdrlen;
    1a36:	3b02      	subs	r3, #2
    1a38:	6013      	str	r3, [r2, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a3a:	e9c2 0101 	strd	r0, r1, [r2, #4]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1a3e:	4a06      	ldr	r2, [pc, #24]	; (1a58 <__pi_malloc_init+0x48>)
    1a40:	6013      	str	r3, [r2, #0]
    1a42:	4a06      	ldr	r2, [pc, #24]	; (1a5c <__pi_malloc_init+0x4c>)
    1a44:	6013      	str	r3, [r2, #0]
}
    1a46:	bd08      	pop	{r3, pc}
    1a48:	200006d4 	ldrdcs	r0, [r0], -r4
    1a4c:	00004f62 	andeq	r4, r0, r2, ror #30
    1a50:	20000598 	mulcs	r0, r8, r5
    1a54:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1a58:	2000058c 	andcs	r0, r0, ip, lsl #11
    1a5c:	20000594 	mulcs	r0, r4, r5

00001a60 <__pi_free>:
void __pi_free (aword *ch) {
    1a60:	b508      	push	{r3, lr}
	if (ch == NULL)
    1a62:	b1c8      	cbz	r0, 1a98 <__pi_free+0x38>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1a64:	f850 3c04 	ldr.w	r3, [r0, #-4]
    1a68:	2b00      	cmp	r3, #0
    1a6a:	db03      	blt.n	1a74 <__pi_free+0x14>
		syserror (EMALLOC, "malg");
    1a6c:	2006      	movs	r0, #6
    1a6e:	490b      	ldr	r1, [pc, #44]	; (1a9c <__pi_free+0x3c>)
    1a70:	f7ff f89e 	bl	bb0 <__pi_syserror>
	mcfree [MA_NP] += m_size (ch);
    1a74:	490a      	ldr	r1, [pc, #40]	; (1aa0 <__pi_free+0x40>)
		m_size (ch) ^= MALLOC_UMASK;
    1a76:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	mcfree [MA_NP] += m_size (ch);
    1a7a:	680a      	ldr	r2, [r1, #0]
		m_size (ch) ^= MALLOC_UMASK;
    1a7c:	f840 3c04 	str.w	r3, [r0, #-4]
	mcfree [MA_NP] += m_size (ch);
    1a80:	4413      	add	r3, r2
    1a82:	600b      	str	r3, [r1, #0]
	QFREE;
    1a84:	f7ff fde4 	bl	1650 <qfree>
	if (mevent [MA_NP] . nwait) {
    1a88:	4806      	ldr	r0, [pc, #24]	; (1aa4 <__pi_free+0x44>)
    1a8a:	7803      	ldrb	r3, [r0, #0]
    1a8c:	b123      	cbz	r3, 1a98 <__pi_free+0x38>
		trigger ((aword)(&(mevent [MA_NP])));
    1a8e:	f7ff fed7 	bl	1840 <__pi_trigger>
		mevent [MA_NP] . nwait --;
    1a92:	7803      	ldrb	r3, [r0, #0]
    1a94:	3b01      	subs	r3, #1
    1a96:	7003      	strb	r3, [r0, #0]
}
    1a98:	bd08      	pop	{r3, pc}
    1a9a:	bf00      	nop
    1a9c:	00004f67 	andeq	r4, r0, r7, ror #30
    1aa0:	2000058c 	andcs	r0, r0, ip, lsl #11
    1aa4:	20000590 	mulcs	r0, r0, r5

00001aa8 <kill>:
void kill (aword pid) {
    1aa8:	b510      	push	{r4, lr}
	if (pid == 0)
    1aaa:	b908      	cbnz	r0, 1ab0 <kill+0x8>
		pid = (aword) __pi_curr;
    1aac:	4b0f      	ldr	r3, [pc, #60]	; (1aec <kill+0x44>)
    1aae:	6818      	ldr	r0, [r3, #0]
	j = NULL;
    1ab0:	2200      	movs	r2, #0
	for_all_tasks (i) {
    1ab2:	4b0f      	ldr	r3, [pc, #60]	; (1af0 <kill+0x48>)
    1ab4:	681c      	ldr	r4, [r3, #0]
    1ab6:	b91c      	cbnz	r4, 1ac0 <kill+0x18>
	syserror (EREQPAR, "kpi");
    1ab8:	2003      	movs	r0, #3
    1aba:	490e      	ldr	r1, [pc, #56]	; (1af4 <kill+0x4c>)
    1abc:	f7ff f878 	bl	bb0 <__pi_syserror>
		if ((aword)i == pid) {
    1ac0:	4284      	cmp	r4, r0
    1ac2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1ac4:	d10e      	bne.n	1ae4 <kill+0x3c>
			if (j == NULL)
    1ac6:	b95a      	cbnz	r2, 1ae0 <kill+0x38>
				__PCB = i->Next;
    1ac8:	6019      	str	r1, [r3, #0]
			killev (i);
    1aca:	4620      	mov	r0, r4
    1acc:	f7ff fda2 	bl	1614 <killev>
			ufree (i);
    1ad0:	f7ff ffc6 	bl	1a60 <__pi_free>
			if (i == __pi_curr)
    1ad4:	4b05      	ldr	r3, [pc, #20]	; (1aec <kill+0x44>)
    1ad6:	681b      	ldr	r3, [r3, #0]
    1ad8:	42a3      	cmp	r3, r4
    1ada:	d106      	bne.n	1aea <kill+0x42>
				release;
    1adc:	f7ff fc26 	bl	132c <__pi_release>
				j->Next = i->Next;
    1ae0:	62d1      	str	r1, [r2, #44]	; 0x2c
    1ae2:	e7f2      	b.n	1aca <kill+0x22>
    1ae4:	4622      	mov	r2, r4
    1ae6:	460c      	mov	r4, r1
    1ae8:	e7e5      	b.n	1ab6 <kill+0xe>
}
    1aea:	bd10      	pop	{r4, pc}
    1aec:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    1af0:	20000584 	andcs	r0, r0, r4, lsl #11
    1af4:	00004f6c 	andeq	r4, r0, ip, ror #30

00001af8 <__pi_malloc>:
	if (size < 8)
    1af8:	2807      	cmp	r0, #7
		_size = 2;
    1afa:	bf98      	it	ls
    1afc:	2002      	movls	r0, #2
aword *__pi_malloc (word size) {
    1afe:	b538      	push	{r3, r4, r5, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1b00:	4b21      	ldr	r3, [pc, #132]	; (1b88 <__pi_malloc+0x90>)
		_size = (((aword)size) + 3) >> 2;
    1b02:	bf88      	it	hi
    1b04:	3003      	addhi	r0, #3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1b06:	681c      	ldr	r4, [r3, #0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b08:	4920      	ldr	r1, [pc, #128]	; (1b8c <__pi_malloc+0x94>)
		_size = (((aword)size) + 3) >> 2;
    1b0a:	bf88      	it	hi
    1b0c:	0880      	lsrhi	r0, r0, #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1b0e:	b94c      	cbnz	r4, 1b24 <__pi_malloc+0x2c>
		if (mevent [MA_NP] . nfail != 255)
    1b10:	4a1f      	ldr	r2, [pc, #124]	; (1b90 <__pi_malloc+0x98>)
    1b12:	7853      	ldrb	r3, [r2, #1]
    1b14:	2bff      	cmp	r3, #255	; 0xff
    1b16:	d001      	beq.n	1b1c <__pi_malloc+0x24>
			mevent [MA_NP] . nfail ++;
    1b18:	3301      	adds	r3, #1
    1b1a:	7053      	strb	r3, [r2, #1]
		mnfree [MA_NP] = 0;
    1b1c:	2200      	movs	r2, #0
    1b1e:	4b1d      	ldr	r3, [pc, #116]	; (1b94 <__pi_malloc+0x9c>)
    1b20:	601a      	str	r2, [r3, #0]
	return chunk;
    1b22:	e02f      	b.n	1b84 <__pi_malloc+0x8c>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b24:	6862      	ldr	r2, [r4, #4]
    1b26:	428a      	cmp	r2, r1
    1b28:	d003      	beq.n	1b32 <__pi_malloc+0x3a>
			syserror (EMALLOC, "malc");
    1b2a:	2006      	movs	r0, #6
    1b2c:	491a      	ldr	r1, [pc, #104]	; (1b98 <__pi_malloc+0xa0>)
    1b2e:	f7ff f83f 	bl	bb0 <__pi_syserror>
		if (m_size (chunk) >= _size)
    1b32:	e954 5201 	ldrd	r5, r2, [r4, #-4]
    1b36:	4285      	cmp	r5, r0
    1b38:	d202      	bcs.n	1b40 <__pi_malloc+0x48>
		chunk = m_nextp (chunk)) {
    1b3a:	4623      	mov	r3, r4
    1b3c:	4614      	mov	r4, r2
    1b3e:	e7e6      	b.n	1b0e <__pi_malloc+0x16>
		m_setnextp (cc, m_nextp (chunk));
    1b40:	601a      	str	r2, [r3, #0]
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1b42:	f854 3c04 	ldr.w	r3, [r4, #-4]
    1b46:	1a1b      	subs	r3, r3, r0
    1b48:	2b08      	cmp	r3, #8
    1b4a:	d909      	bls.n	1b60 <__pi_malloc+0x68>
			m_size (chunk) = _size;
    1b4c:	f844 0c04 	str.w	r0, [r4, #-4]
			cc = chunk + _size + m_hdrlen;
    1b50:	3001      	adds	r0, #1
    1b52:	eb04 0080 	add.w	r0, r4, r0, lsl #2
			m_size (cc) = waste - m_hdrlen;
    1b56:	3b01      	subs	r3, #1
    1b58:	f840 3c04 	str.w	r3, [r0, #-4]
			QFREE;
    1b5c:	f7ff fd78 	bl	1650 <qfree>
		mevent [MA_NP] . nfail = 0;
    1b60:	2200      	movs	r2, #0
    1b62:	4b0b      	ldr	r3, [pc, #44]	; (1b90 <__pi_malloc+0x98>)
		mcfree [MA_NP] -= m_size (chunk);
    1b64:	490d      	ldr	r1, [pc, #52]	; (1b9c <__pi_malloc+0xa4>)
		mevent [MA_NP] . nfail = 0;
    1b66:	705a      	strb	r2, [r3, #1]
		mcfree [MA_NP] -= m_size (chunk);
    1b68:	f854 2c04 	ldr.w	r2, [r4, #-4]
    1b6c:	680b      	ldr	r3, [r1, #0]
    1b6e:	1a9b      	subs	r3, r3, r2
    1b70:	600b      	str	r3, [r1, #0]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1b72:	4908      	ldr	r1, [pc, #32]	; (1b94 <__pi_malloc+0x9c>)
		m_size (chunk) |= MALLOC_UMASK;
    1b74:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1b78:	6808      	ldr	r0, [r1, #0]
		m_size (chunk) |= MALLOC_UMASK;
    1b7a:	f844 2c04 	str.w	r2, [r4, #-4]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1b7e:	4283      	cmp	r3, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    1b80:	bf38      	it	cc
    1b82:	600b      	strcc	r3, [r1, #0]
}
    1b84:	4620      	mov	r0, r4
    1b86:	bd38      	pop	{r3, r4, r5, pc}
    1b88:	20000598 	mulcs	r0, r8, r5
    1b8c:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1b90:	20000590 	mulcs	r0, r0, r5
    1b94:	20000594 	mulcs	r0, r4, r5
    1b98:	00004f70 	andeq	r4, r0, r0, ror pc
    1b9c:	2000058c 	andcs	r0, r0, ip, lsl #11

00001ba0 <__pi_fork>:
aword __pi_fork (fsmcode func, aword data) {
    1ba0:	b538      	push	{r3, r4, r5, lr}
    1ba2:	4605      	mov	r5, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1ba4:	2030      	movs	r0, #48	; 0x30
aword __pi_fork (fsmcode func, aword data) {
    1ba6:	460c      	mov	r4, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1ba8:	f7ff ffa6 	bl	1af8 <__pi_malloc>
    1bac:	2300      	movs	r3, #0
    1bae:	b138      	cbz	r0, 1bc0 <__pi_fork+0x20>
		if ((j = __PCB) == NULL)
    1bb0:	4a07      	ldr	r2, [pc, #28]	; (1bd0 <__pi_fork+0x30>)
	i->Status = 0;
    1bb2:	8003      	strh	r3, [r0, #0]
	i->Next = NULL;
    1bb4:	62c3      	str	r3, [r0, #44]	; 0x2c
		if ((j = __PCB) == NULL)
    1bb6:	6813      	ldr	r3, [r2, #0]
	i->data = data;
    1bb8:	e9c0 5401 	strd	r5, r4, [r0, #4]
		if ((j = __PCB) == NULL)
    1bbc:	b90b      	cbnz	r3, 1bc2 <__pi_fork+0x22>
			__PCB = i;
    1bbe:	6010      	str	r0, [r2, #0]
}
    1bc0:	bd38      	pop	{r3, r4, r5, pc}
			for (; j->Next != NULL; j = j->Next);
    1bc2:	461a      	mov	r2, r3
    1bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	d1fb      	bne.n	1bc2 <__pi_fork+0x22>
			j->Next = i;
    1bca:	62d0      	str	r0, [r2, #44]	; 0x2c
	return (aword) i;
    1bcc:	e7f8      	b.n	1bc0 <__pi_fork+0x20>
    1bce:	bf00      	nop
    1bd0:	20000584 	andcs	r0, r0, r4, lsl #11

00001bd4 <__pi_waitmem>:
	if (mevent [MA_NP] . nwait != 255)
    1bd4:	4a04      	ldr	r2, [pc, #16]	; (1be8 <__pi_waitmem+0x14>)
void __pi_waitmem (word state) {
    1bd6:	4601      	mov	r1, r0
	if (mevent [MA_NP] . nwait != 255)
    1bd8:	7813      	ldrb	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1bda:	4803      	ldr	r0, [pc, #12]	; (1be8 <__pi_waitmem+0x14>)
	if (mevent [MA_NP] . nwait != 255)
    1bdc:	2bff      	cmp	r3, #255	; 0xff
		mevent [MA_NP] . nwait ++;
    1bde:	bf1c      	itt	ne
    1be0:	3301      	addne	r3, #1
    1be2:	7013      	strbne	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1be4:	f7ff be12 	b.w	180c <__pi_wait>
    1be8:	20000590 	mulcs	r0, r0, r5

00001bec <diag>:

#endif	/* dbg_level */

#if	DIAG_MESSAGES

void diag (const char *mess, ...) {
    1bec:	b40f      	push	{r0, r1, r2, r3}
    1bee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    1bf2:	ab0a      	add	r3, sp, #40	; 0x28
    1bf4:	f853 4b04 	ldr.w	r4, [r3], #4
	sint bc;
	word v;
	byte is;

	va_start (ap, mess);
	diag_disable_int (a, is);
    1bf8:	2015      	movs	r0, #21
	va_start (ap, mess);
    1bfa:	9301      	str	r3, [sp, #4]
	diag_disable_int (a, is);
    1bfc:	4b46      	ldr	r3, [pc, #280]	; (1d18 <diag+0x12c>)
				d = (bc == 16) ? 10000 : 1000000000;
				while (1) {
					// Strip initial zeros
					v = (word) (val / d);
					if (v || d == 1) break;
					d /= 10;
    1bfe:	270a      	movs	r7, #10
	diag_disable_int (a, is);
    1c00:	681b      	ldr	r3, [r3, #0]
				d = (bc == 16) ? 10000 : 1000000000;
    1c02:	f8df 811c 	ldr.w	r8, [pc, #284]	; 1d20 <diag+0x134>
	diag_disable_int (a, is);
    1c06:	695b      	ldr	r3, [r3, #20]
    1c08:	4798      	blx	r3
	while (*mess != '\0') {
    1c0a:	7820      	ldrb	r0, [r4, #0]
    1c0c:	b998      	cbnz	r0, 1c36 <diag+0x4a>
		} else {
			dgout (*mess++);
		}
	}

	dgout ('\r');
    1c0e:	200d      	movs	r0, #13
    1c10:	f7ff fd5e 	bl	16d0 <dgout>
	dgout ('\n');
    1c14:	200a      	movs	r0, #10
    1c16:	f7ff fd5b 	bl	16d0 <dgout>
    1c1a:	4a40      	ldr	r2, [pc, #256]	; (1d1c <diag+0x130>)
    1c1c:	6813      	ldr	r3, [r2, #0]
	diag_wait (a);
    1c1e:	071b      	lsls	r3, r3, #28
    1c20:	d4fc      	bmi.n	1c1c <diag+0x30>
	diag_enable_int (a, is);
    1c22:	4b3d      	ldr	r3, [pc, #244]	; (1d18 <diag+0x12c>)
    1c24:	2015      	movs	r0, #21
    1c26:	681b      	ldr	r3, [r3, #0]
    1c28:	691b      	ldr	r3, [r3, #16]
    1c2a:	4798      	blx	r3
}
    1c2c:	b003      	add	sp, #12
    1c2e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1c32:	b004      	add	sp, #16
    1c34:	4770      	bx	lr
		if (*mess == '%') {
    1c36:	2825      	cmp	r0, #37	; 0x25
    1c38:	f104 0601 	add.w	r6, r4, #1
    1c3c:	d169      	bne.n	1d12 <diag+0x126>
			if (*mess == 'l') {
    1c3e:	9b01      	ldr	r3, [sp, #4]
    1c40:	7862      	ldrb	r2, [r4, #1]
    1c42:	f853 1b04 	ldr.w	r1, [r3], #4
    1c46:	2a6c      	cmp	r2, #108	; 0x6c
				mess++;
    1c48:	bf08      	it	eq
    1c4a:	1ca6      	addeq	r6, r4, #2
				val = va_arg (ap, lword);
    1c4c:	9301      	str	r3, [sp, #4]
			switch (*mess) {
    1c4e:	7833      	ldrb	r3, [r6, #0]
				bc = 32;
    1c50:	bf0c      	ite	eq
    1c52:	2520      	moveq	r5, #32
				bc = 16;
    1c54:	2510      	movne	r5, #16
			switch (*mess) {
    1c56:	2b75      	cmp	r3, #117	; 0x75
    1c58:	d04e      	beq.n	1cf8 <diag+0x10c>
    1c5a:	d80a      	bhi.n	1c72 <diag+0x86>
    1c5c:	2b64      	cmp	r3, #100	; 0x64
    1c5e:	d01c      	beq.n	1c9a <diag+0xae>
    1c60:	2b73      	cmp	r3, #115	; 0x73
    1c62:	d052      	beq.n	1d0a <diag+0x11e>
				dgout ('%');
    1c64:	2025      	movs	r0, #37	; 0x25
    1c66:	f7ff fd33 	bl	16d0 <dgout>
				dgout (*mess);
    1c6a:	7830      	ldrb	r0, [r6, #0]
    1c6c:	f7ff fd30 	bl	16d0 <dgout>
    1c70:	e010      	b.n	1c94 <diag+0xa8>
			switch (*mess) {
    1c72:	2b78      	cmp	r3, #120	; 0x78
    1c74:	d1f6      	bne.n	1c64 <diag+0x78>
    1c76:	2400      	movs	r4, #0
					v = __pi_hex_enc_table [
    1c78:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1d24 <diag+0x138>
					i += 4;
    1c7c:	3404      	adds	r4, #4
					(val >> (bc - i)) & 0xf];
    1c7e:	1b2b      	subs	r3, r5, r4
    1c80:	fa21 f303 	lsr.w	r3, r1, r3
    1c84:	f003 030f 	and.w	r3, r3, #15
					dgout (v);
    1c88:	f819 0003 	ldrb.w	r0, [r9, r3]
    1c8c:	f7ff fd20 	bl	16d0 <dgout>
				while (i < bc) {
    1c90:	42a5      	cmp	r5, r4
    1c92:	dcf3      	bgt.n	1c7c <diag+0x90>
			mess++;
    1c94:	3601      	adds	r6, #1
					d /= 10;
    1c96:	4634      	mov	r4, r6
    1c98:	e7b7      	b.n	1c0a <diag+0x1e>
				if ((val >> (bc - 1)) & 1) {
    1c9a:	1e6b      	subs	r3, r5, #1
    1c9c:	fa21 f303 	lsr.w	r3, r1, r3
    1ca0:	07da      	lsls	r2, r3, #31
    1ca2:	d509      	bpl.n	1cb8 <diag+0xcc>
					dgout ('-');
    1ca4:	202d      	movs	r0, #45	; 0x2d
    1ca6:	f7ff fd13 	bl	16d0 <dgout>
					if (bc == 16)
    1caa:	2d10      	cmp	r5, #16
						val |= 0xffff0000;
    1cac:	bf04      	itt	eq
    1cae:	ea6f 4101 	mvneq.w	r1, r1, lsl #16
    1cb2:	ea6f 4111 	mvneq.w	r1, r1, lsr #16
					val = ~val + 1;
    1cb6:	4249      	negs	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1cb8:	f242 7410 	movw	r4, #10000	; 0x2710
    1cbc:	2d10      	cmp	r5, #16
    1cbe:	bf18      	it	ne
    1cc0:	4644      	movne	r4, r8
					v = (word) (val / d);
    1cc2:	fbb1 f5f4 	udiv	r5, r1, r4
    1cc6:	b2ad      	uxth	r5, r5
					if (v || d == 1) break;
    1cc8:	b935      	cbnz	r5, 1cd8 <diag+0xec>
    1cca:	2c01      	cmp	r4, #1
    1ccc:	d004      	beq.n	1cd8 <diag+0xec>
					d /= 10;
    1cce:	fbb4 f4f7 	udiv	r4, r4, r7
					v = (word) (val / d);
    1cd2:	e7f6      	b.n	1cc2 <diag+0xd6>
				d = (bc == 16) ? 10000 : 1000000000;
    1cd4:	4c12      	ldr	r4, [pc, #72]	; (1d20 <diag+0x134>)
    1cd6:	e7f4      	b.n	1cc2 <diag+0xd6>
					dgout (v + '0');
    1cd8:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1cdc:	b280      	uxth	r0, r0
    1cde:	f7ff fcf7 	bl	16d0 <dgout>
					if (d == 0) break;
    1ce2:	2c09      	cmp	r4, #9
					d /= 10;
    1ce4:	fbb4 f3f7 	udiv	r3, r4, r7
					val = val - (v * d);
    1ce8:	fb04 1115 	mls	r1, r4, r5, r1
					if (d == 0) break;
    1cec:	d9d2      	bls.n	1c94 <diag+0xa8>
					v = (word) (val / d);
    1cee:	fbb1 f5f3 	udiv	r5, r1, r3
					d /= 10;
    1cf2:	461c      	mov	r4, r3
					v = (word) (val / d);
    1cf4:	b2ad      	uxth	r5, r5
					dgout (v + '0');
    1cf6:	e7ef      	b.n	1cd8 <diag+0xec>
				if (bc == 16)
    1cf8:	2d10      	cmp	r5, #16
    1cfa:	d1eb      	bne.n	1cd4 <diag+0xe8>
				d = (bc == 16) ? 10000 : 1000000000;
    1cfc:	f242 7410 	movw	r4, #10000	; 0x2710
					val &= 0xffff;
    1d00:	b289      	uxth	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1d02:	e7de      	b.n	1cc2 <diag+0xd6>
					dgout (*s);
    1d04:	f7ff fce4 	bl	16d0 <dgout>
					s++;
    1d08:	3101      	adds	r1, #1
				while (*s != '\0') {
    1d0a:	7808      	ldrb	r0, [r1, #0]
    1d0c:	2800      	cmp	r0, #0
    1d0e:	d1f9      	bne.n	1d04 <diag+0x118>
    1d10:	e7c0      	b.n	1c94 <diag+0xa8>
			dgout (*mess++);
    1d12:	f7ff fcdd 	bl	16d0 <dgout>
    1d16:	e7be      	b.n	1c96 <diag+0xaa>
    1d18:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    1d1c:	40001018 	andmi	r1, r0, r8, lsl r0
    1d20:	3b9aca00 	blcc	fe6b4528 <_estack+0xde6af528>
    1d24:	00004f75 	andeq	r4, r0, r5, ror pc

00001d28 <lrnd>:
// ============================================================================
// High-quality RNG (oh, well, as high as we can afford) ======================
// ============================================================================
#if RANDOM_NUMBER_GENERATOR > 1
lword lrnd () {
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1d28:	f243 0039 	movw	r0, #12345	; 0x3039
    1d2c:	4a04      	ldr	r2, [pc, #16]	; (1d40 <lrnd+0x18>)
    1d2e:	4905      	ldr	r1, [pc, #20]	; (1d44 <lrnd+0x1c>)
    1d30:	6813      	ldr	r3, [r2, #0]
    1d32:	fb01 0303 	mla	r3, r1, r3, r0
    1d36:	6013      	str	r3, [r2, #0]
	return __pi_seed
#if ENTROPY_COLLECTION
	^ entropy
    1d38:	4a03      	ldr	r2, [pc, #12]	; (1d48 <lrnd+0x20>)
    1d3a:	6810      	ldr	r0, [r2, #0]
#endif
	;
}
    1d3c:	4058      	eors	r0, r3
    1d3e:	4770      	bx	lr
    1d40:	20000004 	andcs	r0, r0, r4
    1d44:	41c64e6d 	bicmi	r4, r6, sp, ror #28
    1d48:	200006ac 	andcs	r0, r0, ip, lsr #13

00001d4c <apb>:
/*
 * Forced implicit packet dropping removed. Plugins will have to drop
 * packets explicitly (if they really want to).
 */

__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1d4c:	b510      	push	{r4, lr}
    1d4e:	4604      	mov	r4, r0
/* ========================================= */
/* Allocates a packet buffer size bytes long */
/* ========================================= */

	hblock_t *p;
	word cs = size + hblenb;
    1d50:	300c      	adds	r0, #12

	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1d52:	b280      	uxth	r0, r0
    1d54:	f7ff fed0 	bl	1af8 <__pi_malloc>
    1d58:	b110      	cbz	r0, 1d60 <apb+0x14>

#if	TCV_HOOKS
	p -> hptr = NULL;
#endif
	p -> length = size;
	p -> attributes . value = 0;
    1d5a:	2300      	movs	r3, #0
	p -> length = size;
    1d5c:	8104      	strh	r4, [r0, #8]
	p -> attributes . value = 0;
    1d5e:	8143      	strh	r3, [r0, #10]
#endif
	return p;
	/*
	 * Note that this doesn't initialize the plugin/phys/session stuff.
	 */
}
    1d60:	bd10      	pop	{r4, pc}

00001d62 <deq>:
	if (p->attributes.b.queued) {
    1d62:	7a83      	ldrb	r3, [r0, #10]
    1d64:	07db      	lsls	r3, r3, #31
    1d66:	d508      	bpl.n	1d7a <deq+0x18>
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1d68:	e9d0 2300 	ldrd	r2, r3, [r0]
    1d6c:	6053      	str	r3, [r2, #4]
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1d6e:	6802      	ldr	r2, [r0, #0]
    1d70:	601a      	str	r2, [r3, #0]
		p->attributes.b.queued = 0;
    1d72:	7a83      	ldrb	r3, [r0, #10]
    1d74:	f36f 0300 	bfc	r3, #0, #1
    1d78:	7283      	strb	r3, [r0, #10]
}
    1d7a:	4770      	bx	lr

00001d7c <rlp>:
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1d7c:	b508      	push	{r3, lr}
	deq (p);	// Remove from queue
    1d7e:	f7ff fff0 	bl	1d62 <deq>
}
    1d82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tfree ((address)p);
    1d86:	f7ff be6b 	b.w	1a60 <__pi_free>
	...

00001d8c <enq>:
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1d8c:	b538      	push	{r3, r4, r5, lr}
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1d8e:	7a8b      	ldrb	r3, [r1, #10]
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1d90:	4605      	mov	r5, r0
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1d92:	07da      	lsls	r2, r3, #31
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1d94:	460c      	mov	r4, r1
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1d96:	d503      	bpl.n	1da0 <enq+0x14>
    1d98:	200a      	movs	r0, #10
    1d9a:	490e      	ldr	r1, [pc, #56]	; (1dd4 <enq+0x48>)
    1d9c:	f7fe ff08 	bl	bb0 <__pi_syserror>
	if (q_empty (q))
    1da0:	6803      	ldr	r3, [r0, #0]
    1da2:	4283      	cmp	r3, r0
    1da4:	d101      	bne.n	1daa <enq+0x1e>
		trigger (q);
    1da6:	f7ff fd4b 	bl	1840 <__pi_trigger>
	if (p->attributes.b.urgent) {
    1daa:	7aa3      	ldrb	r3, [r4, #10]
    1dac:	075b      	lsls	r3, r3, #29
    1dae:	d50a      	bpl.n	1dc6 <enq+0x3a>
		p->u.bqueue.next = q->next;
    1db0:	682b      	ldr	r3, [r5, #0]
		p->u.bqueue.prev = q;
    1db2:	e9c4 3500 	strd	r3, r5, [r4]
		q->next->prev = (qitem_t*) p;
    1db6:	682b      	ldr	r3, [r5, #0]
    1db8:	605c      	str	r4, [r3, #4]
		q->next = (qitem_t*) p;
    1dba:	602c      	str	r4, [r5, #0]
	p->attributes.b.queued = 1;
    1dbc:	7aa3      	ldrb	r3, [r4, #10]
    1dbe:	f043 0301 	orr.w	r3, r3, #1
    1dc2:	72a3      	strb	r3, [r4, #10]
}
    1dc4:	bd38      	pop	{r3, r4, r5, pc}
		p->u.bqueue.next = q;
    1dc6:	6025      	str	r5, [r4, #0]
		p->u.bqueue.prev = q->prev;
    1dc8:	686b      	ldr	r3, [r5, #4]
    1dca:	6063      	str	r3, [r4, #4]
		q->prev->next = (qitem_t*) p;
    1dcc:	601c      	str	r4, [r3, #0]
		q->prev = (qitem_t*) p;
    1dce:	606c      	str	r4, [r5, #4]
    1dd0:	e7f4      	b.n	1dbc <enq+0x30>
    1dd2:	bf00      	nop
    1dd4:	00004f85 	andeq	r4, r0, r5, lsl #31

00001dd8 <dispose>:
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1dd8:	b510      	push	{r4, lr}
    1dda:	4604      	mov	r4, r0
	deq (p);	// Soft dequeue, timer and hook left intact
    1ddc:	f7ff ffc1 	bl	1d62 <deq>
	switch (dv) {
    1de0:	3901      	subs	r1, #1
    1de2:	2904      	cmp	r1, #4
    1de4:	d832      	bhi.n	1e4c <dispose+0x74>
    1de6:	e8df f001 	tbb	[pc, r1]
    1dea:	1d03072d 	stcne	7, cr0, [r3, #-180]	; 0xffffff4c
    1dee:	7a830019 	bvc	fe0c1e5a <_estack+0xde0bce5a>
			p->attributes.b.urgent = 1;
    1df2:	f043 0304 	orr.w	r3, r3, #4
    1df6:	7283      	strb	r3, [r0, #10]
			verify_ses (p, "dispose ses");
    1df8:	8963      	ldrh	r3, [r4, #10]
    1dfa:	f3c3 03c6 	ubfx	r3, r3, #3, #7
    1dfe:	2b07      	cmp	r3, #7
    1e00:	d803      	bhi.n	1e0a <dispose+0x32>
    1e02:	4a13      	ldr	r2, [pc, #76]	; (1e50 <dispose+0x78>)
    1e04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    1e08:	b918      	cbnz	r0, 1e12 <dispose+0x3a>
    1e0a:	4912      	ldr	r1, [pc, #72]	; (1e54 <dispose+0x7c>)
			verify_phy (p, "dispose phy");
    1e0c:	200a      	movs	r0, #10
    1e0e:	f7fe fecf 	bl	bb0 <__pi_syserror>
			enq (&(descriptors [p->attributes.b.session]->rqueue),
    1e12:	4621      	mov	r1, r4
}
    1e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			enq (oqueues [p->attributes.b.phys], p);
    1e18:	f7ff bfb8 	b.w	1d8c <enq>
			p->attributes.b.urgent = 1;
    1e1c:	7a83      	ldrb	r3, [r0, #10]
    1e1e:	f043 0304 	orr.w	r3, r3, #4
    1e22:	7283      	strb	r3, [r0, #10]
			verify_phy (p, "dispose phy");
    1e24:	7ae2      	ldrb	r2, [r4, #11]
    1e26:	2a5f      	cmp	r2, #95	; 0x5f
    1e28:	ea4f 1352 	mov.w	r3, r2, lsr #5
    1e2c:	d803      	bhi.n	1e36 <dispose+0x5e>
    1e2e:	4a0a      	ldr	r2, [pc, #40]	; (1e58 <dispose+0x80>)
    1e30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1e34:	b90a      	cbnz	r2, 1e3a <dispose+0x62>
    1e36:	4909      	ldr	r1, [pc, #36]	; (1e5c <dispose+0x84>)
    1e38:	e7e8      	b.n	1e0c <dispose+0x34>
			enq (oqueues [p->attributes.b.phys], p);
    1e3a:	4a09      	ldr	r2, [pc, #36]	; (1e60 <dispose+0x88>)
    1e3c:	4621      	mov	r1, r4
    1e3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    1e42:	e7e7      	b.n	1e14 <dispose+0x3c>
}
    1e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			rlp (p);
    1e48:	f7ff bf98 	b.w	1d7c <rlp>
}
    1e4c:	bd10      	pop	{r4, pc}
    1e4e:	bf00      	nop
    1e50:	2000059c 	mulcs	r0, ip, r5
    1e54:	00004f8b 	andeq	r4, r0, fp, lsl #31
    1e58:	200005c8 	andcs	r0, r0, r8, asr #11
    1e5c:	00004f97 	muleq	r0, r7, pc	; <UNPREDICTABLE>
    1e60:	200005bc 			; <UNDEFINED> instruction: 0x200005bc

00001e64 <tcv_endp>:
		/* ===================================== */
		/* Functions callable by the application */
		/* ===================================== */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1e64:	b510      	push	{r4, lr}
 * somewhere or deallocated.
 */
	hblock_t *b;

	b = header (p);
	if (b->attributes.b.outgoing) {
    1e66:	f810 2c02 	ldrb.w	r2, [r0, #-2]
	b = header (p);
    1e6a:	f1a0 040c 	sub.w	r4, r0, #12
	if (b->attributes.b.outgoing) {
    1e6e:	0792      	lsls	r2, r2, #30
    1e70:	d522      	bpl.n	1eb8 <tcv_endp+0x54>
		verify_ses (b, "tcv02");
    1e72:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    1e76:	f3c2 02c6 	ubfx	r2, r2, #3, #7
    1e7a:	2a07      	cmp	r2, #7
    1e7c:	d803      	bhi.n	1e86 <tcv_endp+0x22>
    1e7e:	4911      	ldr	r1, [pc, #68]	; (1ec4 <tcv_endp+0x60>)
    1e80:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1e84:	b91a      	cbnz	r2, 1e8e <tcv_endp+0x2a>
    1e86:	4910      	ldr	r1, [pc, #64]	; (1ec8 <tcv_endp+0x64>)
		verify_plg (b, tcv_out, "tcv03");
    1e88:	200a      	movs	r0, #10
    1e8a:	f7fe fe91 	bl	bb0 <__pi_syserror>
    1e8e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    1e92:	f3c3 0382 	ubfx	r3, r3, #2, #3
    1e96:	2b02      	cmp	r3, #2
    1e98:	d805      	bhi.n	1ea6 <tcv_endp+0x42>
    1e9a:	4a0c      	ldr	r2, [pc, #48]	; (1ecc <tcv_endp+0x68>)
    1e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1ea0:	b10b      	cbz	r3, 1ea6 <tcv_endp+0x42>
    1ea2:	691b      	ldr	r3, [r3, #16]
    1ea4:	b90b      	cbnz	r3, 1eaa <tcv_endp+0x46>
    1ea6:	490a      	ldr	r1, [pc, #40]	; (1ed0 <tcv_endp+0x6c>)
    1ea8:	e7ee      	b.n	1e88 <tcv_endp+0x24>
		dispose (b, plugins [b->attributes.b.plugin] ->
    1eaa:	4798      	blx	r3
    1eac:	4601      	mov	r1, r0
    1eae:	4620      	mov	r0, r4
		 * This is a received packet - just drop it, no need to verify
		 * session, can be legitimately invoked after the session has
		 * been closed,
		 */
		rlp (b);
}
    1eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dispose (b, plugins [b->attributes.b.plugin] ->
    1eb4:	f7ff bf90 	b.w	1dd8 <dispose>
		rlp (b);
    1eb8:	4620      	mov	r0, r4
}
    1eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rlp (b);
    1ebe:	f7ff bf5d 	b.w	1d7c <rlp>
    1ec2:	bf00      	nop
    1ec4:	2000059c 	mulcs	r0, ip, r5
    1ec8:	00004fa3 	andeq	r4, r0, r3, lsr #31
    1ecc:	200005e0 	andcs	r0, r0, r0, ror #11
    1ed0:	00004fa9 	andeq	r4, r0, r9, lsr #31

00001ed4 <tcv_open>:
#else
// ============================================================================

// Non-blocking open and close

__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1ed4:	b40c      	push	{r2, r3}
    1ed6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    1eda:	ab0a      	add	r3, sp, #40	; 0x28
    1edc:	f853 8b04 	ldr.w	r8, [r3], #4
	va_list		ap;
	va_start (ap, plid);

#if DIAG_MESSAGES > 1
	/* Check if we have the plugin and the phy */
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1ee0:	2902      	cmp	r1, #2
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1ee2:	460f      	mov	r7, r1
	va_start (ap, plid);
    1ee4:	9301      	str	r3, [sp, #4]
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1ee6:	d80b      	bhi.n	1f00 <tcv_open+0x2c>
    1ee8:	4b24      	ldr	r3, [pc, #144]	; (1f7c <tcv_open+0xa8>)
    1eea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    1eee:	b13b      	cbz	r3, 1f00 <tcv_open+0x2c>
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1ef0:	f1b8 0f02 	cmp.w	r8, #2
    1ef4:	d804      	bhi.n	1f00 <tcv_open+0x2c>
    1ef6:	4b22      	ldr	r3, [pc, #136]	; (1f80 <tcv_open+0xac>)
    1ef8:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    1efc:	4699      	mov	r9, r3
    1efe:	b91a      	cbnz	r2, 1f08 <tcv_open+0x34>
			syserror (ENODEVICE, "tcv04");
    1f00:	2001      	movs	r0, #1
    1f02:	4920      	ldr	r1, [pc, #128]	; (1f84 <tcv_open+0xb0>)
	if (fd == TCV_MAX_DESC)
		return ERROR;

	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
	if (s == NULL)
		syserror (EMALLOC, "tcv05");
    1f04:	f7fe fe54 	bl	bb0 <__pi_syserror>
	attp.b.outgoing = 1;
    1f08:	f008 0307 	and.w	r3, r8, #7
    1f0c:	029b      	lsls	r3, r3, #10
    1f0e:	f043 0302 	orr.w	r3, r3, #2
    1f12:	ea43 3541 	orr.w	r5, r3, r1, lsl #13
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f16:	4b1c      	ldr	r3, [pc, #112]	; (1f88 <tcv_open+0xb4>)
    1f18:	2600      	movs	r6, #0
    1f1a:	469a      	mov	sl, r3
		if (descriptors [fd] == NULL)
    1f1c:	f853 2b04 	ldr.w	r2, [r3], #4
    1f20:	b312      	cbz	r2, 1f68 <tcv_open+0x94>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f22:	3601      	adds	r6, #1
    1f24:	2e08      	cmp	r6, #8
    1f26:	d1f9      	bne.n	1f1c <tcv_open+0x48>
		return ERROR;
    1f28:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		return ERROR;
	}

	descriptors [fd] = s;
	return fd;
}
    1f2c:	4630      	mov	r0, r6
    1f2e:	b002      	add	sp, #8
    1f30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1f34:	b002      	add	sp, #8
    1f36:	4770      	bx	lr
	s->attpattern.b.session = fd;
    1f38:	462b      	mov	r3, r5
    1f3a:	f366 03c9 	bfi	r3, r6, #3, #7
	descriptors [fd] = s;
    1f3e:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	s->attpattern.b.session = fd;
    1f42:	8123      	strh	r3, [r4, #8]
	q_init (&(s->rqueue));
    1f44:	e9c4 4400 	strd	r4, r4, [r4]
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1f48:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
    1f4c:	681b      	ldr	r3, [r3, #0]
    1f4e:	b913      	cbnz	r3, 1f56 <tcv_open+0x82>
    1f50:	200a      	movs	r0, #10
    1f52:	490e      	ldr	r1, [pc, #56]	; (1f8c <tcv_open+0xb8>)
    1f54:	e7d6      	b.n	1f04 <tcv_open+0x30>
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1f56:	4631      	mov	r1, r6
    1f58:	4638      	mov	r0, r7
    1f5a:	9a01      	ldr	r2, [sp, #4]
    1f5c:	4798      	blx	r3
    1f5e:	2800      	cmp	r0, #0
    1f60:	d1e2      	bne.n	1f28 <tcv_open+0x54>
	descriptors [fd] = s;
    1f62:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	return fd;
    1f66:	e7e1      	b.n	1f2c <tcv_open+0x58>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1f68:	200c      	movs	r0, #12
    1f6a:	f7ff fdc5 	bl	1af8 <__pi_malloc>
	if (s == NULL)
    1f6e:	4604      	mov	r4, r0
    1f70:	2800      	cmp	r0, #0
    1f72:	d1e1      	bne.n	1f38 <tcv_open+0x64>
		syserror (EMALLOC, "tcv05");
    1f74:	2006      	movs	r0, #6
    1f76:	4906      	ldr	r1, [pc, #24]	; (1f90 <tcv_open+0xbc>)
    1f78:	e7c4      	b.n	1f04 <tcv_open+0x30>
    1f7a:	bf00      	nop
    1f7c:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
    1f80:	200005e0 	andcs	r0, r0, r0, ror #11
    1f84:	00004faf 	andeq	r4, r0, pc, lsr #31
    1f88:	2000059c 	mulcs	r0, ip, r5
    1f8c:	00004fbb 			; <UNDEFINED> instruction: 0x00004fbb
    1f90:	00004fb5 			; <UNDEFINED> instruction: 0x00004fb5

00001f94 <tcv_plug>:

__PUBLF (PicOSNode, int, tcv_plug) (int ord, const tcvplug_t *pl) {
/*
 * This is one way now. Later we may implement switching plugs on the fly.
 */
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1f94:	2802      	cmp	r0, #2
    1f96:	d809      	bhi.n	1fac <tcv_plug+0x18>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1f98:	4b06      	ldr	r3, [pc, #24]	; (1fb4 <tcv_plug+0x20>)
    1f9a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1f9e:	b10a      	cbz	r2, 1fa4 <tcv_plug+0x10>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1fa0:	428a      	cmp	r2, r1
    1fa2:	d103      	bne.n	1fac <tcv_plug+0x18>
		return ERROR;

	plugins [ord] = pl;
    1fa4:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return 0;
    1fa8:	2000      	movs	r0, #0
    1faa:	4770      	bx	lr
		return ERROR;
    1fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1fb0:	4770      	bx	lr
    1fb2:	bf00      	nop
    1fb4:	200005e0 	andcs	r0, r0, r0, ror #11

00001fb8 <tcv_rnp>:
 */
	address p;
	hblock_t *b;
	qhead_t *rq;

	verify_fds (fd, "tcv10");
    1fb8:	2908      	cmp	r1, #8
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    1fba:	b538      	push	{r3, r4, r5, lr}
    1fbc:	4603      	mov	r3, r0
	verify_fds (fd, "tcv10");
    1fbe:	d803      	bhi.n	1fc8 <tcv_rnp+0x10>
    1fc0:	4a19      	ldr	r2, [pc, #100]	; (2028 <tcv_rnp+0x70>)
    1fc2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    1fc6:	b918      	cbnz	r0, 1fd0 <tcv_rnp+0x18>
    1fc8:	4918      	ldr	r1, [pc, #96]	; (202c <tcv_rnp+0x74>)
	deqtm (b);	// ... and clear its timer

	/* Packet pointer */
	p = ((address)(b + 1));
	/* Set the pointers to application data */
	verify_plg (b, tcv_frm, "tcv11");
    1fca:	200a      	movs	r0, #10
    1fcc:	f7fe fdf0 	bl	bb0 <__pi_syserror>
	b = q_first (rq);
    1fd0:	6804      	ldr	r4, [r0, #0]
	if (q_end (b, rq)) {
    1fd2:	42a0      	cmp	r0, r4
    1fd4:	d108      	bne.n	1fe8 <tcv_rnp+0x30>
		if (state != WNONE) {
    1fd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fda:	4293      	cmp	r3, r2
    1fdc:	d021      	beq.n	2022 <tcv_rnp+0x6a>
			when (rq, state);
    1fde:	4619      	mov	r1, r3
    1fe0:	f7ff fc14 	bl	180c <__pi_wait>
			release;
    1fe4:	f7ff f9a2 	bl	132c <__pi_release>
	deq (b);	// Dequeue the packet ...
    1fe8:	4620      	mov	r0, r4
    1fea:	f7ff feba 	bl	1d62 <deq>
	verify_plg (b, tcv_frm, "tcv11");
    1fee:	7ae3      	ldrb	r3, [r4, #11]
	p = ((address)(b + 1));
    1ff0:	f104 050c 	add.w	r5, r4, #12
	verify_plg (b, tcv_frm, "tcv11");
    1ff4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    1ff8:	2b02      	cmp	r3, #2
    1ffa:	d805      	bhi.n	2008 <tcv_rnp+0x50>
    1ffc:	4a0c      	ldr	r2, [pc, #48]	; (2030 <tcv_rnp+0x78>)
    1ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2002:	b10b      	cbz	r3, 2008 <tcv_rnp+0x50>
    2004:	68db      	ldr	r3, [r3, #12]
    2006:	b90b      	cbnz	r3, 200c <tcv_rnp+0x54>
    2008:	490a      	ldr	r1, [pc, #40]	; (2034 <tcv_rnp+0x7c>)
    200a:	e7de      	b.n	1fca <tcv_rnp+0x12>
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    200c:	4621      	mov	r1, r4
    200e:	4628      	mov	r0, r5
    2010:	4798      	blx	r3
	/* Adjust the second pointer to look like the length */
	b->u.pointers.tail =
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2012:	8823      	ldrh	r3, [r4, #0]
    2014:	8862      	ldrh	r2, [r4, #2]
    2016:	441a      	add	r2, r3
    2018:	8923      	ldrh	r3, [r4, #8]
    201a:	1a9b      	subs	r3, r3, r2
	b->u.pointers.tail =
    201c:	8063      	strh	r3, [r4, #2]
	/* OK, it seems that we are set */
	return p;
}
    201e:	4628      	mov	r0, r5
    2020:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    2022:	2500      	movs	r5, #0
    2024:	e7fb      	b.n	201e <tcv_rnp+0x66>
    2026:	bf00      	nop
    2028:	2000059c 	mulcs	r0, ip, r5
    202c:	00004fc1 	andeq	r4, r0, r1, asr #31
    2030:	200005e0 	andcs	r0, r0, r0, ror #11
    2034:	00004fc7 	andeq	r4, r0, r7, asr #31

00002038 <tcv_wnps>:
	hblock_t *b;
	tcvadp_t ptrs;
	sesdesc_t *s;
	int eid;

	verify_fds (fd, "tcv16");
    2038:	2908      	cmp	r1, #8
								Boolean urg) {
    203a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    203c:	4605      	mov	r5, r0
    203e:	4614      	mov	r4, r2
    2040:	461e      	mov	r6, r3
	verify_fds (fd, "tcv16");
    2042:	d803      	bhi.n	204c <tcv_wnps+0x14>
    2044:	4b26      	ldr	r3, [pc, #152]	; (20e0 <tcv_wnps+0xa8>)
    2046:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    204a:	b91f      	cbnz	r7, 2054 <tcv_wnps+0x1c>
    204c:	4925      	ldr	r1, [pc, #148]	; (20e4 <tcv_wnps+0xac>)

	s = descriptors [fd];

	verify_pld (s, tcv_frm, "tcv17");
    204e:	200a      	movs	r0, #10
    2050:	f7fe fdae 	bl	bb0 <__pi_syserror>
    2054:	7a7b      	ldrb	r3, [r7, #9]
    2056:	f3c3 0382 	ubfx	r3, r3, #2, #3
    205a:	2b02      	cmp	r3, #2
    205c:	d805      	bhi.n	206a <tcv_wnps+0x32>
    205e:	4a22      	ldr	r2, [pc, #136]	; (20e8 <tcv_wnps+0xb0>)
    2060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2064:	b10b      	cbz	r3, 206a <tcv_wnps+0x32>
    2066:	68db      	ldr	r3, [r3, #12]
    2068:	b90b      	cbnz	r3, 206e <tcv_wnps+0x36>
    206a:	4920      	ldr	r1, [pc, #128]	; (20ec <tcv_wnps+0xb4>)
    206c:	e7ef      	b.n	204e <tcv_wnps+0x16>

	// tcv_frm invoked with packet == NULL, pass in the frame parameters
	// the session and urgent flag
	ptrs.head = (word) fd;
    206e:	f8ad 1004 	strh.w	r1, [sp, #4]
	ptrs.tail = (word) urg;

	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    2072:	2000      	movs	r0, #0
	ptrs.tail = (word) urg;
    2074:	f8ad 6006 	strh.w	r6, [sp, #6]
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    2078:	a901      	add	r1, sp, #4
    207a:	4798      	blx	r3
    207c:	b158      	cbz	r0, 2096 <tcv_wnps+0x5e>
		// Blocked by the plugin
		if (state != WNONE) {
    207e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2082:	429d      	cmp	r5, r3
    2084:	d102      	bne.n	208c <tcv_wnps+0x54>
			when (eid, state);
			release;
		}
		return NULL;
    2086:	2000      	movs	r0, #0
		b->attributes.b.urgent = 1;
	b->u.pointers.head = ptrs.head;
	b->u.pointers.tail = length;

	return (address) (b + 1);
}
    2088:	b003      	add	sp, #12
    208a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			when (eid, state);
    208c:	4629      	mov	r1, r5
    208e:	f7ff fbbd 	bl	180c <__pi_wait>
			release;
    2092:	f7ff f94b 	bl	132c <__pi_release>
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    2096:	7a3b      	ldrb	r3, [r7, #8]
    2098:	07db      	lsls	r3, r3, #31
    209a:	d501      	bpl.n	20a0 <tcv_wnps+0x68>
    209c:	4914      	ldr	r1, [pc, #80]	; (20f0 <tcv_wnps+0xb8>)
    209e:	e7d6      	b.n	204e <tcv_wnps+0x16>
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    20a0:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    20a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    20a8:	b2a4      	uxth	r4, r4
    20aa:	4418      	add	r0, r3
    20ac:	4420      	add	r0, r4
    20ae:	b280      	uxth	r0, r0
    20b0:	f7ff fe4c 	bl	1d4c <apb>
    20b4:	b938      	cbnz	r0, 20c6 <tcv_wnps+0x8e>
		if (state != WNONE) {
    20b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    20ba:	429d      	cmp	r5, r3
    20bc:	d0e3      	beq.n	2086 <tcv_wnps+0x4e>
			tmwait (state);
    20be:	4628      	mov	r0, r5
    20c0:	f7ff fd88 	bl	1bd4 <__pi_waitmem>
    20c4:	e7e5      	b.n	2092 <tcv_wnps+0x5a>
	b->attributes = s->attpattern;
    20c6:	893b      	ldrh	r3, [r7, #8]
    20c8:	8143      	strh	r3, [r0, #10]
	if (urg)
    20ca:	b11e      	cbz	r6, 20d4 <tcv_wnps+0x9c>
		b->attributes.b.urgent = 1;
    20cc:	7a83      	ldrb	r3, [r0, #10]
    20ce:	f043 0304 	orr.w	r3, r3, #4
    20d2:	7283      	strb	r3, [r0, #10]
	b->u.pointers.head = ptrs.head;
    20d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	b->u.pointers.tail = length;
    20d8:	8044      	strh	r4, [r0, #2]
	b->u.pointers.head = ptrs.head;
    20da:	8003      	strh	r3, [r0, #0]
	return (address) (b + 1);
    20dc:	300c      	adds	r0, #12
    20de:	e7d3      	b.n	2088 <tcv_wnps+0x50>
    20e0:	2000059c 	mulcs	r0, ip, r5
    20e4:	00004fcd 	andeq	r4, r0, sp, asr #31
    20e8:	200005e0 	andcs	r0, r0, r0, ror #11
    20ec:	00004fd3 	ldrdeq	r4, [r0], -r3
    20f0:	00004fd9 	ldrdeq	r4, [r0], -r9

000020f4 <tcv_read>:

__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    20f4:	b538      	push	{r3, r4, r5, lr}
    20f6:	4604      	mov	r4, r0
/*
 * Extracts (up to) len bytes from the packet
 */
	hblock_t *b = header (p);

	if (len >= b->u.pointers.tail)
    20f8:	f834 5c0a 	ldrh.w	r5, [r4, #-10]
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    20fc:	4608      	mov	r0, r1
    20fe:	4295      	cmp	r5, r2
    2100:	bfa8      	it	ge
    2102:	4615      	movge	r5, r2
		len = b->u.pointers.tail;

	if (len > 0) {
    2104:	2d00      	cmp	r5, #0
    2106:	dd10      	ble.n	212a <tcv_read+0x36>
		memcpy ((char*)buf, ((char*)p) + b->u.pointers.head, len);
    2108:	f834 1c0c 	ldrh.w	r1, [r4, #-12]
    210c:	462a      	mov	r2, r5
    210e:	4421      	add	r1, r4
    2110:	f7ff fc0d 	bl	192e <__pi_memcpy>
		b->u.pointers.tail -= len;
    2114:	f834 2c0a 	ldrh.w	r2, [r4, #-10]
    2118:	b2ab      	uxth	r3, r5
    211a:	1ad2      	subs	r2, r2, r3
    211c:	f824 2c0a 	strh.w	r2, [r4, #-10]
		b->u.pointers.head += len;
    2120:	f834 2c0c 	ldrh.w	r2, [r4, #-12]
    2124:	4413      	add	r3, r2
    2126:	f824 3c0c 	strh.w	r3, [r4, #-12]
	}

	return len;
}
    212a:	4628      	mov	r0, r5
    212c:	bd38      	pop	{r3, r4, r5, pc}
	...

00002130 <tcvp_control>:
	           /* ================================ */
	           /* Functions callable by the plugin */
	           /* ================================ */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2130:	4603      	mov	r3, r0
/*
 * Plugin version of interface control
 */
	verify_fph (phy, "tcv23");
    2132:	2b03      	cmp	r3, #3
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2134:	4608      	mov	r0, r1
    2136:	b510      	push	{r4, lr}
    2138:	4611      	mov	r1, r2
	verify_fph (phy, "tcv23");
    213a:	d803      	bhi.n	2144 <tcvp_control+0x14>
    213c:	4a05      	ldr	r2, [pc, #20]	; (2154 <tcvp_control+0x24>)
    213e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2142:	b91b      	cbnz	r3, 214c <tcvp_control+0x1c>
    2144:	200a      	movs	r0, #10
    2146:	4904      	ldr	r1, [pc, #16]	; (2158 <tcvp_control+0x28>)
    2148:	f7fe fd32 	bl	bb0 <__pi_syserror>
	return (physical [phy]) (opt, arg);
}
    214c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return (physical [phy]) (opt, arg);
    2150:	4718      	bx	r3
    2152:	bf00      	nop
    2154:	200005c8 	andcs	r0, r0, r8, asr #11
    2158:	00004fdf 	ldrdeq	r4, [r0], -pc	; <UNPREDICTABLE>

0000215c <tcv_control>:
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    215c:	b508      	push	{r3, lr}
	if (opt < 0) {
    215e:	1e0b      	subs	r3, r1, #0
    2160:	da11      	bge.n	2186 <tcv_control+0x2a>
		if (fd < 0)
    2162:	2800      	cmp	r0, #0
    2164:	db1f      	blt.n	21a6 <tcv_control+0x4a>
		if (opt == PHYSOPT_PLUGINFO) {
    2166:	3301      	adds	r3, #1
    2168:	d107      	bne.n	217a <tcv_control+0x1e>
			if (fd >= TCV_MAX_PLUGS)
    216a:	2802      	cmp	r0, #2
    216c:	dc1b      	bgt.n	21a6 <tcv_control+0x4a>
			if ((p = plugins [fd]) == NULL)
    216e:	4b0f      	ldr	r3, [pc, #60]	; (21ac <tcv_control+0x50>)
    2170:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2174:	b100      	cbz	r0, 2178 <tcv_control+0x1c>
			return p->tcv_info;
    2176:	69c0      	ldr	r0, [r0, #28]
}
    2178:	bd08      	pop	{r3, pc}
		if (fd >= TCV_MAX_PHYS)
    217a:	2802      	cmp	r0, #2
    217c:	dc13      	bgt.n	21a6 <tcv_control+0x4a>
		return physinfo [fd];
    217e:	4b0c      	ldr	r3, [pc, #48]	; (21b0 <tcv_control+0x54>)
    2180:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2184:	e7f8      	b.n	2178 <tcv_control+0x1c>
	verify_fds (fd, "tcv22");
    2186:	2808      	cmp	r0, #8
    2188:	d803      	bhi.n	2192 <tcv_control+0x36>
    218a:	4b0a      	ldr	r3, [pc, #40]	; (21b4 <tcv_control+0x58>)
    218c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2190:	b91b      	cbnz	r3, 219a <tcv_control+0x3e>
    2192:	200a      	movs	r0, #10
    2194:	4908      	ldr	r1, [pc, #32]	; (21b8 <tcv_control+0x5c>)
    2196:	f7fe fd0b 	bl	bb0 <__pi_syserror>
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    219a:	7a58      	ldrb	r0, [r3, #9]
}
    219c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    21a0:	0940      	lsrs	r0, r0, #5
    21a2:	f7ff bfc5 	b.w	2130 <tcvp_control>
			return 0;
    21a6:	2000      	movs	r0, #0
    21a8:	e7e6      	b.n	2178 <tcv_control+0x1c>
    21aa:	bf00      	nop
    21ac:	200005e0 	andcs	r0, r0, r0, ror #11
    21b0:	200005d4 	ldrdcs	r0, [r0], -r4
    21b4:	2000059c 	mulcs	r0, ip, r5
    21b8:	00004fe5 	andeq	r4, r0, r5, ror #31

000021bc <tcvp_new>:
 * Plugin-visible dispose
 */
	dispose (header (p), dsp);
}

__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    21bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21be:	b280      	uxth	r0, r0
    21c0:	4615      	mov	r5, r2
/*
 * Create a new packet with attributes inherited from the session
 */
	hblock_t *p;

	if (dsp != TCV_DSP_PASS) {
    21c2:	460e      	mov	r6, r1
    21c4:	b309      	cbz	r1, 220a <tcvp_new+0x4e>

		/* Session must be defined for that */
		if (ses == NONE)
    21c6:	1c53      	adds	r3, r2, #1
    21c8:	d103      	bne.n	21d2 <tcvp_new+0x16>
			syserror (EREQPAR, "tcv26");
    21ca:	2003      	movs	r0, #3
    21cc:	4912      	ldr	r1, [pc, #72]	; (2218 <tcvp_new+0x5c>)
		verify_fds (ses, "tcv27");
    21ce:	f7fe fcef 	bl	bb0 <__pi_syserror>
    21d2:	2a08      	cmp	r2, #8
    21d4:	d803      	bhi.n	21de <tcvp_new+0x22>
    21d6:	4f11      	ldr	r7, [pc, #68]	; (221c <tcvp_new+0x60>)
    21d8:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    21dc:	b913      	cbnz	r3, 21e4 <tcvp_new+0x28>
    21de:	200a      	movs	r0, #10
    21e0:	490f      	ldr	r1, [pc, #60]	; (2220 <tcvp_new+0x64>)
    21e2:	e7f4      	b.n	21ce <tcvp_new+0x12>
			TCV_LIMIT_XMT)) {
		       		// Drop
		    	   	return NULL;
		}
#endif
		if ((p = apb (size)) != NULL) {
    21e4:	f7ff fdb2 	bl	1d4c <apb>
    21e8:	4604      	mov	r4, r0
    21ea:	b908      	cbnz	r0, 21f0 <tcvp_new+0x34>
			/* If you accidentally call tcv_endp on it */
			p->attributes.b.outgoing = 0;
			dispose (p, dsp);
			return (address)(p + 1);
		}
		return NULL;
    21ec:	2000      	movs	r0, #0

	if ((p = apb (size)) != NULL)
		return (address)(p + 1);
	else
		return NULL;
}
    21ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p->attributes = descriptors [ses] -> attpattern;
    21f0:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
			dispose (p, dsp);
    21f4:	4631      	mov	r1, r6
			p->attributes = descriptors [ses] -> attpattern;
    21f6:	891b      	ldrh	r3, [r3, #8]
    21f8:	8143      	strh	r3, [r0, #10]
			p->attributes.b.outgoing = 0;
    21fa:	f36f 0341 	bfc	r3, #1, #1
    21fe:	7283      	strb	r3, [r0, #10]
			dispose (p, dsp);
    2200:	f7ff fdea 	bl	1dd8 <dispose>
			return (address)(p + 1);
    2204:	f104 000c 	add.w	r0, r4, #12
    2208:	e7f1      	b.n	21ee <tcvp_new+0x32>
	if ((p = apb (size)) != NULL)
    220a:	f7ff fd9f 	bl	1d4c <apb>
    220e:	2800      	cmp	r0, #0
    2210:	d0ec      	beq.n	21ec <tcvp_new+0x30>
		return (address)(p + 1);
    2212:	300c      	adds	r0, #12
    2214:	e7eb      	b.n	21ee <tcvp_new+0x32>
    2216:	bf00      	nop
    2218:	00004feb 	andeq	r4, r0, fp, ror #31
    221c:	2000059c 	mulcs	r0, ip, r5
    2220:	00004ff1 	strdeq	r4, [r0], -r1

00002224 <tcvphy_reg>:
 * points to a function that controls (i.e., changes the options of) the
 * interface.
 */
	qhead_t *q;

	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2224:	2802      	cmp	r0, #2
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2226:	b510      	push	{r4, lr}
    2228:	4604      	mov	r4, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    222a:	d803      	bhi.n	2234 <tcvphy_reg+0x10>
    222c:	4b0c      	ldr	r3, [pc, #48]	; (2260 <tcvphy_reg+0x3c>)
    222e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2232:	b118      	cbz	r0, 223c <tcvphy_reg+0x18>
		syserror (EREQPAR, "tcv28");
    2234:	2003      	movs	r0, #3
    2236:	490b      	ldr	r1, [pc, #44]	; (2264 <tcvphy_reg+0x40>)
	physical [phy] = ps;
	physinfo [phy] = info;

	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
	if (q == NULL)
		syserror (EMALLOC, "tcv29");
    2238:	f7fe fcba 	bl	bb0 <__pi_syserror>
	physical [phy] = ps;
    223c:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	physinfo [phy] = info;
    2240:	4b09      	ldr	r3, [pc, #36]	; (2268 <tcvphy_reg+0x44>)
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2242:	2008      	movs	r0, #8
	physinfo [phy] = info;
    2244:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2248:	f7ff fc56 	bl	1af8 <__pi_malloc>
    224c:	4a07      	ldr	r2, [pc, #28]	; (226c <tcvphy_reg+0x48>)
    224e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
	if (q == NULL)
    2252:	b910      	cbnz	r0, 225a <tcvphy_reg+0x36>
		syserror (EMALLOC, "tcv29");
    2254:	2006      	movs	r0, #6
    2256:	4906      	ldr	r1, [pc, #24]	; (2270 <tcvphy_reg+0x4c>)
    2258:	e7ee      	b.n	2238 <tcvphy_reg+0x14>
	q_init (q);
    225a:	e9c0 0000 	strd	r0, r0, [r0]
	/*
	 * Queue event identifier (which happens to be the queue pointer
	 * in disguise).
	 */
	return ptrtoint (q);
}
    225e:	bd10      	pop	{r4, pc}
    2260:	200005c8 	andcs	r0, r0, r8, asr #11
    2264:	00004ff7 	strdeq	r4, [r0], -r7
    2268:	200005d4 	ldrdcs	r0, [r0], -r4
    226c:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
    2270:	00004ffd 	strdeq	r4, [r0], -sp

00002274 <tcvphy_rcv>:

__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
	int plg, dsp, ses;
	tcvadp_t ap;
	address c;

	verify_fph (phy, "tcv30");
    2278:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    227a:	4605      	mov	r5, r0
    227c:	460f      	mov	r7, r1
    227e:	4614      	mov	r4, r2
    2280:	b085      	sub	sp, #20
	verify_fph (phy, "tcv30");
    2282:	d803      	bhi.n	228c <tcvphy_rcv+0x18>
    2284:	4b1e      	ldr	r3, [pc, #120]	; (2300 <tcvphy_rcv+0x8c>)
    2286:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    228a:	b91b      	cbnz	r3, 2294 <tcvphy_rcv+0x20>
    228c:	491d      	ldr	r1, [pc, #116]	; (2304 <tcvphy_rcv+0x90>)
		 * (or fall back) plugins to be used when none of the
		 * "specific" plugins claims the packet.
		 */
		if (plugins [plg] == NULL)
			continue;
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    228e:	200a      	movs	r0, #10
    2290:	f7fe fc8e 	bl	bb0 <__pi_syserror>
    2294:	4e1c      	ldr	r6, [pc, #112]	; (2308 <tcvphy_rcv+0x94>)
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2296:	f10d 080c 	add.w	r8, sp, #12
    229a:	f1a6 0a08 	sub.w	sl, r6, #8
		if (plugins [plg] == NULL)
    229e:	6833      	ldr	r3, [r6, #0]
    22a0:	46b1      	mov	r9, r6
    22a2:	3e04      	subs	r6, #4
    22a4:	b92b      	cbnz	r3, 22b2 <tcvphy_rcv+0x3e>
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    22a6:	45ca      	cmp	sl, r9
    22a8:	d1f9      	bne.n	229e <tcvphy_rcv+0x2a>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
		/*
		 * Either no one is claiming the packet or the claimant says
		 * we should drop it.
		 */
		return 0;
    22aa:	2000      	movs	r0, #0
		return 0;

	memcpy ((char*)c, ((char*)p) + ap.head, len);

	return 1;
}
    22ac:	b005      	add	sp, #20
    22ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    22b2:	f8d3 b008 	ldr.w	fp, [r3, #8]
    22b6:	f1bb 0f00 	cmp.w	fp, #0
    22ba:	d101      	bne.n	22c0 <tcvphy_rcv+0x4c>
    22bc:	4913      	ldr	r1, [pc, #76]	; (230c <tcvphy_rcv+0x98>)
    22be:	e7e6      	b.n	228e <tcvphy_rcv+0x1a>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    22c0:	4639      	mov	r1, r7
    22c2:	4622      	mov	r2, r4
    22c4:	4628      	mov	r0, r5
    22c6:	f8cd 8000 	str.w	r8, [sp]
    22ca:	ab02      	add	r3, sp, #8
    22cc:	47d8      	blx	fp
    22ce:	4601      	mov	r1, r0
    22d0:	2800      	cmp	r0, #0
    22d2:	d0e8      	beq.n	22a6 <tcvphy_rcv+0x32>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    22d4:	2801      	cmp	r0, #1
    22d6:	d0e8      	beq.n	22aa <tcvphy_rcv+0x36>
	len -= (ap.head + ap.tail);
    22d8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    22dc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    22e0:	441a      	add	r2, r3
    22e2:	1aa4      	subs	r4, r4, r2
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    22e4:	4620      	mov	r0, r4
    22e6:	9a02      	ldr	r2, [sp, #8]
    22e8:	f7ff ff68 	bl	21bc <tcvp_new>
    22ec:	2800      	cmp	r0, #0
    22ee:	d0dc      	beq.n	22aa <tcvphy_rcv+0x36>
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    22f0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    22f4:	4622      	mov	r2, r4
    22f6:	4439      	add	r1, r7
    22f8:	f7ff fb19 	bl	192e <__pi_memcpy>
	return 1;
    22fc:	2001      	movs	r0, #1
    22fe:	e7d5      	b.n	22ac <tcvphy_rcv+0x38>
    2300:	200005c8 	andcs	r0, r0, r8, asr #11
    2304:	00005003 	andeq	r5, r0, r3
    2308:	200005e8 	andcs	r0, r0, r8, ror #11
    230c:	00005009 	andeq	r5, r0, r9

00002310 <tcvphy_get>:
 * Returns the packet pointer and its length.
 */
	qhead_t	*oq;
	hblock_t *b;

	verify_fph (phy, "tcv32");
    2310:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_get) (int phy, int *len) {
    2312:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv32");
    2314:	d803      	bhi.n	231e <tcvphy_get+0xe>
    2316:	4b0b      	ldr	r3, [pc, #44]	; (2344 <tcvphy_get+0x34>)
    2318:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    231c:	b91b      	cbnz	r3, 2326 <tcvphy_get+0x16>
    231e:	200a      	movs	r0, #10
    2320:	4909      	ldr	r1, [pc, #36]	; (2348 <tcvphy_get+0x38>)
    2322:	f7fe fc45 	bl	bb0 <__pi_syserror>

	oq = oqueues [phy];
    2326:	4b09      	ldr	r3, [pc, #36]	; (234c <tcvphy_get+0x3c>)
    2328:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    232c:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq)) {
    232e:	4283      	cmp	r3, r0
    2330:	d005      	beq.n	233e <tcvphy_get+0x2e>
		/* The queue is empty */
		return NULL;
	}

	*len = b->length;
    2332:	8903      	ldrh	r3, [r0, #8]
    2334:	600b      	str	r3, [r1, #0]
	deq (b);	// Dequeue the packet ...
    2336:	f7ff fd14 	bl	1d62 <deq>
	deqtm (b);	// ... and clear its timer
	return (address) (b + 1);
    233a:	300c      	adds	r0, #12
}
    233c:	bd08      	pop	{r3, pc}
		return NULL;
    233e:	2000      	movs	r0, #0
    2340:	e7fc      	b.n	233c <tcvphy_get+0x2c>
    2342:	bf00      	nop
    2344:	200005c8 	andcs	r0, r0, r8, asr #11
    2348:	0000500f 	andeq	r5, r0, pc
    234c:	200005bc 			; <UNDEFINED> instruction: 0x200005bc

00002350 <tcvphy_top>:
 * Returns the pointer to the first outgoing packet.
 */
	qhead_t *oq;
	hblock_t *b;

	verify_fph (phy, "tcv33");
    2350:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_top) (int phy) {
    2352:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv33");
    2354:	d803      	bhi.n	235e <tcvphy_top+0xe>
    2356:	4b08      	ldr	r3, [pc, #32]	; (2378 <tcvphy_top+0x28>)
    2358:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    235c:	b91b      	cbnz	r3, 2366 <tcvphy_top+0x16>
    235e:	200a      	movs	r0, #10
    2360:	4906      	ldr	r1, [pc, #24]	; (237c <tcvphy_top+0x2c>)
    2362:	f7fe fc25 	bl	bb0 <__pi_syserror>

	oq = oqueues [phy];
    2366:	4b06      	ldr	r3, [pc, #24]	; (2380 <tcvphy_top+0x30>)
    2368:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    236c:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq))
    236e:	4283      	cmp	r3, r0
		return NULL;
    2370:	bf0c      	ite	eq
    2372:	2000      	moveq	r0, #0

	return (address)(b + 1);
    2374:	300c      	addne	r0, #12
}
    2376:	bd08      	pop	{r3, pc}
    2378:	200005c8 	andcs	r0, r0, r8, asr #11
    237c:	00005015 	andeq	r5, r0, r5, lsl r0
    2380:	200005bc 			; <UNDEFINED> instruction: 0x200005bc

00002384 <tcvphy_end>:

__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    2384:	b510      	push	{r4, lr}
/*
 * Marks the end of packet transmission
 */
	hblock_t *b = header (pkt);

	verify_plg (b, tcv_xmt, "tcv34");
    2386:	f810 3c01 	ldrb.w	r3, [r0, #-1]
	hblock_t *b = header (pkt);
    238a:	f1a0 040c 	sub.w	r4, r0, #12
	verify_plg (b, tcv_xmt, "tcv34");
    238e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    2392:	2b02      	cmp	r3, #2
    2394:	d805      	bhi.n	23a2 <tcvphy_end+0x1e>
    2396:	4a08      	ldr	r2, [pc, #32]	; (23b8 <tcvphy_end+0x34>)
    2398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    239c:	b10b      	cbz	r3, 23a2 <tcvphy_end+0x1e>
    239e:	695b      	ldr	r3, [r3, #20]
    23a0:	b91b      	cbnz	r3, 23aa <tcvphy_end+0x26>
    23a2:	200a      	movs	r0, #10
    23a4:	4905      	ldr	r1, [pc, #20]	; (23bc <tcvphy_end+0x38>)
    23a6:	f7fe fc03 	bl	bb0 <__pi_syserror>
	dispose (b, plugins [b->attributes.b.plugin] ->
    23aa:	4798      	blx	r3
    23ac:	4601      	mov	r1, r0
    23ae:	4620      	mov	r0, r4
		tcv_xmt (pkt));
}
    23b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dispose (b, plugins [b->attributes.b.plugin] ->
    23b4:	f7ff bd10 	b.w	1dd8 <dispose>
    23b8:	200005e0 	andcs	r0, r0, r0, ror #11
    23bc:	0000501b 	andeq	r5, r0, fp, lsl r0

000023c0 <tcv_init>:
	tcv_tservice = create TCVTimerService;
	tcv_tservice -> _pp_apid_ ();
#endif	/* __SMURPH__ */

#endif	/* TCV_TIMERS */
}
    23c0:	4770      	bx	lr

000023c2 <NmiSR>:
NmiSRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    23c2:	e7fe      	b.n	23c2 <NmiSR>

000023c4 <FaultISR>:
FaultISRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    23c4:	e7fe      	b.n	23c4 <FaultISR>

000023c6 <AONIntHandler>:
IntDefaultHandler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    23c6:	e7fe      	b.n	23c6 <AONIntHandler>

000023c8 <ResetISR>:
{
    23c8:	b508      	push	{r3, lr}
    SetupTrimDevice();
    23ca:	f001 fd15 	bl	3df8 <NOROM_SetupTrimDevice>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    23ce:	4b0c      	ldr	r3, [pc, #48]	; (2400 <zero_loop+0x20>)
    pui32Src = &_etext;
    23d0:	4a0c      	ldr	r2, [pc, #48]	; (2404 <zero_loop+0x24>)
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    23d2:	490d      	ldr	r1, [pc, #52]	; (2408 <zero_loop+0x28>)
    23d4:	428b      	cmp	r3, r1
    23d6:	d30d      	bcc.n	23f4 <zero_loop+0x14>
    __asm("    ldr     r0, =_bss\n"
    23d8:	480c      	ldr	r0, [pc, #48]	; (240c <zero_loop+0x2c>)
    23da:	490d      	ldr	r1, [pc, #52]	; (2410 <zero_loop+0x30>)
    23dc:	f04f 0200 	mov.w	r2, #0

000023e0 <zero_loop>:
    23e0:	4288      	cmp	r0, r1
    23e2:	bfb8      	it	lt
    23e4:	f840 2b04 	strlt.w	r2, [r0], #4
    23e8:	dbfa      	blt.n	23e0 <zero_loop>
   main();
    23ea:	f7ff f8e3 	bl	15b4 <main>
    FaultISR();
    23ee:	f7ff ffe9 	bl	23c4 <FaultISR>
}
    23f2:	bd08      	pop	{r3, pc}
        *pui32Dest++ = *pui32Src++;
    23f4:	f852 0b04 	ldr.w	r0, [r2], #4
    23f8:	f843 0b04 	str.w	r0, [r3], #4
    23fc:	e7ea      	b.n	23d4 <ResetISR+0xc>
    23fe:	bf00      	nop
    2400:	20000000 	andcs	r0, r0, r0
    2404:	00005a24 	andeq	r5, r0, r4, lsr #20
    2408:	20000540 	andcs	r0, r0, r0, asr #10
    240c:	20000540 	andcs	r0, r0, r0, asr #10
    2410:	200006d4 	ldrdcs	r0, [r0], -r4

00002414 <get_byte>:

static word	left;

// ============================================================================

static byte get_byte () {
    2414:	2308      	movs	r3, #8

	int i;
	byte b;

	for (b = 0, i = 0; i < 8; i++) {
    2416:	2000      	movs	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2418:	f44f 6280 	mov.w	r2, #1024	; 0x400
static byte get_byte () {
    241c:	b570      	push	{r4, r5, r6, lr}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    241e:	4907      	ldr	r1, [pc, #28]	; (243c <get_byte+0x28>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2420:	4d07      	ldr	r5, [pc, #28]	; (2440 <get_byte+0x2c>)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2422:	4c08      	ldr	r4, [pc, #32]	; (2444 <get_byte+0x30>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2424:	682e      	ldr	r6, [r5, #0]
		b <<= 1;
    2426:	0040      	lsls	r0, r0, #1
		if (ee_inp)
    2428:	05f6      	lsls	r6, r6, #23
		b <<= 1;
    242a:	b2c0      	uxtb	r0, r0
			b |= 1;
    242c:	bf48      	it	mi
    242e:	f040 0001 	orrmi.w	r0, r0, #1
	for (b = 0, i = 0; i < 8; i++) {
    2432:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2434:	6022      	str	r2, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2436:	600a      	str	r2, [r1, #0]
    2438:	d1f4      	bne.n	2424 <get_byte+0x10>
		ee_clkh;
		ee_clkl;
	}

	return b;
}
    243a:	bd70      	pop	{r4, r5, r6, pc}
    243c:	400220a0 	andmi	r2, r2, r0, lsr #1
    2440:	400220c0 	andmi	r2, r2, r0, asr #1
    2444:	40022090 	mulmi	r2, r0, r0

00002448 <put_byte>:

static void put_byte (byte b) {
    2448:	b530      	push	{r4, r5, lr}
    244a:	2308      	movs	r3, #8
    244c:	f44f 7500 	mov.w	r5, #512	; 0x200
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2450:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2454:	4c06      	ldr	r4, [pc, #24]	; (2470 <put_byte+0x28>)
    2456:	4a07      	ldr	r2, [pc, #28]	; (2474 <put_byte+0x2c>)

	int i;

	for (i = 0; i < 8; i++) {
		if (b & 0x80)
    2458:	f010 0f80 	tst.w	r0, #128	; 0x80
    245c:	bf14      	ite	ne
    245e:	6025      	strne	r5, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2460:	6015      	streq	r5, [r2, #0]
			ee_outh;
		else
			ee_outl;
		ee_clkh;
		ee_clkl;
		b <<= 1;
    2462:	0040      	lsls	r0, r0, #1
	for (i = 0; i < 8; i++) {
    2464:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2466:	6021      	str	r1, [r4, #0]
		b <<= 1;
    2468:	b2c0      	uxtb	r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    246a:	6011      	str	r1, [r2, #0]
	for (i = 0; i < 8; i++) {
    246c:	d1f4      	bne.n	2458 <put_byte+0x10>
	}
}
    246e:	bd30      	pop	{r4, r5, pc}
    2470:	40022090 	mulmi	r2, r0, r0
    2474:	400220a0 	andmi	r2, r2, r0, lsr #1

00002478 <cmd_0>:
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2478:	2301      	movs	r3, #1

// ============================================================================

static void cmd_0 (byte cmd) {
    247a:	b510      	push	{r4, lr}
    247c:	4c03      	ldr	r4, [pc, #12]	; (248c <cmd_0+0x14>)
    247e:	6023      	str	r3, [r4, #0]

	ee_start;
	put_byte (cmd);
    2480:	f7ff ffe2 	bl	2448 <put_byte>
    2484:	2300      	movs	r3, #0
    2486:	6023      	str	r3, [r4, #0]
	ee_stop;
}
    2488:	bd10      	pop	{r4, pc}
    248a:	bf00      	nop
    248c:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00002490 <wwait>:
	r = get_byte ();
	ee_stop;
	return r;
}

static void wwait (word st, word del) {
    2490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2494:	4604      	mov	r4, r0
    2496:	460d      	mov	r5, r1
    2498:	2701      	movs	r7, #1
//
// Wait for write to complete
//
	while (dopen && (rdsr () & 1)) {
    249a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 24e0 <wwait+0x50>
    249e:	4e0f      	ldr	r6, [pc, #60]	; (24dc <wwait+0x4c>)
    24a0:	f898 3000 	ldrb.w	r3, [r8]
    24a4:	b14b      	cbz	r3, 24ba <wwait+0x2a>
	put_byte (CMD_RDSR);
    24a6:	2005      	movs	r0, #5
    24a8:	6037      	str	r7, [r6, #0]
    24aa:	f7ff ffcd 	bl	2448 <put_byte>
	r = get_byte ();
    24ae:	f7ff ffb1 	bl	2414 <get_byte>
    24b2:	2300      	movs	r3, #0
    24b4:	6033      	str	r3, [r6, #0]
	while (dopen && (rdsr () & 1)) {
    24b6:	07c3      	lsls	r3, r0, #31
    24b8:	d401      	bmi.n	24be <wwait+0x2e>
		else {
			delay (del, st);
			release;
		}
	}
}
    24ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (st == WNONE)
    24be:	f64f 73ff 	movw	r3, #65535	; 0xffff
    24c2:	429c      	cmp	r4, r3
    24c4:	d103      	bne.n	24ce <wwait+0x3e>
			mdelay (1);
    24c6:	2001      	movs	r0, #1
    24c8:	f7fe fb1e 	bl	b08 <mdelay>
    24cc:	e7e8      	b.n	24a0 <wwait+0x10>
			delay (del, st);
    24ce:	4621      	mov	r1, r4
    24d0:	4628      	mov	r0, r5
    24d2:	f7ff f9e1 	bl	1898 <delay>
			release;
    24d6:	f7fe ff29 	bl	132c <__pi_release>
    24da:	bf00      	nop
    24dc:	42441a50 	submi	r1, r4, #80, 20	; 0x50000
    24e0:	200005ec 	andcs	r0, r0, ip, ror #11

000024e4 <ready>:
		dopen = 0;
		ee_bring_down;
	}
}

static void ready () {
    24e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//
// Called before a new operation to make sure the chip is ready
//
	if (dopen) {
    24e6:	4d0c      	ldr	r5, [pc, #48]	; (2518 <ready+0x34>)
    24e8:	782f      	ldrb	r7, [r5, #0]
    24ea:	b147      	cbz	r7, 24fe <ready+0x1a>
		// The device is open
		wwait (WNONE, 1);
    24ec:	2101      	movs	r1, #1
    24ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
    24f2:	f7ff ffcd 	bl	2490 <wwait>
	} else {
		copen ();
		dopen = DOPEN_TEMP;
	}

	dstat = 0;
    24f6:	2200      	movs	r2, #0
    24f8:	4b08      	ldr	r3, [pc, #32]	; (251c <ready+0x38>)
    24fa:	701a      	strb	r2, [r3, #0]
}
    24fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24fe:	2401      	movs	r4, #1
    2500:	4e07      	ldr	r6, [pc, #28]	; (2520 <ready+0x3c>)
	udelay (1);
    2502:	4620      	mov	r0, r4
    2504:	6034      	str	r4, [r6, #0]
    2506:	f7fe fae9 	bl	adc <udelay>
	udelay (1);
    250a:	4620      	mov	r0, r4
    250c:	6037      	str	r7, [r6, #0]
    250e:	f7fe fae5 	bl	adc <udelay>
		dopen = DOPEN_TEMP;
    2512:	2302      	movs	r3, #2
    2514:	702b      	strb	r3, [r5, #0]
    2516:	e7ee      	b.n	24f6 <ready+0x12>
    2518:	200005ec 	andcs	r0, r0, ip, ror #11
    251c:	200005ed 	andcs	r0, r0, sp, ror #11
    2520:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00002524 <cclose>:
static void cclose () {
    2524:	b510      	push	{r4, lr}
	if (dopen == DOPEN_TEMP) {
    2526:	4c07      	ldr	r4, [pc, #28]	; (2544 <cclose+0x20>)
    2528:	7823      	ldrb	r3, [r4, #0]
    252a:	2b02      	cmp	r3, #2
    252c:	d109      	bne.n	2542 <cclose+0x1e>
		wwait (WNONE, 1);
    252e:	2101      	movs	r1, #1
    2530:	f64f 70ff 	movw	r0, #65535	; 0xffff
    2534:	f7ff ffac 	bl	2490 <wwait>
	cmd_0 (CMD_DP);
    2538:	20b9      	movs	r0, #185	; 0xb9
    253a:	f7ff ff9d 	bl	2478 <cmd_0>
		dopen = 0;
    253e:	2300      	movs	r3, #0
    2540:	7023      	strb	r3, [r4, #0]
}
    2542:	bd10      	pop	{r4, pc}
    2544:	200005ec 	andcs	r0, r0, ip, ror #11

00002548 <ee_open>:

// ============================================================================

word ee_open () {
    2548:	b508      	push	{r3, lr}
//
// Open (for more than one operation)
//
	ready ();
    254a:	f7ff ffcb 	bl	24e4 <ready>
	dopen = DOPEN_PERM;
    254e:	2201      	movs	r2, #1
    2550:	4b01      	ldr	r3, [pc, #4]	; (2558 <ee_open+0x10>)
		ee_stop;
		diag ("ID: %x %x %x", r [0], r [1], r [2]);
	}
#endif
	return 0;
}
    2552:	2000      	movs	r0, #0
	dopen = DOPEN_PERM;
    2554:	701a      	strb	r2, [r3, #0]
}
    2556:	bd08      	pop	{r3, pc}
    2558:	200005ec 	andcs	r0, r0, ip, ror #11

0000255c <ee_close>:

void ee_close () {

	if (dopen) {
    255c:	4b03      	ldr	r3, [pc, #12]	; (256c <ee_close+0x10>)
    255e:	781a      	ldrb	r2, [r3, #0]
    2560:	b11a      	cbz	r2, 256a <ee_close+0xe>
		dopen = DOPEN_TEMP;
    2562:	2202      	movs	r2, #2
    2564:	701a      	strb	r2, [r3, #0]
		cclose ();
    2566:	f7ff bfdd 	b.w	2524 <cclose>
	}
}
    256a:	4770      	bx	lr
    256c:	200005ec 	andcs	r0, r0, ip, ror #11

00002570 <ser_out>:

//+++ "__outserial.c"

procname (__outserial);

int ser_out (word st, const char *m) {
    2570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2572:	4606      	mov	r6, r0

	int prcs;
	char *buf;

	if ((prcs = running (__outserial)) != 0) {
    2574:	4818      	ldr	r0, [pc, #96]	; (25d8 <ser_out+0x68>)
int ser_out (word st, const char *m) {
    2576:	460c      	mov	r4, r1
	if ((prcs = running (__outserial)) != 0) {
    2578:	f7ff f9aa 	bl	18d0 <running>
    257c:	b120      	cbz	r0, 2588 <ser_out+0x18>
		/* We have to wait */
		join (prcs, st);
    257e:	4631      	mov	r1, r6
    2580:	f7ff f978 	bl	1874 <__pi_join>
	if ((buf = (char*) umalloc (prcs)) == NULL) {
		/*
		 * We have to wait for memory
		 */
		umwait (st);
		release;
    2584:	f7fe fed2 	bl	132c <__pi_release>
	if (*m)
    2588:	7823      	ldrb	r3, [r4, #0]
    258a:	b163      	cbz	r3, 25a6 <ser_out+0x36>
		prcs = strlen (m) +1;
    258c:	4620      	mov	r0, r4
    258e:	f7ff f9b1 	bl	18f4 <__pi_strlen>
    2592:	1c45      	adds	r5, r0, #1
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    2594:	b2a8      	uxth	r0, r5
    2596:	f7ff faaf 	bl	1af8 <__pi_malloc>
    259a:	4607      	mov	r7, r0
    259c:	b930      	cbnz	r0, 25ac <ser_out+0x3c>
		umwait (st);
    259e:	4630      	mov	r0, r6
    25a0:	f7ff fb18 	bl	1bd4 <__pi_waitmem>
    25a4:	e7ee      	b.n	2584 <ser_out+0x14>
		prcs =  m [1] + 3;
    25a6:	7865      	ldrb	r5, [r4, #1]
    25a8:	3503      	adds	r5, #3
    25aa:	e7f3      	b.n	2594 <ser_out+0x24>
	}

	if (*m)
    25ac:	7823      	ldrb	r3, [r4, #0]
    25ae:	b15b      	cbz	r3, 25c8 <ser_out+0x58>
		strcpy (buf, m);
    25b0:	4621      	mov	r1, r4
    25b2:	f7ff f9a6 	bl	1902 <__pi_strcpy>
	else
		memcpy (buf, m, prcs);

	if (runstrand (__outserial, buf) == 0) {
    25b6:	4639      	mov	r1, r7
    25b8:	4807      	ldr	r0, [pc, #28]	; (25d8 <ser_out+0x68>)
    25ba:	f7ff faf1 	bl	1ba0 <__pi_fork>
    25be:	b940      	cbnz	r0, 25d2 <ser_out+0x62>
		// fork has failed, deallocate buf
		ufree (buf);
    25c0:	4638      	mov	r0, r7
    25c2:	f7ff fa4d 	bl	1a60 <__pi_free>
		// and wait for a process slot
		npwait (st);
    25c6:	e7ea      	b.n	259e <ser_out+0x2e>
		memcpy (buf, m, prcs);
    25c8:	462a      	mov	r2, r5
    25ca:	4621      	mov	r1, r4
    25cc:	f7ff f9af 	bl	192e <__pi_memcpy>
    25d0:	e7f1      	b.n	25b6 <ser_out+0x46>
		release;
	}

	return 0;
}
    25d2:	2000      	movs	r0, #0
    25d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    25d6:	bf00      	nop
    25d8:	0000307d 	andeq	r3, r0, sp, ror r0

000025dc <ser_in>:

extern char *__inpline;

procname (__inserial);

int ser_in (word st, char *buf, int len) {
    25dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25de:	4604      	mov	r4, r0
    25e0:	460f      	mov	r7, r1
/* ======= */
/* Direct */
/* ====== */
	int prcs;

	if (len == 0)
    25e2:	4615      	mov	r5, r2
    25e4:	b37a      	cbz	r2, 2646 <ser_in+0x6a>
		// Just in case
		return 0;

	if (__inpline == NULL) {
    25e6:	4e19      	ldr	r6, [pc, #100]	; (264c <ser_in+0x70>)
    25e8:	6830      	ldr	r0, [r6, #0]
    25ea:	b988      	cbnz	r0, 2610 <ser_in+0x34>
		if ((prcs = running (__inserial)) == 0) {
    25ec:	4818      	ldr	r0, [pc, #96]	; (2650 <ser_in+0x74>)
    25ee:	f7ff f96f 	bl	18d0 <running>
    25f2:	b948      	cbnz	r0, 2608 <ser_in+0x2c>
			prcs = runthread (__inserial);
    25f4:	4601      	mov	r1, r0
    25f6:	4816      	ldr	r0, [pc, #88]	; (2650 <ser_in+0x74>)
    25f8:	f7ff fad2 	bl	1ba0 <__pi_fork>
			if (prcs == 0) {
    25fc:	b920      	cbnz	r0, 2608 <ser_in+0x2c>
				npwait (st);
    25fe:	4620      	mov	r0, r4
    2600:	f7ff fae8 	bl	1bd4 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    2604:	f7fe fe92 	bl	132c <__pi_release>
		join (prcs, st);
    2608:	4621      	mov	r1, r4
    260a:	f7ff f933 	bl	1874 <__pi_join>
    260e:	e7f9      	b.n	2604 <ser_in+0x28>
	}

	/* Input available */
	if (*__inpline == NULL) // bin cmd
    2610:	7803      	ldrb	r3, [r0, #0]
    2612:	b9a3      	cbnz	r3, 263e <ser_in+0x62>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2614:	7844      	ldrb	r4, [r0, #1]
    2616:	3403      	adds	r4, #3
	else
		prcs = strlen (__inpline);

	if (prcs >= len)
    2618:	42ac      	cmp	r4, r5
		prcs = len-1;
    261a:	bfa8      	it	ge
    261c:	f105 34ff 	addge.w	r4, r5, #4294967295	; 0xffffffff

	memcpy (buf, __inpline, prcs);
    2620:	4622      	mov	r2, r4
    2622:	4638      	mov	r0, r7
    2624:	6831      	ldr	r1, [r6, #0]
    2626:	f7ff f982 	bl	192e <__pi_memcpy>
	ufree (__inpline);
    262a:	6830      	ldr	r0, [r6, #0]
    262c:	f7ff fa18 	bl	1a60 <__pi_free>
	__inpline = NULL;
    2630:	2300      	movs	r3, #0
    2632:	6033      	str	r3, [r6, #0]
	if (*buf) // if it's NULL, it's a bin cmd
    2634:	783a      	ldrb	r2, [r7, #0]
    2636:	b102      	cbz	r2, 263a <ser_in+0x5e>
		buf [prcs] = '\0';
    2638:	553b      	strb	r3, [r7, r4]
	return prcs;
}
    263a:	4620      	mov	r0, r4
    263c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prcs = strlen (__inpline);
    263e:	f7ff f959 	bl	18f4 <__pi_strlen>
    2642:	4604      	mov	r4, r0
    2644:	e7e8      	b.n	2618 <ser_in+0x3c>
		return 0;
    2646:	4614      	mov	r4, r2
    2648:	e7f7      	b.n	263a <ser_in+0x5e>
    264a:	bf00      	nop
    264c:	20000638 	andcs	r0, r0, r8, lsr r6
    2650:	000030ed 	andeq	r3, r0, sp, ror #1

00002654 <ser_outf>:

//+++ "__outserial.c"

procname (__outserial);

int ser_outf (word st, const char *m, ...) {
    2654:	b40e      	push	{r1, r2, r3}
    2656:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
    2658:	4604      	mov	r4, r0

	int prcs;
	char *buf;
	va_list ap;

	if ((prcs = running (__outserial)) != 0) {
    265a:	4812      	ldr	r0, [pc, #72]	; (26a4 <ser_outf+0x50>)
    265c:	f7ff f938 	bl	18d0 <running>
    2660:	4606      	mov	r6, r0
    2662:	b120      	cbz	r0, 266e <ser_outf+0x1a>
		/* We have to wait */
		join (prcs, st);
    2664:	4621      	mov	r1, r4
    2666:	f7ff f905 	bl	1874 <__pi_join>
	if ((buf = vform (NULL, m, ap)) == NULL) {
		/*
		 * This means that we are out of memory
		 */
		umwait (st);
		release;
    266a:	f7fe fe5f 	bl	132c <__pi_release>
	va_start (ap, m);
    266e:	aa08      	add	r2, sp, #32
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2670:	9907      	ldr	r1, [sp, #28]
	va_start (ap, m);
    2672:	9201      	str	r2, [sp, #4]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2674:	f000 fef0 	bl	3458 <vform>
    2678:	4605      	mov	r5, r0
    267a:	b918      	cbnz	r0, 2684 <ser_outf+0x30>
		umwait (st);
    267c:	4620      	mov	r0, r4
    267e:	f7ff faa9 	bl	1bd4 <__pi_waitmem>
    2682:	e7f2      	b.n	266a <ser_outf+0x16>
	}

	if (runstrand (__outserial, buf) == 0) {
    2684:	4601      	mov	r1, r0
    2686:	4807      	ldr	r0, [pc, #28]	; (26a4 <ser_outf+0x50>)
    2688:	f7ff fa8a 	bl	1ba0 <__pi_fork>
    268c:	b918      	cbnz	r0, 2696 <ser_outf+0x42>
		ufree (buf);
    268e:	4628      	mov	r0, r5
    2690:	f7ff f9e6 	bl	1a60 <__pi_free>
		npwait (st);
    2694:	e7f2      	b.n	267c <ser_outf+0x28>
		release;
	}

	return 0;
}
    2696:	4630      	mov	r0, r6
    2698:	b003      	add	sp, #12
    269a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    269e:	b003      	add	sp, #12
    26a0:	4770      	bx	lr
    26a2:	bf00      	nop
    26a4:	0000307d 	andeq	r3, r0, sp, ror r0

000026a8 <ser_inf>:

extern char *__inpline;

procname (__inserial);

int ser_inf (word st, const char *fmt, ...) {
    26a8:	b40e      	push	{r1, r2, r3}
    26aa:	b533      	push	{r0, r1, r4, r5, lr}
    26ac:	9905      	ldr	r1, [sp, #20]
    26ae:	4604      	mov	r4, r0
/* ========= */

	int prcs;
	va_list	ap;

	if (fmt == NULL)
    26b0:	b321      	cbz	r1, 26fc <ser_inf+0x54>
		return 0;

	if (__inpline == NULL) {
    26b2:	4d13      	ldr	r5, [pc, #76]	; (2700 <ser_inf+0x58>)
    26b4:	6828      	ldr	r0, [r5, #0]
    26b6:	b988      	cbnz	r0, 26dc <ser_inf+0x34>
		if ((prcs = running (__inserial)) == 0) {
    26b8:	4812      	ldr	r0, [pc, #72]	; (2704 <ser_inf+0x5c>)
    26ba:	f7ff f909 	bl	18d0 <running>
    26be:	b948      	cbnz	r0, 26d4 <ser_inf+0x2c>
			prcs = runthread (__inserial);
    26c0:	4601      	mov	r1, r0
    26c2:	4810      	ldr	r0, [pc, #64]	; (2704 <ser_inf+0x5c>)
    26c4:	f7ff fa6c 	bl	1ba0 <__pi_fork>
			if (prcs == 0) {
    26c8:	b920      	cbnz	r0, 26d4 <ser_inf+0x2c>
				npwait (st);
    26ca:	4620      	mov	r0, r4
    26cc:	f7ff fa82 	bl	1bd4 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    26d0:	f7fe fe2c 	bl	132c <__pi_release>
		join (prcs, st);
    26d4:	4621      	mov	r1, r4
    26d6:	f7ff f8cd 	bl	1874 <__pi_join>
    26da:	e7f9      	b.n	26d0 <ser_inf+0x28>
	}

	/* Input available */
	va_start (ap, fmt);
    26dc:	aa06      	add	r2, sp, #24
    26de:	9201      	str	r2, [sp, #4]

	prcs = vscan (__inpline, fmt, ap);
    26e0:	f000 fee2 	bl	34a8 <vscan>
    26e4:	4604      	mov	r4, r0

	ufree (__inpline);
    26e6:	6828      	ldr	r0, [r5, #0]
    26e8:	f7ff f9ba 	bl	1a60 <__pi_free>
	__inpline = NULL;
    26ec:	2300      	movs	r3, #0
    26ee:	602b      	str	r3, [r5, #0]

	return prcs;
}
    26f0:	4620      	mov	r0, r4
    26f2:	b002      	add	sp, #8
    26f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    26f8:	b003      	add	sp, #12
    26fa:	4770      	bx	lr
		return 0;
    26fc:	460c      	mov	r4, r1
    26fe:	e7f7      	b.n	26f0 <ser_inf+0x48>
    2700:	20000638 	andcs	r0, r0, r8, lsr r6
    2704:	000030ed 	andeq	r3, r0, sp, ror #1

00002708 <plugch>:
//
// Insert the channel number as the right frequency in the proper place
//
	RF_cmdFs.frequency = 
		// Channel number is just the megahertz increment
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2708:	4b04      	ldr	r3, [pc, #16]	; (271c <plugch+0x14>)
    270a:	4a05      	ldr	r2, [pc, #20]	; (2720 <plugch+0x18>)
    270c:	781b      	ldrb	r3, [r3, #0]
    270e:	f503 7359 	add.w	r3, r3, #868	; 0x364
    2712:	8413      	strh	r3, [r2, #32]
	RF_cmdFs.frequency = 
    2714:	4a03      	ldr	r2, [pc, #12]	; (2724 <plugch+0x1c>)
    2716:	81d3      	strh	r3, [r2, #14]
}
    2718:	4770      	bx	lr
    271a:	bf00      	nop
    271c:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    2720:	20000054 	andcs	r0, r0, r4, asr r0
    2724:	2000003c 	andcs	r0, r0, ip, lsr r0

00002728 <option>:

	// Make rbuffl exactly equal to max payload length
	rbuffl -= 2;
}

static int option (int opt, address val) {
    2728:	b570      	push	{r4, r5, r6, lr}
    272a:	460c      	mov	r4, r1
    272c:	281a      	cmp	r0, #26
    272e:	f200 80a4 	bhi.w	287a <option+0x152>
    2732:	e8df f000 	tbb	[pc, r0]
    2736:	3939390e 	ldmdbcc	r9!, {r1, r2, r3, r8, fp, ip, sp}
    273a:	674f3014 	smlaldvs	r3, pc, r4, r0	; <UNPREDICTABLE>
    273e:	3b35445b 	blcc	d538b2 <__ccfg+0xd3390a>
    2742:	a2a2a2a2 	adcge	sl, r2, #536870922	; 0x2000000a
    2746:	777aa2a2 	ldrbvc	sl, [sl, -r2, lsr #5]!
    274a:	898ba2a2 	stmibhi	fp, {r1, r5, r7, r9, sp, pc}
    274e:	009aa241 	addseq	sl, sl, r1, asr #4

	switch (opt) {

		case PHYSOPT_STATUS:

			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    2752:	4b4c      	ldr	r3, [pc, #304]	; (2884 <option+0x15c>)
    2754:	7818      	ldrb	r0, [r3, #0]
    2756:	f000 0001 	and.w	r0, r0, #1
			ret = (int) statid;
			goto RVal;

		case PHYSOPT_GETMAXPL:

			ret = rbuffl + 2;
    275a:	3002      	adds	r0, #2
			goto RVal;
    275c:	e028      	b.n	27b0 <option+0x88>
			_BIS (dstate, DSTATE_RXON);
    275e:	4a49      	ldr	r2, [pc, #292]	; (2884 <option+0x15c>)
    2760:	7813      	ldrb	r3, [r2, #0]
    2762:	f043 0301 	orr.w	r3, r3, #1
    2766:	7013      	strb	r3, [r2, #0]
	int ret = 0;
    2768:	2000      	movs	r0, #0
			p_trigger (drvprcs, qevent);
    276a:	4b47      	ldr	r3, [pc, #284]	; (2888 <option+0x160>)
    276c:	6819      	ldr	r1, [r3, #0]
    276e:	4b47      	ldr	r3, [pc, #284]	; (288c <option+0x164>)
    2770:	460c      	mov	r4, r1
    2772:	681d      	ldr	r5, [r3, #0]
    2774:	2300      	movs	r3, #0
    2776:	f834 2b10 	ldrh.w	r2, [r4], #16
    277a:	f002 0207 	and.w	r2, r2, #7
    277e:	429a      	cmp	r2, r3
    2780:	dd08      	ble.n	2794 <option+0x6c>
    2782:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
    2786:	3301      	adds	r3, #1
    2788:	42ae      	cmp	r6, r5
    278a:	d1f8      	bne.n	277e <option+0x56>
    278c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2790:	889b      	ldrh	r3, [r3, #4]
    2792:	800b      	strh	r3, [r1, #0]
	return ret;
RVal:
	if (val != NULL)
		*val = ret;
	goto RRet;
}
    2794:	bd70      	pop	{r4, r5, r6, pc}
			_BIC (dstate, DSTATE_RXON);
    2796:	4a3b      	ldr	r2, [pc, #236]	; (2884 <option+0x15c>)
    2798:	7813      	ldrb	r3, [r2, #0]
    279a:	f023 0301 	bic.w	r3, r3, #1
    279e:	e7e2      	b.n	2766 <option+0x3e>
			statid = (val == NULL) ? 0 : *val;
    27a0:	b101      	cbz	r1, 27a4 <option+0x7c>
    27a2:	880c      	ldrh	r4, [r1, #0]
    27a4:	4b3a      	ldr	r3, [pc, #232]	; (2890 <option+0x168>)
    27a6:	801c      	strh	r4, [r3, #0]
	int ret = 0;
    27a8:	2000      	movs	r0, #0
    27aa:	e7f3      	b.n	2794 <option+0x6c>
			ret = (int) statid;
    27ac:	4b38      	ldr	r3, [pc, #224]	; (2890 <option+0x168>)
    27ae:	8818      	ldrh	r0, [r3, #0]
	if (val != NULL)
    27b0:	2c00      	cmp	r4, #0
    27b2:	d0ef      	beq.n	2794 <option+0x6c>
		*val = ret;
    27b4:	8020      	strh	r0, [r4, #0]
	return ret;
    27b6:	e7ed      	b.n	2794 <option+0x6c>
			ret = rbuffl + 2;
    27b8:	4b36      	ldr	r3, [pc, #216]	; (2894 <option+0x16c>)
    27ba:	7818      	ldrb	r0, [r3, #0]
    27bc:	e7cd      	b.n	275a <option+0x32>
				memcpy (val, &rxstat,
    27be:	220c      	movs	r2, #12
			if (val != NULL) {
    27c0:	b121      	cbz	r1, 27cc <option+0xa4>
				memcpy (val, &rxstat,
    27c2:	4620      	mov	r0, r4
    27c4:	4934      	ldr	r1, [pc, #208]	; (2898 <option+0x170>)
    27c6:	f7ff f8b2 	bl	192e <__pi_memcpy>
    27ca:	e7ed      	b.n	27a8 <option+0x80>
				memset (&rxstat, 0, 
    27cc:	4832      	ldr	r0, [pc, #200]	; (2898 <option+0x170>)
    27ce:	f7ff f8b8 	bl	1942 <__pi_memset>
    27d2:	e7e9      	b.n	27a8 <option+0x80>
			if (val == NULL)
    27d4:	b941      	cbnz	r1, 27e8 <option+0xc0>
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    27d6:	f7ff faa7 	bl	1d28 <lrnd>
    27da:	f3c0 4105 	ubfx	r1, r0, #16, #6
    27de:	3102      	adds	r1, #2
				utimer_set (bckf_timer, *val);
    27e0:	482e      	ldr	r0, [pc, #184]	; (289c <option+0x174>)
    27e2:	f7fe ff9f 	bl	1724 <__pi_utimer_set>
    27e6:	e7bf      	b.n	2768 <option+0x40>
    27e8:	8809      	ldrh	r1, [r1, #0]
    27ea:	e7f9      	b.n	27e0 <option+0xb8>
			for (ret = 0; ret < 8; ret++)
    27ec:	2000      	movs	r0, #0
				if (RF_cmdPropRadioDivSetup.txPower
    27ee:	4b2c      	ldr	r3, [pc, #176]	; (28a0 <option+0x178>)
    27f0:	8b5a      	ldrh	r2, [r3, #26]
    27f2:	4b2c      	ldr	r3, [pc, #176]	; (28a4 <option+0x17c>)
					== patable [ret])
    27f4:	f833 1b02 	ldrh.w	r1, [r3], #2
				if (RF_cmdPropRadioDivSetup.txPower
    27f8:	428a      	cmp	r2, r1
    27fa:	d0d9      	beq.n	27b0 <option+0x88>
			for (ret = 0; ret < 8; ret++)
    27fc:	3001      	adds	r0, #1
    27fe:	2808      	cmp	r0, #8
    2800:	d1f8      	bne.n	27f4 <option+0xcc>
    2802:	e7d5      	b.n	27b0 <option+0x88>
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2804:	b119      	cbz	r1, 280e <option+0xe6>
				(*val > 7) ? 7 : *val;
    2806:	8808      	ldrh	r0, [r1, #0]
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2808:	2807      	cmp	r0, #7
    280a:	bf28      	it	cs
    280c:	2007      	movcs	r0, #7
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    280e:	4b25      	ldr	r3, [pc, #148]	; (28a4 <option+0x17c>)
    2810:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    2814:	4b22      	ldr	r3, [pc, #136]	; (28a0 <option+0x178>)
    2816:	835a      	strh	r2, [r3, #26]
			_BIS (dstate, DSTATE_IRST);
    2818:	4a1a      	ldr	r2, [pc, #104]	; (2884 <option+0x15c>)
    281a:	7813      	ldrb	r3, [r2, #0]
    281c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2820:	7013      	strb	r3, [r2, #0]
			goto OREvnt;
    2822:	e7a2      	b.n	276a <option+0x42>
			ret = (int) channel;
    2824:	4b20      	ldr	r3, [pc, #128]	; (28a8 <option+0x180>)
			ret = (int) vrate;
    2826:	7818      	ldrb	r0, [r3, #0]
			goto RVal;
    2828:	e7c2      	b.n	27b0 <option+0x88>
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    282a:	b121      	cbz	r1, 2836 <option+0x10e>
				(*val > 7) ? 7 : *val;
    282c:	880c      	ldrh	r4, [r1, #0]
    282e:	2c07      	cmp	r4, #7
    2830:	bf28      	it	cs
    2832:	2407      	movcs	r4, #7
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2834:	b2e4      	uxtb	r4, r4
    2836:	4b1c      	ldr	r3, [pc, #112]	; (28a8 <option+0x180>)
    2838:	701c      	strb	r4, [r3, #0]
			plugch ();
    283a:	f7ff ff65 	bl	2708 <plugch>
			_BIS (dstate, DSTATE_IRST);
    283e:	4a11      	ldr	r2, [pc, #68]	; (2884 <option+0x15c>)
    2840:	7813      	ldrb	r3, [r2, #0]
    2842:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2846:	e78e      	b.n	2766 <option+0x3e>
			ret = (int) vrate;
    2848:	4b18      	ldr	r3, [pc, #96]	; (28ac <option+0x184>)
    284a:	e7ec      	b.n	2826 <option+0xfe>
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    284c:	b139      	cbz	r1, 285e <option+0x136>
				(*val > 3) ? 3 : (*val < 1) ? 1 : *val;
    284e:	880b      	ldrh	r3, [r1, #0]
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2850:	2b03      	cmp	r3, #3
    2852:	d806      	bhi.n	2862 <option+0x13a>
    2854:	b13b      	cbz	r3, 2866 <option+0x13e>
    2856:	b2db      	uxtb	r3, r3
    2858:	4a14      	ldr	r2, [pc, #80]	; (28ac <option+0x184>)
    285a:	7013      	strb	r3, [r2, #0]
    285c:	e7ed      	b.n	283a <option+0x112>
    285e:	2302      	movs	r3, #2
    2860:	e7fa      	b.n	2858 <option+0x130>
    2862:	2303      	movs	r3, #3
    2864:	e7f8      	b.n	2858 <option+0x130>
    2866:	2301      	movs	r3, #1
    2868:	e7f6      	b.n	2858 <option+0x130>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    286a:	b119      	cbz	r1, 2874 <option+0x14c>
    286c:	880b      	ldrh	r3, [r1, #0]
    286e:	4a10      	ldr	r2, [pc, #64]	; (28b0 <option+0x188>)
    2870:	8013      	strh	r3, [r2, #0]
			goto RRet;
    2872:	e799      	b.n	27a8 <option+0x80>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2874:	f44f 7380 	mov.w	r3, #256	; 0x100
    2878:	e7f9      	b.n	286e <option+0x146>
			syserror (EREQPAR, "cc13 op");
    287a:	2003      	movs	r0, #3
    287c:	490d      	ldr	r1, [pc, #52]	; (28b4 <option+0x18c>)
    287e:	f7fe f997 	bl	bb0 <__pi_syserror>
    2882:	bf00      	nop
    2884:	200005f8 	strdcs	r0, [r0], -r8
    2888:	200005f4 	strdcs	r0, [r0], -r4
    288c:	20000604 	andcs	r0, r0, r4, lsl #12
    2890:	20000628 	andcs	r0, r0, r8, lsr #12
    2894:	20000608 	andcs	r0, r0, r8, lsl #12
    2898:	2000061c 	andcs	r0, r0, ip, lsl r6
    289c:	200005ee 	andcs	r0, r0, lr, ror #11
    28a0:	20000054 	andcs	r0, r0, r4, asr r0
    28a4:	0000508e 	andeq	r5, r0, lr, lsl #1
    28a8:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    28ac:	2000003a 	andcs	r0, r0, sl, lsr r0
    28b0:	20000038 	andcs	r0, r0, r8, lsr r0
    28b4:	0000502a 	andeq	r5, r0, sl, lsr #32

000028b8 <issue_cmd>:
static void issue_cmd (lword cmd) {
    28b8:	b538      	push	{r3, r4, r5, lr}
    28ba:	4604      	mov	r4, r0
    28bc:	4d0c      	ldr	r5, [pc, #48]	; (28f0 <issue_cmd+0x38>)
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    28be:	4620      	mov	r0, r4
    28c0:	f001 f8a4 	bl	3a0c <NOROM_RFCDoorbellSendTo>
    28c4:	b2c2      	uxtb	r2, r0
    28c6:	2a01      	cmp	r2, #1
    28c8:	d011      	beq.n	28ee <issue_cmd+0x36>
		if (res != 0x86)
    28ca:	2a86      	cmp	r2, #134	; 0x86
    28cc:	d003      	beq.n	28d6 <issue_cmd+0x1e>
			syserror (EHARDWARE, "rt1");
    28ce:	4909      	ldr	r1, [pc, #36]	; (28f4 <issue_cmd+0x3c>)
			syserror (EHARDWARE, "hang ic0");
    28d0:	2008      	movs	r0, #8
    28d2:	f7fe f96d 	bl	bb0 <__pi_syserror>
		if (cnt-- == 0) {
    28d6:	3d01      	subs	r5, #1
    28d8:	d105      	bne.n	28e6 <issue_cmd+0x2e>
			diag ("HUP %lx %lx", cmd, res);
    28da:	4621      	mov	r1, r4
    28dc:	4806      	ldr	r0, [pc, #24]	; (28f8 <issue_cmd+0x40>)
    28de:	f7ff f985 	bl	1bec <diag>
			syserror (EHARDWARE, "hang ic0");
    28e2:	4906      	ldr	r1, [pc, #24]	; (28fc <issue_cmd+0x44>)
    28e4:	e7f4      	b.n	28d0 <issue_cmd+0x18>
		udelay (1);
    28e6:	2001      	movs	r0, #1
    28e8:	f7fe f8f8 	bl	adc <udelay>
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    28ec:	e7e7      	b.n	28be <issue_cmd+0x6>
}
    28ee:	bd38      	pop	{r3, r4, r5, pc}
    28f0:	00015f91 	muleq	r1, r1, pc	; <UNPREDICTABLE>
    28f4:	00005032 	andeq	r5, r0, r2, lsr r0
    28f8:	00005036 	andeq	r5, r0, r6, lsr r0
    28fc:	00005042 	andeq	r5, r0, r2, asr #32

00002900 <rx_de>:
static void rx_de () {
    2900:	b510      	push	{r4, lr}
	if ((dstate & DSTATE_RXAC) == 0)
    2902:	4c06      	ldr	r4, [pc, #24]	; (291c <rx_de+0x1c>)
    2904:	7823      	ldrb	r3, [r4, #0]
    2906:	079b      	lsls	r3, r3, #30
    2908:	d506      	bpl.n	2918 <rx_de+0x18>
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    290a:	4805      	ldr	r0, [pc, #20]	; (2920 <rx_de+0x20>)
    290c:	f7ff ffd4 	bl	28b8 <issue_cmd>
	_BIC (dstate, DSTATE_RXAC);
    2910:	7823      	ldrb	r3, [r4, #0]
    2912:	f023 0302 	bic.w	r3, r3, #2
    2916:	7023      	strb	r3, [r4, #0]
}
    2918:	bd10      	pop	{r4, pc}
    291a:	bf00      	nop
    291c:	200005f8 	strdcs	r0, [r0], -r8
    2920:	04010001 	streq	r0, [r1], #-1

00002924 <rf_off>:
static void rf_off () {
    2924:	b538      	push	{r3, r4, r5, lr}
	if ((dstate & DSTATE_RFON) == 0)
    2926:	4c11      	ldr	r4, [pc, #68]	; (296c <rf_off+0x48>)
    2928:	7823      	ldrb	r3, [r4, #0]
    292a:	06db      	lsls	r3, r3, #27
    292c:	d51d      	bpl.n	296a <rf_off+0x46>
RFCClockDisable(void)
{
    //
    // Disable all clocks
    //
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    292e:	2500      	movs	r5, #0
	IntDisable (INT_RFC_CPE_0);
    2930:	4b0f      	ldr	r3, [pc, #60]	; (2970 <rf_off+0x4c>)
    2932:	2019      	movs	r0, #25
    2934:	681b      	ldr	r3, [r3, #0]
    2936:	695b      	ldr	r3, [r3, #20]
    2938:	4798      	blx	r3
	RFCAdi3VcoLdoVoltageMode (false);
    293a:	2000      	movs	r0, #0
    293c:	f001 f9e4 	bl	3d08 <NOROM_RFCAdi3VcoLdoVoltageMode>
	RFCSynthPowerDown ();
    2940:	f001 f878 	bl	3a34 <NOROM_RFCSynthPowerDown>
    2944:	4b0b      	ldr	r3, [pc, #44]	; (2974 <rf_off+0x50>)
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2946:	2001      	movs	r0, #1
    2948:	601d      	str	r5, [r3, #0]
    294a:	f7fe f911 	bl	b70 <__pi_offdomain>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    294e:	4b0a      	ldr	r3, [pc, #40]	; (2978 <rf_off+0x54>)
    2950:	601d      	str	r5, [r3, #0]
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2952:	f001 f841 	bl	39d8 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2956:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    295a:	4b08      	ldr	r3, [pc, #32]	; (297c <rf_off+0x58>)
    295c:	601a      	str	r2, [r3, #0]
    295e:	2202      	movs	r2, #2
    2960:	601a      	str	r2, [r3, #0]
	_BIC (dstate, DSTATE_RFON);
    2962:	7823      	ldrb	r3, [r4, #0]
    2964:	f023 0310 	bic.w	r3, r3, #16
    2968:	7023      	strb	r3, [r4, #0]
}
    296a:	bd38      	pop	{r3, r4, r5, pc}
    296c:	200005f8 	strdcs	r0, [r0], -r8
    2970:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    2974:	60040000 	andvs	r0, r4, r0
    2978:	43240004 			; <UNDEFINED> instruction: 0x43240004
    297c:	400220a0 	andmi	r2, r2, r0, lsr #1

00002980 <wait_cmd.constprop.0>:
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2980:	b570      	push	{r4, r5, r6, lr}
    2982:	4604      	mov	r4, r0
    2984:	460d      	mov	r5, r1
    2986:	f242 7611 	movw	r6, #10001	; 0x2711
		if (cmd->status == tstat)
    298a:	8862      	ldrh	r2, [r4, #2]
    298c:	42aa      	cmp	r2, r5
    298e:	d00e      	beq.n	29ae <wait_cmd.constprop.0+0x2e>
		if (timeout-- == 0) {
    2990:	3e01      	subs	r6, #1
    2992:	d108      	bne.n	29a6 <wait_cmd.constprop.0+0x26>
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2994:	8821      	ldrh	r1, [r4, #0]
    2996:	4806      	ldr	r0, [pc, #24]	; (29b0 <wait_cmd.constprop.0+0x30>)
    2998:	462b      	mov	r3, r5
    299a:	f7ff f927 	bl	1bec <diag>
			syserror (EHARDWARE, "rt2");
    299e:	2008      	movs	r0, #8
    29a0:	4904      	ldr	r1, [pc, #16]	; (29b4 <wait_cmd.constprop.0+0x34>)
    29a2:	f7fe f905 	bl	bb0 <__pi_syserror>
		udelay (1);
    29a6:	2001      	movs	r0, #1
    29a8:	f7fe f898 	bl	adc <udelay>
		if (cmd->status == tstat)
    29ac:	e7ed      	b.n	298a <wait_cmd.constprop.0+0xa>
}
    29ae:	bd70      	pop	{r4, r5, r6, pc}
    29b0:	0000504b 	andeq	r5, r0, fp, asr #32
    29b4:	0000505b 	andeq	r5, r0, fp, asr r0

000029b8 <rf_on.part.0>:
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    29b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    29bc:	4b46      	ldr	r3, [pc, #280]	; (2ad8 <rf_on.part.0+0x120>)
static void rf_on () {
    29be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29c2:	601a      	str	r2, [r3, #0]
    29c4:	2202      	movs	r2, #2
    29c6:	601a      	str	r2, [r3, #0]
	OSCHF_TurnOnXosc();
    29c8:	f000 ffca 	bl	3960 <NOROM_OSCHF_TurnOnXosc>
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    29cc:	200a      	movs	r0, #10
    29ce:	f7fe f885 	bl	adc <udelay>
    29d2:	f000 ffd1 	bl	3978 <NOROM_OSCHF_AttemptToSwitchToXosc>
    29d6:	2800      	cmp	r0, #0
    29d8:	d0f8      	beq.n	29cc <rf_on.part.0+0x14>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    29da:	2401      	movs	r4, #1
    29dc:	4b3f      	ldr	r3, [pc, #252]	; (2adc <rf_on.part.0+0x124>)
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    29de:	4620      	mov	r0, r4
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    29e0:	601c      	str	r4, [r3, #0]
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    29e2:	f7fe f8a7 	bl	b34 <__pi_ondomain>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    29e6:	f240 72ff 	movw	r2, #2047	; 0x7ff
    29ea:	4b3d      	ldr	r3, [pc, #244]	; (2ae0 <rf_on.part.0+0x128>)
	issue_cmd (
    29ec:	483d      	ldr	r0, [pc, #244]	; (2ae4 <rf_on.part.0+0x12c>)
    29ee:	601a      	str	r2, [r3, #0]
    29f0:	f7ff ff62 	bl	28b8 <issue_cmd>
PATCH_FUN_SPEC void enterGenfskCpePatch(void)
{
   uint32_t *pPatchVec = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_VEC_OFFSET);

#if (_NWORD_PATCHIMAGE_GENFSK > 0)
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    29f4:	f44f 7223 	mov.w	r2, #652	; 0x28c
    29f8:	493b      	ldr	r1, [pc, #236]	; (2ae8 <rf_on.part.0+0x130>)
    29fa:	483c      	ldr	r0, [pc, #240]	; (2aec <rf_on.part.0+0x134>)
    29fc:	f001 ff06 	bl	480c <memcpy>
{
   uint8_t *pPatchTab = (uint8_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_TAB_OFFSET);
   uint32_t *pIrqPatch = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_IRQPATCH_OFFSET);


   pPatchTab[80] = 0;
    2a00:	2200      	movs	r2, #0
    2a02:	4b3b      	ldr	r3, [pc, #236]	; (2af0 <rf_on.part.0+0x138>)
      *pD++ = t4;
      *pD++ = t5;
      *pD++ = t6;
      *pD++ = t7;
      *pD++ = t8;
   } while (--nIterations);
    2a04:	493b      	ldr	r1, [pc, #236]	; (2af4 <rf_on.part.0+0x13c>)
    2a06:	701a      	strb	r2, [r3, #0]
   pPatchTab[57] = 1;
   pPatchTab[53] = 2;
    2a08:	2202      	movs	r2, #2
    2a0a:	f803 2c1b 	strb.w	r2, [r3, #-27]
   pPatchTab[55] = 3;
    2a0e:	2203      	movs	r2, #3
    2a10:	f803 2c19 	strb.w	r2, [r3, #-25]
   pPatchTab[110] = 4;
    2a14:	2204      	movs	r2, #4
    2a16:	779a      	strb	r2, [r3, #30]
   pPatchTab[107] = 5;
    2a18:	2205      	movs	r2, #5
    2a1a:	76da      	strb	r2, [r3, #27]
   pPatchTab[65] = 6;
    2a1c:	2206      	movs	r2, #6
    2a1e:	f803 2c0f 	strb.w	r2, [r3, #-15]

   pIrqPatch[1] = _IRQ_PATCH_0;
    2a22:	4a35      	ldr	r2, [pc, #212]	; (2af8 <rf_on.part.0+0x140>)
   pPatchTab[57] = 1;
    2a24:	f803 4c17 	strb.w	r4, [r3, #-23]
   pIrqPatch[1] = _IRQ_PATCH_0;
    2a28:	631a      	str	r2, [r3, #48]	; 0x30
   volatile unsigned long *pD = &HWREG(RFC_RFERAM_BASE);
    2a2a:	4b34      	ldr	r3, [pc, #208]	; (2afc <rf_on.part.0+0x144>)
   const uint32_t *pS = patchGenfskRfe;
    2a2c:	4a34      	ldr	r2, [pc, #208]	; (2b00 <rf_on.part.0+0x148>)
      t7 = *pS++;
    2a2e:	6990      	ldr	r0, [r2, #24]
      t2 = *pS++;
    2a30:	e9d2 8e00 	ldrd	r8, lr, [r2]
      t4 = *pS++;
    2a34:	e9d2 c702 	ldrd	ip, r7, [r2, #8]
      t6 = *pS++;
    2a38:	e9d2 6504 	ldrd	r6, r5, [r2, #16]
      t8 = *pS++;
    2a3c:	69d4      	ldr	r4, [r2, #28]
      *pD++ = t1;
    2a3e:	f8c3 8000 	str.w	r8, [r3]
      *pD++ = t2;
    2a42:	f8c3 e004 	str.w	lr, [r3, #4]
      *pD++ = t3;
    2a46:	f8c3 c008 	str.w	ip, [r3, #8]
      *pD++ = t4;
    2a4a:	60df      	str	r7, [r3, #12]
      *pD++ = t5;
    2a4c:	611e      	str	r6, [r3, #16]
      *pD++ = t6;
    2a4e:	615d      	str	r5, [r3, #20]
      *pD++ = t7;
    2a50:	6198      	str	r0, [r3, #24]
    2a52:	4618      	mov	r0, r3
   } while (--nIterations);
    2a54:	4288      	cmp	r0, r1
    2a56:	f102 0220 	add.w	r2, r2, #32
      *pD++ = t8;
    2a5a:	f103 0320 	add.w	r3, r3, #32
    2a5e:	61c4      	str	r4, [r0, #28]
   } while (--nIterations);
    2a60:	d1e5      	bne.n	2a2e <rf_on.part.0+0x76>
   t1 = *pS++;
   t2 = *pS++;
   t3 = *pS++;
   t4 = *pS++;
   t5 = *pS++;
   *pD++ = t1;
    2a62:	4b28      	ldr	r3, [pc, #160]	; (2b04 <rf_on.part.0+0x14c>)
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2a64:	4828      	ldr	r0, [pc, #160]	; (2b08 <rf_on.part.0+0x150>)
    2a66:	620b      	str	r3, [r1, #32]
   *pD++ = t2;
    2a68:	4b28      	ldr	r3, [pc, #160]	; (2b0c <rf_on.part.0+0x154>)
    2a6a:	624b      	str	r3, [r1, #36]	; 0x24
   *pD++ = t3;
    2a6c:	4b28      	ldr	r3, [pc, #160]	; (2b10 <rf_on.part.0+0x158>)
    2a6e:	628b      	str	r3, [r1, #40]	; 0x28
   *pD++ = t4;
    2a70:	4b28      	ldr	r3, [pc, #160]	; (2b14 <rf_on.part.0+0x15c>)
    2a72:	62cb      	str	r3, [r1, #44]	; 0x2c
   *pD++ = t5;
    2a74:	4b28      	ldr	r3, [pc, #160]	; (2b18 <rf_on.part.0+0x160>)
    2a76:	630b      	str	r3, [r1, #48]	; 0x30
    2a78:	f7ff ff1e 	bl	28b8 <issue_cmd>
	RFCAdi3VcoLdoVoltageMode (true);
    2a7c:	2001      	movs	r0, #1
    2a7e:	f001 f943 	bl	3d08 <NOROM_RFCAdi3VcoLdoVoltageMode>
       	RFCRfTrimSet (&rfTrim);
    2a82:	4826      	ldr	r0, [pc, #152]	; (2b1c <rf_on.part.0+0x164>)
    2a84:	f001 f930 	bl	3ce8 <NOROM_RFCRfTrimSet>
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2a88:	4825      	ldr	r0, [pc, #148]	; (2b20 <rf_on.part.0+0x168>)
    2a8a:	f7ff ff15 	bl	28b8 <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2a8e:	f44f 5150 	mov.w	r1, #13312	; 0x3400
    2a92:	4823      	ldr	r0, [pc, #140]	; (2b20 <rf_on.part.0+0x168>)
    2a94:	f7ff ff74 	bl	2980 <wait_cmd.constprop.0>
	issue_cmd ((lword)&cmd_srt);
    2a98:	4822      	ldr	r0, [pc, #136]	; (2b24 <rf_on.part.0+0x16c>)
    2a9a:	f7ff ff0d 	bl	28b8 <issue_cmd>
	issue_cmd ((lword)&RF_cmdFs);
    2a9e:	4822      	ldr	r0, [pc, #136]	; (2b28 <rf_on.part.0+0x170>)
    2aa0:	f7ff ff0a 	bl	28b8 <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2aa4:	4820      	ldr	r0, [pc, #128]	; (2b28 <rf_on.part.0+0x170>)
    2aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2aaa:	f7ff ff69 	bl	2980 <wait_cmd.constprop.0>
	_BIC (dstate, DSTATE_IRST);
    2aae:	4a1f      	ldr	r2, [pc, #124]	; (2b2c <rf_on.part.0+0x174>)
	IntEnable (INT_RFC_CPE_0);
    2ab0:	2019      	movs	r0, #25
	_BIC (dstate, DSTATE_IRST);
    2ab2:	7813      	ldrb	r3, [r2, #0]
    2ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2ab8:	f043 0310 	orr.w	r3, r3, #16
    2abc:	7013      	strb	r3, [r2, #0]
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2abe:	2300      	movs	r3, #0
    2ac0:	4a1b      	ldr	r2, [pc, #108]	; (2b30 <rf_on.part.0+0x178>)
    2ac2:	6013      	str	r3, [r2, #0]
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2ac4:	f842 3c04 	str.w	r3, [r2, #-4]
	IntEnable (INT_RFC_CPE_0);
    2ac8:	4b1a      	ldr	r3, [pc, #104]	; (2b34 <rf_on.part.0+0x17c>)
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2aca:	3a04      	subs	r2, #4
	IntEnable (INT_RFC_CPE_0);
    2acc:	681b      	ldr	r3, [r3, #0]
}
    2ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	IntEnable (INT_RFC_CPE_0);
    2ad2:	691b      	ldr	r3, [r3, #16]
    2ad4:	4718      	bx	r3
    2ad6:	bf00      	nop
    2ad8:	40022090 	mulmi	r2, r0, r0
    2adc:	43240004 			; <UNDEFINED> instruction: 0x43240004
    2ae0:	60040000 	andvs	r0, r4, r0
    2ae4:	06070051 			; <UNDEFINED> instruction: 0x06070051
    2ae8:	00005754 	andeq	r5, r0, r4, asr r7
    2aec:	2100041c 	tstcs	r0, ip, lsl r4
    2af0:	21000390 			; <UNDEFINED> instruction: 0x21000390
    2af4:	2100c680 	smlabbcs	r0, r0, r6, ip
    2af8:	210005bd 			; <UNDEFINED> instruction: 0x210005bd
    2afc:	2100c000 	mrscs	ip, (UNDEF: 0)
    2b00:	000050a0 	andeq	r5, r0, r0, lsr #1
    2b04:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    2b08:	06070001 	streq	r0, [r7], -r1
    2b0c:	1a101020 	bne	406b94 <__ccfg+0x3e6bec>
    2b10:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    2b14:	16121611 			; <UNDEFINED> instruction: 0x16121611
    2b18:	70006b54 	andvc	r6, r0, r4, asr fp
    2b1c:	2000060c 	andcs	r0, r0, ip, lsl #12
    2b20:	20000054 	andcs	r0, r0, r4, asr r0
    2b24:	20000024 	andcs	r0, r0, r4, lsr #32
    2b28:	2000003c 	andcs	r0, r0, ip, lsr r0
    2b2c:	200005f8 	strdcs	r0, [r0], -r8
    2b30:	40041014 	andmi	r1, r4, r4, lsl r0
    2b34:	100001b0 			; <UNDEFINED> instruction: 0x100001b0

00002b38 <rx_int_enable>:
static void rx_int_enable () {
    2b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
RFCCpe0IntEnable(uint32_t ui32Mask)
{
  //
  // Multiplex RF Core interrupts to CPE0 IRQ.
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2b3c:	4a2a      	ldr	r2, [pc, #168]	; (2be8 <rx_int_enable+0xb0>)
    2b3e:	6813      	ldr	r3, [r2, #0]
    2b40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    2b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    2b48:	6013      	str	r3, [r2, #0]
  do
  {
    //
    // Clear any pending interrupts.
    //
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2b4a:	2200      	movs	r2, #0
    2b4c:	4b27      	ldr	r3, [pc, #156]	; (2bec <rx_int_enable+0xb4>)
    2b4e:	601a      	str	r2, [r3, #0]
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2b50:	681d      	ldr	r5, [r3, #0]
    2b52:	2d00      	cmp	r5, #0
    2b54:	d1fb      	bne.n	2b4e <rx_int_enable+0x16>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2b56:	2602      	movs	r6, #2

  //
  //  Enable the masked interrupts
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2b58:	4a25      	ldr	r2, [pc, #148]	; (2bf0 <rx_int_enable+0xb8>)
				diag ("BAD RX");
    2b5a:	4f26      	ldr	r7, [pc, #152]	; (2bf4 <rx_int_enable+0xbc>)
    2b5c:	6813      	ldr	r3, [r2, #0]
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2b5e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2c00 <rx_int_enable+0xc8>
    2b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2b6a:	6013      	str	r3, [r2, #0]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2b6c:	4b22      	ldr	r3, [pc, #136]	; (2bf8 <rx_int_enable+0xc0>)
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2b6e:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2c04 <rx_int_enable+0xcc>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2b72:	69db      	ldr	r3, [r3, #28]
    2b74:	681c      	ldr	r4, [r3, #0]
		if (db->status == DATA_ENTRY_FINISHED) {
    2b76:	7923      	ldrb	r3, [r4, #4]
    2b78:	2b03      	cmp	r3, #3
    2b7a:	d11e      	bne.n	2bba <rx_int_enable+0x82>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2b7c:	7a63      	ldrb	r3, [r4, #9]
    2b7e:	7a21      	ldrb	r1, [r4, #8]
    2b80:	1cda      	adds	r2, r3, #3
    2b82:	4291      	cmp	r1, r2
			nr++;
    2b84:	f105 0501 	add.w	r5, r5, #1
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2b88:	d11c      	bne.n	2bc4 <rx_int_enable+0x8c>
    2b8a:	f898 2000 	ldrb.w	r2, [r8]
    2b8e:	429a      	cmp	r2, r3
    2b90:	d318      	bcc.n	2bc4 <rx_int_enable+0x8c>
    2b92:	f013 0c01 	ands.w	ip, r3, #1
    2b96:	d115      	bne.n	2bc4 <rx_int_enable+0x8c>
				__dp [pl + 1] = __dp [pl] - 128;
    2b98:	f104 0108 	add.w	r1, r4, #8
				pl = __dp [1] + 2;
    2b9c:	1c9a      	adds	r2, r3, #2
				__dp [pl + 1] = __dp [pl] - 128;
    2b9e:	5c88      	ldrb	r0, [r1, r2]
    2ba0:	440b      	add	r3, r1
    2ba2:	3880      	subs	r0, #128	; 0x80
    2ba4:	70d8      	strb	r0, [r3, #3]
				__dp [pl] = 0;
    2ba6:	f801 c002 	strb.w	ip, [r1, r2]
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2baa:	f8b9 0000 	ldrh.w	r0, [r9]
    2bae:	f104 010a 	add.w	r1, r4, #10
    2bb2:	f7ff fb5f 	bl	2274 <tcvphy_rcv>
			db->status = DATA_ENTRY_PENDING;
    2bb6:	2300      	movs	r3, #0
    2bb8:	7123      	strb	r3, [r4, #4]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2bba:	2e01      	cmp	r6, #1
    2bbc:	d006      	beq.n	2bcc <rx_int_enable+0x94>
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2bbe:	2601      	movs	r6, #1
    2bc0:	6824      	ldr	r4, [r4, #0]
    2bc2:	e7d8      	b.n	2b76 <rx_int_enable+0x3e>
				diag ("BAD RX");
    2bc4:	4638      	mov	r0, r7
    2bc6:	f7ff f811 	bl	1bec <diag>
    2bca:	e7f4      	b.n	2bb6 <rx_int_enable+0x7e>
	if (nr) {
    2bcc:	b14d      	cbz	r5, 2be2 <rx_int_enable+0xaa>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2bce:	f7ff f8ab 	bl	1d28 <lrnd>
}
    2bd2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2bd6:	f3c0 4102 	ubfx	r1, r0, #16, #3
    2bda:	3102      	adds	r1, #2
    2bdc:	4807      	ldr	r0, [pc, #28]	; (2bfc <rx_int_enable+0xc4>)
    2bde:	f7fe bda1 	b.w	1724 <__pi_utimer_set>
}
    2be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2be6:	bf00      	nop
    2be8:	40041018 	andmi	r1, r4, r8, lsl r0
    2bec:	40041010 	andmi	r1, r4, r0, lsl r0
    2bf0:	40041014 	andmi	r1, r4, r4, lsl r0
    2bf4:	0000505f 	andeq	r5, r0, pc, asr r0
    2bf8:	2000007c 	andcs	r0, r0, ip, ror r0
    2bfc:	200005ee 	andcs	r0, r0, lr, ror #11
    2c00:	20000608 	andcs	r0, r0, r8, lsl #12
    2c04:	20000600 	andcs	r0, r0, r0, lsl #12

00002c08 <cc1350_driver>:
thread (cc1350_driver)
    2c08:	2801      	cmp	r0, #1
    2c0a:	b570      	push	{r4, r5, r6, lr}
    2c0c:	f000 808b 	beq.w	2d26 <cc1350_driver+0x11e>
    2c10:	2802      	cmp	r0, #2
    2c12:	f000 80bd 	beq.w	2d90 <cc1350_driver+0x188>
    2c16:	2800      	cmp	r0, #0
    2c18:	f040 80ce 	bne.w	2db8 <cc1350_driver+0x1b0>
		if (dstate & DSTATE_IRST) {
    2c1c:	4c68      	ldr	r4, [pc, #416]	; (2dc0 <cc1350_driver+0x1b8>)
    2c1e:	f994 3000 	ldrsb.w	r3, [r4]
    2c22:	2b00      	cmp	r3, #0
    2c24:	da05      	bge.n	2c32 <cc1350_driver+0x2a>
			rf_off ();
    2c26:	f7ff fe7d 	bl	2924 <rf_off>
			_BIC (dstate,
    2c2a:	7823      	ldrb	r3, [r4, #0]
    2c2c:	f003 0369 	and.w	r3, r3, #105	; 0x69
    2c30:	7023      	strb	r3, [r4, #0]
		if (dstate & DSTATE_RXAC) {
    2c32:	7823      	ldrb	r3, [r4, #0]
    2c34:	0798      	lsls	r0, r3, #30
    2c36:	f003 0201 	and.w	r2, r3, #1
    2c3a:	d51e      	bpl.n	2c7a <cc1350_driver+0x72>
			if ((dstate & DSTATE_RXON) == 0)
    2c3c:	b90a      	cbnz	r2, 2c42 <cc1350_driver+0x3a>
				rx_de ();
    2c3e:	f7ff fe5f 	bl	2900 <rx_de>
		if (paylen == 0) {
    2c42:	4d60      	ldr	r5, [pc, #384]	; (2dc4 <cc1350_driver+0x1bc>)
    2c44:	4e60      	ldr	r6, [pc, #384]	; (2dc8 <cc1350_driver+0x1c0>)
    2c46:	682b      	ldr	r3, [r5, #0]
    2c48:	2b00      	cmp	r3, #0
    2c4a:	d14c      	bne.n	2ce6 <cc1350_driver+0xde>
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2c4c:	4b5f      	ldr	r3, [pc, #380]	; (2dcc <cc1350_driver+0x1c4>)
    2c4e:	4629      	mov	r1, r5
    2c50:	8818      	ldrh	r0, [r3, #0]
    2c52:	f7ff fb5d 	bl	2310 <tcvphy_get>
    2c56:	6170      	str	r0, [r6, #20]
    2c58:	2800      	cmp	r0, #0
    2c5a:	d02f      	beq.n	2cbc <cc1350_driver+0xb4>
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2c5c:	4a5c      	ldr	r2, [pc, #368]	; (2dd0 <cc1350_driver+0x1c8>)
				paylen -= 2;
    2c5e:	682b      	ldr	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2c60:	7812      	ldrb	r2, [r2, #0]
				paylen -= 2;
    2c62:	3b02      	subs	r3, #2
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2c64:	4293      	cmp	r3, r2
				paylen -= 2;
    2c66:	602b      	str	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2c68:	dc03      	bgt.n	2c72 <cc1350_driver+0x6a>
    2c6a:	2b00      	cmp	r3, #0
    2c6c:	dd01      	ble.n	2c72 <cc1350_driver+0x6a>
    2c6e:	07db      	lsls	r3, r3, #31
    2c70:	d51b      	bpl.n	2caa <cc1350_driver+0xa2>
    2c72:	200a      	movs	r0, #10
    2c74:	4957      	ldr	r1, [pc, #348]	; (2dd4 <cc1350_driver+0x1cc>)
    2c76:	f7fd ff9b 	bl	bb0 <__pi_syserror>
		} else if (dstate & DSTATE_RXON) {
    2c7a:	2a00      	cmp	r2, #0
    2c7c:	d0e1      	beq.n	2c42 <cc1350_driver+0x3a>
	if (dstate & DSTATE_RFON)
    2c7e:	06d9      	lsls	r1, r3, #27
    2c80:	d50d      	bpl.n	2c9e <cc1350_driver+0x96>
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2c82:	4855      	ldr	r0, [pc, #340]	; (2dd8 <cc1350_driver+0x1d0>)
    2c84:	69c3      	ldr	r3, [r0, #28]
    2c86:	681a      	ldr	r2, [r3, #0]
		re->status = DATA_ENTRY_PENDING;
    2c88:	2300      	movs	r3, #0
    2c8a:	7113      	strb	r3, [r2, #4]
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2c8c:	6812      	ldr	r2, [r2, #0]
		re->status = DATA_ENTRY_PENDING;
    2c8e:	7113      	strb	r3, [r2, #4]
	issue_cmd ((lword)&RF_cmdPropRx);
    2c90:	f7ff fe12 	bl	28b8 <issue_cmd>
	_BIS (dstate, DSTATE_RXAC);
    2c94:	7823      	ldrb	r3, [r4, #0]
    2c96:	f043 0302 	orr.w	r3, r3, #2
    2c9a:	7023      	strb	r3, [r4, #0]
    2c9c:	e7d1      	b.n	2c42 <cc1350_driver+0x3a>
    2c9e:	f7ff fe8b 	bl	29b8 <rf_on.part.0>
	if (dstate & DSTATE_RXAC)
    2ca2:	7823      	ldrb	r3, [r4, #0]
    2ca4:	079a      	lsls	r2, r3, #30
    2ca6:	d5ec      	bpl.n	2c82 <cc1350_driver+0x7a>
    2ca8:	e7cb      	b.n	2c42 <cc1350_driver+0x3a>
				if (statid != 0xffff)
    2caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2cae:	4b4b      	ldr	r3, [pc, #300]	; (2ddc <cc1350_driver+0x1d4>)
    2cb0:	881b      	ldrh	r3, [r3, #0]
    2cb2:	4293      	cmp	r3, r2
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2cb4:	bf18      	it	ne
    2cb6:	8003      	strhne	r3, [r0, #0]
				RF_cmdPropTx.pktLen = (byte) paylen;
    2cb8:	682b      	ldr	r3, [r5, #0]
    2cba:	73f3      	strb	r3, [r6, #15]
		if (paylen == 0) {
    2cbc:	6829      	ldr	r1, [r5, #0]
    2cbe:	b991      	cbnz	r1, 2ce6 <cc1350_driver+0xde>
			wait (qevent, DR_LOOP);
    2cc0:	4b47      	ldr	r3, [pc, #284]	; (2de0 <cc1350_driver+0x1d8>)
    2cc2:	6818      	ldr	r0, [r3, #0]
    2cc4:	f7fe fda2 	bl	180c <__pi_wait>
			if (dstate & DSTATE_RXAC) {
    2cc8:	7823      	ldrb	r3, [r4, #0]
    2cca:	079d      	lsls	r5, r3, #30
    2ccc:	d503      	bpl.n	2cd6 <cc1350_driver+0xce>
				rx_int_enable ();
    2cce:	f7ff ff33 	bl	2b38 <rx_int_enable>
			release;
    2cd2:	f7fe fb2b 	bl	132c <__pi_release>
			} else if (dstate & DSTATE_RFON) {
    2cd6:	06dc      	lsls	r4, r3, #27
    2cd8:	d5fb      	bpl.n	2cd2 <cc1350_driver+0xca>
				delay (offdelay, DR_GOOF);
    2cda:	2102      	movs	r1, #2
    2cdc:	4b41      	ldr	r3, [pc, #260]	; (2de4 <cc1350_driver+0x1dc>)
    2cde:	8818      	ldrh	r0, [r3, #0]
    2ce0:	f7fe fdda 	bl	1898 <delay>
    2ce4:	e7f5      	b.n	2cd2 <cc1350_driver+0xca>
		if (bckf_timer) {
    2ce6:	4d40      	ldr	r5, [pc, #256]	; (2de8 <cc1350_driver+0x1e0>)
    2ce8:	882b      	ldrh	r3, [r5, #0]
    2cea:	b163      	cbz	r3, 2d06 <cc1350_driver+0xfe>
			wait (qevent, DR_LOOP);
    2cec:	4b3c      	ldr	r3, [pc, #240]	; (2de0 <cc1350_driver+0x1d8>)
    2cee:	2100      	movs	r1, #0
    2cf0:	6818      	ldr	r0, [r3, #0]
    2cf2:	f7fe fd8b 	bl	180c <__pi_wait>
			delay (bckf_timer, DR_LOOP);
    2cf6:	8828      	ldrh	r0, [r5, #0]
    2cf8:	2100      	movs	r1, #0
    2cfa:	f7fe fdcd 	bl	1898 <delay>
			if (dstate & DSTATE_RXAC)
    2cfe:	7823      	ldrb	r3, [r4, #0]
    2d00:	0798      	lsls	r0, r3, #30
    2d02:	d5e6      	bpl.n	2cd2 <cc1350_driver+0xca>
    2d04:	e7e3      	b.n	2cce <cc1350_driver+0xc6>
	if (dstate & DSTATE_RFON)
    2d06:	7823      	ldrb	r3, [r4, #0]
    2d08:	06d9      	lsls	r1, r3, #27
    2d0a:	d401      	bmi.n	2d10 <cc1350_driver+0x108>
    2d0c:	f7ff fe54 	bl	29b8 <rf_on.part.0>
		rx_de ();
    2d10:	f7ff fdf6 	bl	2900 <rx_de>
		RF_cmdPropTx . status = 0;
    2d14:	2300      	movs	r3, #0
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2d16:	f06f 0202 	mvn.w	r2, #2
		RF_cmdPropTx . status = 0;
    2d1a:	8073      	strh	r3, [r6, #2]
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2d1c:	4b33      	ldr	r3, [pc, #204]	; (2dec <cc1350_driver+0x1e4>)
		issue_cmd ((lword)&cmd_cs);
    2d1e:	4834      	ldr	r0, [pc, #208]	; (2df0 <cc1350_driver+0x1e8>)
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2d20:	601a      	str	r2, [r3, #0]
		issue_cmd ((lword)&cmd_cs);
    2d22:	f7ff fdc9 	bl	28b8 <issue_cmd>
		if (dstate & DSTATE_IRST)
    2d26:	4b26      	ldr	r3, [pc, #152]	; (2dc0 <cc1350_driver+0x1b8>)
    2d28:	f993 3000 	ldrsb.w	r3, [r3]
    2d2c:	2b00      	cmp	r3, #0
    2d2e:	f6ff af75 	blt.w	2c1c <cc1350_driver+0x14>
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2d32:	4b2e      	ldr	r3, [pc, #184]	; (2dec <cc1350_driver+0x1e4>)
    2d34:	681a      	ldr	r2, [r3, #0]
    2d36:	0792      	lsls	r2, r2, #30
    2d38:	d402      	bmi.n	2d40 <cc1350_driver+0x138>
			delay (1, DR_XMIT);
    2d3a:	2101      	movs	r1, #1
    2d3c:	4608      	mov	r0, r1
    2d3e:	e7cf      	b.n	2ce0 <cc1350_driver+0xd8>
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2d40:	4821      	ldr	r0, [pc, #132]	; (2dc8 <cc1350_driver+0x1c0>)
    2d42:	4c2c      	ldr	r4, [pc, #176]	; (2df4 <cc1350_driver+0x1ec>)
    2d44:	8842      	ldrh	r2, [r0, #2]
    2d46:	f5b2 5f50 	cmp.w	r2, #13312	; 0x3400
    2d4a:	d018      	beq.n	2d7e <cc1350_driver+0x176>
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2d4c:	7822      	ldrb	r2, [r4, #0]
    2d4e:	2a0f      	cmp	r2, #15
    2d50:	d909      	bls.n	2d66 <cc1350_driver+0x15e>
				RF_cmdPropTx . status = 0;
    2d52:	2200      	movs	r2, #0
    2d54:	8042      	strh	r2, [r0, #2]
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2d56:	f06f 0202 	mvn.w	r2, #2
    2d5a:	601a      	str	r2, [r3, #0]
				issue_cmd ((lword)&RF_cmdPropTx);
    2d5c:	f7ff fdac 	bl	28b8 <issue_cmd>
				proceed (DR_XMIT);
    2d60:	2001      	movs	r0, #1
    2d62:	f7fe fd49 	bl	17f8 <proceed>
			txtries++;
    2d66:	7823      	ldrb	r3, [r4, #0]
    2d68:	3301      	adds	r3, #1
    2d6a:	7023      	strb	r3, [r4, #0]
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2d6c:	f7fe ffdc 	bl	1d28 <lrnd>
    2d70:	f3c0 4105 	ubfx	r1, r0, #16, #6
    2d74:	3102      	adds	r1, #2
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2d76:	481c      	ldr	r0, [pc, #112]	; (2de8 <cc1350_driver+0x1e0>)
    2d78:	f7fe fcd4 	bl	1724 <__pi_utimer_set>
		goto DR_LOOP__;
    2d7c:	e74e      	b.n	2c1c <cc1350_driver+0x14>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2d7e:	6940      	ldr	r0, [r0, #20]
    2d80:	f7ff fb00 	bl	2384 <tcvphy_end>
		paylen = 0;
    2d84:	2300      	movs	r3, #0
    2d86:	4a0f      	ldr	r2, [pc, #60]	; (2dc4 <cc1350_driver+0x1bc>)
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2d88:	2102      	movs	r1, #2
		paylen = 0;
    2d8a:	6013      	str	r3, [r2, #0]
		txtries = 0;
    2d8c:	7023      	strb	r3, [r4, #0]
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2d8e:	e7f2      	b.n	2d76 <cc1350_driver+0x16e>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2d90:	4b0b      	ldr	r3, [pc, #44]	; (2dc0 <cc1350_driver+0x1b8>)
    2d92:	781a      	ldrb	r2, [r3, #0]
    2d94:	f993 3000 	ldrsb.w	r3, [r3]
    2d98:	2b00      	cmp	r3, #0
    2d9a:	f6ff af3f 	blt.w	2c1c <cc1350_driver+0x14>
    2d9e:	07d3      	lsls	r3, r2, #31
    2da0:	f53f af3c 	bmi.w	2c1c <cc1350_driver+0x14>
		    tcvphy_top (physid) == NULL)
    2da4:	4b09      	ldr	r3, [pc, #36]	; (2dcc <cc1350_driver+0x1c4>)
    2da6:	8818      	ldrh	r0, [r3, #0]
    2da8:	f7ff fad2 	bl	2350 <tcvphy_top>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2dac:	2800      	cmp	r0, #0
    2dae:	f47f af35 	bne.w	2c1c <cc1350_driver+0x14>
			rf_off ();
    2db2:	f7ff fdb7 	bl	2924 <rf_off>
    2db6:	e731      	b.n	2c1c <cc1350_driver+0x14>
endthread
    2db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2dbc:	f7fe bc94 	b.w	16e8 <__pi_badstate>
    2dc0:	200005f8 	strdcs	r0, [r0], -r8
    2dc4:	200005fc 	strdcs	r0, [r0], -ip
    2dc8:	200000a0 	andcs	r0, r0, r0, lsr #1
    2dcc:	20000600 	andcs	r0, r0, r0, lsl #12
    2dd0:	20000608 	andcs	r0, r0, r8, lsl #12
    2dd4:	00005066 	andeq	r5, r0, r6, rrx
    2dd8:	2000007c 	andcs	r0, r0, ip, ror r0
    2ddc:	20000628 	andcs	r0, r0, r8, lsr #12
    2de0:	20000604 	andcs	r0, r0, r4, lsl #12
    2de4:	20000038 	andcs	r0, r0, r8, lsr r0
    2de8:	200005ee 	andcs	r0, r0, lr, ror #11
    2dec:	40041010 	andmi	r1, r4, r0, lsl r0
    2df0:	20000008 	andcs	r0, r0, r8
    2df4:	2000062a 	andcs	r0, r0, sl, lsr #12

00002df8 <RFCCPE0IntHandler>:
void RFCCPE0IntHandler (void) {
    2df8:	b530      	push	{r4, r5, lr}
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2dfa:	4a15      	ldr	r2, [pc, #84]	; (2e50 <RFCCPE0IntHandler+0x58>)
    2dfc:	6813      	ldr	r3, [r2, #0]
    2dfe:	2b00      	cmp	r3, #0
		_BIS (dstate, DSTATE_IRST);
    2e00:	bfbf      	itttt	lt
    2e02:	4914      	ldrlt	r1, [pc, #80]	; (2e54 <RFCCPE0IntHandler+0x5c>)
    2e04:	780b      	ldrblt	r3, [r1, #0]
    2e06:	f063 037f 	ornlt	r3, r3, #127	; 0x7f
    2e0a:	700b      	strblt	r3, [r1, #0]
  do
  {
    //
    // Clear interrupts that may now be pending
    //
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2e0c:	2100      	movs	r1, #0
    2e0e:	6011      	str	r1, [r2, #0]
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2e10:	6813      	ldr	r3, [r2, #0]
    2e12:	2b00      	cmp	r3, #0
    2e14:	d1fb      	bne.n	2e0e <RFCCPE0IntHandler+0x16>
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2e16:	4a10      	ldr	r2, [pc, #64]	; (2e58 <RFCCPE0IntHandler+0x60>)
	p_trigger (drvprcs, qevent);
    2e18:	4c10      	ldr	r4, [pc, #64]	; (2e5c <RFCCPE0IntHandler+0x64>)
    2e1a:	6811      	ldr	r1, [r2, #0]
    2e1c:	6013      	str	r3, [r2, #0]
    2e1e:	4a10      	ldr	r2, [pc, #64]	; (2e60 <RFCCPE0IntHandler+0x68>)
    2e20:	6824      	ldr	r4, [r4, #0]
    2e22:	6811      	ldr	r1, [r2, #0]
    2e24:	4608      	mov	r0, r1
    2e26:	f830 2b10 	ldrh.w	r2, [r0], #16
    2e2a:	f002 0207 	and.w	r2, r2, #7
    2e2e:	429a      	cmp	r2, r3
    2e30:	dd08      	ble.n	2e44 <RFCCPE0IntHandler+0x4c>
    2e32:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    2e36:	3301      	adds	r3, #1
    2e38:	42a5      	cmp	r5, r4
    2e3a:	d1f8      	bne.n	2e2e <RFCCPE0IntHandler+0x36>
    2e3c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2e40:	889b      	ldrh	r3, [r3, #4]
    2e42:	800b      	strh	r3, [r1, #0]
	RISE_N_SHINE;
    2e44:	4a07      	ldr	r2, [pc, #28]	; (2e64 <RFCCPE0IntHandler+0x6c>)
    2e46:	7813      	ldrb	r3, [r2, #0]
    2e48:	f043 0302 	orr.w	r3, r3, #2
    2e4c:	7013      	strb	r3, [r2, #0]
}
    2e4e:	bd30      	pop	{r4, r5, pc}
    2e50:	40041010 	andmi	r1, r4, r0, lsl r0
    2e54:	200005f8 	strdcs	r0, [r0], -r8
    2e58:	40041014 	andmi	r1, r4, r4, lsl r0
    2e5c:	20000604 	andcs	r0, r0, r4, lsl #12
    2e60:	200005f4 	strdcs	r0, [r0], -r4
    2e64:	200006b4 			; <UNDEFINED> instruction: 0x200006b4

00002e68 <phys_cc1350>:

// ============================================================================

void phys_cc1350 (int phy, int mbs) {
    2e68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
// packet length is (and I have reasons not to trust the manual), so let me
// assume it is 255 - 4 - 1 = 250. We shall be careful.
//

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (rbuffl != 0)
    2e6c:	4c49      	ldr	r4, [pc, #292]	; (2f94 <phys_cc1350+0x12c>)
void phys_cc1350 (int phy, int mbs) {
    2e6e:	4606      	mov	r6, r0
	if (rbuffl != 0)
    2e70:	7822      	ldrb	r2, [r4, #0]
    2e72:	b11a      	cbz	r2, 2e7c <phys_cc1350+0x14>
		/* We are allowed to do it only once */
		syserror (ETOOMANY, "cc13");
    2e74:	2009      	movs	r0, #9
    2e76:	4948      	ldr	r1, [pc, #288]	; (2f98 <phys_cc1350+0x130>)
		mbs = CC1350_MAXPLEN;

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
		/* We are allowed to do it only once */
		syserror (EREQPAR, "cc13 mb");
    2e78:	f7fd fe9a 	bl	bb0 <__pi_syserror>
	if (mbs == 0)
    2e7c:	b129      	cbz	r1, 2e8a <phys_cc1350+0x22>
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2e7e:	1f8a      	subs	r2, r1, #6
    2e80:	2af4      	cmp	r2, #244	; 0xf4
    2e82:	d903      	bls.n	2e8c <phys_cc1350+0x24>
		syserror (EREQPAR, "cc13 mb");
    2e84:	2003      	movs	r0, #3
    2e86:	4945      	ldr	r1, [pc, #276]	; (2f9c <phys_cc1350+0x134>)
    2e88:	e7f6      	b.n	2e78 <phys_cc1350+0x10>
		mbs = CC1350_MAXPLEN;
    2e8a:	21fa      	movs	r1, #250	; 0xfa
	i = 0;
    2e8c:	2700      	movs	r7, #0
#endif

	rbuffl = (byte) mbs;
    2e8e:	f04f 0802 	mov.w	r8, #2
		db->status = DATA_ENTRY_PENDING;
    2e92:	46ba      	mov	sl, r7
		db->config.type = 0;	// General (data in structure)
    2e94:	f04f 0904 	mov.w	r9, #4
	rbuffl = (byte) mbs;
    2e98:	7021      	strb	r1, [r4, #0]
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2e9a:	7820      	ldrb	r0, [r4, #0]
    2e9c:	469b      	mov	fp, r3
    2e9e:	300d      	adds	r0, #13
    2ea0:	f7fe fe2a 	bl	1af8 <__pi_malloc>
		if (db == NULL)
    2ea4:	4603      	mov	r3, r0
    2ea6:	b920      	cbnz	r0, 2eb2 <phys_cc1350+0x4a>
			syserror (EMALLOC, "cc13");
    2ea8:	2006      	movs	r0, #6
    2eaa:	493b      	ldr	r1, [pc, #236]	; (2f98 <phys_cc1350+0x130>)
    2eac:	e7e4      	b.n	2e78 <phys_cc1350+0x10>
    2eae:	46b8      	mov	r8, r7
    2eb0:	e7f3      	b.n	2e9a <phys_cc1350+0x32>
		db->status = DATA_ENTRY_PENDING;
    2eb2:	f880 a004 	strb.w	sl, [r0, #4]
		if (i)
    2eb6:	2f00      	cmp	r7, #0
    2eb8:	d03e      	beq.n	2f38 <phys_cc1350+0xd0>
			da->pNextEntry = (byte*) db;
    2eba:	f8cb 0000 	str.w	r0, [fp]
		if (++i == NRBUFFS)
    2ebe:	2701      	movs	r7, #1
		db->length = rbuffl + 2;
    2ec0:	7822      	ldrb	r2, [r4, #0]
		if (++i == NRBUFFS)
    2ec2:	45b8      	cmp	r8, r7
		db->length = rbuffl + 2;
    2ec4:	f102 0202 	add.w	r2, r2, #2
		db->config.type = 0;	// General (data in structure)
    2ec8:	f883 9005 	strb.w	r9, [r3, #5]
		db->length = rbuffl + 2;
    2ecc:	80da      	strh	r2, [r3, #6]
		if (++i == NRBUFFS)
    2ece:	d1ee      	bne.n	2eae <phys_cc1350+0x46>
	db->pNextEntry = (byte*) re;
    2ed0:	601d      	str	r5, [r3, #0]
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2ed2:	2008      	movs	r0, #8
    2ed4:	f7fe fe10 	bl	1af8 <__pi_malloc>
    2ed8:	4b31      	ldr	r3, [pc, #196]	; (2fa0 <phys_cc1350+0x138>)
    2eda:	61d8      	str	r0, [r3, #28]
	if (rbuffs == NULL)
    2edc:	2800      	cmp	r0, #0
    2ede:	d0e3      	beq.n	2ea8 <phys_cc1350+0x40>
	rbuffs->pCurrEntry = (byte*) re;
    2ee0:	6005      	str	r5, [r0, #0]
	rbuffs->pLastEntry = NULL;
    2ee2:	2500      	movs	r5, #0
    2ee4:	69da      	ldr	r2, [r3, #28]
	init_rbuffs ();

	physid = phy;

	// Register the phy
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2ee6:	492f      	ldr	r1, [pc, #188]	; (2fa4 <phys_cc1350+0x13c>)
	rbuffs->pLastEntry = NULL;
    2ee8:	6055      	str	r5, [r2, #4]
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    2eea:	4a2f      	ldr	r2, [pc, #188]	; (2fa8 <phys_cc1350+0x140>)
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2eec:	4630      	mov	r0, r6
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    2eee:	621a      	str	r2, [r3, #32]
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2ef0:	89da      	ldrh	r2, [r3, #14]
    2ef2:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
    2ef6:	f042 0206 	orr.w	r2, r2, #6
    2efa:	81da      	strh	r2, [r3, #14]
	rbuffl -= 2;
    2efc:	7823      	ldrb	r3, [r4, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2efe:	f44f 6210 	mov.w	r2, #2304	; 0x900
	rbuffl -= 2;
    2f02:	3b02      	subs	r3, #2
    2f04:	7023      	strb	r3, [r4, #0]
	physid = phy;
    2f06:	4b29      	ldr	r3, [pc, #164]	; (2fac <phys_cc1350+0x144>)
    2f08:	801e      	strh	r6, [r3, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f0a:	f7ff f98b 	bl	2224 <tcvphy_reg>
    2f0e:	4b28      	ldr	r3, [pc, #160]	; (2fb0 <phys_cc1350+0x148>)
	LEDI (0, 0);
	LEDI (1, 0);
	LEDI (2, 0);

#if DIAG_MESSAGES
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f10:	2207      	movs	r2, #7
    2f12:	2102      	movs	r1, #2
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f14:	6018      	str	r0, [r3, #0]
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f16:	462b      	mov	r3, r5
    2f18:	4826      	ldr	r0, [pc, #152]	; (2fb4 <phys_cc1350+0x14c>)
    2f1a:	f7fe fe67 	bl	1bec <diag>
		RADIO_DEFAULT_CHANNEL);
#endif

	// Install the backoff timer
	utimer_add (&bckf_timer);
    2f1e:	4826      	ldr	r0, [pc, #152]	; (2fb8 <phys_cc1350+0x150>)
    2f20:	f7fe fbea 	bl	16f8 <utimer_add>

	// Start the driver process
	drvprcs = runthread (cc1350_driver);
    2f24:	4629      	mov	r1, r5
    2f26:	4825      	ldr	r0, [pc, #148]	; (2fbc <phys_cc1350+0x154>)
    2f28:	f7fe fe3a 	bl	1ba0 <__pi_fork>
    2f2c:	4b24      	ldr	r3, [pc, #144]	; (2fc0 <phys_cc1350+0x158>)
    2f2e:	6018      	str	r0, [r3, #0]

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (drvprcs == 0)
    2f30:	b920      	cbnz	r0, 2f3c <phys_cc1350+0xd4>
		syserror (ERESOURCE, "cc13");
    2f32:	2004      	movs	r0, #4
    2f34:	4918      	ldr	r1, [pc, #96]	; (2f98 <phys_cc1350+0x130>)
    2f36:	e79f      	b.n	2e78 <phys_cc1350+0x10>
    2f38:	4605      	mov	r5, r0
    2f3a:	e7c0      	b.n	2ebe <phys_cc1350+0x56>

#if RADIO_DEFAULT_POWER <= 7
#if (RADIO_OPTIONS & RADIO_OPTION_PXOPTIONS)
	cmd_sp.txPower =
#endif
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2f3c:	f64b 432b 	movw	r3, #48171	; 0xbc2b
    2f40:	4c20      	ldr	r4, [pc, #128]	; (2fc4 <phys_cc1350+0x15c>)
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2f42:	4921      	ldr	r1, [pc, #132]	; (2fc8 <phys_cc1350+0x160>)
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2f44:	8363      	strh	r3, [r4, #26]
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2f46:	4b21      	ldr	r3, [pc, #132]	; (2fcc <phys_cc1350+0x164>)
    2f48:	781a      	ldrb	r2, [r3, #0]
    2f4a:	3a01      	subs	r2, #1
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2f4c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2f50:	8858      	ldrh	r0, [r3, #2]
    2f52:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
    2f56:	6922      	ldr	r2, [r4, #16]
    2f58:	f003 030f 	and.w	r3, r3, #15
    2f5c:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
    2f60:	f422 12ff 	bic.w	r2, r2, #2088960	; 0x1fe000
    2f64:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    2f68:	f022 020f 	bic.w	r2, r2, #15
    2f6c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    2f70:	4313      	orrs	r3, r2
    2f72:	6123      	str	r3, [r4, #16]
#endif

#if RADIO_BITRATE_INDEX > 0
	plugrt ();
#endif
	plugch ();
    2f74:	f7ff fbc8 	bl	2708 <plugch>

	// Make sure, prop mode is selected in PRCM (this is supposed to be
	// the default)
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2f78:	4b15      	ldr	r3, [pc, #84]	; (2fd0 <phys_cc1350+0x168>)

	// Precompute the Trim
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2f7a:	4620      	mov	r0, r4
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2f7c:	601d      	str	r5, [r3, #0]
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2f7e:	f000 fe27 	bl	3bd0 <NOROM_RFCRTrim>
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2f82:	4620      	mov	r0, r4
    2f84:	4913      	ldr	r1, [pc, #76]	; (2fd4 <phys_cc1350+0x16c>)
    2f86:	f000 fd7b 	bl	3a80 <NOROM_RFCRfTrimRead>
			(rfTrim_t*)&rfTrim);

	// Direct all doorbell interrupts permanently to CPE0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2f8a:	4b13      	ldr	r3, [pc, #76]	; (2fd8 <phys_cc1350+0x170>)
    2f8c:	601d      	str	r5, [r3, #0]
}
    2f8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f92:	bf00      	nop
    2f94:	20000608 	andcs	r0, r0, r8, lsl #12
    2f98:	0000506e 	andeq	r5, r0, lr, rrx
    2f9c:	00005073 	andeq	r5, r0, r3, ror r0
    2fa0:	2000007c 	andcs	r0, r0, ip, ror r0
    2fa4:	00002729 	andeq	r2, r0, r9, lsr #14
    2fa8:	2000061c 	andcs	r0, r0, ip, lsl r6
    2fac:	20000600 	andcs	r0, r0, r0, lsl #12
    2fb0:	20000604 	andcs	r0, r0, r4, lsl #12
    2fb4:	0000507b 	andeq	r5, r0, fp, ror r0
    2fb8:	200005ee 	andcs	r0, r0, lr, ror #11
    2fbc:	00002c09 	andeq	r2, r0, r9, lsl #24
    2fc0:	200005f4 	strdcs	r0, [r0], -r4
    2fc4:	20000054 	andcs	r0, r0, r4, asr r0
    2fc8:	000059e0 	andeq	r5, r0, r0, ror #19
    2fcc:	2000003a 	andcs	r0, r0, sl, lsr r0
    2fd0:	400821d0 	ldrdmi	r2, [r8], -r0
    2fd4:	2000060c 	andcs	r0, r0, ip, lsl #12
    2fd8:	40041018 	andmi	r1, r4, r8, lsl r0

00002fdc <tcv_clo_null>:
    2fdc:	b510      	push	{r4, lr}
    2fde:	4a07      	ldr	r2, [pc, #28]	; (2ffc <tcv_clo_null+0x20>)
    2fe0:	4603      	mov	r3, r0
    2fe2:	6812      	ldr	r2, [r2, #0]
    2fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2fe8:	b132      	cbz	r2, 2ff8 <tcv_clo_null+0x1c>
    2fea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    2fee:	428c      	cmp	r4, r1
    2ff0:	bf04      	itt	eq
    2ff2:	f842 0023 	streq.w	r0, [r2, r3, lsl #2]
    2ff6:	2000      	moveq	r0, #0
    2ff8:	bd10      	pop	{r4, pc}
    2ffa:	bf00      	nop
    2ffc:	2000062c 	andcs	r0, r0, ip, lsr #12

00003000 <tcv_rcv_null>:
    3000:	4907      	ldr	r1, [pc, #28]	; (3020 <tcv_rcv_null+0x20>)
    3002:	9a00      	ldr	r2, [sp, #0]
    3004:	6809      	ldr	r1, [r1, #0]
    3006:	b909      	cbnz	r1, 300c <tcv_rcv_null+0xc>
    3008:	2000      	movs	r0, #0
    300a:	4770      	bx	lr
    300c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    3010:	6019      	str	r1, [r3, #0]
    3012:	3101      	adds	r1, #1
    3014:	d0f8      	beq.n	3008 <tcv_rcv_null+0x8>
    3016:	2300      	movs	r3, #0
    3018:	2002      	movs	r0, #2
    301a:	8053      	strh	r3, [r2, #2]
    301c:	8013      	strh	r3, [r2, #0]
    301e:	4770      	bx	lr
    3020:	2000062c 	andcs	r0, r0, ip, lsr #12

00003024 <tcv_frm_null>:
    3024:	2000      	movs	r0, #0
    3026:	8048      	strh	r0, [r1, #2]
    3028:	8008      	strh	r0, [r1, #0]
    302a:	4770      	bx	lr

0000302c <tcv_out_null>:
    302c:	2004      	movs	r0, #4
    302e:	4770      	bx	lr

00003030 <tcv_xmt_null>:
    3030:	2001      	movs	r0, #1
    3032:	4770      	bx	lr

00003034 <tcv_ope_null>:
    3034:	b570      	push	{r4, r5, r6, lr}
    3036:	4c0f      	ldr	r4, [pc, #60]	; (3074 <tcv_ope_null+0x40>)
    3038:	4605      	mov	r5, r0
    303a:	6823      	ldr	r3, [r4, #0]
    303c:	460e      	mov	r6, r1
    303e:	b94b      	cbnz	r3, 3054 <tcv_ope_null+0x20>
    3040:	200c      	movs	r0, #12
    3042:	f7fe fd59 	bl	1af8 <__pi_malloc>
    3046:	6020      	str	r0, [r4, #0]
    3048:	b178      	cbz	r0, 306a <tcv_ope_null+0x36>
    304a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    304e:	e9c0 3300 	strd	r3, r3, [r0]
    3052:	6083      	str	r3, [r0, #8]
    3054:	6823      	ldr	r3, [r4, #0]
    3056:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    305a:	3201      	adds	r2, #1
    305c:	bf06      	itte	eq
    305e:	f843 6025 	streq.w	r6, [r3, r5, lsl #2]
    3062:	2000      	moveq	r0, #0
    3064:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    3068:	bd70      	pop	{r4, r5, r6, pc}
    306a:	2006      	movs	r0, #6
    306c:	4902      	ldr	r1, [pc, #8]	; (3078 <tcv_ope_null+0x44>)
    306e:	f7fd fd9f 	bl	bb0 <__pi_syserror>
    3072:	bf00      	nop
    3074:	2000062c 	andcs	r0, r0, ip, lsr #12
    3078:	000059ec 	andeq	r5, r0, ip, ror #19

0000307c <__outserial>:
#define	__cport		UART_A
#define	set_cport	CNOP

#endif	/* UART_DRIVER > 1 */

strand (__outserial, const char*)
    307c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    307e:	4b18      	ldr	r3, [pc, #96]	; (30e0 <__outserial+0x64>)
    3080:	681b      	ldr	r3, [r3, #0]
    3082:	689d      	ldr	r5, [r3, #8]
    3084:	b130      	cbz	r0, 3094 <__outserial+0x18>
    3086:	280a      	cmp	r0, #10
    3088:	d00d      	beq.n	30a6 <__outserial+0x2a>
	// prone
	goto __OM_WRITE;

	// proceed (OM_WRITE);

endstrand
    308a:	b003      	add	sp, #12
    308c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3090:	f7fe bb2a 	b.w	16e8 <__pi_badstate>
	ptr = data;
    3094:	4b13      	ldr	r3, [pc, #76]	; (30e4 <__outserial+0x68>)
    3096:	4c14      	ldr	r4, [pc, #80]	; (30e8 <__outserial+0x6c>)
    3098:	601d      	str	r5, [r3, #0]
	if (*ptr)
    309a:	782b      	ldrb	r3, [r5, #0]
    309c:	b1e3      	cbz	r3, 30d8 <__outserial+0x5c>
		len = strlen (ptr);
    309e:	4628      	mov	r0, r5
    30a0:	f7fe fc28 	bl	18f4 <__pi_strlen>
    30a4:	6020      	str	r0, [r4, #0]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    30a6:	4e0f      	ldr	r6, [pc, #60]	; (30e4 <__outserial+0x68>)
    30a8:	4f0f      	ldr	r7, [pc, #60]	; (30e8 <__outserial+0x6c>)
    30aa:	883b      	ldrh	r3, [r7, #0]
    30ac:	2201      	movs	r2, #1
    30ae:	9300      	str	r3, [sp, #0]
    30b0:	2100      	movs	r1, #0
    30b2:	6833      	ldr	r3, [r6, #0]
    30b4:	200a      	movs	r0, #10
    30b6:	f7fe fc5d 	bl	1974 <io>
	ptr += quant;
    30ba:	6833      	ldr	r3, [r6, #0]
	len -= quant;
    30bc:	683c      	ldr	r4, [r7, #0]
	ptr += quant;
    30be:	4403      	add	r3, r0
	len -= quant;
    30c0:	1a24      	subs	r4, r4, r0
	ptr += quant;
    30c2:	6033      	str	r3, [r6, #0]
	len -= quant;
    30c4:	603c      	str	r4, [r7, #0]
	if (len == 0) {
    30c6:	2c00      	cmp	r4, #0
    30c8:	d1ef      	bne.n	30aa <__outserial+0x2e>
		ufree (data);
    30ca:	4628      	mov	r0, r5
    30cc:	f7fe fcc8 	bl	1a60 <__pi_free>
		finish;
    30d0:	4620      	mov	r0, r4
    30d2:	f7fe fce9 	bl	1aa8 <kill>
    30d6:	e7e8      	b.n	30aa <__outserial+0x2e>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    30d8:	786b      	ldrb	r3, [r5, #1]
    30da:	3303      	adds	r3, #3
    30dc:	6023      	str	r3, [r4, #0]
    30de:	e7e2      	b.n	30a6 <__outserial+0x2a>
    30e0:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    30e4:	20000634 	andcs	r0, r0, r4, lsr r6
    30e8:	20000630 	andcs	r0, r0, r0, lsr r6

000030ec <__inserial>:
#define	IM_INIT		0
#define	IM_READ		1
#define IM_BIN		2
#define IM_BINL		3

strand (__inserial, address)
    30ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    30ee:	4d42      	ldr	r5, [pc, #264]	; (31f8 <__inserial+0x10c>)
    30f0:	682a      	ldr	r2, [r5, #0]
    30f2:	6894      	ldr	r4, [r2, #8]
    30f4:	2803      	cmp	r0, #3
    30f6:	d87a      	bhi.n	31ee <__inserial+0x102>
    30f8:	e8df f000 	tbb	[pc, r0]
    30fc:	5d481802 	stclpl	8, cr1, [r8, #-8]
	static int len;
	int quant;

  entry (IM_INIT)

	if (__inpline != NULL)
    3100:	4b3e      	ldr	r3, [pc, #248]	; (31fc <__inserial+0x110>)
    3102:	681b      	ldr	r3, [r3, #0]
    3104:	b113      	cbz	r3, 310c <__inserial+0x20>
		/* Never overwrite previous unclaimed stuff */
		finish;
    3106:	2000      	movs	r0, #0
    3108:	f7fe fcce 	bl	1aa8 <kill>

	// On eCOG char* is non-trivially upgraded from 'address'
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    310c:	2040      	movs	r0, #64	; 0x40
    310e:	f7fe fcf3 	bl	1af8 <__pi_malloc>
    3112:	4b3b      	ldr	r3, [pc, #236]	; (3200 <__inserial+0x114>)
    3114:	4604      	mov	r4, r0
    3116:	6018      	str	r0, [r3, #0]
    3118:	b918      	cbnz	r0, 3122 <__inserial+0x36>
		/*
		 * We have to wait for memory
		 */
		umwait (IM_INIT);
    311a:	f7fe fd5b 	bl	1bd4 <__pi_waitmem>
		release;
    311e:	f7fe f905 	bl	132c <__pi_release>
	}
	savedata (data);
	len = MAX_LINE_LENGTH;
    3122:	223f      	movs	r2, #63	; 0x3f
	savedata (data);
    3124:	682b      	ldr	r3, [r5, #0]
    3126:	6098      	str	r0, [r3, #8]
	len = MAX_LINE_LENGTH;
    3128:	4b36      	ldr	r3, [pc, #216]	; (3204 <__inserial+0x118>)
    312a:	601a      	str	r2, [r3, #0]
	/* Make sure this doesn't change while we are reading */
	set_cport;

  entry (IM_READ)

	io (IM_READ, __cport, READ, ptr, 1);
    312c:	2001      	movs	r0, #1
    312e:	2200      	movs	r2, #0
    3130:	4d33      	ldr	r5, [pc, #204]	; (3200 <__inserial+0x114>)
    3132:	9000      	str	r0, [sp, #0]
    3134:	682b      	ldr	r3, [r5, #0]
    3136:	4611      	mov	r1, r2
    3138:	f7fe fc1c 	bl	1974 <io>
	if (ptr == (char*) data) { // new line
    313c:	682b      	ldr	r3, [r5, #0]
    313e:	42a3      	cmp	r3, r4
    3140:	d10d      	bne.n	315e <__inserial+0x72>
		if (*ptr == '\0') { // bin cmd
    3142:	7823      	ldrb	r3, [r4, #0]
    3144:	b923      	cbnz	r3, 3150 <__inserial+0x64>
			ptr++;
    3146:	1c63      	adds	r3, r4, #1
			proceed (IM_BIN);
    3148:	2002      	movs	r0, #2
			ptr++;
    314a:	602b      	str	r3, [r5, #0]
			proceed (IM_BIN);
    314c:	f7fe fb54 	bl	17f8 <proceed>
		}

		if (*ptr < 0x20)
    3150:	682b      	ldr	r3, [r5, #0]
    3152:	781b      	ldrb	r3, [r3, #0]
    3154:	2b1f      	cmp	r3, #31
    3156:	d802      	bhi.n	315e <__inserial+0x72>
			/* Ignore codes below space at the beginning of line */
			proceed (IM_READ);
    3158:	2001      	movs	r0, #1
    315a:	f7fe fb4d 	bl	17f8 <proceed>
	}
	if (*ptr == '\n' || *ptr == '\r') {
    315e:	682b      	ldr	r3, [r5, #0]
    3160:	781a      	ldrb	r2, [r3, #0]
    3162:	2a0a      	cmp	r2, #10
    3164:	d001      	beq.n	316a <__inserial+0x7e>
    3166:	2a0d      	cmp	r2, #13
    3168:	d105      	bne.n	3176 <__inserial+0x8a>
		*ptr = '\0';
    316a:	2000      	movs	r0, #0
    316c:	7018      	strb	r0, [r3, #0]
		__inpline = (char*)data;
    316e:	4b23      	ldr	r3, [pc, #140]	; (31fc <__inserial+0x110>)
    3170:	601c      	str	r4, [r3, #0]
		finish;
    3172:	f7fe fc99 	bl	1aa8 <kill>
	}

	if (len) {
    3176:	4923      	ldr	r1, [pc, #140]	; (3204 <__inserial+0x118>)
    3178:	680b      	ldr	r3, [r1, #0]
    317a:	b123      	cbz	r3, 3186 <__inserial+0x9a>
		ptr++;
    317c:	682a      	ldr	r2, [r5, #0]
		len--;
    317e:	3b01      	subs	r3, #1
		ptr++;
    3180:	3201      	adds	r2, #1
    3182:	602a      	str	r2, [r5, #0]
		len--;
    3184:	600b      	str	r3, [r1, #0]
	}

	proceed (IM_READ);
    3186:	2001      	movs	r0, #1
    3188:	f7fe fb36 	bl	17f8 <proceed>

  entry (IM_BIN)

	io (IM_BIN, __cport, READ, ptr, 1);
    318c:	2301      	movs	r3, #1
    318e:	2200      	movs	r2, #0
    3190:	4d1b      	ldr	r5, [pc, #108]	; (3200 <__inserial+0x114>)
    3192:	9300      	str	r3, [sp, #0]
    3194:	4611      	mov	r1, r2
    3196:	682b      	ldr	r3, [r5, #0]
    3198:	2002      	movs	r0, #2
    319a:	f7fe fbeb 	bl	1974 <io>
	len -= 2;
    319e:	4819      	ldr	r0, [pc, #100]	; (3204 <__inserial+0x118>)
    31a0:	6803      	ldr	r3, [r0, #0]
    31a2:	1e9a      	subs	r2, r3, #2
	if (len > *ptr + 1) // 1 for 0x04
    31a4:	682b      	ldr	r3, [r5, #0]
    31a6:	f813 1b01 	ldrb.w	r1, [r3], #1
    31aa:	3101      	adds	r1, #1
		len = *ptr + 1;
    31ac:	4291      	cmp	r1, r2
    31ae:	bfd4      	ite	le
    31b0:	6001      	strle	r1, [r0, #0]
    31b2:	6002      	strgt	r2, [r0, #0]
	ptr++;
    31b4:	602b      	str	r3, [r5, #0]

  entry (IM_BINL)

	quant = io (IM_BINL, __cport, READ, ptr, len);
    31b6:	2200      	movs	r2, #0
    31b8:	4f12      	ldr	r7, [pc, #72]	; (3204 <__inserial+0x118>)
    31ba:	4d11      	ldr	r5, [pc, #68]	; (3200 <__inserial+0x114>)
    31bc:	883b      	ldrh	r3, [r7, #0]
    31be:	4611      	mov	r1, r2
    31c0:	9300      	str	r3, [sp, #0]
    31c2:	682b      	ldr	r3, [r5, #0]
    31c4:	2003      	movs	r0, #3
    31c6:	f7fe fbd5 	bl	1974 <io>
	len -= quant;
    31ca:	683b      	ldr	r3, [r7, #0]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    31cc:	4606      	mov	r6, r0
	len -= quant;
    31ce:	1a18      	subs	r0, r3, r0
    31d0:	6038      	str	r0, [r7, #0]
	if (len == 0) {
    31d2:	b918      	cbnz	r0, 31dc <__inserial+0xf0>
		__inpline = (char*)data;
    31d4:	4b09      	ldr	r3, [pc, #36]	; (31fc <__inserial+0x110>)
    31d6:	601c      	str	r4, [r3, #0]
		finish;
    31d8:	f7fe fc66 	bl	1aa8 <kill>
	}
	ptr += quant;
    31dc:	6828      	ldr	r0, [r5, #0]
    31de:	4430      	add	r0, r6
    31e0:	6028      	str	r0, [r5, #0]
	proceed (IM_BINL);
    31e2:	2003      	movs	r0, #3

endstrand
    31e4:	b003      	add	sp, #12
    31e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	proceed (IM_BINL);
    31ea:	f7fe bb05 	b.w	17f8 <proceed>
endstrand
    31ee:	b003      	add	sp, #12
    31f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    31f4:	f7fe ba78 	b.w	16e8 <__pi_badstate>
    31f8:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    31fc:	20000638 	andcs	r0, r0, r8, lsr r6
    3200:	20000640 	andcs	r0, r0, r0, asr #12
    3204:	2000063c 	andcs	r0, r0, ip, lsr r6

00003208 <outc.5724>:

	char c;
	word d;

	void outc (word c) {
		if (res && (d < n))
    3208:	f8dc 2000 	ldr.w	r2, [ip]
    320c:	b132      	cbz	r2, 321c <outc.5724+0x14>
    320e:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    3212:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    3216:	4299      	cmp	r1, r3
			// Store if there is a buffer ...
			res [d] = (char) c;
    3218:	bf88      	it	hi
    321a:	54d0      	strbhi	r0, [r2, r3]
		// ... otherwise just count
		d++;
    321c:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    3220:	3301      	adds	r3, #1
    3222:	f8ac 3006 	strh.w	r3, [ip, #6]
	};
    3226:	4770      	bx	lr

00003228 <__pi_vfparse>:
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    322c:	461c      	mov	r4, r3
    322e:	ab0c      	add	r3, sp, #48	; 0x30
    3230:	9303      	str	r3, [sp, #12]
			if (i == 0) \
				break; \
			c = (char) (val / i); \
		}

	d = 0;
    3232:	2300      	movs	r3, #0
				if (c == 'd' && (val & 0x8000) != 0) {
					/* Minus */
					outc ('-');
					val = (~val) + 1;
				}
				enci (10000);
    3234:	260a      	movs	r6, #10
						[ (val >> i) & 0xf ]);
    3236:	4f86      	ldr	r7, [pc, #536]	; (3450 <__pi_vfparse+0x228>)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3238:	9001      	str	r0, [sp, #4]
    323a:	f8ad 1008 	strh.w	r1, [sp, #8]
	d = 0;
    323e:	f8ad 300a 	strh.w	r3, [sp, #10]
		c = *fm++;
    3242:	f892 9000 	ldrb.w	r9, [r2]
		if (c == '\\') {
    3246:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    324a:	d118      	bne.n	327e <__pi_vfparse+0x56>
			if ((c = *fm++) == '\0') {
    324c:	f892 9001 	ldrb.w	r9, [r2, #1]
    3250:	1c95      	adds	r5, r2, #2
				outc ('\\');
    3252:	f10d 0c04 	add.w	ip, sp, #4
			if ((c = *fm++) == '\0') {
    3256:	f1b9 0f00 	cmp.w	r9, #0
    325a:	d10b      	bne.n	3274 <__pi_vfparse+0x4c>
				outc ('\\');
    325c:	205c      	movs	r0, #92	; 0x5c
    325e:	f7ff ffd3 	bl	3208 <outc.5724>
					goto Ret;
			}
		} else {
			// Regular character
Eol:
			outc (c);
    3262:	4648      	mov	r0, r9
    3264:	f10d 0c04 	add.w	ip, sp, #4
    3268:	f7ff ffce 	bl	3208 <outc.5724>
			if (c == '\0')
    326c:	f1b9 0f00 	cmp.w	r9, #0
    3270:	d103      	bne.n	327a <__pi_vfparse+0x52>
    3272:	e027      	b.n	32c4 <__pi_vfparse+0x9c>
			outc (c);
    3274:	4648      	mov	r0, r9
				outc (val);
    3276:	f7ff ffc7 	bl	3208 <outc.5724>
				val = (word) va_arg (ap, aword);
    327a:	462a      	mov	r2, r5
    327c:	e7e1      	b.n	3242 <__pi_vfparse+0x1a>
		if (c == '%') {
    327e:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    3282:	f040 80e2 	bne.w	344a <__pi_vfparse+0x222>
			c = *fm++;
    3286:	f892 8001 	ldrb.w	r8, [r2, #1]
    328a:	1c95      	adds	r5, r2, #2
			switch (c) {
    328c:	f1b8 0f73 	cmp.w	r8, #115	; 0x73
    3290:	f000 80cd 	beq.w	342e <__pi_vfparse+0x206>
    3294:	d81b      	bhi.n	32ce <__pi_vfparse+0xa6>
    3296:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    329a:	d033      	beq.n	3304 <__pi_vfparse+0xdc>
    329c:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    32a0:	d067      	beq.n	3372 <__pi_vfparse+0x14a>
    32a2:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    32a6:	f000 80bc 	beq.w	3422 <__pi_vfparse+0x1fa>
				outc ('%');
    32aa:	2025      	movs	r0, #37	; 0x25
    32ac:	f10d 0c04 	add.w	ip, sp, #4
    32b0:	f7ff ffaa 	bl	3208 <outc.5724>
				outc (c);
    32b4:	4640      	mov	r0, r8
    32b6:	f10d 0c04 	add.w	ip, sp, #4
    32ba:	f7ff ffa5 	bl	3208 <outc.5724>
				if (c == '\0')
    32be:	f1b8 0f00 	cmp.w	r8, #0
    32c2:	d1da      	bne.n	327a <__pi_vfparse+0x52>
Ret:
				return d;
    32c4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
		}
	}
}
    32c8:	b004      	add	sp, #16
    32ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch (c) {
    32ce:	f1b8 0f75 	cmp.w	r8, #117	; 0x75
    32d2:	d017      	beq.n	3304 <__pi_vfparse+0xdc>
    32d4:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
    32d8:	d1e7      	bne.n	32aa <__pi_vfparse+0x82>
				for (i = 12; ; i -= 4) {
    32da:	f04f 080c 	mov.w	r8, #12
				val = (word) va_arg (ap, aword);
    32de:	f854 3b04 	ldr.w	r3, [r4], #4
						[ (val >> i) & 0xf ]);
    32e2:	fa1f f983 	uxth.w	r9, r3
    32e6:	fa49 f308 	asr.w	r3, r9, r8
    32ea:	f003 030f 	and.w	r3, r3, #15
					outc (__pi_hex_enc_table
    32ee:	5cf8      	ldrb	r0, [r7, r3]
    32f0:	f10d 0c04 	add.w	ip, sp, #4
    32f4:	f7ff ff88 	bl	3208 <outc.5724>
					if (i == 0)
    32f8:	f1b8 0f00 	cmp.w	r8, #0
    32fc:	d0bd      	beq.n	327a <__pi_vfparse+0x52>
				for (i = 12; ; i -= 4) {
    32fe:	f1a8 0804 	sub.w	r8, r8, #4
					outc (__pi_hex_enc_table
    3302:	e7f0      	b.n	32e6 <__pi_vfparse+0xbe>
				val = (word) va_arg (ap, aword);
    3304:	f854 3b04 	ldr.w	r3, [r4], #4
				if (c == 'd' && (val & 0x8000) != 0) {
    3308:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
				val = (word) va_arg (ap, aword);
    330c:	fa1f f983 	uxth.w	r9, r3
				if (c == 'd' && (val & 0x8000) != 0) {
    3310:	d10a      	bne.n	3328 <__pi_vfparse+0x100>
    3312:	041b      	lsls	r3, r3, #16
    3314:	d508      	bpl.n	3328 <__pi_vfparse+0x100>
					outc ('-');
    3316:	202d      	movs	r0, #45	; 0x2d
    3318:	f10d 0c04 	add.w	ip, sp, #4
    331c:	f7ff ff74 	bl	3208 <outc.5724>
					val = (~val) + 1;
    3320:	f1c9 0900 	rsb	r9, r9, #0
    3324:	fa1f f989 	uxth.w	r9, r9
				for (i = 12; ; i -= 4) {
    3328:	2305      	movs	r3, #5
				enci (10000);
    332a:	f242 7810 	movw	r8, #10000	; 0x2710
    332e:	fbb9 f0f8 	udiv	r0, r9, r8
    3332:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    3336:	d103      	bne.n	3340 <__pi_vfparse+0x118>
    3338:	3b01      	subs	r3, #1
    333a:	d117      	bne.n	336c <__pi_vfparse+0x144>
    333c:	f04f 0801 	mov.w	r8, #1
    3340:	fa1f fa80 	uxth.w	sl, r0
    3344:	f10d 0c04 	add.w	ip, sp, #4
    3348:	3030      	adds	r0, #48	; 0x30
    334a:	f7ff ff5d 	bl	3208 <outc.5724>
    334e:	fbb8 f3f6 	udiv	r3, r8, r6
    3352:	fb08 991a 	mls	r9, r8, sl, r9
    3356:	f1b8 0f09 	cmp.w	r8, #9
    335a:	fa1f f989 	uxth.w	r9, r9
    335e:	b29b      	uxth	r3, r3
    3360:	d98b      	bls.n	327a <__pi_vfparse+0x52>
    3362:	fbb9 f0f3 	udiv	r0, r9, r3
    3366:	4698      	mov	r8, r3
    3368:	b2c0      	uxtb	r0, r0
    336a:	e7e9      	b.n	3340 <__pi_vfparse+0x118>
    336c:	fbb8 f8f6 	udiv	r8, r8, r6
    3370:	e7dd      	b.n	332e <__pi_vfparse+0x106>
				c = *fm;
    3372:	7893      	ldrb	r3, [r2, #2]
				if (c == 'd' || c == 'u') {
    3374:	2b64      	cmp	r3, #100	; 0x64
    3376:	d001      	beq.n	337c <__pi_vfparse+0x154>
    3378:	2b75      	cmp	r3, #117	; 0x75
    337a:	d132      	bne.n	33e2 <__pi_vfparse+0x1ba>
					if (c == 'd' &&
    337c:	2b64      	cmp	r3, #100	; 0x64
					val = va_arg (ap, lword);
    337e:	f854 ab04 	ldr.w	sl, [r4], #4
					fm++;
    3382:	f102 0503 	add.w	r5, r2, #3
					if (c == 'd' &&
    3386:	d109      	bne.n	339c <__pi_vfparse+0x174>
    3388:	f1ba 0f00 	cmp.w	sl, #0
    338c:	da06      	bge.n	339c <__pi_vfparse+0x174>
						outc ('-');
    338e:	202d      	movs	r0, #45	; 0x2d
    3390:	f10d 0c04 	add.w	ip, sp, #4
    3394:	f7ff ff38 	bl	3208 <outc.5724>
						val = (~val) + 1;
    3398:	f1ca 0a00 	rsb	sl, sl, #0
				enci (10000);
    339c:	230a      	movs	r3, #10
					enci (1000000000UL);
    339e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 3454 <__pi_vfparse+0x22c>
    33a2:	fbba f9f8 	udiv	r9, sl, r8
    33a6:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    33aa:	d103      	bne.n	33b4 <__pi_vfparse+0x18c>
    33ac:	3b01      	subs	r3, #1
    33ae:	d115      	bne.n	33dc <__pi_vfparse+0x1b4>
    33b0:	f04f 0801 	mov.w	r8, #1
    33b4:	f10d 0c04 	add.w	ip, sp, #4
    33b8:	f109 0030 	add.w	r0, r9, #48	; 0x30
    33bc:	f7ff ff24 	bl	3208 <outc.5724>
    33c0:	f1b8 0f09 	cmp.w	r8, #9
    33c4:	fbb8 f3f6 	udiv	r3, r8, r6
    33c8:	fb08 aa19 	mls	sl, r8, r9, sl
    33cc:	f67f af55 	bls.w	327a <__pi_vfparse+0x52>
    33d0:	fbba f9f3 	udiv	r9, sl, r3
    33d4:	4698      	mov	r8, r3
    33d6:	fa5f f989 	uxtb.w	r9, r9
    33da:	e7eb      	b.n	33b4 <__pi_vfparse+0x18c>
    33dc:	fbb8 f8f6 	udiv	r8, r8, r6
    33e0:	e7df      	b.n	33a2 <__pi_vfparse+0x17a>
				} else if (c == 'x') {
    33e2:	2b78      	cmp	r3, #120	; 0x78
    33e4:	d114      	bne.n	3410 <__pi_vfparse+0x1e8>
					for (i = 28; ; i -= 4) {
    33e6:	f04f 081c 	mov.w	r8, #28
					val = va_arg (ap, lword);
    33ea:	f854 9b04 	ldr.w	r9, [r4], #4
					fm++;
    33ee:	1cd5      	adds	r5, r2, #3
							[ (val >> i) & 0xf ]);
    33f0:	fa29 f308 	lsr.w	r3, r9, r8
    33f4:	f003 030f 	and.w	r3, r3, #15
						outc (__pi_hex_enc_table
    33f8:	5cf8      	ldrb	r0, [r7, r3]
    33fa:	f10d 0c04 	add.w	ip, sp, #4
    33fe:	f7ff ff03 	bl	3208 <outc.5724>
						if (i == 0)
    3402:	f1b8 0f00 	cmp.w	r8, #0
    3406:	f43f af38 	beq.w	327a <__pi_vfparse+0x52>
					for (i = 28; ; i -= 4) {
    340a:	f1a8 0804 	sub.w	r8, r8, #4
						outc (__pi_hex_enc_table
    340e:	e7ef      	b.n	33f0 <__pi_vfparse+0x1c8>
					outc ('%');
    3410:	4648      	mov	r0, r9
    3412:	f10d 0c04 	add.w	ip, sp, #4
    3416:	f7ff fef7 	bl	3208 <outc.5724>
					outc ('l');
    341a:	4640      	mov	r0, r8
    341c:	f10d 0c04 	add.w	ip, sp, #4
    3420:	e729      	b.n	3276 <__pi_vfparse+0x4e>
				val = (word) va_arg (ap, aword);
    3422:	f854 0b04 	ldr.w	r0, [r4], #4
				outc (val);
    3426:	f10d 0c04 	add.w	ip, sp, #4
    342a:	b280      	uxth	r0, r0
    342c:	e723      	b.n	3276 <__pi_vfparse+0x4e>
				while (*st != '\0') {
    342e:	f854 3b04 	ldr.w	r3, [r4], #4
    3432:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    3436:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    343a:	2800      	cmp	r0, #0
    343c:	f43f af1d 	beq.w	327a <__pi_vfparse+0x52>
					outc (*st);
    3440:	f10d 0c04 	add.w	ip, sp, #4
    3444:	f7ff fee0 	bl	3208 <outc.5724>
					st++;
    3448:	e7f5      	b.n	3436 <__pi_vfparse+0x20e>
		c = *fm++;
    344a:	1c55      	adds	r5, r2, #1
    344c:	e709      	b.n	3262 <__pi_vfparse+0x3a>
    344e:	bf00      	nop
    3450:	00004f75 	andeq	r4, r0, r5, ror pc
    3454:	3b9aca00 	blcc	fe6b5c5c <_estack+0xde6b0c5c>

00003458 <vform>:

char *vform (char *res, const char *fm, va_list aq) {
    3458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    345c:	460e      	mov	r6, r1
    345e:	4617      	mov	r7, r2

	word fml, d;

	if (res != NULL) {
    3460:	4604      	mov	r4, r0
    3462:	b140      	cbz	r0, 3476 <vform+0x1e>
		// We trust the caller
		__pi_vfparse (res, MAX_WORD, fm, aq);
    3464:	4613      	mov	r3, r2
    3466:	460a      	mov	r2, r1
    3468:	f64f 71ff 	movw	r1, #65535	; 0xffff
    346c:	f7ff fedc 	bl	3228 <__pi_vfparse>
		ufree (res);
		fml = d;
		goto Again;
	}
	return res;
}
    3470:	4620      	mov	r0, r4
    3472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fml = strlen (fm) + 17;
    3476:	4608      	mov	r0, r1
    3478:	f7fe fa3c 	bl	18f4 <__pi_strlen>
    347c:	f100 0511 	add.w	r5, r0, #17
    3480:	b2ad      	uxth	r5, r5
	if ((res = (char*) umalloc (fml)) == NULL)
    3482:	4628      	mov	r0, r5
    3484:	f7fe fb38 	bl	1af8 <__pi_malloc>
    3488:	4604      	mov	r4, r0
    348a:	2800      	cmp	r0, #0
    348c:	d0f0      	beq.n	3470 <vform+0x18>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    348e:	463b      	mov	r3, r7
    3490:	4632      	mov	r2, r6
    3492:	4629      	mov	r1, r5
    3494:	f7ff fec8 	bl	3228 <__pi_vfparse>
    3498:	4285      	cmp	r5, r0
    349a:	4680      	mov	r8, r0
    349c:	d2e8      	bcs.n	3470 <vform+0x18>
		ufree (res);
    349e:	4620      	mov	r0, r4
    34a0:	f7fe fade 	bl	1a60 <__pi_free>
		goto Again;
    34a4:	4645      	mov	r5, r8
    34a6:	e7ec      	b.n	3482 <vform+0x2a>

000034a8 <vscan>:
					c -= (char) ('A' - 10); \
				*vap = ((*vap) << 4) | (at) c; \
			} \
			}

	if (buf == NULL || fmt == NULL)
    34a8:	4603      	mov	r3, r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    34aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf == NULL || fmt == NULL)
    34ae:	2800      	cmp	r0, #0
    34b0:	f000 81b5 	beq.w	381e <vscan+0x376>
    34b4:	2900      	cmp	r1, #0
    34b6:	f000 81b4 	beq.w	3822 <vscan+0x37a>
		// A safety hatch
		return 0;

	nc = 0;
    34ba:	2400      	movs	r4, #0
#if	CODE_LONG_INTS
		    case 'l':
			switch (*fmt++) {
			    case '\0':	return nc;
		    	    case 'd': scani (lword); break;
		    	    case 'u': scanu (lword); break;
    34bc:	270a      	movs	r7, #10
    34be:	4625      	mov	r5, r4
			*sap = c;
			break;
		    }
		    case 's': {
			char *sap;
			while (isspace (*buf)) buf++;
    34c0:	f8df c370 	ldr.w	ip, [pc, #880]	; 3834 <vscan+0x38c>
    34c4:	460e      	mov	r6, r1
	while (*fmt != '\0') {
    34c6:	f811 0b01 	ldrb.w	r0, [r1], #1
    34ca:	b170      	cbz	r0, 34ea <vscan+0x42>
		if (*fmt++ != '%')
    34cc:	2825      	cmp	r0, #37	; 0x25
    34ce:	d1f9      	bne.n	34c4 <vscan+0x1c>
		switch (*fmt++) {
    34d0:	7870      	ldrb	r0, [r6, #1]
    34d2:	1cb1      	adds	r1, r6, #2
    34d4:	286c      	cmp	r0, #108	; 0x6c
    34d6:	f000 80e1 	beq.w	369c <vscan+0x1f4>
    34da:	d809      	bhi.n	34f0 <vscan+0x48>
    34dc:	2863      	cmp	r0, #99	; 0x63
    34de:	f000 8184 	beq.w	37ea <vscan+0x342>
    34e2:	2864      	cmp	r0, #100	; 0x64
    34e4:	d043      	beq.n	356e <vscan+0xc6>
    34e6:	2800      	cmp	r0, #0
    34e8:	d1ec      	bne.n	34c4 <vscan+0x1c>
			break;
		    }
		}
	}
	return nc;
}
    34ea:	4620      	mov	r0, r4
    34ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		switch (*fmt++) {
    34f0:	2875      	cmp	r0, #117	; 0x75
    34f2:	d074      	beq.n	35de <vscan+0x136>
    34f4:	2878      	cmp	r0, #120	; 0x78
    34f6:	f000 8098 	beq.w	362a <vscan+0x182>
    34fa:	2873      	cmp	r0, #115	; 0x73
    34fc:	d1e2      	bne.n	34c4 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    34fe:	7818      	ldrb	r0, [r3, #0]
    3500:	461e      	mov	r6, r3
    3502:	f1a0 0e09 	sub.w	lr, r0, #9
    3506:	fa5f fe8e 	uxtb.w	lr, lr
    350a:	f1be 0f17 	cmp.w	lr, #23
    350e:	4698      	mov	r8, r3
    3510:	f103 0301 	add.w	r3, r3, #1
    3514:	f240 8173 	bls.w	37fe <vscan+0x356>
			if (*buf == '\0')
    3518:	2800      	cmp	r0, #0
    351a:	d0e6      	beq.n	34ea <vscan+0x42>
			if (*buf != ',') {
    351c:	282c      	cmp	r0, #44	; 0x2c
			sap = va_arg (ap, char*);
    351e:	f852 eb04 	ldr.w	lr, [r2], #4
			nc++;
    3522:	f104 0401 	add.w	r4, r4, #1
			if (*buf != ',') {
    3526:	d00e      	beq.n	3546 <vscan+0x9e>
    3528:	4646      	mov	r6, r8
				while (!isspace (*buf) && *buf != ',' &&
    352a:	f818 3b01 	ldrb.w	r3, [r8], #1
    352e:	f1a3 0009 	sub.w	r0, r3, #9
    3532:	2801      	cmp	r0, #1
    3534:	d907      	bls.n	3546 <vscan+0x9e>
    3536:	2b0d      	cmp	r3, #13
    3538:	d005      	beq.n	3546 <vscan+0x9e>
    353a:	2b2c      	cmp	r3, #44	; 0x2c
    353c:	d003      	beq.n	3546 <vscan+0x9e>
    353e:	f013 0fdf 	tst.w	r3, #223	; 0xdf
    3542:	f040 8163 	bne.w	380c <vscan+0x364>
			while (isspace (*buf)) buf++;
    3546:	f896 8000 	ldrb.w	r8, [r6]
    354a:	4633      	mov	r3, r6
    354c:	f1a8 0009 	sub.w	r0, r8, #9
    3550:	b2c0      	uxtb	r0, r0
    3552:	2817      	cmp	r0, #23
    3554:	f106 0601 	add.w	r6, r6, #1
    3558:	f240 815b 	bls.w	3812 <vscan+0x36a>
			if (*buf == ',') buf++;
    355c:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
    3560:	bf08      	it	eq
    3562:	4633      	moveq	r3, r6
			*sap = '\0';
    3564:	f88e 5000 	strb.w	r5, [lr]
			break;
    3568:	e7ac      	b.n	34c4 <vscan+0x1c>
		    case 'd': scani (word); break;
    356a:	2e00      	cmp	r6, #0
    356c:	d0bd      	beq.n	34ea <vscan+0x42>
    356e:	469e      	mov	lr, r3
    3570:	f813 6b01 	ldrb.w	r6, [r3], #1
    3574:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    3578:	2809      	cmp	r0, #9
    357a:	d923      	bls.n	35c4 <vscan+0x11c>
    357c:	2e2d      	cmp	r6, #45	; 0x2d
    357e:	d001      	beq.n	3584 <vscan+0xdc>
    3580:	2e2b      	cmp	r6, #43	; 0x2b
    3582:	d1f2      	bne.n	356a <vscan+0xc2>
    3584:	7818      	ldrb	r0, [r3, #0]
    3586:	469e      	mov	lr, r3
    3588:	3830      	subs	r0, #48	; 0x30
    358a:	2809      	cmp	r0, #9
    358c:	d8ef      	bhi.n	356e <vscan+0xc6>
    358e:	f1a6 092d 	sub.w	r9, r6, #45	; 0x2d
    3592:	f1d9 0800 	rsbs	r8, r9, #0
    3596:	eb48 0809 	adc.w	r8, r8, r9
    359a:	f852 6b04 	ldr.w	r6, [r2], #4
    359e:	3401      	adds	r4, #1
    35a0:	8035      	strh	r5, [r6, #0]
    35a2:	f89e 0000 	ldrb.w	r0, [lr]
    35a6:	4673      	mov	r3, lr
    35a8:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
    35ac:	f1b9 0f09 	cmp.w	r9, #9
    35b0:	f10e 0e01 	add.w	lr, lr, #1
    35b4:	d909      	bls.n	35ca <vscan+0x122>
    35b6:	f1b8 0f00 	cmp.w	r8, #0
    35ba:	d183      	bne.n	34c4 <vscan+0x1c>
    35bc:	8830      	ldrh	r0, [r6, #0]
    35be:	4240      	negs	r0, r0
    35c0:	8030      	strh	r0, [r6, #0]
    35c2:	e77f      	b.n	34c4 <vscan+0x1c>
    35c4:	f04f 0800 	mov.w	r8, #0
    35c8:	e7e7      	b.n	359a <vscan+0xf2>
    35ca:	8833      	ldrh	r3, [r6, #0]
    35cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    35d0:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
    35d4:	3030      	adds	r0, #48	; 0x30
    35d6:	8030      	strh	r0, [r6, #0]
    35d8:	e7e3      	b.n	35a2 <vscan+0xfa>
		    case 'u': scanu (word); break;
    35da:	2800      	cmp	r0, #0
    35dc:	d085      	beq.n	34ea <vscan+0x42>
    35de:	7818      	ldrb	r0, [r3, #0]
    35e0:	461e      	mov	r6, r3
    35e2:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    35e6:	f1be 0f09 	cmp.w	lr, #9
    35ea:	f103 0301 	add.w	r3, r3, #1
    35ee:	d8f4      	bhi.n	35da <vscan+0x132>
    35f0:	f852 eb04 	ldr.w	lr, [r2], #4
    35f4:	3401      	adds	r4, #1
    35f6:	f8ae 5000 	strh.w	r5, [lr]
    35fa:	7830      	ldrb	r0, [r6, #0]
    35fc:	4633      	mov	r3, r6
    35fe:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    3602:	f1b8 0f09 	cmp.w	r8, #9
    3606:	f106 0601 	add.w	r6, r6, #1
    360a:	f63f af5b 	bhi.w	34c4 <vscan+0x1c>
    360e:	f8be 3000 	ldrh.w	r3, [lr]
    3612:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3616:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    361a:	3830      	subs	r0, #48	; 0x30
    361c:	f8ae 0000 	strh.w	r0, [lr]
    3620:	e7eb      	b.n	35fa <vscan+0x152>
		    case 'x': scanx (word); break;
    3622:	f1be 0f00 	cmp.w	lr, #0
    3626:	f43f af60 	beq.w	34ea <vscan+0x42>
    362a:	f893 e000 	ldrb.w	lr, [r3]
    362e:	461e      	mov	r6, r3
    3630:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    3634:	2809      	cmp	r0, #9
    3636:	f103 0301 	add.w	r3, r3, #1
    363a:	d904      	bls.n	3646 <vscan+0x19e>
    363c:	f02e 0020 	bic.w	r0, lr, #32
    3640:	3841      	subs	r0, #65	; 0x41
    3642:	2805      	cmp	r0, #5
    3644:	d8ed      	bhi.n	3622 <vscan+0x17a>
    3646:	f852 eb04 	ldr.w	lr, [r2], #4
    364a:	3401      	adds	r4, #1
    364c:	f8ae 5000 	strh.w	r5, [lr]
    3650:	f106 0805 	add.w	r8, r6, #5
    3654:	f896 9000 	ldrb.w	r9, [r6]
    3658:	4633      	mov	r3, r6
    365a:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    365e:	b2c0      	uxtb	r0, r0
    3660:	2809      	cmp	r0, #9
    3662:	f106 0601 	add.w	r6, r6, #1
    3666:	f240 80de 	bls.w	3826 <vscan+0x37e>
    366a:	f029 0020 	bic.w	r0, r9, #32
    366e:	3841      	subs	r0, #65	; 0x41
    3670:	2805      	cmp	r0, #5
    3672:	f63f af27 	bhi.w	34c4 <vscan+0x1c>
    3676:	4546      	cmp	r6, r8
    3678:	f43f af24 	beq.w	34c4 <vscan+0x1c>
    367c:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    3680:	2b05      	cmp	r3, #5
    3682:	bf94      	ite	ls
    3684:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    3688:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    368c:	b2c0      	uxtb	r0, r0
    368e:	f8be 3000 	ldrh.w	r3, [lr]
    3692:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    3696:	f8ae 0000 	strh.w	r0, [lr]
    369a:	e7db      	b.n	3654 <vscan+0x1ac>
			switch (*fmt++) {
    369c:	78b0      	ldrb	r0, [r6, #2]
    369e:	1cf1      	adds	r1, r6, #3
    36a0:	2875      	cmp	r0, #117	; 0x75
    36a2:	d07d      	beq.n	37a0 <vscan+0x2f8>
    36a4:	d831      	bhi.n	370a <vscan+0x262>
    36a6:	2800      	cmp	r0, #0
    36a8:	f43f af1f 	beq.w	34ea <vscan+0x42>
    36ac:	2864      	cmp	r0, #100	; 0x64
    36ae:	f47f af09 	bne.w	34c4 <vscan+0x1c>
    36b2:	4698      	mov	r8, r3
		    	    case 'd': scani (lword); break;
    36b4:	f813 6b01 	ldrb.w	r6, [r3], #1
    36b8:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    36bc:	2809      	cmp	r0, #9
    36be:	d962      	bls.n	3786 <vscan+0x2de>
    36c0:	2e2d      	cmp	r6, #45	; 0x2d
    36c2:	d001      	beq.n	36c8 <vscan+0x220>
    36c4:	2e2b      	cmp	r6, #43	; 0x2b
    36c6:	d15b      	bne.n	3780 <vscan+0x2d8>
    36c8:	7818      	ldrb	r0, [r3, #0]
    36ca:	4698      	mov	r8, r3
    36cc:	3830      	subs	r0, #48	; 0x30
    36ce:	2809      	cmp	r0, #9
    36d0:	d8ef      	bhi.n	36b2 <vscan+0x20a>
    36d2:	3e2d      	subs	r6, #45	; 0x2d
    36d4:	4270      	negs	r0, r6
    36d6:	4170      	adcs	r0, r6
    36d8:	f852 eb04 	ldr.w	lr, [r2], #4
    36dc:	3401      	adds	r4, #1
    36de:	f8ce 5000 	str.w	r5, [lr]
    36e2:	f898 6000 	ldrb.w	r6, [r8]
    36e6:	4643      	mov	r3, r8
    36e8:	3e30      	subs	r6, #48	; 0x30
    36ea:	fa5f f986 	uxtb.w	r9, r6
    36ee:	f1b9 0f09 	cmp.w	r9, #9
    36f2:	f108 0801 	add.w	r8, r8, #1
    36f6:	d948      	bls.n	378a <vscan+0x2e2>
    36f8:	2800      	cmp	r0, #0
    36fa:	f47f aee3 	bne.w	34c4 <vscan+0x1c>
    36fe:	f8de 0000 	ldr.w	r0, [lr]
    3702:	4240      	negs	r0, r0
    3704:	f8ce 0000 	str.w	r0, [lr]
    3708:	e6dc      	b.n	34c4 <vscan+0x1c>
    370a:	2878      	cmp	r0, #120	; 0x78
    370c:	f47f aeda 	bne.w	34c4 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    3710:	f893 e000 	ldrb.w	lr, [r3]
    3714:	461e      	mov	r6, r3
    3716:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    371a:	2809      	cmp	r0, #9
    371c:	f103 0301 	add.w	r3, r3, #1
    3720:	d904      	bls.n	372c <vscan+0x284>
    3722:	f02e 0020 	bic.w	r0, lr, #32
    3726:	3841      	subs	r0, #65	; 0x41
    3728:	2805      	cmp	r0, #5
    372a:	d85a      	bhi.n	37e2 <vscan+0x33a>
    372c:	f852 eb04 	ldr.w	lr, [r2], #4
    3730:	3401      	adds	r4, #1
    3732:	f8ce 5000 	str.w	r5, [lr]
    3736:	f106 0809 	add.w	r8, r6, #9
    373a:	f896 9000 	ldrb.w	r9, [r6]
    373e:	4633      	mov	r3, r6
    3740:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    3744:	b2c0      	uxtb	r0, r0
    3746:	2809      	cmp	r0, #9
    3748:	f106 0601 	add.w	r6, r6, #1
    374c:	d96f      	bls.n	382e <vscan+0x386>
    374e:	f029 0020 	bic.w	r0, r9, #32
    3752:	3841      	subs	r0, #65	; 0x41
    3754:	2805      	cmp	r0, #5
    3756:	f63f aeb5 	bhi.w	34c4 <vscan+0x1c>
    375a:	4546      	cmp	r6, r8
    375c:	f43f aeb2 	beq.w	34c4 <vscan+0x1c>
    3760:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    3764:	2b05      	cmp	r3, #5
    3766:	bf94      	ite	ls
    3768:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    376c:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    3770:	b2c0      	uxtb	r0, r0
    3772:	f8de 3000 	ldr.w	r3, [lr]
    3776:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    377a:	f8ce 0000 	str.w	r0, [lr]
    377e:	e7dc      	b.n	373a <vscan+0x292>
		    	    case 'd': scani (lword); break;
    3780:	2e00      	cmp	r6, #0
    3782:	d196      	bne.n	36b2 <vscan+0x20a>
    3784:	e6b1      	b.n	34ea <vscan+0x42>
    3786:	2000      	movs	r0, #0
    3788:	e7a6      	b.n	36d8 <vscan+0x230>
    378a:	f8de 3000 	ldr.w	r3, [lr]
    378e:	b2b6      	uxth	r6, r6
    3790:	437b      	muls	r3, r7
    3792:	1b9e      	subs	r6, r3, r6
    3794:	f8ce 6000 	str.w	r6, [lr]
    3798:	e7a3      	b.n	36e2 <vscan+0x23a>
		    	    case 'u': scanu (lword); break;
    379a:	2800      	cmp	r0, #0
    379c:	f43f aea5 	beq.w	34ea <vscan+0x42>
    37a0:	7818      	ldrb	r0, [r3, #0]
    37a2:	461e      	mov	r6, r3
    37a4:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    37a8:	f1be 0f09 	cmp.w	lr, #9
    37ac:	f103 0301 	add.w	r3, r3, #1
    37b0:	d8f3      	bhi.n	379a <vscan+0x2f2>
    37b2:	f852 eb04 	ldr.w	lr, [r2], #4
    37b6:	3401      	adds	r4, #1
    37b8:	f8ce 5000 	str.w	r5, [lr]
    37bc:	7830      	ldrb	r0, [r6, #0]
    37be:	4633      	mov	r3, r6
    37c0:	3830      	subs	r0, #48	; 0x30
    37c2:	fa5f f880 	uxtb.w	r8, r0
    37c6:	f1b8 0f09 	cmp.w	r8, #9
    37ca:	f106 0601 	add.w	r6, r6, #1
    37ce:	f63f ae79 	bhi.w	34c4 <vscan+0x1c>
    37d2:	f8de 3000 	ldr.w	r3, [lr]
    37d6:	b280      	uxth	r0, r0
    37d8:	fb07 0003 	mla	r0, r7, r3, r0
    37dc:	f8ce 0000 	str.w	r0, [lr]
    37e0:	e7ec      	b.n	37bc <vscan+0x314>
		    	    case 'x': scanx (lword); break;
    37e2:	f1be 0f00 	cmp.w	lr, #0
    37e6:	d193      	bne.n	3710 <vscan+0x268>
    37e8:	e67f      	b.n	34ea <vscan+0x42>
			if ((c = *buf++) == '\0')
    37ea:	f813 0b01 	ldrb.w	r0, [r3], #1
    37ee:	2800      	cmp	r0, #0
    37f0:	f43f ae7b 	beq.w	34ea <vscan+0x42>
			sap = va_arg (ap, char*);
    37f4:	f852 6b04 	ldr.w	r6, [r2], #4
			nc++;
    37f8:	3401      	adds	r4, #1
			*sap = c;
    37fa:	7030      	strb	r0, [r6, #0]
			break;
    37fc:	e662      	b.n	34c4 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    37fe:	fa2c fe0e 	lsr.w	lr, ip, lr
    3802:	f01e 0f01 	tst.w	lr, #1
    3806:	f47f ae7a 	bne.w	34fe <vscan+0x56>
    380a:	e687      	b.n	351c <vscan+0x74>
						*sap++ = *buf++;
    380c:	f80e 3b01 	strb.w	r3, [lr], #1
    3810:	e68a      	b.n	3528 <vscan+0x80>
			while (isspace (*buf)) buf++;
    3812:	fa2c f000 	lsr.w	r0, ip, r0
    3816:	07c0      	lsls	r0, r0, #31
    3818:	f53f ae95 	bmi.w	3546 <vscan+0x9e>
    381c:	e6a2      	b.n	3564 <vscan+0xbc>
		return 0;
    381e:	4604      	mov	r4, r0
    3820:	e663      	b.n	34ea <vscan+0x42>
    3822:	460c      	mov	r4, r1
    3824:	e661      	b.n	34ea <vscan+0x42>
		    case 'x': scanx (word); break;
    3826:	4546      	cmp	r6, r8
    3828:	f47f af31 	bne.w	368e <vscan+0x1e6>
    382c:	e64a      	b.n	34c4 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    382e:	4546      	cmp	r6, r8
    3830:	d19f      	bne.n	3772 <vscan+0x2ca>
    3832:	e647      	b.n	34c4 <vscan+0x1c>
    3834:	00800013 	addeq	r0, r0, r3, lsl r0

00003838 <SafeHapiVoid>:
    3838:	b570      	push	{r4, r5, r6, lr}
    383a:	4606      	mov	r6, r0
    383c:	f000 f844 	bl	38c8 <NOROM_CPUcpsid>
    3840:	4605      	mov	r5, r0
    3842:	4c06      	ldr	r4, [pc, #24]	; (385c <SafeHapiVoid+0x24>)
    3844:	6823      	ldr	r3, [r4, #0]
    3846:	2b00      	cmp	r3, #0
    3848:	d0fb      	beq.n	3842 <SafeHapiVoid+0xa>
    384a:	47b0      	blx	r6
    384c:	2301      	movs	r3, #1
    384e:	6023      	str	r3, [r4, #0]
    3850:	b91d      	cbnz	r5, 385a <SafeHapiVoid+0x22>
    3852:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3856:	f000 b83b 	b.w	38d0 <NOROM_CPUcpsie>
    385a:	bd70      	pop	{r4, r5, r6, pc}
    385c:	400c8000 	andmi	r8, ip, r0

00003860 <NOROM_AONBatMonTemperatureGetDegC>:
    3860:	4b08      	ldr	r3, [pc, #32]	; (3884 <NOROM_AONBatMonTemperatureGetDegC+0x24>)
    3862:	6818      	ldr	r0, [r3, #0]
    3864:	4b08      	ldr	r3, [pc, #32]	; (3888 <NOROM_AONBatMonTemperatureGetDegC+0x28>)
    3866:	7819      	ldrb	r1, [r3, #0]
    3868:	4b08      	ldr	r3, [pc, #32]	; (388c <NOROM_AONBatMonTemperatureGetDegC+0x2c>)
    386a:	681a      	ldr	r2, [r3, #0]
    386c:	f340 0310 	sbfx	r3, r0, #0, #17
    3870:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
    3874:	b248      	sxtb	r0, r1
    3876:	4350      	muls	r0, r2
    3878:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    387c:	3080      	adds	r0, #128	; 0x80
    387e:	1200      	asrs	r0, r0, #8
    3880:	4770      	bx	lr
    3882:	bf00      	nop
    3884:	40095030 	andmi	r5, r9, r0, lsr r0
    3888:	5000130c 	andpl	r1, r0, ip, lsl #6
    388c:	40095028 	andmi	r5, r9, r8, lsr #32

00003890 <NOROM_AONRTCCurrentCompareValueGet>:
    3890:	4a05      	ldr	r2, [pc, #20]	; (38a8 <NOROM_AONRTCCurrentCompareValueGet+0x18>)
    3892:	4906      	ldr	r1, [pc, #24]	; (38ac <NOROM_AONRTCCurrentCompareValueGet+0x1c>)
    3894:	6813      	ldr	r3, [r2, #0]
    3896:	6808      	ldr	r0, [r1, #0]
    3898:	6812      	ldr	r2, [r2, #0]
    389a:	4293      	cmp	r3, r2
    389c:	d1f8      	bne.n	3890 <NOROM_AONRTCCurrentCompareValueGet>
    389e:	041b      	lsls	r3, r3, #16
    38a0:	ea43 4010 	orr.w	r0, r3, r0, lsr #16
    38a4:	4770      	bx	lr
    38a6:	bf00      	nop
    38a8:	40092008 	andmi	r2, r9, r8
    38ac:	4009200c 	andmi	r2, r9, ip

000038b0 <NOROM_AONRTCCurrent64BitValueGet>:
    38b0:	4b03      	ldr	r3, [pc, #12]	; (38c0 <NOROM_AONRTCCurrent64BitValueGet+0x10>)
    38b2:	4904      	ldr	r1, [pc, #16]	; (38c4 <NOROM_AONRTCCurrent64BitValueGet+0x14>)
    38b4:	681a      	ldr	r2, [r3, #0]
    38b6:	6808      	ldr	r0, [r1, #0]
    38b8:	6819      	ldr	r1, [r3, #0]
    38ba:	4291      	cmp	r1, r2
    38bc:	d1f8      	bne.n	38b0 <NOROM_AONRTCCurrent64BitValueGet>
    38be:	4770      	bx	lr
    38c0:	40092008 	andmi	r2, r9, r8
    38c4:	4009200c 	andmi	r2, r9, ip

000038c8 <NOROM_CPUcpsid>:
    38c8:	f3ef 8010 	mrs	r0, PRIMASK
    38cc:	b672      	cpsid	i
    38ce:	4770      	bx	lr

000038d0 <NOROM_CPUcpsie>:
    38d0:	f3ef 8010 	mrs	r0, PRIMASK
    38d4:	b662      	cpsie	i
    38d6:	4770      	bx	lr

000038d8 <NOROM_OSCClockSourceSet>:
    38d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    38da:	460c      	mov	r4, r1
    38dc:	07c1      	lsls	r1, r0, #31
    38de:	4605      	mov	r5, r0
    38e0:	d509      	bpl.n	38f6 <NOROM_OSCClockSourceSet+0x1e>
    38e2:	4b12      	ldr	r3, [pc, #72]	; (392c <NOROM_OSCClockSourceSet+0x54>)
    38e4:	b2a2      	uxth	r2, r4
    38e6:	681b      	ldr	r3, [r3, #0]
    38e8:	2100      	movs	r1, #0
    38ea:	9200      	str	r2, [sp, #0]
    38ec:	685e      	ldr	r6, [r3, #4]
    38ee:	4810      	ldr	r0, [pc, #64]	; (3930 <NOROM_OSCClockSourceSet+0x58>)
    38f0:	2201      	movs	r2, #1
    38f2:	460b      	mov	r3, r1
    38f4:	47b0      	blx	r6
    38f6:	07aa      	lsls	r2, r5, #30
    38f8:	d509      	bpl.n	390e <NOROM_OSCClockSourceSet+0x36>
    38fa:	4b0c      	ldr	r3, [pc, #48]	; (392c <NOROM_OSCClockSourceSet+0x54>)
    38fc:	b2a2      	uxth	r2, r4
    38fe:	681b      	ldr	r3, [r3, #0]
    3900:	9200      	str	r2, [sp, #0]
    3902:	685e      	ldr	r6, [r3, #4]
    3904:	480a      	ldr	r0, [pc, #40]	; (3930 <NOROM_OSCClockSourceSet+0x58>)
    3906:	2100      	movs	r1, #0
    3908:	2202      	movs	r2, #2
    390a:	2301      	movs	r3, #1
    390c:	47b0      	blx	r6
    390e:	076b      	lsls	r3, r5, #29
    3910:	d509      	bpl.n	3926 <NOROM_OSCClockSourceSet+0x4e>
    3912:	4b06      	ldr	r3, [pc, #24]	; (392c <NOROM_OSCClockSourceSet+0x54>)
    3914:	b2a4      	uxth	r4, r4
    3916:	681b      	ldr	r3, [r3, #0]
    3918:	9400      	str	r4, [sp, #0]
    391a:	685c      	ldr	r4, [r3, #4]
    391c:	4804      	ldr	r0, [pc, #16]	; (3930 <NOROM_OSCClockSourceSet+0x58>)
    391e:	2100      	movs	r1, #0
    3920:	220c      	movs	r2, #12
    3922:	2302      	movs	r3, #2
    3924:	47a0      	blx	r4
    3926:	b002      	add	sp, #8
    3928:	bd70      	pop	{r4, r5, r6, pc}
    392a:	bf00      	nop
    392c:	100001a4 	andne	r0, r0, r4, lsr #3
    3930:	400ca000 	andmi	sl, ip, r0

00003934 <NOROM_OSCClockSourceGet>:
    3934:	b510      	push	{r4, lr}
    3936:	4b08      	ldr	r3, [pc, #32]	; (3958 <NOROM_OSCClockSourceGet+0x24>)
    3938:	2804      	cmp	r0, #4
    393a:	681b      	ldr	r3, [r3, #0]
    393c:	f04f 0134 	mov.w	r1, #52	; 0x34
    3940:	68dc      	ldr	r4, [r3, #12]
    3942:	bf07      	ittee	eq
    3944:	f04f 42c0 	moveq.w	r2, #1610612736	; 0x60000000
    3948:	231d      	moveq	r3, #29
    394a:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
    394e:	231c      	movne	r3, #28
    3950:	4802      	ldr	r0, [pc, #8]	; (395c <NOROM_OSCClockSourceGet+0x28>)
    3952:	47a0      	blx	r4
    3954:	bd10      	pop	{r4, pc}
    3956:	bf00      	nop
    3958:	100001a4 	andne	r0, r0, r4, lsr #3
    395c:	400ca000 	andmi	sl, ip, r0

00003960 <NOROM_OSCHF_TurnOnXosc>:
    3960:	b508      	push	{r3, lr}
    3962:	2003      	movs	r0, #3
    3964:	2101      	movs	r1, #1
    3966:	f7ff ffb7 	bl	38d8 <NOROM_OSCClockSourceSet>
    396a:	f7ff ff91 	bl	3890 <NOROM_AONRTCCurrentCompareValueGet>
    396e:	4b01      	ldr	r3, [pc, #4]	; (3974 <NOROM_OSCHF_TurnOnXosc+0x14>)
    3970:	6098      	str	r0, [r3, #8]
    3972:	bd08      	pop	{r3, pc}
    3974:	20000644 	andcs	r0, r0, r4, asr #12

00003978 <NOROM_OSCHF_AttemptToSwitchToXosc>:
    3978:	b510      	push	{r4, lr}
    397a:	2001      	movs	r0, #1
    397c:	f7ff ffda 	bl	3934 <NOROM_OSCClockSourceGet>
    3980:	2801      	cmp	r0, #1
    3982:	d01c      	beq.n	39be <NOROM_OSCHF_AttemptToSwitchToXosc+0x46>
    3984:	4b0f      	ldr	r3, [pc, #60]	; (39c4 <NOROM_OSCHF_AttemptToSwitchToXosc+0x4c>)
    3986:	4810      	ldr	r0, [pc, #64]	; (39c8 <NOROM_OSCHF_AttemptToSwitchToXosc+0x50>)
    3988:	681b      	ldr	r3, [r3, #0]
    398a:	2134      	movs	r1, #52	; 0x34
    398c:	68dc      	ldr	r4, [r3, #12]
    398e:	2201      	movs	r2, #1
    3990:	2300      	movs	r3, #0
    3992:	47a0      	blx	r4
    3994:	b1a0      	cbz	r0, 39c0 <NOROM_OSCHF_AttemptToSwitchToXosc+0x48>
    3996:	4b0d      	ldr	r3, [pc, #52]	; (39cc <NOROM_OSCHF_AttemptToSwitchToXosc+0x54>)
    3998:	6b98      	ldr	r0, [r3, #56]	; 0x38
    399a:	f7ff ff4d 	bl	3838 <SafeHapiVoid>
    399e:	f7ff ff77 	bl	3890 <NOROM_AONRTCCurrentCompareValueGet>
    39a2:	4a0b      	ldr	r2, [pc, #44]	; (39d0 <NOROM_OSCHF_AttemptToSwitchToXosc+0x58>)
    39a4:	6893      	ldr	r3, [r2, #8]
    39a6:	60d0      	str	r0, [r2, #12]
    39a8:	1ac0      	subs	r0, r0, r3
    39aa:	4b0a      	ldr	r3, [pc, #40]	; (39d4 <NOROM_OSCHF_AttemptToSwitchToXosc+0x5c>)
    39ac:	4358      	muls	r0, r3
    39ae:	6813      	ldr	r3, [r2, #0]
    39b0:	0c00      	lsrs	r0, r0, #16
    39b2:	eba3 0393 	sub.w	r3, r3, r3, lsr #2
    39b6:	4283      	cmp	r3, r0
    39b8:	bf94      	ite	ls
    39ba:	6010      	strls	r0, [r2, #0]
    39bc:	6013      	strhi	r3, [r2, #0]
    39be:	2001      	movs	r0, #1
    39c0:	bd10      	pop	{r4, pc}
    39c2:	bf00      	nop
    39c4:	100001a4 	andne	r0, r0, r4, lsr #3
    39c8:	400ca000 	andmi	sl, ip, r0
    39cc:	10000048 	andne	r0, r0, r8, asr #32
    39d0:	20000644 	andcs	r0, r0, r4, asr #12
    39d4:	000f4240 	andeq	r4, pc, r0, asr #4

000039d8 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>:
    39d8:	b510      	push	{r4, lr}
    39da:	2003      	movs	r0, #3
    39dc:	2100      	movs	r1, #0
    39de:	f7ff ff7b 	bl	38d8 <NOROM_OSCClockSourceSet>
    39e2:	2001      	movs	r0, #1
    39e4:	f7ff ffa6 	bl	3934 <NOROM_OSCClockSourceGet>
    39e8:	b118      	cbz	r0, 39f2 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x1a>
    39ea:	4b06      	ldr	r3, [pc, #24]	; (3a04 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x2c>)
    39ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
    39ee:	f7ff ff23 	bl	3838 <SafeHapiVoid>
    39f2:	f7ff ff4d 	bl	3890 <NOROM_AONRTCCurrentCompareValueGet>
    39f6:	4c04      	ldr	r4, [pc, #16]	; (3a08 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x30>)
    39f8:	6060      	str	r0, [r4, #4]
    39fa:	f7ff ff31 	bl	3860 <NOROM_AONBatMonTemperatureGetDegC>
    39fe:	6120      	str	r0, [r4, #16]
    3a00:	bd10      	pop	{r4, pc}
    3a02:	bf00      	nop
    3a04:	10000048 	andne	r0, r0, r8, asr #32
    3a08:	20000644 	andcs	r0, r0, r4, asr #12

00003a0c <NOROM_RFCDoorbellSendTo>:
    3a0c:	4a07      	ldr	r2, [pc, #28]	; (3a2c <NOROM_RFCDoorbellSendTo+0x20>)
    3a0e:	6811      	ldr	r1, [r2, #0]
    3a10:	2900      	cmp	r1, #0
    3a12:	d1fb      	bne.n	3a0c <NOROM_RFCDoorbellSendTo>
    3a14:	4b06      	ldr	r3, [pc, #24]	; (3a30 <NOROM_RFCDoorbellSendTo+0x24>)
    3a16:	6019      	str	r1, [r3, #0]
    3a18:	6010      	str	r0, [r2, #0]
    3a1a:	681a      	ldr	r2, [r3, #0]
    3a1c:	2a00      	cmp	r2, #0
    3a1e:	d0fc      	beq.n	3a1a <NOROM_RFCDoorbellSendTo+0xe>
    3a20:	4b03      	ldr	r3, [pc, #12]	; (3a30 <NOROM_RFCDoorbellSendTo+0x24>)
    3a22:	2200      	movs	r2, #0
    3a24:	601a      	str	r2, [r3, #0]
    3a26:	f853 0c18 	ldr.w	r0, [r3, #-24]
    3a2a:	4770      	bx	lr
    3a2c:	40041000 	andmi	r1, r4, r0
    3a30:	4004101c 	andmi	r1, r4, ip, lsl r0

00003a34 <NOROM_RFCSynthPowerDown>:
    3a34:	4a0e      	ldr	r2, [pc, #56]	; (3a70 <NOROM_RFCSynthPowerDown+0x3c>)
    3a36:	490f      	ldr	r1, [pc, #60]	; (3a74 <NOROM_RFCSynthPowerDown+0x40>)
    3a38:	6813      	ldr	r3, [r2, #0]
    3a3a:	2050      	movs	r0, #80	; 0x50
    3a3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3a40:	f023 0302 	bic.w	r3, r3, #2
    3a44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3a48:	6013      	str	r3, [r2, #0]
    3a4a:	4b0b      	ldr	r3, [pc, #44]	; (3a78 <NOROM_RFCSynthPowerDown+0x44>)
    3a4c:	2203      	movs	r2, #3
    3a4e:	601a      	str	r2, [r3, #0]
    3a50:	f241 0330 	movw	r3, #4144	; 0x1030
    3a54:	4a09      	ldr	r2, [pc, #36]	; (3a7c <NOROM_RFCSynthPowerDown+0x48>)
    3a56:	600b      	str	r3, [r1, #0]
    3a58:	2301      	movs	r3, #1
    3a5a:	6013      	str	r3, [r2, #0]
    3a5c:	6008      	str	r0, [r1, #0]
    3a5e:	f44f 60ca 	mov.w	r0, #1616	; 0x650
    3a62:	6013      	str	r3, [r2, #0]
    3a64:	6008      	str	r0, [r1, #0]
    3a66:	6013      	str	r3, [r2, #0]
    3a68:	f842 3c0c 	str.w	r3, [r2, #-12]
    3a6c:	4770      	bx	lr
    3a6e:	bf00      	nop
    3a70:	60040000 	andvs	r0, r4, r0
    3a74:	40044114 	andmi	r4, r4, r4, lsl r1
    3a78:	40044108 	andmi	r4, r4, r8, lsl #2
    3a7c:	4004410c 	andmi	r4, r4, ip, lsl #2

00003a80 <NOROM_RFCRfTrimRead>:
    3a80:	f640 0202 	movw	r2, #2050	; 0x802
    3a84:	8803      	ldrh	r3, [r0, #0]
    3a86:	4293      	cmp	r3, r2
    3a88:	d006      	beq.n	3a98 <NOROM_RFCRfTrimRead+0x18>
    3a8a:	f643 0207 	movw	r2, #14343	; 0x3807
    3a8e:	4293      	cmp	r3, r2
    3a90:	d104      	bne.n	3a9c <NOROM_RFCRfTrimRead+0x1c>
    3a92:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    3a96:	e002      	b.n	3a9e <NOROM_RFCRfTrimRead+0x1e>
    3a98:	7bc3      	ldrb	r3, [r0, #15]
    3a9a:	e000      	b.n	3a9e <NOROM_RFCRfTrimRead+0x1e>
    3a9c:	2300      	movs	r3, #0
    3a9e:	4a36      	ldr	r2, [pc, #216]	; (3b78 <NOROM_RFCRfTrimRead+0xf8>)
    3aa0:	2b0a      	cmp	r3, #10
    3aa2:	6812      	ldr	r2, [r2, #0]
    3aa4:	600a      	str	r2, [r1, #0]
    3aa6:	d031      	beq.n	3b0c <NOROM_RFCRfTrimRead+0x8c>
    3aa8:	dc10      	bgt.n	3acc <NOROM_RFCRfTrimRead+0x4c>
    3aaa:	2b05      	cmp	r3, #5
    3aac:	d021      	beq.n	3af2 <NOROM_RFCRfTrimRead+0x72>
    3aae:	2b06      	cmp	r3, #6
    3ab0:	d153      	bne.n	3b5a <NOROM_RFCRfTrimRead+0xda>
    3ab2:	4b32      	ldr	r3, [pc, #200]	; (3b7c <NOROM_RFCRfTrimRead+0xfc>)
    3ab4:	681b      	ldr	r3, [r3, #0]
    3ab6:	604b      	str	r3, [r1, #4]
    3ab8:	4b31      	ldr	r3, [pc, #196]	; (3b80 <NOROM_RFCRfTrimRead+0x100>)
    3aba:	681b      	ldr	r3, [r3, #0]
    3abc:	608b      	str	r3, [r1, #8]
    3abe:	4b31      	ldr	r3, [pc, #196]	; (3b84 <NOROM_RFCRfTrimRead+0x104>)
    3ac0:	681b      	ldr	r3, [r3, #0]
    3ac2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3ac6:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    3aca:	e052      	b.n	3b72 <NOROM_RFCRfTrimRead+0xf2>
    3acc:	2b0f      	cmp	r3, #15
    3ace:	d02a      	beq.n	3b26 <NOROM_RFCRfTrimRead+0xa6>
    3ad0:	2b1e      	cmp	r3, #30
    3ad2:	d035      	beq.n	3b40 <NOROM_RFCRfTrimRead+0xc0>
    3ad4:	2b0c      	cmp	r3, #12
    3ad6:	d140      	bne.n	3b5a <NOROM_RFCRfTrimRead+0xda>
    3ad8:	4b2b      	ldr	r3, [pc, #172]	; (3b88 <NOROM_RFCRfTrimRead+0x108>)
    3ada:	681b      	ldr	r3, [r3, #0]
    3adc:	604b      	str	r3, [r1, #4]
    3ade:	4b2b      	ldr	r3, [pc, #172]	; (3b8c <NOROM_RFCRfTrimRead+0x10c>)
    3ae0:	681b      	ldr	r3, [r3, #0]
    3ae2:	608b      	str	r3, [r1, #8]
    3ae4:	4b2a      	ldr	r3, [pc, #168]	; (3b90 <NOROM_RFCRfTrimRead+0x110>)
    3ae6:	681b      	ldr	r3, [r3, #0]
    3ae8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3aec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
    3af0:	e03f      	b.n	3b72 <NOROM_RFCRfTrimRead+0xf2>
    3af2:	4b28      	ldr	r3, [pc, #160]	; (3b94 <NOROM_RFCRfTrimRead+0x114>)
    3af4:	681b      	ldr	r3, [r3, #0]
    3af6:	604b      	str	r3, [r1, #4]
    3af8:	4b27      	ldr	r3, [pc, #156]	; (3b98 <NOROM_RFCRfTrimRead+0x118>)
    3afa:	681b      	ldr	r3, [r3, #0]
    3afc:	608b      	str	r3, [r1, #8]
    3afe:	4b27      	ldr	r3, [pc, #156]	; (3b9c <NOROM_RFCRfTrimRead+0x11c>)
    3b00:	681b      	ldr	r3, [r3, #0]
    3b02:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3b06:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
    3b0a:	e032      	b.n	3b72 <NOROM_RFCRfTrimRead+0xf2>
    3b0c:	4b24      	ldr	r3, [pc, #144]	; (3ba0 <NOROM_RFCRfTrimRead+0x120>)
    3b0e:	681b      	ldr	r3, [r3, #0]
    3b10:	604b      	str	r3, [r1, #4]
    3b12:	4b24      	ldr	r3, [pc, #144]	; (3ba4 <NOROM_RFCRfTrimRead+0x124>)
    3b14:	681b      	ldr	r3, [r3, #0]
    3b16:	608b      	str	r3, [r1, #8]
    3b18:	4b23      	ldr	r3, [pc, #140]	; (3ba8 <NOROM_RFCRfTrimRead+0x128>)
    3b1a:	681b      	ldr	r3, [r3, #0]
    3b1c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3b20:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
    3b24:	e025      	b.n	3b72 <NOROM_RFCRfTrimRead+0xf2>
    3b26:	4b21      	ldr	r3, [pc, #132]	; (3bac <NOROM_RFCRfTrimRead+0x12c>)
    3b28:	681b      	ldr	r3, [r3, #0]
    3b2a:	604b      	str	r3, [r1, #4]
    3b2c:	4b20      	ldr	r3, [pc, #128]	; (3bb0 <NOROM_RFCRfTrimRead+0x130>)
    3b2e:	681b      	ldr	r3, [r3, #0]
    3b30:	608b      	str	r3, [r1, #8]
    3b32:	4b20      	ldr	r3, [pc, #128]	; (3bb4 <NOROM_RFCRfTrimRead+0x134>)
    3b34:	681b      	ldr	r3, [r3, #0]
    3b36:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3b3a:	f043 43f0 	orr.w	r3, r3, #2013265920	; 0x78000000
    3b3e:	e018      	b.n	3b72 <NOROM_RFCRfTrimRead+0xf2>
    3b40:	4b1d      	ldr	r3, [pc, #116]	; (3bb8 <NOROM_RFCRfTrimRead+0x138>)
    3b42:	681b      	ldr	r3, [r3, #0]
    3b44:	604b      	str	r3, [r1, #4]
    3b46:	4b1d      	ldr	r3, [pc, #116]	; (3bbc <NOROM_RFCRfTrimRead+0x13c>)
    3b48:	681b      	ldr	r3, [r3, #0]
    3b4a:	608b      	str	r3, [r1, #8]
    3b4c:	4b1c      	ldr	r3, [pc, #112]	; (3bc0 <NOROM_RFCRfTrimRead+0x140>)
    3b4e:	681b      	ldr	r3, [r3, #0]
    3b50:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3b54:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
    3b58:	e00b      	b.n	3b72 <NOROM_RFCRfTrimRead+0xf2>
    3b5a:	4b1a      	ldr	r3, [pc, #104]	; (3bc4 <NOROM_RFCRfTrimRead+0x144>)
    3b5c:	681b      	ldr	r3, [r3, #0]
    3b5e:	604b      	str	r3, [r1, #4]
    3b60:	4b19      	ldr	r3, [pc, #100]	; (3bc8 <NOROM_RFCRfTrimRead+0x148>)
    3b62:	681b      	ldr	r3, [r3, #0]
    3b64:	608b      	str	r3, [r1, #8]
    3b66:	4b19      	ldr	r3, [pc, #100]	; (3bcc <NOROM_RFCRfTrimRead+0x14c>)
    3b68:	681b      	ldr	r3, [r3, #0]
    3b6a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3b72:	60cb      	str	r3, [r1, #12]
    3b74:	4770      	bx	lr
    3b76:	bf00      	nop
    3b78:	5000134c 	andpl	r1, r0, ip, asr #6
    3b7c:	500010c8 	andpl	r1, r0, r8, asr #1
    3b80:	500010e0 	andpl	r1, r0, r0, ror #1
    3b84:	500010f8 	strdpl	r1, [r0], -r8
    3b88:	500010d0 	ldrdpl	r1, [r0], -r0
    3b8c:	500010e8 	andpl	r1, r0, r8, ror #1
    3b90:	50001100 	andpl	r1, r0, r0, lsl #2
    3b94:	500010c4 	andpl	r1, r0, r4, asr #1
    3b98:	500010dc 	ldrdpl	r1, [r0], -ip
    3b9c:	500010f4 	strdpl	r1, [r0], -r4
    3ba0:	500010cc 	andpl	r1, r0, ip, asr #1
    3ba4:	500010e4 	andpl	r1, r0, r4, ror #1
    3ba8:	500010fc 	strdpl	r1, [r0], -ip
    3bac:	500010d4 	ldrdpl	r1, [r0], -r4
    3bb0:	500010ec 	andpl	r1, r0, ip, ror #1
    3bb4:	50001104 	andpl	r1, r0, r4, lsl #2
    3bb8:	500010d8 	ldrdpl	r1, [r0], -r8
    3bbc:	500010f0 	strdpl	r1, [r0], -r0
    3bc0:	50001108 	andpl	r1, r0, r8, lsl #2
    3bc4:	50001354 	andpl	r1, r0, r4, asr r3
    3bc8:	50001358 	andpl	r1, r0, r8, asr r3
    3bcc:	50001380 	andpl	r1, r0, r0, lsl #7

00003bd0 <NOROM_RFCRTrim>:
    3bd0:	f643 0206 	movw	r2, #14342	; 0x3806
    3bd4:	b570      	push	{r4, r5, r6, lr}
    3bd6:	8803      	ldrh	r3, [r0, #0]
    3bd8:	4293      	cmp	r3, r2
    3bda:	d00a      	beq.n	3bf2 <NOROM_RFCRTrim+0x22>
    3bdc:	f643 0207 	movw	r2, #14343	; 0x3807
    3be0:	4293      	cmp	r3, r2
    3be2:	d009      	beq.n	3bf8 <NOROM_RFCRTrim+0x28>
    3be4:	f640 0202 	movw	r2, #2050	; 0x802
    3be8:	4293      	cmp	r3, r2
    3bea:	d16b      	bne.n	3cc4 <NOROM_RFCRTrim+0xf4>
    3bec:	7bc1      	ldrb	r1, [r0, #15]
    3bee:	6943      	ldr	r3, [r0, #20]
    3bf0:	e005      	b.n	3bfe <NOROM_RFCRTrim+0x2e>
    3bf2:	69c3      	ldr	r3, [r0, #28]
    3bf4:	2102      	movs	r1, #2
    3bf6:	e002      	b.n	3bfe <NOROM_RFCRTrim+0x2e>
    3bf8:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    3bfc:	69c3      	ldr	r3, [r0, #28]
    3bfe:	2b00      	cmp	r3, #0
    3c00:	d060      	beq.n	3cc4 <NOROM_RFCRTrim+0xf4>
    3c02:	f103 0414 	add.w	r4, r3, #20
    3c06:	f244 0538 	movw	r5, #16440	; 0x4038
    3c0a:	681a      	ldr	r2, [r3, #0]
    3c0c:	4618      	mov	r0, r3
    3c0e:	b296      	uxth	r6, r2
    3c10:	42ae      	cmp	r6, r5
    3c12:	f103 0304 	add.w	r3, r3, #4
    3c16:	d103      	bne.n	3c20 <NOROM_RFCRTrim+0x50>
    3c18:	f3c2 4403 	ubfx	r4, r2, #16, #4
    3c1c:	b91c      	cbnz	r4, 3c26 <NOROM_RFCRTrim+0x56>
    3c1e:	bd70      	pop	{r4, r5, r6, pc}
    3c20:	42a3      	cmp	r3, r4
    3c22:	d1f0      	bne.n	3c06 <NOROM_RFCRTrim+0x36>
    3c24:	bd70      	pop	{r4, r5, r6, pc}
    3c26:	290a      	cmp	r1, #10
    3c28:	d01d      	beq.n	3c66 <NOROM_RFCRTrim+0x96>
    3c2a:	dc06      	bgt.n	3c3a <NOROM_RFCRTrim+0x6a>
    3c2c:	2905      	cmp	r1, #5
    3c2e:	d013      	beq.n	3c58 <NOROM_RFCRTrim+0x88>
    3c30:	2906      	cmp	r1, #6
    3c32:	d016      	beq.n	3c62 <NOROM_RFCRTrim+0x92>
    3c34:	2902      	cmp	r1, #2
    3c36:	d11f      	bne.n	3c78 <NOROM_RFCRTrim+0xa8>
    3c38:	e007      	b.n	3c4a <NOROM_RFCRTrim+0x7a>
    3c3a:	290f      	cmp	r1, #15
    3c3c:	d015      	beq.n	3c6a <NOROM_RFCRTrim+0x9a>
    3c3e:	291e      	cmp	r1, #30
    3c40:	d015      	beq.n	3c6e <NOROM_RFCRTrim+0x9e>
    3c42:	290c      	cmp	r1, #12
    3c44:	d118      	bne.n	3c78 <NOROM_RFCRTrim+0xa8>
    3c46:	4b20      	ldr	r3, [pc, #128]	; (3cc8 <NOROM_RFCRTrim+0xf8>)
    3c48:	e012      	b.n	3c70 <NOROM_RFCRTrim+0xa0>
    3c4a:	4b20      	ldr	r3, [pc, #128]	; (3ccc <NOROM_RFCRTrim+0xfc>)
    3c4c:	681b      	ldr	r3, [r3, #0]
    3c4e:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3c52:	2b0f      	cmp	r3, #15
    3c54:	d12a      	bne.n	3cac <NOROM_RFCRTrim+0xdc>
    3c56:	e023      	b.n	3ca0 <NOROM_RFCRTrim+0xd0>
    3c58:	4b1d      	ldr	r3, [pc, #116]	; (3cd0 <NOROM_RFCRTrim+0x100>)
    3c5a:	681b      	ldr	r3, [r3, #0]
    3c5c:	f3c3 2303 	ubfx	r3, r3, #8, #4
    3c60:	e02c      	b.n	3cbc <NOROM_RFCRTrim+0xec>
    3c62:	4b1c      	ldr	r3, [pc, #112]	; (3cd4 <NOROM_RFCRTrim+0x104>)
    3c64:	e004      	b.n	3c70 <NOROM_RFCRTrim+0xa0>
    3c66:	4b1c      	ldr	r3, [pc, #112]	; (3cd8 <NOROM_RFCRTrim+0x108>)
    3c68:	e002      	b.n	3c70 <NOROM_RFCRTrim+0xa0>
    3c6a:	4b1c      	ldr	r3, [pc, #112]	; (3cdc <NOROM_RFCRTrim+0x10c>)
    3c6c:	e000      	b.n	3c70 <NOROM_RFCRTrim+0xa0>
    3c6e:	4b1c      	ldr	r3, [pc, #112]	; (3ce0 <NOROM_RFCRTrim+0x110>)
    3c70:	681b      	ldr	r3, [r3, #0]
    3c72:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3c76:	e021      	b.n	3cbc <NOROM_RFCRTrim+0xec>
    3c78:	4b14      	ldr	r3, [pc, #80]	; (3ccc <NOROM_RFCRTrim+0xfc>)
    3c7a:	681b      	ldr	r3, [r3, #0]
    3c7c:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3c80:	2b0f      	cmp	r3, #15
    3c82:	d113      	bne.n	3cac <NOROM_RFCRTrim+0xdc>
    3c84:	3905      	subs	r1, #5
    3c86:	2919      	cmp	r1, #25
    3c88:	d80a      	bhi.n	3ca0 <NOROM_RFCRTrim+0xd0>
    3c8a:	2301      	movs	r3, #1
    3c8c:	fa03 f101 	lsl.w	r1, r3, r1
    3c90:	4b14      	ldr	r3, [pc, #80]	; (3ce4 <NOROM_RFCRTrim+0x114>)
    3c92:	400b      	ands	r3, r1
    3c94:	b123      	cbz	r3, 3ca0 <NOROM_RFCRTrim+0xd0>
    3c96:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3c9a:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    3c9e:	e003      	b.n	3ca8 <NOROM_RFCRTrim+0xd8>
    3ca0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3ca4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    3ca8:	6002      	str	r2, [r0, #0]
    3caa:	bd70      	pop	{r4, r5, r6, pc}
    3cac:	429c      	cmp	r4, r3
    3cae:	d209      	bcs.n	3cc4 <NOROM_RFCRTrim+0xf4>
    3cb0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3cb4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    3cb8:	6003      	str	r3, [r0, #0]
    3cba:	bd70      	pop	{r4, r5, r6, pc}
    3cbc:	2b0f      	cmp	r3, #15
    3cbe:	d1f5      	bne.n	3cac <NOROM_RFCRTrim+0xdc>
    3cc0:	3905      	subs	r1, #5
    3cc2:	e7e2      	b.n	3c8a <NOROM_RFCRTrim+0xba>
    3cc4:	bd70      	pop	{r4, r5, r6, pc}
    3cc6:	bf00      	nop
    3cc8:	50001100 	andpl	r1, r0, r0, lsl #2
    3ccc:	50001380 	andpl	r1, r0, r0, lsl #7
    3cd0:	50001320 	andpl	r1, r0, r0, lsr #6
    3cd4:	500010f8 	strdpl	r1, [r0], -r8
    3cd8:	500010fc 	strdpl	r1, [r0], -ip
    3cdc:	50001104 	andpl	r1, r0, r4, lsl #2
    3ce0:	50001108 	andpl	r1, r0, r8, lsl #2
    3ce4:	02000421 	andeq	r0, r0, #553648128	; 0x21000000

00003ce8 <NOROM_RFCRfTrimSet>:
    3ce8:	4603      	mov	r3, r0
    3cea:	b530      	push	{r4, r5, lr}
    3cec:	4c05      	ldr	r4, [pc, #20]	; (3d04 <NOROM_RFCRfTrimSet+0x1c>)
    3cee:	f100 0510 	add.w	r5, r0, #16
    3cf2:	4622      	mov	r2, r4
    3cf4:	6818      	ldr	r0, [r3, #0]
    3cf6:	6859      	ldr	r1, [r3, #4]
    3cf8:	3308      	adds	r3, #8
    3cfa:	c203      	stmia	r2!, {r0, r1}
    3cfc:	42ab      	cmp	r3, r5
    3cfe:	4614      	mov	r4, r2
    3d00:	d1f7      	bne.n	3cf2 <NOROM_RFCRfTrimSet+0xa>
    3d02:	bd30      	pop	{r4, r5, pc}
    3d04:	21000018 	tstcs	r0, r8, lsl r0

00003d08 <NOROM_RFCAdi3VcoLdoVoltageMode>:
    3d08:	4b04      	ldr	r3, [pc, #16]	; (3d1c <NOROM_RFCAdi3VcoLdoVoltageMode+0x14>)
    3d0a:	b128      	cbz	r0, 3d18 <NOROM_RFCAdi3VcoLdoVoltageMode+0x10>
    3d0c:	4a04      	ldr	r2, [pc, #16]	; (3d20 <NOROM_RFCAdi3VcoLdoVoltageMode+0x18>)
    3d0e:	2100      	movs	r1, #0
    3d10:	7011      	strb	r1, [r2, #0]
    3d12:	2220      	movs	r2, #32
    3d14:	701a      	strb	r2, [r3, #0]
    3d16:	4770      	bx	lr
    3d18:	7018      	strb	r0, [r3, #0]
    3d1a:	4770      	bx	lr
    3d1c:	40086202 	andmi	r6, r8, r2, lsl #4
    3d20:	40086200 	andmi	r6, r8, r0, lsl #4

00003d24 <TrimAfterColdResetWakeupFromShutDown>:
    3d24:	b538      	push	{r3, r4, r5, lr}
    3d26:	4605      	mov	r5, r0
    3d28:	4b26      	ldr	r3, [pc, #152]	; (3dc4 <TrimAfterColdResetWakeupFromShutDown+0xa0>)
    3d2a:	2201      	movs	r2, #1
    3d2c:	601a      	str	r2, [r3, #0]
    3d2e:	4b26      	ldr	r3, [pc, #152]	; (3dc8 <TrimAfterColdResetWakeupFromShutDown+0xa4>)
    3d30:	681b      	ldr	r3, [r3, #0]
    3d32:	2b00      	cmp	r3, #0
    3d34:	d0fb      	beq.n	3d2e <TrimAfterColdResetWakeupFromShutDown+0xa>
    3d36:	4b25      	ldr	r3, [pc, #148]	; (3dcc <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    3d38:	22c0      	movs	r2, #192	; 0xc0
    3d3a:	601a      	str	r2, [r3, #0]
    3d3c:	4b24      	ldr	r3, [pc, #144]	; (3dd0 <TrimAfterColdResetWakeupFromShutDown+0xac>)
    3d3e:	681b      	ldr	r3, [r3, #0]
    3d40:	079b      	lsls	r3, r3, #30
    3d42:	bf5f      	itttt	pl
    3d44:	4b23      	ldrpl	r3, [pc, #140]	; (3dd4 <TrimAfterColdResetWakeupFromShutDown+0xb0>)
    3d46:	4a24      	ldrpl	r2, [pc, #144]	; (3dd8 <TrimAfterColdResetWakeupFromShutDown+0xb4>)
    3d48:	681b      	ldrpl	r3, [r3, #0]
    3d4a:	f3c3 4303 	ubfxpl	r3, r3, #16, #4
    3d4e:	bf5c      	itt	pl
    3d50:	f043 03f0 	orrpl.w	r3, r3, #240	; 0xf0
    3d54:	7013      	strbpl	r3, [r2, #0]
    3d56:	4b21      	ldr	r3, [pc, #132]	; (3ddc <TrimAfterColdResetWakeupFromShutDown+0xb8>)
    3d58:	2200      	movs	r2, #0
    3d5a:	601a      	str	r2, [r3, #0]
    3d5c:	4b20      	ldr	r3, [pc, #128]	; (3de0 <TrimAfterColdResetWakeupFromShutDown+0xbc>)
    3d5e:	681c      	ldr	r4, [r3, #0]
    3d60:	4620      	mov	r0, r4
    3d62:	f000 f8d9 	bl	3f18 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    3d66:	4628      	mov	r0, r5
    3d68:	4621      	mov	r1, r4
    3d6a:	f000 fa0d 	bl	4188 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    3d6e:	f240 221d 	movw	r2, #541	; 0x21d
    3d72:	4b1c      	ldr	r3, [pc, #112]	; (3de4 <TrimAfterColdResetWakeupFromShutDown+0xc0>)
    3d74:	681b      	ldr	r3, [r3, #0]
    3d76:	b29b      	uxth	r3, r3
    3d78:	4293      	cmp	r3, r2
    3d7a:	d814      	bhi.n	3da6 <TrimAfterColdResetWakeupFromShutDown+0x82>
    3d7c:	4a1a      	ldr	r2, [pc, #104]	; (3de8 <TrimAfterColdResetWakeupFromShutDown+0xc4>)
    3d7e:	6813      	ldr	r3, [r2, #0]
    3d80:	6812      	ldr	r2, [r2, #0]
    3d82:	f3c3 6303 	ubfx	r3, r3, #24, #4
    3d86:	f3c2 4203 	ubfx	r2, r2, #16, #4
    3d8a:	b103      	cbz	r3, 3d8e <TrimAfterColdResetWakeupFromShutDown+0x6a>
    3d8c:	3b01      	subs	r3, #1
    3d8e:	1f91      	subs	r1, r2, #6
    3d90:	2901      	cmp	r1, #1
    3d92:	bf86      	itte	hi
    3d94:	3202      	addhi	r2, #2
    3d96:	f002 020f 	andhi.w	r2, r2, #15
    3d9a:	2207      	movls	r2, #7
    3d9c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    3da0:	4a12      	ldr	r2, [pc, #72]	; (3dec <TrimAfterColdResetWakeupFromShutDown+0xc8>)
    3da2:	b2db      	uxtb	r3, r3
    3da4:	7013      	strb	r3, [r2, #0]
    3da6:	4620      	mov	r0, r4
    3da8:	f000 fabc 	bl	4324 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    3dac:	4b10      	ldr	r3, [pc, #64]	; (3df0 <TrimAfterColdResetWakeupFromShutDown+0xcc>)
    3dae:	2002      	movs	r0, #2
    3db0:	681b      	ldr	r3, [r3, #0]
    3db2:	68db      	ldr	r3, [r3, #12]
    3db4:	4798      	blx	r3
    3db6:	4b05      	ldr	r3, [pc, #20]	; (3dcc <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    3db8:	2240      	movs	r2, #64	; 0x40
    3dba:	601a      	str	r2, [r3, #0]
    3dbc:	4b0d      	ldr	r3, [pc, #52]	; (3df4 <TrimAfterColdResetWakeupFromShutDown+0xd0>)
    3dbe:	2201      	movs	r2, #1
    3dc0:	601a      	str	r2, [r3, #0]
    3dc2:	bd38      	pop	{r3, r4, r5, pc}
    3dc4:	40091010 	andmi	r1, r9, r0, lsl r0
    3dc8:	43220294 			; <UNDEFINED> instruction: 0x43220294
    3dcc:	400c6000 	andmi	r6, ip, r0
    3dd0:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    3dd4:	50003fac 	andpl	r3, r0, ip, lsr #31
    3dd8:	40086256 	andmi	r6, r8, r6, asr r2
    3ddc:	40091040 	andmi	r1, r9, r0, asr #32
    3de0:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    3de4:	50001314 	andpl	r1, r0, r4, lsl r3
    3de8:	500012bc 			; <UNDEFINED> instruction: 0x500012bc
    3dec:	40086002 	andmi	r6, r8, r2
    3df0:	100001a0 	andne	r0, r0, r0, lsr #3
    3df4:	42600494 	rsbmi	r0, r0, #148, 8	; 0x94000000

00003df8 <NOROM_SetupTrimDevice>:
    3df8:	b510      	push	{r4, lr}
    3dfa:	4b1f      	ldr	r3, [pc, #124]	; (3e78 <NOROM_SetupTrimDevice+0x80>)
    3dfc:	681c      	ldr	r4, [r3, #0]
    3dfe:	1c63      	adds	r3, r4, #1
    3e00:	bf08      	it	eq
    3e02:	2400      	moveq	r4, #0
    3e04:	f000 fcde 	bl	47c4 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    3e08:	4b1c      	ldr	r3, [pc, #112]	; (3e7c <NOROM_SetupTrimDevice+0x84>)
    3e0a:	2200      	movs	r2, #0
    3e0c:	601a      	str	r2, [r3, #0]
    3e0e:	4a1c      	ldr	r2, [pc, #112]	; (3e80 <NOROM_SetupTrimDevice+0x88>)
    3e10:	2301      	movs	r3, #1
    3e12:	6013      	str	r3, [r2, #0]
    3e14:	4a1b      	ldr	r2, [pc, #108]	; (3e84 <NOROM_SetupTrimDevice+0x8c>)
    3e16:	6013      	str	r3, [r2, #0]
    3e18:	f000 fa3e 	bl	4298 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>
    3e1c:	4b1a      	ldr	r3, [pc, #104]	; (3e88 <NOROM_SetupTrimDevice+0x90>)
    3e1e:	681b      	ldr	r3, [r3, #0]
    3e20:	b123      	cbz	r3, 3e2c <NOROM_SetupTrimDevice+0x34>
    3e22:	4b1a      	ldr	r3, [pc, #104]	; (3e8c <NOROM_SetupTrimDevice+0x94>)
    3e24:	4620      	mov	r0, r4
    3e26:	681b      	ldr	r3, [r3, #0]
    3e28:	f7ff ff7c 	bl	3d24 <TrimAfterColdResetWakeupFromShutDown>
    3e2c:	4b18      	ldr	r3, [pc, #96]	; (3e90 <NOROM_SetupTrimDevice+0x98>)
    3e2e:	2200      	movs	r2, #0
    3e30:	601a      	str	r2, [r3, #0]
    3e32:	4a18      	ldr	r2, [pc, #96]	; (3e94 <NOROM_SetupTrimDevice+0x9c>)
    3e34:	6813      	ldr	r3, [r2, #0]
    3e36:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
    3e3a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3e3e:	f043 739c 	orr.w	r3, r3, #20447232	; 0x1380000
    3e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3e46:	6013      	str	r3, [r2, #0]
    3e48:	f502 22bb 	add.w	r2, r2, #382976	; 0x5d800
    3e4c:	f202 72bc 	addw	r2, r2, #1980	; 0x7bc
    3e50:	6813      	ldr	r3, [r2, #0]
    3e52:	f3c3 3301 	ubfx	r3, r3, #12, #2
    3e56:	2b01      	cmp	r3, #1
    3e58:	bf01      	itttt	eq
    3e5a:	6813      	ldreq	r3, [r2, #0]
    3e5c:	f023 7340 	biceq.w	r3, r3, #50331648	; 0x3000000
    3e60:	f423 3340 	biceq.w	r3, r3, #196608	; 0x30000
    3e64:	f443 3100 	orreq.w	r1, r3, #131072	; 0x20000
    3e68:	bf04      	itt	eq
    3e6a:	6011      	streq	r1, [r2, #0]
    3e6c:	6013      	streq	r3, [r2, #0]
    3e6e:	4b0a      	ldr	r3, [pc, #40]	; (3e98 <NOROM_SetupTrimDevice+0xa0>)
    3e70:	681b      	ldr	r3, [r3, #0]
    3e72:	2b00      	cmp	r3, #0
    3e74:	d1fb      	bne.n	3e6e <NOROM_SetupTrimDevice+0x76>
    3e76:	bd10      	pop	{r4, pc}
    3e78:	5000131c 	andpl	r1, r0, ip, lsl r3
    3e7c:	42600484 	rsbmi	r0, r0, #132, 8	; 0x84000000
    3e80:	400c605c 	andmi	r6, ip, ip, asr r0
    3e84:	43042208 	movwmi	r2, #16904	; 0x4208
    3e88:	43280180 			; <UNDEFINED> instruction: 0x43280180
    3e8c:	43200100 	nopmi	{0}	; <UNPREDICTABLE>
    3e90:	4008218c 	andmi	r2, r8, ip, lsl #3
    3e94:	40032048 	andmi	r2, r3, r8, asr #32
    3e98:	4268000c 	rsbmi	r0, r8, #12

00003e9c <NOROM_SetupSetVddrLevel>:
    3e9c:	b530      	push	{r4, r5, lr}
    3e9e:	4b19      	ldr	r3, [pc, #100]	; (3f04 <NOROM_SetupSetVddrLevel+0x68>)
    3ea0:	681a      	ldr	r2, [r3, #0]
    3ea2:	4b19      	ldr	r3, [pc, #100]	; (3f08 <NOROM_SetupSetVddrLevel+0x6c>)
    3ea4:	f3c2 6204 	ubfx	r2, r2, #24, #5
    3ea8:	781b      	ldrb	r3, [r3, #0]
    3eaa:	2a15      	cmp	r2, #21
    3eac:	f003 031f 	and.w	r3, r3, #31
    3eb0:	bf88      	it	hi
    3eb2:	3a20      	subhi	r2, #32
    3eb4:	2b15      	cmp	r3, #21
    3eb6:	bf88      	it	hi
    3eb8:	3b20      	subhi	r3, #32
    3eba:	4293      	cmp	r3, r2
    3ebc:	d020      	beq.n	3f00 <NOROM_SetupSetVddrLevel+0x64>
    3ebe:	4913      	ldr	r1, [pc, #76]	; (3f0c <NOROM_SetupSetVddrLevel+0x70>)
    3ec0:	2000      	movs	r0, #0
    3ec2:	6008      	str	r0, [r1, #0]
    3ec4:	4608      	mov	r0, r1
    3ec6:	1ad1      	subs	r1, r2, r3
    3ec8:	2902      	cmp	r1, #2
    3eca:	dc05      	bgt.n	3ed8 <NOROM_SetupSetVddrLevel+0x3c>
    3ecc:	f06f 0401 	mvn.w	r4, #1
    3ed0:	42a1      	cmp	r1, r4
    3ed2:	bfb8      	it	lt
    3ed4:	4621      	movlt	r1, r4
    3ed6:	e000      	b.n	3eda <NOROM_SetupSetVddrLevel+0x3e>
    3ed8:	2102      	movs	r1, #2
    3eda:	440b      	add	r3, r1
    3edc:	490c      	ldr	r1, [pc, #48]	; (3f10 <NOROM_SetupSetVddrLevel+0x74>)
    3ede:	4d0d      	ldr	r5, [pc, #52]	; (3f14 <NOROM_SetupSetVddrLevel+0x78>)
    3ee0:	680c      	ldr	r4, [r1, #0]
    3ee2:	f003 041f 	and.w	r4, r3, #31
    3ee6:	f444 54f8 	orr.w	r4, r4, #7936	; 0x1f00
    3eea:	802c      	strh	r4, [r5, #0]
    3eec:	4293      	cmp	r3, r2
    3eee:	f04f 0401 	mov.w	r4, #1
    3ef2:	600c      	str	r4, [r1, #0]
    3ef4:	d1e7      	bne.n	3ec6 <NOROM_SetupSetVddrLevel+0x2a>
    3ef6:	680b      	ldr	r3, [r1, #0]
    3ef8:	600c      	str	r4, [r1, #0]
    3efa:	680b      	ldr	r3, [r1, #0]
    3efc:	6004      	str	r4, [r0, #0]
    3efe:	680b      	ldr	r3, [r1, #0]
    3f00:	bd30      	pop	{r4, r5, pc}
    3f02:	bf00      	nop
    3f04:	50001388 	andpl	r1, r0, r8, lsl #7
    3f08:	40086206 	andmi	r6, r8, r6, lsl #4
    3f0c:	43200098 			; <UNDEFINED> instruction: 0x43200098
    3f10:	4009202c 	andmi	r2, r9, ip, lsr #32
    3f14:	4008626c 	andmi	r6, r8, ip, ror #4

00003f18 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>:
    3f18:	f000 7340 	and.w	r3, r0, #50331648	; 0x3000000
    3f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    3f20:	b510      	push	{r4, lr}
    3f22:	4604      	mov	r4, r0
    3f24:	d10f      	bne.n	3f46 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x2e>
    3f26:	f64f 01d8 	movw	r1, #63704	; 0xf8d8
    3f2a:	4a1e      	ldr	r2, [pc, #120]	; (3fa4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>)
    3f2c:	2380      	movs	r3, #128	; 0x80
    3f2e:	7013      	strb	r3, [r2, #0]
    3f30:	f8a2 1041 	strh.w	r1, [r2, #65]	; 0x41
    3f34:	f802 3c10 	strb.w	r3, [r2, #-16]
    3f38:	f7ff ffb0 	bl	3e9c <NOROM_SetupSetVddrLevel>
    3f3c:	4b1a      	ldr	r3, [pc, #104]	; (3fa8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>)
    3f3e:	681b      	ldr	r3, [r3, #0]
    3f40:	f3c3 2304 	ubfx	r3, r3, #8, #5
    3f44:	e003      	b.n	3f4e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x36>
    3f46:	4b19      	ldr	r3, [pc, #100]	; (3fac <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>)
    3f48:	681b      	ldr	r3, [r3, #0]
    3f4a:	f3c3 6304 	ubfx	r3, r3, #24, #5
    3f4e:	2b15      	cmp	r3, #21
    3f50:	bf88      	it	hi
    3f52:	3b20      	subhi	r3, #32
    3f54:	eb03 7324 	add.w	r3, r3, r4, asr #28
    3f58:	3301      	adds	r3, #1
    3f5a:	2b15      	cmp	r3, #21
    3f5c:	dc05      	bgt.n	3f6a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x52>
    3f5e:	f06f 0209 	mvn.w	r2, #9
    3f62:	4293      	cmp	r3, r2
    3f64:	bfb8      	it	lt
    3f66:	4613      	movlt	r3, r2
    3f68:	e000      	b.n	3f6c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    3f6a:	2315      	movs	r3, #21
    3f6c:	4a10      	ldr	r2, [pc, #64]	; (3fb0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>)
    3f6e:	f003 031f 	and.w	r3, r3, #31
    3f72:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
    3f76:	8013      	strh	r3, [r2, #0]
    3f78:	4b0e      	ldr	r3, [pc, #56]	; (3fb4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x9c>)
    3f7a:	681b      	ldr	r3, [r3, #0]
    3f7c:	f013 0302 	ands.w	r3, r3, #2
    3f80:	bf0a      	itet	eq
    3f82:	4a0d      	ldreq	r2, [pc, #52]	; (3fb8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa0>)
    3f84:	f044 6440 	orrne.w	r4, r4, #201326592	; 0xc000000
    3f88:	6013      	streq	r3, [r2, #0]
    3f8a:	f3c4 63c0 	ubfx	r3, r4, #27, #1
    3f8e:	4a0b      	ldr	r2, [pc, #44]	; (3fbc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa4>)
    3f90:	f083 0301 	eor.w	r3, r3, #1
    3f94:	6013      	str	r3, [r2, #0]
    3f96:	f3c4 6480 	ubfx	r4, r4, #26, #1
    3f9a:	4b09      	ldr	r3, [pc, #36]	; (3fc0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>)
    3f9c:	f084 0401 	eor.w	r4, r4, #1
    3fa0:	601c      	str	r4, [r3, #0]
    3fa2:	bd10      	pop	{r4, pc}
    3fa4:	40086225 	andmi	r6, r8, r5, lsr #4
    3fa8:	50001388 	andpl	r1, r0, r8, lsl #7
    3fac:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    3fb0:	4008626e 	andmi	r6, r8, lr, ror #4
    3fb4:	40090000 	andmi	r0, r9, r0
    3fb8:	432a0494 			; <UNDEFINED> instruction: 0x432a0494
    3fbc:	43200000 	nopmi	{0}	; <UNPREDICTABLE>
    3fc0:	43200008 			; <UNDEFINED> instruction: 0x43200008

00003fc4 <NOROM_SetupGetTrimForAnabypassValue1>:
    3fc4:	4b15      	ldr	r3, [pc, #84]	; (401c <NOROM_SetupGetTrimForAnabypassValue1+0x58>)
    3fc6:	0381      	lsls	r1, r0, #14
    3fc8:	681b      	ldr	r3, [r3, #0]
    3fca:	f3c3 6283 	ubfx	r2, r3, #26, #4
    3fce:	f3c3 238f 	ubfx	r3, r3, #10, #16
    3fd2:	d41f      	bmi.n	4014 <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    3fd4:	f340 2007 	sbfx	r0, r0, #8, #8
    3fd8:	2800      	cmp	r0, #0
    3fda:	da19      	bge.n	4010 <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    3fdc:	085b      	lsrs	r3, r3, #1
    3fde:	d105      	bne.n	3fec <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    3fe0:	0852      	lsrs	r2, r2, #1
    3fe2:	bf06      	itte	eq
    3fe4:	2301      	moveq	r3, #1
    3fe6:	461a      	moveq	r2, r3
    3fe8:	f64f 73ff 	movwne	r3, #65535	; 0xffff
    3fec:	3001      	adds	r0, #1
    3fee:	e7f3      	b.n	3fd8 <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    3ff0:	005b      	lsls	r3, r3, #1
    3ff2:	f043 0301 	orr.w	r3, r3, #1
    3ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    3ffa:	d308      	bcc.n	400e <NOROM_SetupGetTrimForAnabypassValue1+0x4a>
    3ffc:	0052      	lsls	r2, r2, #1
    3ffe:	f042 0201 	orr.w	r2, r2, #1
    4002:	2a0f      	cmp	r2, #15
    4004:	bf86      	itte	hi
    4006:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
    400a:	220f      	movhi	r2, #15
    400c:	2301      	movls	r3, #1
    400e:	3801      	subs	r0, #1
    4010:	2800      	cmp	r0, #0
    4012:	d1ed      	bne.n	3ff0 <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    4014:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    4018:	4770      	bx	lr
    401a:	bf00      	nop
    401c:	50001350 	andpl	r1, r0, r0, asr r3

00004020 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>:
    4020:	4a04      	ldr	r2, [pc, #16]	; (4034 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>)
    4022:	6813      	ldr	r3, [r2, #0]
    4024:	6810      	ldr	r0, [r2, #0]
    4026:	f3c3 0387 	ubfx	r3, r3, #2, #8
    402a:	f000 0003 	and.w	r0, r0, #3
    402e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    4032:	4770      	bx	lr
    4034:	50001350 	andpl	r1, r0, r0, asr r3

00004038 <NOROM_SetupGetTrimForAmpcompTh2>:
    4038:	4b02      	ldr	r3, [pc, #8]	; (4044 <NOROM_SetupGetTrimForAmpcompTh2+0xc>)
    403a:	6818      	ldr	r0, [r3, #0]
    403c:	f000 30fc 	and.w	r0, r0, #4244438268	; 0xfcfcfcfc
    4040:	4770      	bx	lr
    4042:	bf00      	nop
    4044:	50001374 	andpl	r1, r0, r4, ror r3

00004048 <NOROM_SetupGetTrimForAmpcompTh1>:
    4048:	4b03      	ldr	r3, [pc, #12]	; (4058 <NOROM_SetupGetTrimForAmpcompTh1+0x10>)
    404a:	6818      	ldr	r0, [r3, #0]
    404c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4050:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    4054:	4770      	bx	lr
    4056:	bf00      	nop
    4058:	50001370 	andpl	r1, r0, r0, ror r3

0000405c <NOROM_SetupGetTrimForAmpcompCtrl>:
    405c:	b570      	push	{r4, r5, r6, lr}
    405e:	4b15      	ldr	r3, [pc, #84]	; (40b4 <NOROM_SetupGetTrimForAmpcompCtrl+0x58>)
    4060:	4915      	ldr	r1, [pc, #84]	; (40b8 <NOROM_SetupGetTrimForAmpcompCtrl+0x5c>)
    4062:	681c      	ldr	r4, [r3, #0]
    4064:	6809      	ldr	r1, [r1, #0]
    4066:	f3c4 5203 	ubfx	r2, r4, #20, #4
    406a:	f011 0501 	ands.w	r5, r1, #1
    406e:	f3c4 4303 	ubfx	r3, r4, #16, #4
    4072:	d113      	bne.n	409c <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    4074:	4911      	ldr	r1, [pc, #68]	; (40bc <NOROM_SetupGetTrimForAmpcompCtrl+0x60>)
    4076:	6809      	ldr	r1, [r1, #0]
    4078:	f341 2603 	sbfx	r6, r1, #8, #4
    407c:	18b2      	adds	r2, r6, r2
    407e:	d403      	bmi.n	4088 <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    4080:	2a0f      	cmp	r2, #15
    4082:	bfa8      	it	ge
    4084:	220f      	movge	r2, #15
    4086:	e000      	b.n	408a <NOROM_SetupGetTrimForAmpcompCtrl+0x2e>
    4088:	462a      	mov	r2, r5
    408a:	f341 3103 	sbfx	r1, r1, #12, #4
    408e:	18cb      	adds	r3, r1, r3
    4090:	d403      	bmi.n	409a <NOROM_SetupGetTrimForAmpcompCtrl+0x3e>
    4092:	2b0f      	cmp	r3, #15
    4094:	bfa8      	it	ge
    4096:	230f      	movge	r3, #15
    4098:	e000      	b.n	409c <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    409a:	2300      	movs	r3, #0
    409c:	b2a1      	uxth	r1, r4
    409e:	2821      	cmp	r0, #33	; 0x21
    40a0:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    40a4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    40a8:	bf84      	itt	hi
    40aa:	f004 4480 	andhi.w	r4, r4, #1073741824	; 0x40000000
    40ae:	4323      	orrhi	r3, r4
    40b0:	4618      	mov	r0, r3
    40b2:	bd70      	pop	{r4, r5, r6, pc}
    40b4:	50001378 	andpl	r1, r0, r8, ror r3
    40b8:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    40bc:	50003fac 	andpl	r3, r0, ip, lsr #31

000040c0 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>:
    40c0:	281f      	cmp	r0, #31
    40c2:	bf83      	ittte	hi
    40c4:	4b02      	ldrhi	r3, [pc, #8]	; (40d0 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>)
    40c6:	6818      	ldrhi	r0, [r3, #0]
    40c8:	f3c0 5001 	ubfxhi	r0, r0, #20, #2
    40cc:	2000      	movls	r0, #0
    40ce:	4770      	bx	lr
    40d0:	50001398 	mulpl	r0, r8, r3

000040d4 <NOROM_SetupGetTrimForAdcShModeEn>:
    40d4:	2821      	cmp	r0, #33	; 0x21
    40d6:	bf83      	ittte	hi
    40d8:	4b02      	ldrhi	r3, [pc, #8]	; (40e4 <NOROM_SetupGetTrimForAdcShModeEn+0x10>)
    40da:	6818      	ldrhi	r0, [r3, #0]
    40dc:	f3c0 7000 	ubfxhi	r0, r0, #28, #1
    40e0:	2001      	movls	r0, #1
    40e2:	4770      	bx	lr
    40e4:	5000138c 	andpl	r1, r0, ip, lsl #7

000040e8 <NOROM_SetupGetTrimForAdcShVbufEn>:
    40e8:	2821      	cmp	r0, #33	; 0x21
    40ea:	bf83      	ittte	hi
    40ec:	4b02      	ldrhi	r3, [pc, #8]	; (40f8 <NOROM_SetupGetTrimForAdcShVbufEn+0x10>)
    40ee:	6818      	ldrhi	r0, [r3, #0]
    40f0:	f3c0 7040 	ubfxhi	r0, r0, #29, #1
    40f4:	2001      	movls	r0, #1
    40f6:	4770      	bx	lr
    40f8:	5000138c 	andpl	r1, r0, ip, lsl #7

000040fc <NOROM_SetupGetTrimForXoscHfCtl>:
    40fc:	281f      	cmp	r0, #31
    40fe:	bf81      	itttt	hi
    4100:	4b07      	ldrhi	r3, [pc, #28]	; (4120 <NOROM_SetupGetTrimForXoscHfCtl+0x24>)
    4102:	681b      	ldrhi	r3, [r3, #0]
    4104:	f3c3 6002 	ubfxhi	r0, r3, #24, #3
    4108:	0080      	lslhi	r0, r0, #2
    410a:	bf81      	itttt	hi
    410c:	f3c3 62c1 	ubfxhi	r2, r3, #27, #2
    4110:	ea40 2002 	orrhi.w	r0, r0, r2, lsl #8
    4114:	f3c3 5381 	ubfxhi	r3, r3, #22, #2
    4118:	4318      	orrhi	r0, r3
    411a:	bf98      	it	ls
    411c:	2000      	movls	r0, #0
    411e:	4770      	bx	lr
    4120:	50001398 	mulpl	r0, r8, r3

00004124 <NOROM_SetupGetTrimForXoscHfFastStart>:
    4124:	4b02      	ldr	r3, [pc, #8]	; (4130 <NOROM_SetupGetTrimForXoscHfFastStart+0xc>)
    4126:	6818      	ldr	r0, [r3, #0]
    4128:	f3c0 40c1 	ubfx	r0, r0, #19, #2
    412c:	4770      	bx	lr
    412e:	bf00      	nop
    4130:	5000138c 	andpl	r1, r0, ip, lsl #7

00004134 <NOROM_SetupGetTrimForRadcExtCfg>:
    4134:	281f      	cmp	r0, #31
    4136:	bf81      	itttt	hi
    4138:	4b07      	ldrhi	r3, [pc, #28]	; (4158 <NOROM_SetupGetTrimForRadcExtCfg+0x24>)
    413a:	681b      	ldrhi	r3, [r3, #0]
    413c:	f3c3 1005 	ubfxhi	r0, r3, #4, #6
    4140:	f3c3 2289 	ubfxhi	r2, r3, #10, #10
    4144:	bf81      	itttt	hi
    4146:	0400      	lslhi	r0, r0, #16
    4148:	031b      	lslhi	r3, r3, #12
    414a:	ea40 5082 	orrhi.w	r0, r0, r2, lsl #22
    414e:	b29b      	uxthhi	r3, r3
    4150:	bf8c      	ite	hi
    4152:	4318      	orrhi	r0, r3
    4154:	4801      	ldrls	r0, [pc, #4]	; (415c <NOROM_SetupGetTrimForRadcExtCfg+0x28>)
    4156:	4770      	bx	lr
    4158:	50001398 	mulpl	r0, r8, r3
    415c:	403f8000 	eorsmi	r8, pc, r0

00004160 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>:
    4160:	2821      	cmp	r0, #33	; 0x21
    4162:	bf83      	ittte	hi
    4164:	4b02      	ldrhi	r3, [pc, #8]	; (4170 <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>)
    4166:	6818      	ldrhi	r0, [r3, #0]
    4168:	f3c0 60c0 	ubfxhi	r0, r0, #27, #1
    416c:	2000      	movls	r0, #0
    416e:	4770      	bx	lr
    4170:	5000138c 	andpl	r1, r0, ip, lsl #7

00004174 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>:
    4174:	2821      	cmp	r0, #33	; 0x21
    4176:	bf83      	ittte	hi
    4178:	4b02      	ldrhi	r3, [pc, #8]	; (4184 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>)
    417a:	6818      	ldrhi	r0, [r3, #0]
    417c:	f3c0 5045 	ubfxhi	r0, r0, #21, #6
    4180:	2000      	movls	r0, #0
    4182:	4770      	bx	lr
    4184:	5000138c 	andpl	r1, r0, ip, lsl #7

00004188 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>:
    4188:	b573      	push	{r0, r1, r4, r5, r6, lr}
    418a:	4605      	mov	r5, r0
    418c:	4608      	mov	r0, r1
    418e:	f7ff ff19 	bl	3fc4 <NOROM_SetupGetTrimForAnabypassValue1>
    4192:	4c39      	ldr	r4, [pc, #228]	; (4278 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>)
    4194:	4602      	mov	r2, r0
    4196:	2118      	movs	r1, #24
    4198:	4620      	mov	r0, r4
    419a:	f000 fb33 	bl	4804 <NOROM_DDI32RegWrite>
    419e:	f7ff ff3f 	bl	4020 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    41a2:	4b36      	ldr	r3, [pc, #216]	; (427c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>)
    41a4:	b280      	uxth	r0, r0
    41a6:	681b      	ldr	r3, [r3, #0]
    41a8:	9000      	str	r0, [sp, #0]
    41aa:	685e      	ldr	r6, [r3, #4]
    41ac:	4620      	mov	r0, r4
    41ae:	212c      	movs	r1, #44	; 0x2c
    41b0:	f240 32ff 	movw	r2, #1023	; 0x3ff
    41b4:	2300      	movs	r3, #0
    41b6:	47b0      	blx	r6
    41b8:	4b31      	ldr	r3, [pc, #196]	; (4280 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf8>)
    41ba:	4620      	mov	r0, r4
    41bc:	681a      	ldr	r2, [r3, #0]
    41be:	211c      	movs	r1, #28
    41c0:	f3c2 020d 	ubfx	r2, r2, #0, #14
    41c4:	f000 fb1e 	bl	4804 <NOROM_DDI32RegWrite>
    41c8:	f7ff ff36 	bl	4038 <NOROM_SetupGetTrimForAmpcompTh2>
    41cc:	2114      	movs	r1, #20
    41ce:	4602      	mov	r2, r0
    41d0:	4620      	mov	r0, r4
    41d2:	f000 fb17 	bl	4804 <NOROM_DDI32RegWrite>
    41d6:	f7ff ff37 	bl	4048 <NOROM_SetupGetTrimForAmpcompTh1>
    41da:	2110      	movs	r1, #16
    41dc:	4602      	mov	r2, r0
    41de:	4620      	mov	r0, r4
    41e0:	f000 fb10 	bl	4804 <NOROM_DDI32RegWrite>
    41e4:	4628      	mov	r0, r5
    41e6:	f7ff ff39 	bl	405c <NOROM_SetupGetTrimForAmpcompCtrl>
    41ea:	210c      	movs	r1, #12
    41ec:	4602      	mov	r2, r0
    41ee:	4620      	mov	r0, r4
    41f0:	f000 fb08 	bl	4804 <NOROM_DDI32RegWrite>
    41f4:	4628      	mov	r0, r5
    41f6:	f7ff ff6d 	bl	40d4 <NOROM_SetupGetTrimForAdcShModeEn>
    41fa:	0040      	lsls	r0, r0, #1
    41fc:	4e21      	ldr	r6, [pc, #132]	; (4284 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>)
    41fe:	f040 0020 	orr.w	r0, r0, #32
    4202:	b2c0      	uxtb	r0, r0
    4204:	7030      	strb	r0, [r6, #0]
    4206:	4628      	mov	r0, r5
    4208:	f7ff ff6e 	bl	40e8 <NOROM_SetupGetTrimForAdcShVbufEn>
    420c:	f040 0010 	orr.w	r0, r0, #16
    4210:	b2c0      	uxtb	r0, r0
    4212:	7030      	strb	r0, [r6, #0]
    4214:	4628      	mov	r0, r5
    4216:	f7ff ff71 	bl	40fc <NOROM_SetupGetTrimForXoscHfCtl>
    421a:	2128      	movs	r1, #40	; 0x28
    421c:	4602      	mov	r2, r0
    421e:	4620      	mov	r0, r4
    4220:	f000 faf0 	bl	4804 <NOROM_DDI32RegWrite>
    4224:	4628      	mov	r0, r5
    4226:	f7ff ff4b 	bl	40c0 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>
    422a:	0040      	lsls	r0, r0, #1
    422c:	4b16      	ldr	r3, [pc, #88]	; (4288 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x100>)
    422e:	f040 0060 	orr.w	r0, r0, #96	; 0x60
    4232:	b2c0      	uxtb	r0, r0
    4234:	7018      	strb	r0, [r3, #0]
    4236:	4628      	mov	r0, r5
    4238:	f7ff ff92 	bl	4160 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>
    423c:	00c0      	lsls	r0, r0, #3
    423e:	4b13      	ldr	r3, [pc, #76]	; (428c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>)
    4240:	f060 007f 	orn	r0, r0, #127	; 0x7f
    4244:	b2c0      	uxtb	r0, r0
    4246:	7018      	strb	r0, [r3, #0]
    4248:	4628      	mov	r0, r5
    424a:	f7ff ff93 	bl	4174 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    424e:	ea6f 6000 	mvn.w	r0, r0, lsl #24
    4252:	ea6f 5090 	mvn.w	r0, r0, lsr #22
    4256:	4b0e      	ldr	r3, [pc, #56]	; (4290 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>)
    4258:	b280      	uxth	r0, r0
    425a:	8018      	strh	r0, [r3, #0]
    425c:	4628      	mov	r0, r5
    425e:	f7ff ff69 	bl	4134 <NOROM_SetupGetTrimForRadcExtCfg>
    4262:	2108      	movs	r1, #8
    4264:	4602      	mov	r2, r0
    4266:	4620      	mov	r0, r4
    4268:	f000 facc 	bl	4804 <NOROM_DDI32RegWrite>
    426c:	4b09      	ldr	r3, [pc, #36]	; (4294 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10c>)
    426e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    4272:	601a      	str	r2, [r3, #0]
    4274:	b002      	add	sp, #8
    4276:	bd70      	pop	{r4, r5, r6, pc}
    4278:	400ca000 	andmi	sl, ip, r0
    427c:	100001a4 	andne	r0, r0, r4, lsr #3
    4280:	5000137c 	andpl	r1, r0, ip, ror r3
    4284:	400ca149 	andmi	sl, ip, r9, asr #2
    4288:	400ca14c 	andmi	sl, ip, ip, asr #2
    428c:	400ca141 	andmi	sl, ip, r1, asr #2
    4290:	400ca1dc 	ldrdmi	sl, [ip], -ip
    4294:	400ca040 	andmi	sl, ip, r0, asr #32

00004298 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>:
    4298:	b530      	push	{r4, r5, lr}
    429a:	4b14      	ldr	r3, [pc, #80]	; (42ec <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>)
    429c:	681b      	ldr	r3, [r3, #0]
    429e:	2b00      	cmp	r3, #0
    42a0:	d1fb      	bne.n	429a <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2>
    42a2:	4a13      	ldr	r2, [pc, #76]	; (42f0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x58>)
    42a4:	4913      	ldr	r1, [pc, #76]	; (42f4 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>)
    42a6:	6813      	ldr	r3, [r2, #0]
    42a8:	6809      	ldr	r1, [r1, #0]
    42aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    42ae:	f023 0307 	bic.w	r3, r3, #7
    42b2:	f011 0f04 	tst.w	r1, #4
    42b6:	4614      	mov	r4, r2
    42b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    42bc:	d003      	beq.n	42c6 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2e>
    42be:	f043 0305 	orr.w	r3, r3, #5
    42c2:	6013      	str	r3, [r2, #0]
    42c4:	bd30      	pop	{r4, r5, pc}
    42c6:	490c      	ldr	r1, [pc, #48]	; (42f8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>)
    42c8:	f043 0004 	orr.w	r0, r3, #4
    42cc:	680d      	ldr	r5, [r1, #0]
    42ce:	07ad      	lsls	r5, r5, #30
    42d0:	d009      	beq.n	42e6 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x4e>
    42d2:	f043 0307 	orr.w	r3, r3, #7
    42d6:	6013      	str	r3, [r2, #0]
    42d8:	680b      	ldr	r3, [r1, #0]
    42da:	f003 0303 	and.w	r3, r3, #3
    42de:	2b03      	cmp	r3, #3
    42e0:	d1fa      	bne.n	42d8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x40>
    42e2:	6020      	str	r0, [r4, #0]
    42e4:	bd30      	pop	{r4, r5, pc}
    42e6:	6010      	str	r0, [r2, #0]
    42e8:	bd30      	pop	{r4, r5, pc}
    42ea:	bf00      	nop
    42ec:	4268000c 	rsbmi	r0, r8, #12
    42f0:	40034004 	andmi	r4, r3, r4
    42f4:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    42f8:	40034000 	andmi	r4, r3, r0

000042fc <NOROM_SetupSetAonRtcSubSecInc>:
    42fc:	4b07      	ldr	r3, [pc, #28]	; (431c <NOROM_SetupSetAonRtcSubSecInc+0x20>)
    42fe:	b282      	uxth	r2, r0
    4300:	f3c0 4007 	ubfx	r0, r0, #16, #8
    4304:	601a      	str	r2, [r3, #0]
    4306:	6058      	str	r0, [r3, #4]
    4308:	2201      	movs	r2, #1
    430a:	3308      	adds	r3, #8
    430c:	601a      	str	r2, [r3, #0]
    430e:	4a04      	ldr	r2, [pc, #16]	; (4320 <NOROM_SetupSetAonRtcSubSecInc+0x24>)
    4310:	6812      	ldr	r2, [r2, #0]
    4312:	2a00      	cmp	r2, #0
    4314:	d0fb      	beq.n	430e <NOROM_SetupSetAonRtcSubSecInc+0x12>
    4316:	2200      	movs	r2, #0
    4318:	601a      	str	r2, [r3, #0]
    431a:	4770      	bx	lr
    431c:	400c603c 	andmi	r6, ip, ip, lsr r0
    4320:	438c0884 	orrmi	r0, ip, #132, 16	; 0x840000

00004324 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>:
    4324:	f3c0 4381 	ubfx	r3, r0, #18, #2
    4328:	2b01      	cmp	r3, #1
    432a:	b510      	push	{r4, lr}
    432c:	4604      	mov	r4, r0
    432e:	d002      	beq.n	4336 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12>
    4330:	2b02      	cmp	r3, #2
    4332:	d02f      	beq.n	4394 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    4334:	e02a      	b.n	438c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    4336:	4b42      	ldr	r3, [pc, #264]	; (4440 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11c>)
    4338:	681b      	ldr	r3, [r3, #0]
    433a:	039a      	lsls	r2, r3, #14
    433c:	d426      	bmi.n	438c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    433e:	4a41      	ldr	r2, [pc, #260]	; (4444 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    4340:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    4344:	6011      	str	r1, [r2, #0]
    4346:	4940      	ldr	r1, [pc, #256]	; (4448 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>)
    4348:	f3c3 3003 	ubfx	r0, r3, #12, #4
    434c:	680a      	ldr	r2, [r1, #0]
    434e:	f022 028f 	bic.w	r2, r2, #143	; 0x8f
    4352:	4302      	orrs	r2, r0
    4354:	f3c3 4000 	ubfx	r0, r3, #16, #1
    4358:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
    435c:	600a      	str	r2, [r1, #0]
    435e:	f851 2c01 	ldr.w	r2, [r1, #-1]
    4362:	f3c3 2003 	ubfx	r0, r3, #8, #4
    4366:	f022 020f 	bic.w	r2, r2, #15
    436a:	4302      	orrs	r2, r0
    436c:	f851 0c01 	ldr.w	r0, [r1, #-1]
    4370:	f841 2c01 	str.w	r2, [r1, #-1]
    4374:	f851 2c02 	ldr.w	r2, [r1, #-2]
    4378:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    437c:	f022 02e7 	bic.w	r2, r2, #231	; 0xe7
    4380:	4313      	orrs	r3, r2
    4382:	f851 2c02 	ldr.w	r2, [r1, #-2]
    4386:	f841 3c02 	str.w	r3, [r1, #-2]
    438a:	e003      	b.n	4394 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    438c:	4b2d      	ldr	r3, [pc, #180]	; (4444 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    438e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4392:	601a      	str	r2, [r3, #0]
    4394:	4b2d      	ldr	r3, [pc, #180]	; (444c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x128>)
    4396:	681b      	ldr	r3, [r3, #0]
    4398:	071b      	lsls	r3, r3, #28
    439a:	bf5e      	ittt	pl
    439c:	4b2c      	ldrpl	r3, [pc, #176]	; (4450 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12c>)
    439e:	2240      	movpl	r2, #64	; 0x40
    43a0:	601a      	strpl	r2, [r3, #0]
    43a2:	4b2c      	ldr	r3, [pc, #176]	; (4454 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>)
    43a4:	f44f 7200 	mov.w	r2, #512	; 0x200
    43a8:	601a      	str	r2, [r3, #0]
    43aa:	f7ff febb 	bl	4124 <NOROM_SetupGetTrimForXoscHfFastStart>
    43ae:	4b2a      	ldr	r3, [pc, #168]	; (4458 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x134>)
    43b0:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    43b4:	b2c0      	uxtb	r0, r0
    43b6:	7018      	strb	r0, [r3, #0]
    43b8:	f3c4 5081 	ubfx	r0, r4, #22, #2
    43bc:	2801      	cmp	r0, #1
    43be:	d00b      	beq.n	43d8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb4>
    43c0:	d302      	bcc.n	43c8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    43c2:	2802      	cmp	r0, #2
    43c4:	d026      	beq.n	4414 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    43c6:	e028      	b.n	441a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf6>
    43c8:	2004      	movs	r0, #4
    43ca:	2101      	movs	r1, #1
    43cc:	f7ff fa84 	bl	38d8 <NOROM_OSCClockSourceSet>
    43d0:	4822      	ldr	r0, [pc, #136]	; (445c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x138>)
    43d2:	f7ff ff93 	bl	42fc <NOROM_SetupSetAonRtcSubSecInc>
    43d6:	e024      	b.n	4422 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfe>
    43d8:	f7ff faac 	bl	3934 <NOROM_OSCClockSourceGet>
    43dc:	4604      	mov	r4, r0
    43de:	2004      	movs	r0, #4
    43e0:	4621      	mov	r1, r4
    43e2:	f7ff fa79 	bl	38d8 <NOROM_OSCClockSourceSet>
    43e6:	2004      	movs	r0, #4
    43e8:	f7ff faa4 	bl	3934 <NOROM_OSCClockSourceGet>
    43ec:	42a0      	cmp	r0, r4
    43ee:	d1fa      	bne.n	43e6 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc2>
    43f0:	4b1b      	ldr	r3, [pc, #108]	; (4460 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x13c>)
    43f2:	681c      	ldr	r4, [r3, #0]
    43f4:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    43f8:	f7ff ff80 	bl	42fc <NOROM_SetupSetAonRtcSubSecInc>
    43fc:	4b19      	ldr	r3, [pc, #100]	; (4464 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x140>)
    43fe:	f04f 2260 	mov.w	r2, #1610637312	; 0x60006000
    4402:	681b      	ldr	r3, [r3, #0]
    4404:	0e20      	lsrs	r0, r4, #24
    4406:	681b      	ldr	r3, [r3, #0]
    4408:	2107      	movs	r1, #7
    440a:	4798      	blx	r3
    440c:	4b0d      	ldr	r3, [pc, #52]	; (4444 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    440e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4412:	601a      	str	r2, [r3, #0]
    4414:	2004      	movs	r0, #4
    4416:	2103      	movs	r1, #3
    4418:	e001      	b.n	441e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfa>
    441a:	2004      	movs	r0, #4
    441c:	2102      	movs	r1, #2
    441e:	f7ff fa5b 	bl	38d8 <NOROM_OSCClockSourceSet>
    4422:	4b11      	ldr	r3, [pc, #68]	; (4468 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>)
    4424:	4a11      	ldr	r2, [pc, #68]	; (446c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>)
    4426:	681b      	ldr	r3, [r3, #0]
    4428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    442c:	7013      	strb	r3, [r2, #0]
    442e:	f647 0218 	movw	r2, #30744	; 0x7818
    4432:	4b0f      	ldr	r3, [pc, #60]	; (4470 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x14c>)
    4434:	801a      	strh	r2, [r3, #0]
    4436:	f5a3 3364 	sub.w	r3, r3, #233472	; 0x39000
    443a:	3b44      	subs	r3, #68	; 0x44
    443c:	681b      	ldr	r3, [r3, #0]
    443e:	bd10      	pop	{r4, pc}
    4440:	5000138c 	andpl	r1, r0, ip, lsl #7
    4444:	400ca040 	andmi	sl, ip, r0, asr #32
    4448:	4008600c 	andmi	r6, r8, ip
    444c:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    4450:	400ca068 	andmi	sl, ip, r8, rrx
    4454:	400ca080 	andmi	sl, ip, r0, lsl #1
    4458:	400ca108 	andmi	sl, ip, r8, lsl #2
    445c:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    4460:	50003fa8 	andpl	r3, r0, r8, lsr #31
    4464:	100001b4 			; <UNDEFINED> instruction: 0x100001b4
    4468:	5000136c 	andpl	r1, r0, ip, ror #6
    446c:	400cb00b 	andmi	fp, ip, fp
    4470:	400cb070 	andmi	fp, ip, r0, ror r0

00004474 <NOROM_SysCtrlSetRechargeBeforePowerDown>:
    4474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4478:	4b77      	ldr	r3, [pc, #476]	; (4658 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>)
    447a:	4607      	mov	r7, r0
    447c:	681b      	ldr	r3, [r3, #0]
    447e:	4e77      	ldr	r6, [pc, #476]	; (465c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    4480:	f013 0f02 	tst.w	r3, #2
    4484:	d004      	beq.n	4490 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    4486:	2308      	movs	r3, #8
    4488:	71b3      	strb	r3, [r6, #6]
    448a:	4a75      	ldr	r2, [pc, #468]	; (4660 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>)
    448c:	4b75      	ldr	r3, [pc, #468]	; (4664 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    448e:	e0df      	b.n	4650 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    4490:	f7ff f9e6 	bl	3860 <NOROM_AONBatMonTemperatureGetDegC>
    4494:	4b74      	ldr	r3, [pc, #464]	; (4668 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f4>)
    4496:	681d      	ldr	r5, [r3, #0]
    4498:	172a      	asrs	r2, r5, #28
    449a:	02ac      	lsls	r4, r5, #10
    449c:	f102 0101 	add.w	r1, r2, #1
    44a0:	d408      	bmi.n	44b4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x40>
    44a2:	f1c0 033e 	rsb	r3, r0, #62	; 0x3e
    44a6:	10db      	asrs	r3, r3, #3
    44a8:	2b08      	cmp	r3, #8
    44aa:	bfa8      	it	ge
    44ac:	2308      	movge	r3, #8
    44ae:	4299      	cmp	r1, r3
    44b0:	bfb8      	it	lt
    44b2:	4619      	movlt	r1, r3
    44b4:	f005 7340 	and.w	r3, r5, #50331648	; 0x3000000
    44b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    44bc:	d10a      	bne.n	44d4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    44be:	4b6b      	ldr	r3, [pc, #428]	; (466c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>)
    44c0:	681a      	ldr	r2, [r3, #0]
    44c2:	681b      	ldr	r3, [r3, #0]
    44c4:	f3c2 2204 	ubfx	r2, r2, #8, #5
    44c8:	2a15      	cmp	r2, #21
    44ca:	bf88      	it	hi
    44cc:	3a20      	subhi	r2, #32
    44ce:	f3c3 6304 	ubfx	r3, r3, #24, #5
    44d2:	e00a      	b.n	44ea <NOROM_SysCtrlSetRechargeBeforePowerDown+0x76>
    44d4:	4b66      	ldr	r3, [pc, #408]	; (4670 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1fc>)
    44d6:	681a      	ldr	r2, [r3, #0]
    44d8:	4b66      	ldr	r3, [pc, #408]	; (4674 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>)
    44da:	f3c2 6204 	ubfx	r2, r2, #24, #5
    44de:	681b      	ldr	r3, [r3, #0]
    44e0:	2a15      	cmp	r2, #21
    44e2:	bf88      	it	hi
    44e4:	3a20      	subhi	r2, #32
    44e6:	f3c3 4304 	ubfx	r3, r3, #16, #5
    44ea:	2b15      	cmp	r3, #21
    44ec:	440a      	add	r2, r1
    44ee:	bf88      	it	hi
    44f0:	3b20      	subhi	r3, #32
    44f2:	2a15      	cmp	r2, #21
    44f4:	dc05      	bgt.n	4502 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8e>
    44f6:	f06f 0109 	mvn.w	r1, #9
    44fa:	428a      	cmp	r2, r1
    44fc:	bfb8      	it	lt
    44fe:	460a      	movlt	r2, r1
    4500:	e000      	b.n	4504 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    4502:	2215      	movs	r2, #21
    4504:	4c5c      	ldr	r4, [pc, #368]	; (4678 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x204>)
    4506:	f002 011f 	and.w	r1, r2, #31
    450a:	f441 51f8 	orr.w	r1, r1, #7936	; 0x1f00
    450e:	8021      	strh	r1, [r4, #0]
    4510:	495a      	ldr	r1, [pc, #360]	; (467c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>)
    4512:	6809      	ldr	r1, [r1, #0]
    4514:	f011 0403 	ands.w	r4, r1, #3
    4518:	bf18      	it	ne
    451a:	2401      	movne	r4, #1
    451c:	0749      	lsls	r1, r1, #29
    451e:	bf48      	it	mi
    4520:	f044 0402 	orrmi.w	r4, r4, #2
    4524:	b10f      	cbz	r7, 452a <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb6>
    4526:	f044 0404 	orr.w	r4, r4, #4
    452a:	f996 1007 	ldrsb.w	r1, [r6, #7]
    452e:	1a41      	subs	r1, r0, r1
    4530:	2904      	cmp	r1, #4
    4532:	dc03      	bgt.n	453c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    4534:	4949      	ldr	r1, [pc, #292]	; (465c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    4536:	7989      	ldrb	r1, [r1, #6]
    4538:	428c      	cmp	r4, r1
    453a:	d06f      	beq.n	461c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    453c:	f1b0 010f 	subs.w	r1, r0, #15
    4540:	9101      	str	r1, [sp, #4]
    4542:	f004 0101 	and.w	r1, r4, #1
    4546:	f8df a144 	ldr.w	sl, [pc, #324]	; 468c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x218>
    454a:	f004 0904 	and.w	r9, r4, #4
    454e:	f004 0802 	and.w	r8, r4, #2
    4552:	460f      	mov	r7, r1
    4554:	d42a      	bmi.n	45ac <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    4556:	9901      	ldr	r1, [sp, #4]
    4558:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    455c:	ea4f 2e21 	mov.w	lr, r1, asr #8
    4560:	f1be 0f07 	cmp.w	lr, #7
    4564:	9101      	str	r1, [sp, #4]
    4566:	d801      	bhi.n	456c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    4568:	d104      	bne.n	4574 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    456a:	e001      	b.n	4570 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xfc>
    456c:	f04f 0e07 	mov.w	lr, #7
    4570:	2106      	movs	r1, #6
    4572:	e000      	b.n	4576 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x102>
    4574:	4671      	mov	r1, lr
    4576:	f8df b118 	ldr.w	fp, [pc, #280]	; 4690 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x21c>
    457a:	3101      	adds	r1, #1
    457c:	f85a c021 	ldr.w	ip, [sl, r1, lsl #2]
    4580:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
    4584:	ebc1 0c0c 	rsb	ip, r1, ip
    4588:	fa5f f18c 	uxtb.w	r1, ip
    458c:	f1b9 0f00 	cmp.w	r9, #0
    4590:	d002      	beq.n	4598 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    4592:	f3cc 2b07 	ubfx	fp, ip, #8, #8
    4596:	4459      	add	r1, fp
    4598:	f1b8 0f00 	cmp.w	r8, #0
    459c:	d002      	beq.n	45a4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    459e:	f3cc 4b07 	ubfx	fp, ip, #16, #8
    45a2:	4459      	add	r1, fp
    45a4:	b12f      	cbz	r7, 45b2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    45a6:	eb01 611c 	add.w	r1, r1, ip, lsr #24
    45aa:	e002      	b.n	45b2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    45ac:	f04f 0e00 	mov.w	lr, #0
    45b0:	4671      	mov	r1, lr
    45b2:	f85a a02e 	ldr.w	sl, [sl, lr, lsl #2]
    45b6:	fa5f fc8a 	uxtb.w	ip, sl
    45ba:	f1b9 0f00 	cmp.w	r9, #0
    45be:	d002      	beq.n	45c6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x152>
    45c0:	f3ca 2907 	ubfx	r9, sl, #8, #8
    45c4:	44cc      	add	ip, r9
    45c6:	f1b8 0f00 	cmp.w	r8, #0
    45ca:	d002      	beq.n	45d2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15e>
    45cc:	f3ca 4807 	ubfx	r8, sl, #16, #8
    45d0:	44c4      	add	ip, r8
    45d2:	b10f      	cbz	r7, 45d8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    45d4:	eb0c 6c1a 	add.w	ip, ip, sl, lsr #24
    45d8:	1a9b      	subs	r3, r3, r2
    45da:	2b01      	cmp	r3, #1
    45dc:	bfb8      	it	lt
    45de:	2301      	movlt	r3, #1
    45e0:	9f01      	ldr	r7, [sp, #4]
    45e2:	2234      	movs	r2, #52	; 0x34
    45e4:	4353      	muls	r3, r2
    45e6:	eba7 270e 	sub.w	r7, r7, lr, lsl #8
    45ea:	4379      	muls	r1, r7
    45ec:	b2ed      	uxtb	r5, r5
    45ee:	436b      	muls	r3, r5
    45f0:	3180      	adds	r1, #128	; 0x80
    45f2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
    45f6:	fbb3 f1f1 	udiv	r1, r3, r1
    45fa:	f64f 7cff 	movw	ip, #65535	; 0xffff
    45fe:	4561      	cmp	r1, ip
    4600:	bf28      	it	cs
    4602:	4661      	movcs	r1, ip
    4604:	287f      	cmp	r0, #127	; 0x7f
    4606:	80b1      	strh	r1, [r6, #4]
    4608:	dc05      	bgt.n	4616 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a2>
    460a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    460e:	4298      	cmp	r0, r3
    4610:	bfb8      	it	lt
    4612:	4618      	movlt	r0, r3
    4614:	e000      	b.n	4618 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a4>
    4616:	207f      	movs	r0, #127	; 0x7f
    4618:	71f0      	strb	r0, [r6, #7]
    461a:	71b4      	strb	r4, [r6, #6]
    461c:	4b18      	ldr	r3, [pc, #96]	; (4680 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>)
    461e:	2100      	movs	r1, #0
    4620:	681b      	ldr	r3, [r3, #0]
    4622:	6033      	str	r3, [r6, #0]
    4624:	88b3      	ldrh	r3, [r6, #4]
    4626:	2b1e      	cmp	r3, #30
    4628:	bf9e      	ittt	ls
    462a:	4a0c      	ldrls	r2, [pc, #48]	; (465c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    462c:	231f      	movls	r3, #31
    462e:	8093      	strhls	r3, [r2, #4]
    4630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4634:	d302      	bcc.n	463c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    4636:	085b      	lsrs	r3, r3, #1
    4638:	3101      	adds	r1, #1
    463a:	e7f9      	b.n	4630 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1bc>
    463c:	4a11      	ldr	r2, [pc, #68]	; (4684 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>)
    463e:	3b0f      	subs	r3, #15
    4640:	430a      	orrs	r2, r1
    4642:	091b      	lsrs	r3, r3, #4
    4644:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
    4648:	4a06      	ldr	r2, [pc, #24]	; (4664 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    464a:	6013      	str	r3, [r2, #0]
    464c:	4b0e      	ldr	r3, [pc, #56]	; (4688 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x214>)
    464e:	2200      	movs	r2, #0
    4650:	601a      	str	r2, [r3, #0]
    4652:	b003      	add	sp, #12
    4654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4658:	40090000 	andmi	r0, r9, r0
    465c:	20000658 	andcs	r0, r0, r8, asr r6
    4660:	00a4fdfd 	strdeq	pc, [r4], sp	; <UNPREDICTABLE>
    4664:	40091030 	andmi	r1, r9, r0, lsr r0
    4668:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    466c:	50001388 	andpl	r1, r0, r8, lsl #7
    4670:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    4674:	5000113c 	andpl	r1, r0, ip, lsr r1
    4678:	4008626e 	andmi	r6, r8, lr, ror #4
    467c:	40082224 	andmi	r2, r8, r4, lsr #4
    4680:	40092008 	andmi	r2, r9, r8
    4684:	80a4e700 	adchi	lr, r4, r0, lsl #14
    4688:	40091034 	andmi	r1, r9, r4, lsr r0
    468c:	5000139c 	mulpl	r0, ip, r3
    4690:	50001398 	mulpl	r0, r8, r3

00004694 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>:
    4694:	b510      	push	{r4, lr}
    4696:	4b14      	ldr	r3, [pc, #80]	; (46e8 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>)
    4698:	681c      	ldr	r4, [r3, #0]
    469a:	b2a4      	uxth	r4, r4
    469c:	b314      	cbz	r4, 46e4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    469e:	f7ff f8df 	bl	3860 <NOROM_AONBatMonTemperatureGetDegC>
    46a2:	4b12      	ldr	r3, [pc, #72]	; (46ec <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    46a4:	f993 2007 	ldrsb.w	r2, [r3, #7]
    46a8:	4290      	cmp	r0, r2
    46aa:	da05      	bge.n	46b8 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x24>
    46ac:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    46b0:	4290      	cmp	r0, r2
    46b2:	bfb8      	it	lt
    46b4:	4610      	movlt	r0, r2
    46b6:	71d8      	strb	r0, [r3, #7]
    46b8:	889a      	ldrh	r2, [r3, #4]
    46ba:	490c      	ldr	r1, [pc, #48]	; (46ec <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    46bc:	4294      	cmp	r4, r2
    46be:	d310      	bcc.n	46e2 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4e>
    46c0:	4b0b      	ldr	r3, [pc, #44]	; (46f0 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x5c>)
    46c2:	6808      	ldr	r0, [r1, #0]
    46c4:	681b      	ldr	r3, [r3, #0]
    46c6:	1aa4      	subs	r4, r4, r2
    46c8:	3302      	adds	r3, #2
    46ca:	1a1b      	subs	r3, r3, r0
    46cc:	2b1f      	cmp	r3, #31
    46ce:	bf28      	it	cs
    46d0:	231f      	movcs	r3, #31
    46d2:	085b      	lsrs	r3, r3, #1
    46d4:	40dc      	lsrs	r4, r3
    46d6:	4414      	add	r4, r2
    46d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    46dc:	4294      	cmp	r4, r2
    46de:	bf28      	it	cs
    46e0:	4614      	movcs	r4, r2
    46e2:	808c      	strh	r4, [r1, #4]
    46e4:	bd10      	pop	{r4, pc}
    46e6:	bf00      	nop
    46e8:	40091034 	andmi	r1, r9, r4, lsr r0
    46ec:	20000658 	andcs	r0, r0, r8, asr r6
    46f0:	40092008 	andmi	r2, r9, r8

000046f4 <NOROM_SysCtrlResetSourceGet>:
    46f4:	4b04      	ldr	r3, [pc, #16]	; (4708 <NOROM_SysCtrlResetSourceGet+0x14>)
    46f6:	681a      	ldr	r2, [r3, #0]
    46f8:	0412      	lsls	r2, r2, #16
    46fa:	bf5a      	itte	pl
    46fc:	6818      	ldrpl	r0, [r3, #0]
    46fe:	f3c0 0042 	ubfxpl	r0, r0, #1, #3
    4702:	2008      	movmi	r0, #8
    4704:	4770      	bx	lr
    4706:	bf00      	nop
    4708:	40090004 	andmi	r0, r9, r4

0000470c <NOROM_ChipInfo_GetChipFamily>:
    470c:	f64b 129a 	movw	r2, #47514	; 0xb99a
    4710:	4b10      	ldr	r3, [pc, #64]	; (4754 <NOROM_ChipInfo_GetChipFamily+0x48>)
    4712:	6818      	ldr	r0, [r3, #0]
    4714:	f3c0 300f 	ubfx	r0, r0, #12, #16
    4718:	4290      	cmp	r0, r2
    471a:	d106      	bne.n	472a <NOROM_ChipInfo_GetChipFamily+0x1e>
    471c:	681b      	ldr	r3, [r3, #0]
    471e:	0f1b      	lsrs	r3, r3, #28
    4720:	2b0b      	cmp	r3, #11
    4722:	bf0c      	ite	eq
    4724:	2004      	moveq	r0, #4
    4726:	2000      	movne	r0, #0
    4728:	e011      	b.n	474e <NOROM_ChipInfo_GetChipFamily+0x42>
    472a:	f64b 13be 	movw	r3, #47550	; 0xb9be
    472e:	4298      	cmp	r0, r3
    4730:	d00a      	beq.n	4748 <NOROM_ChipInfo_GetChipFamily+0x3c>
    4732:	f64b 3341 	movw	r3, #47937	; 0xbb41
    4736:	4298      	cmp	r0, r3
    4738:	d008      	beq.n	474c <NOROM_ChipInfo_GetChipFamily+0x40>
    473a:	f64b 3320 	movw	r3, #47904	; 0xbb20
    473e:	4298      	cmp	r0, r3
    4740:	bf14      	ite	ne
    4742:	20ff      	movne	r0, #255	; 0xff
    4744:	2002      	moveq	r0, #2
    4746:	e002      	b.n	474e <NOROM_ChipInfo_GetChipFamily+0x42>
    4748:	2001      	movs	r0, #1
    474a:	e000      	b.n	474e <NOROM_ChipInfo_GetChipFamily+0x42>
    474c:	2003      	movs	r0, #3
    474e:	b240      	sxtb	r0, r0
    4750:	4770      	bx	lr
    4752:	bf00      	nop
    4754:	50001318 	andpl	r1, r0, r8, lsl r3

00004758 <NOROM_ChipInfo_GetHwRevision>:
    4758:	b538      	push	{r3, r4, r5, lr}
    475a:	4b19      	ldr	r3, [pc, #100]	; (47c0 <NOROM_ChipInfo_GetHwRevision+0x68>)
    475c:	681d      	ldr	r5, [r3, #0]
    475e:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
    4762:	6818      	ldr	r0, [r3, #0]
    4764:	0f2d      	lsrs	r5, r5, #28
    4766:	b2c4      	uxtb	r4, r0
    4768:	2c80      	cmp	r4, #128	; 0x80
    476a:	bf28      	it	cs
    476c:	2400      	movcs	r4, #0
    476e:	f7ff ffcd 	bl	470c <NOROM_ChipInfo_GetChipFamily>
    4772:	2804      	cmp	r0, #4
    4774:	d821      	bhi.n	47ba <NOROM_ChipInfo_GetHwRevision+0x62>
    4776:	e8df f000 	tbb	[pc, r0]
    477a:	1b1b1303 	blne	6c938e <__ccfg+0x6a93e6>
    477e:	3d01001c 	stccc	0, cr0, [r1, #-112]	; 0xffffff90
    4782:	2d07      	cmp	r5, #7
    4784:	d819      	bhi.n	47ba <NOROM_ChipInfo_GetHwRevision+0x62>
    4786:	e8df f005 	tbb	[pc, r5]
    478a:	18041811 	stmdane	r4, {r0, r4, fp, ip}
    478e:	08061818 	stmdaeq	r6, {r3, r4, fp, ip}
    4792:	2014      	movs	r0, #20
    4794:	e012      	b.n	47bc <NOROM_ChipInfo_GetHwRevision+0x64>
    4796:	2015      	movs	r0, #21
    4798:	e010      	b.n	47bc <NOROM_ChipInfo_GetHwRevision+0x64>
    479a:	f104 0016 	add.w	r0, r4, #22
    479e:	e00a      	b.n	47b6 <NOROM_ChipInfo_GetHwRevision+0x5e>
    47a0:	b125      	cbz	r5, 47ac <NOROM_ChipInfo_GetHwRevision+0x54>
    47a2:	2d02      	cmp	r5, #2
    47a4:	d109      	bne.n	47ba <NOROM_ChipInfo_GetHwRevision+0x62>
    47a6:	f104 0014 	add.w	r0, r4, #20
    47aa:	e004      	b.n	47b6 <NOROM_ChipInfo_GetHwRevision+0x5e>
    47ac:	200a      	movs	r0, #10
    47ae:	e005      	b.n	47bc <NOROM_ChipInfo_GetHwRevision+0x64>
    47b0:	b91d      	cbnz	r5, 47ba <NOROM_ChipInfo_GetHwRevision+0x62>
    47b2:	f104 000a 	add.w	r0, r4, #10
    47b6:	b2c0      	uxtb	r0, r0
    47b8:	e000      	b.n	47bc <NOROM_ChipInfo_GetHwRevision+0x64>
    47ba:	20ff      	movs	r0, #255	; 0xff
    47bc:	b240      	sxtb	r0, r0
    47be:	bd38      	pop	{r3, r4, r5, pc}
    47c0:	50001318 	andpl	r1, r0, r8, lsl r3

000047c4 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>:
    47c4:	b508      	push	{r3, lr}
    47c6:	f7ff ffa1 	bl	470c <NOROM_ChipInfo_GetChipFamily>
    47ca:	2801      	cmp	r0, #1
    47cc:	d103      	bne.n	47d6 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    47ce:	f7ff ffc3 	bl	4758 <NOROM_ChipInfo_GetHwRevision>
    47d2:	2813      	cmp	r0, #19
    47d4:	dc00      	bgt.n	47d8 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x14>
    47d6:	e7fe      	b.n	47d6 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    47d8:	bd08      	pop	{r3, pc}
	...

000047dc <AuxAdiDdiSafeWrite.constprop.1>:
    47dc:	b538      	push	{r3, r4, r5, lr}
    47de:	4604      	mov	r4, r0
    47e0:	460d      	mov	r5, r1
    47e2:	f7ff f871 	bl	38c8 <NOROM_CPUcpsid>
    47e6:	4b06      	ldr	r3, [pc, #24]	; (4800 <AuxAdiDdiSafeWrite.constprop.1+0x24>)
    47e8:	681a      	ldr	r2, [r3, #0]
    47ea:	2a00      	cmp	r2, #0
    47ec:	d0fb      	beq.n	47e6 <AuxAdiDdiSafeWrite.constprop.1+0xa>
    47ee:	2201      	movs	r2, #1
    47f0:	6025      	str	r5, [r4, #0]
    47f2:	601a      	str	r2, [r3, #0]
    47f4:	b918      	cbnz	r0, 47fe <AuxAdiDdiSafeWrite.constprop.1+0x22>
    47f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    47fa:	f7ff b869 	b.w	38d0 <NOROM_CPUcpsie>
    47fe:	bd38      	pop	{r3, r4, r5, pc}
    4800:	400c8000 	andmi	r8, ip, r0

00004804 <NOROM_DDI32RegWrite>:
    4804:	4408      	add	r0, r1
    4806:	4611      	mov	r1, r2
    4808:	f7ff bfe8 	b.w	47dc <AuxAdiDdiSafeWrite.constprop.1>

0000480c <memcpy>:
    480c:	b5f0      	push	{r4, r5, r6, r7, lr}
    480e:	46c6      	mov	lr, r8
    4810:	b500      	push	{lr}
    4812:	2a0f      	cmp	r2, #15
    4814:	d945      	bls.n	48a2 <memcpy+0x96>
    4816:	000b      	movs	r3, r1
    4818:	2603      	movs	r6, #3
    481a:	4303      	orrs	r3, r0
    481c:	401e      	ands	r6, r3
    481e:	000c      	movs	r4, r1
    4820:	0003      	movs	r3, r0
    4822:	2e00      	cmp	r6, #0
    4824:	d142      	bne.n	48ac <memcpy+0xa0>
    4826:	0015      	movs	r5, r2
    4828:	3d10      	subs	r5, #16
    482a:	092d      	lsrs	r5, r5, #4
    482c:	46ac      	mov	ip, r5
    482e:	012d      	lsls	r5, r5, #4
    4830:	46a8      	mov	r8, r5
    4832:	4480      	add	r8, r0
    4834:	e000      	b.n	4838 <memcpy+0x2c>
    4836:	003b      	movs	r3, r7
    4838:	6867      	ldr	r7, [r4, #4]
    483a:	605f      	str	r7, [r3, #4]
    483c:	68e7      	ldr	r7, [r4, #12]
    483e:	60df      	str	r7, [r3, #12]
    4840:	001f      	movs	r7, r3
    4842:	6825      	ldr	r5, [r4, #0]
    4844:	601d      	str	r5, [r3, #0]
    4846:	68a5      	ldr	r5, [r4, #8]
    4848:	3710      	adds	r7, #16
    484a:	609d      	str	r5, [r3, #8]
    484c:	3410      	adds	r4, #16
    484e:	4543      	cmp	r3, r8
    4850:	d1f1      	bne.n	4836 <memcpy+0x2a>
    4852:	4665      	mov	r5, ip
    4854:	230f      	movs	r3, #15
    4856:	240c      	movs	r4, #12
    4858:	3501      	adds	r5, #1
    485a:	012d      	lsls	r5, r5, #4
    485c:	1949      	adds	r1, r1, r5
    485e:	4013      	ands	r3, r2
    4860:	1945      	adds	r5, r0, r5
    4862:	4214      	tst	r4, r2
    4864:	d025      	beq.n	48b2 <memcpy+0xa6>
    4866:	598c      	ldr	r4, [r1, r6]
    4868:	51ac      	str	r4, [r5, r6]
    486a:	3604      	adds	r6, #4
    486c:	1b9c      	subs	r4, r3, r6
    486e:	2c03      	cmp	r4, #3
    4870:	d8f9      	bhi.n	4866 <memcpy+0x5a>
    4872:	2403      	movs	r4, #3
    4874:	3b04      	subs	r3, #4
    4876:	089b      	lsrs	r3, r3, #2
    4878:	3301      	adds	r3, #1
    487a:	009b      	lsls	r3, r3, #2
    487c:	4022      	ands	r2, r4
    487e:	18ed      	adds	r5, r5, r3
    4880:	18c9      	adds	r1, r1, r3
    4882:	1e56      	subs	r6, r2, #1
    4884:	2a00      	cmp	r2, #0
    4886:	d007      	beq.n	4898 <memcpy+0x8c>
    4888:	2300      	movs	r3, #0
    488a:	e000      	b.n	488e <memcpy+0x82>
    488c:	0023      	movs	r3, r4
    488e:	5cca      	ldrb	r2, [r1, r3]
    4890:	1c5c      	adds	r4, r3, #1
    4892:	54ea      	strb	r2, [r5, r3]
    4894:	429e      	cmp	r6, r3
    4896:	d1f9      	bne.n	488c <memcpy+0x80>
    4898:	bc04      	pop	{r2}
    489a:	4690      	mov	r8, r2
    489c:	bcf0      	pop	{r4, r5, r6, r7}
    489e:	bc02      	pop	{r1}
    48a0:	4708      	bx	r1
    48a2:	0005      	movs	r5, r0
    48a4:	1e56      	subs	r6, r2, #1
    48a6:	2a00      	cmp	r2, #0
    48a8:	d1ee      	bne.n	4888 <memcpy+0x7c>
    48aa:	e7f5      	b.n	4898 <memcpy+0x8c>
    48ac:	1e56      	subs	r6, r2, #1
    48ae:	0005      	movs	r5, r0
    48b0:	e7ea      	b.n	4888 <memcpy+0x7c>
    48b2:	001a      	movs	r2, r3
    48b4:	e7f6      	b.n	48a4 <memcpy+0x98>
    48b6:	46c0      	nop			; (mov r8, r8)

000048b8 <srand>:
    48b8:	2200      	movs	r2, #0
    48ba:	4b03      	ldr	r3, [pc, #12]	; (48c8 <srand+0x10>)
    48bc:	681b      	ldr	r3, [r3, #0]
    48be:	33a8      	adds	r3, #168	; 0xa8
    48c0:	6018      	str	r0, [r3, #0]
    48c2:	605a      	str	r2, [r3, #4]
    48c4:	4770      	bx	lr
    48c6:	46c0      	nop			; (mov r8, r8)
    48c8:	20000110 	andcs	r0, r0, r0, lsl r1

000048cc <rand>:
    48cc:	4b0a      	ldr	r3, [pc, #40]	; (48f8 <rand+0x2c>)
    48ce:	b510      	push	{r4, lr}
    48d0:	681c      	ldr	r4, [r3, #0]
    48d2:	34a8      	adds	r4, #168	; 0xa8
    48d4:	6820      	ldr	r0, [r4, #0]
    48d6:	6861      	ldr	r1, [r4, #4]
    48d8:	4a08      	ldr	r2, [pc, #32]	; (48fc <rand+0x30>)
    48da:	4b09      	ldr	r3, [pc, #36]	; (4900 <rand+0x34>)
    48dc:	f000 f812 	bl	4904 <__aeabi_lmul>
    48e0:	2201      	movs	r2, #1
    48e2:	2300      	movs	r3, #0
    48e4:	1880      	adds	r0, r0, r2
    48e6:	4159      	adcs	r1, r3
    48e8:	6020      	str	r0, [r4, #0]
    48ea:	6061      	str	r1, [r4, #4]
    48ec:	0048      	lsls	r0, r1, #1
    48ee:	0840      	lsrs	r0, r0, #1
    48f0:	bc10      	pop	{r4}
    48f2:	bc02      	pop	{r1}
    48f4:	4708      	bx	r1
    48f6:	46c0      	nop			; (mov r8, r8)
    48f8:	20000110 	andcs	r0, r0, r0, lsl r1
    48fc:	4c957f2d 	ldcmi	15, cr7, [r5], {45}	; 0x2d
    4900:	5851f42d 	ldmdapl	r1, {r0, r2, r3, r5, sl, ip, sp, lr, pc}^

00004904 <__aeabi_lmul>:
    4904:	b5f0      	push	{r4, r5, r6, r7, lr}
    4906:	000f      	movs	r7, r1
    4908:	0001      	movs	r1, r0
    490a:	46c6      	mov	lr, r8
    490c:	4684      	mov	ip, r0
    490e:	0415      	lsls	r5, r2, #16
    4910:	0400      	lsls	r0, r0, #16
    4912:	0c14      	lsrs	r4, r2, #16
    4914:	0c00      	lsrs	r0, r0, #16
    4916:	0c09      	lsrs	r1, r1, #16
    4918:	0c2d      	lsrs	r5, r5, #16
    491a:	002e      	movs	r6, r5
    491c:	4346      	muls	r6, r0
    491e:	434d      	muls	r5, r1
    4920:	4360      	muls	r0, r4
    4922:	4361      	muls	r1, r4
    4924:	1940      	adds	r0, r0, r5
    4926:	0c34      	lsrs	r4, r6, #16
    4928:	1824      	adds	r4, r4, r0
    492a:	b500      	push	{lr}
    492c:	42a5      	cmp	r5, r4
    492e:	d903      	bls.n	4938 <__aeabi_lmul+0x34>
    4930:	2080      	movs	r0, #128	; 0x80
    4932:	0240      	lsls	r0, r0, #9
    4934:	4680      	mov	r8, r0
    4936:	4441      	add	r1, r8
    4938:	0c25      	lsrs	r5, r4, #16
    493a:	186d      	adds	r5, r5, r1
    493c:	4661      	mov	r1, ip
    493e:	4359      	muls	r1, r3
    4940:	437a      	muls	r2, r7
    4942:	0430      	lsls	r0, r6, #16
    4944:	1949      	adds	r1, r1, r5
    4946:	0424      	lsls	r4, r4, #16
    4948:	0c00      	lsrs	r0, r0, #16
    494a:	1820      	adds	r0, r4, r0
    494c:	1889      	adds	r1, r1, r2
    494e:	bc04      	pop	{r2}
    4950:	4690      	mov	r8, r2
    4952:	bcf0      	pop	{r4, r5, r6, r7}
    4954:	bc04      	pop	{r2}
    4956:	4710      	bx	r2
    4958:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
    495c:	20656761 	rsbcs	r6, r5, r1, ror #14
    4960:	746e6573 	strbtvc	r6, [lr], #-1395	; 0xfffffa8d
    4964:	45000a0d 	strmi	r0, [r0, #-2573]	; 0xfffff5f3
    4968:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    496c:	696e6920 	stmdbvs	lr!, {r5, r8, fp, sp, lr}^
    4970:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
    4974:	6e697a69 	vnmulvs.f32	s15, s18, s19
    4978:	6f6e2067 	svcvs	0x006e2067
    497c:	2e2e6564 	cfsh64cs	mvdx6, mvdx14, #52
    4980:	0d000a2e 	vstreq	s0, [r0, #-184]	; 0xffffff48
    4984:	4345520a 	movtmi	r5, #21002	; 0x520a
    4988:	45564945 	ldrbmi	r4, [r6, #-2373]	; 0xfffff6bb
    498c:	49472044 	stmdbmi	r7, {r2, r6, sp}^
    4990:	25203a44 	strcs	r3, [r0, #-2628]!	; 0xfffff5bc
    4994:	520d0075 	andpl	r0, sp, #117	; 0x75
    4998:	49454345 	stmdbmi	r5, {r0, r2, r6, r8, r9, lr}^
    499c:	20444556 	subcs	r4, r4, r6, asr r5
    49a0:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    49a4:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
    49a8:	520a0d00 	andpl	r0, sl, #0, 26
    49ac:	49454345 	stmdbmi	r5, {r0, r2, r6, r8, r9, lr}^
    49b0:	20444556 	subcs	r4, r4, r6, asr r5
    49b4:	20514552 	subscs	r4, r1, r2, asr r5
    49b8:	3a4d554e 	bcc	1359ef8 <__ccfg+0x1339f50>
    49bc:	00752520 	rsbseq	r2, r5, r0, lsr #10
    49c0:	45520a0d 	ldrbmi	r0, [r2, #-2573]	; 0xfffff5f3
    49c4:	56494543 	strbpl	r4, [r9], -r3, asr #10
    49c8:	53204445 			; <UNDEFINED> instruction: 0x53204445
    49cc:	203a4449 	eorscs	r4, sl, r9, asr #8
    49d0:	0d007525 	cfstr32eq	mvfx7, [r0, #-148]	; 0xffffff6c
    49d4:	4345520a 	movtmi	r5, #21002	; 0x520a
    49d8:	45564945 	ldrbmi	r4, [r6, #-2373]	; 0xfffff6bb
    49dc:	49522044 	ldmdbmi	r2, {r2, r6, sp}^
    49e0:	25203a44 	strcs	r3, [r0, #-2628]!	; 0xfffff5bc
    49e4:	45520075 	ldrbmi	r0, [r2, #-117]	; 0xffffff8b
    49e8:	56494543 	strbpl	r4, [r9], -r3, asr #10
    49ec:	47204445 	strmi	r4, [r0, -r5, asr #8]!
    49f0:	203a4449 	eorscs	r4, sl, r9, asr #8
    49f4:	000a6425 	andeq	r6, sl, r5, lsr #8
    49f8:	45434552 	strbmi	r4, [r3, #-1362]	; 0xfffffaae
    49fc:	44455649 	strbmi	r5, [r5], #-1609	; 0xfffff9b7
    4a00:	50595420 	subspl	r5, r9, r0, lsr #8
    4a04:	25203a45 	strcs	r3, [r0, #-2629]!	; 0xfffff5bb
    4a08:	52000a64 	andpl	r0, r0, #100, 20	; 0x64000
    4a0c:	49454345 	stmdbmi	r5, {r0, r2, r6, r8, r9, lr}^
    4a10:	20444556 	subcs	r4, r4, r6, asr r5
    4a14:	20514552 	subscs	r4, r1, r2, asr r5
    4a18:	3a4d554e 	bcc	1359f58 <__ccfg+0x1339fb0>
    4a1c:	0a642520 	beq	190dea4 <__ccfg+0x18edefc>
    4a20:	43455200 	movtmi	r5, #20992	; 0x5200
    4a24:	45564945 	ldrbmi	r4, [r6, #-2373]	; 0xfffff6bb
    4a28:	49532044 	ldmdbmi	r3, {r2, r6, sp}^
    4a2c:	25203a44 	strcs	r3, [r0, #-2628]!	; 0xfffff5bc
    4a30:	52000a64 	andpl	r0, r0, #100, 20	; 0x64000
    4a34:	49454345 	stmdbmi	r5, {r0, r2, r6, r8, r9, lr}^
    4a38:	20444556 	subcs	r4, r4, r6, asr r5
    4a3c:	3a444952 	bcc	1116f8c <__ccfg+0x10f6fe4>
    4a40:	0a642520 	beq	190dec8 <__ccfg+0x18edf20>
    4a44:	43455200 	movtmi	r5, #20992	; 0x5200
    4a48:	45564945 	ldrbmi	r4, [r6, #-2373]	; 0xfffff6bb
    4a4c:	45522044 	ldrbmi	r2, [r2, #-68]	; 0xffffffbc
    4a50:	44524f43 	ldrbmi	r4, [r2], #-3907	; 0xfffff0bd
    4a54:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
    4a58:	5245000a 	subpl	r0, r5, #10
    4a5c:	3a524f52 	bcc	14987ac <__ccfg+0x1478804>
    4a60:	63657220 	cmnvs	r5, #32, 4
    4a64:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
    4a68:	79742064 	ldmdbvc	r4!, {r2, r5, r6, sp}^
    4a6c:	5b206570 	blpl	81e034 <__ccfg+0x7fe08c>
    4a70:	205d6425 	subscs	r6, sp, r5, lsr #8
    4a74:	6e207369 	cdpvs	3, 2, cr7, cr0, cr9, {3}
    4a78:	6c20746f 	cfstrsvs	mvf7, [r0], #-444	; 0xfffffe44
    4a7c:	6c616765 	stclvs	7, cr6, [r1], #-404	; 0xfffffe6c
    4a80:	63617020 	cmnvs	r1, #32
    4a84:	2074656b 	rsbscs	r6, r4, fp, ror #10
    4a88:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    4a8c:	440a0d00 	strmi	r0, [sl], #-3328	; 0xfffff300
    4a90:	20617461 	rsbcs	r7, r1, r1, ror #8
    4a94:	65766153 	ldrbvs	r6, [r6, #-339]!	; 0xfffffead
    4a98:	0a0d0064 	beq	344c30 <__ccfg+0x324c88>
    4a9c:	6f636552 	svcvs	0x00636552
    4aa0:	44206472 	strtmi	r6, [r0], #-1138	; 0xfffffb8e
    4aa4:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    4aa8:	0d006465 	cfstrseq	mvf6, [r0, #-404]	; 0xfffffe6c
    4aac:	6365520a 	cmnvs	r5, #-1610612736	; 0xa0000000
    4ab0:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4ab4:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    4ab8:	64657669 	strbtvs	r7, [r5], #-1641	; 0xfffff997
    4abc:	6f726620 	svcvs	0x00726620
    4ac0:	6425206d 	strtvs	r2, [r5], #-109	; 0xffffff93
    4ac4:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
    4ac8:	540a0d00 	strpl	r0, [sl], #-3328	; 0xfffff300
    4acc:	72206568 	eorvc	r6, r0, #104, 10	; 0x1a000000
    4ad0:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    4ad4:	61632064 	cmnvs	r3, r4, rrx
    4ad8:	2074276e 	rsbscs	r2, r4, lr, ror #14
    4adc:	73206562 			; <UNDEFINED> instruction: 0x73206562
    4ae0:	64657661 	strbtvs	r7, [r5], #-1633	; 0xfffff99f
    4ae4:	206e6f20 	rsbcs	r6, lr, r0, lsr #30
    4ae8:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    4aec:	00642520 	rsbeq	r2, r4, r0, lsr #10
    4af0:	68540a0d 	ldmdavs	r4, {r0, r2, r3, r9, fp}^
    4af4:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4af8:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    4afc:	656f6420 	strbvs	r6, [pc, #-1056]!	; 46e4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    4b00:	6f6e2073 	svcvs	0x006e2073
    4b04:	78652074 	stmdavc	r5!, {r2, r4, r5, r6, sp}^
    4b08:	73747369 	cmnvc	r4, #-1543503871	; 0xa4000001
    4b0c:	206e6f20 	rsbcs	r6, lr, r0, lsr #30
    4b10:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    4b14:	00642520 	rsbeq	r2, r4, r0, lsr #10
    4b18:	68540a0d 	ldmdavs	r4, {r0, r2, r3, r9, fp}^
    4b1c:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4b20:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    4b24:	656f6420 	strbvs	r6, [pc, #-1056]!	; 470c <NOROM_ChipInfo_GetChipFamily>
    4b28:	6f6e2073 	svcvs	0x006e2073
    4b2c:	78652074 	stmdavc	r5!, {r2, r4, r5, r6, sp}^
    4b30:	20747369 	rsbscs	r7, r4, r9, ror #6
    4b34:	6e206e6f 	cdpvs	14, 2, cr6, cr0, cr15, {3}
    4b38:	2065646f 	rsbcs	r6, r5, pc, ror #8
    4b3c:	45006425 	strmi	r6, [r0, #-1061]	; 0xfffffbdb
    4b40:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
    4b44:	6f73203a 	svcvs	0x0073203a
    4b48:	6974656d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
    4b4c:	7720676e 	strvc	r6, [r0, -lr, ror #14]!
    4b50:	20746e65 	rsbscs	r6, r4, r5, ror #28
    4b54:	6e6f7277 	mcrvs	2, 3, r7, cr15, cr7, {3}
    4b58:	68772067 	ldmdavs	r7!, {r0, r1, r2, r5, r6, sp}^
    4b5c:	72206e65 	eorvc	r6, r0, #1616	; 0x650
    4b60:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    4b64:	676e6976 			; <UNDEFINED> instruction: 0x676e6976
    4b68:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
    4b6c:	63617020 	cmnvs	r1, #32
    4b70:	0074656b 	rsbseq	r6, r4, fp, ror #10
    4b74:	6e6e6143 	powvsem	f6, f6, f3
    4b78:	6f20746f 	svcvs	0x0020746f
    4b7c:	206e6570 	rsbcs	r6, lr, r0, ror r5
    4b80:	20766374 	rsbscs	r6, r6, r4, ror r3
    4b84:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    4b88:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    4b8c:	0a0d0065 	beq	344d28 <__ccfg+0x324d80>
    4b90:	756f7247 	strbvc	r7, [pc, #-583]!	; 4951 <__aeabi_lmul+0x4d>
    4b94:	64252070 	strtvs	r2, [r5], #-112	; 0xffffff90
    4b98:	76654420 	strbtvc	r4, [r5], -r0, lsr #8
    4b9c:	20656369 	rsbcs	r6, r5, r9, ror #6
    4ba0:	20642523 	rsbcs	r2, r4, r3, lsr #10
    4ba4:	2f642528 	svccs	0x00642528
    4ba8:	72206425 	eorvc	r6, r0, #620756992	; 0x25000000
    4bac:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    4bb0:	0d297364 	stceq	3, cr7, [r9, #-400]!	; 0xfffffe70
    4bb4:	2947280a 	stmdbcs	r7, {r1, r3, fp, sp}^
    4bb8:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    4bbc:	0d444920 	vstreq.16	s9, [r4, #-64]	; 0xffffffc0	; <UNPREDICTABLE>
    4bc0:	294e280a 	stmdbcs	lr, {r1, r3, fp, sp}^
    4bc4:	64207765 	strtvs	r7, [r0], #-1893	; 0xfffff89b
    4bc8:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    4bcc:	44492065 	strbmi	r2, [r9], #-101	; 0xffffff9b
    4bd0:	46280a0d 	strtmi	r0, [r8], -sp, lsl #20
    4bd4:	646e6929 	strbtvs	r6, [lr], #-2345	; 0xfffff6d7
    4bd8:	69656e20 	stmdbvs	r5!, {r5, r9, sl, fp, sp, lr}^
    4bdc:	6f626867 	svcvs	0x00626867
    4be0:	0a0d7372 	beq	3619b0 <__ccfg+0x341a08>
    4be4:	72294328 	eorvc	r4, r9, #40, 6	; 0xa0000000
    4be8:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
    4bec:	63657220 	cmnvs	r5, #32, 4
    4bf0:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4bf4:	6e206e6f 	cdpvs	14, 2, cr6, cr0, cr15, {3}
    4bf8:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    4bfc:	0d726f62 	ldcleq	15, cr6, [r2, #-392]!	; 0xfffffe78
    4c00:	2944280a 	stmdbcs	r4, {r1, r3, fp, sp}^
    4c04:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    4c08:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4c0c:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    4c10:	206e6f20 	rsbcs	r6, lr, r0, lsr #30
    4c14:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
    4c18:	726f6268 	rsbvc	r6, pc, #104, 4	; 0x80000006
    4c1c:	52280a0d 	eorpl	r0, r8, #53248	; 0xd000
    4c20:	72746529 	rsbsvc	r6, r4, #171966464	; 0xa400000
    4c24:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
    4c28:	63657220 	cmnvs	r5, #32, 4
    4c2c:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4c30:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 4aa0 <__aeabi_lmul+0x19c>
    4c34:	69656e20 	stmdbvs	r5!, {r5, r9, sl, fp, sp, lr}^
    4c38:	6f626867 	svcvs	0x00626867
    4c3c:	280a0d72 	stmdacs	sl, {r1, r4, r5, r6, r8, sl, fp}
    4c40:	6f682953 	svcvs	0x00682953
    4c44:	6f6c2077 	svcvs	0x006c2077
    4c48:	206c6163 	rsbcs	r6, ip, r3, ror #2
    4c4c:	6f636572 	svcvs	0x00636572
    4c50:	0d736472 	cfldrdeq	mvd6, [r3, #-456]!	; 0xfffffe38
    4c54:	6528520a 	strvs	r5, [r8, #-522]!	; 0xfffffdf6
    4c58:	74657329 	strbtvc	r7, [r5], #-809	; 0xfffffcd7
    4c5c:	636f6c20 	cmnvs	pc, #32, 24	; 0x2000
    4c60:	73206c61 			; <UNDEFINED> instruction: 0x73206c61
    4c64:	61726f74 	cmnvs	r2, r4, ror pc
    4c68:	0a0d6567 	beq	35e20c <__ccfg+0x33e264>
    4c6c:	65530a0d 	ldrbvs	r0, [r3, #-2573]	; 0xfffff5f3
    4c70:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    4c74:	3a6e6f69 	bcc	1ba0a20 <__ccfg+0x1b80a78>
    4c78:	63250020 			; <UNDEFINED> instruction: 0x63250020
    4c7c:	656c5000 	strbvs	r5, [ip, #-0]!
    4c80:	20657361 	rsbcs	r7, r5, r1, ror #6
    4c84:	766f7270 			; <UNDEFINED> instruction: 0x766f7270
    4c88:	20656469 	rsbcs	r6, r5, r9, ror #8
    4c8c:	656e2061 	strbvs	r2, [lr, #-97]!	; 0xffffff9f
    4c90:	72672077 	rsbvc	r2, r7, #119	; 0x77
    4c94:	2070756f 	rsbscs	r7, r0, pc, ror #10
    4c98:	3a234449 	bcc	8d5dc4 <__ccfg+0x8b5e1c>
    4c9c:	65730020 	ldrbvs	r0, [r3, #-32]!	; 0xffffffe0
    4ca0:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
    4ca4:	6f6e2067 	svcvs	0x006e2067
    4ca8:	67206564 	strvs	r6, [r0, -r4, ror #10]!
    4cac:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    4cb0:	00444920 	subeq	r4, r4, r0, lsr #18
    4cb4:	6c500a0d 	mrrcvs	10, 0, r0, r0, cr13	; <UNPREDICTABLE>
    4cb8:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
    4cbc:	6f727020 	svcvs	0x00727020
    4cc0:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
    4cc4:	6e206120 	sufvssp	f6, f0, f0
    4cc8:	6e207765 	cdpvs	7, 2, cr7, cr0, cr5, {3}
    4ccc:	2065646f 	rsbcs	r6, r5, pc, ror #8
    4cd0:	20234449 	eorcs	r4, r3, r9, asr #8
    4cd4:	322d3128 	eorcc	r3, sp, #40, 2
    4cd8:	6e692035 	mcrvs	0, 3, r2, cr9, cr5, {1}
    4cdc:	73756c63 	cmnvc	r5, #25344	; 0x6300
    4ce0:	29657669 	stmdbcs	r5!, {r0, r3, r5, r6, r9, sl, ip, sp, lr}^
    4ce4:	4f00203a 	svcmi	0x0000203a
    4ce8:	6f207475 	svcvs	0x00207475
    4cec:	61522066 	cmpvs	r2, r6, rrx
    4cf0:	0065676e 	rsbeq	r6, r5, lr, ror #14
    4cf4:	69204449 	stmdbvs	r0!, {r0, r3, r6, sl, lr}
    4cf8:	6c612073 	stclvs	0, cr2, [r1], #-460	; 0xfffffe34
    4cfc:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    4d00:	6e692079 	mcrvs	0, 3, r2, cr9, cr9, {3}
    4d04:	65737520 	ldrbvs	r7, [r3, #-1312]!	; 0xfffffae0
    4d08:	490a0d00 	stmdbmi	sl, {r8, sl, fp}
    4d0c:	203a2344 	eorscs	r2, sl, r4, asr #6
    4d10:	202c7525 	eorcs	r7, ip, r5, lsr #10
    4d14:	61207369 			; <UNDEFINED> instruction: 0x61207369
    4d18:	6e69206e 	cdpvs	0, 6, cr2, cr9, cr14, {3}
    4d1c:	696c6176 	stmdbvs	ip!, {r1, r2, r4, r5, r6, r8, sp, lr}^
    4d20:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
    4d24:	6563696f 	strbvs	r6, [r3, #-2415]!	; 0xfffff691
    4d28:	6552202e 	ldrbvs	r2, [r2, #-46]	; 0xffffffd2
    4d2c:	6e6f7361 	cdpvs	3, 6, cr7, cr15, cr1, {3}
    4d30:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
    4d34:	7245002e 	subvc	r0, r5, #46	; 0x2e
    4d38:	20726f72 	rsbscs	r6, r2, r2, ror pc
    4d3c:	61656c43 	cmnvs	r5, r3, asr #24
    4d40:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    4d44:	646f4e20 	strbtvs	r4, [pc], #-3616	; 4d4c <__aeabi_lmul+0x448>
    4d48:	72412065 	subvc	r2, r1, #101	; 0x65
    4d4c:	00796172 	rsbseq	r6, r9, r2, ror r1
    4d50:	654e0a0d 	strbvs	r0, [lr, #-2573]	; 0xfffff5f3
    4d54:	62686769 	rsbvs	r6, r8, #27525120	; 0x1a40000
    4d58:	3a73726f 	bcc	1ce171c <__ccfg+0x1cc1774>
    4d5c:	75250020 	strvc	r0, [r5, #-32]!	; 0xffffffe0
    4d60:	5000202c 	andpl	r2, r0, ip, lsr #32
    4d64:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    4d68:	72702065 	rsbsvc	r2, r0, #101	; 0x65
    4d6c:	6469766f 	strbtvs	r7, [r9], #-1647	; 0xfffff991
    4d70:	20612065 	rsbcs	r2, r1, r5, rrx
    4d74:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    4d78:	20444920 	subcs	r4, r4, r0, lsr #18
    4d7c:	322d3028 	eorcc	r3, sp, #40	; 0x28
    4d80:	203a2935 	eorscs	r2, sl, r5, lsr r9
    4d84:	72724500 	rsbsvc	r4, r2, #0, 10
    4d88:	203a726f 	eorscs	r7, sl, pc, ror #4
    4d8c:	72706d69 	rsbsvc	r6, r0, #6720	; 0x1a40
    4d90:	7265706f 	rsbvc	r7, r5, #111	; 0x6f
    4d94:	00444920 	subeq	r4, r4, r0, lsr #18
    4d98:	61656c50 	cmnvs	r5, r0, asr ip
    4d9c:	70206573 	eorvc	r6, r0, r3, ror r5
    4da0:	69766f72 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    4da4:	61206564 			; <UNDEFINED> instruction: 0x61206564
    4da8:	63657220 	cmnvs	r5, #32, 4
    4dac:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4db0:	6e656c28 	cdpvs	12, 6, cr6, cr5, cr8, {1}
    4db4:	20687467 	rsbcs	r7, r8, r7, ror #8
    4db8:	32203d3c 	eorcc	r3, r0, #60, 26	; 0xf00
    4dbc:	203a2930 	eorscs	r2, sl, r0, lsr r9
    4dc0:	72724500 	rsbsvc	r4, r2, #0, 10
    4dc4:	203a726f 	eorscs	r7, sl, pc, ror #4
    4dc8:	72706d69 	rsbsvc	r6, r0, #6720	; 0x1a40
    4dcc:	7265706f 	rsbvc	r7, r5, #111	; 0x6f
    4dd0:	646f6e20 	strbtvs	r6, [pc], #-3616	; 4dd8 <__aeabi_lmul+0x4d4>
    4dd4:	44492065 	strbmi	r2, [r9], #-101	; 0xffffff9b
    4dd8:	656c5000 	strbvs	r5, [ip, #-0]!
    4ddc:	20657361 	rsbcs	r7, r5, r1, ror #6
    4de0:	766f7270 			; <UNDEFINED> instruction: 0x766f7270
    4de4:	20656469 	rsbcs	r6, r5, r9, ror #8
    4de8:	20656874 	rsbcs	r6, r5, r4, ror r8
    4dec:	6f636572 	svcvs	0x00636572
    4df0:	69206472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, sp, lr}
    4df4:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    4df8:	2d302820 	ldccs	8, cr2, [r0, #-128]!	; 0xffffff80
    4dfc:	3a293034 	bcc	a50ed4 <__ccfg+0xa30f2c>
    4e00:	72450020 	subvc	r0, r5, #32
    4e04:	3a726f72 	bcc	1ca0bd4 <__ccfg+0x1c80c2c>
    4e08:	766e6920 	strbtvc	r6, [lr], -r0, lsr #18
    4e0c:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xfffff39f
    4e10:	646e6920 	strbtvs	r6, [lr], #-2336	; 0xfffff6e0
    4e14:	0d007865 	stceq	8, cr7, [r0, #-404]	; 0xfffffe6c
    4e18:	646e490a 	strbtvs	r4, [lr], #-2314	; 0xfffff6f6
    4e1c:	54097865 	strpl	r7, [r9], #-2149	; 0xfffff79b
    4e20:	20656d69 	rsbcs	r6, r5, r9, ror #26
    4e24:	6d617453 	cfstrdvs	mvd7, [r1, #-332]!	; 0xfffffeb4
    4e28:	4f090970 	svcmi	0x00090970
    4e2c:	72656e77 	rsbvc	r6, r5, #1904	; 0x770
    4e30:	09444920 	stmdbeq	r4, {r5, r8, fp, lr}^
    4e34:	6f636552 	svcvs	0x00636552
    4e38:	44206472 	strtmi	r6, [r0], #-1138	; 0xfffffb8e
    4e3c:	00617461 	rsbeq	r7, r1, r1, ror #8
    4e40:	64250a0d 	strtvs	r0, [r5], #-2573	; 0xfffff5f3
    4e44:	09642509 	stmdbeq	r4!, {r0, r3, r8, sl, sp}^
    4e48:	64250909 	strtvs	r0, [r5], #-2313	; 0xfffff6f7
    4e4c:	00732509 	rsbseq	r2, r3, r9, lsl #10
    4e50:	61460a0d 	cmpvs	r6, sp, lsl #20
    4e54:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
    4e58:	206f7420 	rsbcs	r7, pc, r0, lsr #8
    4e5c:	63616572 	cmnvs	r1, #478150656	; 0x1c800000
    4e60:	68742068 	ldmdavs	r4!, {r3, r5, r6, sp}^
    4e64:	65642065 	strbvs	r2, [r4, #-101]!	; 0xffffff9b
    4e68:	6e697473 	mcrvs	4, 3, r7, cr9, cr3, {3}
    4e6c:	6f697461 	svcvs	0x00697461
    4e70:	0a0d006e 	beq	345030 <__ccfg+0x325088>
    4e74:	6f727245 	svcvs	0x00727245
    4e78:	25203a72 	strcs	r3, [r0, #-2674]!	; 0xfffff58e
    4e7c:	59530073 	ldmdbpl	r3, {r0, r1, r4, r5, r6}^
    4e80:	52524553 	subspl	r4, r2, #348127232	; 0x14c00000
    4e84:	7825203a 	stmdavc	r5!, {r1, r3, r4, r5, sp}
    4e88:	7325202c 			; <UNDEFINED> instruction: 0x7325202c
    4e8c:	72617500 	rsbvc	r7, r1, #0, 10
    4e90:	69617500 	stmdbvs	r1!, {r8, sl, ip, sp, lr}^
    4e94:	63695000 	cmnvs	r9, #0
    4e98:	7620534f 	strtvc	r5, [r0], -pc, asr #6
    4e9c:	2f342e35 	svccs	0x00342e35
    4ea0:	38314750 	ldmdacc	r1!, {r4, r6, r8, r9, sl, lr}
    4ea4:	32323230 	eorscc	r3, r2, #48, 4
    4ea8:	43432d41 	movtmi	r2, #15681	; 0x3d41
    4eac:	30353331 	eorscc	r3, r5, r1, lsr r3
    4eb0:	55414c5f 	strbpl	r4, [r1, #-3167]	; 0xfffff3a1
    4eb4:	5848434e 	stmdapl	r8, {r1, r2, r3, r6, r8, r9, lr}^
    4eb8:	28202c4c 	stmdacs	r0!, {r2, r3, r6, sl, fp, sp}
    4ebc:	4f202943 	svcmi	0x00202943
    4ec0:	6e6f736c 	cdpvs	3, 6, cr7, cr15, cr12, {3}
    4ec4:	43207465 			; <UNDEFINED> instruction: 0x43207465
    4ec8:	756d6d6f 	strbvc	r6, [sp, #-3439]!	; 0xfffff291
    4ecc:	6163696e 	cmnvs	r3, lr, ror #18
    4ed0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    4ed4:	32202c73 	eorcc	r2, r0, #29440	; 0x7300
    4ed8:	2d323030 	ldccs	0, cr3, [r2, #-192]!	; 0xffffff40
    4edc:	38313032 	ldmdacc	r1!, {r1, r4, r5, ip, sp}
    4ee0:	66654c00 	strbtvs	r4, [r5], -r0, lsl #24
    4ee4:	65766f74 	ldrbvs	r6, [r6, #-3956]!	; 0xfffff08c
    4ee8:	41522072 	cmpmi	r2, r2, ror r0
    4eec:	25203a4d 	strcs	r3, [r0, #-2637]!	; 0xfffff5b3
    4ef0:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
    4ef4:	00736574 	rsbseq	r6, r3, r4, ror r5
    4ef8:	50007473 	andpl	r7, r0, r3, ror r4
    4efc:	534f6369 	movtpl	r6, #62313	; 0xf369
    4f00:	6c616820 	stclvs	8, cr6, [r1], #-128	; 0xffffff80
    4f04:	00646574 	rsbeq	r6, r4, r4, ror r5

00004f08 <port_confs>:
    4f08:	00306080 	eorseq	r6, r0, r0, lsl #1
    4f0c:	00386080 	eorseq	r6, r8, r0, lsl #1
    4f10:	00186010 	andseq	r6, r8, r0, lsl r0
    4f14:	2010400f 	andscs	r4, r0, pc
    4f18:	30694000 	rsbcc	r4, r9, r0
    4f1c:	30714000 	rsbscc	r4, r1, r0
    4f20:	00b86008 	adcseq	r6, r8, r8
    4f24:	60c94000 	sbcvs	r4, r9, r0
    4f28:	60d14000 	sbcsvs	r4, r1, r0
    4f2c:	60d94000 	sbcsvs	r4, r9, r0
    4f30:	60e14000 	rscvs	r4, r1, r0
    4f34:	00096380 	andeq	r6, r9, r0, lsl #7
    4f38:	00f16b80 	rscseq	r6, r1, r0, lsl #23
    4f3c:	20402000 	subcs	r2, r0, r0
    4f40:	00486080 	subeq	r6, r8, r0, lsl #1
    4f44:	00506080 	subseq	r6, r0, r0, lsl #1
    4f48:	00a06000 	adceq	r6, r0, r0
    4f4c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    4f50:	74750065 	ldrbtvc	r0, [r5], #-101	; 0xffffff9b
    4f54:	73006120 	movwvc	r6, #288	; 0x120
    4f58:	64610077 	strbtvs	r0, [r1], #-119	; 0xffffff89
    4f5c:	69007664 	stmdbvs	r0, {r2, r5, r6, r9, sl, ip, sp, lr}
    4f60:	616d006f 	cmnvs	sp, pc, rrx
    4f64:	6d00316c 	stfvss	f3, [r0, #-432]	; 0xfffffe50
    4f68:	00676c61 	rsbeq	r6, r7, r1, ror #24
    4f6c:	0069706b 	rsbeq	r7, r9, fp, rrx
    4f70:	636c616d 	cmnvs	ip, #1073741851	; 0x4000001b
	...

00004f75 <__pi_hex_enc_table>:
    4f75:	33323130 	teqcc	r2, #48, 2
    4f79:	37363534 			; <UNDEFINED> instruction: 0x37363534
    4f7d:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    4f81:	46454443 	strbmi	r4, [r5], -r3, asr #8
    4f85:	30766374 	rsbscc	r6, r6, r4, ror r3
    4f89:	69640031 	stmdbvs	r4!, {r0, r4, r5}^
    4f8d:	736f7073 	cmnvc	pc, #115	; 0x73
    4f91:	65732065 	ldrbvs	r2, [r3, #-101]!	; 0xffffff9b
    4f95:	69640073 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^
    4f99:	736f7073 	cmnvc	pc, #115	; 0x73
    4f9d:	68702065 	ldmdavs	r0!, {r0, r2, r5, r6, sp}^
    4fa1:	63740079 	cmnvs	r4, #121	; 0x79
    4fa5:	00323076 	eorseq	r3, r2, r6, ror r0
    4fa9:	30766374 	rsbscc	r6, r6, r4, ror r3
    4fad:	63740033 	cmnvs	r4, #51	; 0x33
    4fb1:	00343076 	eorseq	r3, r4, r6, ror r0
    4fb5:	30766374 	rsbscc	r6, r6, r4, ror r3
    4fb9:	63740035 	cmnvs	r4, #53	; 0x35
    4fbd:	00363076 	eorseq	r3, r6, r6, ror r0
    4fc1:	31766374 	cmncc	r6, r4, ror r3
    4fc5:	63740030 	cmnvs	r4, #48	; 0x30
    4fc9:	00313176 	eorseq	r3, r1, r6, ror r1
    4fcd:	31766374 	cmncc	r6, r4, ror r3
    4fd1:	63740036 	cmnvs	r4, #54	; 0x36
    4fd5:	00373176 	eorseq	r3, r7, r6, ror r1
    4fd9:	31766374 	cmncc	r6, r4, ror r3
    4fdd:	63740038 	cmnvs	r4, #56	; 0x38
    4fe1:	00333276 	eorseq	r3, r3, r6, ror r2
    4fe5:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    4fe9:	63740032 	cmnvs	r4, #50	; 0x32
    4fed:	00363276 	eorseq	r3, r6, r6, ror r2
    4ff1:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    4ff5:	63740037 	cmnvs	r4, #55	; 0x37
    4ff9:	00383276 	eorseq	r3, r8, r6, ror r2
    4ffd:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    5001:	63740039 	cmnvs	r4, #57	; 0x39
    5005:	00303376 	eorseq	r3, r0, r6, ror r3
    5009:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    500d:	63740031 	cmnvs	r4, #49	; 0x31
    5011:	00323376 	eorseq	r3, r2, r6, ror r3
    5015:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    5019:	63740033 	cmnvs	r4, #51	; 0x33
    501d:	00343376 	eorseq	r3, r4, r6, ror r3

00005021 <__input_pins>:
    5021:	9c9b9a99 	vldmials	fp, {s18-s170}
	...

00005026 <__button_list>:
    5026:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
    502a:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    502e:	00706f20 	rsbseq	r6, r0, r0, lsr #30
    5032:	00317472 	eorseq	r7, r1, r2, ror r4
    5036:	20505548 	subscs	r5, r0, r8, asr #10
    503a:	20786c25 	rsbscs	r6, r8, r5, lsr #24
    503e:	00786c25 	rsbseq	r6, r8, r5, lsr #24
    5042:	676e6168 	strbvs	r6, [lr, -r8, ror #2]!
    5046:	30636920 	rsbcc	r6, r3, r0, lsr #18
    504a:	50554800 	subspl	r4, r5, r0, lsl #16
    504e:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    5052:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    5056:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    505a:	32747200 	rsbscc	r7, r4, #0, 4
    505e:	44414200 	strbmi	r4, [r1], #-512	; 0xfffffe00
    5062:	00585220 	subseq	r5, r8, r0, lsr #4
    5066:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    506a:	00797020 	rsbseq	r7, r9, r0, lsr #32
    506e:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    5072:	31636300 	cmncc	r3, r0, lsl #6
    5076:	626d2033 	rsbvs	r2, sp, #51	; 0x33
    507a:	31434300 	mrscc	r4, (UNDEF: 115)
    507e:	3a303533 	bcc	c12552 <__ccfg+0xbf25aa>
    5082:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    5086:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    508a:	00642520 	rsbeq	r2, r4, r0, lsr #10

0000508e <patable>:
    508e:	12c304c0 	sbcne	r0, r3, #192, 8	; 0xc0000000
    5092:	184418c5 	stmdane	r4, {r0, r2, r6, r7, fp, ip}^
    5096:	32ce24c9 	sbccc	r2, lr, #-922746880	; 0xc9000000
    509a:	bc2b58d8 	stclt	8, cr5, [fp], #-864	; 0xfffffca0
	...

000050a0 <patchGenfskRfe>:
    50a0:	000061a3 	andeq	r6, r0, r3, lsr #3
    50a4:	1307147f 	movwne	r1, #29823	; 0x747f
    50a8:	24f1004d 	ldrbtcs	r0, [r1], #77	; 0x4d
    50ac:	3f131f2e 	svccc	0x00131f2e
    50b0:	003f0ab0 	ldrhteq	r0, [pc], -r0
    50b4:	0000ff07 	andeq	pc, r0, r7, lsl #30
    50b8:	40004030 	andmi	r4, r0, r0, lsr r0
    50bc:	40034001 	andmi	r4, r3, r1
    50c0:	400f4007 	andmi	r4, pc, r7
    50c4:	40cf404f 	sbcmi	r4, pc, pc, asr #32
    50c8:	43cf41cf 	bicmi	r4, pc, #-1073741773	; 0xc0000033
    50cc:	4fcf47cf 	svcmi	0x00cf47cf
    50d0:	2fcf3fcf 	svccs	0x00cf3fcf
    50d4:	0fcf1fcf 	svceq	0x00cf1fcf
    50d8:	00000000 	andeq	r0, r0, r0
    50dc:	0008000f 	andeq	r0, r8, pc
    50e0:	003f0000 	eorseq	r0, pc, r0
    50e4:	00400000 	subeq	r0, r0, r0
    50e8:	0000003f 	andeq	r0, r0, pc, lsr r0
    50ec:	00680004 	rsbeq	r0, r8, r4
    50f0:	00dc000e 	sbcseq	r0, ip, lr
    50f4:	00430006 	subeq	r0, r3, r6
    50f8:	0005001a 	andeq	r0, r5, sl, lsl r0
    50fc:	00000000 	andeq	r0, r0, r0
    5100:	00000002 	andeq	r0, r0, r2
    5104:	0000003f 	andeq	r0, r0, pc, lsr r0
    5108:	00040000 	andeq	r0, r4, r0
    510c:	000000c0 	andeq	r0, r0, r0, asr #1
    5110:	00c00004 	sbceq	r0, r0, r4
    5114:	00070000 	andeq	r0, r7, r0
    5118:	9100c050 	qaddls	ip, r0, r0
    511c:	c0707000 	rsbsgt	r7, r0, r0
    5120:	70009100 	andvc	r9, r0, r0, lsl #2
    5124:	00213182 	eoreq	r3, r1, r2, lsl #3
    5128:	b1109131 	tstlt	r0, r1, lsr r1
    512c:	81017000 	mrshi	r7, (UNDEF: 1)
    5130:	a100b101 	tstge	r0, r1, lsl #2
    5134:	91323182 	teqls	r2, r2, lsl #3
    5138:	9101b110 	tstls	r1, r0, lsl r1
    513c:	81411011 	cmphi	r1, r1, lsl r0
    5140:	404f2241 	submi	r2, pc, r1, asr #4
    5144:	700006f1 	strdvc	r0, [r0], -r1
    5148:	9101c051 	qaddls	ip, r1, r1
    514c:	39101830 	ldmdbcc	r0, {r4, r5, fp, ip}
    5150:	d0083183 	andle	r3, r8, r3, lsl #3
    5154:	6f413118 	svcvs	0x00413118
    5158:	91310031 	teqls	r1, r1, lsr r0
    515c:	1483b110 	strne	fp, [r3], #272	; 0x110
    5160:	685b1614 	ldmdavs	fp, {r2, r4, r9, sl, ip}^
    5164:	10257000 	eorne	r7, r5, r0
    5168:	9100c050 	qaddls	ip, r0, r0
    516c:	c0c0c3f4 	strdgt	ip, [r0], #52	; 0x34
    5170:	6f031420 	svcvs	0x00031420
    5174:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    5178:	3182c022 	orrcc	ip, r2, r2, lsr #32
    517c:	91310021 	teqls	r1, r1, lsr #32
    5180:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    5184:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    5188:	3182c082 	orrcc	ip, r2, r2, lsl #1
    518c:	91310021 	teqls	r1, r1, lsr #32
    5190:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    5194:	c0a21031 	adcgt	r1, r2, r1, lsr r0
    5198:	00213182 	eoreq	r3, r1, r2, lsl #3
    519c:	b1109131 	tstlt	r0, r1, lsr r1
    51a0:	31151050 	tstcc	r5, r0, asr r0
    51a4:	92051405 	andls	r1, r5, #83886080	; 0x5000000
    51a8:	643f7000 	ldrtvs	r7, [pc], #-0	; 51b0 <patchGenfskRfe+0x110>
    51ac:	1031c052 	eorsne	ip, r1, r2, asr r0
    51b0:	31610631 	cmncc	r1, r1, lsr r6
    51b4:	644202c1 	strbvs	r0, [r2], #-705	; 0xfffffd3f
    51b8:	1031c112 	eorsne	ip, r1, r2, lsl r1
    51bc:	06713921 	ldrbteq	r3, [r1], -r1, lsr #18
    51c0:	02e13151 	rsceq	r3, r1, #1073741844	; 0x40000014
    51c4:	70006442 	andvc	r6, r0, r2, asr #8
    51c8:	6599658a 	ldrvs	r6, [r9, #1418]	; 0x58a
    51cc:	8220c088 	eorhi	ip, r0, #136	; 0x88
    51d0:	39803950 	stmibcc	r0, {r4, r6, r8, fp, ip, sp}
    51d4:	409f1e00 	addsmi	r1, pc, r0, lsl #28
    51d8:	3001c041 	andcc	ip, r1, r1, asr #32
    51dc:	1a181418 	bne	60a244 <__ccfg+0x5ea29c>
    51e0:	8230c089 	eorshi	ip, r0, #137	; 0x89
    51e4:	39803960 	stmibcc	r0, {r5, r6, r8, fp, ip, sp}
    51e8:	40a91e00 	adcmi	r1, r9, r0, lsl #28
    51ec:	3001c041 	andcc	ip, r1, r1, asr #32
    51f0:	1a191419 	bne	64a25c <__ccfg+0x62a2b4>
    51f4:	9136643c 	teqls	r6, ip, lsr r4
    51f8:	9134b110 	teqls	r4, r0, lsl r1
    51fc:	b054b110 	subslt	fp, r4, r0, lsl r1
    5200:	a0547100 	subsge	r7, r4, r0, lsl #2
    5204:	80f0b064 	rscshi	fp, r0, r4, rrx
    5208:	40af2200 	adcmi	r2, pc, r0, lsl #4
    520c:	90b01240 	adcsls	r1, r0, r0, asr #4
    5210:	8253b032 	subshi	fp, r3, #50	; 0x32
    5214:	39533953 	ldmdbcc	r3, {r0, r1, r4, r6, r8, fp, ip, sp}^
    5218:	643f6485 	ldrtvs	r6, [pc], #-1157	; 5220 <patchGenfskRfe+0x180>
    521c:	c122c111 			; <UNDEFINED> instruction: 0xc122c111
    5220:	c1706442 	cmngt	r0, r2, asr #8
    5224:	c11168c2 	tstgt	r1, r2, asr #17
    5228:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    522c:	68c7c170 	stmiavs	r7, {r4, r5, r6, r8, lr, pc}^
    5230:	9100c050 	qaddls	ip, r0, r0
    5234:	92987227 	addsls	r7, r8, #1879048194	; 0x70000002
    5238:	16141615 			; <UNDEFINED> instruction: 0x16141615
    523c:	10531042 	subsne	r1, r3, r2, asr #32
    5240:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    5244:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    5248:	31313981 	teqcc	r1, r1, lsl #19
    524c:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    5250:	72276572 	eorvc	r6, r7, #478150656	; 0x1c800000
    5254:	b2709299 	rsbslt	r9, r0, #-1879048183	; 0x90000009
    5258:	10731062 	rsbsne	r1, r3, r2, rrx
    525c:	8231c3f0 	eorshi	ip, r1, #240, 6	; 0xc0000003
    5260:	39213121 	stmdbcc	r1!, {r0, r5, r8, ip, sp}
    5264:	101b3981 	andsne	r3, fp, r1, lsl #19
    5268:	c0e26572 	rscgt	r6, r2, r2, ror r5
    526c:	82603182 	rsbhi	r3, r0, #-2147483616	; 0x80000020
    5270:	39803180 	stmibcc	r0, {r7, r8, ip, sp}
    5274:	b0610002 	rsblt	r0, r1, r2
    5278:	91327100 	teqls	r2, r0, lsl #2
    527c:	a051b110 	subsge	fp, r1, r0, lsl r1
    5280:	7227b061 	eorvc	fp, r7, #97	; 0x61
    5284:	68f3c230 	ldmvs	r3!, {r4, r5, r9, lr, pc}^
    5288:	12800000 	addne	r0, r0, #0
    528c:	b03290b0 	ldrhtlt	r9, [r2], -r0
    5290:	c0507000 	subsgt	r7, r0, r0
    5294:	72279100 	eorvc	r9, r7, #0, 2
    5298:	10629299 	mlsne	r2, r9, r2, r9
    529c:	c3f01073 	mvnsgt	r1, #115	; 0x73
    52a0:	31218231 			; <UNDEFINED> instruction: 0x31218231
    52a4:	39813921 	stmibcc	r1, {r0, r5, r8, fp, ip, sp}
    52a8:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    52ac:	7227657e 	eorvc	r6, r7, #528482304	; 0x1f800000
    52b0:	b2709298 	rsbslt	r9, r0, #152, 4	; 0x80000009
    52b4:	10531042 	subsne	r1, r3, r2, asr #32
    52b8:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    52bc:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    52c0:	31313981 	teqcc	r1, r1, lsl #19
    52c4:	657e101a 	ldrbvs	r1, [lr, #-26]!	; 0xffffffe6
    52c8:	b061a051 	rsblt	sl, r1, r1, asr r0
    52cc:	c0b07227 	adcsgt	r7, r0, r7, lsr #4
    52d0:	643f6918 	ldrtvs	r6, [pc], #-2328	; 52d8 <patchGenfskRfe+0x238>
    52d4:	c122c101 			; <UNDEFINED> instruction: 0xc122c101
    52d8:	c1016442 	tstgt	r1, r2, asr #8
    52dc:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    52e0:	643c1a15 	ldrtvs	r1, [ip], #-2581	; 0xfffff5eb
    52e4:	b1109135 	tstlt	r0, r5, lsr r1
    52e8:	64858253 	strvs	r8, [r5], #595	; 0x253
    52ec:	90b012c0 	adcsls	r1, r0, r0, asr #5
    52f0:	7000b032 	andvc	fp, r0, r2, lsr r0
    52f4:	c272643f 	rsbsgt	r6, r2, #1056964608	; 0x3f000000
    52f8:	6442c081 	strbvs	ip, [r2], #-129	; 0xffffff7f
    52fc:	c111c122 	tstgt	r1, r2, lsr #2
    5300:	c0026442 	andgt	r6, r2, r2, asr #8
    5304:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    5308:	c331c062 	teqgt	r1, #98	; 0x62
    530c:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    5310:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    5314:	c111c302 	tstgt	r1, r2, lsl #6
    5318:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    531c:	64853953 	strvs	r3, [r5], #2387	; 0x953
    5320:	6447c3e2 	strbvs	ip, [r7], #-994	; 0xfffffc1e
    5324:	41402211 	cmpmi	r0, r1, lsl r2
    5328:	c881c242 	stmgt	r1, {r1, r6, r9, lr, pc}
    532c:	c2526442 	subsgt	r6, r2, #1107296256	; 0x42000000
    5330:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    5334:	cee1c272 	mcrgt	2, 7, ip, cr1, cr2, {3}
    5338:	c2026442 	andgt	r6, r2, #1107296256	; 0x42000000
    533c:	6442c881 	strbvs	ip, [r2], #-2177	; 0xfffff77f
    5340:	c801c202 	stmdagt	r1, {r1, r9, lr, pc}
    5344:	c0b06442 	adcsgt	r6, r0, r2, asr #8
    5348:	70006954 	andvc	r6, r0, r4, asr r9
    534c:	c242643f 	subgt	r6, r2, #1056964608	; 0x3f000000
    5350:	6442c801 	strbvs	ip, [r2], #-2049	; 0xfffff7ff
    5354:	c011c252 	andsgt	ip, r1, r2, asr r2
    5358:	c2726442 	rsbsgt	r6, r2, #1107296256	; 0x42000000
    535c:	6442c0e1 	strbvs	ip, [r2], #-225	; 0xffffff1f
    5360:	c101c002 	tstgt	r1, r2
    5364:	c0626442 	rsbgt	r6, r2, r2, asr #8
    5368:	6442c301 	strbvs	ip, [r2], #-769	; 0xfffffcff
    536c:	c101c122 	tstgt	r1, r2, lsr #2
    5370:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    5374:	6442c101 	strbvs	ip, [r2], #-257	; 0xfffffeff
    5378:	c101c302 	tstgt	r1, r2, lsl #6
    537c:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    5380:	70006485 	andvc	r6, r0, r5, lsl #9
    5384:	7100b061 	tstvc	r0, r1, rrx
    5388:	1c231412 	cfstrsne	mvf1, [r3], #-72	; 0xffffffb8
    538c:	91334d7a 	teqls	r3, sl, ror sp
    5390:	7000b110 	andvc	fp, r0, r0, lsl r1
    5394:	b1109132 	tstlt	r0, r2, lsr r1
    5398:	70006972 	andvc	r6, r0, r2, ror r9
    539c:	7100b061 	tstvc	r0, r1, rrx
    53a0:	1c321813 	ldcne	8, cr1, [r2], #-76	; 0xffffffb4
    53a4:	91324986 	teqls	r2, r6, lsl #19
    53a8:	7000b110 	andvc	fp, r0, r0, lsl r1
    53ac:	b1109133 	tstlt	r0, r3, lsr r1
    53b0:	7000697e 	andvc	r6, r0, lr, ror r9
    53b4:	6447c0c2 	strbvs	ip, [r7], #-194	; 0xffffff3e
    53b8:	c0c21015 	sbcgt	r1, r2, r5, lsl r0
    53bc:	64471612 	strbvs	r1, [r7], #-1554	; 0xfffff9ee
    53c0:	14153141 	ldrne	r3, [r5], #-321	; 0xfffffebf
    53c4:	3180c0c0 	orrcc	ip, r0, r0, asr #1
    53c8:	10541405 	subsne	r1, r4, r5, lsl #8
    53cc:	040478a0 	streq	r7, [r4], #-2208	; 0xfffff760
    53d0:	c0e67000 	rscgt	r7, r6, r0
    53d4:	cc013186 	stfgts	f3, [r1], {134}	; 0x86
    53d8:	10671416 	rsbne	r1, r7, r6, lsl r4
    53dc:	c3f08261 	mvnsgt	r8, #268435462	; 0x10000006
    53e0:	14170401 	ldrne	r0, [r7], #-1025	; 0xfffffbff
    53e4:	73067000 	movwvc	r7, #24576	; 0x6000
    53e8:	720b7205 	andvc	r7, fp, #1342177280	; 0x50000000
    53ec:	b050720e 	subslt	r7, r0, lr, lsl #4
    53f0:	80817100 	addhi	r7, r1, r0, lsl #2
    53f4:	a050b060 	subsge	fp, r0, r0, rrx
    53f8:	22418092 	subcs	r8, r1, #146	; 0x92
    53fc:	808045c3 	addhi	r4, r0, r3, asr #11
    5400:	0410c1f1 	ldreq	ip, [r0], #-497	; 0xfffffe0f
    5404:	11011630 	tstne	r1, r0, lsr r6
    5408:	6c011401 	cfstrsvs	mvf1, [r1], {1}
    540c:	61d761d6 	ldrsbvs	r6, [r7, #22]
    5410:	61d961d8 	ldrsbvs	r6, [r9, #24]
    5414:	61db61da 	ldrsbvs	r6, [fp, #26]
    5418:	61de61dc 	ldrsbvs	r6, [lr, #28]
    541c:	61e261e0 	mvnvs	r6, r0, ror #3
    5420:	633661e4 	teqvs	r6, #228, 2	; 0x39
    5424:	80916339 	addshi	r6, r1, r9, lsr r3
    5428:	0421c0f2 	strteq	ip, [r1], #-242	; 0xffffff0e
    542c:	80823121 	addhi	r3, r2, r1, lsr #2
    5430:	14122a42 	ldrne	r2, [r2], #-2626	; 0xfffff5be
    5434:	11011632 	tstne	r1, r2, lsr r6
    5438:	6c011421 	cfstrsvs	mvf1, [r1], {33}	; 0x21
    543c:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    5440:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    5444:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    5448:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    544c:	61e661e6 	mvnvs	r6, r6, ror #3
    5450:	61e661e6 	mvnvs	r6, r6, ror #3
    5454:	61e661e6 	mvnvs	r6, r6, ror #3
    5458:	61e66494 			; <UNDEFINED> instruction: 0x61e66494
    545c:	61e664f9 	strdvs	r6, [r6, #73]!	; 0x49
    5460:	61e6652a 	mvnvs	r6, sl, lsr #10
    5464:	61e66556 	mvnvs	r6, r6, asr r5
    5468:	61e66746 	mvnvs	r6, r6, asr #14
    546c:	90b01210 	adcsls	r1, r0, r0, lsl r2
    5470:	7306720e 	movwvc	r7, #25102	; 0x620e
    5474:	12107205 	andsne	r7, r0, #1342177280	; 0x50000000
    5478:	61a79030 			; <UNDEFINED> instruction: 0x61a79030
    547c:	673ccff0 			; <UNDEFINED> instruction: 0x673ccff0
    5480:	c003c1d4 	ldrdgt	ip, [r3], -r4
    5484:	6454c3c0 	ldrbvs	ip, [r4], #-960	; 0xfffffc40
    5488:	91507840 	cmpls	r0, r0, asr #16
    548c:	92107850 	andsls	r7, r0, #80, 16	; 0x500000
    5490:	92207860 	eorls	r7, r0, #96, 16	; 0x600000
    5494:	92307870 	eorsls	r7, r0, #112, 16	; 0x700000
    5498:	92407880 	subls	r7, r0, #128, 16	; 0x800000
    549c:	92607890 	rsbls	r7, r0, #144, 16	; 0x900000
    54a0:	91907830 	orrsls	r7, r0, r0, lsr r8
    54a4:	39408210 	stmdbcc	r0, {r4, r9, pc}^
    54a8:	100106f0 	strdne	r0, [r1], -r0	; <UNPREDICTABLE>
    54ac:	14103110 	ldrne	r3, [r0], #-272	; 0xfffffef0
    54b0:	67429200 	strbvs	r9, [r2, -r0, lsl #4]
    54b4:	a0bc61e6 	adcsge	r6, ip, r6, ror #3
    54b8:	a054a0e2 	subsge	sl, r4, r2, ror #1
    54bc:	225080f0 	subscs	r8, r0, #240	; 0xf0
    54c0:	80404615 	subhi	r4, r0, r5, lsl r6
    54c4:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    54c8:	a040620d 	subge	r6, r0, sp, lsl #4
    54cc:	318d822d 	orrcc	r8, sp, sp, lsr #4
    54d0:	8210398d 	andshi	r3, r0, #2310144	; 0x234000
    54d4:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    54d8:	821a1009 	andshi	r1, sl, #9
    54dc:	041a394a 	ldreq	r3, [sl], #-2378	; 0xfffff6b6
    54e0:	39808210 	stmibcc	r0, {r4, r9, pc}
    54e4:	100e0410 	andne	r0, lr, r0, lsl r4
    54e8:	10bc10ab 	adcsne	r1, ip, fp, lsr #1
    54ec:	646310c2 	strbtvs	r1, [r3], #-194	; 0xffffff3e
    54f0:	cfe07229 	svcgt	0x00e07229
    54f4:	b013673c 	andslt	r6, r3, ip, lsr r7
    54f8:	66c8b003 	strbvs	fp, [r8], r3
    54fc:	b050b053 	subslt	fp, r0, r3, asr r0
    5500:	b064b054 	rsblt	fp, r4, r4, asr r0
    5504:	66a5b013 	ssatvs	fp, #6, r3
    5508:	22e08210 	rsccs	r8, r0, #16, 4
    550c:	66ae4638 			; <UNDEFINED> instruction: 0x66ae4638
    5510:	80417100 	subhi	r7, r1, r0, lsl #2
    5514:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    5518:	221080f0 	andscs	r8, r0, #240	; 0xf0
    551c:	22f0464b 	rscscs	r4, r0, #78643200	; 0x4b00000
    5520:	b0644718 	rsblt	r4, r4, r8, lsl r7
    5524:	42382231 	eorsmi	r2, r8, #268435459	; 0x10000003
    5528:	66ceb063 	strbvs	fp, [lr], r3, rrx
    552c:	22e08210 	rsccs	r8, r0, #16, 4
    5530:	66704638 			; <UNDEFINED> instruction: 0x66704638
    5534:	b0646238 	rsblt	r6, r4, r8, lsr r2
    5538:	318f816f 	orrcc	r8, pc, pc, ror #2
    553c:	dfd03d8f 	svcle	0x00d03d8f
    5540:	673c92ff 			; <UNDEFINED> instruction: 0x673c92ff
    5544:	80417100 	subhi	r7, r1, r0, lsl #2
    5548:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    554c:	80f0b064 	rscshi	fp, r0, r4, rrx
    5550:	42652250 	rsbmi	r2, r5, #80, 4
    5554:	8211b063 	andshi	fp, r1, #99	; 0x63
    5558:	466022c1 	strbtmi	r2, [r0], -r1, asr #5
    555c:	670566ce 	strvs	r6, [r5, -lr, asr #13]
    5560:	22d18211 	sbcscs	r8, r1, #268435457	; 0x10000001
    5564:	66704652 			; <UNDEFINED> instruction: 0x66704652
    5568:	81616252 	cmnhi	r1, r2, asr r2
    556c:	31818172 	orrcc	r8, r1, r2, ror r1
    5570:	31823d81 	orrcc	r3, r2, r1, lsl #27
    5574:	efc03d82 	svc	0x00c03d82
    5578:	930292f1 	movwls	r9, #8945	; 0x22f1
    557c:	620b673c 	andvs	r6, fp, #60, 14	; 0xf00000
    5580:	91c081b0 	strhls	r8, [r0, #16]
    5584:	829781d3 	addshi	r8, r7, #-1073741772	; 0xc0000034
    5588:	18d3a290 	ldmne	r3, {r4, r7, r9, sp, pc}^
    558c:	0bf34e7f 	bleq	ffcd8f90 <_estack+0xdfcd3f90>
    5590:	1ce31613 	stclne	6, cr1, [r3], #76	; 0x4c
    5594:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    5598:	143b81e3 	ldrtne	r8, [fp], #-483	; 0xfffffe1d
    559c:	1cba6290 	lfmne	f6, 4, [sl], #576	; 0x240
    55a0:	1e23468b 	cfmadda32ne	mvax4, mvax4, mvfx3, mvfx11
    55a4:	1ce34a8b 	vstmiane	r3!, {s9-s147}
    55a8:	b2904e8b 	addslt	r4, r0, #2224	; 0x8b0
    55ac:	428b2207 	addmi	r2, fp, #1879048192	; 0x70000000
    55b0:	1a1ba290 	bne	6edff8 <__ccfg+0x6ce050>
    55b4:	1ce36296 	sfmne	f6, 2, [r3], #600	; 0x258
    55b8:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    55bc:	183b81e3 	ldmdane	fp!, {r0, r1, r5, r6, r7, r8, pc}
    55c0:	4ea01cab 	cdpmi	12, 10, cr1, cr0, cr11, {5}
    55c4:	4aa21c9b 	bmi	fe88c838 <_estack+0xde887838>
    55c8:	42a41cbc 	adcmi	r1, r4, #188, 24	; 0xbc00
    55cc:	821010b2 	andshi	r1, r0, #178	; 0xb2
    55d0:	429d22d0 	addsmi	r2, sp, #208, 4
    55d4:	221080f0 	andscs	r8, r0, #240	; 0xf0
    55d8:	646346a4 	strbtvs	r4, [r3], #-1700	; 0xfffff95c
    55dc:	62a466a5 	adcvs	r6, r4, #173015040	; 0xa500000
    55e0:	629410ab 	addsvs	r1, r4, #171	; 0xab
    55e4:	6294109b 	addsvs	r1, r4, #155	; 0x9b
    55e8:	82307000 	eorshi	r7, r0, #0
    55ec:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    55f0:	7100b063 	tstvc	r0, r3, rrx
    55f4:	10bc6aa8 	adcsne	r6, ip, r8, lsr #21
    55f8:	7000b0e0 	andvc	fp, r0, r0, ror #1
    55fc:	91c281b2 	strhls	r8, [r2, #18]
    5600:	820181d2 	andhi	r8, r1, #-2147483596	; 0x80000034
    5604:	81511812 	cmphi	r1, r2, lsl r8
    5608:	82411812 	subhi	r1, r1, #1179648	; 0x120000
    560c:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    5610:	4abf1c12 	bmi	fefcc660 <_estack+0xdefc7660>
    5614:	b032b0e2 	eorslt	fp, r2, r2, ror #1
    5618:	92f2dfb0 	rscsls	sp, r2, #176, 30	; 0x2c0
    561c:	c7f1673c 			; <UNDEFINED> instruction: 0xc7f1673c
    5620:	4ec31421 	cdpmi	4, 12, cr1, cr3, cr1, {1}
    5624:	9162c812 	cmnls	r2, r2, lsl r8
    5628:	b0319172 	eorslt	r9, r1, r2, ror r1
    562c:	7000b0e1 	andvc	fp, r0, r1, ror #1
    5630:	c006c008 	andgt	ip, r6, r8
    5634:	9160c800 	cmnls	r0, r0, lsl #16
    5638:	70009170 	andvc	r9, r0, r0, ror r1
    563c:	81b08201 	lslshi	r8, r1, #4
    5640:	81d091c0 	bicshi	r9, r0, r0, asr #3
    5644:	81511810 	cmphi	r1, r0, lsl r8
    5648:	14061810 	strne	r1, [r6], #-2064	; 0xfffff7f0
    564c:	824280e1 	subhi	r8, r2, #225	; 0xe1
    5650:	3d823182 	stfccs	f3, [r2, #520]	; 0x208
    5654:	4ae41c20 	bmi	ff90c6dc <_estack+0xdf9076dc>
    5658:	2221b0e2 	eorcs	fp, r1, #226	; 0xe2
    565c:	b03246e8 	eorslt	r4, r2, r8, ror #13
    5660:	dfa01005 	svcle	0x00a01005
    5664:	673c92f5 			; <UNDEFINED> instruction: 0x673c92f5
    5668:	42e82221 	rscmi	r2, r8, #268435458	; 0x10000002
    566c:	b032a0e2 	eorslt	sl, r2, r2, ror #1
    5670:	39418231 	stmdbcc	r1, {r0, r4, r5, r9, pc}^
    5674:	0401c0f0 	streq	ip, [r1], #-240	; 0xffffff10
    5678:	42f61e01 	rscsmi	r1, r6, #1, 28
    567c:	c0101618 	andsgt	r1, r0, r8, lsl r6
    5680:	1c083010 	stcne	0, cr3, [r8], {16}
    5684:	10604704 	rsbne	r4, r0, r4, lsl #14
    5688:	10063c10 	andne	r3, r6, r0, lsl ip
    568c:	1461c7f1 	strbtne	ip, [r1], #-2033	; 0xfffff80f
    5690:	c8164efa 	ldmdagt	r6, {r1, r3, r4, r5, r6, r7, r9, sl, fp, lr}
    5694:	81719166 	cmnhi	r1, r6, ror #2
    5698:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    569c:	4b011c16 	blmi	4c6fc <__ccfg+0x2c754>
    56a0:	b0319176 	eorslt	r9, r1, r6, ror r1
    56a4:	c008c006 	andgt	ip, r8, r6
    56a8:	81617000 	cmnhi	r1, r0
    56ac:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    56b0:	39808240 	stmibcc	r0, {r6, r9, pc}
    56b4:	1cf11801 	ldclne	8, cr1, [r1], #4
    56b8:	14014b17 	strne	r4, [r1], #-2839	; 0xfffff4e9
    56bc:	22c080b0 	sbccs	r8, r0, #176	; 0xb0
    56c0:	b0bc4717 	adcslt	r4, ip, r7, lsl r7
    56c4:	ef90b033 	svc	0x0090b033
    56c8:	930f92f1 	movwls	r9, #62193	; 0xf2f1
    56cc:	7000673c 	andvc	r6, r0, ip, lsr r7
    56d0:	b063a003 	rsblt	sl, r3, r3
    56d4:	b0efb064 	rsclt	fp, pc, r4, rrx
    56d8:	71006556 	tstvc	r0, r6, asr r5
    56dc:	22008040 	andcs	r8, r0, #64	; 0x40
    56e0:	b064472b 	rsblt	r4, r4, fp, lsr #14
    56e4:	a0ef652a 	rscge	r6, pc, sl, lsr #10
    56e8:	80407100 	subhi	r7, r0, r0, lsl #2
    56ec:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    56f0:	b003b064 	andlt	fp, r3, r4, rrx
    56f4:	82016238 	andhi	r6, r1, #56, 4	; 0x80000003
    56f8:	31828162 	orrcc	r8, r2, r2, ror #2
    56fc:	ef803d82 	svc	0x00803d82
    5700:	930292f1 	movwls	r9, #8945	; 0x22f1
    5704:	a003673c 	andge	r6, r3, ip, lsr r7
    5708:	61e66556 	mvnvs	r6, r6, asr r5
    570c:	646380a2 	strbtvs	r8, [r3], #-162	; 0xffffff5e
    5710:	b05061e6 	subslt	r6, r0, r6, ror #3
    5714:	61e67100 	mvnvs	r7, r0, lsl #2
    5718:	82d092e0 	sbcshi	r9, r0, #224, 4
    571c:	473d2200 	ldrmi	r2, [sp, -r0, lsl #4]!
    5720:	7000b2c0 	andvc	fp, r0, r0, asr #5
    5724:	22f080a0 	rscscs	r8, r0, #160	; 0xa0
    5728:	b0304359 	eorslt	r4, r0, r9, asr r3
    572c:	3162c102 	cmncc	r2, r2, lsl #2
    5730:	80a0c001 	adchi	ip, r0, r1
    5734:	43521e00 	cmpmi	r2, #0, 28
    5738:	435322f0 	cmpmi	r3, #240, 4
    573c:	3160f5a0 	msrcc	SPSR_, r0, lsr #11
    5740:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    5744:	1a101020 	bne	4097cc <__ccfg+0x3e9824>
    5748:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    574c:	16121611 			; <UNDEFINED> instruction: 0x16121611
    5750:	70006b54 	andvc	r6, r0, r4, asr fp

00005754 <patchImageGenfsk>:
    5754:	210004ad 	smlatbcs	r0, sp, r4, r0
    5758:	21000449 	tstcs	r0, r9, asr #8
    575c:	2100047d 	tstcs	r0, sp, ror r4
    5760:	21000481 	smlabbcs	r0, r1, r4, r0
    5764:	21000511 	tstcs	r0, r1, lsl r5
    5768:	21000591 			; <UNDEFINED> instruction: 0x21000591
    576c:	21000641 	tstcs	r0, r1, asr #12
    5770:	4710b5f8 			; <UNDEFINED> instruction: 0x4710b5f8
    5774:	460eb5f8 			; <UNDEFINED> instruction: 0x460eb5f8
    5778:	25012100 	strcs	r2, [r1, #-256]	; 0xffffff00
    577c:	473004ad 	ldrmi	r0, [r0, -sp, lsr #9]!
    5780:	7803480a 	stmdavc	r3, {r1, r3, fp, lr}
    5784:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
    5788:	d00b079b 	mulle	fp, fp, r7
    578c:	78204c12 	stmdavc	r0!, {r1, r4, sl, fp, lr}
    5790:	d00728ff 	strdle	r2, [r7], -pc	; <UNPREDICTABLE>
    5794:	702121ff 	strdvc	r2, [r1], -pc	; <UNPREDICTABLE>
    5798:	240f490e 	strcs	r4, [pc], #-2318	; 57a0 <patchImageGenfsk+0x4c>
    579c:	43200224 			; <UNDEFINED> instruction: 0x43200224
    57a0:	82c83160 	sbchi	r3, r8, #96, 2
    57a4:	b5f8bdf8 	ldrblt	fp, [r8, #3576]!	; 0xdf8
    57a8:	47004801 	strmi	r4, [r0, -r1, lsl #16]
    57ac:	2100026b 	tstcs	r0, fp, ror #4
    57b0:	00004ce5 	andeq	r4, r0, r5, ror #25
    57b4:	e0014809 	and	r4, r1, r9, lsl #16
    57b8:	0c004808 	stceq	8, cr4, [r0], {8}
    57bc:	49054c06 	stmdbmi	r5, {r1, r2, sl, fp, lr}
    57c0:	2aff7822 	bcs	fffe3850 <_estack+0xdffde850>
    57c4:	7acad101 	bvc	ff2b9bd0 <_estack+0xdf2b4bd0>
    57c8:	31607022 	cmncc	r0, r2, lsr #32
    57cc:	467082c8 	ldrbtmi	r8, [r0], -r8, asr #5
    57d0:	47001c80 	strmi	r1, [r0, -r0, lsl #25]
    57d4:	40086200 	andmi	r6, r8, r0, lsl #4
    57d8:	210006a4 	smlatbcs	r0, r4, r6, r0
    57dc:	08080f07 	stmdaeq	r8, {r0, r1, r2, r8, r9, sl, fp}
    57e0:	4708b4f0 			; <UNDEFINED> instruction: 0x4708b4f0
    57e4:	4603b570 			; <UNDEFINED> instruction: 0x4603b570
    57e8:	29014615 	stmdbcs	r1, {r0, r2, r4, r9, sl, lr}
    57ec:	2900d006 	stmdbcs	r0, {r1, r2, ip, lr, pc}
    57f0:	4a11d006 	bmi	479810 <__ccfg+0x459868>
    57f4:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    57f8:	bd70ffbb 	ldcllt	15, cr15, [r0, #-748]!	; 0xfffffd14
    57fc:	e000480f 	and	r4, r0, pc, lsl #16
    5800:	2405480f 	strcs	r4, [r5], #-2063	; 0xfffff7f1
    5804:	d8034283 	stmdale	r3, {r0, r1, r7, r9, lr}
    5808:	1e640840 	cdpne	8, 6, cr0, cr4, cr0, {2}
    580c:	dcf92c00 	ldclle	12, cr2, [r9]
    5810:	200140e3 	andcs	r4, r1, r3, ror #1
    5814:	18180340 	ldmdane	r8, {r6, r8, r9}
    5818:	29010b82 	stmdbcs	r1, {r1, r7, r8, r9, fp}
    581c:	4906d007 	stmdbmi	r6, {r0, r1, r2, ip, lr, pc}
    5820:	31802300 	orrcc	r2, r0, r0, lsl #6
    5824:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    5828:	b2e0ffa5 	rsclt	pc, r0, #660	; 0x294
    582c:	4902bd70 	stmdbmi	r2, {r4, r5, r6, r8, sl, fp, ip, sp, pc}
    5830:	316c4b04 	cmncc	ip, r4, lsl #22
    5834:	0000e7f6 	strdeq	lr, [r0], -r6
    5838:	00005c83 	andeq	r5, r0, r3, lsl #25
    583c:	2386bca0 	orrcs	fp, r6, #160, 24	; 0xa000
    5840:	230d8300 	movwcs	r8, #54016	; 0xd300
    5844:	21000674 	tstcs	r0, r4, ror r6
    5848:	4e1ab5f8 	mrcmi	5, 0, fp, cr10, cr8, {7}
    584c:	6b714605 	blvs	1c57068 <__ccfg+0x1c370c0>
    5850:	09cc4819 	stmibeq	ip, {r0, r3, r4, fp, lr}^
    5854:	2d0001e4 	stfcss	f0, [r0, #-912]	; 0xfffffc70
    5858:	4918d011 	ldmdbmi	r8, {r0, r4, ip, lr, pc}
    585c:	29027809 	stmdbcs	r2, {r0, r3, fp, ip, sp, lr}
    5860:	7b00d00f 	blvc	398a4 <__ccfg+0x198fc>
    5864:	b6724304 	ldrbtlt	r4, [r2], -r4, lsl #6
    5868:	4f152001 	svcmi	0x00152001
    586c:	47b80240 	ldrmi	r0, [r8, r0, asr #4]!
    5870:	38204811 	stmdacc	r0!, {r0, r4, fp, lr}
    5874:	09c18800 	stmibeq	r1, {fp, pc}^
    5878:	d00407c9 	andle	r0, r4, r9, asr #15
    587c:	7ac0e016 	bvc	ff03d8dc <_estack+0xdf0388dc>
    5880:	7b40e7f0 	blvc	103f848 <__ccfg+0x101f8a0>
    5884:	490fe7ee 	stmdbmi	pc, {r1, r2, r3, r5, r6, r7, r8, r9, sl, sp, lr, pc}	; <UNPREDICTABLE>
    5888:	61cc6374 	bicvs	r6, ip, r4, ror r3
    588c:	07c00a40 	strbeq	r0, [r0, r0, asr #20]
    5890:	2001d00c 	andcs	sp, r1, ip
    5894:	6b310380 	blvs	c4669c <__ccfg+0xc266f4>
    5898:	d0012d00 	andle	r2, r1, r0, lsl #26
    589c:	e0004301 	and	r4, r0, r1, lsl #6
    58a0:	46084381 	strmi	r4, [r8], -r1, lsl #7
    58a4:	49076331 	stmdbmi	r7, {r0, r4, r5, r8, r9, sp, lr}
    58a8:	63483940 	movtvs	r3, #35136	; 0x8940
    58ac:	47b82000 	ldrmi	r2, [r8, r0]!
    58b0:	bdf8b662 	ldcllt	6, cr11, [r8, #392]!	; 0x188
    58b4:	21000280 	smlabbcs	r0, r0, r2, r0
    58b8:	21000088 	smlabbcs	r0, r8, r0, r0
    58bc:	2100029b 			; <UNDEFINED> instruction: 0x2100029b
    58c0:	00003f7b 	andeq	r3, r0, fp, ror pc
    58c4:	40044040 	andmi	r4, r4, r0, asr #32
    58c8:	4a22b510 	bmi	8b2d10 <__ccfg+0x892d68>
    58cc:	61512100 	cmpvs	r1, r0, lsl #2
    58d0:	68894921 	stmvs	r9, {r0, r5, r8, fp, lr}
    58d4:	d40900c9 	strle	r0, [r9], #-201	; 0xffffff37
    58d8:	4b204921 	blmi	817d64 <__ccfg+0x7f7dbc>
    58dc:	429805ca 	addsmi	r0, r8, #847249408	; 0x32800000
    58e0:	d8016b4b 	stmdale	r1, {r0, r1, r3, r6, r8, r9, fp, sp, lr}
    58e4:	e0004313 	and	r4, r0, r3, lsl r3
    58e8:	634b4393 	movtvs	r4, #45971	; 0xb393
    58ec:	f7ff491d 			; <UNDEFINED> instruction: 0xf7ff491d
    58f0:	bd10ff77 	ldclt	15, cr15, [r0, #-476]	; 0xfffffe24
    58f4:	4d1ab538 	cfldr32mi	mvfx11, [sl, #-224]	; 0xffffff20
    58f8:	28007f28 	stmdacs	r0, {r3, r5, r8, r9, sl, fp, ip, sp, lr}
    58fc:	481ad127 	ldmdami	sl, {r0, r1, r2, r5, r8, ip, lr, pc}
    5900:	09c08800 	stmibeq	r0, {fp, pc}^
    5904:	d12207c0 	smlawtle	r2, r0, r7, r0
    5908:	69604c12 	stmdbvs	r0!, {r1, r4, sl, fp, lr}^
    590c:	d11e2800 	tstle	lr, r0, lsl #16
    5910:	f0004668 			; <UNDEFINED> instruction: 0xf0004668
    5914:	4668f845 	strbtmi	pc, [r8], -r5, asr #16	; <UNPREDICTABLE>
    5918:	28017800 	stmdacs	r1, {fp, ip, sp, lr}
    591c:	4668d117 			; <UNDEFINED> instruction: 0x4668d117
    5920:	28107840 	ldmdacs	r0, {r6, fp, ip, sp, lr}
    5924:	2008d213 	andcs	sp, r8, r3, lsl r2
    5928:	6a686160 	bvs	1a1deb0 <__ccfg+0x19fdf08>
    592c:	01400940 	cmpeq	r0, r0, asr #18
    5930:	4a0e6020 	bmi	39d9b8 <__ccfg+0x37da10>
    5934:	62d12100 	sbcsvs	r2, r1, #0, 2
    5938:	21024a0d 	tstcs	r2, sp, lsl #20
    593c:	21016011 	tstcs	r1, r1, lsl r0
    5940:	60204308 	eorvs	r4, r0, r8, lsl #6
    5944:	43082103 	movwmi	r2, #33027	; 0x8103
    5948:	60206268 	eorvs	r6, r0, r8, ror #4
    594c:	4809bd38 	stmdami	r9, {r3, r4, r5, r8, sl, fp, ip, sp, pc}
    5950:	bd384780 	ldclt	7, cr4, [r8, #-512]!	; 0xfffffe00
    5954:	40044000 	andmi	r4, r4, r0
    5958:	21000018 	tstcs	r0, r8, lsl r0
    595c:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    5960:	21000280 	smlabbcs	r0, r0, r2, r0
    5964:	000068cf 	andeq	r6, r0, pc, asr #17
    5968:	21000068 	tstcs	r0, r8, rrx
    596c:	40041100 	andmi	r1, r4, r0, lsl #2
    5970:	e000e280 	and	lr, r0, r0, lsl #5
    5974:	00003bc3 	andeq	r3, r0, r3, asr #23
    5978:	28004907 	stmdacs	r0, {r0, r1, r2, r8, fp, lr}
    597c:	2004d000 	andcs	sp, r4, r0
    5980:	b6724a06 	ldrbtlt	r4, [r2], -r6, lsl #20
    5984:	07c97809 	strbeq	r7, [r9, r9, lsl #16]
    5988:	5810d001 	ldmdapl	r0, {r0, ip, lr, pc}
    598c:	2080e000 	addcs	lr, r0, r0
    5990:	b240b662 	sublt	fp, r0, #102760448	; 0x6200000
    5994:	00004770 	andeq	r4, r0, r0, ror r7
    5998:	2100026b 	tstcs	r0, fp, ror #4
    599c:	40046058 	andmi	r6, r4, r8, asr r0
    59a0:	4801b403 	stmdami	r1, {r0, r1, sl, ip, sp, pc}
    59a4:	bd019001 	stclt	0, cr9, [r1, #-4]
    59a8:	00006fa5 	andeq	r6, r0, r5, lsr #31
    59ac:	00000000 	andeq	r0, r0, r0
    59b0:	00030001 	andeq	r0, r3, r1
    59b4:	001f000a 	andseq	r0, pc, sl
    59b8:	00eb0059 	rsceq	r0, fp, r9, asr r0
    59bc:	04ea0239 	strbteq	r0, [sl], #569	; 0x239
    59c0:	129709f9 	addsne	r0, r7, #4079616	; 0x3e4000
    59c4:	32a11feb 	adccc	r1, r1, #940	; 0x3ac
    59c8:	660a4a78 			; <UNDEFINED> instruction: 0x660a4a78
    59cc:	9e8c82fa 	mcrls	2, 4, r8, cr12, cr10, {7}
    59d0:	c917b663 	ldmdbgt	r7, {r0, r1, r5, r6, r9, sl, ip, sp, pc}
    59d4:	deedd664 	cdple	6, 14, cr13, cr13, cr4, {3}
    59d8:	e5e0e3c1 	strb	lr, [r0, #961]!	; 0x3c1
    59dc:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

000059e0 <ratable>:
    59e0:	12c5000b 	sbcne	r0, r5, #11
    59e4:	2de00007 	stclcs	0, cr0, [r0, #28]!
    59e8:	8000000f 	andhi	r0, r0, pc
    59ec:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    59f0:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    59f4:	6374206c 	cmnvs	r4, #108	; 0x6c
    59f8:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
    59fc:	756e5f65 	strbvc	r5, [lr, #-3941]!	; 0xfffff09b
    5a00:	00006c6c 	andeq	r6, r0, ip, ror #24

00005a04 <plug_null>:
    5a04:	00003035 	andeq	r3, r0, r5, lsr r0
    5a08:	00002fdd 	ldrdeq	r2, [r0], -sp
    5a0c:	00003001 	andeq	r3, r0, r1
    5a10:	00003025 	andeq	r3, r0, r5, lsr #32
    5a14:	0000302d 	andeq	r3, r0, sp, lsr #32
    5a18:	00003031 	andeq	r3, r0, r1, lsr r0
    5a1c:	00000000 	andeq	r0, r0, r0
    5a20:	00000001 	andeq	r0, r0, r1

Disassembly of section .data:

20000000 <sfd>:
int sfd = -1;
20000000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000004 <__pi_seed>:
lword	__pi_seed = 327672838L;
20000004:	1387e406 	orrne	lr, r7, #100663296	; 0x6000000

20000008 <cmd_cs>:
static rfc_CMD_PROP_CS_t cmd_cs = {
20000008:	00003805 	andeq	r3, r0, r5, lsl #16
2000000c:	200000a0 	andcs	r0, r0, r0, lsr #1
20000010:	00000000 	andeq	r0, r0, r0
20000014:	00000300 	andeq	r0, r0, r0, lsl #6
20000018:	0404c60b 	streq	ip, [r4], #-1547	; 0xfffff9f5
2000001c:	04330080 	ldrteq	r0, [r3], #-128	; 0xffffff80
20000020:	00002000 	andeq	r2, r0, r0

20000024 <cmd_srt>:
static rfc_CMD_SYNC_START_RAT_t	cmd_srt = { .commandNo = CMD_SYNC_START_RAT };
20000024:	0000080a 	andeq	r0, r0, sl, lsl #16
	...

20000038 <offdelay>:
		offdelay = RADIO_DEFAULT_OFFDELAY;
20000038:	 	andeq	r0, r2, r0, lsl #2

2000003a <vrate>:
2000003a:	 	stmdaeq	r3, {r1}

2000003c <RF_cmdFs>:
2000003c:	00000803 	andeq	r0, r0, r3, lsl #16
	...
20000048:	03640100 	cmneq	r4, #0, 2
	...

20000054 <RF_cmdPropRadioDivSetup>:
20000054:	00003807 	andeq	r3, r0, r7, lsl #16
	...
20000060:	03210100 			; <UNDEFINED> instruction: 0x03210100
20000064:	0080000f 	addeq	r0, r0, pc
20000068:	00a00424 	adceq	r0, r0, r4, lsr #8
2000006c:	bc2b0008 	stclt	0, cr0, [fp], #-32	; 0xffffffe0
20000070:	200000b8 	strhcs	r0, [r0], -r8
20000074:	80000364 	andhi	r0, r0, r4, ror #6
20000078:	00000005 	andeq	r0, r0, r5

2000007c <RF_cmdPropRx>:
2000007c:	00003802 	andeq	r3, r0, r2, lsl #16
	...
20000088:	88180100 	ldmdahi	r8, {r8}
2000008c:	930b51de 	movwls	r5, #45534	; 0xb1de
20000090:	01bbaa7d 			; <UNDEFINED> instruction: 0x01bbaa7d
	...

200000a0 <RF_cmdPropTx>:
200000a0:	00003801 	andeq	r3, r0, r1, lsl #16
	...
200000ac:	1e180100 	mufnee	f0, f0, f0
200000b0:	930b51de 	movwls	r5, #45534	; 0xb1de
200000b4:	00000000 	andeq	r0, r0, r0

200000b8 <pOverrides>:
200000b8:	00001807 	andeq	r1, r0, r7, lsl #16
200000bc:	00374038 	eorseq	r4, r7, r8, lsr r0
200000c0:	000684a3 	andeq	r8, r6, r3, lsr #9
200000c4:	7f004020 	svcvc	0x00004020
200000c8:	00404064 	subeq	r4, r0, r4, rrx
200000cc:	b1070503 	tstlt	r7, r3, lsl #10
200000d0:	05330523 	ldreq	r0, [r3, #-1315]!	; 0xfffffadd
200000d4:	0a480583 	beq	212016e8 <_estack+0x11fc6e8>
200000d8:	7ab80603 	bvc	1ee018ec <__ccfg+0x1ede1944>
200000dc:	849f0002 	ldrhi	r0, [pc], #2	; 200000e4 <pOverrides+0x2c>
200000e0:	c7440002 	strbgt	r0, [r4, -r2]
200000e4:	02010403 	andeq	r0, r1, #50331648	; 0x3000000
200000e8:	00108463 	andseq	r8, r0, r3, ror #8
200000ec:	04b00243 	ldrteq	r0, [r0], #579	; 0x243
200000f0:	7ddf0002 	ldclvc	0, cr0, [pc, #8]	; 20000100 <pOverrides+0x48>
200000f4:	00038883 	andeq	r8, r3, r3, lsl #17
200000f8:	35f16084 	ldrbcc	r6, [r1, #132]!	; 0x84
200000fc:	411a6088 	tstmi	sl, r8, lsl #1
20000100:	8213608c 	andshi	r6, r3, #140	; 0x8c
20000104:	00fb88a3 	rscseq	r8, fp, r3, lsr #17
20000108:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000010c:	00000000 	andeq	r0, r0, r0

20000110 <_impure_ptr>:
20000110:	20000118 	andcs	r0, r0, r8, lsl r1
20000114:	00000000 	andeq	r0, r0, r0

20000118 <impure_data>:
20000118:	00000000 	andeq	r0, r0, r0
2000011c:	20000404 	andcs	r0, r0, r4, lsl #8
20000120:	2000046c 	andcs	r0, r0, ip, ror #8
20000124:	200004d4 	ldrdcs	r0, [r0], -r4
	...
200001c0:	00000001 	andeq	r0, r0, r1
200001c4:	00000000 	andeq	r0, r0, r0
200001c8:	abcd330e 	blge	1f34ce08 <__ccfg+0x1f32ce60>
200001cc:	e66d1234 			; <UNDEFINED> instruction: 0xe66d1234
200001d0:	0005deec 	andeq	sp, r5, ip, ror #29
200001d4:	0000000b 	andeq	r0, r0, fp
	...

Disassembly of section .bss:

20000540 <array.6522>:
	...

20000554 <discovery_wait_flag.6582>:
20000554:	00000000 	andeq	r0, r0, r0

20000558 <incoming_packet.6521>:
20000558:	00000000 	andeq	r0, r0, r0

2000055c <packet.6501>:
2000055c:	00000000 	andeq	r0, r0, r0

20000560 <response_flag>:
word response_flag=0;
20000560:	00000000 	andeq	r0, r0, r0

20000564 <response_message_5.6520>:
20000564:	00000000 	andeq	r0, r0, r0

20000568 <user_provided_index.6584>:
	...

20000569 <user_provided_receiver_id.6585>:
	...

2000056a <user_provided_record.6583>:
	...

2000057e <setdel>:
	...

20000580 <urates>:
static word urates [N_UARTS];
20000580:	00000000 	andeq	r0, r0, r0

20000584 <__PCB>:
20000584:	00000000 	andeq	r0, r0, r0

20000588 <ioreq>:
static devreqfun_t ioreq [MAX_DEVICES];
20000588:	00000000 	andeq	r0, r0, r0

2000058c <mcfree>:
static	aword	mnfree [MALLOC_NPOOLS], mcfree [MALLOC_NPOOLS];
2000058c:	00000000 	andeq	r0, r0, r0

20000590 <mevent>:
20000590:	00000000 	andeq	r0, r0, r0

20000594 <mnfree>:
20000594:	00000000 	andeq	r0, r0, r0

20000598 <mpools>:
static	aword	*mpools [MALLOC_NPOOLS];
20000598:	00000000 	andeq	r0, r0, r0

2000059c <descriptors>:
	...

200005bc <oqueues>:
	...

200005c8 <physical>:
	...

200005d4 <physinfo>:
	...

200005e0 <plugins>:
	...

200005ec <dopen>:
	...

200005ed <dstat>:
	...

200005ee <bckf_timer>:
	...

200005f0 <channel>:
200005f0:	00000000 	andeq	r0, r0, r0

200005f4 <drvprcs>:
static aword drvprcs, qevent;
200005f4:	00000000 	andeq	r0, r0, r0

200005f8 <dstate>:
200005f8:	00000000 	andeq	r0, r0, r0

200005fc <paylen>:
static	int paylen = 0;			// Current TX payload length
200005fc:	00000000 	andeq	r0, r0, r0

20000600 <physid>:
static word	physid,
20000600:	00000000 	andeq	r0, r0, r0

20000604 <qevent>:
static aword drvprcs, qevent;
20000604:	00000000 	andeq	r0, r0, r0

20000608 <rbuffl>:
20000608:	00000000 	andeq	r0, r0, r0

2000060c <rfTrim>:
	...

2000061c <rxstat>:
	...

20000628 <statid>:
	...

2000062a <txtries>:
	...

2000062c <ndsc_null>:
2000062c:	00000000 	andeq	r0, r0, r0

20000630 <len.5699>:
20000630:	00000000 	andeq	r0, r0, r0

20000634 <ptr.5698>:
20000634:	00000000 	andeq	r0, r0, r0

20000638 <__inpline>:
char *__inpline = NULL;
20000638:	00000000 	andeq	r0, r0, r0

2000063c <len.5700>:
2000063c:	00000000 	andeq	r0, r0, r0

20000640 <ptr.5699>:
20000640:	00000000 	andeq	r0, r0, r0

20000644 <oscHfGlobals>:
	...

20000658 <powerQualGlobals>:
	...

20000660 <response_checker>:
	...

20000668 <reason>:
	...

2000069a <CHOICE>:
	...

2000069c <node_db>:
struct Node *node_db; // globally defined struct, represents the node.
2000069c:	00000000 	andeq	r0, r0, r0

200006a0 <__pi_uart>:
	...

200006a8 <system_event_count>:
200006a8:	00000000 	andeq	r0, r0, r0

200006ac <entropy>:
200006ac:	00000000 	andeq	r0, r0, r0

200006b0 <__pi_mintk>:
	...

200006b2 <__pi_old>:
	...

200006b4 <__pi_systat>:
	...

200006bc <__pi_new>:
200006bc:	00000000 	andeq	r0, r0, r0

200006c0 <__pi_utims>:
	...

200006d0 <__pi_curr>:
200006d0:	00000000 	andeq	r0, r0, r0

Disassembly of section .ccfg:

0001ffa8 <__ccfg>:
   1ffa8:	01800000 	orreq	r0, r0, r0
   1ffac:	ff880010 			; <UNDEFINED> instruction: 0xff880010
   1ffb0:	0058fffd 	ldrsheq	pc, [r8], #-253	; 0xffffff03	; <UNPREDICTABLE>
   1ffb4:	f3bfff3a 	vcvt.u32.f32	d15, d26, #1
   1ffb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
   1ffdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffe0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
   1ffe4:	ffc500c5 			; <UNDEFINED> instruction: 0xffc500c5
   1ffe8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   1ffec:	00000000 	andeq	r0, r0, r0
   1fff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section ._user_heap_stack:

200006d4 <._user_heap_stack>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00001cae 	andeq	r1, r0, lr, lsr #25
       4:	00000003 	andeq	r0, r0, r3
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000000a3 	andeq	r0, r0, r3, lsr #1
    return node->data_base.item_array[index];
      10:	0008320c 	andeq	r3, r8, ip, lsl #4
      14:	000df700 	andeq	pc, sp, r0, lsl #14
      18:	00017000 	andeq	r7, r1, r0
	...
      24:	07040200 	streq	r0, [r4, -r0, lsl #4]
      28:	0000042d 	andeq	r0, r0, sp, lsr #8
      2c:	69050403 	stmdbvs	r5, {r0, r1, sl}
      30:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
      34:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      38:	16015e02 	strne	r5, [r1], -r2, lsl #28
      3c:	00000025 	andeq	r0, r0, r5, lsr #32
			i = k;
      40:	58060102 	stmdapl	r6, {r1, r8}
				j->Next = k;
      44:	0200000c 	andeq	r0, r0, #12
      48:	0c560801 	mrrceq	8, 0, r0, r6, cr1
}
      4c:	02020000 	andeq	r0, r2, #0
      50:	000a6605 	andeq	r6, sl, r5, lsl #12
      54:	07020200 	streq	r0, [r2, -r0, lsl #4]
		release;
      58:	00000d53 	andeq	r0, r0, r3, asr sp
      5c:	f8050402 			; <UNDEFINED> instruction: 0xf8050402
			nq++;
      60:	02000007 	andeq	r0, r0, #7
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
      68:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      6c:	0007f305 	andeq	pc, r7, r5, lsl #6
      70:	07080200 	streq	r0, [r8, -r0, lsl #4]
      74:	00000423 	andeq	r0, r0, r3, lsr #8
      78:	000e3605 	andeq	r3, lr, r5, lsl #12
      7c:	0e2e0300 	cdpeq	3, 2, cr0, cr14, cr0, {0}
      80:	0000005c 	andeq	r0, r0, ip, asr r0
      84:	0002f605 	andeq	pc, r2, r5, lsl #12
      88:	0e740300 	cdpeq	3, 7, cr0, cr4, cr0, {0}
      8c:	0000005c 	andeq	r0, r0, ip, asr r0
	if (!button_still_pressed (__button_list [pbutton]))
      90:	a5030406 	strge	r0, [r3, #-1030]	; 0xfffffbfa
      94:	0000b203 	andeq	fp, r0, r3, lsl #4
      98:	07670700 	strbeq	r0, [r7, -r0, lsl #14]!
	if (baction == NULL)
      9c:	a7030000 	strge	r0, [r3, -r0]
      a0:	0000330c 	andeq	r3, r0, ip, lsl #6
	(*baction) (pbutton);
      a4:	0aaf0700 	beq	febc1cac <_estack+0xdebbccac>
endthread
      a8:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	0000b213 	andeq	fp, r0, r3, lsl r2
      b0:	47080000 	strmi	r0, [r8, -r0]
endthread
      b4:	c2000000 	andgt	r0, r0, #0
      b8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
      bc:	00000025 	andeq	r0, r0, r5, lsr #32
      c0:	080a0003 	stmdaeq	sl, {r0, r1}
      c4:	e609a203 	str	sl, [r9], -r3, lsl #4
fsm sender(struct ResponseMessage *message) {
      c8:	0b000000 	bleq	d0 <sender+0x8>
      cc:	00000390 	muleq	r0, r0, r3
      d0:	2c07a403 	cfstrscs	mvf10, [r7], {3}
}
      d4:	00000000 	andeq	r0, r0, r0
      d8:	0005fc0b 	andeq	pc, r5, fp, lsl #24
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	05a90300 	streq	r0, [r9, #768]!	; 0x300
      e0:	00000090 	muleq	r0, r0, r0
      e4:	b0050004 	andlt	r0, r5, r4
      e8:	03000008 	movweq	r0, #8
		packet[0] = 0;
      ec:	00c203aa 	sbceq	r0, r2, sl, lsr #7
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	040c0000 	streq	r0, [ip], #-0
		*p = message->tpe;p++;
      f4:	000b8b0d 	andeq	r8, fp, sp, lsl #22
      f8:	00110400 	andseq	r0, r1, r0, lsl #8
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      fc:	0000010c 	andeq	r0, r0, ip, lsl #2
		*p = message->sender_id;p++;
     100:	0008680e 	andeq	r6, r8, lr, lsl #16
		*p = message->receiver_id;p++;
     104:	0000f200 	andeq	pc, r0, r0, lsl #4
		switch(message->tpe) {
     108:	00010000 	andeq	r0, r1, r0
     10c:	00083d05 	andeq	r3, r8, r5, lsl #26
     110:	17160400 	ldrne	r0, [r6, -r0, lsl #8]
		tcv_endp(packet);
     114:	00000063 	andeq	r0, r0, r3, rrx
     118:	00024a05 	andeq	r4, r2, r5, lsl #20
		ser_out(CONFIRM_message, "Message sent\r\n");
     11c:	0d0c0500 	cfstr32eq	mvfx0, [ip, #-0]
     120:	0000002c 	andeq	r0, r0, ip, lsr #32
}
     124:	00072505 	andeq	r2, r7, r5, lsl #10
		finish;
     128:	1b230400 	blne	8c1130 <__ccfg+0x8a1188>
     12c:	00000118 	andeq	r0, r0, r8, lsl r1
				*p = message->status;p++;
     130:	0003290f 	andeq	r2, r3, pc, lsl #18
     134:	34041800 	strcc	r1, [r4], #-2048	; 0xfffff800
				strncpy(p, message->record, sizeof(message->record));
     138:	00018a08 	andeq	r8, r1, r8, lsl #20
				*p = message->padding;p++;
     13c:	0eb10b00 	vmoveq.f64	d0, #16	; 0x40800000  4.0
				strncpy(p, message->record, sizeof(message->record));
     140:	36040000 	strcc	r0, [r4], -r0
				strncpy(p, message->record, sizeof(message->record));
     144:	00018a13 	andeq	r8, r1, r3, lsl sl
     148:	5f100000 	svcpl	0x00100000
				strncpy(p, message->record, sizeof(message->record));
     14c:	3704006b 	strcc	r0, [r4, -fp, rrx]
				*p = message->record_index;p++;
     150:	00002c07 	andeq	r2, r0, r7, lsl #24
				*p = message->padding;
     154:	5d0b0400 	cfstrspl	mvf0, [fp, #-0]
				break;
     158:	0400000b 	streq	r0, [r0], #-11
     15c:	002c0b37 	eoreq	r0, ip, r7, lsr fp
     160:	0b080000 	bleq	200168 <__ccfg+0x1e01c0>
     164:	000043e2 	andeq	r4, r0, r2, ror #7
     168:	2c143704 	ldccs	7, cr3, [r4], {4}
		node->nnodes[i] = 0;
     16c:	0c000000 	stceq	0, cr0, [r0], {-0}
     170:	0004570b 	andeq	r5, r4, fp, lsl #14
     174:	1b370400 	blne	dc117c <__ccfg+0xda11d4>
     178:	0000002c 	andeq	r0, r0, ip, lsr #32
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     17c:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
bool init_node(struct Node* node){
     180:	0b380400 	bleq	e01188 <__ccfg+0xde11e0>
    node->id  = 0;                  // default id value 0
     184:	00000190 	muleq	r0, r0, r1
    node->index = 0;                // default entry count 0
     188:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
    node->data_base.item_count = 0; // default no items in array
     18c:	00000130 	andeq	r0, r0, r0, lsr r1
	reset_array(node);
     190:	00010c08 	andeq	r0, r1, r8, lsl #24
    DEBUG_PRINT("Error initializing node...\n");
     194:	0001a000 	andeq	sl, r1, r0
     198:	00250900 	eoreq	r0, r5, r0, lsl #18
};
     19c:	00000000 	andeq	r0, r0, r0
     1a0:	000b780f 	andeq	r7, fp, pc, lsl #16
uint8_t generate_request_num(void){
     1a4:	3c042400 	cfstrscc	mvf2, [r4], {-0}
    return (uint8_t) (rand() % 255);
     1a8:	00022308 	andeq	r2, r2, r8, lsl #6
     1ac:	05670b00 	strbeq	r0, [r7, #-2816]!	; 0xfffff500
     1b0:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
}
     1b4:	00002c07 	andeq	r2, r0, r7, lsl #24
            node->nnodes[i] = 0; // set to null byte
     1b8:	b90b0000 	stmdblt	fp, {}	; <UNPREDICTABLE>
     1bc:	04000003 	streq	r0, [r0], #-3
     1c0:	002c073f 	eoreq	r0, ip, pc, lsr r7
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1c4:	0b040000 	bleq	1001cc <__ccfg+0xe0224>
};
     1c8:	0000035a 	andeq	r0, r0, sl, asr r3
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1cc:	2c074004 	stccs	0, cr4, [r7], {4}
     1d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
        node->data_base.item_array[index].data_entry[0] = '\0';
     1d4:	00066f0b 	andeq	r6, r6, fp, lsl #30
     1d8:	07410400 	strbeq	r0, [r1, -r0, lsl #8]
     1dc:	0000002c 	andeq	r0, r0, ip, lsr #32
        node->data_base.item_count -= 1;
     1e0:	094f0b0c 	stmdbeq	pc, {r2, r3, r8, r9, fp}^	; <UNPREDICTABLE>
};
     1e4:	42040000 	andmi	r0, r4, #0
fsm receiver(struct Node* node_db) {
     1e8:	00002c07 	andeq	r2, r0, r7, lsl #24
     1ec:	c90b1000 	stmdbgt	fp, {ip}
     1f0:	0400000a 	streq	r0, [r0], #-10
     1f4:	002c0743 	eoreq	r0, ip, r3, asr #14
     1f8:	0b140000 	bleq	500200 <__ccfg+0x4e0258>
     1fc:	0000033d 	andeq	r0, r0, sp, lsr r3
     200:	2c074404 	cfstrscs	mvf4, [r7], {4}
     204:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
		incoming_packet = tcv_rnp(receiving, sfd);
     208:	0005700b 	andeq	r7, r5, fp
     20c:	07450400 	strbeq	r0, [r5, -r0, lsl #8]
     210:	0000002c 	andeq	r0, r0, ip, lsr #32
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     214:	08eb0b1c 	stmiaeq	fp!, {r2, r3, r4, r8, r9, fp}^
     218:	46040000 	strmi	r0, [r4], -r0
     21c:	00002c07 	andeq	r2, r0, r7, lsl #24
     220:	12002000 	andne	r2, r0, #0
		switch (tpe){
     224:	00000032 	andeq	r0, r0, r2, lsr r0
     228:	4f040108 	svcmi	0x00040108
     22c:	00026808 	andeq	r6, r2, r8, lsl #16
     230:	0d1a0b00 	vldreq	d0, [sl, #-0]
     234:	50040000 	andpl	r0, r4, r0
     238:	00026809 	andeq	r6, r2, r9, lsl #16
     23c:	120b0000 	andne	r0, fp, #0
				DEBUG_PRINT("\r\nRECEIVED GID: %u", discovery_request_message->gid);
     240:	0400000c 	streq	r0, [r0], #-12
     244:	02680951 	rsbeq	r0, r8, #1327104	; 0x144000
				DEBUG_PRINT("\rRECEIVED TYPE: %u", discovery_request_message->tpe);
     248:	13800000 	orrne	r0, r0, #0
     24c:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
				DEBUG_PRINT("\r\nRECEIVED REQ NUM: %u", discovery_request_message->request_number);
     250:	0c0a5304 	stceq	3, cr5, [sl], {4}
     254:	00000001 	andeq	r0, r0, r1
				DEBUG_PRINT("\r\nRECEIVED SID: %u", discovery_request_message->sender_id);
     258:	0ea41301 	cdpeq	3, 10, cr1, cr4, cr1, {0}
     25c:	56040000 	strpl	r0, [r4], -r0
				DEBUG_PRINT("\r\nRECEIVED RID: %u", discovery_request_message->receiver_id);
     260:	00010c0a 	andeq	r0, r1, sl, lsl #24
     264:	00010400 	andeq	r0, r1, r0, lsl #8
				if (discovery_request_message->gid == node_db->gid){
     268:	0000f208 	andeq	pc, r0, r8, lsl #4
     26c:	00027800 	andeq	r7, r2, r0, lsl #16
					response_message_0->gid = discovery_request_message->gid;
     270:	00250900 	eoreq	r0, r5, r0, lsl #18
					response_message_0->tpe = DISCOVERY_RESPONSE;
     274:	001f0000 	andseq	r0, pc, r0
					response_message_0->request_number = discovery_request_message->request_number;
     278:	000a1112 	andeq	r1, sl, r2, lsl r1
					response_message_0->sender_id = node_db->id;
     27c:	04019000 	streq	r9, [r1], #-0
					response_message_0->receiver_id = discovery_request_message->sender_id;
     280:	02bb0862 	adcseq	r0, fp, #6422528	; 0x620000
					call sender(response_message_0, done_case);
     284:	b10b0000 	mrslt	r0, (UNDEF: 11)
     288:	0400000e 	streq	r0, [r0], #-14
     28c:	02bb1263 	adcseq	r1, fp, #805306374	; 0x30000006
     290:	0b000000 	bleq	298 <receiver+0xb0>
     294:	0000057f 	andeq	r0, r0, pc, ror r5
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
     298:	2c066404 	cfstrscs	mvf6, [r6], {4}
     29c:	04000000 	streq	r0, [r0], #-0
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
     2a0:	0002fe0b 	andeq	pc, r2, fp, lsl #28
     2a4:	09660400 	stmdbeq	r6!, {sl}^
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
     2a8:	000002c1 	andeq	r0, r0, r1, asr #5
     2ac:	00320b08 	eorseq	r0, r2, r8, lsl #22
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
     2b0:	67040000 	strvs	r0, [r4, -r0]
     2b4:	0002231e 	andeq	r2, r2, lr, lsl r3
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
     2b8:	11008800 	tstne	r0, r0, lsl #16
     2bc:	00027804 	andeq	r7, r2, r4, lsl #16
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2c0:	02d10800 	sbcseq	r0, r1, #0, 16
     2c4:	02d10000 	sbcseq	r0, r1, #0
     2c8:	25090000 	strcs	r0, [r9, #-0]
     2cc:	1f000000 	svcne	0x00000000
     2d0:	d7041100 	strle	r1, [r4, -r0, lsl #2]
     2d4:	14000002 	strne	r0, [r0], #-2
     2d8:	0cb20f01 	ldceq	15, cr0, [r2], #4
     2dc:	04080000 	streq	r0, [r8], #-0
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     2e0:	0301087a 	movweq	r0, #6266	; 0x187a
     2e4:	c40b0000 	strgt	r0, [fp], #-0
					node_db->index+=1;
     2e8:	0400000c 	streq	r0, [r0], #-12
		tcv_endp(incoming_packet);
     2ec:	0301117b 	movweq	r1, #4475	; 0x117b
     2f0:	0b000000 	bleq	2f8 <receiver+0x110>
		proceed receiving;
     2f4:	00001d8d 	andeq	r1, r0, sp, lsl #27
     2f8:	2c067c04 	stccs	12, cr7, [r6], {4}
		ser_out(response_1_create, "\r\nData Saved");
     2fc:	04000000 	streq	r0, [r0], #-0
     300:	47041100 	strmi	r1, [r4, -r0, lsl #2]
		proceed receiving;
     304:	0f000000 	svceq	0x00000000
		ser_out(response_1_delete, "\r\nRecord Deleted");
     308:	0000044f 	andeq	r0, r0, pc, asr #8
     30c:	08ba0468 	ldmeq	sl!, {r3, r5, r6, sl}
		proceed receiving;
     310:	0000044a 	andeq	r0, r0, sl, asr #8
     314:	00705f10 	rsbseq	r5, r0, r0, lsl pc
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     318:	0112bb04 	tsteq	r2, r4, lsl #22
     31c:	00000003 	andeq	r0, r0, r3
     320:	00725f10 	rsbseq	r5, r2, r0, lsl pc
     324:	2c07bc04 	stccs	12, cr11, [r7], {4}
		proceed receiving;
     328:	04000000 	streq	r0, [r0], #-0
     32c:	00775f10 	rsbseq	r5, r7, r0, lsl pc
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     330:	2c07bd04 	stccs	13, cr11, [r7], {4}
     334:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     338:	0001bb0b 	andeq	fp, r1, fp, lsl #22
		proceed receiving;
     33c:	09be0400 	ldmibeq	lr!, {sl}
     340:	0000004e 	andeq	r0, r0, lr, asr #32
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     344:	08540b0c 	ldmdaeq	r4, {r2, r3, r8, r9, fp}^
     348:	bf040000 	svclt	0x00040000
     34c:	00004e09 	andeq	r4, r0, r9, lsl #28
		proceed receiving;
     350:	5f100e00 	svcpl	0x00100e00
     354:	04006662 	streq	r6, [r0], #-1634	; 0xfffff99e
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     358:	02d911c0 	sbcseq	r1, r9, #192, 2	; 0x30
     35c:	0b100000 	bleq	400364 <__ccfg+0x3e03bc>
     360:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
		proceed receiving;
     364:	2c07c104 	stfcsd	f4, [r7], {4}
     368:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     36c:	0003030b 	andeq	r0, r3, fp, lsl #6
		proceed receiving;
     370:	0ac80400 	beq	ff201378 <_estack+0xdf1fc378>
     374:	000000f2 	strdeq	r0, [r0], -r2
}
     378:	1d1c0b1c 	vldrne	d0, [ip, #-112]	; 0xffffff90
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     37c:	ca040000 	bgt	100384 <__ccfg+0xe03dc>
     380:	0005cf09 	andeq	ip, r5, r9, lsl #30
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     384:	e30b2000 	movw	r2, #45056	; 0xb000
     388:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
     38c:	05fa09cc 	ldrbeq	r0, [sl, #2508]!	; 0x9cc
     390:	0b240000 	bleq	900398 <__ccfg+0x8e03f0>
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     394:	00000ed1 	ldrdeq	r0, [r0], -r1
     398:	1f0dcf04 	svcne	0x000dcf04
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     39c:	28000006 	stmdacs	r0, {r1, r2}
     3a0:	001cd10b 	andseq	sp, ip, fp, lsl #2
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     3a4:	09d00400 	ldmibeq	r0, {sl}^
     3a8:	0000063a 	andeq	r0, r0, sl, lsr r6
     3ac:	755f102c 	ldrbvc	r1, [pc, #-44]	; 388 <receiver+0x1a0>
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     3b0:	d3040062 	movwle	r0, #16482	; 0x4062
     3b4:	0002d911 	andeq	sp, r2, r1, lsl r9
     3b8:	5f103000 	svcpl	0x00103000
		strncpy(response_message->record, rec, 20);
     3bc:	04007075 	streq	r7, [r0], #-117	; 0xffffff8b
     3c0:	030112d4 	movweq	r1, #4820	; 0x12d4
     3c4:	10380000 	eorsne	r0, r8, r0
					call sender(response_message_4, done_case);
     3c8:	0072755f 	rsbseq	r7, r2, pc, asr r5
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3cc:	2c07d504 	cfstr32cs	mvfx13, [r7], {4}
     3d0:	3c000000 	stccc	0, cr0, [r0], {-0}
     3d4:	000f080b 	andeq	r0, pc, fp, lsl #16
     3d8:	11d80400 	bicsne	r0, r8, r0, lsl #8
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     3dc:	00000640 	andeq	r0, r0, r0, asr #12
     3e0:	0e510b40 	vnmlaeq.f64	d16, d1, d0
					if (delete_record(node_db, delete_record_message->record_index)){
     3e4:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
     3e8:	00065011 	andeq	r5, r6, r1, lsl r0
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3ec:	5f104300 	svcpl	0x00104300
     3f0:	0400626c 	streq	r6, [r0], #-620	; 0xfffffd94
     3f4:	02d911dc 	sbcseq	r1, r9, #220, 2	; 0x37
     3f8:	0b440000 	bleq	1100400 <__ccfg+0x10e0458>
     3fc:	00000b6f 	andeq	r0, r0, pc, ror #22
     400:	2c07df04 	stccs	15, cr13, [r7], {4}
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     404:	4c000000 	stcmi	0, cr0, [r0], {-0}
     408:	0004830b 	andeq	r8, r4, fp, lsl #6
    return node->data_base.item_array[index];
     40c:	0ae00400 	beq	ff801414 <_estack+0xdf7fc414>
     410:	00000078 	andeq	r0, r0, r8, ror r0
     414:	47400b50 	smlsldmi	r0, r0, r0, fp	; <UNPREDICTABLE>
     418:	e3040000 	movw	r0, #16384	; 0x4000
     41c:	00046912 	andeq	r6, r4, r2, lsl r9
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     420:	950b5400 	strls	r5, [fp, #-1024]	; 0xfffffc00
    return node->data_base.item_array[index];
     424:	0400000b 	streq	r0, [r0], #-11
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     428:	01240ce7 	smulwteq	r4, r7, ip
     42c:	0b580000 	bleq	1600434 <__ccfg+0x15e048c>
     430:	00000a19 	andeq	r0, r0, r9, lsl sl
		strncpy(response_message->record, rec, 20);
     434:	e60ee904 	str	lr, [lr], -r4, lsl #18
     438:	5c000000 	stcpl	0, cr0, [r0], {-0}
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     43c:	000e840b 	andeq	r8, lr, fp, lsl #8
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     440:	07ea0400 	strbeq	r0, [sl, r0, lsl #8]!
     444:	0000002c 	andeq	r0, r0, ip, lsr #32
     448:	01150064 	tsteq	r5, r4, rrx
     44c:	0000002c 	andeq	r0, r0, ip, lsr #32
     450:	00000469 	andeq	r0, r0, r9, ror #8
     454:	00046916 	andeq	r6, r4, r6, lsl r9
				if(!response_flag){
     458:	00f21600 	rscseq	r1, r2, r0, lsl #12
					response_flag=1;
     45c:	bd160000 	ldclt	0, cr0, [r6, #-0]
					trigger(&response_flag);
     460:	16000005 	strne	r0, [r0], -r5
				switch(response_message_5->status){
     464:	0000002c 	andeq	r0, r0, ip, lsr #32
     468:	74041100 	strvc	r1, [r4], #-256	; 0xffffff00
     46c:	17000004 	strne	r0, [r0, -r4]
     470:	00000469 	andeq	r0, r0, r9, ror #8
     474:	000d4c18 	andeq	r4, sp, r8, lsl ip
     478:	04042800 	streq	r2, [r4], #-2048	; 0xfffff800
     47c:	bd080265 	sfmlt	f0, 4, [r8, #-404]	; 0xfffffe6c
     480:	19000005 	stmdbne	r0, {r0, r2}
     484:	000008ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     488:	07026704 	streq	r6, [r2, -r4, lsl #14]
     48c:	0000002c 	andeq	r0, r0, ip, lsr #32
     490:	07dd1900 	ldrbeq	r1, [sp, r0, lsl #18]
     494:	6c040000 	stcvs	0, cr0, [r4], {-0}
     498:	06ac0b02 	strteq	r0, [ip], r2, lsl #22
     49c:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     4a0:	000002ee 	andeq	r0, r0, lr, ror #5
     4a4:	14026c04 	strne	r6, [r2], #-3076	; 0xfffff3fc
     4a8:	000006ac 	andeq	r0, r0, ip, lsr #13
     4ac:	0ef71908 	vmoveq.f16	s3, #120	; 0x3fc00000  1.5	; <UNPREDICTABLE>
     4b0:	6c040000 	stcvs	0, cr0, [r4], {-0}
     4b4:	06ac1e02 	strteq	r1, [ip], r2, lsl #28
     4b8:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
     4bc:	0000057a 	andeq	r0, r0, sl, ror r5
     4c0:	07026e04 	streq	r6, [r2, -r4, lsl #28]
     4c4:	0000002c 	andeq	r0, r0, ip, lsr #32
     4c8:	04cf1910 	strbeq	r1, [pc], #2320	; 4d0 <receiver+0x2e8>
     4cc:	6f040000 	svcvs	0x00040000
     4d0:	08ac0802 	stmiaeq	ip!, {r1, fp}
     4d4:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
     4d8:	00000e64 	andeq	r0, r0, r4, ror #28
						if (response_checker[0] == response_message_5->request_number){
     4dc:	07027204 	streq	r7, [r2, -r4, lsl #4]
     4e0:	0000002c 	andeq	r0, r0, ip, lsr #32
     4e4:	428e1930 	addmi	r1, lr, #48, 18	; 0xc0000
							switch(response_checker[1]){
     4e8:	73040000 	movwvc	r0, #16384	; 0x4000
     4ec:	08c21602 	stmiaeq	r2, {r1, r9, sl, ip}^
     4f0:	19340000 	ldmdbne	r4!, {}	; <UNPREDICTABLE>
     4f4:	00000785 	andeq	r0, r0, r5, lsl #15
									proceed response_1_create;
     4f8:	07027504 	streq	r7, [r2, -r4, lsl #10]
						proceed response_2;
     4fc:	0000002c 	andeq	r0, r0, ip, lsr #32
									proceed response_1_delete;
     500:	087f1938 	ldmdaeq	pc!, {r3, r4, r5, r8, fp, ip}^	; <UNPREDICTABLE>
									proceed response_1_retrieve;
     504:	77040000 	strvc	r0, [r4, -r0]
						proceed response_2;
     508:	08d40a02 	ldmeq	r4, {r1, r9, fp}^
						proceed response_3;
     50c:	193c0000 	ldmdbne	ip!, {}	; <UNPREDICTABLE>
						proceed response_4;
     510:	00000352 	andeq	r0, r0, r2, asr r3
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     514:	13027a04 	movwne	r7, #10756	; 0x2a04
     518:	0000018a 	andeq	r0, r0, sl, lsl #3
}
     51c:	040d1940 	streq	r1, [sp], #-2368	; 0xfffff6c0
     520:	7b040000 	blvc	100528 <__ccfg+0xe0580>
     524:	002c0702 	eoreq	r0, ip, r2, lsl #14
     528:	19440000 	stmdbne	r4, {}^	; <UNPREDICTABLE>
bool delete_all(struct Node *node){
     52c:	00000604 	andeq	r0, r0, r4, lsl #12
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     530:	13027c04 	movwne	r7, #11268	; 0x2c04
        for(int i = 0; i <= node->data_base.item_count; i++){
     534:	0000018a 	andeq	r0, r0, sl, lsl #3
            node->data_base.item_array[i].data_entry[0] = '\0';
     538:	081a1948 	ldmdaeq	sl, {r3, r6, r8, fp, ip}
        for(int i = 0; i <= node->data_base.item_count; i++){
     53c:	7d040000 	stcvc	0, cr0, [r4, #-0]
            node->data_base.item_array[i].timestamp = 0;
     540:	08da1402 	ldmeq	sl, {r1, sl, ip}^
        for(int i = 0; i <= node->data_base.item_count; i++){
     544:	194c0000 	stmdbne	ip, {}^	; <UNPREDICTABLE>
    node->data_base.item_count = 0;
     548:	00000b55 	andeq	r0, r0, r5, asr fp
}
     54c:	07028004 	streq	r8, [r2, -r4]
        return true;
     550:	0000002c 	andeq	r0, r0, ip, lsr #32
fsm root {
     554:	0c4e1950 	mcrreq	9, 5, r1, lr, cr0	; <UNPREDICTABLE>
     558:	81040000 	mrshi	r0, (UNDEF: 4)
     55c:	05bd0902 	ldreq	r0, [sp, #2306]!	; 0x902
     560:	19540000 	ldmdbne	r4, {}^	; <UNPREDICTABLE>
     564:	00000c68 	andeq	r0, r0, r8, ror #24
     568:	0702a404 	streq	sl, [r2, -r4, lsl #8]
     56c:	00000887 	andeq	r0, r0, r7, lsl #17
     570:	0a111a58 	beq	446ed8 <__ccfg+0x426f30>
     574:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
     578:	02bb1302 	adcseq	r1, fp, #134217728	; 0x8000000
     57c:	01480000 	mrseq	r0, (UNDEF: 72)
     580:	0006a91a 	andeq	sl, r6, sl, lsl r9
     584:	02a90400 	adceq	r0, r9, #0, 8
     588:	00027812 	andeq	r7, r2, r2, lsl r8
     58c:	1a014c00 	bne	53594 <__ccfg+0x335ec>
     590:	00000690 	muleq	r0, r0, r6
     594:	0c02ad04 	stceq	13, cr10, [r2], {4}
     598:	000008ec 	andeq	r0, r0, ip, ror #17
     59c:	d01a02dc 			; <UNDEFINED> instruction: 0xd01a02dc
     5a0:	0400000c 	streq	r0, [r0], #-12
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     5a4:	6d1002b2 	lfmvs	f0, 4, [r0, #-712]	; 0xfffffd38
     5a8:	e0000006 	and	r0, r0, r6
     5ac:	0aa11a02 	beq	fe846dbc <_estack+0xde841dbc>
		init_node(node_db);
     5b0:	b4040000 	strlt	r0, [r4], #-0
		phys_cc1350(0, MAX_PKT_LEN);
     5b4:	08f80a02 	ldmeq	r8!, {r1, r9, fp}^
     5b8:	02ec0000 	rsceq	r0, ip, #0
		tcv_plug (0, &plug_null);
     5bc:	c3041100 	movwgt	r1, #16640	; 0x4100
     5c0:	02000005 	andeq	r0, r0, #5
		sfd = tcv_open (WNONE, 0, 0);
     5c4:	0c5f0801 	mrrceq	8, 0, r0, pc, cr1	; <UNPREDICTABLE>
     5c8:	c3170000 	tstgt	r7, #0
     5cc:	11000005 	tstne	r0, r5
     5d0:	00044a04 	andeq	r4, r4, r4, lsl #20
     5d4:	2c011500 	cfstr32cs	mvfx1, [r1], {-0}
			diag("Cannot open tcv interface");
     5d8:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     5dc:	16000005 	strne	r0, [r0], -r5
			halt();
     5e0:	00000469 	andeq	r0, r0, r9, ror #8
		tcv_control(sfd, PHYSOPT_ON, NULL);
     5e4:	0000f216 	andeq	pc, r0, r6, lsl r2	; <UNPREDICTABLE>
     5e8:	05f41600 	ldrbeq	r1, [r4, #1536]!	; 0x600
		runfsm receiver(node_db);
     5ec:	2c160000 	ldccs	0, cr0, [r6], {-0}
     5f0:	00000000 	andeq	r0, r0, r0
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     5f4:	05ca0411 	strbeq	r0, [sl, #1041]	; 0x411
     5f8:	04110000 	ldreq	r0, [r1], #-0
     5fc:	000005d5 	ldrdeq	r0, [r0], -r5
     600:	00840115 	addeq	r0, r4, r5, lsl r1
     604:	061f0000 	ldreq	r0, [pc], -r0
     608:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
		ser_inf(get_choice, "%c", &CHOICE);
     60c:	16000004 	strne	r0, [r0], -r4
     610:	000000f2 	strdeq	r0, [r0], -r2
     614:	00008416 	andeq	r8, r0, r6, lsl r4
		switch(CHOICE) {
     618:	002c1600 	eoreq	r1, ip, r0, lsl #12
     61c:	11000000 	mrsne	r0, (UNDEF: 0)
     620:	00060004 	andeq	r0, r6, r4
     624:	2c011500 	cfstr32cs	mvfx1, [r1], {-0}
     628:	3a000000 	bcc	630 <root+0xdc>
     62c:	16000006 	strne	r0, [r0], -r6
     630:	00000469 	andeq	r0, r0, r9, ror #8
     634:	0000f216 	andeq	pc, r0, r6, lsl r2	; <UNPREDICTABLE>
     638:	04110000 	ldreq	r0, [r1], #-0
     63c:	00000625 	andeq	r0, r0, r5, lsr #12
     640:	00004708 	andeq	r4, r0, r8, lsl #14
     644:	00065000 	andeq	r5, r6, r0
				proceed menu;
     648:	00250900 	eoreq	r0, r5, r0, lsl #18
     64c:	00020000 	andeq	r0, r2, r0
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     650:	00004708 	andeq	r4, r0, r8, lsl #14
     654:	00066000 	andeq	r6, r6, r0
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     658:	00250900 	eoreq	r0, r5, r0, lsl #18
     65c:	00000000 	andeq	r0, r0, r0
     660:	00047004 	andeq	r7, r4, r4
		DEBUG_PRINT("setting node group ID");
     664:	01240400 			; <UNDEFINED> instruction: 0x01240400
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     668:	00030718 	andeq	r0, r3, r8, lsl r7
    node->gid = gid; 
     66c:	0cca1b00 	vstmiaeq	sl, {d17-d16}
		proceed menu;
     670:	040c0000 	streq	r0, [ip], #-0
     674:	a6080128 	strge	r0, [r8], -r8, lsr #2
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     678:	19000006 	stmdbne	r0, {r1, r2}
     67c:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     680:	11012a04 	tstne	r1, r4, lsl #20
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     684:	000006a6 	andeq	r0, r0, r6, lsr #13
     688:	0bc91900 	bleq	ff246a90 <_estack+0xdf241a90>
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     68c:	2b040000 	blcs	100694 <__ccfg+0xe06ec>
     690:	002c0701 	eoreq	r0, ip, r1, lsl #14
		if((node_db->id < 1) || (node_db->id > 25)){
     694:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     698:	0000076d 	andeq	r0, r0, sp, ror #14
     69c:	0b012c04 	bleq	4b6b4 <__ccfg+0x2b70c>
			strncpy(reason, "Out of Range", 50);
     6a0:	000006ac 	andeq	r0, r0, ip, lsr #13
     6a4:	04110008 	ldreq	r0, [r1], #-8
			proceed invalid_node_id;
     6a8:	0000066d 	andeq	r0, r0, sp, ror #12
     6ac:	06600411 			; <UNDEFINED> instruction: 0x06600411
				strncpy(reason, "ID is already in use", 50);
     6b0:	dc1b0000 	ldcle	0, cr0, [fp], {-0}
		for(int i = 0; i < node_db->index; i++){
     6b4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     6b8:	08014404 	stmdaeq	r1, {r2, sl, lr}
     6bc:	000006eb 	andeq	r0, r0, fp, ror #13
		proceed menu;
     6c0:	00163819 	andseq	r3, r6, r9, lsl r8
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     6c4:	01450400 	cmpeq	r5, r0, lsl #8
     6c8:	0006eb12 	andeq	lr, r6, r2, lsl fp
     6cc:	2c190000 	ldccs	0, cr0, [r9], {-0}
     6d0:	04000008 	streq	r0, [r0], #-8
		proceed get_new_node_id;
     6d4:	eb120146 	bl	480bf4 <__ccfg+0x460c4c>
     6d8:	06000006 	streq	r0, [r0], -r6
		if (!clear_node_neighbour_array(node_db)){
     6dc:	0014ea19 	andseq	lr, r4, r9, lsl sl
     6e0:	01470400 	cmpeq	r7, r0, lsl #8
			strncpy(reason, "Error Clearing Node Array", 50);
     6e4:	00005512 	andeq	r5, r0, r2, lsl r5
     6e8:	08000c00 	stmdaeq	r0, {sl, fp}
     6ec:	00000055 	andeq	r0, r0, r5, asr r0
			proceed error;
     6f0:	000006fb 	strdeq	r0, [r0], -fp
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     6f4:	00002509 	andeq	r2, r0, r9, lsl #10
     6f8:	1c000200 	sfmne	f0, 4, [r0], {-0}
		request_packet->gid = node_db->gid;
     6fc:	028504d0 	addeq	r0, r5, #208, 8	; 0xd0000000
     700:	00081007 	andeq	r1, r8, r7
		request_packet->tpe = DISCOVERY_REQUEST;
     704:	0e571900 	vnmlseq.f16	s3, s14, s0	; <UNPREDICTABLE>
		request_packet->request_number = generate_request_num();
     708:	87040000 	strhi	r0, [r4, -r0]
     70c:	00251802 	eoreq	r1, r5, r2, lsl #16
		call sender(request_packet, wait_discovery);
     710:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     714:	00000cd8 	ldrdeq	r0, [r0], -r8
		request_packet->receiver_id=0;
     718:	12028804 	andne	r8, r2, #4, 16	; 0x40000
		call sender(request_packet, wait_discovery);
     71c:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
     720:	043a1904 	ldrteq	r1, [sl], #-2308	; 0xfffff6fc
     724:	89040000 	stmdbhi	r4, {}	; <UNPREDICTABLE>
			release;
     728:	08101002 	ldmdaeq	r0, {r1, ip}
				proceed get_new_node_id;
     72c:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
				proceed clear_neighbour_array;
     730:	00000b3e 	andeq	r0, r0, lr, lsr fp
				proceed create_proto_start;
     734:	17028a04 	strne	r8, [r2, -r4, lsl #20]
				proceed start_delete_proto;
     738:	000001a0 	andeq	r0, r0, r0, lsr #3
				proceed retrieve_proto;
     73c:	07e41924 	strbeq	r1, [r4, r4, lsr #18]!
				proceed display_db;
     740:	8b040000 	blhi	100748 <__ccfg+0xe07a0>
				proceed del_local;
     744:	002c0f02 	eoreq	r0, ip, r2, lsl #30
			if(node_db->id == node_db->nnodes[i]){
     748:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
     74c:	00000eac 	andeq	r0, r0, ip, lsr #29
     750:	2c028c04 	stccs	12, cr8, [r2], {4}
				strncpy(reason, "ID is already in use", 50);
     754:	00000071 	andeq	r0, r0, r1, ror r0
     758:	00761950 	rsbseq	r1, r6, r0, asr r9
				proceed invalid_node_id;
     75c:	8d040000 	stchi	0, cr0, [r4, #-0]
     760:	06b21a02 	ldrteq	r1, [r2], r2, lsl #20
		for(int i = 0; i < node_db->index; i++){
     764:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
		if (discovery_wait_flag == 0){
     768:	00000634 	andeq	r0, r0, r4, lsr r6
			discovery_wait_flag=1;
     76c:	16028e04 	strne	r8, [r2], -r4, lsl #28
     770:	000000e6 	andeq	r0, r0, r6, ror #1
			delay(3000, find_proto_start);
     774:	0ce51968 			; <UNDEFINED> instruction: 0x0ce51968
     778:	8f040000 	svchi	0x00040000
		if (discovery_wait_flag == 1){
     77c:	00e61602 	rsceq	r1, r6, r2, lsl #12
			discovery_wait_flag=0;
     780:	19700000 	ldmdbne	r0!, {}^	; <UNPREDICTABLE>
     784:	00000068 	andeq	r0, r0, r8, rrx
			delay(3000, display_neighbour_nodes);
     788:	16029004 	strne	r9, [r2], -r4
     78c:	000000e6 	andeq	r0, r0, r6, ror #1
     790:	0b651978 	bleq	1946d78 <__ccfg+0x1926dd0>
     794:	91040000 	mrsls	r0, (UNDEF: 4)
     798:	08201002 	stmdaeq	r0!, {r1, ip}
     79c:	19800000 	stmibne	r0, {}	; <UNPREDICTABLE>
     7a0:	00000417 	andeq	r0, r0, r7, lsl r4
     7a4:	10029204 	andne	r9, r2, r4, lsl #4
     7a8:	00000830 	andeq	r0, r0, r0, lsr r8
     7ac:	0c881988 			; <UNDEFINED> instruction: 0x0c881988
     7b0:	93040000 	movwls	r0, #16384	; 0x4000
     7b4:	002c0f02 	eoreq	r0, ip, r2, lsl #30
     7b8:	19a00000 	stmibne	r0!, {}	; <UNPREDICTABLE>
     7bc:	000002a3 	andeq	r0, r0, r3, lsr #5
     7c0:	16029404 	strne	r9, [r2], -r4, lsl #8
     7c4:	000000e6 	andeq	r0, r0, r6, ror #1
     7c8:	069a19a4 	ldreq	r1, [sl], r4, lsr #19
     7cc:	95040000 	strls	r0, [r4, #-0]
     7d0:	00e61602 	rsceq	r1, r6, r2, lsl #12
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     7d4:	19ac0000 	stmibne	ip!, {}	; <UNPREDICTABLE>
     7d8:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7dc:	16029604 	strne	r9, [r2], -r4, lsl #12
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     7e0:	000000e6 	andeq	r0, r0, r6, ror #1
			if (node_db->nnodes[i] == 0) break;
     7e4:	084519b4 	stmdaeq	r5, {r2, r4, r5, r7, r8, fp, ip}^
     7e8:	97040000 	strls	r0, [r4, -r0]
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     7ec:	00e61602 	rsceq	r1, r6, r2, lsl #12
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7f0:	19bc0000 	ldmibne	ip!, {}	; <UNPREDICTABLE>
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     7f4:	00000623 	andeq	r0, r0, r3, lsr #12
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7f8:	16029804 	strne	r9, [r2], -r4, lsl #16
		proceed menu;
     7fc:	000000e6 	andeq	r0, r0, r6, ror #1
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     800:	08fd19c4 	ldmeq	sp!, {r2, r6, r7, r8, fp, ip}^
     804:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     808:	002c0802 	eoreq	r0, ip, r2, lsl #16
     80c:	00cc0000 	sbceq	r0, ip, r0
     810:	0005c308 	andeq	ip, r5, r8, lsl #6
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     814:	00082000 	andeq	r2, r8, r0
     818:	00250900 	eoreq	r0, r5, r0, lsl #18
			strncpy(reason, "Error: improper ID", 50);
     81c:	00190000 	andseq	r0, r9, r0
     820:	0005c308 	andeq	ip, r5, r8, lsl #6
     824:	00083000 	andeq	r3, r8, r0
			proceed error;
     828:	00250900 	eoreq	r0, r5, r0, lsl #18
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     82c:	00070000 	andeq	r0, r7, r0
     830:	0005c308 	andeq	ip, r5, r8, lsl #6
		ser_in(get_record_to_create, user_provided_record, 20);
     834:	00084000 	andeq	r4, r8, r0
     838:	00250900 	eoreq	r0, r5, r0, lsl #18
     83c:	00170000 	andseq	r0, r7, r0
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     840:	9e04f01c 	mcrls	0, 0, pc, cr4, cr12, {0}	; <UNPREDICTABLE>
		create_message->gid = node_db->gid;
     844:	08670702 	stmdaeq	r7!, {r1, r8, r9, sl}^
     848:	c2190000 	andsgt	r0, r9, #0
     84c:	04000003 	streq	r0, [r0], #-3
		create_message->tpe = 2;
     850:	671b02a1 	ldrvs	r0, [fp, -r1, lsr #5]
		create_message->request_number = generate_request_num();
     854:	00000008 	andeq	r0, r0, r8
		create_message->sender_id = node_db->id;
     858:	000eff19 	andeq	pc, lr, r9, lsl pc	; <UNPREDICTABLE>
     85c:	02a20400 	adceq	r0, r2, #0, 8
     860:	00087718 	andeq	r7, r8, r8, lsl r7
		strncpy(create_message->record, user_provided_record, 20);
     864:	08007800 	stmdaeq	r0, {fp, ip, sp, lr}
		create_message->receiver_id = user_provided_receiver_id;
     868:	00000301 	andeq	r0, r0, r1, lsl #6
		strncpy(create_message->record, user_provided_record, 20);
     86c:	00000877 	andeq	r0, r0, r7, ror r8
		response_checker[0] = create_message->request_number;
     870:	00002509 	andeq	r2, r0, r9, lsl #10
		call sender(create_message, wait);
     874:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
		response_checker[1] = create_message->tpe;
     878:	00000025 	andeq	r0, r0, r5, lsr #32
     87c:	00000887 	andeq	r0, r0, r7, lsl #17
		call sender(create_message, wait);
     880:	00002509 	andeq	r2, r0, r9, lsl #10
     884:	1d001d00 	stcne	13, cr1, [r0, #-0]
     888:	028304f0 	addeq	r0, r3, #240, 8	; 0xf0000000
     88c:	0008ac03 	andeq	sl, r8, r3, lsl #24
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     890:	0d4c1e00 	stcleq	14, cr1, [ip, #-0]
     894:	9a040000 	bls	10089c <__ccfg+0xe08f4>
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     898:	06fb0b02 	ldrbteq	r0, [fp], r2, lsl #22
     89c:	4d1e0000 	ldcmi	0, cr0, [lr, #-0]
     8a0:	0400000b 	streq	r0, [r0], #-11
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     8a4:	400b02a3 	andmi	r0, fp, r3, lsr #5
     8a8:	00000008 	andeq	r0, r0, r8
			strncpy(reason, "Error: improper node ID", 50);
     8ac:	0005c308 	andeq	ip, r5, r8, lsl #6
     8b0:	0008bc00 	andeq	fp, r8, r0, lsl #24
			proceed error;
     8b4:	00250900 	eoreq	r0, r5, r0, lsl #18
     8b8:	00180000 	andseq	r0, r8, r0
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     8bc:	000eb71f 	andeq	fp, lr, pc, lsl r7
     8c0:	04110100 	ldreq	r0, [r1], #-256	; 0xffffff00
		ser_inf(get_index_for_delete, "%d", &user_provided_index);
     8c4:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
     8c8:	08d40120 	ldmeq	r4, {r5, r8}^
     8cc:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
		if (user_provided_index < 0 || user_provided_index > 40){
     8d0:	00000004 	andeq	r0, r0, r4
			strncpy(reason, "Error: invalid index", 50);
     8d4:	08c80411 	stmiaeq	r8, {r0, r4, sl}^
     8d8:	04110000 	ldreq	r0, [r1], #-0
     8dc:	0000018a 	andeq	r0, r0, sl, lsl #3
			proceed error;
     8e0:	08ec0120 	stmiaeq	ip!, {r5, r8}^
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     8e4:	2c160000 	ldccs	0, cr0, [r6], {-0}
     8e8:	00000000 	andeq	r0, r0, r0
		delete_record->gid = node_db->gid;
     8ec:	08f20411 	ldmeq	r2!, {r0, r4, sl}^
     8f0:	04110000 	ldreq	r0, [r1], #-0
     8f4:	000008e0 	andeq	r0, r0, r0, ror #17
		delete_record->tpe = DELETE_RECORD;
     8f8:	00066008 	andeq	r6, r6, r8
		delete_record->request_number = generate_request_num();
     8fc:	00090800 	andeq	r0, r9, r0, lsl #16
     900:	00250900 	eoreq	r0, r5, r0, lsl #18
		delete_record->sender_id = node_db->id;
     904:	00020000 	andeq	r0, r2, r0
		response_checker[0] = delete_record->request_number;
     908:	000abd21 	andeq	fp, sl, r1, lsr #26
		delete_record->receiver_id = user_provided_receiver_id;
     90c:	03330400 	teqeq	r3, #0, 8
     910:	00046917 	andeq	r6, r4, r7, lsl r9
		delete_record->record_index = user_provided_index;
     914:	21010100 	mrscs	r0, (UNDEF: 17)
     918:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
		response_checker[0] = delete_record->request_number;
     91c:	1d033404 	cfstrsne	mvf3, [r3, #-16]
		call sender(&delete_record, wait);
     920:	0000046f 	andeq	r0, r0, pc, ror #8
     924:	09050101 	stmdbeq	r5, {r0, r8}
     928:	0600002a 	streq	r0, [r0], -sl, lsr #32
     92c:	0047172e 	subeq	r1, r7, lr, lsr #14
     930:	ff050000 			; <UNDEFINED> instruction: 0xff050000
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     934:	0600002d 	streq	r0, [r0], -sp, lsr #32
     938:	00551c31 	subseq	r1, r5, r1, lsr ip
		ser_inf(get_id_for_retrieve, "%d", &user_provided_receiver_id);
     93c:	a1050000 	mrsge	r0, (UNDEF: 5)
     940:	06000029 	streq	r0, [r0], -r9, lsr #32
     944:	00631b34 	rsbeq	r1, r3, r4, lsr fp
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     948:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
     94c:	07000005 	streq	r0, [r0, -r5]
			strncpy(reason, "Error: improper node ID", 50);
     950:	00f41b28 	rscseq	r1, r4, r8, lsr #22
     954:	8d050000 	stchi	0, cr0, [r5, #-0]
     958:	0700000b 	streq	r0, [r0, -fp]
			proceed error;
     95c:	094a1863 	stmdbeq	sl, {r0, r1, r5, r6, fp, ip}^
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     960:	e8050000 	stmda	r5, {}	; <UNPREDICTABLE>
     964:	08000028 	stmdaeq	r0, {r3, r5}
		ser_inf(get_index_for_retrieve, "%d", &user_provided_index);
     968:	09321227 	ldmdbeq	r2!, {r0, r1, r2, r5, r9, ip}
     96c:	62170000 	andsvs	r0, r7, #0
     970:	22000009 	andcs	r0, r0, #9
		if (user_provided_index < 0 || user_provided_index > 40){
     974:	00000962 	andeq	r0, r0, r2, ror #18
     978:	001daf05 	andseq	sl, sp, r5, lsl #30
			strncpy(reason, "Error: invalid index", 50);
     97c:	112b0800 			; <UNDEFINED> instruction: 0x112b0800
     980:	00000926 	andeq	r0, r0, r6, lsr #18
			proceed error;
     984:	00097822 	andeq	r7, r9, r2, lsr #16
     988:	293a0500 	ldmdbcs	sl!, {r8, sl}
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     98c:	2c080000 	stccs	0, cr0, [r8], {-0}
		retrieve_record->tpe = RETRIEVE_RECORD;
     990:	00093e12 	andeq	r3, r9, r2, lsl lr
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     994:	09891700 	stmibeq	r9, {r8, r9, sl, ip}
		retrieve_record->gid = node_db->gid;
     998:	41050000 	mrsmi	r0, (UNDEF: 5)
		retrieve_record->tpe = RETRIEVE_RECORD;
     99c:	08000006 	stmdaeq	r0, {r1, r2}
		retrieve_record->request_number = generate_request_num();
     9a0:	093e122d 	ldmdbeq	lr!, {r0, r2, r3, r5, r9, ip}
     9a4:	af050000 	svcge	0x00050000
		retrieve_record->sender_id = node_db->id;
     9a8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     9ac:	09b20f2e 	ldmibeq	r2!, {r1, r2, r3, r5, r8, r9, sl, fp}
     9b0:	04110000 	ldreq	r0, [r1], #-0
		call sender(&retrieve_record, wait);
     9b4:	00000962 	andeq	r0, r0, r2, ror #18
		retrieve_record->receiver_id = user_provided_receiver_id;
     9b8:	3208080a 	andcc	r0, r8, #655360	; 0xa0000
		retrieve_record->record_index = user_provided_index;
     9bc:	000a4609 	andeq	r4, sl, r9, lsl #12
		response_checker[0] = retrieve_record->request_number;
     9c0:	002b2300 	eoreq	r2, fp, r0, lsl #6
		response_checker[1] = retrieve_record->tpe;
     9c4:	34080000 	strcc	r0, [r8], #-0
     9c8:	00097807 	andeq	r7, r9, r7, lsl #16
		call sender(&retrieve_record, wait);
     9cc:	07010100 	streq	r0, [r1, -r0, lsl #2]
     9d0:	06472300 	strbeq	r2, [r7], -r0, lsl #6
     9d4:	35080000 	strcc	r0, [r8, #-0]
     9d8:	00097803 	andeq	r7, r9, r3, lsl #16
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     9dc:	06010100 	streq	r0, [r1], -r0, lsl #2
     9e0:	02de2300 	sbcseq	r2, lr, #0, 6
		if(node_db->data_base.item_count != 0){
     9e4:	36080000 	strcc	r0, [r8], -r0
     9e8:	00097803 	andeq	r7, r9, r3, lsl #16
		ser_out(loop_through_data, "\r\n");
     9ec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     9f0:	06b22300 	ldrteq	r2, [r2], r0, lsl #6
		proceed menu;
     9f4:	37080000 	strcc	r0, [r8, -r0]
     9f8:	00097803 	andeq	r7, r9, r3, lsl #16
		delete_all(node_db);
     9fc:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
     a00:	0a9a2300 	beq	fe689608 <_estack+0xde684608>
		proceed menu;
     a04:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
		delay(3000, timeout);
     a08:	00097803 	andeq	r7, r9, r3, lsl #16
     a0c:	00040100 	andeq	r0, r4, r0, lsl #2
     a10:	06560b00 	ldrbeq	r0, [r6], -r0, lsl #22
		when(&response_flag, menu);
     a14:	3a080000 	bcc	200a1c <__ccfg+0x1e0a74>
     a18:	00097807 	andeq	r7, r9, r7, lsl #16
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a1c:	f60b0100 			; <UNDEFINED> instruction: 0xf60b0100
     a20:	08000008 	stmdaeq	r0, {r3}
     a24:	0978033c 	ldmdbeq	r8!, {r2, r3, r4, r5, r8, r9}^
     a28:	0b020000 	bleq	80a30 <__ccfg+0x60a88>
     a2c:	00000f27 	andeq	r0, r0, r7, lsr #30
     a30:	78033d08 	stmdavc	r3, {r3, r8, sl, fp, ip, sp}
     a34:	03000009 	movweq	r0, #9
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     a38:	00090e0b 	andeq	r0, r9, fp, lsl #28
     a3c:	083f0800 	ldmdaeq	pc!, {fp}	; <UNPREDICTABLE>
     a40:	00000989 	andeq	r0, r0, r9, lsl #19
     a44:	14050004 	strne	r0, [r5], #-4
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a48:	08000003 	stmdaeq	r0, {r0, r1}
     a4c:	09b80341 	ldmibeq	r8!, {r0, r6, r8, r9}
		ser_out(timeout, "\r\nFailed to reach the destination");
     a50:	46220000 	strtmi	r0, [r2], -r0
     a54:	2400000a 	strcs	r0, [r0], #-10
		proceed menu;
     a58:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     a5c:	521a4308 	andspl	r4, sl, #8, 6	; 0x20000000
     a60:	0100000a 	tsteq	r0, sl
     a64:	01972401 	orrseq	r2, r7, r1, lsl #8
		proceed menu;
     a68:	45080000 	strmi	r0, [r8, #-0]
}
     a6c:	0005bd0e 	andeq	fp, r5, lr, lsl #26
     a70:	24010100 	strcs	r0, [r1], #-256	; 0xffffff00
     a74:	0000031d 	andeq	r0, r0, sp, lsl r3
     a78:	bd1e4508 	cfldr32lt	mvfx4, [lr, #-32]	; 0xffffffe0
     a7c:	01000005 	tsteq	r0, r5
     a80:	09080a01 	stmdbeq	r8, {r0, r9, fp}
     a84:	0ab2098f 	beq	fec830c8 <_estack+0xdec7e0c8>
     a88:	c50b0000 	strgt	r0, [fp, #-0]
     a8c:	0900000c 	stmdbeq	r0, {r2, r3}
     a90:	093e0b90 	ldmdbeq	lr!, {r4, r7, r8, r9, fp}
     a94:	0b000000 	bleq	a9c <root+0x548>
     a98:	00001062 	andeq	r1, r0, r2, rrx
     a9c:	62079109 	andvs	r9, r7, #1073741826	; 0x40000002
     aa0:	04000009 	streq	r0, [r0], #-9
     aa4:	0001bc0b 	andeq	fp, r1, fp, lsl #24
     aa8:	10920900 	addsne	r0, r2, r0, lsl #18
     aac:	00000984 	andeq	r0, r0, r4, lsl #19
     ab0:	b9050006 	stmdblt	r5, {r1, r2}
     ab4:	0900000c 	stmdbeq	r0, {r2, r3}
     ab8:	0a810393 	beq	fe04190c <_estack+0xde03c90c>
     abc:	b2080000 	andlt	r0, r8, #0
     ac0:	c900000a 	stmdbgt	r0, {r1, r3}
     ac4:	2500000a 	strcs	r0, [r0, #-10]
     ac8:	09382400 	ldmdbeq	r8!, {sl, sp}
     acc:	99090000 	stmdbls	r9, {}	; <UNPREDICTABLE>
static void devinit_uart (int devnum) {
     ad0:	000abe0f 	andeq	fp, sl, pc, lsl #28
	adddevfunc (ioreq_uart_a, devnum);
     ad4:	0a010100 	beq	40edc <__ccfg+0x20f34>
     ad8:	09910a01 	ldmibeq	r1, {r0, r9, fp}
void udelay (volatile word n) {
     adc:	00000b01 	andeq	r0, r0, r1, lsl #22
     ae0:	00091523 	andeq	r1, r9, r3, lsr #10
	while (n) {
     ae4:	07930a00 	ldreq	r0, [r3, r0, lsl #20]
     ae8:	00000978 	andeq	r0, r0, r8, ror r9
}
     aec:	00010701 	andeq	r0, r1, r1, lsl #14
	while (n--);
     af0:	0005c723 	andeq	ip, r5, r3, lsr #14
     af4:	03940a00 	orrseq	r0, r4, #0, 20
     af8:	00000978 	andeq	r0, r0, r8, ror r9
		n--;
     afc:	00000101 	andeq	r0, r0, r1, lsl #2
     b00:	0aa60500 	beq	fe981f08 <_estack+0xde97cf08>
     b04:	960a0000 	strls	r0, [sl], -r0
void mdelay (volatile word n) {
     b08:	000ad703 	andeq	sp, sl, r3, lsl #14
     b0c:	0b011700 	bleq	46714 <__ccfg+0x2676c>
	while (n) {
     b10:	0d080000 	stceq	0, cr0, [r8, #-0]
     b14:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
}
     b18:	2500000b 	strcs	r0, [r0, #-11]
		udelay (999);
     b1c:	0b121700 	bleq	486724 <__ccfg+0x46677c>
     b20:	ac240000 	stcge	0, cr0, [r4], #-0
		n--;
     b24:	0a000003 	beq	b38 <__pi_ondomain+0x4>
     b28:	0b1d179c 	bleq	7469a0 <__ccfg+0x7269f8>
     b2c:	01010000 	mrseq	r0, (UNDEF: 1)
     b30:	00096e08 	andeq	r6, r9, r8, lsl #28
void __pi_ondomain (lword d) {
     b34:	000b3b00 	andeq	r3, fp, r0, lsl #22
     b38:	17002500 	strne	r2, [r0, -r0, lsl #10]
		if (__pi_systat.effpdm > 1)
     b3c:	00000b30 	andeq	r0, r0, r0, lsr fp
     b40:	00060924 	andeq	r0, r6, r4, lsr #18
			__pi_systat.effpdm = 1;
     b44:	13060b00 	movwne	r0, #27392	; 0x6b00
	PRCMPowerDomainOn (d);
     b48:	00000b3b 	andeq	r0, r0, fp, lsr fp
     b4c:	d8240101 	stmdale	r4!, {r0, r8}
     b50:	09000008 	stmdbeq	r0, {r3}
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     b54:	09890ec3 	stmibeq	r9, {r0, r1, r6, r7, r9, sl, fp}
     b58:	01010000 	mrseq	r0, (UNDEF: 1)
     b5c:	000c6d04 	andeq	r6, ip, r4, lsl #26
	__pi_systat.ondmns |= d;
     b60:	016e0c00 	cmneq	lr, r0, lsl #24
     b64:	000b6910 	andeq	r6, fp, r0, lsl r9
}
     b68:	6f041100 	svcvs	0x00041100
     b6c:	2000000b 	andcs	r0, r0, fp
void __pi_offdomain (lword d) {
     b70:	000b7b01 	andeq	r7, fp, r1, lsl #22
     b74:	09621600 	stmdbeq	r2!, {r9, sl, ip}^
	PRCMPowerDomainOff (d);
     b78:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     b7c:	000005ca 	andeq	r0, r0, sl, asr #11
     b80:	00000b86 	andeq	r0, r0, r6, lsl #23
     b84:	7b170025 	blvc	5c0c20 <__ccfg+0x5a0c78>
	if (d & PRCM_DOMAIN_RFCORE) {
     b88:	2100000b 	tstcs	r0, fp
     b8c:	000009e1 	andeq	r0, r0, r1, ror #19
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     b90:	13017f0c 	movwne	r7, #7948	; 0x1f0c
     b94:	00000b86 	andeq	r0, r0, r6, lsl #23
			__pi_systat.effpdm = __pi_systat.reqpdm;
     b98:	98210101 	stmdals	r1!, {r0, r8}
     b9c:	0c000003 	stceq	0, cr0, [r0], {3}
	__pi_systat.ondmns &= ~d;
     ba0:	95140182 	ldrls	r0, [r4, #-386]	; 0xfffffe7e
     ba4:	01000009 	tsteq	r0, r9
}
     ba8:	0d040a01 	vstreq	s0, [r4, #-4]
     bac:	0bcd0908 	bleq	ff342fd4 <_estack+0xdf33dfd4>
void __pi_syserror (word ec, const char *m) {
     bb0:	c20b0000 	andgt	r0, fp, #0
	diag ("SYSERR: %x, %s", ec, m);
     bb4:	0d000001 	stceq	0, cr0, [r0, #-4]
     bb8:	0962070f 	stmdbeq	r2!, {r0, r1, r2, r3, r8, r9, sl}^
  __ASM volatile ("cpsid i" : : : "memory");
     bbc:	0b000000 	bleq	bc4 <__pi_syserror+0x14>
     bc0:	00000c9d 	muleq	r0, sp, ip
     bc4:	6203100d 	andvs	r1, r3, #13
     bc8:	02000009 	andeq	r0, r0, #9
		all_leds_blink;
     bcc:	0d660500 	cfstr64eq	mvdx0, [r6, #-0]
     bd0:	110d0000 	mrsne	r0, (UNDEF: 13)
     bd4:	000ba903 	andeq	sl, fp, r3, lsl #18
     bd8:	0d200a00 	vstmdbeq	r0!, {s0-s-1}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     bdc:	0c4b0916 	mcrreq	9, 1, r0, fp, cr6	; <UNPREDICTABLE>
     be0:	b30b0000 	movwlt	r0, #45056	; 0xb000
     be4:	0d000004 	stceq	0, cr0, [r0, #-16]
     be8:	0c650817 	stcleq	8, cr0, [r5], #-92	; 0xffffffa4
     bec:	0b000000 	bleq	bf4 <__pi_syserror+0x44>
     bf0:	00000906 	andeq	r0, r0, r6, lsl #18
	while (1) {
     bf4:	8008180d 	andhi	r1, r8, sp, lsl #16
     bf8:	0400000c 	streq	r0, [r0], #-12
     bfc:	000bc10b 	andeq	ip, fp, fp, lsl #2
     c00:	08190d00 	ldmdaeq	r9, {r8, sl, fp}
void tci_run_delay_timer () {
     c04:	00000cb6 			; <UNDEFINED> instruction: 0x00000cb6
	setdel = __pi_mintk - __pi_old;
     c08:	0c950b08 	vldmiaeq	r5, {d0-d3}
     c0c:	1a0d0000 	bne	340c14 <__ccfg+0x320c6c>
     c10:	000cd108 	andeq	sp, ip, r8, lsl #2
     c14:	5d0b0c00 	stcpl	12, cr0, [fp, #-0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c18:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
     c1c:	0ce7081b 	stcleq	8, cr0, [r7], #108	; 0x6c
     c20:	0b100000 	bleq	400c28 <__ccfg+0x3e0c80>
     c24:	00000a5e 	andeq	r0, r0, lr, asr sl
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     c28:	e7081c0d 	str	r1, [r8, -sp, lsl #24]
	sti_tim;
     c2c:	1400000c 	strne	r0, [r0], #-12
}
     c30:	0001a50b 	andeq	sl, r1, fp, lsl #10
     c34:	081d0d00 	ldmdaeq	sp, {r8, sl, fp}
     c38:	00000ce7 	andeq	r0, r0, r7, ror #25
     c3c:	030b0b18 	movweq	r0, #47896	; 0xbb18
     c40:	1e0d0000 	cdpne	0, 0, cr0, cr13, cr0, {0}
	cli_aux;
     c44:	00002c06 	andeq	r2, r0, r6, lsl #24
     c48:	15001c00 	strne	r1, [r0, #-3072]	; 0xfffff400
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c4c:	00002c01 	andeq	r2, r0, r1, lsl #24
     c50:	000c6500 	andeq	r6, ip, r0, lsl #10
     c54:	002c1600 	eoreq	r1, ip, r0, lsl #12
     c58:	2c160000 	ldccs	0, cr0, [r6], {-0}
	sti_aux;
     c5c:	16000000 	strne	r0, [r0], -r0
}
     c60:	00000956 	andeq	r0, r0, r6, asr r9
     c64:	4b041100 	blmi	10506c <__ccfg+0xe50c4>
     c68:	1500000c 	strne	r0, [r0, #-12]
void AONRTCIntHandler () {
     c6c:	00002c01 	andeq	r2, r0, r1, lsl #24
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     c70:	000c8000 	andeq	r8, ip, r0
     c74:	002c1600 	eoreq	r1, ip, r0, lsl #12
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     c78:	2c160000 	ldccs	0, cr0, [r6], {-0}
		if (__pi_utims [0] == 0)
     c7c:	00000000 	andeq	r0, r0, r0
     c80:	0c6b0411 	cfstrdeq	mvd0, [fp], #-68	; 0xffffffbc
		if (*(__pi_utims [0])) {
     c84:	01150000 	tsteq	r5, r0
     c88:	0000002c 	andeq	r0, r0, ip, lsr #32
			(*(__pi_utims [0]))--;
     c8c:	00000caa 	andeq	r0, r0, sl, lsr #25
		if (__pi_utims [1] == 0)
     c90:	00002c16 	andeq	r2, r0, r6, lsl ip
		if (*(__pi_utims [1])) {
     c94:	09a61600 	stmibeq	r6!, {r9, sl, ip}
			aux_timer_inactive = 0;
     c98:	2c160000 	ldccs	0, cr0, [r6], {-0}
			(*(__pi_utims [1]))--;
     c9c:	16000000 	strne	r0, [r0], -r0
		if (__pi_utims [2] == 0)
     ca0:	00000caa 	andeq	r0, r0, sl, lsr #25
		if (*(__pi_utims [2])) {
     ca4:	000cb016 	andeq	fp, ip, r6, lsl r0
			(*(__pi_utims [2]))--;
     ca8:	04110000 	ldreq	r0, [r1], #-0
		if (__pi_utims [3] != 0) {
     cac:	0000002c 	andeq	r0, r0, ip, lsr #32
			if (*(__pi_utims [3])) {
     cb0:	0bcd0411 	bleq	ff341cfc <_estack+0xdf33ccfc>
				aux_timer_inactive = 0;
     cb4:	04110000 	ldreq	r0, [r1], #-0
				(*(__pi_utims [3]))--;
     cb8:	00000c86 	andeq	r0, r0, r6, lsl #25
	if (__pi_systat.ledsts) {
     cbc:	002c0115 	eoreq	r0, ip, r5, lsl r1
     cc0:	0cd10000 	ldcleq	0, cr0, [r1], {0}
		if (__pi_systat.ledblc++ == 0) {
     cc4:	a6160000 	ldrge	r0, [r6], -r0
     cc8:	16000009 	strne	r0, [r0], -r9
			if (__pi_systat.ledblk) {
     ccc:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
     cd0:	bc041100 	stflts	f1, [r4], {-0}
     cd4:	1500000c 	strne	r0, [r0, #-12]
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     cd8:	00002c01 	andeq	r2, r0, r1, lsl #24
     cdc:	000ce700 	andeq	lr, ip, r0, lsl #14
				if (__pi_systat.ledsts & 0x2)
     ce0:	09a61600 	stmibeq	r6!, {r9, sl, ip}
     ce4:	11000000 	mrsne	r0, (UNDEF: 0)
     ce8:	000cd704 	andeq	sp, ip, r4, lsl #14
				if (__pi_systat.ledsts & 0x4)
     cec:	0d220500 	cfstr32eq	mvfx0, [r2, #-0]
				__pi_systat.ledblk = 0;
     cf0:	1f0d0000 	svcne	0x000d0000
     cf4:	000bd903 	andeq	sp, fp, r3, lsl #18
			if (__pi_systat.fstblk)
     cf8:	0ced1700 	stcleq	7, cr1, [sp]
     cfc:	70210000 	eorvc	r0, r1, r0
				__pi_systat.ledblc = 200;
     d00:	0c000003 	stceq	0, cr0, [r0], {3}
	if (events & AON_RTC_EVFLAGS_CH0) {
     d04:	890e02d8 	stmdbhi	lr, {r3, r4, r6, r7, r9}
		cli_tim;
     d08:	01000009 	tsteq	r0, r9
		__pi_new += setdel;
     d0c:	0c081c01 	stceq	12, cr1, [r8], {1}
     d10:	34090303 	strcc	r0, [r9], #-771	; 0xfffffcfd
		setdel = 0;
     d14:	1900000d 	stmdbne	r0, {r0, r2, r3}
		RISE_N_SHINE;
     d18:	00003c8e 	andeq	r3, r0, lr, lsl #25
		__pi_new += setdel;
     d1c:	0703070c 	streq	r0, [r3, -ip, lsl #14]
		RISE_N_SHINE;
     d20:	00000962 	andeq	r0, r0, r2, ror #18
     d24:	0fba1900 	svceq	0x00ba1900
		aux_timer_inactive = 1;
     d28:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
     d2c:	099a0803 	ldmibeq	sl, {r0, r1, fp}
				if (__pi_systat.ledsts & 0x1)
     d30:	00040000 	andeq	r0, r4, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d34:	000a0404 	andeq	r0, sl, r4, lsl #8
     d38:	03090c00 	movweq	r0, #39936	; 0x9c00
				if (__pi_systat.ledsts & 0x2)
     d3c:	000d0d03 	andeq	r0, sp, r3, lsl #26
     d40:	00201b00 	eoreq	r1, r0, r0, lsl #22
     d44:	0c300000 	ldceq	0, cr0, [r0], #-0
				if (__pi_systat.ledsts & 0x8)
     d48:	a408030b 	strge	r0, [r8], #-779	; 0xfffffcf5
				__pi_systat.ledblk = 1;
     d4c:	1900000d 	stmdbne	r0, {r0, r2, r3}
     d50:	00001f11 	andeq	r1, r0, r1, lsl pc
		if (aux_timer_inactive) {
     d54:	0703140c 	streq	r1, [r3, -ip, lsl #8]
			cli_aux;
     d58:	00000962 	andeq	r0, r0, r2, ror #18
     d5c:	0be21900 	bleq	ff887164 <_estack+0xdf882164>
     d60:	150c0000 	strne	r0, [ip, #-0]
     d64:	09620703 	stmdbeq	r2!, {r0, r1, r8, r9, sl}^
     d68:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
     d6c:	00004c7b 	andeq	r4, r0, fp, ror ip
     d70:	0a03160c 	beq	c65a8 <__ccfg+0xa6600>
     d74:	00000b5c 	andeq	r0, r0, ip, asr fp
     d78:	47411904 	strbmi	r1, [r1, -r4, lsl #18]
     d7c:	170c0000 	strne	r0, [ip, -r0]
word tci_update_delay_ticks (Boolean force) {
     d80:	099a0803 	ldmibeq	sl, {r0, r1, fp}
	cli_tim;
     d84:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     d88:	0000000f 	andeq	r0, r0, pc
	if (setdel) {
     d8c:	0f03180c 	svceq	0x0003180c
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d90:	00000da4 	andeq	r0, r0, r4, lsr #27
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     d94:	0958190c 	ldmdbeq	r8, {r2, r3, r8, fp, ip}^
     d98:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
     d9c:	0db41503 	cfldr32eq	mvfx1, [r4, #12]!
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     da0:	002c0000 	eoreq	r0, ip, r0
				AON_RTC_O_CH0CMP)) - gettav ());
     da4:	000d3408 	andeq	r3, sp, r8, lsl #8
	return NO;
     da8:	000db400 	andeq	fp, sp, r0, lsl #8
			setdel = 0;
     dac:	00250900 	eoreq	r0, r5, r0, lsl #18
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     db0:	00030000 	andeq	r0, r3, r0
     db4:	0d410411 	cfstrdeq	mvd0, [r1, #-68]	; 0xffffffbc
}
     db8:	d7040000 	strle	r0, [r4, -r0]
		sti_tim;
     dbc:	0c00000b 	stceq	0, cr0, [r0], {11}
		return YES;
     dc0:	411b031c 	tstmi	fp, ip, lsl r3
     dc4:	2100000d 	tstcs	r0, sp
     dc8:	00000bb7 			; <UNDEFINED> instruction: 0x00000bb7
     dcc:	14031e0c 	strne	r1, [r3], #-3596	; 0xfffff1f4
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     dd0:	00000dd6 	ldrdeq	r0, [r0], -r6
	UARTDisable (UART0_BASE);
     dd4:	04110101 	ldreq	r0, [r1], #-257	; 0xfffffeff
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     dd8:	00000dba 			; <UNDEFINED> instruction: 0x00000dba
	UARTDisable (UART0_BASE);
     ddc:	00070a24 	andeq	r0, r7, r4, lsr #20
	UARTConfigSetExpClk (UART0_BASE,
     de0:	0d1d0e00 	ldceq	14, cr0, [sp, #-0]
     de4:	00000962 	andeq	r0, r0, r2, ror #18
     de8:	e5240101 	str	r0, [r4, #-257]!	; 0xfffffeff
     dec:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     df0:	0973161e 	ldmdbeq	r3!, {r1, r2, r3, r4, r9, sl, ip}^
     df4:	01010000 	mrseq	r0, (UNDEF: 1)
     df8:	000c6424 	andeq	r6, ip, r4, lsr #8
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     dfc:	201e0e00 	andscs	r0, lr, r0, lsl #28
     e00:	00000973 	andeq	r0, r0, r3, ror r9
     e04:	82240101 	eorhi	r0, r4, #1073741824	; 0x40000000
	urates [0] = rate;
     e08:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
}
     e0c:	0dd61422 	cfldrdeq	mvd1, [r6, #136]	; 0x88
     e10:	01010000 	mrseq	r0, (UNDEF: 1)
     e14:	00001624 	andeq	r1, r0, r4, lsr #12
     e18:	180c0f00 	stmdane	ip, {r8, r9, sl, fp}
     e1c:	00000cf9 	strdeq	r0, [r0], -r9
     e20:	17260101 	strne	r0, [r6, -r1, lsl #2]!
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e24:	01000006 	tsteq	r0, r6
     e28:	00000047 	andeq	r0, r0, r7, asr #32
     e2c:	58061910 	stmdapl	r6, {r4, r8, fp, ip}
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     e30:	2700000e 	strcs	r0, [r0, -lr]
     e34:	00000be8 	andeq	r0, r0, r8, ror #23
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     e38:	09be2700 	ldmibeq	lr!, {r8, r9, sl, sp}
     e3c:	27010000 	strcs	r0, [r1, -r0]
	__pi_uart_setrate (urates [0], __pi_uart);
     e40:	00000f0e 	andeq	r0, r0, lr, lsl #30
     e44:	0b302702 	bleq	c0aa54 <__ccfg+0xbeaaac>
     e48:	27030000 	strcs	r0, [r3, -r0]
     e4c:	0000097e 	andeq	r0, r0, lr, ror r9
     e50:	09c82704 	stmibeq	r8, {r2, r8, r9, sl, sp}^
     e54:	00050000 	andeq	r0, r5, r0
     e58:	001f1126 	andseq	r1, pc, r6, lsr #2
	switch (operation) {
     e5c:	00470100 	subeq	r0, r7, r0, lsl #2
static int ioreq_uart_a (int operation, char *buf, int len) {
     e60:	22100000 	andscs	r0, r0, #0
     e64:	000e8806 	andeq	r8, lr, r6, lsl #16
     e68:	03312700 	teqeq	r1, #0, 14
     e6c:	27000000 	strcs	r0, [r0, -r0]
     e70:	0000064e 	andeq	r0, r0, lr, asr #12
				*buf++ = uart_a_read;
     e74:	04682701 	strbteq	r2, [r8], #-1793	; 0xfffff8ff
     e78:	27020000 	strcs	r0, [r2, -r0]
			while (len && uart_a_char_available) {
     e7c:	000008a3 	andeq	r0, r0, r3, lsr #17
     e80:	0b132703 	bleq	4caa94 <__ccfg+0x4aaaec>
     e84:	00040000 	andeq	r0, r4, r0
			if (len != operation) {
     e88:	0004990f 	andeq	r9, r4, pc, lsl #18
}
     e8c:	2c101c00 	ldccs	12, cr1, [r0], {-0}
     e90:	000ebd08 	andeq	fp, lr, r8, lsl #26
			uart_a_disable_int;
     e94:	0f2e0b00 	svceq	0x002e0b00
			if (uart_a_char_available) {
     e98:	2d100000 	ldccs	0, cr0, [r0, #-0]
				*buf++ = uart_a_read;
     e9c:	0009260a 	andeq	r2, r9, sl, lsl #12
			uart_a_disable_int;
     ea0:	7a0b0000 	bvc	2c0ea8 <__ccfg+0x2a0f00>
     ea4:	10000007 	andne	r0, r0, r7
			if (uart_a_char_available) {
     ea8:	0ebd072e 	cdpeq	7, 11, cr0, cr13, cr14, {1}
     eac:	0b010000 	bleq	40eb4 <__ccfg+0x20f0c>
				uart_a_enable_int;
     eb0:	000005d7 	ldrdeq	r0, [r0], -r7
     eb4:	63102f10 	tstvs	r0, #16, 30	; 0x40
				goto Redo_rx;
     eb8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     ebc:	05c30800 	strbeq	r0, [r3, #2048]	; 0x800
     ec0:	0ecd0000 	cdpeq	0, 12, cr0, cr13, cr0, {0}
			return -2;
     ec4:	25090000 	strcs	r0, [r9, #-0]
     ec8:	13000000 	movwne	r0, #0
				uart_a_write (*buf);
     ecc:	47411200 	strbmi	r1, [r1, -r0, lsl #4]
     ed0:	04640000 	strbteq	r0, [r4], #-0
			while (len && uart_a_room_in_tx) {
     ed4:	f7083310 			; <UNDEFINED> instruction: 0xf7083310
     ed8:	0b00000e 	bleq	f18 <ioreq_uart_a+0xbc>
     edc:	00000040 	andeq	r0, r0, r0, asr #32
			if (len != operation) {
     ee0:	f7103410 			; <UNDEFINED> instruction: 0xf7103410
			uart_a_disable_int;
     ee4:	0000000e 	andeq	r0, r0, lr
     ee8:	00052813 	andeq	r2, r5, r3, lsl r8
			if (uart_a_room_in_tx) {
     eec:	0a351000 	beq	d44ef4 <__ccfg+0xd24f4c>
     ef0:	00000926 	andeq	r0, r0, r6, lsr #18
				uart_a_enable_int;
     ef4:	08000460 	stmdaeq	r0, {r5, r6, sl}
     ef8:	00000e88 	andeq	r0, r0, r8, lsl #29
				*buf++ = uart_a_read;
     efc:	00000f07 	andeq	r0, r0, r7, lsl #30
			if (uart_a_room_in_tx) {
     f00:	00002509 	andeq	r2, r0, r9, lsl #10
				uart_a_write (*buf);
     f04:	12002700 	andne	r2, r0, #0, 14
     f08:	00000463 	andeq	r0, r0, r3, ror #8
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     f0c:	3c100484 	cfldrscc	mvf0, [r0], {132}	; 0x84
     f10:	000f5808 	andeq	r5, pc, r8, lsl #16
			uart_a_enable_int;
     f14:	64691000 	strbtvs	r1, [r9], #-0
     f18:	0a3d1000 	beq	f44f20 <__ccfg+0xf24f78>
     f1c:	00000926 	andeq	r0, r0, r6, lsr #18
			return 0;
     f20:	69671000 	stmdbvs	r7!, {ip}^
			if (len == UART_CNTRL_SETRATE) {
     f24:	3e100064 	cdpcc	0, 1, cr0, cr0, cr4, {3}
				if (__pi_uart_setrate (*((word*)buf),
     f28:	0009320b 	andeq	r3, r9, fp, lsl #4
     f2c:	c00b0200 	andgt	r0, fp, r0, lsl #4
     f30:	1000000c 	andne	r0, r0, ip
				syserror (EREQPAR, "uar");
     f34:	0ecd0e3f 	mcreq	14, 6, r0, cr13, cr15, {1}
			syserror (ENOOPER, "uai");
     f38:	13040000 	movwne	r0, #16384	; 0x4000
			if (len == UART_CNTRL_GETRATE) {
     f3c:	0000029c 	muleq	r0, ip, r2
				return 1;
     f40:	580a4010 	stmdapl	sl, {r4, lr}
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     f44:	6800000f 	stmdavs	r0, {r0, r1, r2, r3}
			syserror (ENOOPER, "uai");
     f48:	04c91304 	strbeq	r1, [r9], #772	; 0x304
     f4c:	41100000 	tstmi	r0, r0
     f50:	0009260a 	andeq	r2, r9, sl, lsl #12
     f54:	00048100 	andeq	r8, r4, r0, lsl #2
     f58:	00092608 	andeq	r2, r9, r8, lsl #12
     f5c:	000f6800 	andeq	r6, pc, r0, lsl #16
     f60:	00250900 	eoreq	r0, r5, r0, lsl #18
     f64:	00180000 	andseq	r0, r8, r0
     f68:	0006f20f 	andeq	pc, r6, pc, lsl #4
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     f6c:	44100600 	ldrmi	r0, [r0], #-1536	; 0xfffffa00
void UART0IntHandler () {
     f70:	000fb708 	andeq	fp, pc, r8, lsl #14
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     f74:	69671000 	stmdbvs	r7!, {ip}^
     f78:	45100064 	ldrmi	r0, [r0, #-100]	; 0xffffff9c
     f7c:	0009320b 	andeq	r3, r9, fp, lsl #4
     f80:	74100000 	ldrvc	r0, [r0], #-0
     f84:	10006570 	andne	r6, r0, r0, ror r5
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     f88:	09260a46 	stmdbeq	r6!, {r1, r2, r6, r9, fp}
     f8c:	0b020000 	bleq	80f94 <__ccfg+0x60fec>
		RISE_N_SHINE;
     f90:	00000d6f 	andeq	r0, r0, pc, ror #26
     f94:	260a4710 			; <UNDEFINED> instruction: 0x260a4710
		i_trigger (devevent (UART_A, READ));
     f98:	03000009 	movweq	r0, #9
     f9c:	0004da0b 	andeq	sp, r4, fp, lsl #20
     fa0:	0a481000 	beq	1204fa8 <__ccfg+0x11e5000>
     fa4:	00000926 	andeq	r0, r0, r6, lsr #18
     fa8:	02900b04 	addseq	r0, r0, #4, 22	; 0x1000
     fac:	49100000 	ldmdbmi	r0, {}	; <UNPREDICTABLE>
     fb0:	0009260a 	andeq	r2, r9, sl, lsl #12
     fb4:	0f000500 	svceq	0x00000500
     fb8:	000002b1 			; <UNDEFINED> instruction: 0x000002b1
     fbc:	084c1006 	stmdaeq	ip, {r1, r2, ip}^
     fc0:	00001006 	andeq	r1, r0, r6
     fc4:	64696710 	strbtvs	r6, [r9], #-1808	; 0xfffff8f0
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     fc8:	0b4d1000 	bleq	1344fd0 <__ccfg+0x1325028>
     fcc:	00000932 	andeq	r0, r0, r2, lsr r9
     fd0:	70741000 	rsbsvc	r1, r4, r0
		i_trigger (devevent (UART_A, WRITE));
     fd4:	4e100065 	cdpmi	0, 1, cr0, cr0, cr5, {3}
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     fd8:	0009260a 	andeq	r2, r9, sl, lsl #12
     fdc:	6f0b0200 	svcvs	0x000b0200
		RISE_N_SHINE;
     fe0:	1000000d 	andne	r0, r0, sp
     fe4:	09260a4f 	stmdbeq	r6!, {r0, r1, r2, r3, r6, r9, fp}
     fe8:	0b030000 	bleq	c0ff0 <__ccfg+0xa1048>
		i_trigger (devevent (UART_A, WRITE));
     fec:	000004da 	ldrdeq	r0, [r0], -sl
     ff0:	260a5010 			; <UNDEFINED> instruction: 0x260a5010
     ff4:	04000009 	streq	r0, [r0], #-9
     ff8:	0002900b 	andeq	r9, r2, fp
     ffc:	0a511000 	beq	1445004 <__ccfg+0x142505c>
    1000:	00000926 	andeq	r0, r0, r6, lsr #18
    1004:	9b0f0005 	blls	3c1020 <__ccfg+0x3a1078>
    1008:	1a00000b 	bne	103c <__buttons_setirq+0x10>
    100c:	62085410 	andvs	r5, r8, #16, 8	; 0x10000000
    1010:	10000010 	andne	r0, r0, r0, lsl r0
    1014:	00646967 	rsbeq	r6, r4, r7, ror #18
}
    1018:	320b5510 	andcc	r5, fp, #16, 10	; 0x4000000
    101c:	00000009 	andeq	r0, r0, r9
    1020:	65707410 	ldrbvs	r7, [r0, #-1040]!	; 0xfffffbf0
    1024:	0a561000 	beq	158502c <__ccfg+0x1565084>
    1028:	00000926 	andeq	r0, r0, r6, lsr #18
void __buttons_setirq (int val) {
    102c:	0d6f0b02 	vstmdbeq	pc!, {d16}
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1030:	57100000 	ldrpl	r0, [r0, -r0]
    1034:	0009260a 	andeq	r2, r9, sl, lsl #12
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1038:	da0b0300 	ble	2c1c40 <__ccfg+0x2a1c98>
    103c:	10000004 	andne	r0, r0, r4
    1040:	09260a58 	stmdbeq	r6!, {r3, r4, r6, r9, fp}
		bn = BUTTON_GPIO (__button_list [i]);
    1044:	0b040000 	bleq	10104c <__ccfg+0xe10a4>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1048:	00000290 	muleq	r0, r0, r2
    104c:	260a5910 			; <UNDEFINED> instruction: 0x260a5910
    1050:	05000009 	streq	r0, [r0, #-9]
    1054:	0004990b 	andeq	r9, r4, fp, lsl #18
    1058:	075a1000 	ldrbeq	r1, [sl, -r0]
    105c:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
}
    1060:	3d0f0006 	stccc	0, cr0, [pc, #-24]	; 1050 <__buttons_setirq+0x24>
    1064:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    1068:	cb085d10 	blgt	2184b0 <__ccfg+0x1f8508>
    106c:	10000010 	andne	r0, r0, r0, lsl r0
void __pinlist_setirq (int val) {
    1070:	00646967 	rsbeq	r6, r4, r7, ror #18
	for (i = 0; i < N_PINLIST; i++) {
    1074:	320b5e10 	andcc	r5, fp, #16, 28	; 0x100
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1078:	00000009 	andeq	r0, r0, r9
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    107c:	65707410 	ldrbvs	r7, [r0, #-1040]!	; 0xfffffbf0
	for (i = 0; i < N_PINLIST; i++) {
    1080:	0a5f1000 	beq	17c5088 <__ccfg+0x17a50e0>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1084:	00000926 	andeq	r0, r0, r6, lsr #18
    1088:	0d6f0b02 	vstmdbeq	pc!, {d16}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    108c:	60100000 	andsvs	r0, r0, r0
    1090:	0009260a 	andeq	r2, r9, sl, lsl #12
    1094:	da0b0300 	ble	2c1c9c <__ccfg+0x2a1cf4>
	for (i = 0; i < N_PINLIST; i++) {
    1098:	10000004 	andne	r0, r0, r4
}
    109c:	09260a61 	stmdbeq	r6!, {r0, r5, r6, r9, fp}
    10a0:	0b040000 	bleq	1010a8 <__ccfg+0xe1100>
    10a4:	00000290 	muleq	r0, r0, r2
    10a8:	260a6210 			; <UNDEFINED> instruction: 0x260a6210
void GPIOIntHandler () {
    10ac:	05000009 	streq	r0, [r0, #-9]
if (buttons_int) {
    10b0:	00005b0b 	andeq	r5, r0, fp, lsl #22
    10b4:	0a631000 	beq	18c50bc <__ccfg+0x18a5114>
	buttons_disable ();
    10b8:	00000926 	andeq	r0, r0, r6, lsr #18
    10bc:	08240b06 	stmdaeq	r4!, {r1, r2, r8, r9, fp}
	i_trigger ((aword)&__button_list);
    10c0:	64100000 	ldrvs	r0, [r0], #-0
    10c4:	0009260a 	andeq	r2, r9, sl, lsl #12
    10c8:	0f000700 	svceq	0x00000700
    10cc:	00000ed7 	ldrdeq	r0, [r0], -r7
    10d0:	08681008 	stmdaeq	r8!, {r3, ip}^
    10d4:	00001134 	andeq	r1, r0, r4, lsr r1
    10d8:	64696710 	strbtvs	r6, [r9], #-1808	; 0xfffff8f0
    10dc:	0b691000 	bleq	1a450e4 <__ccfg+0x1a2513c>
    10e0:	00000932 	andeq	r0, r0, r2, lsr r9
    10e4:	70741000 	rsbsvc	r1, r4, r0
    10e8:	6a100065 	bvs	401284 <__ccfg+0x3e12dc>
	RISE_N_SHINE;
    10ec:	0009260a 	andeq	r2, r9, sl, lsl #12
    10f0:	6f0b0200 	svcvs	0x000b0200
    10f4:	1000000d 	andne	r0, r0, sp
if (pin_sensor_int) {
    10f8:	09260a6b 	stmdbeq	r6!, {r0, r1, r3, r5, r6, r9, fp}
    10fc:	0b030000 	bleq	c1104 <__ccfg+0xa115c>
	i_trigger ((aword)(&__input_pins));
    1100:	000004da 	ldrdeq	r0, [r0], -sl
    1104:	260a6c10 			; <UNDEFINED> instruction: 0x260a6c10
    1108:	04000009 	streq	r0, [r0], #-9
    110c:	0002900b 	andeq	r9, r2, fp
    1110:	0a6d1000 	beq	1b45118 <__ccfg+0x1b25170>
    1114:	00000926 	andeq	r0, r0, r6, lsr #18
    1118:	005b0b05 	subseq	r0, fp, r5, lsl #22
    111c:	6e100000 	cdpvs	0, 1, cr0, cr0, cr0, {0}
    1120:	0009260a 	andeq	r2, r9, sl, lsl #12
    1124:	240b0600 	strcs	r0, [fp], #-1536	; 0xfffffa00
    1128:	10000008 	andne	r0, r0, r8
	__pinsen_disable_and_clear;
    112c:	09260a6f 	stmdbeq	r6!, {r0, r1, r2, r3, r5, r6, r9, fp}
	RISE_N_SHINE;
    1130:	00070000 	andeq	r0, r7, r0
    1134:	0002ba0f 	andeq	fp, r2, pc, lsl #20
    1138:	76101e00 	ldrvc	r1, [r0], -r0, lsl #28
}
    113c:	0011b708 	andseq	fp, r1, r8, lsl #14
    1140:	69671000 	stmdbvs	r7!, {ip}^
    1144:	77100064 	ldrvc	r0, [r0, -r4, rrx]
    1148:	0009320b 	andeq	r3, r9, fp, lsl #4
    114c:	74100000 	ldrvc	r0, [r0], #-0
void system_init () {
    1150:	10006570 	andne	r6, r0, r0, ror r5
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1154:	09260a78 	stmdbeq	r6!, {r3, r4, r5, r6, r9, fp}
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    1158:	0b020000 	bleq	81160 <__ccfg+0x611b8>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    115c:	00000d6f 	andeq	r0, r0, pc, ror #26
    1160:	260a7910 			; <UNDEFINED> instruction: 0x260a7910
    1164:	03000009 	movweq	r0, #9
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1168:	0004da0b 	andeq	sp, r4, fp, lsl #20
    116c:	0a7a1000 	beq	1e85174 <__ccfg+0x1e651cc>
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1170:	00000926 	andeq	r0, r0, r6, lsr #18
    1174:	02900b04 	addseq	r0, r0, #4, 22	; 0x1000
    1178:	7b100000 	blvc	401180 <__ccfg+0x3e11d8>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    117c:	0009260a 	andeq	r2, r9, sl, lsl #12
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1180:	730b0500 	movwvc	r0, #46336	; 0xb500
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1184:	10000007 	andne	r0, r0, r7
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1188:	09260a7c 	stmdbeq	r6!, {r2, r3, r4, r5, r6, r9, fp}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    118c:	0b060000 	bleq	181194 <__ccfg+0x1611ec>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1190:	00000824 	andeq	r0, r0, r4, lsr #16
		pin = (port_confs [i] >> 19) & 0x1f;
    1194:	260a7d10 			; <UNDEFINED> instruction: 0x260a7d10
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1198:	07000009 	streq	r0, [r0, -r9]
		pin = (port_confs [i] >> 19) & 0x1f;
    119c:	0004990b 	andeq	r9, r4, fp, lsl #18
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    11a0:	077e1000 	ldrbeq	r1, [lr, -r0]!
    11a4:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
    11a8:	005b0b08 	subseq	r0, fp, r8, lsl #22
    11ac:	7f100000 	svcvc	0x00100000
		if (port_confs [i] & 0x80)
    11b0:	0009260a 	andeq	r2, r9, sl, lsl #12
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    11b4:	28001c00 	stmdacs	r0, {sl, fp, ip}
    11b8:	00000e7d 	andeq	r0, r0, sp, ror lr
		if (port_confs [i] & 0x40)
    11bc:	c3060301 	movwgt	r0, #25345	; 0x6301
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11c0:	01000005 	tsteq	r0, r5
    11c4:	069a0305 	ldreq	r0, [sl], r5, lsl #6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11c8:	c3082000 	movwgt	r2, #32768	; 0x8000
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    11cc:	da000005 	ble	11e8 <system_init+0x98>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11d0:	09000011 	stmdbeq	r0, {r0, r4}
	all_leds_blink;
    11d4:	00000025 	andeq	r0, r0, r5, lsr #32
    11d8:	5c280031 	stcpl	0, cr0, [r8], #-196	; 0xffffff3c
    11dc:	01000004 	tsteq	r0, r4
    11e0:	11ca0604 	bicne	r0, sl, r4, lsl #12
    11e4:	05010000 	streq	r0, [r1, #-0]
    11e8:	00066803 	andeq	r6, r6, r3, lsl #16
    11ec:	66732920 	ldrbtvs	r2, [r3], -r0, lsr #18
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11f0:	05010064 	streq	r0, [r1, #-100]	; 0xffffff9c
    11f4:	00002c05 	andeq	r2, r0, r5, lsl #24
    11f8:	03050100 	movweq	r0, #20736	; 0x5100
    11fc:	20000000 	andcs	r0, r0, r0
    1200:	00002c08 	andeq	r2, r0, r8, lsl #24
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1204:	00121000 	andseq	r1, r2, r0
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1208:	00250900 	eoreq	r0, r5, r0, lsl #18
    120c:	00010000 	andeq	r0, r1, r0
	IntEnable (INT_AON_RTC_COMB);
    1210:	0006e128 	andeq	lr, r6, r8, lsr #2
    1214:	05080100 	streq	r0, [r8, #-256]	; 0xffffff00
    1218:	00001200 	andeq	r1, r0, r0, lsl #4
	__pi_malloc_init ();
    121c:	60030501 	andvs	r0, r3, r1, lsl #10
	IntEnable (INT_AON_GPIO_EDGE);
    1220:	28200006 	stmdacs	r0!, {r1, r2}
    1224:	0000085a 	andeq	r0, r0, sl, asr r8
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1228:	62060a01 	andvs	r0, r6, #4096	; 0x1000
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    122c:	01000009 	tsteq	r0, r9
    1230:	05600305 	strbeq	r0, [r0, #-773]!	; 0xfffffcfb
    1234:	47282000 	strmi	r2, [r8, -r0]!
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1238:	01000004 	tsteq	r0, r4
    123c:	12490e0c 	subne	r0, r9, #12, 28	; 0xc0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1240:	05010000 	streq	r0, [r1, #-0]
    1244:	00069c03 	andeq	r9, r6, r3, lsl #24
    1248:	07041120 	streq	r1, [r4, -r0, lsr #2]
	urates [0] = UART_RATE / 100;
    124c:	2a00000f 	bcs	1290 <system_init+0x140>
    1250:	0001ad01 	andeq	sl, r1, r1, lsl #26
	reinit_uart ();
    1254:	01fc0100 	mvnseq	r0, r0, lsl #2
	EXTRA_INITIALIZERS;
    1258:	05540106 	ldrbeq	r0, [r4, #-262]	; 0xfffffefa
    125c:	0ad00000 	beq	ff401264 <_estack+0xdf3fc264>
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    1260:	9c010000 	stcls	0, cr0, [r1], {-0}
    1264:	000015be 			; <UNDEFINED> instruction: 0x000015be
    1268:	000c2e2b 	andeq	r2, ip, fp, lsr #28
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    126c:	01fc0100 	mvnseq	r0, r0, lsl #2
    1270:	00096211 	andeq	r6, r9, r1, lsl r2
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1274:	00000000 	andeq	r0, r0, r0
    1278:	0c362c00 	ldceq	12, cr2, [r6], #-0
			devinit [i] . init (devinit [i] . param);
    127c:	0a010000 	beq	41284 <__ccfg+0x212dc>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1280:	05a41902 	streq	r1, [r4, #2306]!	; 0x902
    1284:	1a2c0000 	bne	b0128c <__ccfg+0xae12e4>
    1288:	01000009 	tsteq	r0, r9
	IntEnable (INT_UART0_COMB);
    128c:	f2100242 	vhsub.s16	q0, q0, q1
    1290:	2c000005 	stccs	0, cr0, [r0], {5}
}
    1294:	00000084 	andeq	r0, r0, r4, lsl #1
	tci_run_auxiliary_timer ();
    1298:	16024501 	strne	r4, [r2], -r1, lsl #10
		diag ("");
    129c:	0000060c 	andeq	r0, r0, ip, lsl #12
    12a0:	0008012c 	andeq	r0, r8, ip, lsr #2
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    12a4:	026e0100 	rsbeq	r0, lr, #0, 2
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    12a8:	0006501c 	andeq	r5, r6, ip, lsl r0
		diag ("Leftover RAM: %d bytes",
    12ac:	01e22c00 	mvneq	r2, r0, lsl #24
    12b0:	72010000 	andvc	r0, r1, #0
    12b4:	06581802 	ldrbeq	r1, [r8], -r2, lsl #16
    12b8:	782c0000 	stmdavc	ip!, {}	; <UNPREDICTABLE>
    12bc:	01000003 	tsteq	r0, r3
    12c0:	781b0280 	ldmdavc	fp, {r7, r9}
    12c4:	2c000006 	stccs	0, cr0, [r0], {6}
    12c8:	000002ca 	andeq	r0, r0, sl, asr #5
    12cc:	17028301 	strne	r8, [r2, -r1, lsl #6]
    12d0:	00000680 	andeq	r0, r0, r0, lsl #13
    12d4:	0007902c 	andeq	r9, r7, ip, lsr #32
    12d8:	029e0100 	addseq	r0, lr, #0, 2
    12dc:	0006c41b 	andeq	ip, r6, fp, lsl r4
    12e0:	04fb2c00 	ldrbteq	r2, [fp], #3072	; 0xc00
    12e4:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    12e8:	06da2102 	ldrbeq	r2, [sl], r2, lsl #2
    12ec:	652c0000 	strvs	r0, [ip, #-0]!
    12f0:	01000009 	tsteq	r0, r9
    12f4:	f41c02b4 			; <UNDEFINED> instruction: 0xf41c02b4
    12f8:	2c000006 	stccs	0, cr0, [r0], {6}
    12fc:	00000679 	andeq	r0, r0, r9, ror r6
    1300:	1a02c101 	bne	b170c <__ccfg+0x91764>
    1304:	00000766 	andeq	r0, r0, r6, ror #14
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1308:	000d2c2c 	andeq	r2, sp, ip, lsr #24
    130c:	02cd0100 	sbceq	r0, sp, #0, 2
    1310:	0007d423 	andeq	sp, r7, r3, lsr #8
    1314:	03f22c00 	mvnseq	r2, #0, 24
    1318:	df010000 	svcle	0x00010000
    131c:	08001e02 	stmdaeq	r0, {r1, r9, sl, fp, ip}
    1320:	4d2c0000 	stcmi	0, cr0, [ip, #-0]
    1324:	01000005 	tsteq	r0, r5
}
    1328:	081d02e2 	ldmdaeq	sp, {r1, r5, r6, r7, r9}
__attribute__ ((noreturn)) void __pi_release () {
    132c:	2c000008 	stccs	0, cr0, [r0], {8}
    1330:	00000dd6 	ldrdeq	r0, [r0], -r6
    1334:	2402ea01 	strcs	lr, [r2], #-2561	; 0xfffff5ff
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1338:	0000082c 	andeq	r0, r0, ip, lsr #16
	check_stack_overflow;
    133c:	0007a82c 	andeq	sl, r7, ip, lsr #16
    1340:	02ed0100 	rsceq	r0, sp, #0, 2
    1344:	00083420 	andeq	r3, r8, r0, lsr #8
	update_n_wake (MAX_WORD, NO);
    1348:	0a702c00 	beq	1c0c350 <__ccfg+0x1bec3a8>
    134c:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    1350:	083e2602 	ldmdaeq	lr!, {r1, r9, sl, sp}
	for_all_tasks (__pi_curr) {
    1354:	c72c0000 	strgt	r0, [ip, -r0]!
    1358:	01000001 	tsteq	r0, r1
    135c:	8e1e030a 	cdphi	3, 1, cr0, cr14, cr10, {0}
  __ASM volatile ("cpsid i" : : : "memory");
    1360:	2c000008 	stccs	0, cr0, [r0], {8}
	__SLEEP;
    1364:	000001f7 	strdeq	r0, [r0], -r7
    1368:	1d030d01 	stcne	13, cr0, [r3, #-4]
    136c:	00000896 	muleq	r0, r6, r8
    1370:	00004b2c 	andeq	r4, r0, ip, lsr #22
	system_event_count ++;
    1374:	03150100 	tsteq	r5, #0, 2
    1378:	0008ba20 	andeq	fp, r8, r0, lsr #20
	switch (__pi_systat.effpdm) {
    137c:	0a412c00 	beq	104c384 <__ccfg+0x102c3dc>
    1380:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    1384:	08c22003 	stmiaeq	r2, {r0, r1, sp}^
    1388:	7e2c0000 	cdpvc	0, 2, cr0, cr12, cr0, {0}
			__WFI ();
    138c:	0100000d 	tsteq	r0, sp
    1390:	e4260320 	strt	r0, [r6], #-800	; 0xfffffce0
    1394:	2c000008 	stccs	0, cr0, [r0], {8}
	check_stack_overflow;
    1398:	00000599 	muleq	r0, r9, r5
    139c:	20033b01 	andcs	r3, r3, r1, lsl #22
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    13a0:	00000934 	andeq	r0, r0, r4, lsr r9
    13a4:	0009a22c 	andeq	sl, r9, ip, lsr #4
			(__pi_curr->code) (tstate (__pi_curr));
    13a8:	033e0100 	teqeq	lr, #0, 2
			goto Redo;
    13ac:	00093c1f 	andeq	r3, r9, pc, lsl ip
	for_all_tasks (__pi_curr) {
    13b0:	0aed2c00 	beq	ffb4c3b8 <_estack+0xdfb473b8>
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    13b4:	46010000 	strmi	r0, [r1], -r0
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    13b8:	09602903 	stmdbeq	r0!, {r0, r1, r8, fp, sp}^
    13bc:	222c0000 	eorcs	r0, ip, #0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    13c0:	0100000a 	tsteq	r0, sl
    13c4:	68220349 	stmdavs	r2!, {r0, r3, r6, r8, r9}
    13c8:	2c000009 	stccs	0, cr0, [r0], {9}
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    13cc:	000004e4 	andeq	r0, r0, r4, ror #9
    13d0:	1a035101 	bne	d57dc <__ccfg+0xb5834>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    13d4:	0000098a 	andeq	r0, r0, sl, lsl #19
    13d8:	0004a02c 	andeq	sl, r4, ip, lsr #32
			__WFI ();
    13dc:	03630100 	cmneq	r3, #0, 2
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    13e0:	0009da16 	andeq	sp, r9, r6, lsl sl
    13e4:	08892c00 	stmeq	r9, {sl, fp, sp}
}
    13e8:	66010000 	strvs	r0, [r1], -r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    13ec:	09e21d03 	stmibeq	r2!, {r0, r1, r8, sl, fp, ip}^
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    13f0:	6d2c0000 	stcvs	0, cr0, [ip, #-0]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    13f4:	01000008 	tsteq	r0, r8
    13f8:	fa15036f 	blx	5421bc <__ccfg+0x522214>
			PRCMPowerDomainOff (__pi_systat.ondmns |
    13fc:	2c000009 	stccs	0, cr0, [r0], {9}
    1400:	00000d0d 	andeq	r0, r0, sp, lsl #26
    1404:	10037301 	andne	r7, r3, r1, lsl #6
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1408:	00000a08 	andeq	r0, r0, r8, lsl #20
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    140c:	0007152c 	andeq	r1, r7, ip, lsr #10
    1410:	03780100 	cmneq	r8, #0, 2
    1414:	000a4e13 	andeq	r4, sl, r3, lsl lr
    1418:	0b222c00 	bleq	88c420 <__ccfg+0x86c478>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    141c:	7d010000 	stcvc	0, cr0, [r1, #-0]
    1420:	0a5c1103 	beq	1705834 <__ccfg+0x16e588c>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1424:	e02d0000 	eor	r0, sp, r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1428:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    142c:	0000098e 	andeq	r0, r0, lr, lsl #19
    1430:	0d020201 	sfmeq	f0, 4, [r2, #-4]
    1434:	0000002c 	andeq	r0, r0, ip, lsr #32
    1438:	05540305 	ldrbeq	r0, [r4, #-773]	; 0xfffffcfb
			SysCtrlSetRechargeBeforePowerDown
    143c:	8b2e2000 	blhi	b89444 <__ccfg+0xb6949c>
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1440:	01000004 	tsteq	r0, r4
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1444:	bd0e0203 	sfmlt	f0, 4, [lr, #-12]
    1448:	0500000e 	streq	r0, [r0, #-14]
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    144c:	00056a03 	andeq	r6, r5, r3, lsl #20
    1450:	04bb2e20 	ldrteq	r2, [fp], #3616	; 0xe20
    1454:	04010000 	streq	r0, [r1], #-0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    1458:	09261102 	stmdbeq	r6!, {r1, r8, ip}
    145c:	03050000 	movweq	r0, #20480	; 0x5000
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1460:	20000568 	andcs	r0, r0, r8, ror #10
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1464:	0002822e 	andeq	r8, r2, lr, lsr #4
    1468:	02050100 	andeq	r0, r5, #0, 2
    146c:	00092611 	andeq	r2, r9, r1, lsl r6
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1470:	69030500 	stmdbvs	r3, {r8, sl}
			while (!(AONWUCPowerStatusGet () &
    1474:	2f200005 	svccs	0x00200005
			PRCMPowerDomainOn (__pi_systat.ondmns);
    1478:	00000658 	andeq	r0, r0, r8, asr r6
    147c:	00000678 	andeq	r0, r0, r8, ror r6
    1480:	000014b9 			; <UNDEFINED> instruction: 0x000014b9
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    1484:	000c752e 	andeq	r7, ip, lr, lsr #10
    1488:	02730100 	rsbseq	r0, r3, #0, 2
    148c:	0009320c 	andeq	r3, r9, ip, lsl #4
    1490:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1494:	001b2f30 	andseq	r2, fp, r0, lsr pc
    1498:	00066a00 	andeq	r6, r6, r0, lsl #20
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    149c:	00010000 	andeq	r0, r1, r0
    14a0:	02780100 	rsbseq	r0, r8, #0, 2
			SysCtrlAdjustRechargeAfterPowerDown ();
    14a4:	1b4e3108 	blne	138d8cc <__ccfg+0x136d924>
			reinit_uart ();
    14a8:	00290000 	eoreq	r0, r9, r0
    14ac:	42310000 	eorsmi	r0, r1, #0
    14b0:	3d00001b 	stccc	0, cr0, [r0, #-108]	; 0xffffff94
}
    14b4:	00000000 	andeq	r0, r0, r0
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    14b8:	01203200 			; <UNDEFINED> instruction: 0x01203200
    14bc:	15100000 	ldrne	r0, [r0, #-0]
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    14c0:	642e0000 	strtvs	r0, [lr], #-0
    14c4:	01000003 	tsteq	r0, r3
    14c8:	260b0284 	strcs	r0, [fp], -r4, lsl #5
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    14cc:	02000009 	andeq	r0, r0, #9
    14d0:	40326491 	mlasmi	r2, r1, r4, r6
    14d4:	eb000001 	bl	14e0 <__pi_release+0x1b4>
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    14d8:	33000014 	movwcc	r0, #20
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    14dc:	94010069 	strls	r0, [r1], #-105	; 0xffffff97
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    14e0:	002c0b02 	eoreq	r0, ip, r2, lsl #22
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    14e4:	00500000 	subseq	r0, r0, r0
    14e8:	34000000 	strcc	r0, [r0], #-0
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    14ec:	00001b5b 	andeq	r1, r0, fp, asr fp
    14f0:	00000692 	muleq	r0, r2, r6
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    14f4:	00000694 	muleq	r0, r4, r6
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    14f8:	08028801 	stmdaeq	r2, {r0, fp, pc}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    14fc:	001b7a31 	andseq	r7, fp, r1, lsr sl
    1500:	00006e00 	andeq	r6, r0, r0, lsl #28
			PRCMPowerDomainOff (
    1504:	1b6e3100 	blne	1b8d90c <__ccfg+0x1b6d964>
    1508:	00810000 	addeq	r0, r1, r0
	__SLEEP;
    150c:	00000000 	andeq	r0, r0, r0
    1510:	00015832 	andeq	r5, r1, r2, lsr r8
  __ASM volatile ("cpsie i" : : : "memory");
    1514:	00152b00 	andseq	r2, r5, r0, lsl #22
	goto Redo;
    1518:	0ec23500 	cdpeq	5, 12, cr3, cr2, cr0, {0}
    151c:	b6010000 	strlt	r0, [r1], -r0
    1520:	15be1b02 	ldrne	r1, [lr, #2818]!	; 0xb02
    1524:	00940000 	addseq	r0, r4, r0
    1528:	2f000000 	svccs	0x00000000
    152c:	000007dc 	ldrdeq	r0, [r0], -ip
    1530:	000007fa 	strdeq	r0, [r0], -sl
    1534:	00001548 	andeq	r1, r0, r8, asr #10
    1538:	01006933 	tsteq	r0, r3, lsr r9
    153c:	2c0c02cf 	sfmcs	f0, 4, [ip], {207}	; 0xcf
    1540:	b2000000 	andlt	r0, r0, #0
    1544:	00000000 	andeq	r0, r0, r0
    1548:	00083e2f 	andeq	r3, r8, pc, lsr #28
    154c:	00088e00 	andeq	r8, r8, r0, lsl #28
    1550:	00156700 	andseq	r6, r5, r0, lsl #14
    1554:	00003500 	andeq	r3, r0, r0, lsl #10
    1558:	f2010000 	vhadd.s8	d0, d1, d0
    155c:	15be1b02 	ldrne	r1, [lr, #2818]!	; 0xb02
    1560:	00d00000 	sbcseq	r0, r0, r0
    1564:	2f000000 	svccs	0x00000000
    1568:	000008e4 	andeq	r0, r0, r4, ror #17
    156c:	00000934 	andeq	r0, r0, r4, lsr r9
    1570:	00001585 	andeq	r1, r0, r5, lsl #11
    1574:	000b7d2e 	andeq	r7, fp, lr, lsr #26
    1578:	03220100 			; <UNDEFINED> instruction: 0x03220100
    157c:	0015be1b 	andseq	fp, r5, fp, lsl lr
    1580:	60910200 	addsvs	r0, r1, r0, lsl #4
	cli_tim;
    1584:	098a2f00 	stmibeq	sl, {r8, r9, sl, fp, sp}
    1588:	09da0000 	ldmibeq	sl, {}^	; <UNPREDICTABLE>
    158c:	15a30000 	strne	r0, [r3, #0]!
	diag ("PicOS halted");
    1590:	d12e0000 			; <UNDEFINED> instruction: 0xd12e0000
	mdelay (500);
    1594:	01000009 	tsteq	r0, r9
    1598:	be1b0353 	mrclt	3, 0, r0, cr11, cr3, {2}
	setpowermode (2);
    159c:	02000015 	andeq	r0, r0, #21
	__PCB = NULL;
    15a0:	36006491 			; <UNDEFINED> instruction: 0x36006491
	release;
    15a4:	00000a1c 	andeq	r0, r0, ip, lsl sl
    15a8:	00000a4e 	andeq	r0, r0, lr, asr #20
    15ac:	01006933 	tsteq	r0, r3, lsr r9
    15b0:	2c0c0368 	stccs	3, cr0, [ip], {104}	; 0x68
int main (void) {
    15b4:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    15b8:	00000000 	andeq	r0, r0, r0
    15bc:	04110000 	ldreq	r0, [r1], #-0
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    15c0:	00001134 	andeq	r1, r0, r4, lsr r1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    15c4:	007b0137 	rsbseq	r0, fp, r7, lsr r1
	system_init ();
    15c8:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
	tcv_init ();
    15cc:	01e80106 	mvneq	r0, r6, lsl #2
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    15d0:	052c0000 	streq	r0, [ip, #-0]!
    15d4:	9c010000 	stcls	0, cr0, [r1], {-0}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    15d8:	0000183d 	andeq	r1, r0, sp, lsr r8
    15dc:	000c2e38 	andeq	r2, ip, r8, lsr lr
    15e0:	15f00100 	ldrbne	r0, [r0, #256]!	; 0x100
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    15e4:	00000962 	andeq	r0, r0, r2, ror #18
    15e8:	00000101 	andeq	r0, r0, r1, lsl #2
	delay (16, 0);
    15ec:	00044739 	andeq	r4, r4, r9, lsr r7
    15f0:	2ef00100 	cdpcs	1, 15, cr0, cr0, cr0, {0}
    15f4:	00001249 	andeq	r1, r0, r9, asr #4
	__pi_release ();
    15f8:	0000011f 	andeq	r0, r0, pc, lsl r1
    15fc:	00065d3a 	andeq	r5, r6, sl, lsr sp
    1600:	13f60100 	mvnsne	r0, #0, 2
    1604:	00000206 	andeq	r0, r0, r6, lsl #4
    1608:	0005cc3a 	andeq	ip, r5, sl, lsr ip
    160c:	0ef90100 	cdpeq	1, 15, cr0, cr9, cr0, {0}
    1610:	00000214 	andeq	r0, r0, r4, lsl r2
static void killev (__pi_pcb_t *pid) {
    1614:	000da12c 	andeq	sl, sp, ip, lsr #2
	wfun = (aword)(pid->code);
    1618:	01d90100 	bicseq	r0, r9, r0, lsl #2
	for_all_tasks (i) {
    161c:	0002ec15 	andeq	lr, r2, r5, lsl ip
		for (j = 0; j < nevents (i); j++) {
    1620:	0dbc2c00 	ldceq	12, cr2, [ip]
    1624:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    1628:	02fa1d01 	rscseq	r1, sl, #1, 26	; 0x40
			    || i->Events [j] . Event == wfun
    162c:	332c0000 			; <UNDEFINED> instruction: 0x332c0000
		for (j = 0; j < nevents (i); j++) {
    1630:	01000005 	tsteq	r0, r5
			if (i->Events [j] . Event == (aword)pid
    1634:	081d01e1 	ldmdaeq	sp, {r0, r5, r6, r7, r8}
    1638:	2c000003 	stccs	0, cr0, [r0], {3}
    163c:	000006c5 	andeq	r0, r0, r5, asr #13
				wakeupev (i, j);
    1640:	1f01e401 	svcne	0x0001e401
    1644:	00000316 	andeq	r0, r0, r6, lsl r3
	for_all_tasks (i) {
    1648:	00072e2c 	andeq	r2, r7, ip, lsr #28
}
    164c:	01e90100 	mvneq	r0, r0, lsl #2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1650:	00032e16 	andeq	r2, r3, r6, lsl lr
static void qfree (aword *ch) {
    1654:	07412c00 	strbeq	r2, [r1, -r0, lsl #24]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1658:	ec010000 	stc	0, cr0, [r1], {-0}
	cc = (aword*)(mpools + MA_NP);
    165c:	03421601 	movteq	r1, #9729	; 0x2601
	m_setnextp (ch, chunk);
    1660:	542c0000 	strtpl	r0, [ip], #-0
	m_setnextp (cc, ch);
    1664:	01000007 	tsteq	r0, r7
}
    1668:	561601ef 	ldrpl	r0, [r6], -pc, ror #3
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    166c:	2c000003 	stccs	0, cr0, [r0], {3}
    1670:	00000b22 	andeq	r0, r0, r2, lsr #22
    1674:	1101f401 	tstne	r1, r1, lsl #8	; <UNPREDICTABLE>
			m_setnextp (cc, m_nextp (chunk));
    1678:	0000036a 	andeq	r0, r0, sl, ror #6
			m_size (chunk) += m_hdrlen + m_size (ch);
    167c:	0000602d 	andeq	r6, r0, sp, lsr #32
    1680:	026f3b00 	rsbeq	r3, pc, #0, 22
    1684:	f1010000 	setend	le
    1688:	0015be21 	andseq	fp, r5, r1, lsr #28
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    168c:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    1690:	3b200005 	blcc	8016ac <__ccfg+0x7e1704>
    1694:	00000c1e 	andeq	r0, r0, lr, lsl ip
    1698:	a611f301 	ldrge	pc, [r1], -r1, lsl #6
			m_setnextp (cc, m_nextp (chunk));
    169c:	05000009 	streq	r0, [r0, #-9]
			m_size (ch) += m_hdrlen + m_size (chunk);
    16a0:	00055803 	andeq	r5, r5, r3, lsl #16
    16a4:	00453b20 	subeq	r3, r5, r0, lsr #22
    16a8:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    16ac:	000ebd0e 	andeq	fp, lr, lr, lsl #26
    16b0:	40030500 	andmi	r0, r3, r0, lsl #10
    16b4:	2d200005 	stccs	0, cr0, [r0, #-20]!	; 0xffffffec
			if (m_size (chunk) >= m_size (ch))
    16b8:	00000078 	andeq	r0, r0, r8, ror r0
    16bc:	6570743c 	ldrbvs	r7, [r0, #-1084]!	; 0xfffffbc4
    16c0:	0bfa0100 	bleq	ffe81ac8 <_estack+0xdfe7cac8>
		chunk = m_nextp (chunk))
    16c4:	00000926 	andeq	r0, r0, r6, lsr #18
    16c8:	7fb79103 	svcvc	0x00b79103
    16cc:	0003473d 	andeq	r4, r3, sp, lsr r7
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    16d0:	0bfb0100 	bleq	ffec1ad8 <_estack+0xdfebcad8>
	diag_wait (a);
    16d4:	00000926 	andeq	r0, r0, r6, lsr #18
	diag_wchar (c, a);
    16d8:	0000902d 	andeq	r9, r0, sp, lsr #32
    16dc:	02112e00 	andseq	r2, r1, #0, 28
}
    16e0:	11010000 	mrsne	r0, (UNDEF: 1)
    16e4:	15be1d01 	ldrne	r1, [lr, #3329]!	; 0xd01
	syserror (ESTATE, "state");
    16e8:	51010000 	mrspl	r0, (UNDEF: 1)
    16ec:	000cf33e 	andeq	pc, ip, lr, lsr r3	; <UNPREDICTABLE>
    16f0:	01130100 	tsteq	r3, r0, lsl #2
    16f4:	00183d25 	andseq	r3, r8, r5, lsr #26
	for (i = 0; i < MAX_UTIMERS; i++)
    16f8:	02243e00 	eoreq	r3, r4, #0, 28
void utimer_add (address ut) {
    16fc:	34010000 	strcc	r0, [r1], #-0
    1700:	18432601 	stmdane	r3, {r0, r9, sl, sp}^
		if (__pi_utims [i] == NULL)
    1704:	373e0000 	ldrcc	r0, [lr, -r0]!
	for (i = 0; i < MAX_UTIMERS; i++)
    1708:	01000002 	tsteq	r0, r2
    170c:	be1d0149 	mufltem	f0, f5, #1.0
		syserror (ERESOURCE, "ut a");
    1710:	3e000015 	mcrcc	0, 0, r0, cr0, cr5, {0}
	__pi_utims [i] = ut;
    1714:	00000a7d 	andeq	r0, r0, sp, ror sl
}
    1718:	21014a01 	tstcs	r1, r1, lsl #20
    171c:	00001849 	andeq	r1, r0, r9, asr #16
    1720:	0008bb3e 	andeq	fp, r8, lr, lsr fp
	*t = v;
    1724:	014b0100 	mrseq	r0, (UNDEF: 91)
	TCI_RUN_AUXILIARY_TIMER;
    1728:	00184f09 	andseq	r4, r8, r9, lsl #30
void update_n_wake (word min, Boolean force) {
    172c:	07733e00 	ldrbeq	r3, [r3, -r0, lsl #28]!
	if (TCI_UPDATE_DELAY_TICKS (force))
    1730:	4c010000 	stcmi	0, cr0, [r1], {-0}
    1734:	09260d01 	stmdbeq	r6!, {r0, r8, sl, fp}
    1738:	c93e0000 	ldmdbgt	lr!, {}	; <UNPREDICTABLE>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    173c:	01000003 	tsteq	r0, r3
    1740:	be1d016c 	mufltez	f0, f5, #4.0
    1744:	3e000015 	mcrcc	0, 0, r0, cr0, cr5, {0}
    1748:	00000d8b 	andeq	r0, r0, fp, lsl #27
    174c:	21016d01 	tstcs	r1, r1, lsl #26
    1750:	00001856 	andeq	r1, r0, r6, asr r8
    1754:	00025c3e 	andeq	r5, r2, lr, lsr ip
    1758:	01870100 	orreq	r0, r7, r0, lsl #2
    175c:	0015be1d 	andseq	fp, r5, sp, lsl lr
    1760:	07c53e00 	strbeq	r3, [r5, r0, lsl #28]
    1764:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    1768:	185c2301 	ldmdane	ip, {r0, r8, r9, sp}^
    176c:	272e0000 	strcs	r0, [lr, -r0]!
		for_all_tasks (i) {
    1770:	01000009 	tsteq	r0, r9
	__pi_mintk = znew + min;
    1774:	88130189 	ldmdahi	r3, {r0, r3, r7, r8}
    1778:	0300000e 	movweq	r0, #14
			if (!twaiting (i))
    177c:	3f7fb891 	svccc	0x007fb891
    1780:	000018ec 	andeq	r1, r0, ip, ror #17
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1784:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    1788:	000003c0 	andeq	r0, r0, r0, asr #7
    178c:	1b017e01 	blne	60f98 <__ccfg+0x40ff0>
    1790:	000017c5 	andeq	r1, r0, r5, asr #15
    1794:	00194740 	andseq	r4, r9, r0, asr #14
    1798:	193b4000 	ldmdbne	fp!, {lr}
    179c:	2f400000 	svccs	0x00400000
    17a0:	40000019 	andmi	r0, r0, r9, lsl r0
    17a4:	00001923 	andeq	r1, r0, r3, lsr #18
    17a8:	00191731 	andseq	r1, r9, r1, lsr r7
    17ac:	00015e00 	andeq	r5, r1, r0, lsl #28
    17b0:	190b4000 	stmdbne	fp, {lr}
				wakeuptm (i);
    17b4:	ff310000 			; <UNDEFINED> instruction: 0xff310000
    17b8:	72000018 	andvc	r0, r0, #24
		for_all_tasks (i) {
    17bc:	41000001 	tstmi	r0, r1
				d = i->Timer - znew;
    17c0:	00001953 	andeq	r1, r0, r3, asr r9
    17c4:	18ec4200 	stmiane	ip!, {r9, lr}^
    17c8:	03c00000 	biceq	r0, r0, #0
		if ((word)(__pi_mintk - znew) < min) 
    17cc:	00b00000 	adcseq	r0, r0, r0
    17d0:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    17d4:	18151c01 	ldmdane	r5, {r0, sl, fp, ip}
	__pi_old = znew;
    17d8:	47310000 	ldrmi	r0, [r1, -r0]!
}
    17dc:	86000019 			; <UNDEFINED> instruction: 0x86000019
	TCI_RUN_DELAY_TIMER;
    17e0:	40000001 	andmi	r0, r0, r1
}
    17e4:	0000193b 	andeq	r1, r0, fp, lsr r9
    17e8:	00192f40 	andseq	r2, r9, r0, asr #30
    17ec:	19233100 	stmdbne	r3!, {r8, ip, sp}
    17f0:	01990000 	orrseq	r0, r9, r0
    17f4:	17400000 	strbne	r0, [r0, -r0]
void proceed (word state) {
    17f8:	31000019 	tstcc	r0, r9, lsl r0
	prcdstate (__pi_curr, state);
    17fc:	0000190b 	andeq	r1, r0, fp, lsl #18
    1800:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
	release;
    1804:	0018ff40 	andseq	pc, r8, r0, asr #30
    1808:	00b02d00 	adcseq	r2, r0, r0, lsl #26
void __pi_wait (aword event, word state) {
    180c:	53410000 	movtpl	r0, #4096	; 0x1000
	sint j = nevents (__pi_curr);
    1810:	00000019 	andeq	r0, r0, r9, lsl r0
	if (j >= MAX_EVENTS_PER_TASK)
    1814:	19a53000 	stmibne	r5!, {ip, sp}
    1818:	040c0000 	streq	r0, [ip], #-0
    181c:	00c80000 	sbceq	r0, r8, r0
		syserror (ENEVENTS, "sw");
    1820:	92010000 	andls	r0, r1, #0
    1824:	c4311901 	ldrtgt	r1, [r1], #-2305	; 0xfffff6ff
	setestate (__pi_curr->Events [j], state, event);
    1828:	cd000019 	stcgt	0, cr0, [r0, #-100]	; 0xffffff9c
	incwait (__pi_curr);
    182c:	31000001 	tstcc	r0, r1
	setestate (__pi_curr->Events [j], state, event);
    1830:	000019b8 			; <UNDEFINED> instruction: 0x000019b8
}
    1834:	000001f2 	strdeq	r0, [r0], -r2
    1838:	00000000 	andeq	r0, r0, r0
    183c:	68041100 	stmdavs	r4, {r8, ip}
void __pi_trigger (aword event) {
    1840:	1100000f 	tstne	r0, pc
	for_all_tasks (i) {
    1844:	000fb704 	andeq	fp, pc, r4, lsl #14
		for (j = 0; j < nevents (i); j++) {
    1848:	06041100 	streq	r1, [r4], -r0, lsl #2
    184c:	02000010 	andeq	r0, r0, #16
    1850:	0ca20201 	sfmeq	f0, 4, [r2], #4
    1854:	04110000 	ldreq	r0, [r1], #-0
			if (i->Events [j] . Event == event) {
    1858:	00001062 	andeq	r1, r0, r2, rrx
    185c:	10cb0411 	sbcne	r0, fp, r1, lsl r4
    1860:	01370000 	teqeq	r7, r0
				wakeupev (i, j);
    1864:	00000a93 	muleq	r0, r3, sl
    1868:	0106b601 	tsteq	r6, r1, lsl #12
	for_all_tasks (i) {
    186c:	000000c8 	andeq	r0, r0, r8, asr #1
}
    1870:	0000016c 	andeq	r0, r0, ip, ror #2
aword __pi_join (aword pid, word st) {
    1874:	18ec9c01 	stmiane	ip!, {r0, sl, fp, ip, pc}^
	for_all_tasks (i) {
    1878:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
    187c:	0100000c 	tsteq	r0, ip
	return 0;
    1880:	096213b6 	stmdbeq	r2!, {r1, r2, r4, r5, r7, r8, r9, ip}^
		if ((aword)i == pid) {
    1884:	02050000 	andeq	r0, r5, #0
			__pi_wait (pid, st);
    1888:	0a390000 	beq	e41890 <__ccfg+0xe218e8>
}
    188c:	0100000c 	tsteq	r0, ip
	for_all_tasks (i) {
    1890:	15be37b6 	ldrne	r3, [lr, #1974]!	; 0x7b6
    1894:	02230000 	eoreq	r0, r3, #0
void delay (word d, word state) {
    1898:	f43a0000 			; <UNDEFINED> instruction: 0xf43a0000
	settstate (__pi_curr, state);
    189c:	01000009 	tsteq	r0, r9
    18a0:	00da11bb 	ldrheq	r1, [sl], #27
    18a4:	fa3a0000 	blx	e818ac <__ccfg+0xe61904>
    18a8:	0100000b 	tsteq	r0, fp
	update_n_wake (d, YES);
    18ac:	011a1be8 	tsteq	sl, r8, ror #23
    18b0:	002d0000 	eoreq	r0, sp, r0
	__pi_curr->Timer = __pi_old + d;
    18b4:	3b000000 	blcc	18bc <delay+0x24>
    18b8:	00000c27 	andeq	r0, r0, r7, lsr #24
	inctimer (__pi_curr);
    18bc:	a611b701 	ldrge	fp, [r1], -r1, lsl #14
    18c0:	05000009 	streq	r0, [r0, #-9]
    18c4:	00055c03 	andeq	r5, r5, r3, lsl #24
}
    18c8:	03a04320 	moveq	r4, #32, 6	; 0x80000000
    18cc:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
	if (fun == NULL)
    18d0:	00002c0d 	andeq	r2, r0, sp, lsl #24
		return (int) __pi_curr;
    18d4:	382d1e00 	stmdacc	sp!, {r9, sl, fp, ip}
    18d8:	44000000 	strmi	r0, [r0], #-0
	for_all_tasks (i)
    18dc:	be010070 	mcrlt	0, 0, r0, cr1, cr0, {3}
}
    18e0:	0005bd0a 	andeq	fp, r5, sl, lsl #26
		if (i->code == fun)
    18e4:	00023a00 	andeq	r3, r2, r0, lsl #20
	for_all_tasks (i)
    18e8:	00000000 	andeq	r0, r0, r0
    18ec:	0ad30145 	beq	ff4c1e08 <_estack+0xdf4bce08>
    18f0:	a1010000 	mrsge	r0, (UNDEF: 1)
int __pi_strlen (const char *s) {
    18f4:	15be0119 	ldrne	r0, [lr, #281]!	; 0x119
	for (i = 0; *(s+i) != '\0'; i++);
    18f8:	60010000 	andvs	r0, r1, r0
}
    18fc:	46000019 			; <UNDEFINED> instruction: 0x46000019
	for (i = 0; *(s+i) != '\0'; i++);
    1900:	00646967 	rsbeq	r6, r4, r7, ror #18
	while ((Boolean)(*d++ = *s++));
    1904:	323ca101 	eorscc	sl, ip, #1073741824	; 0x40000000
    1908:	47000009 	strmi	r0, [r0, -r9]
    190c:	00000d6f 	andeq	r0, r0, pc, ror #26
}
    1910:	2649a101 	strbcs	sl, [r9], -r1, lsl #2
	while (n-- && (*s != '\0'))
    1914:	47000009 	strmi	r0, [r0, -r9]
    1918:	000004da 	ldrdeq	r0, [r0], -sl
	*d = '\0';
    191c:	2661a101 	strbtcs	sl, [r1], -r1, lsl #2
	while (n-- && (*s != '\0'))
    1920:	47000009 	strmi	r0, [r0, -r9]
    1924:	00000290 	muleq	r0, r0, r2
		*d++ = *s++;
    1928:	2674a101 	ldrbtcs	sl, [r4], -r1, lsl #2
    192c:	47000009 	strmi	r0, [r0, -r9]
	while (n--)
    1930:	00000773 	andeq	r0, r0, r3, ror r7
    1934:	2689a101 	strcs	sl, [r9], r1, lsl #2
		*dest++ = *src++;
    1938:	47000009 	strmi	r0, [r0, -r9]
    193c:	00000824 	andeq	r0, r0, r4, lsr #16
    1940:	2699a101 	ldrcs	sl, [r9], r1, lsl #2
	while (n--)
    1944:	46000009 	strmi	r0, [r0], -r9
}
    1948:	00636572 	rsbeq	r6, r3, r2, ror r5
		*dest++ = c;
    194c:	bda7a101 	stfltd	f2, [r7, #4]!
void adddevfunc (devreqfun_t rf, int loc) {
    1950:	3d000005 	stccc	0, cr0, [r0, #-20]	; 0xffffffec
		syserror (EREQPAR, "addv");
    1954:	00000adc 	ldrdeq	r0, [r0], -ip
		syserror (ERESOURCE, "addv");
    1958:	be1aa201 	cdplt	2, 1, cr10, cr10, cr1, {0}
	if (ioreq [loc] != NULL)
    195c:	00000015 	andeq	r0, r0, r5, lsl r0
    1960:	0f1c0148 	svceq	0x001c0148
		syserror (ERESOURCE, "addv");
    1964:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
	ioreq [loc] = rf;
    1968:	184f0105 	stmdane	pc, {r0, r2, r8}^	; <UNPREDICTABLE>
}
    196c:	052c0000 	streq	r0, [ip, #-0]!
    1970:	05520000 	ldrbeq	r0, [r2, #-0]
sint io (word retry, word dev, word operation, char *buf, word len) {
    1974:	9c010000 	stcls	0, cr0, [r1], {-0}
    1978:	000019a5 	andeq	r1, r0, r5, lsr #19
    197c:	0051d638 	subseq	sp, r1, r8, lsr r6
    1980:	1d8e0100 	stfnes	f0, [lr]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1984:	00001249 	andeq	r1, r0, r9, asr #4
    1988:	0000024d 	andeq	r0, r0, sp, asr #4
    198c:	00053436 	andeq	r3, r5, r6, lsr r4
		syserror (ENODEVICE, "io");
    1990:	00054600 	andeq	r4, r5, r0, lsl #12
    1994:	00694400 	rsbeq	r4, r9, r0, lsl #8
	if (len == 0)
    1998:	2c119401 	cfldrscs	mvf9, [r1], {1}
	ret = (ioreq [dev]) (operation, buf, len);
    199c:	6b000000 	blvs	19a4 <io+0x30>
    19a0:	00000002 	andeq	r0, r0, r2
	if (ret >= 0)
    19a4:	d1014500 	tstle	r1, r0, lsl #10
	if (ret == -1) {
    19a8:	01000009 	tsteq	r0, r9
    19ac:	88010f86 	stmdahi	r1, {r1, r2, r7, r8, r9, sl, fp}
		if (retry == WNONE)
    19b0:	0100000e 	tsteq	r0, lr
		iowait (dev, operation, retry);
    19b4:	000019d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    19b8:	0051d647 	subseq	sp, r1, r7, asr #12
    19bc:	2c860100 	stfcss	f0, [r6], {0}
			release;
    19c0:	00001249 	andeq	r1, r0, r9, asr #4
	if (ret == -2) {
    19c4:	0004c947 	andeq	ip, r4, r7, asr #18
		if (retry != WNONE) {
    19c8:	3a860100 	bcc	fe181dd0 <_estack+0xde17cdd0>
    19cc:	00000926 	andeq	r0, r0, r6, lsr #18
			iowait (dev, operation, retry);
    19d0:	7d014800 	stcvc	8, cr4, [r1, #-0]
    19d4:	0100000b 	tsteq	r0, fp
			(ioreq [dev]) (NONE, buf, len);
    19d8:	4f010572 	svcmi	0x00010572
    19dc:	cc000018 	stcgt	0, cr0, [r0], {24}
    19e0:	e8000001 	stmda	r0, {r0}
		(ioreq [dev]) (NONE, buf, len);
    19e4:	01000001 	tsteq	r0, r1
    19e8:	001a0e9c 	mulseq	sl, ip, lr
    19ec:	51d63800 	bicspl	r3, r6, r0, lsl #16
}
    19f0:	72010000 	andvc	r0, r1, #0
	if (retry != WNONE) {
    19f4:	00124920 	andseq	r4, r2, r0, lsr #18
		delay (-ret - 2, retry);
    19f8:	00028900 	andeq	r8, r2, r0, lsl #18
    19fc:	04c93800 	strbeq	r3, [r9], #2048	; 0x800
    1a00:	72010000 	andvc	r0, r1, #0
    1a04:	0009262e 	andeq	r2, r9, lr, lsr #12
		release;
    1a08:	00029c00 	andeq	r9, r2, r0, lsl #24
    1a0c:	01480000 	mrseq	r0, (UNDEF: 72)
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1a10:	000005e1 	andeq	r0, r0, r1, ror #11
    1a14:	01056201 	tsteq	r5, r1, lsl #4
    1a18:	0000184f 	andeq	r1, r0, pc, asr #16
    1a1c:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    1a20:	000001cc 	andeq	r0, r0, ip, asr #3
		syserror (ERESOURCE, "mal1");
    1a24:	1a4f9c01 	bne	13e8a30 <__ccfg+0x13c8a88>
    1a28:	d6380000 	ldrtle	r0, [r8], -r0
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1a2c:	01000051 	qaddeq	r0, r1, r0
    1a30:	12492d62 	subne	r2, r9, #6272	; 0x1880
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a34:	02af0000 	adceq	r0, pc, #0
	m_size (mpools [0]) = mlen - m_hdrlen;
    1a38:	b6360000 	ldrtlt	r0, [r6], -r0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a3c:	c8000001 	stmdagt	r0, {r0}
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1a40:	49000001 	stmdbmi	r0, {r0}
    1a44:	67010069 	strvs	r0, [r1, -r9, rrx]
}
    1a48:	00002c12 	andeq	r2, r0, r2, lsl ip
    1a4c:	45000000 	strmi	r0, [r0, #-0]
    1a50:	0003e401 	andeq	lr, r3, r1, lsl #8
    1a54:	05420100 	strbeq	r0, [r2, #-256]	; 0xffffff00
    1a58:	00184f01 	andseq	r4, r8, r1, lsl #30
    1a5c:	1a9f0100 	bne	fe7c1e64 <_estack+0xde7bce64>
void __pi_free (aword *ch) {
    1a60:	d6470000 	strble	r0, [r7], -r0
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1a64:	01000051 	qaddeq	r0, r1, r0
    1a68:	12492042 	subne	r2, r9, #66	; 0x42
		syserror (EMALLOC, "malg");
    1a6c:	ed470000 	stcl	0, cr0, [r7, #-0]
    1a70:	0100000e 	tsteq	r0, lr
	mcfree [MA_NP] += m_size (ch);
    1a74:	05bd2c42 	ldreq	r2, [sp, #3138]!	; 0xc42
		m_size (ch) ^= MALLOC_UMASK;
    1a78:	2e470000 	cdpcs	0, 4, cr0, cr7, cr0, {0}
    1a7c:	0100000f 	tsteq	r0, pc
	mcfree [MA_NP] += m_size (ch);
    1a80:	09263f42 	stmdbeq	r6!, {r1, r6, r8, r9, sl, fp, ip, sp}
	QFREE;
    1a84:	6e490000 	cdpvs	0, 4, cr0, cr9, cr0, {0}
	if (mevent [MA_NP] . nwait) {
    1a88:	01006d75 	tsteq	r0, r5, ror sp
    1a8c:	002c0945 	eoreq	r0, ip, r5, asr #18
		trigger ((aword)(&(mevent [MA_NP])));
    1a90:	494a0000 	stmdbmi	sl, {}^	; <UNPREDICTABLE>
		mevent [MA_NP] . nwait --;
    1a94:	4d010069 	stcmi	0, cr0, [r1, #-420]	; 0xfffffe5c
}
    1a98:	00002c12 	andeq	r2, r0, r2, lsl ip
    1a9c:	4b000000 	blmi	1aa4 <__pi_free+0x44>
    1aa0:	00058401 	andeq	r8, r5, r1, lsl #8
    1aa4:	093d0100 	ldmdbeq	sp!, {r8}
void kill (aword pid) {
    1aa8:	00092601 	andeq	r2, r9, r1, lsl #12
		pid = (aword) __pi_curr;
    1aac:	0001a400 	andeq	sl, r1, r0, lsl #8
	j = NULL;
    1ab0:	0001b600 	andeq	fp, r1, r0, lsl #12
	for_all_tasks (i) {
    1ab4:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
	syserror (EREQPAR, "kpi");
    1ab8:	00009701 	andeq	r9, r0, r1, lsl #14
    1abc:	06360100 	ldrteq	r0, [r6], -r0, lsl #2
		if ((aword)i == pid) {
    1ac0:	00016c01 	andeq	r6, r1, r1, lsl #24
    1ac4:	00018000 	andeq	r8, r1, r0
				__PCB = i->Next;
    1ac8:	f49c0100 			; <UNDEFINED> instruction: 0xf49c0100
			killev (i);
    1acc:	3800001a 	stmdacc	r0, {r1, r3, r4}
			ufree (i);
    1ad0:	000051d6 	ldrdeq	r5, [r0], -r6
			if (i == __pi_curr)
    1ad4:	491f3601 	ldmdbmi	pc, {r0, r9, sl, ip, sp}	; <UNPREDICTABLE>
    1ad8:	c2000012 	andgt	r0, r0, #18
				release;
    1adc:	36000002 	strcc	r0, [r0], -r2
				j->Next = i->Next;
    1ae0:	0000016c 	andeq	r0, r0, ip, ror #2
    1ae4:	0000017e 	andeq	r0, r0, lr, ror r1
    1ae8:	01006949 	tsteq	r0, r9, asr #18
}
    1aec:	002c0b37 	eoreq	r0, ip, r7, lsr fp
    1af0:	00000000 	andeq	r0, r0, r0
    1af4:	0e8c0148 	rmfeqem	f0, f4, #0.0
	if (size < 8)
    1af8:	2f010000 	svccs	0x00010000
		_size = 2;
    1afc:	184f0105 	stmdane	pc, {r0, r2, r8}^	; <UNPREDICTABLE>
	...
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b08:	9c010000 	stcls	0, cr0, [r1], {-0}
		_size = (((aword)size) + 3) >> 2;
    1b0c:	00001b2f 	andeq	r1, r0, pc, lsr #22
		if (mevent [MA_NP] . nfail != 255)
    1b10:	0051d638 	subseq	sp, r1, r8, lsr r6
    1b14:	2a2f0100 	bcs	bc1f1c <__ccfg+0xba1f74>
			mevent [MA_NP] . nfail ++;
    1b18:	00001249 	andeq	r1, r0, r9, asr #4
		mnfree [MA_NP] = 0;
    1b1c:	000002d5 	ldrdeq	r0, [r0], -r5
    1b20:	0003924c 	andeq	r9, r3, ip, asr #4
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b24:	382f0100 	stmdacc	pc!, {r8}	; <UNPREDICTABLE>
    1b28:	00000926 	andeq	r0, r0, r6, lsr #18
			syserror (EMALLOC, "malc");
    1b2c:	45005101 	strmi	r5, [r0, #-257]	; 0xfffffeff
    1b30:	0008cb01 	andeq	ip, r8, r1, lsl #22
		if (m_size (chunk) >= _size)
    1b34:	05290100 	streq	r0, [r9, #-256]!	; 0xffffff00
    1b38:	00184f01 	andseq	r4, r8, r1, lsl #30
		chunk = m_nextp (chunk)) {
    1b3c:	1b5b0100 	blne	16c1f44 <__ccfg+0x16a1f9c>
		m_setnextp (cc, m_nextp (chunk));
    1b40:	d6470000 	strble	r0, [r7], -r0
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1b44:	01000051 	qaddeq	r0, r1, r0
    1b48:	12491f29 	subne	r1, r9, #41, 30	; 0xa4
			m_size (chunk) = _size;
    1b4c:	67460000 	strbvs	r0, [r6, -r0]
			cc = chunk + _size + m_hdrlen;
    1b50:	01006469 	tsteq	r0, r9, ror #8
    1b54:	09322e29 	ldmdbeq	r2!, {r0, r3, r5, r9, sl, fp, sp}
			m_size (cc) = waste - m_hdrlen;
    1b58:	45000000 	strmi	r0, [r0, #-0]
			QFREE;
    1b5c:	00047701 	andeq	r7, r4, r1, lsl #14
		mevent [MA_NP] . nfail = 0;
    1b60:	05240100 	streq	r0, [r4, #-256]!	; 0xffffff00
		mcfree [MA_NP] -= m_size (chunk);
    1b64:	00184f01 	andseq	r4, r8, r1, lsl #30
    1b68:	1b860100 	blne	fe181f70 <_estack+0xde17cf70>
    1b6c:	d6470000 	strble	r0, [r7], -r0
    1b70:	01000051 	qaddeq	r0, r1, r0
		m_size (chunk) |= MALLOC_UMASK;
    1b74:	12491e24 	subne	r1, r9, #36, 28	; 0x240
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1b78:	69460000 	stmdbvs	r6, {}^	; <UNPREDICTABLE>
		m_size (chunk) |= MALLOC_UMASK;
    1b7c:	24010064 	strcs	r0, [r1], #-100	; 0xffffff9c
			mnfree [MA_NP] = mcfree [MA_NP];
    1b80:	0009262c 	andeq	r2, r9, ip, lsr #12
}
    1b84:	01480000 	mrseq	r0, (UNDEF: 72)
    1b88:	00000ca8 	andeq	r0, r0, r8, lsr #25
    1b8c:	01051101 	tsteq	r5, r1, lsl #2
    1b90:	0000184f 	andeq	r1, r0, pc, asr #16
    1b94:	00000180 	andeq	r0, r0, r0, lsl #3
    1b98:	000001a4 	andeq	r0, r0, r4, lsr #3
    1b9c:	1bb39c01 	blne	fece8ba8 <_estack+0xdece3ba8>
aword __pi_fork (fsmcode func, aword data) {
    1ba0:	d6380000 	ldrtle	r0, [r8], -r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1ba4:	01000051 	qaddeq	r0, r1, r0
    1ba8:	12491c11 	subne	r1, r9, #4352	; 0x1100
    1bac:	02e80000 	rsceq	r0, r8, #0
		if ((j = __PCB) == NULL)
    1bb0:	4d000000 	stcmi	0, cr0, [r0, #-0]
	i->Next = NULL;
    1bb4:	00000942 	andeq	r0, r0, r2, asr #18
	i->data = data;
    1bb8:	0101d312 	tsteq	r1, r2, lsl r3
		if ((j = __PCB) == NULL)
    1bbc:	00093e01 	andeq	r3, r9, r1, lsl #28
}
    1bc0:	5b4e0300 	blpl	13827c8 <__ccfg+0x1362820>
			for (; j->Next != NULL; j = j->Next);
    1bc4:	0000001b 	andeq	r0, r0, fp, lsl r0
    1bc8:	00000000 	andeq	r0, r0, r0
	return (aword) i;
    1bcc:	01000000 	mrseq	r0, (UNDEF: 0)
    1bd0:	001be69c 	mulseq	fp, ip, r6
	if (mevent [MA_NP] . nwait != 255)
    1bd4:	1b6e3100 	blne	1b8dfdc <__ccfg+0x1b6e034>
    1bd8:	02fb0000 	rscseq	r0, fp, #0
    1bdc:	7a4f0000 	bvc	13c1be4 <__ccfg+0x13a1c3c>
		mevent [MA_NP] . nwait ++;
    1be0:	0100001b 	tsteq	r0, fp, lsl r0
	wait ((aword)(&(mevent [MA_NP])), state);
    1be4:	2f4e0051 	svccs	0x004e0051
    1be8:	0000001b 	andeq	r0, r0, fp, lsl r0
void diag (const char *mess, ...) {
    1bec:	00000000 	andeq	r0, r0, r0
    1bf0:	01000000 	mrseq	r0, (UNDEF: 0)
    1bf4:	001c0a9c 	mulseq	ip, ip, sl
	diag_disable_int (a, is);
    1bf8:	1b423100 	blne	108e000 <__ccfg+0x106e058>
    1bfc:	030e0000 	movweq	r0, #57344	; 0xe000
    1c00:	4e4f0000 	cdpmi	0, 4, cr0, cr15, cr0, {0}
				d = (bc == 16) ? 10000 : 1000000000;
    1c04:	0100001b 	tsteq	r0, fp, lsl r0
	diag_disable_int (a, is);
    1c08:	4f4e0051 	svcmi	0x004e0051
	while (*mess != '\0') {
    1c0c:	0000001a 	andeq	r0, r0, sl, lsl r0
	dgout ('\r');
    1c10:	00000000 	andeq	r0, r0, r0
	dgout ('\n');
    1c14:	01000000 	mrseq	r0, (UNDEF: 0)
    1c18:	001c3a9c 	mulseq	ip, ip, sl
    1c1c:	1a623100 	bne	188e024 <__ccfg+0x186e07c>
	diag_wait (a);
    1c20:	03210000 			; <UNDEFINED> instruction: 0x03210000
	diag_enable_int (a, is);
    1c24:	6e4f0000 	cdpvs	0, 4, cr0, cr15, cr0, {0}
    1c28:	0100001a 	tsteq	r0, sl, lsl r0
}
    1c2c:	1a7a4f51 	bne	1e95978 <__ccfg+0x1e759d0>
    1c30:	52010000 	andpl	r0, r1, #0
    1c34:	001a8641 	andseq	r8, sl, r1, asr #12
		if (*mess == '%') {
    1c38:	a54e0000 	strbge	r0, [lr, #-0]
    1c3c:	00000019 	andeq	r0, r0, r9, lsl r0
			if (*mess == 'l') {
    1c40:	00000000 	andeq	r0, r0, r0
    1c44:	01000000 	mrseq	r0, (UNDEF: 0)
				mess++;
    1c48:	001c609c 	mulseq	ip, ip, r0
				val = va_arg (ap, lword);
    1c4c:	19b83100 	ldmibne	r8!, {r8, ip, sp}
				bc = 32;
    1c50:	03340000 	teqeq	r4, #0
				bc = 16;
    1c54:	c4310000 	ldrtgt	r0, [r1], #-0
			switch (*mess) {
    1c58:	47000019 	smladmi	r0, r9, r0, r0
    1c5c:	00000003 	andeq	r0, r0, r3
    1c60:	0018ec50 	andseq	lr, r8, r0, asr ip
	...
				dgout (*mess);
    1c6c:	319c0100 	orrscc	r0, ip, r0, lsl #2
    1c70:	000018ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
			switch (*mess) {
    1c74:	0000035a 	andeq	r0, r0, sl, asr r3
					v = __pi_hex_enc_table [
    1c78:	00190b31 	andseq	r0, r9, r1, lsr fp
					i += 4;
    1c7c:	00036d00 	andeq	r6, r3, r0, lsl #26
					(val >> (bc - i)) & 0xf];
    1c80:	19173100 	ldmdbne	r7, {r8, ip, sp}
    1c84:	03800000 	orreq	r0, r0, #0
					dgout (v);
    1c88:	23310000 	teqcs	r1, #0
    1c8c:	93000019 	movwls	r0, #25
				while (i < bc) {
    1c90:	4f000003 	svcmi	0x00000003
			mess++;
    1c94:	0000192f 	andeq	r1, r0, pc, lsr #18
					d /= 10;
    1c98:	4f009102 	svcmi	0x00009102
				if ((val >> (bc - 1)) & 1) {
    1c9c:	0000193b 	andeq	r1, r0, fp, lsr r9
    1ca0:	4f049102 	svcmi	0x00049102
					dgout ('-');
    1ca4:	00001947 	andeq	r1, r0, r7, asr #18
    1ca8:	41089102 	tstmi	r8, r2, lsl #2
						val |= 0xffff0000;
    1cac:	00001953 	andeq	r1, r0, r3, asr r9
    1cb0:	148c0000 	strne	r0, [ip], #0
    1cb4:	00030000 	andeq	r0, r3, r0
				d = (bc == 16) ? 10000 : 1000000000;
    1cb8:	00000497 	muleq	r0, r7, r4
    1cbc:	00a30104 	adceq	r0, r3, r4, lsl #2
    1cc0:	790c0000 	stmdbvc	ip, {}	; <UNPREDICTABLE>
					v = (word) (val / d);
    1cc4:	f7000012 			; <UNDEFINED> instruction: 0xf7000012
					if (v || d == 1) break;
    1cc8:	5800000d 	stmdapl	r0, {r0, r2, r3}
    1ccc:	00000006 	andeq	r0, r0, r6
					d /= 10;
    1cd0:	c5000000 	strgt	r0, [r0, #-0]
				d = (bc == 16) ? 10000 : 1000000000;
    1cd4:	0200000c 	andeq	r0, r0, #12
					dgout (v + '0');
    1cd8:	0c580601 	mrrceq	6, 0, r0, r8, cr1
    1cdc:	02020000 	andeq	r0, r2, #0
    1ce0:	000a6605 	andeq	r6, sl, r5, lsl #12
					d /= 10;
    1ce4:	2b8e0300 	blcs	fe3828ec <_estack+0xde37d8ec>
					val = val - (v * d);
    1ce8:	28100000 	ldmdacs	r0, {}	; <UNPREDICTABLE>
					if (d == 0) break;
    1cec:	00003f18 	andeq	r3, r0, r8, lsl pc
					v = (word) (val / d);
    1cf0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    1cf4:	000007f8 	strdeq	r0, [r0], -r8
				if (bc == 16)
    1cf8:	f3050802 	vsub.i8	d0, d5, d2
				d = (bc == 16) ? 10000 : 1000000000;
    1cfc:	03000007 	movweq	r0, #7
					val &= 0xffff;
    1d00:	00002a09 	andeq	r2, r0, r9, lsl #20
					dgout (*s);
    1d04:	59182e10 	ldmdbpl	r8, {r4, r9, sl, fp, sp}
					s++;
    1d08:	02000000 	andeq	r0, r0, #0
				while (*s != '\0') {
    1d0c:	0c560801 	mrrceq	8, 0, r0, r6, cr1
    1d10:	ff030000 			; <UNDEFINED> instruction: 0xff030000
			dgout (*mess++);
    1d14:	1000002d 	andne	r0, r0, sp, lsr #32
    1d18:	006c1931 	rsbeq	r1, ip, r1, lsr r9
    1d1c:	02020000 	andeq	r0, r2, #0
    1d20:	000d5307 	andeq	r5, sp, r7, lsl #6
    1d24:	29a10300 	stmibcs	r1!, {r8, r9}
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1d28:	34100000 	ldrcc	r0, [r0], #-0
    1d2c:	00007f19 	andeq	r7, r0, r9, lsl pc
    1d30:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1d34:	00000428 	andeq	r0, r0, r8, lsr #8
	^ entropy
    1d38:	23070802 	movwcs	r0, #30722	; 0x7802
}
    1d3c:	04000004 	streq	r0, [r0], #-4
    1d40:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1d44:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    1d48:	00042d07 	andeq	r2, r4, r7, lsl #26
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1d4c:	13150300 	tstne	r5, #0, 6
	word cs = size + hblenb;
    1d50:	26110000 	ldrcs	r0, [r1], -r0
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1d54:	00004d12 	andeq	r4, r0, r2, lsl sp
    1d58:	28e80300 	stmiacs	r8!, {r8, r9}^
	p -> length = size;
    1d5c:	27110000 	ldrcs	r0, [r1, -r0]
}
    1d60:	00006012 	andeq	r6, r0, r2, lsl r0
	if (p->attributes.b.queued) {
    1d64:	00a70500 	adceq	r0, r7, r0, lsl #10
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1d68:	a7060000 	strge	r0, [r6, -r0]
    1d6c:	03000000 	movweq	r0, #0
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1d70:	000013b9 			; <UNDEFINED> instruction: 0x000013b9
		p->attributes.b.queued = 0;
    1d74:	33122811 	tstcc	r2, #1114112	; 0x110000
    1d78:	03000000 	movweq	r0, #0
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1d7c:	00001daf 	andeq	r1, r0, pc, lsr #27
	deq (p);	// Remove from queue
    1d80:	4d122b11 	vldrmi	d2, [r2, #-68]	; 0xffffffbc
}
    1d84:	06000000 	streq	r0, [r0], -r0
	tfree ((address)p);
    1d88:	000000c9 	andeq	r0, r0, r9, asr #1
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1d8c:	0000c905 	andeq	ip, r0, r5, lsl #18
    1d90:	293a0300 	ldmdbcs	sl!, {r8, r9}
    1d94:	2c110000 	ldccs	0, cr0, [r1], {-0}
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1d98:	00007312 	andeq	r7, r0, r2, lsl r3
    1d9c:	00df0500 	sbcseq	r0, pc, r0, lsl #10
	if (q_empty (q))
    1da0:	41030000 	mrsmi	r0, (UNDEF: 3)
    1da4:	11000006 	tstne	r0, r6
		trigger (q);
    1da8:	0073122d 	rsbseq	r1, r3, sp, lsr #4
	if (p->attributes.b.urgent) {
    1dac:	af030000 	svcge	0x00030000
		p->u.bqueue.next = q->next;
    1db0:	1100000b 	tstne	r0, fp
		p->u.bqueue.prev = q;
    1db4:	0108102e 	tsteq	r8, lr, lsr #32
		q->next->prev = (qitem_t*) p;
    1db8:	04070000 	streq	r0, [r7], #-0
	p->attributes.b.queued = 1;
    1dbc:	000000a7 	andeq	r0, r0, r7, lsr #1
    1dc0:	32110808 	andscc	r0, r1, #8, 16	; 0x80000
}
    1dc4:	00019c09 	andeq	r9, r1, r9, lsl #24
		p->u.bqueue.prev = q->prev;
    1dc8:	002b0900 	eoreq	r0, fp, r0, lsl #18
		q->prev->next = (qitem_t*) p;
    1dcc:	34110000 	ldrcc	r0, [r1], #-0
		q->prev = (qitem_t*) p;
    1dd0:	0000c907 	andeq	ip, r0, r7, lsl #18
    1dd4:	07010100 	streq	r0, [r1, -r0, lsl #2]
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1dd8:	06470900 	strbeq	r0, [r7], -r0, lsl #18
	deq (p);	// Soft dequeue, timer and hook left intact
    1ddc:	35110000 	ldrcc	r0, [r1, #-0]
	switch (dv) {
    1de0:	0000c903 	andeq	ip, r0, r3, lsl #18
    1de4:	06010100 	streq	r0, [r1], -r0, lsl #2
    1de8:	02de0900 	sbcseq	r0, lr, #0, 18
    1dec:	36110000 	ldrcc	r0, [r1], -r0
			p->attributes.b.urgent = 1;
    1df0:	0000c903 	andeq	ip, r0, r3, lsl #18
    1df4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			verify_ses (p, "dispose ses");
    1df8:	06b20900 	ldrteq	r0, [r2], r0, lsl #18
    1dfc:	37110000 	ldrcc	r0, [r1, -r0]
    1e00:	0000c903 	andeq	ip, r0, r3, lsl #18
    1e04:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    1e08:	0a9a0900 	beq	fe684210 <_estack+0xde67f210>
			verify_phy (p, "dispose phy");
    1e0c:	38110000 	ldmdacc	r1, {}	; <UNPREDICTABLE>
    1e10:	0000c903 	andeq	ip, r0, r3, lsl #18
}
    1e14:	00040100 	andeq	r0, r4, r0, lsl #2
			enq (oqueues [p->attributes.b.phys], p);
    1e18:	06560a00 	ldrbeq	r0, [r6], -r0, lsl #20
			p->attributes.b.urgent = 1;
    1e1c:	3a110000 	bcc	441e24 <__ccfg+0x421e7c>
    1e20:	0000c907 	andeq	ip, r0, r7, lsl #18
			verify_phy (p, "dispose phy");
    1e24:	f60a0100 			; <UNDEFINED> instruction: 0xf60a0100
    1e28:	11000008 	tstne	r0, r8
    1e2c:	00c9033c 	sbceq	r0, r9, ip, lsr r3
    1e30:	0a020000 	beq	81e38 <__ccfg+0x61e90>
    1e34:	00000f27 	andeq	r0, r0, r7, lsr #30
    1e38:	c9033d11 	stmdbgt	r3, {r0, r4, r8, sl, fp, ip, sp}
			enq (oqueues [p->attributes.b.phys], p);
    1e3c:	03000000 	movweq	r0, #0
    1e40:	00090e0a 	andeq	r0, r9, sl, lsl #28
}
    1e44:	083f1100 	ldmdaeq	pc!, {r8, ip}	; <UNPREDICTABLE>
			rlp (p);
    1e48:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
}
    1e4c:	14030004 	strne	r0, [r3], #-4
    1e50:	11000003 	tstne	r0, r3
    1e54:	010e0341 	tsteq	lr, r1, asr #6
    1e58:	9c060000 	stcls	0, cr0, [r6], {-0}
    1e5c:	0b000001 	bleq	1e68 <tcv_endp+0x4>
    1e60:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1e64:	a81a4311 	ldmdage	sl, {r0, r4, r8, r9, lr}
	if (b->attributes.b.outgoing) {
    1e68:	01000001 	tsteq	r0, r1
	b = header (p);
    1e6c:	01970b01 	orrseq	r0, r7, r1, lsl #22
	if (b->attributes.b.outgoing) {
    1e70:	45110000 	ldrmi	r0, [r1, #-0]
		verify_ses (b, "tcv02");
    1e74:	0001c90e 	andeq	ip, r1, lr, lsl #18
    1e78:	07010100 	streq	r0, [r1, -r0, lsl #2]
    1e7c:	0001cf04 	andeq	ip, r1, r4, lsl #30
    1e80:	08010200 	stmdaeq	r1, {r9}
    1e84:	00000c5f 	andeq	r0, r0, pc, asr ip
		verify_plg (b, tcv_out, "tcv03");
    1e88:	0001cf05 	andeq	ip, r1, r5, lsl #30
    1e8c:	031d0b00 	tsteq	sp, #0, 22
    1e90:	45110000 	ldrmi	r0, [r1, #-0]
    1e94:	0001c91e 	andeq	ip, r1, lr, lsl r9
    1e98:	08010100 	stmdaeq	r1, {r8}
    1e9c:	098f1208 	stmibeq	pc, {r3, r9, ip}	; <UNPREDICTABLE>
    1ea0:	0000021a 	andeq	r0, r0, sl, lsl r2
    1ea4:	000cc50a 	andeq	ip, ip, sl, lsl #10
    1ea8:	0b901200 	bleq	fe4066b0 <_estack+0xde4016b0>
		dispose (b, plugins [b->attributes.b.plugin] ->
    1eac:	00000073 	andeq	r0, r0, r3, ror r0
}
    1eb0:	10620a00 	rsbne	r0, r2, r0, lsl #20
		dispose (b, plugins [b->attributes.b.plugin] ->
    1eb4:	91120000 	tstls	r2, r0
		rlp (b);
    1eb8:	0000a708 	andeq	sl, r0, r8, lsl #14
}
    1ebc:	bc0a0400 	cfstrslt	mvf0, [sl], {-0}
		rlp (b);
    1ec0:	12000001 	andne	r0, r0, #1
    1ec4:	00d51092 	smullseq	r1, r5, r2, r0
    1ec8:	00060000 	andeq	r0, r6, r0
    1ecc:	000cb903 	andeq	fp, ip, r3, lsl #18
    1ed0:	03931200 	orrseq	r1, r3, #0, 4
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1ed4:	000001e9 	andeq	r0, r0, r9, ror #3
    1ed8:	00021a05 	andeq	r1, r2, r5, lsl #20
    1edc:	021a0c00 	andseq	r0, sl, #0, 24
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1ee0:	02360000 	eorseq	r0, r6, #0
	va_start (ap, plid);
    1ee4:	000d0000 	andeq	r0, sp, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1ee8:	0009380b 	andeq	r3, r9, fp, lsl #16
    1eec:	0f991200 	svceq	0x00991200
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1ef0:	0000022b 	andeq	r0, r0, fp, lsr #4
    1ef4:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    1ef8:	000000da 	ldrdeq	r0, [r0], -sl
    1efc:	91130108 	tstls	r3, r8, lsl #2
			syserror (ENODEVICE, "tcv04");
    1f00:	00027409 	andeq	r7, r2, r9, lsl #8
		syserror (EMALLOC, "tcv05");
    1f04:	09150900 	ldmdbeq	r5, {r8, fp}
	attp.b.outgoing = 1;
    1f08:	93130000 	tstls	r3, #0
    1f0c:	0000c907 	andeq	ip, r0, r7, lsl #18
    1f10:	01070100 	mrseq	r0, (UNDEF: 23)
    1f14:	05c70900 	strbeq	r0, [r7, #2304]	; 0x900
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f18:	94130000 	ldrls	r0, [r3], #-0
		if (descriptors [fd] == NULL)
    1f1c:	0000c903 	andeq	ip, r0, r3, lsl #18
    1f20:	00010100 	andeq	r0, r1, r0, lsl #2
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f24:	a6030000 	strge	r0, [r3], -r0
		return ERROR;
    1f28:	1300000a 	movwne	r0, #10
}
    1f2c:	024a0396 	subeq	r0, sl, #1476395010	; 0x58000002
    1f30:	74050000 	strvc	r0, [r5], #-0
    1f34:	0c000002 	stceq	0, cr0, [r0], {2}
	s->attpattern.b.session = fd;
    1f38:	00000280 	andeq	r0, r0, r0, lsl #5
    1f3c:	00000290 	muleq	r0, r0, r2
	descriptors [fd] = s;
    1f40:	8505000d 	strhi	r0, [r5, #-13]
	q_init (&(s->rqueue));
    1f44:	0b000002 	bleq	1f54 <tcv_open+0x80>
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1f48:	000003ac 	andeq	r0, r0, ip, lsr #7
    1f4c:	90179c13 	andsls	r9, r7, r3, lsl ip
    1f50:	01000002 	tsteq	r0, r2
    1f54:	00b30c01 	adcseq	r0, r3, r1, lsl #24
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1f58:	02ae0000 	adceq	r0, lr, #0
    1f5c:	000d0000 	andeq	r0, sp, r0
    1f60:	0002a305 	andeq	sl, r2, r5, lsl #6
	descriptors [fd] = s;
    1f64:	06090b00 	streq	r0, [r9], -r0, lsl #22
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1f68:	06140000 	ldreq	r0, [r4], -r0
    1f6c:	0002ae13 	andeq	sl, r2, r3, lsl lr
	if (s == NULL)
    1f70:	0b010100 	bleq	42378 <__ccfg+0x223d0>
		syserror (EMALLOC, "tcv05");
    1f74:	000008d8 	ldrdeq	r0, [r0], -r8
    1f78:	df0ec312 	svcle	0x000ec312
    1f7c:	01000000 	mrseq	r0, (UNDEF: 0)
    1f80:	0c6d0e01 	stcleq	14, cr0, [sp], #-4
    1f84:	6e150000 	cdpvs	0, 1, cr0, cr5, cr0, {0}
    1f88:	02dc1001 	sbcseq	r1, ip, #1
    1f8c:	04070000 	streq	r0, [r7], #-0
    1f90:	000002e2 	andeq	r0, r0, r2, ror #5
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1f94:	02ee010f 	rsceq	r0, lr, #-1073741821	; 0xc0000003
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1f98:	a7100000 	ldrge	r0, [r0, -r0]
    1f9c:	00000000 	andeq	r0, r0, r0
    1fa0:	0001d60c 	andeq	sp, r1, ip, lsl #12
	plugins [ord] = pl;
    1fa4:	0002f900 	andeq	pc, r2, r0, lsl #18
	return 0;
    1fa8:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
		return ERROR;
    1fac:	000002ee 	andeq	r0, r0, lr, ror #5
}
    1fb0:	0009e111 	andeq	lr, r9, r1, lsl r1
    1fb4:	017f1500 	cmneq	pc, r0, lsl #10
	verify_fds (fd, "tcv10");
    1fb8:	0002f916 	andeq	pc, r2, r6, lsl r9	; <UNPREDICTABLE>
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    1fbc:	11010100 	mrsne	r0, (UNDEF: 17)
	verify_fds (fd, "tcv10");
    1fc0:	00000398 	muleq	r0, r8, r3
    1fc4:	14018215 	strne	r8, [r1], #-533	; 0xfffffdeb
    1fc8:	000000eb 	andeq	r0, r0, fp, ror #1
	verify_plg (b, tcv_frm, "tcv11");
    1fcc:	70110101 	andsvc	r0, r1, r1, lsl #2
	b = q_first (rq);
    1fd0:	15000003 	strne	r0, [r0, #-3]
	if (q_end (b, rq)) {
    1fd4:	df0e02d8 	svcle	0x000e02d8
		if (state != WNONE) {
    1fd8:	01000000 	mrseq	r0, (UNDEF: 0)
    1fdc:	15081201 	strne	r1, [r8, #-513]	; 0xfffffdff
			when (rq, state);
    1fe0:	52090303 	andpl	r0, r9, #201326592	; 0xc000000
			release;
    1fe4:	13000003 	movwne	r0, #3
	deq (b);	// Dequeue the packet ...
    1fe8:	00003c8e 	andeq	r3, r0, lr, lsl #25
    1fec:	07030715 	smladeq	r3, r5, r7, r0
	p = ((address)(b + 1));
    1ff0:	000000a7 	andeq	r0, r0, r7, lsr #1
	verify_plg (b, tcv_frm, "tcv11");
    1ff4:	0fba1300 	svceq	0x00ba1300
    1ff8:	08150000 	ldmdaeq	r5, {}	; <UNPREDICTABLE>
    1ffc:	00f00803 	rscseq	r0, r0, r3, lsl #16
    2000:	00040000 	andeq	r0, r4, r0
    2004:	000a040e 	andeq	r0, sl, lr, lsl #8
    2008:	03091500 	movweq	r1, #38144	; 0x9500
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    200c:	00032b03 	andeq	r2, r3, r3, lsl #22
    2010:	00201400 	eoreq	r1, r0, r0, lsl #8
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2014:	15300000 	ldrne	r0, [r0, #-0]!
    2018:	c208030b 	andgt	r0, r8, #738197504	; 0x2c000000
	b->u.pointers.tail =
    201c:	13000003 	movwne	r0, #3
}
    2020:	00001f11 	andeq	r1, r0, r1, lsl pc
		return NULL;
    2024:	08031415 	stmdaeq	r3, {r0, r2, r4, sl, ip}
    2028:	000000a7 	andeq	r0, r0, r7, lsr #1
    202c:	0be21300 	bleq	ff886c34 <_estack+0xdf881c34>
    2030:	15150000 	ldrne	r0, [r5, #-0]
    2034:	00a70803 	adceq	r0, r7, r3, lsl #16
	verify_fds (fd, "tcv16");
    2038:	13020000 	movwne	r0, #8192	; 0x2000
								Boolean urg) {
    203c:	00004c7b 	andeq	r4, r0, fp, ror ip
    2040:	0b031615 	bleq	c789c <__ccfg+0xa78f4>
	verify_fds (fd, "tcv16");
    2044:	000002cf 	andeq	r0, r0, pc, asr #5
    2048:	47411304 	strbmi	r1, [r1, -r4, lsl #6]
    204c:	17150000 	ldrne	r0, [r5, -r0]
	verify_pld (s, tcv_frm, "tcv17");
    2050:	00f00903 	rscseq	r0, r0, r3, lsl #18
    2054:	13080000 	movwne	r0, #32768	; 0x8000
    2058:	0000000f 	andeq	r0, r0, pc
    205c:	0f031815 	svceq	0x00031815
    2060:	000003c2 	andeq	r0, r0, r2, asr #7
    2064:	0958130c 	ldmdbeq	r8, {r2, r3, r8, r9, ip}^
    2068:	19150000 	ldmdbne	r5, {}	; <UNPREDICTABLE>
    206c:	03d21503 	bicseq	r1, r2, #12582912	; 0xc00000
	ptrs.head = (word) fd;
    2070:	002c0000 	eoreq	r0, ip, r0
	ptrs.tail = (word) urg;
    2074:	0003520c 	andeq	r5, r3, ip, lsl #4
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    2078:	0003d200 	andeq	sp, r3, r0, lsl #4
    207c:	00941500 	addseq	r1, r4, r0, lsl #10
		if (state != WNONE) {
    2080:	00030000 	andeq	r0, r3, r0
    2084:	035f0407 	cmpeq	pc, #117440512	; 0x7000000
}
    2088:	d70e0000 	strle	r0, [lr, -r0]
			when (eid, state);
    208c:	1500000b 	strne	r0, [r0, #-11]
    2090:	5f1b031c 	svcpl	0x001b031c
			release;
    2094:	11000003 	tstne	r0, r3
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    2098:	00000bb7 			; <UNDEFINED> instruction: 0x00000bb7
    209c:	14031e15 	strne	r1, [r3], #-3605	; 0xfffff1eb
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    20a0:	000003f4 	strdeq	r0, [r0], -r4
    20a4:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    20a8:	000003d8 	ldrdeq	r0, [r0], -r8
    20ac:	00070a0b 	andeq	r0, r7, fp, lsl #20
    20b0:	131d1600 	tstne	sp, #0, 12
    20b4:	000000a7 	andeq	r0, r0, r7, lsr #1
		if (state != WNONE) {
    20b8:	e50b0101 	str	r0, [fp, #-257]	; 0xfffffeff
    20bc:	16000002 	strne	r0, [r0], -r2
			tmwait (state);
    20c0:	00b81a1e 	adcseq	r1, r8, lr, lsl sl
    20c4:	01010000 	mrseq	r0, (UNDEF: 1)
	b->attributes = s->attpattern;
    20c8:	000c640b 	andeq	r6, ip, fp, lsl #8
		b->attributes.b.urgent = 1;
    20cc:	241e1600 	ldrcs	r1, [lr], #-1536	; 0xfffffa00
    20d0:	000000b8 	strheq	r0, [r0], -r8
	b->u.pointers.head = ptrs.head;
    20d4:	820b0101 	andhi	r0, fp, #1073741824	; 0x40000000
	b->u.pointers.tail = length;
    20d8:	1600000c 	strne	r0, [r0], -ip
	return (address) (b + 1);
    20dc:	03f41422 	mvnseq	r1, #570425344	; 0x22000000
    20e0:	01010000 	mrseq	r0, (UNDEF: 1)
    20e4:	000f9e03 	andeq	r9, pc, r3, lsl #28
    20e8:	10431600 	subne	r1, r3, r0, lsl #12
    20ec:	0000043e 	andeq	r0, r0, lr, lsr r4
    20f0:	04440407 	strbeq	r0, [r4], #-1031	; 0xfffffbf9
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    20f4:	010f0000 	mrseq	r0, CPSR
	if (len >= b->u.pointers.tail)
    20f8:	00000450 	andeq	r0, r0, r0, asr r4
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    20fc:	00008d10 	andeq	r8, r0, r0, lsl sp
    2100:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
	if (len > 0) {
    2104:	74094616 	strvc	r4, [r9], #-1558	; 0xfffff9ea
		memcpy ((char*)buf, ((char*)p) + b->u.pointers.head, len);
    2108:	0a000004 	beq	2120 <tcv_read+0x2c>
    210c:	00001504 	andeq	r1, r0, r4, lsl #10
    2110:	320f4a16 	andcc	r4, pc, #90112	; 0x16000
		b->u.pointers.tail -= len;
    2114:	00000004 	andeq	r0, r0, r4
    2118:	0011f60a 	andseq	pc, r1, sl, lsl #12
    211c:	074b1600 	strbeq	r1, [fp, -r0, lsl #12]
		b->u.pointers.head += len;
    2120:	0000008d 	andeq	r0, r0, sp, lsl #1
    2124:	24030004 	strcs	r0, [r3], #-4
    2128:	16000010 			; <UNDEFINED> instruction: 0x16000010
}
    212c:	0450034c 	ldrbeq	r0, [r0], #-844	; 0xfffffcb4
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2130:	74050000 	strvc	r0, [r5], #-0
    2134:	0c000004 	stceq	0, cr0, [r0], {4}
    2138:	000000fc 	strdeq	r0, [r0], -ip
	verify_fph (phy, "tcv23");
    213c:	00000495 	muleq	r0, r5, r4
    2140:	00009415 	andeq	r9, r0, r5, lsl r4
    2144:	0b000300 	bleq	2d4c <cc1350_driver+0x144>
    2148:	000013ae 	andeq	r1, r0, lr, lsr #7
}
    214c:	85120d01 	ldrhi	r0, [r2, #-3329]	; 0xfffff2ff
	return (physical [phy]) (opt, arg);
    2150:	01000004 	tsteq	r0, r4
    2154:	04800c01 	streq	r0, [r0], #3073	; 0xc01
    2158:	04b30000 	ldrteq	r0, [r3], #0
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    215c:	94150000 	ldrls	r0, [r5], #-0
	if (opt < 0) {
    2160:	01000000 	mrseq	r0, (UNDEF: 0)
		if (fd < 0)
    2164:	04a30500 	strteq	r0, [r3], #1280	; 0x500
		if (opt == PHYSOPT_PLUGINFO) {
    2168:	ca160000 	bgt	582170 <__ccfg+0x5621c8>
			if (fd >= TCV_MAX_PLUGS)
    216c:	01000013 	tsteq	r0, r3, lsl r0
			if ((p = plugins [fd]) == NULL)
    2170:	04b318cf 	ldrteq	r1, [r3], #2255	; 0x8cf
    2174:	eb0c0000 	bl	30217c <__ccfg+0x2e21d4>
}
    2178:	d4000000 	strle	r0, [r0], #-0
		if (fd >= TCV_MAX_PHYS)
    217c:	15000004 	strne	r0, [r0, #-4]
		return physinfo [fd];
    2180:	00000094 	muleq	r0, r4, r0
    2184:	c4050010 	strgt	r0, [r5], #-16
	verify_fds (fd, "tcv22");
    2188:	17000004 	strne	r0, [r0, -r4]
    218c:	00001187 	andeq	r1, r0, r7, lsl #3
    2190:	d40dec01 	strle	lr, [sp], #-3073	; 0xfffff3ff
    2194:	01000004 	tsteq	r0, r4
    2198:	4f080305 	svcmi	0x00080305
}
    219c:	03180000 	tsteq	r8, #0
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    21a0:	01000010 	tsteq	r0, r0, lsl r0
    21a4:	a70d010c 	strge	r0, [sp, -ip, lsl #2]
			return 0;
    21a8:	05000000 	streq	r0, [r0, #-0]
    21ac:	00057e03 	andeq	r7, r5, r3, lsl #28
    21b0:	02361920 	eorseq	r1, r6, #32, 18	; 0x80000
    21b4:	d0010000 	andle	r0, r1, r0
    21b8:	03050802 	movweq	r0, #22530	; 0x5802
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    21bc:	200006a0 	andcs	r0, r0, r0, lsr #13
    21c0:	0000a70c 	andeq	sl, r0, ip, lsl #14
	if (dsp != TCV_DSP_PASS) {
    21c4:	00051e00 	andeq	r1, r5, r0, lsl #28
		if (ses == NONE)
    21c8:	00941500 	addseq	r1, r4, r0, lsl #10
			syserror (EREQPAR, "tcv26");
    21cc:	00000000 	andeq	r0, r0, r0
		verify_fds (ses, "tcv27");
    21d0:	000f8418 	andeq	r8, pc, r8, lsl r4	; <UNPREDICTABLE>
    21d4:	02d20100 	sbcseq	r0, r2, #0, 2
    21d8:	00050e0d 	andeq	r0, r5, sp, lsl #28
    21dc:	80030500 	andhi	r0, r3, r0, lsl #10
    21e0:	19200005 	stmdbne	r0!, {r0, r2}
		if ((p = apb (size)) != NULL) {
    21e4:	000002c1 	andeq	r0, r0, r1, asr #5
    21e8:	07048c01 	streq	r8, [r4, -r1, lsl #24]
		return NULL;
    21ec:	06a80305 	strteq	r0, [r8], r5, lsl #6
			p->attributes = descriptors [ses] -> attpattern;
    21f0:	011a2000 	tsteq	sl, r0
			dispose (p, dsp);
    21f4:	00000f78 	andeq	r0, r0, r8, ror pc
			p->attributes = descriptors [ses] -> attpattern;
    21f8:	05057201 	streq	r7, [r5, #-513]	; 0xfffffdff
			p->attributes.b.outgoing = 0;
    21fc:	00008d01 	andeq	r8, r0, r1, lsl #26
			dispose (p, dsp);
    2200:	0015b400 	andseq	fp, r5, r0, lsl #8
			return (address)(p + 1);
    2204:	00161400 	andseq	r1, r6, r0, lsl #8
    2208:	849c0100 	ldrhi	r0, [ip], #256	; 0x100
	if ((p = apb (size)) != NULL)
    220c:	1b000005 	blne	2228 <tcvphy_reg+0x4>
    2210:	00000640 	andeq	r0, r0, r0, asr #12
		return (address)(p + 1);
    2214:	00000572 	andeq	r0, r0, r2, ror r5
    2218:	0100691c 	tsteq	r0, ip, lsl r9
    221c:	bd110576 	cfldr32lt	mvfx0, [r1, #-472]	; 0xfffffe28
    2220:	00000000 	andeq	r0, r0, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2224:	0011f71d 	andseq	pc, r1, sp, lsl r7	; <UNPREDICTABLE>
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2228:	0015f600 	andseq	pc, r5, r0, lsl #12
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    222c:	0015f800 	andseq	pc, r5, r0, lsl #16
    2230:	058d0100 	streq	r0, [sp, #256]	; 0x100
		syserror (EREQPAR, "tcv28");
    2234:	011e0002 	tsteq	lr, r2
		syserror (EMALLOC, "tcv29");
    2238:	00001210 	andeq	r1, r0, r0, lsl r2
	physical [phy] = ps;
    223c:	21056801 	tstcs	r5, r1, lsl #16
	physinfo [phy] = info;
    2240:	0000132c 	andeq	r1, r0, ip, lsr #6
    2244:	00001584 	andeq	r1, r0, r4, lsl #11
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2248:	07e49c01 	strbeq	r9, [r4, r1, lsl #24]!
    224c:	1d1f0000 	ldcne	0, cr0, [pc, #-0]	; 2254 <tcvphy_reg+0x30>
    2250:	0d000012 	stceq	0, cr0, [r0, #-72]	; 0xffffffb8
		syserror (EMALLOC, "tcv29");
    2254:	d0200108 	eorle	r0, r0, r8, lsl #2
    2258:	2c000011 	stccs	0, cr0, [r0], {17}
	q_init (q);
    225c:	a0000013 	andge	r0, r0, r3, lsl r0
}
    2260:	01000004 	tsteq	r0, r4
    2264:	bf02056a 	svclt	0x0002056a
    2268:	21000005 	tstcs	r0, r5
    226c:	000011df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    2270:	08122200 	ldmdaeq	r2, {r9, sp}
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2274:	13460000 	movtne	r0, #24576	; 0x6000
	verify_fph (phy, "tcv30");
    2278:	04c00000 	strbeq	r0, [r0], #0
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    227c:	270d0000 	strcs	r0, [sp, -r0]
    2280:	0007b302 	andeq	fp, r7, r2, lsl #6
	verify_fph (phy, "tcv30");
    2284:	04c02300 	strbeq	r2, [r0], #768	; 0x300
    2288:	20240000 	eorcs	r0, r4, r0
    228c:	d4000008 	strle	r0, [r0], #-8
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2290:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    2294:	0000125c 	andeq	r1, r0, ip, asr r2
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2298:	00001346 	andeq	r1, r0, r6, asr #6
    229c:	000004e8 	andeq	r0, r0, r8, ror #9
		if (plugins [plg] == NULL)
    22a0:	0404b301 	streq	fp, [r4], #-769	; 0xfffffcff
    22a4:	0014381d 	andseq	r3, r4, sp, lsl r8
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    22a8:	0013be00 	andseq	fp, r3, r0, lsl #28
}
    22ac:	0013ca00 	andseq	ip, r3, r0, lsl #20
    22b0:	04a40100 	strteq	r0, [r4], #256	; 0x100
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    22b4:	125c1d04 	subsne	r1, ip, #4, 26	; 0x100
    22b8:	13d20000 	bicsne	r0, r2, #0
    22bc:	13d40000 	bicsne	r0, r4, #0
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    22c0:	aa010000 	bge	422c8 <__ccfg+0x22320>
    22c4:	c0250404 	eorgt	r0, r5, r4, lsl #8
    22c8:	ea000012 	b	2318 <tcvphy_get+0x8>
    22cc:	00000013 	andeq	r0, r0, r3, lsl r0
    22d0:	01000005 	tsteq	r0, r5
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    22d4:	250404bb 	strcs	r0, [r4, #-1211]	; 0xfffffb45
	len -= (ap.head + ap.tail);
    22d8:	00001443 	andeq	r1, r0, r3, asr #8
    22dc:	000013ea 	andeq	r1, r0, sl, ror #7
    22e0:	00000520 	andeq	r0, r0, r0, lsr #10
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    22e4:	0404c501 	streq	ip, [r4], #-1281	; 0xfffffaff
    22e8:	00128e20 	andseq	r8, r2, r0, lsr #28
    22ec:	0013f200 	andseq	pc, r3, r0, lsl #4
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    22f0:	00054000 	andeq	r4, r5, r0
    22f4:	04c00100 	strbeq	r0, [r0], #256	; 0x100
    22f8:	00065104 	andeq	r5, r6, r4, lsl #2
	return 1;
    22fc:	129d2100 	addsne	r2, sp, #0, 2
    2300:	1d000000 	stcne	0, cr0, [r0, #-0]
    2304:	0000125c 	andeq	r1, r0, ip, asr r2
    2308:	00001402 	andeq	r1, r0, r2, lsl #8
    230c:	00001404 	andeq	r1, r0, r4, lsl #8
	verify_fph (phy, "tcv32");
    2310:	0404c301 	streq	ip, [r4], #-769	; 0xfffffcff
    2314:	00142d25 	andseq	r2, r4, r5, lsr #26
    2318:	00140600 	andseq	r0, r4, r0, lsl #12
    231c:	00056000 	andeq	r6, r5, r0
    2320:	04d50100 	ldrbeq	r0, [r5], #256	; 0x100
    2324:	144e2004 	strbne	r2, [lr], #-4
	oq = oqueues [phy];
    2328:	141c0000 	ldrne	r0, [ip], #-0
	b = q_first (oq);
    232c:	05800000 	streq	r0, [r0]
	if (q_end (b, oq)) {
    2330:	cc010000 	stcgt	0, cr0, [r1], {-0}
	*len = b->length;
    2334:	068e0404 	streq	r0, [lr], r4, lsl #8
	deq (b);	// Dequeue the packet ...
    2338:	5d210000 	stcpl	0, cr0, [r1, #-0]
}
    233c:	00000014 	andeq	r0, r0, r4, lsl r0
		return NULL;
    2340:	00125c1d 	andseq	r5, r2, sp, lsl ip
    2344:	00144000 	andseq	r4, r4, r0
    2348:	00144200 	andseq	r4, r4, r0, lsl #4
    234c:	04df0100 	ldrbeq	r0, [pc], #256	; 2354 <tcvphy_top+0x4>
	verify_fph (phy, "tcv33");
    2350:	14382504 	ldrtne	r2, [r8], #-1284	; 0xfffffafc
    2354:	14600000 	strbtne	r0, [r0], #-0
    2358:	05980000 	ldreq	r0, [r8]
    235c:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    2360:	7f250404 	svcvc	0x00250404
    2364:	64000012 	strvs	r0, [r0], #-18	; 0xffffffee
	oq = oqueues [phy];
    2368:	b0000014 	andlt	r0, r0, r4, lsl r0
	b = q_first (oq);
    236c:	01000005 	tsteq	r0, r5
		return NULL;
    2370:	260d04ee 	strcs	r0, [sp], -lr, ror #9
	return (address)(b + 1);
    2374:	0000128e 	andeq	r1, r0, lr, lsl #5
}
    2378:	0000146e 	andeq	r1, r0, lr, ror #8
    237c:	00001472 	andeq	r1, r0, r2, ror r4
    2380:	0404ed01 	streq	lr, [r4], #-3329	; 0xfffff2ff
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    2384:	000006dc 	ldrdeq	r0, [r0], -ip
	verify_plg (b, tcv_xmt, "tcv34");
    2388:	00129d21 	andseq	r9, r2, r1, lsr #26
	hblock_t *b = header (pkt);
    238c:	43250000 			; <UNDEFINED> instruction: 0x43250000
	verify_plg (b, tcv_xmt, "tcv34");
    2390:	92000014 	andls	r0, r0, #20
    2394:	c8000014 	stmdagt	r0, {r2, r4}
    2398:	01000005 	tsteq	r0, r5
    239c:	200404f7 	strdcs	r0, [r4], -r7
    23a0:	0000144e 	andeq	r1, r0, lr, asr #8
    23a4:	00001494 	muleq	r0, r4, r4
    23a8:	000005e0 	andeq	r0, r0, r0, ror #11
	dispose (b, plugins [b->attributes.b.plugin] ->
    23ac:	0404fa01 	streq	pc, [r4], #-2561	; 0xfffff5ff
}
    23b0:	00000708 	andeq	r0, r0, r8, lsl #14
	dispose (b, plugins [b->attributes.b.plugin] ->
    23b4:	00145d21 	andseq	r5, r4, r1, lsr #26
    23b8:	b61d0000 	ldrlt	r0, [sp], -r0
    23bc:	9c000012 	stcls	0, cr0, [r0], {18}
}
    23c0:	a0000014 	andge	r0, r0, r4, lsl r0
    while(1)
    23c4:	01000014 	tsteq	r0, r4, lsl r0
{
    23c8:	1d0404fd 	cfstrsne	mvf0, [r4, #-1012]	; 0xfffffc0c
    SetupTrimDevice();
    23cc:	0000125c 	andeq	r1, r0, ip, asr r2
    pui32Src = &_etext;
    23d0:	000014a0 	andeq	r1, r0, r0, lsr #9
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    23d4:	000014a2 	andeq	r1, r0, r2, lsr #9
    __asm("    ldr     r0, =_bss\n"
    23d8:	04050001 	streq	r0, [r5], #-1
    23dc:	000b9526 	andeq	r9, fp, r6, lsr #10
    23e0:	0014aa00 	andseq	sl, r4, r0, lsl #20
    23e4:	0014b600 	andseq	fp, r4, r0, lsl #12
    23e8:	050d0100 	streq	r0, [sp, #-256]	; 0xffffff00
   main();
    23ec:	00075c04 	andeq	r5, r7, r4, lsl #24
    FaultISR();
    23f0:	13112700 	tstne	r1, #0, 14
        *pui32Dest++ = *pui32Src++;
    23f4:	14aa0000 	strtne	r0, [sl], #0
    23f8:	14b40000 	ldrtne	r0, [r4], #0
    23fc:	bd010000 	stclt	0, cr0, [r1, #-0]
    2400:	2d210203 	sfmcs	f0, 4, [r1, #-12]!
    2404:	21000013 	tstcs	r0, r3, lsl r0
    2408:	00001320 	andeq	r1, r0, r0, lsr #6
    240c:	5c1d0000 	ldcpl	0, cr0, [sp], {-0}
    2410:	de000012 	mcrle	0, 0, r0, cr0, cr2, {0}
static byte get_byte () {
    2414:	e0000014 	and	r0, r0, r4, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2418:	01000014 	tsteq	r0, r4, lsl r0
    241c:	1d04053e 	cfstr32ne	mvfx0, [r4, #-248]	; 0xffffff08
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2420:	00001274 	andeq	r1, r0, r4, ror r2
    2424:	000014e0 	andeq	r1, r0, r0, ror #9
		if (ee_inp)
    2428:	000014f0 	strdeq	r1, [r0], -r0
			b |= 1;
    242c:	04054101 	streq	r4, [r5], #-257	; 0xfffffeff
    2430:	00125c1d 	andseq	r5, r2, sp, lsl ip
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2434:	0014f000 	andseq	pc, r4, r0
	for (b = 0, i = 0; i < 8; i++) {
    2438:	0014f200 	andseq	pc, r4, r0, lsl #4
}
    243c:	05440100 	strbeq	r0, [r4, #-256]	; 0xffffff00
    2440:	127f2504 	rsbsne	r2, pc, #4, 10	; 0x1000000
    2444:	14f20000 	ldrbtne	r0, [r2], #0
static void put_byte (byte b) {
    2448:	05f80000 	ldrbeq	r0, [r8, #0]!
    244c:	47010000 	strmi	r0, [r1, -r0]
    2450:	6b250b05 	blvs	94506c <__ccfg+0x9250c4>
    2454:	fa000014 	blx	24ac <wwait+0x1c>
		if (b & 0x80)
    2458:	10000014 	andne	r0, r0, r4, lsl r0
    245c:	01000006 	tsteq	r0, r6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2460:	0004054b 	andeq	r0, r4, fp, asr #10
	for (i = 0; i < 8; i++) {
    2464:	11ed2800 	mvnne	r2, r0, lsl #16
		b <<= 1;
    2468:	13600000 	cmnne	r0, #0
	for (i = 0; i < 8; i++) {
    246c:	13620000 	cmnne	r2, #0
}
    2470:	270d0000 	strcs	r0, [sp, -r0]
    2474:	11f72802 	mvnsne	r2, r2, lsl #16
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2478:	138e0000 	orrne	r0, lr, #0
    247c:	13900000 	orrsne	r0, r0, #0
	put_byte (cmd);
    2480:	270d0000 	strcs	r0, [sp, -r0]
    2484:	11f72802 	mvnsne	r2, r2, lsl #16
}
    2488:	15140000 	ldrne	r0, [r4, #-0]
    248c:	15160000 	ldrne	r0, [r6, #-0]
static void wwait (word st, word del) {
    2490:	270d0000 	strcs	r0, [sp, -r0]
    2494:	011a0002 	tsteq	sl, r2
    2498:	000012ce 	andeq	r1, r0, lr, asr #5
	while (dopen && (rdsr () & 1)) {
    249c:	06055c01 	streq	r5, [r5], -r1, lsl #24
    24a0:	0000a701 	andeq	sl, r0, r1, lsl #14
	...
	put_byte (CMD_RDSR);
    24ac:	129c0100 	addsne	r0, ip, #0, 2
	r = get_byte ();
    24b0:	29000008 	stmdbcs	r0, {r3}
    24b4:	01006373 	tsteq	r0, r3, ror r3
	while (dopen && (rdsr () & 1)) {
    24b8:	a707055e 	smlsdge	r7, lr, r5, r0
}
    24bc:	a6000000 	strge	r0, [r0], -r0
		if (st == WNONE)
    24c0:	00000003 	andeq	r0, r0, r3
    24c4:	0011b02a 	andseq	fp, r1, sl, lsr #32
			mdelay (1);
    24c8:	048e0100 	streq	r0, [lr], #256	; 0x100
    24cc:	082a0314 	stmdaeq	sl!, {r2, r4, r8, r9}
			delay (del, st);
    24d0:	5b2b0000 	blpl	ac24d8 <__ccfg+0xaa2530>
    24d4:	01000014 	tsteq	r0, r4, lsl r0
			release;
    24d8:	000104ad 	andeq	r0, r1, sp, lsr #9
    24dc:	115d012c 	cmpne	sp, ip, lsr #2
    24e0:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
static void ready () {
    24e4:	08010604 	stmdaeq	r1, {r2, r9, sl}
	if (dopen) {
    24e8:	2c000013 	stccs	0, cr0, [r0], {19}
		wwait (WNONE, 1);
    24ec:	01000013 	tsteq	r0, r3, lsl r0
    24f0:	0008559c 	muleq	r8, ip, r5
    24f4:	002d2d00 	eoreq	r2, sp, r0, lsl #26
	dstat = 0;
    24f8:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
}
    24fc:	00a71904 	adceq	r1, r7, r4, lsl #18
    2500:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    2504:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
	udelay (1);
    2508:	000fe201 	andeq	lr, pc, r1, lsl #4
    250c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
	udelay (1);
    2510:	00115006 	andseq	r5, r1, r6
		dopen = DOPEN_TEMP;
    2514:	00130800 	andseq	r0, r3, r0, lsl #16
    2518:	1e9c0100 	fmlnee	f0, f4, f0
    251c:	2e00000a 	cdpcs	0, 0, cr0, cr0, cr10, {0}
    2520:	0000127a 	andeq	r1, r0, sl, ror r2
static void cclose () {
    2524:	00001280 	andeq	r1, r0, r0, lsl #5
	if (dopen == DOPEN_TEMP) {
    2528:	00000886 	andeq	r0, r0, r6, lsl #17
    252c:	0100691c 	tsteq	r0, ip, lsl r9
		wwait (WNONE, 1);
    2530:	8d0b046b 	cfstrshi	mvf0, [fp, #-428]	; 0xfffffe54
    2534:	00000000 	andeq	r0, r0, r0
	cmd_0 (CMD_DP);
    2538:	00144325 	andseq	r4, r4, r5, lsr #6
    253c:	00117a00 	andseq	r7, r1, r0, lsl #20
		dopen = 0;
    2540:	00038000 	andeq	r8, r3, r0
}
    2544:	04080100 	streq	r0, [r8], #-256	; 0xffffff00
word ee_open () {
    2548:	0f542002 	svceq	0x00542002
	ready ();
    254c:	117c0000 	cmnne	ip, r0
	dopen = DOPEN_PERM;
    2550:	03a00000 	moveq	r0, #0
    2554:	0b010000 	bleq	4255c <__ccfg+0x225b4>
}
    2558:	091a0204 	ldmdbeq	sl, {r2, r9}
	if (dopen) {
    255c:	a0230000 	eorge	r0, r3, r0
    2560:	2f000003 	svccs	0x00000003
		dopen = DOPEN_TEMP;
    2564:	00000f61 	andeq	r0, r0, r1, ror #30
		cclose ();
    2568:	000f6d30 	andeq	r6, pc, r0, lsr sp	; <UNPREDICTABLE>
}
    256c:	0003a000 	andeq	sl, r3, r0
int ser_out (word st, const char *m) {
    2570:	0f6e3100 	svceq	0x006e3100
	if ((prcs = running (__outserial)) != 0) {
    2574:	03cc0000 	biceq	r0, ip, #0
    2578:	c9220000 	stmdbgt	r2!, {}	; <UNPREDICTABLE>
    257c:	86000013 			; <UNDEFINED> instruction: 0x86000013
		join (prcs, st);
    2580:	c0000011 	andgt	r0, r0, r1, lsl r0
		release;
    2584:	01000003 	tsteq	r0, r3
	if (*m)
    2588:	08e704fa 	stmiaeq	r7!, {r1, r3, r4, r5, r6, r7, sl}^
		prcs = strlen (m) +1;
    258c:	e5210000 	str	r0, [r1, #-0]!
    2590:	21000013 	tstcs	r0, r3, lsl r0
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    2594:	000013d8 	ldrdeq	r1, [r0], -r8
    2598:	13f32200 	mvnsne	r2, #0, 4
    259c:	118a0000 	orrne	r0, sl, r0
		umwait (st);
    25a0:	03d80000 	bicseq	r0, r8, #0
    25a4:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
		prcs =  m [1] + 3;
    25a8:	00090104 	andeq	r0, r9, r4, lsl #2
	if (*m)
    25ac:	14022100 	strne	r2, [r2], #-256	; 0xffffff00
		strcpy (buf, m);
    25b0:	32000000 	andcc	r0, r0, #0
    25b4:	00001410 	andeq	r1, r0, r0, lsl r4
	if (runstrand (__outserial, buf) == 0) {
    25b8:	0000118e 	andeq	r1, r0, lr, lsl #3
    25bc:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		ufree (buf);
    25c0:	2104fc01 	tstcs	r4, r1, lsl #24	; <UNPREDICTABLE>
    25c4:	0000141f 	andeq	r1, r0, pc, lsl r4
		memcpy (buf, m, prcs);
    25c8:	00000000 	andeq	r0, r0, r0
    25cc:	00141020 	andseq	r1, r4, r0, lsr #32
    25d0:	0011ce00 	andseq	ip, r1, r0, lsl #28
}
    25d4:	00040800 	andeq	r0, r4, r0, lsl #16
    25d8:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
int ser_in (word st, char *buf, int len) {
    25dc:	00093502 	andeq	r3, r9, r2, lsl #10
    25e0:	141f2100 	ldrne	r2, [pc], #-256	; 25e8 <ser_in+0xc>
	if (len == 0)
    25e4:	20000000 	andcs	r0, r0, r0
	if (__inpline == NULL) {
    25e8:	00001410 	andeq	r1, r0, r0, lsl r4
		if ((prcs = running (__inserial)) == 0) {
    25ec:	000011d0 	ldrdeq	r1, [r0], -r0
    25f0:	00000428 	andeq	r0, r0, r8, lsr #8
			prcs = runthread (__inserial);
    25f4:	02040e01 	andeq	r0, r4, #1, 28
    25f8:	00000950 	andeq	r0, r0, r0, asr r9
			if (prcs == 0) {
    25fc:	00141f21 	andseq	r1, r4, r1, lsr #30
				npwait (st);
    2600:	f3200000 	vhadd.u32	d0, d0, d0
		release;
    2604:	ea000013 	b	2658 <ser_outf+0x4>
		join (prcs, st);
    2608:	40000011 	andmi	r0, r0, r1, lsl r0
    260c:	01000004 	tsteq	r0, r4
	if (*__inpline == NULL) // bin cmd
    2610:	6b02040e 	blvs	83650 <__ccfg+0x636a8>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2614:	21000009 	tstcs	r0, r9
	if (prcs >= len)
    2618:	00001402 	andeq	r1, r0, r2, lsl #8
		prcs = len-1;
    261c:	13f32600 	mvnsne	r2, #0, 12
	memcpy (buf, __inpline, prcs);
    2620:	11f00000 	mvnsne	r0, r0
    2624:	11f20000 	mvnsne	r0, r0
    2628:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
	ufree (__inpline);
    262c:	09860204 	stmibeq	r6, {r2, r9}
	__inpline = NULL;
    2630:	02210000 	eoreq	r0, r1, #0
	if (*buf) // if it's NULL, it's a bin cmd
    2634:	00000014 	andeq	r0, r0, r4, lsl r0
		buf [prcs] = '\0';
    2638:	00123420 	andseq	r3, r2, r0, lsr #8
}
    263c:	00120200 	andseq	r0, r2, r0, lsl #4
		prcs = strlen (__inpline);
    2640:	00045800 	andeq	r5, r4, r0, lsl #16
    2644:	041b0100 	ldreq	r0, [fp], #-256	; 0xffffff00
		return 0;
    2648:	0009a102 	andeq	sl, r9, r2, lsl #2
    264c:	12432100 	subne	r2, r3, #0, 2
    2650:	26000000 	strcs	r0, [r0], -r0
int ser_outf (word st, const char *m, ...) {
    2654:	00000ccb 	andeq	r0, r0, fp, asr #25
    2658:	0000122c 	andeq	r1, r0, ip, lsr #4
	if ((prcs = running (__outserial)) != 0) {
    265c:	00001256 	andeq	r1, r0, r6, asr r2
    2660:	02043e01 	andeq	r3, r4, #1, 28
		join (prcs, st);
    2664:	000009c8 	andeq	r0, r0, r8, asr #19
    2668:	00144325 	andseq	r4, r4, r5, lsr #6
		release;
    266c:	00124a00 	andseq	r4, r2, r0, lsl #20
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2670:	00047000 	andeq	r7, r4, r0
    2674:	03010100 	movweq	r0, #4352	; 0x1100
    2678:	ab260002 	blge	982688 <__ccfg+0x9626e0>
		umwait (st);
    267c:	66000012 			; <UNDEFINED> instruction: 0x66000012
    2680:	7a000012 	bvc	26d0 <ser_inf+0x28>
	if (runstrand (__outserial, buf) == 0) {
    2684:	01000012 	tsteq	r0, r2, lsl r0
    2688:	ef030451 	svc	0x00030451
    268c:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
		ufree (buf);
    2690:	000012b6 			; <UNDEFINED> instruction: 0x000012b6
		npwait (st);
    2694:	00001266 	andeq	r1, r0, r6, ror #4
}
    2698:	0000126a 	andeq	r1, r0, sl, ror #4
    269c:	0501140b 	streq	r1, [r1, #-1035]	; 0xfffffbf5
    26a0:	0b953300 	bleq	fe54f2a8 <_estack+0xde54a2a8>
    26a4:	12800000 	addne	r0, r0, #0
int ser_inf (word st, const char *fmt, ...) {
    26a8:	04880000 	streq	r0, [r8], #0
    26ac:	72010000 	andvc	r0, r1, #0
	if (fmt == NULL)
    26b0:	11330204 	teqne	r3, r4, lsl #4
	if (__inpline == NULL) {
    26b4:	80000013 	andhi	r0, r0, r3, lsl r0
		if ((prcs = running (__inserial)) == 0) {
    26b8:	88000012 	stmdahi	r0, {r1, r4}
    26bc:	01000004 	tsteq	r0, r4
			prcs = runthread (__inserial);
    26c0:	210203bd 			; <UNDEFINED> instruction: 0x210203bd
    26c4:	0000132d 	andeq	r1, r0, sp, lsr #6
			if (prcs == 0) {
    26c8:	00132021 	andseq	r2, r3, r1, lsr #32
				npwait (st);
    26cc:	00000000 	andeq	r0, r0, r0
		release;
    26d0:	12f5012c 	rscsne	r0, r5, #44, 2
		join (prcs, st);
    26d4:	ed010000 	stc	0, cr0, [r1, #-0]
    26d8:	70010603 	andvc	r0, r1, r3, lsl #12
	va_start (ap, fmt);
    26dc:	ac000010 	stcge	0, cr0, [r0], {16}
	prcs = vscan (__inpline, fmt, ap);
    26e0:	01000010 	tsteq	r0, r0, lsl r0
    26e4:	000aa79c 	muleq	sl, ip, r7
	ufree (__inpline);
    26e8:	61763400 	cmnvs	r6, r0, lsl #8
	__inpline = NULL;
    26ec:	ed01006c 	stc	0, cr0, [r1, #-432]	; 0xfffffe50
}
    26f0:	008d1c03 	addeq	r1, sp, r3, lsl #24
    26f4:	50010000 	andpl	r0, r1, r0
    26f8:	01006929 	tsteq	r0, r9, lsr #18
		return 0;
    26fc:	8d0603ef 	stchi	3, cr0, [r6, #-956]	; 0xfffffc44
    2700:	ea000000 	b	2708 <plugch>
    2704:	29000003 	stmdbcs	r0, {r0, r1}
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2708:	01006e62 	tsteq	r0, r2, ror #28
    270c:	df0803f0 	svcle	0x000803f0
    2710:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
	RF_cmdFs.frequency = 
    2714:	25000004 	strcs	r0, [r0, #-4]
}
    2718:	000011ed 	andeq	r1, r0, sp, ror #3
    271c:	00001070 	andeq	r1, r0, r0, ror r0
    2720:	00000340 	andeq	r0, r0, r0, asr #6
    2724:	0203f201 	andeq	pc, r3, #268435456	; 0x10000000
static int option (int opt, address val) {
    2728:	0013ac20 	andseq	sl, r3, r0, lsr #24
    272c:	00107600 	andseq	r7, r0, r0, lsl #12
    2730:	00035800 	andeq	r5, r3, r0, lsl #16
    2734:	03f50100 	mvnseq	r0, #0, 2
    2738:	000a9503 	andeq	r9, sl, r3, lsl #10
    273c:	13bb3500 			; <UNDEFINED> instruction: 0x13bb3500
    2740:	04080000 	streq	r0, [r8], #-0
    2744:	1d000000 	stcne	0, cr0, [r0, #-0]
    2748:	000011f7 	strdeq	r1, [r0], -r7
    274c:	0000109a 	muleq	r0, sl, r0
    2750:	0000109c 	muleq	r0, ip, r0
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    2754:	0203f901 	andeq	pc, r3, #16384	; 0x4000
    2758:	53012c00 	movwpl	r2, #7168	; 0x1c00
			goto RVal;
    275c:	01000012 	tsteq	r0, r2, lsl r0
			_BIS (dstate, DSTATE_RXON);
    2760:	010603da 	ldrdeq	r0, [r6, -sl]
    2764:	0000102c 	andeq	r1, r0, ip, lsr #32
	int ret = 0;
    2768:	00001070 	andeq	r1, r0, r0, ror r0
			p_trigger (drvprcs, qevent);
    276c:	0b2c9c01 	bleq	b29778 <__ccfg+0xb097d0>
    2770:	76340000 	ldrtvc	r0, [r4], -r0
    2774:	01006c61 	tsteq	r0, r1, ror #24
    2778:	8d1c03da 	ldchi	3, cr0, [ip, #-872]	; 0xfffffc98
    277c:	01000000 	mrseq	r0, (UNDEF: 0)
    2780:	00691c50 	rsbeq	r1, r9, r0, asr ip
    2784:	0603dc01 	streq	sp, [r3], -r1, lsl #24
    2788:	0000008d 	andeq	r0, r0, sp, lsl #1
    278c:	006e6229 	rsbeq	r6, lr, r9, lsr #4
    2790:	0803dd01 	stmdaeq	r3, {r0, r8, sl, fp, ip, lr, pc}
}
    2794:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
			_BIC (dstate, DSTATE_RXON);
    2798:	0000041b 	andeq	r0, r0, fp, lsl r4
    279c:	0011ed25 	andseq	lr, r1, r5, lsr #26
			statid = (val == NULL) ? 0 : *val;
    27a0:	00102c00 	andseq	r2, r0, r0, lsl #24
    27a4:	0002f800 	andeq	pc, r2, r0, lsl #16
	int ret = 0;
    27a8:	03df0100 	bicseq	r0, pc, #0, 2
			ret = (int) statid;
    27ac:	13ac2002 			; <UNDEFINED> instruction: 0x13ac2002
	if (val != NULL)
    27b0:	10300000 	eorsne	r0, r0, r0
		*val = ret;
    27b4:	03100000 	tsteq	r0, #0
			ret = rbuffl + 2;
    27b8:	e2010000 	and	r0, r1, #0
    27bc:	0b1a0303 	bleq	6833d0 <__ccfg+0x663428>
			if (val != NULL) {
    27c0:	bb350000 	bllt	d427c8 <__ccfg+0xd22820>
				memcpy (val, &rxstat,
    27c4:	2e000013 	mcrcs	0, 0, r0, cr0, cr3, {0}
    27c8:	00000004 	andeq	r0, r0, r4
				memset (&rxstat, 0, 
    27cc:	0011f71d 	andseq	pc, r1, sp, lsl r7	; <UNPREDICTABLE>
    27d0:	00105e00 	andseq	r5, r0, r0, lsl #28
			if (val == NULL)
    27d4:	00106000 	andseq	r6, r0, r0
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    27d8:	03e60100 	mvneq	r0, #0, 2
    27dc:	011e0002 	tsteq	lr, r2
				utimer_set (bckf_timer, *val);
    27e0:	00001306 	andeq	r1, r0, r6, lsl #6
    27e4:	0603c601 	streq	ip, [r3], -r1, lsl #12
    27e8:	000010ac 	andeq	r1, r0, ip, lsr #1
			for (ret = 0; ret < 8; ret++)
    27ec:	00001150 	andeq	r1, r0, r0, asr r1
				if (RF_cmdPropRadioDivSetup.txPower
    27f0:	0b959c01 	bleq	fe5697fc <_estack+0xde5647fc>
					== patable [ret])
    27f4:	be2e0000 	cdplt	0, 2, cr0, cr14, cr0, {0}
				if (RF_cmdPropRadioDivSetup.txPower
    27f8:	ec000010 	stc	0, cr0, [r0], {16}
			for (ret = 0; ret < 8; ret++)
    27fc:	6e000010 	mcrvs	0, 0, r0, cr0, cr0, {0}
    2800:	3600000b 	strcc	r0, [r0], -fp
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2804:	0307006a 	movweq	r0, #28778	; 0x706a
    2808:	00008d02 	andeq	r8, r0, r2, lsl #26
    280c:	00044100 	andeq	r4, r4, r0, lsl #2
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2810:	00693600 	rsbeq	r3, r9, r0, lsl #12
    2814:	f4020307 	vst2.8	{d0-d3}, [r2], r7
			_BIS (dstate, DSTATE_IRST);
    2818:	54000003 	strpl	r0, [r0], #-3
    281c:	00000004 	andeq	r0, r0, r4
    2820:	0010fe37 	andseq	pc, r0, r7, lsr lr	; <UNPREDICTABLE>
			ret = (int) channel;
    2824:	00112c00 	andseq	r2, r1, r0, lsl #24
			goto RVal;
    2828:	006a3600 	rsbeq	r3, sl, r0, lsl #12
				(*val > 7) ? 7 : *val;
    282c:	8d020208 	sfmhi	f0, 4, [r2, #-32]	; 0xffffffe0
    2830:	67000000 	strvs	r0, [r0, -r0]
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2834:	36000004 	strcc	r0, [r0], -r4
    2838:	02080069 	andeq	r0, r8, #105	; 0x69
			plugch ();
    283c:	0003f402 	andeq	pc, r3, r2, lsl #8
			_BIS (dstate, DSTATE_IRST);
    2840:	00047a00 	andeq	r7, r4, r0, lsl #20
    2844:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
			ret = (int) vrate;
    2848:	000010db 	ldrdeq	r1, [r0], -fp
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    284c:	1403bb01 	strne	fp, [r3], #-2817	; 0xfffff4ff
    2850:	4b011e03 	blmi	4a064 <__ccfg+0x2a0bc>
    2854:	01000014 	tsteq	r0, r4, lsl r0
    2858:	6c060382 	stcvs	3, cr0, [r6], {130}	; 0x82
    285c:	2c00000f 	stccs	0, cr0, [r0], {15}
    2860:	01000010 	tsteq	r0, r0, lsl r0
    2864:	000c289c 	muleq	ip, ip, r8
    2868:	0f982e00 	svceq	0x00982e00
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    286c:	0fc60000 	svceq	0x00c60000
    2870:	0be30000 	bleq	ff8c2878 <_estack+0xdf8bd878>
    2874:	6a290000 	bvs	a4287c <__ccfg+0xa228d4>
    2878:	03890100 	orreq	r0, r9, #0, 2
			syserror (EREQPAR, "cc13 op");
    287c:	00008d03 	andeq	r8, r0, r3, lsl #26
    2880:	00048d00 	andeq	r8, r4, r0, lsl #26
    2884:	00692900 	rsbeq	r2, r9, r0, lsl #18
    2888:	03038901 	movweq	r8, #14593	; 0x3901
    288c:	000003f4 	strdeq	r0, [r0], -r4
    2890:	000004a0 	andeq	r0, r0, r0, lsr #9
    2894:	02e01b00 	rsceq	r1, r0, #0, 22
    2898:	0c0b0000 	stceq	0, cr0, [fp], {-0}
    289c:	6a290000 	bvs	a428a4 <__ccfg+0xa228fc>
    28a0:	038f0100 	orreq	r0, pc, #0, 2
    28a4:	00008d03 	andeq	r8, r0, r3, lsl #26
    28a8:	0004b300 	andeq	fp, r4, r0, lsl #6
    28ac:	00692900 	rsbeq	r2, r9, r0, lsl #18
    28b0:	03038f01 	movweq	r8, #16129	; 0x3f01
    28b4:	000003f4 	strdeq	r0, [r0], -r4
static void issue_cmd (lword cmd) {
    28b8:	000004c6 	andeq	r0, r0, r6, asr #9
    28bc:	12e73300 	rscne	r3, r7, #0, 6
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    28c0:	0f6c0000 	svceq	0x006c0000
    28c4:	02c00000 	sbceq	r0, r0, #0
    28c8:	84010000 	strhi	r0, [r1], #-0
		if (res != 0x86)
    28cc:	03210203 			; <UNDEFINED> instruction: 0x03210203
			syserror (EHARDWARE, "hang ic0");
    28d0:	21000013 	tstcs	r0, r3, lsl r0
    28d4:	000012f6 	strdeq	r1, [r0], -r6
		if (cnt-- == 0) {
    28d8:	d8390000 	ldmdale	r9!, {}	; <UNPREDICTABLE>
			diag ("HUP %lx %lx", cmd, res);
    28dc:	01000011 	tsteq	r0, r1, lsl r0
    28e0:	010d037d 	tsteq	sp, sp, ror r3
			syserror (EHARDWARE, "hang ic0");
    28e4:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		udelay (1);
    28e8:	00000adc 	ldrdeq	r0, [r0], -ip
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    28ec:	0c529c01 	mrrceq	12, 0, r9, r2, cr1
}
    28f0:	e02d0000 	eor	r0, sp, r0
    28f4:	01000013 	tsteq	r0, r3, lsl r0
    28f8:	8d1f037d 	ldchi	3, cr0, [pc, #-500]	; 270c <plugch+0x4>
    28fc:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
static void rx_de () {
    2900:	00000004 	andeq	r0, r0, r4
	if ((dstate & DSTATE_RXAC) == 0)
    2904:	0013a13a 	andseq	sl, r3, sl, lsr r1
    2908:	03100100 	tsteq	r0, #0, 2
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    290c:	008d010c 	addeq	r0, sp, ip, lsl #2
	_BIC (dstate, DSTATE_RXAC);
    2910:	0e5c0000 	cdpeq	0, 5, cr0, cr12, cr0, {0}
    2914:	0f6c0000 	svceq	0x006c0000
}
    2918:	9c010000 	stcls	0, cr0, [r1], {-0}
    291c:	00000ccb 	andeq	r0, r0, fp, asr #25
    2920:	00116a2d 	andseq	r6, r1, sp, lsr #20
static void rf_off () {
    2924:	03100100 	tsteq	r0, #0, 2
	if ((dstate & DSTATE_RFON) == 0)
    2928:	00008d1e 	andeq	r8, r0, lr, lsl sp
    292c:	0004f700 	andeq	pc, r4, r0, lsl #14
	IntDisable (INT_RFC_CPE_0);
    2930:	75623b00 	strbvc	r3, [r2, #-2816]!	; 0xfffff500
    2934:	10010066 	andne	r0, r1, r6, rrx
    2938:	01c92f03 	biceq	r2, r9, r3, lsl #30
	RFCAdi3VcoLdoVoltageMode (false);
    293c:	050a0000 	streq	r0, [sl, #-0]
	RFCSynthPowerDown ();
    2940:	6c3b0000 	ldcvs	0, cr0, [fp], #-0
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2944:	01006e65 	tsteq	r0, r5, ror #28
    2948:	8d380310 	ldchi	3, cr0, [r8, #-64]!	; 0xffffffc0
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    294c:	ac000000 	stcge	0, cr0, [r0], {-0}
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2950:	2b000005 	blcs	296c <rf_off+0x48>
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2954:	00001087 	andeq	r1, r0, r7, lsl #1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2958:	01031801 	tsteq	r3, r1, lsl #16
    295c:	0011922b 	andseq	r9, r1, fp, lsr #4
    2960:	033d0100 	teqeq	sp, #0, 2
	_BIC (dstate, DSTATE_RFON);
    2964:	0d442701 	stcleq	7, cr2, [r4, #-4]
    2968:	0f3e0000 	svceq	0x003e0000
}
    296c:	0f400000 	svceq	0x00400000
    2970:	65010000 	strvs	r0, [r1, #-0]
    2974:	58211503 	stmdapl	r1!, {r0, r1, r8, sl, ip}
    2978:	0000000d 	andeq	r0, r0, sp
    297c:	12223800 	eorne	r3, r2, #0, 16
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2980:	fc010000 	stc2	0, cr0, [r1], {-0}
    2984:	3c010d02 	stccc	13, cr0, [r1], {2}
    2988:	00001223 	andeq	r1, r0, r3, lsr #4
		if (cmd->status == tstat)
    298c:	0d02f001 	stceq	0, cr15, [r2, #-4]
		if (timeout-- == 0) {
    2990:	00000e24 	andeq	r0, r0, r4, lsr #28
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2994:	00000e5c 	andeq	r0, r0, ip, asr lr
    2998:	0d449c01 	stcleq	12, cr9, [r4, #-4]
    299c:	3b200000 	blcc	8029a4 <__ccfg+0x7e29fc>
			syserror (EHARDWARE, "rt2");
    29a0:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    29a4:	a800000e 	stmdage	r0, {r1, r2, r3}
		udelay (1);
    29a8:	01000002 	tsteq	r0, r2
		if (cmd->status == tstat)
    29ac:	070202f5 			; <UNDEFINED> instruction: 0x070202f5
}
    29b0:	2100000d 	tstcs	r0, sp
    29b4:	0000134a 	andeq	r1, r0, sl, asr #6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    29b8:	13752600 	cmnne	r5, #0, 12
    29bc:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
static void rf_on () {
    29c0:	0e360000 	cdpeq	0, 3, cr0, cr6, cr0, {0}
    29c4:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
	OSCHF_TurnOnXosc();
    29c8:	0d2c0202 	sfmeq	f0, 4, [ip, #-8]!
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    29cc:	9e210000 	cdpls	0, 2, cr0, cr1, cr0, {0}
    29d0:	21000013 	tstcs	r0, r3, lsl r0
    29d4:	00001391 	muleq	r0, r1, r3
    29d8:	00138421 	andseq	r8, r3, r1, lsr #8
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    29dc:	ca270000 	bgt	9c29e4 <__ccfg+0x9a2a3c>
    29e0:	36000012 			; <UNDEFINED> instruction: 0x36000012
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    29e4:	4000000e 	andmi	r0, r0, lr
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    29e8:	0100000e 	tsteq	r0, lr
	issue_cmd (
    29ec:	210202f7 	strdcs	r0, [r2, -r7]
    29f0:	000012d9 	ldrdeq	r1, [r0], -r9
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    29f4:	013d0000 	teqeq	sp, r0
    29f8:	00001055 	andeq	r1, r0, r5, asr r0
    29fc:	0602eb01 	streq	lr, [r2], -r1, lsl #22
   pPatchTab[80] = 0;
    2a00:	0000a701 	andeq	sl, r0, r1, lsl #14
   } while (--nIterations);
    2a04:	0d650100 	stfeqe	f0, [r5, #-0]
   pPatchTab[53] = 2;
    2a08:	753e0000 	ldrvc	r0, [lr, #-0]!
    2a0c:	eb010061 	bl	42b98 <__ccfg+0x22bf0>
   pPatchTab[55] = 3;
    2a10:	0d652702 	stcleq	7, cr2, [r5, #-8]!
   pPatchTab[110] = 4;
    2a14:	07000000 	streq	r0, [r0, -r0]
   pPatchTab[107] = 5;
    2a18:	00022604 	andeq	r2, r2, r4, lsl #12
   pPatchTab[65] = 6;
    2a1c:	18011a00 	stmdane	r1, {r9, fp, ip}
    2a20:	01000011 	tsteq	r0, r1, lsl r0
   pPatchTab[57] = 1;
    2a24:	010902d4 	ldrdeq	r0, [r9, -r4]
   pIrqPatch[1] = _IRQ_PATCH_0;
    2a28:	0000009b 	muleq	r0, fp, r0
   const uint32_t *pS = patchGenfskRfe;
    2a2c:	00000dd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      t2 = *pS++;
    2a30:	00000e24 	andeq	r0, r0, r4, lsr #28
      t4 = *pS++;
    2a34:	0dc19c01 	stcleq	12, cr9, [r1, #4]
      t6 = *pS++;
    2a38:	622d0000 	eorvs	r0, sp, #0
      t8 = *pS++;
    2a3c:	01000010 	tsteq	r0, r0, lsl r0
      *pD++ = t1;
    2a40:	a72102d4 			; <UNDEFINED> instruction: 0xa72102d4
      *pD++ = t2;
    2a44:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
      *pD++ = t3;
    2a48:	3b000006 	blcc	2a68 <rf_on.part.0+0xb0>
      *pD++ = t5;
    2a4c:	01006175 	tsteq	r0, r5, ror r1
      *pD++ = t7;
    2a50:	c12f02d4 	ldrdgt	r0, [pc, -r4]!
   } while (--nIterations);
    2a54:	4b00000d 	blmi	2a90 <rf_on.part.0+0xd8>
    2a58:	33000006 	movwcc	r0, #6
      *pD++ = t8;
    2a5c:	00001358 	andeq	r1, r0, r8, asr r3
   } while (--nIterations);
    2a60:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2a64:	00000290 	muleq	r0, r0, r2
   *pD++ = t2;
    2a68:	0202e601 	andeq	lr, r2, #1048576	; 0x100000
   *pD++ = t3;
    2a6c:	00136721 	andseq	r6, r3, r1, lsr #14
   *pD++ = t4;
    2a70:	07000000 	streq	r0, [r0, -r0]
   *pD++ = t5;
    2a74:	00021a04 	andeq	r1, r2, r4, lsl #20
    2a78:	71011a00 	tstvc	r1, r0, lsl #20
	RFCAdi3VcoLdoVoltageMode (true);
    2a7c:	01000014 	tsteq	r0, r4, lsl r0
    2a80:	0106018a 	smlabbeq	r6, sl, r1, r0
       	RFCRfTrimSet (&rfTrim);
    2a84:	000000a7 	andeq	r0, r0, r7, lsr #1
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2a88:	00000d80 	andeq	r0, r0, r0, lsl #27
    2a8c:	00000dd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2a90:	0e0f9c01 	cdpeq	12, 0, cr9, cr15, cr1, {0}
    2a94:	2f2d0000 	svccs	0x002d0000
	issue_cmd ((lword)&cmd_srt);
    2a98:	01000012 	tsteq	r0, r2, lsl r0
    2a9c:	9b26018a 	blls	9830cc <__ccfg+0x963124>
	issue_cmd ((lword)&RF_cmdFs);
    2aa0:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2aa4:	3f000006 	svccc	0x00000006
    2aa8:	01005845 	tsteq	r0, r5, asr #16
    2aac:	1d0101a4 	stfnes	f0, [r1, #-656]	; 0xfffffd70
	IntEnable (INT_RFC_CPE_0);
    2ab0:	00000f46 	andeq	r0, r0, r6, asr #30
	_BIC (dstate, DSTATE_IRST);
    2ab4:	00000d94 	muleq	r0, r4, sp
    2ab8:	00000d9e 	muleq	r0, lr, sp
    2abc:	1a019c01 	bne	69ac8 <__ccfg+0x49b20>
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2ac0:	e5011e00 	str	r1, [r1, #-3584]	; 0xfffff200
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2ac4:	01000011 	tsteq	r0, r1, lsl r0
	IntEnable (INT_RFC_CPE_0);
    2ac8:	6c060138 	stfvss	f0, [r6], {56}	; 0x38
    2acc:	8000000c 	andhi	r0, r0, ip
}
    2ad0:	0100000d 	tsteq	r0, sp
	IntEnable (INT_RFC_CPE_0);
    2ad4:	000ec19c 	muleq	lr, ip, r1
    2ad8:	13484000 	movtne	r4, #32768	; 0x8000
    2adc:	3a010000 	bcc	42ae4 <__ccfg+0x22b3c>
    2ae0:	00df0801 	sbcseq	r0, pc, r1, lsl #16
    2ae4:	067c0000 	ldrbteq	r0, [ip], -r0
    2ae8:	45410000 	strbmi	r0, [r1, #-0]
    2aec:	01005455 	tsteq	r0, r5, asr r4
    2af0:	ba010168 	blt	43098 <__ccfg+0x230f0>
    2af4:	2300000c 	movwcs	r0, #12
    2af8:	00000278 	andeq	r0, r0, r8, ror r2
    2afc:	00117440 	andseq	r7, r1, r0, asr #8
    2b00:	01470100 	mrseq	r0, (UNDEF: 87)
    2b04:	00009b0b 	andeq	r9, r0, fp, lsl #22
    2b08:	0006c700 	andeq	ip, r6, r0, lsl #14
    2b0c:	14104200 	ldrne	r4, [r0], #-512	; 0xfffffe00
    2b10:	0cd80000 	ldcleq	0, cr0, [r8], {0}
    2b14:	0ce00000 	stcleq	0, cr0, [r0]
    2b18:	0d050000 	stceq	0, cr0, [r5, #-0]
    2b1c:	000e7506 	andeq	r7, lr, r6, lsl #10
    2b20:	141f2100 	ldrne	r2, [pc], #-256	; 2b28 <rf_on.part.0+0x170>
    2b24:	42000000 	andmi	r0, r0, #0
    2b28:	00001410 	andeq	r1, r0, r0, lsl r4
    2b2c:	00000ce4 	andeq	r0, r0, r4, ror #25
    2b30:	00000cec 	andeq	r0, r0, ip, ror #25
    2b34:	8f060f05 	svchi	0x00060f05
static void rx_int_enable () {
    2b38:	2100000e 	tstcs	r0, lr
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2b3c:	0000141f 	andeq	r1, r0, pc, lsl r4
    2b40:	13f34200 	mvnsne	r4, #0, 4
    2b44:	0d320000 	ldceq	0, cr0, [r2, #-0]
    2b48:	0d3a0000 	ldceq	0, cr0, [sl, #-0]
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2b4c:	17050000 	strne	r0, [r5, -r0]
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2b50:	000ea906 	andeq	sl, lr, r6, lsl #18
    2b54:	14022100 	strne	r2, [r2], #-256	; 0xffffff00
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2b58:	43000000 	movwmi	r0, #0
    2b5c:	000013f3 	strdeq	r1, [r0], -r3
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2b60:	00000d3e 	andeq	r0, r0, lr, lsr sp
    2b64:	00000d46 	andeq	r0, r0, r6, asr #26
    2b68:	21061905 	tstcs	r6, r5, lsl #18
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2b6c:	00001402 	andeq	r1, r0, r2, lsl #8
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2b70:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2b74:	0012dd01 	andseq	sp, r2, r1, lsl #26
		if (db->status == DATA_ENTRY_FINISHED) {
    2b78:	012b0100 			; <UNDEFINED> instruction: 0x012b0100
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2b7c:	000c4406 	andeq	r4, ip, r6, lsl #8
    2b80:	000c6c00 	andeq	r6, ip, r0, lsl #24
			nr++;
    2b84:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2b88:	3300000e 	movwcc	r0, #14
    2b8c:	00000f25 	andeq	r0, r0, r5, lsr #30
    2b90:	00000c4c 	andeq	r0, r0, ip, asr #24
    2b94:	00000260 	andeq	r0, r0, r0, ror #4
				__dp [pl + 1] = __dp [pl] - 128;
    2b98:	2c013201 	sfmcs	f3, 4, [r1], {1}
				pl = __dp [1] + 2;
    2b9c:	000f3821 	andeq	r3, pc, r1, lsr #16
				__dp [pl + 1] = __dp [pl] - 128;
    2ba0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2ba4:	0011fc01 	andseq	pc, r1, r1, lsl #24
				__dp [pl] = 0;
    2ba8:	011e0100 	tsteq	lr, r0, lsl #2
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2bac:	000c0406 	andeq	r0, ip, r6, lsl #8
    2bb0:	000c4400 	andeq	r4, ip, r0, lsl #8
    2bb4:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
			db->status = DATA_ENTRY_PENDING;
    2bb8:	3300000f 	movwcc	r0, #15
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2bbc:	00000f25 	andeq	r0, r0, r5, lsr #30
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2bc0:	00000c16 	andeq	r0, r0, r6, lsl ip
				diag ("BAD RX");
    2bc4:	00000240 	andeq	r0, r0, r0, asr #4
    2bc8:	2c012501 	cfstr32cs	mvfx2, [r1], {1}
	if (nr) {
    2bcc:	000f3835 	andeq	r3, pc, r5, lsr r8	; <UNPREDICTABLE>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2bd0:	00070600 	andeq	r0, r7, r0, lsl #12
}
    2bd4:	44000000 	strmi	r0, [r0], #-0
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2bd8:	00001341 	andeq	r1, r0, r1, asr #6
    2bdc:	15011701 	strne	r1, [r1, #-1793]	; 0xfffff8ff
    2be0:	0000df01 	andeq	sp, r0, r1, lsl #30
}
    2be4:	0f460300 	svceq	0x00460300
    2be8:	643e0000 	ldrtvs	r0, [lr], #-0
    2bec:	01006c65 	tsteq	r0, r5, ror #24
    2bf0:	a7220117 			; <UNDEFINED> instruction: 0xa7220117
    2bf4:	00000000 	andeq	r0, r0, r0
    2bf8:	000f7d45 	andeq	r7, pc, r5, asr #26
    2bfc:	010e0100 	mrseq	r0, (UNDEF: 30)
    2c00:	0000a714 	andeq	sl, r0, r4, lsl r7
    2c04:	65460300 	strbvs	r0, [r6, #-768]	; 0xfffffd00
thread (cc1350_driver)
    2c08:	01000014 	tsteq	r0, r4, lsl r0
    2c0c:	7a0314ee 	bvc	c7fcc <__ccfg+0xa8024>
    2c10:	4700000f 	strmi	r0, [r0, -pc]
    2c14:	006e6970 	rsbeq	r6, lr, r0, ror r9
    2c18:	8d06f201 	sfmhi	f7, 1, [r6, #-4]
		if (dstate & DSTATE_IRST) {
    2c1c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    2c20:	01006947 	tsteq	r0, r7, asr #18
    2c24:	008d0bf4 	strdeq	r0, [sp], r4
			rf_off ();
    2c28:	00000000 	andeq	r0, r0, r0
			_BIC (dstate,
    2c2c:	13d20149 	bicsne	r0, r2, #1073741842	; 0x40000012
    2c30:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
		if (dstate & DSTATE_RXAC) {
    2c34:	0bb00106 	bleq	fec03054 <_estack+0xdebfe054>
    2c38:	0c040000 	stceq	0, cr0, [r4], {-0}
			if ((dstate & DSTATE_RXON) == 0)
    2c3c:	9c010000 	stcls	0, cr0, [r1], {-0}
				rx_de ();
    2c40:	00001024 	andeq	r1, r0, r4, lsr #32
		if (paylen == 0) {
    2c44:	0063654a 	rsbeq	r6, r3, sl, asr #10
    2c48:	a71a9801 	ldrge	r9, [sl, -r1, lsl #16]
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2c4c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2c50:	4a000007 	bmi	2c74 <cc1350_driver+0x6c>
    2c54:	9801006d 	stmdals	r1, {r0, r2, r3, r5, r6}
    2c58:	0010242a 	andseq	r2, r0, sl, lsr #8
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2c5c:	00072c00 	andeq	r2, r7, r0, lsl #24
    2c60:	11ed2800 	mvnne	r2, r0, lsl #16
    2c64:	0bbc0000 	bleq	fef02c6c <_estack+0xdeefdc6c>
    2c68:	0bbe0000 	bleq	fef82c70 <_estack+0xdef7dc70>
    2c6c:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    2c70:	14102202 	ldrne	r2, [r0], #-514	; 0xfffffdfe
    2c74:	0bbe0000 	bleq	fef82c7c <_estack+0xdef7dc7c>
    2c78:	01f00000 	mvnseq	r0, r0
		} else if (dstate & DSTATE_RXON) {
    2c7c:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
	if (dstate & DSTATE_RFON)
    2c80:	000fd903 	andeq	sp, pc, r3, lsl #18
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2c84:	141f2100 	ldrne	r2, [pc], #-256	; 2c8c <cc1350_driver+0x84>
		re->status = DATA_ENTRY_PENDING;
    2c88:	22000000 	andcs	r0, r0, #0
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2c8c:	00001410 	andeq	r1, r0, r0, lsl r4
	issue_cmd ((lword)&RF_cmdPropRx);
    2c90:	00000bc4 	andeq	r0, r0, r4, asr #23
	_BIS (dstate, DSTATE_RXAC);
    2c94:	00000210 	andeq	r0, r0, r0, lsl r2
    2c98:	f303b801 	vsub.i8	d11, d3, d1
    2c9c:	2100000f 	tstcs	r0, pc
    2ca0:	0000141f 	andeq	r1, r0, pc, lsl r4
	if (dstate & DSTATE_RXAC)
    2ca4:	13f32200 	mvnsne	r2, #0, 4
    2ca8:	0bdc0000 	bleq	ff702cb0 <_estack+0xdf6fdcb0>
				if (statid != 0xffff)
    2cac:	02280000 	eoreq	r0, r8, #0
    2cb0:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2cb4:	00100d03 	andseq	r0, r0, r3, lsl #26
				RF_cmdPropTx.pktLen = (byte) paylen;
    2cb8:	14022100 	strne	r2, [r2], #-256	; 0xffffff00
		if (paylen == 0) {
    2cbc:	43000000 	movwmi	r0, #0
			wait (qevent, DR_LOOP);
    2cc0:	000013f3 	strdeq	r1, [r0], -r3
    2cc4:	00000be2 	andeq	r0, r0, r2, ror #23
			if (dstate & DSTATE_RXAC) {
    2cc8:	00000be4 	andeq	r0, r0, r4, ror #23
    2ccc:	2103b801 	tstcs	r3, r1, lsl #16
				rx_int_enable ();
    2cd0:	00001402 	andeq	r1, r0, r2, lsl #8
			release;
    2cd4:	04070000 	streq	r0, [r7], #-0
			} else if (dstate & DSTATE_RFON) {
    2cd8:	000001d6 	ldrdeq	r0, [r0], -r6
				delay (offdelay, DR_GOOF);
    2cdc:	13670149 	cmnne	r7, #1073741842	; 0x40000012
    2ce0:	72010000 	andvc	r0, r1, #0
    2ce4:	00000106 	andeq	r0, r0, r6, lsl #2
		if (bckf_timer) {
    2ce8:	00000000 	andeq	r0, r0, r0
			wait (qevent, DR_LOOP);
    2cec:	9c010000 	stcls	0, cr0, [r1], {-0}
    2cf0:	000010ca 	andeq	r1, r0, sl, asr #1
    2cf4:	0074734a 	rsbseq	r7, r4, sl, asr #6
			delay (bckf_timer, DR_LOOP);
    2cf8:	a7187201 	ldrge	r7, [r8, -r1, lsl #4]
    2cfc:	4a000000 	bmi	2d04 <cc1350_driver+0xfc>
			if (dstate & DSTATE_RXAC)
    2d00:	4a000007 	bmi	2d24 <cc1350_driver+0x11c>
    2d04:	006e6573 	rsbeq	r6, lr, r3, ror r5
	if (dstate & DSTATE_RFON)
    2d08:	44287201 	strtmi	r7, [r8], #-513	; 0xfffffdff
    2d0c:	5d000002 	stcpl	0, cr0, [r0, #-8]
		rx_de ();
    2d10:	4a000007 	bmi	2d34 <cc1350_driver+0x12c>
		RF_cmdPropTx . status = 0;
    2d14:	006c6176 	rsbeq	r6, ip, r6, ror r1
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2d18:	fc357201 	ldc2	2, cr7, [r5], #-4
    2d1c:	7b000000 	blvc	2d24 <cc1350_driver+0x11c>
    2d20:	4b000007 	blmi	2d44 <cc1350_driver+0x13c>
		issue_cmd ((lword)&cmd_cs);
    2d24:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
		if (dstate & DSTATE_IRST)
    2d28:	c90e7401 	stmdbgt	lr, {r0, sl, ip, sp, lr}
    2d2c:	05000000 	streq	r0, [r0, #-0]
    2d30:	00000003 	andeq	r0, r0, r3
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2d34:	14884c00 	strne	r4, [r8], #3072	; 0xc00
    2d38:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
			delay (1, DR_XMIT);
    2d3c:	00000001 	andeq	r0, r0, r1
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2d40:	12204d00 	eorne	r4, r0, #0, 26
    2d44:	00000000 	andeq	r0, r0, r0
    2d48:	06280000 	strteq	r0, [r8], -r0
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2d4c:	81010000 	mrshi	r0, (UNDEF: 1)
    2d50:	12014203 	andne	r4, r1, #805306368	; 0x30000000
	...
				issue_cmd ((lword)&RF_cmdPropTx);
    2d5c:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
				proceed (DR_XMIT);
    2d60:	0010b912 	andseq	fp, r0, r2, lsl r9
    2d64:	12132f00 	andsne	r2, r3, #0, 30
			txtries++;
    2d68:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2d6c:	0000122a 	andeq	r1, r0, sl, lsr #4
	...
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2d78:	00038401 	andeq	r8, r3, r1, lsl #8
		goto DR_LOOP__;
    2d7c:	142f014e 	strtne	r0, [pc], #-334	; 2d84 <cc1350_driver+0x17c>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2d80:	62010000 	andvs	r0, r1, #0
		paylen = 0;
    2d84:	15840106 	strne	r0, [r4, #262]	; 0x106
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2d88:	15b40000 	ldrne	r0, [r4, #0]!
		txtries = 0;
    2d8c:	9c010000 	stcls	0, cr0, [r1], {-0}
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2d90:	0f370149 	svceq	0x00370149
    2d94:	4f010000 	svcmi	0x00010000
    2d98:	00000106 	andeq	r0, r0, r6, lsl #2
    2d9c:	00000000 	andeq	r0, r0, r0
    2da0:	9c010000 	stcls	0, cr0, [r1], {-0}
		    tcvphy_top (physid) == NULL)
    2da4:	00001107 	andeq	r1, r0, r7, lsl #2
    2da8:	00125128 	andseq	r5, r2, r8, lsr #2
	...
			rf_off ();
    2db4:	035f0100 	cmpeq	pc, #0, 2
endthread
    2db8:	6e014900 	vmlavs.f16	s8, s2, s0	; <UNPREDICTABLE>
    2dbc:	0100000f 	tsteq	r0, pc
    2dc0:	7001063b 	andvc	r0, r1, fp, lsr r6
    2dc4:	b000000b 	andlt	r0, r0, fp
    2dc8:	0100000b 	tsteq	r0, fp
    2dcc:	00112e9c 	mulseq	r1, ip, lr
    2dd0:	00644a00 	rsbeq	r4, r4, r0, lsl #20
    2dd4:	df1c3b01 	svcle	0x001c3b01
    2dd8:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    2ddc:	00000007 	andeq	r0, r0, r7
    2de0:	102e0149 	eorne	r0, lr, r9, asr #2
    2de4:	2b010000 	blcs	42dec <__ccfg+0x22e44>
    2de8:	0b340106 	bleq	d03208 <__ccfg+0xce3260>
    2dec:	0b700000 	bleq	1c02df4 <__ccfg+0x1be2e4c>
    2df0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2df4:	00001155 	andeq	r1, r0, r5, asr r1
void RFCCPE0IntHandler (void) {
    2df8:	0100644a 	tsteq	r0, sl, asr #8
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2dfc:	00df1b2b 	sbcseq	r1, pc, fp, lsr #22
		_BIS (dstate, DSTATE_IRST);
    2e00:	07b70000 	ldreq	r0, [r7, r0]!
    2e04:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
    2e08:	00126401 	andseq	r6, r2, r1, lsl #8
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2e0c:	06200100 	strteq	r0, [r0], -r0, lsl #2
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2e10:	000b0801 	andeq	r0, fp, r1, lsl #16
    2e14:	000b3200 	andeq	r3, fp, r0, lsl #4
	p_trigger (drvprcs, qevent);
    2e18:	7c9c0100 	ldfvcs	f0, [ip], {0}
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2e1c:	4a000011 	bmi	2e68 <phys_cc1350>
    2e20:	2001006e 	andcs	r0, r1, lr, rrx
    2e24:	0000b81c 	andeq	fp, r0, ip, lsl r8
    2e28:	0007d500 	andeq	sp, r7, r0, lsl #10
    2e2c:	01490000 	mrseq	r0, (UNDEF: 73)
    2e30:	0000134f 	andeq	r1, r0, pc, asr #6
    2e34:	01061901 	tsteq	r6, r1, lsl #18
    2e38:	00000adc 	ldrdeq	r0, [r0], -ip
    2e3c:	00000b08 	andeq	r0, r0, r8, lsl #22
    2e40:	11b79c01 			; <UNDEFINED> instruction: 0x11b79c01
	RISE_N_SHINE;
    2e44:	6e4f0000 	cdpvs	0, 4, cr0, cr15, cr0, {0}
    2e48:	1c190100 	ldfnes	f0, [r9], {-0}
    2e4c:	000000b8 	strheq	r0, [r0], -r8
}
    2e50:	b7435001 	strblt	r5, [r3, -r1]
    2e54:	f0000011 			; <UNDEFINED> instruction: 0xf0000011
    2e58:	fa00000a 	blx	2e88 <phys_cc1350+0x20>
    2e5c:	0100000a 	tsteq	r0, sl
    2e60:	c521031b 	strgt	r0, [r1, #-795]!	; 0xfffffce5
    2e64:	00000011 	andeq	r0, r0, r1, lsl r0
void phys_cc1350 (int phy, int mbs) {
    2e68:	14435000 	strbne	r5, [r3], #-0
	if (rbuffl != 0)
    2e6c:	15010000 	strne	r0, [r1, #-0]
    2e70:	d0030114 	andle	r0, r3, r4, lsl r1
		syserror (ETOOMANY, "cc13");
    2e74:	51000011 	tstpl	r0, r1, lsl r0
		syserror (EREQPAR, "cc13 mb");
    2e78:	1501006e 	strne	r0, [r1, #-110]	; 0xffffff92
	if (mbs == 0)
    2e7c:	0000b82b 	andeq	fp, r0, fp, lsr #16
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2e80:	1a520000 	bne	1482e88 <__ccfg+0x1462ee0>
		syserror (EREQPAR, "cc13 mb");
    2e84:	03000010 	movweq	r0, #16
    2e88:	0135011a 	teqeq	r5, sl, lsl r1
	i = 0;
    2e8c:	0011ed03 	andseq	lr, r1, r3, lsl #26
	rbuffl = (byte) mbs;
    2e90:	14345300 	ldrtne	r5, [r4], #-768	; 0xfffffd00
		db->config.type = 0;	// General (data in structure)
    2e94:	1a030000 	bne	c2e9c <__ccfg+0xa2ef4>
	rbuffl = (byte) mbs;
    2e98:	00734801 	rsbseq	r4, r3, r1, lsl #16
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2e9c:	54000000 	strpl	r0, [r0], #-0
    2ea0:	0000126b 	andeq	r1, r0, fp, ror #4
		if (db == NULL)
    2ea4:	01355b03 	teqeq	r5, r3, lsl #22
			syserror (EMALLOC, "cc13");
    2ea8:	0f8b5403 	svceq	0x008b5403
    2eac:	50030000 	andpl	r0, r3, r0
    2eb0:	55030135 	strpl	r0, [r3, #-309]	; 0xfffffecb
		db->status = DATA_ENTRY_PENDING;
    2eb4:	00001386 	andeq	r1, r0, r6, lsl #7
		if (i)
    2eb8:	0101bf0f 	tsteq	r1, pc, lsl #30
			da->pNextEntry = (byte*) db;
    2ebc:	00000073 	andeq	r0, r0, r3, ror r0
		db->length = rbuffl + 2;
    2ec0:	00122003 	andseq	r2, r2, r3
    2ec4:	13e71600 	mvnne	r1, #0, 12
		db->config.type = 0;	// General (data in structure)
    2ec8:	c10f0000 	mrsgt	r0, CPSR
		db->length = rbuffl + 2;
    2ecc:	0000730e 	andeq	r7, r0, lr, lsl #6
	db->pNextEntry = (byte*) re;
    2ed0:	56540000 	ldrbpl	r0, [r4], -r0
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2ed4:	0f000013 	svceq	0x00000013
    2ed8:	03010190 	movweq	r0, #4496	; 0x1190
	if (rbuffs == NULL)
    2edc:	000f5554 	andeq	r5, pc, r4, asr r5	; <UNPREDICTABLE>
	rbuffs->pCurrEntry = (byte*) re;
    2ee0:	017b0f00 	cmneq	fp, r0, lsl #30
	rbuffs->pLastEntry = NULL;
    2ee4:	c3520301 	cmpgt	r2, #67108864	; 0x4000000
    2ee8:	0a000011 	beq	2f34 <phys_cc1350+0xcc>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2eec:	01010366 	tsteq	r1, r6, ror #6
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2ef0:	00125103 	andseq	r5, r2, r3, lsl #2
    2ef4:	119a5300 	orrsne	r5, sl, r0, lsl #6
    2ef8:	660a0000 	strvs	r0, [sl], -r0
	rbuffl -= 2;
    2efc:	00731f03 	rsbseq	r1, r3, r3, lsl #30
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f00:	56000000 	strpl	r0, [r0], -r0
	rbuffl -= 2;
    2f04:	0000132e 	andeq	r1, r0, lr, lsr #6
	physid = phy;
    2f08:	01014c02 	tsteq	r1, r2, lsl #24
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f0c:	bf540301 	svclt	0x00540301
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f10:	02000012 	andeq	r0, r0, #18
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f14:	030101c4 	movweq	r0, #4548	; 0x11c4
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f18:	00109b57 	andseq	r9, r0, r7, asr fp
    2f1c:	01ad0200 			; <UNDEFINED> instruction: 0x01ad0200
	utimer_add (&bckf_timer);
    2f20:	00007301 	andeq	r7, r0, r1, lsl #6
	drvprcs = runthread (cc1350_driver);
    2f24:	ee560300 	cdp	3, 5, cr0, cr6, cr0, {0}
    2f28:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
    2f2c:	01010245 	tsteq	r1, r5, asr #4
	if (drvprcs == 0)
    2f30:	0fc05803 	svceq	0x00c05803
		syserror (ERESOURCE, "cc13");
    2f34:	2c0e0000 	stccs	0, cr0, [lr], {-0}
    2f38:	73010102 	movwvc	r0, #4354	; 0x1102
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2f3c:	03000000 	movweq	r0, #0
    2f40:	000fab52 	andeq	sl, pc, r2, asr fp	; <UNPREDICTABLE>
    2f44:	01dc0e00 	bicseq	r0, ip, r0, lsl #28
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2f48:	ab030101 	blge	c3354 <__ccfg+0xa33ac>
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2f4c:	53000012 	movwpl	r0, #18
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2f50:	00000f65 	andeq	r0, r0, r5, ror #30
    2f54:	1f01dc0e 	svcne	0x0001dc0e
    2f58:	00000073 	andeq	r0, r0, r3, ror r0
    2f5c:	112a5600 			; <UNDEFINED> instruction: 0x112a5600
    2f60:	0f0b0000 	svceq	0x000b0000
    2f64:	03010101 	movweq	r0, #4353	; 0x1101
    2f68:	00106754 	andseq	r6, r0, r4, asr r7
    2f6c:	01ed0c00 	mvneq	r0, r0, lsl #24
    2f70:	73540301 	cmpvc	r4, #67108864	; 0x4000000
	plugch ();
    2f74:	0c000013 	stceq	0, cr0, [r0], {19}
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2f78:	030101d6 	movweq	r0, #4566	; 0x11d6
    2f7c:	00103c52 	andseq	r3, r0, r2, asr ip
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2f80:	04400600 	strbeq	r0, [r0], #-1536	; 0xfffffa00
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2f84:	e7030101 	str	r0, [r3, -r1, lsl #2]
    2f88:	53000012 	movwpl	r0, #18
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2f8c:	000011a7 	andeq	r1, r0, r7, lsr #3
}
    2f90:	24044006 	strcs	r4, [r4], #-6
    2f94:	00000073 	andeq	r0, r0, r3, ror r0
    2f98:	0fd55200 	svceq	0x00d55200
    2f9c:	91060000 	mrsls	r0, (UNDEF: 6)
    2fa0:	03010103 	movweq	r0, #4355	; 0x1103
    2fa4:	00001311 	andeq	r1, r0, r1, lsl r3
    2fa8:	0011a753 	andseq	sl, r1, r3, asr r7
    2fac:	03910600 	orrseq	r0, r1, #0, 12
    2fb0:	00007317 	andeq	r7, r0, r7, lsl r3
    2fb4:	11015300 	mrsne	r5, SP_irq
    2fb8:	91060000 	mrsls	r0, (UNDEF: 6)
    2fbc:	00732a03 	rsbseq	r2, r3, r3, lsl #20
    2fc0:	52000000 	andpl	r0, r0, #0
    2fc4:	000013fa 	strdeq	r1, [r0], -sl
    2fc8:	01030c06 	tsteq	r3, r6, lsl #24
    2fcc:	133b0301 	teqne	fp, #67108864	; 0x4000000
    2fd0:	a7530000 	ldrbge	r0, [r3, -r0]
    2fd4:	06000011 			; <UNDEFINED> instruction: 0x06000011
    2fd8:	7318030c 	tstvc	r8, #12, 6	; 0x30000000
    2fdc:	53000000 	movwpl	r0, #0
    2fe0:	00001101 	andeq	r1, r0, r1, lsl #2
    2fe4:	2b030c06 	blcs	c6004 <__ccfg+0xa605c>
    2fe8:	00000073 	andeq	r0, r0, r3, ror r0
    2fec:	10f25200 	rscsne	r5, r2, r0, lsl #4
    2ff0:	e7060000 	str	r0, [r6, -r0]
    2ff4:	03010101 	movweq	r0, #4353	; 0x1101
    2ff8:	00001358 	andeq	r1, r0, r8, asr r3
    2ffc:	0011a753 	andseq	sl, r1, r3, asr r7
    3000:	01e70600 	mvneq	r0, r0, lsl #12
    3004:	00007319 	andeq	r7, r0, r9, lsl r3
    3008:	35520000 	ldrbcc	r0, [r2, #-0]
    300c:	06000012 			; <UNDEFINED> instruction: 0x06000012
    3010:	010101ba 			; <UNDEFINED> instruction: 0x010101ba
    3014:	00137503 	andseq	r7, r3, r3, lsl #10
    3018:	11a75300 			; <UNDEFINED> instruction: 0x11a75300
    301c:	ba060000 	blt	183024 <__ccfg+0x16307c>
    3020:	00731501 	rsbseq	r1, r3, r1, lsl #10
    3024:	52000000 	andpl	r0, r0, #0
    3028:	0000131d 	andeq	r1, r0, sp, lsl r3
    302c:	01013906 	tsteq	r1, r6, lsl #18
    3030:	13ac0301 			; <UNDEFINED> instruction: 0x13ac0301
    3034:	a7530000 	ldrbge	r0, [r3, -r0]
    3038:	06000011 			; <UNDEFINED> instruction: 0x06000011
    303c:	731b0139 	tstvc	fp, #1073741838	; 0x4000000e
    3040:	53000000 	movwpl	r0, #0
    3044:	0000108f 	andeq	r1, r0, pc, lsl #1
    3048:	2e013906 	vmlacs.f16	s6, s2, s12	; <UNPREDICTABLE>
    304c:	00000073 	andeq	r0, r0, r3, ror r0
    3050:	00107b53 	andseq	r7, r0, r3, asr fp
    3054:	013a0600 	teqeq	sl, r0, lsl #12
    3058:	0000731b 	andeq	r7, r0, fp, lsl r3
    305c:	40520000 	subsmi	r0, r2, r0
    3060:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
    3064:	01010284 	smlabbeq	r1, r4, r2, r0
    3068:	0013c903 	andseq	ip, r3, r3, lsl #18
    306c:	110e5300 	mrsne	r5, ELR_hyp
    3070:	84040000 	strhi	r0, [r4], #-0
    3074:	00731e02 	rsbseq	r1, r3, r2, lsl #28
    3078:	52000000 	andpl	r0, r0, #0
strand (__outserial, const char*)
    307c:	00000f3d 	andeq	r0, r0, sp, lsr pc
    3080:	01020604 	tsteq	r2, r4, lsl #12
    3084:	13f30301 	mvnsne	r0, #67108864	; 0x4000000
    3088:	0e530000 	cdpeq	0, 5, cr0, cr3, cr0, {0}
endstrand
    308c:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    3090:	73230206 			; <UNDEFINED> instruction: 0x73230206
	ptr = data;
    3094:	53000000 	movwpl	r0, #0
    3098:	0000141d 	andeq	r1, r0, sp, lsl r4
	if (*ptr)
    309c:	37020604 	strcc	r0, [r2, -r4, lsl #12]
		len = strlen (ptr);
    30a0:	00000073 	andeq	r0, r0, r3, ror r0
    30a4:	12b15200 	adcsne	r5, r1, #0, 4
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    30a8:	54040000 	strpl	r0, [r4], #-0
    30ac:	03010101 	movweq	r0, #4353	; 0x1101
    30b0:	00001410 	andeq	r1, r0, r0, lsl r4
    30b4:	00110e53 	andseq	r0, r1, r3, asr lr
    30b8:	01540400 	cmpeq	r4, r0, lsl #8
	len -= quant;
    30bc:	00007319 	andeq	r7, r0, r9, lsl r3
    30c0:	be520000 	cdplt	0, 5, cr0, cr2, cr0, {0}
    30c4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
	if (len == 0) {
    30c8:	0101011e 	tsteq	r1, lr, lsl r1
		ufree (data);
    30cc:	00142d03 	andseq	r2, r4, r3, lsl #26
		finish;
    30d0:	110e5300 	mrsne	r5, ELR_hyp
    30d4:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    30d8:	00731701 	rsbseq	r1, r3, r1, lsl #14
    30dc:	56000000 	strpl	r0, [r0], -r0
    30e0:	00001143 	andeq	r1, r0, r3, asr #2
    30e4:	01046309 	tsteq	r4, r9, lsl #6
    30e8:	ab560301 	blge	1583cf4 <__ccfg+0x1563d4c>
strand (__inserial, address)
    30ec:	09000010 	stmdbeq	r0, {r4}
    30f0:	01010454 	tsteq	r1, r4, asr r4
    30f4:	10c45603 	sbcne	r5, r4, r3, lsl #12
    30f8:	2a090000 	bcs	243100 <__ccfg+0x223158>
    30fc:	03010102 	movweq	r0, #4354	; 0x1102
	if (__inpline != NULL)
    3100:	00140852 	andseq	r0, r4, r2, asr r8
    3104:	01680900 	cmneq	r8, r0, lsl #18
		finish;
    3108:	6b030101 	blvs	c3514 <__ccfg+0xa356c>
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    310c:	53000014 	movwpl	r0, #20
    3110:	000010d0 	ldrdeq	r1, [r0], -r0
    3114:	1f016809 	svcne	0x00016809
    3118:	00000073 	andeq	r0, r0, r3, ror r0
		umwait (IM_INIT);
    311c:	100a5600 	andne	r5, sl, r0, lsl #12
		release;
    3120:	32090000 	andcc	r0, r9, #0
	savedata (data);
    3124:	03010101 	movweq	r0, #4353	; 0x1101
	len = MAX_LINE_LENGTH;
    3128:	000d4459 	andeq	r4, sp, r9, asr r4
	...
	io (IM_READ, __cport, READ, ptr, 1);
    3134:	359c0100 	ldrcc	r0, [ip, #256]	; 0x100
    3138:	00000d58 	andeq	r0, r0, r8, asr sp
	if (ptr == (char*) data) { // new line
    313c:	000007e8 	andeq	r0, r0, r8, ror #15
    3140:	121f0000 	andsne	r0, pc, #0
		if (*ptr == '\0') { // bin cmd
    3144:	00030000 	andeq	r0, r3, r0
			proceed (IM_BIN);
    3148:	00000a03 	andeq	r0, r0, r3, lsl #20
    314c:	00a30104 	adceq	r0, r3, r4, lsl #2
		if (*ptr < 0x20)
    3150:	a80c0000 	stmdage	ip, {}	; <UNPREDICTABLE>
    3154:	f7000015 			; <UNDEFINED> instruction: 0xf7000015
			proceed (IM_READ);
    3158:	d000000d 	andle	r0, r0, sp
    315c:	00000007 	andeq	r0, r0, r7
	if (*ptr == '\n' || *ptr == '\r') {
    3160:	2b000000 	blcs	3168 <__inserial+0x7c>
    3164:	02000022 	andeq	r0, r0, #34	; 0x22
    3168:	0c580601 	mrrceq	6, 0, r0, r8, cr1
		*ptr = '\0';
    316c:	02020000 	andeq	r0, r2, #0
		__inpline = (char*)data;
    3170:	000a6605 	andeq	r6, sl, r5, lsl #12
		finish;
    3174:	2b8e0300 	blcs	fe383d7c <_estack+0xde37ed7c>
	if (len) {
    3178:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
		ptr++;
    317c:	00003f18 	andeq	r3, r0, r8, lsl pc
    3180:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
		len--;
    3184:	000007f8 	strdeq	r0, [r0], -r8
	proceed (IM_READ);
    3188:	f3050802 	vsub.i8	d0, d5, d2
	io (IM_BIN, __cport, READ, ptr, 1);
    318c:	03000007 	movweq	r0, #7
    3190:	00002a09 	andeq	r2, r0, r9, lsl #20
    3194:	59182e03 	ldmdbpl	r8, {r0, r1, r9, sl, fp, sp}
    3198:	02000000 	andeq	r0, r0, #0
    319c:	0c560801 	mrrceq	8, 0, r0, r6, cr1
	len -= 2;
    31a0:	ff030000 			; <UNDEFINED> instruction: 0xff030000
	if (len > *ptr + 1) // 1 for 0x04
    31a4:	0300002d 	movweq	r0, #45	; 0x2d
    31a8:	006c1931 	rsbeq	r1, ip, r1, lsr r9
		len = *ptr + 1;
    31ac:	02020000 	andeq	r0, r2, #0
    31b0:	000d5307 	andeq	r5, sp, r7, lsl #6
	ptr++;
    31b4:	29a10300 	stmibcs	r1!, {r8, r9}
	quant = io (IM_BINL, __cport, READ, ptr, len);
    31b8:	34030000 	strcc	r0, [r3], #-0
    31bc:	00007f19 	andeq	r7, r0, r9, lsl pc
    31c0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    31c4:	00000428 	andeq	r0, r0, r8, lsr #8
    31c8:	23070802 	movwcs	r0, #30722	; 0x7802
    31cc:	04000004 	streq	r0, [r0], #-4
	len -= quant;
    31d0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
		__inpline = (char*)data;
    31d4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
		finish;
    31d8:	00042d07 	andeq	r2, r4, r7, lsl #26
	ptr += quant;
    31dc:	05190300 	ldreq	r0, [r9, #-768]	; 0xfffffd00
    31e0:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
endstrand
    31e4:	0000a71b 	andeq	sl, r0, fp, lsl r7
    31e8:	0b8b0500 	bleq	fe2c45f0 <_estack+0xde2bf5f0>
	proceed (IM_BINL);
    31ec:	0b040000 	bleq	1031f4 <__ccfg+0xe324c>
endstrand
    31f0:	0000bf00 	andeq	fp, r0, r0, lsl #30
    31f4:	08680600 	stmdaeq	r8!, {r9, sl}^
    31f8:	00bf0000 	adcseq	r0, pc, r0
    31fc:	01000000 	mrseq	r0, (UNDEF: 0)
    3200:	03040700 	movweq	r0, #18176	; 0x4700
    3204:	00000b8d 	andeq	r0, r0, sp, lsl #23
		if (res && (d < n))
    3208:	9b186304 	blls	61be20 <__ccfg+0x5fbe78>
    320c:	03000000 	movweq	r0, #0
    3210:	00001315 	andeq	r1, r0, r5, lsl r3
    3214:	4d122605 	ldcmi	6, cr2, [r2, #-20]	; 0xffffffec
			res [d] = (char) c;
    3218:	03000000 	movweq	r0, #0
		d++;
    321c:	000028e8 	andeq	r2, r0, r8, ror #17
    3220:	60122705 	andsvs	r2, r2, r5, lsl #14
    3224:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3228:	000000d9 	ldrdeq	r0, [r0], -r9
    322c:	0000d909 	andeq	sp, r0, r9, lsl #18
    3230:	13b90300 			; <UNDEFINED> instruction: 0x13b90300
				enci (10000);
    3234:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3238:	00003312 	andeq	r3, r0, r2, lsl r3
    323c:	1daf0300 	stcne	3, cr0, [pc]	; 3244 <__pi_vfparse+0x1c>
	d = 0;
    3240:	2b050000 	blcs	143248 <__ccfg+0x1232a0>
		c = *fm++;
    3244:	00004d12 	andeq	r4, r0, r2, lsl sp
		if (c == '\\') {
    3248:	00fb0900 	rscseq	r0, fp, r0, lsl #18
			if ((c = *fm++) == '\0') {
    324c:	3a030000 	bcc	c3254 <__ccfg+0xa32ac>
    3250:	05000029 	streq	r0, [r0, #-41]	; 0xffffffd7
				outc ('\\');
    3254:	0073122c 	rsbseq	r1, r3, ip, lsr #4
			if ((c = *fm++) == '\0') {
    3258:	0c080000 	stceq	0, cr0, [r8], {-0}
				outc ('\\');
    325c:	03000001 	movweq	r0, #1
    3260:	00000641 	andeq	r0, r0, r1, asr #12
			outc (c);
    3264:	73122d05 	tstvc	r2, #320	; 0x140
    3268:	03000000 	movweq	r0, #0
			if (c == '\0')
    326c:	00000baf 	andeq	r0, r0, pc, lsr #23
    3270:	35102e05 	ldrcc	r2, [r0, #-3589]	; 0xfffff1fb
			outc (c);
    3274:	0a000001 	beq	3280 <__pi_vfparse+0x58>
				outc (val);
    3278:	0000d904 	andeq	sp, r0, r4, lsl #18
				val = (word) va_arg (ap, aword);
    327c:	05080b00 	streq	r0, [r8, #-2816]	; 0xfffff500
		if (c == '%') {
    3280:	01c90932 	biceq	r0, r9, r2, lsr r9
    3284:	2b0c0000 	blcs	30328c <__ccfg+0x2e32e4>
			c = *fm++;
    3288:	05000000 	streq	r0, [r0, #-0]
			switch (c) {
    328c:	00fb0734 	rscseq	r0, fp, r4, lsr r7
    3290:	01010000 	mrseq	r0, (UNDEF: 1)
    3294:	470c0007 	strmi	r0, [ip, -r7]
    3298:	05000006 	streq	r0, [r0, #-6]
    329c:	00fb0335 	rscseq	r0, fp, r5, lsr r3
    32a0:	01010000 	mrseq	r0, (UNDEF: 1)
    32a4:	de0c0006 	cdple	0, 0, cr0, cr12, cr6, {0}
    32a8:	05000002 	streq	r0, [r0, #-2]
				outc ('%');
    32ac:	00fb0336 	rscseq	r0, fp, r6, lsr r3
    32b0:	01010000 	mrseq	r0, (UNDEF: 1)
				outc (c);
    32b4:	b20c0005 	andlt	r0, ip, #5
    32b8:	05000006 	streq	r0, [r0, #-6]
    32bc:	00fb0337 	rscseq	r0, fp, r7, lsr r3
				if (c == '\0')
    32c0:	01010000 	mrseq	r0, (UNDEF: 1)
				return d;
    32c4:	9a0c0004 	bls	3032dc <__ccfg+0x2e3334>
}
    32c8:	0500000a 	streq	r0, [r0, #-10]
    32cc:	00fb0338 	rscseq	r0, fp, r8, lsr r3
			switch (c) {
    32d0:	04010000 	streq	r0, [r1], #-0
    32d4:	560d0000 	strpl	r0, [sp], -r0
    32d8:	05000006 	streq	r0, [r0, #-6]
				for (i = 12; ; i -= 4) {
    32dc:	00fb073a 	rscseq	r0, fp, sl, lsr r7
				val = (word) va_arg (ap, aword);
    32e0:	0d010000 	stceq	0, cr0, [r1, #-0]
						[ (val >> i) & 0xf ]);
    32e4:	000008f6 	strdeq	r0, [r0], -r6
    32e8:	fb033c05 	blx	d2306 <__ccfg+0xb235e>
    32ec:	02000000 	andeq	r0, r0, #0
					outc (__pi_hex_enc_table
    32f0:	000f270d 	andeq	r2, pc, sp, lsl #14
    32f4:	033d0500 	teqeq	sp, #0, 10
					if (i == 0)
    32f8:	000000fb 	strdeq	r0, [r0], -fp
    32fc:	090e0d03 	stmdbeq	lr, {r0, r1, r8, sl, fp}
				for (i = 12; ; i -= 4) {
    3300:	3f050000 	svccc	0x00050000
				val = (word) va_arg (ap, aword);
    3304:	00010c08 	andeq	r0, r1, r8, lsl #24
				if (c == 'd' && (val & 0x8000) != 0) {
    3308:	03000400 	movweq	r0, #1024	; 0x400
				val = (word) va_arg (ap, aword);
    330c:	00000314 	andeq	r0, r0, r4, lsl r3
				if (c == 'd' && (val & 0x8000) != 0) {
    3310:	3b034105 	blcc	d372c <__ccfg+0xb3784>
    3314:	09000001 	stmdbeq	r0, {r0}
					outc ('-');
    3318:	000001c9 	andeq	r0, r0, r9, asr #3
    331c:	0006b90e 	andeq	fp, r6, lr, lsl #18
					val = (~val) + 1;
    3320:	1a430500 	bne	10c4728 <__ccfg+0x10a4780>
    3324:	000001d5 	ldrdeq	r0, [r0], -r5
				for (i = 12; ; i -= 4) {
    3328:	970e0101 	strls	r0, [lr, -r1, lsl #2]
				enci (10000);
    332c:	05000001 	streq	r0, [r0, #-1]
    3330:	01f60e45 	mvnseq	r0, r5, asr #28
    3334:	01010000 	mrseq	r0, (UNDEF: 1)
    3338:	01fc040a 	mvnseq	r0, sl, lsl #8
    333c:	01020000 	mrseq	r0, (UNDEF: 2)
    3340:	000c5f08 	andeq	r5, ip, r8, lsl #30
    3344:	01fc0800 	mvnseq	r0, r0, lsl #16
    3348:	1d0e0000 	stcne	0, cr0, [lr, #-0]
    334c:	05000003 	streq	r0, [r0, #-3]
    3350:	01f61e45 	mvnseq	r1, r5, asr #28
    3354:	01010000 	mrseq	r0, (UNDEF: 1)
    3358:	8f06080b 	svchi	0x0006080b
    335c:	00024709 	andeq	r4, r2, r9, lsl #14
    3360:	0cc50d00 	stcleq	13, cr0, [r5], {0}
    3364:	90060000 	andls	r0, r6, r0
    3368:	0000730b 	andeq	r7, r0, fp, lsl #6
    336c:	620d0000 	andvs	r0, sp, #0
    3370:	06000010 			; <UNDEFINED> instruction: 0x06000010
				if (c == 'd' || c == 'u') {
    3374:	00d90891 	smullseq	r0, r9, r1, r8
    3378:	0d040000 	stceq	0, cr0, [r4, #-0]
					if (c == 'd' &&
    337c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
					val = va_arg (ap, lword);
    3380:	07109206 	ldreq	r9, [r0, -r6, lsl #4]
					fm++;
    3384:	06000001 	streq	r0, [r0], -r1
					if (c == 'd' &&
    3388:	0cb90300 	ldceq	3, cr0, [r9]
    338c:	93060000 	movwls	r0, #24576	; 0x6000
						outc ('-');
    3390:	00021603 	andeq	r1, r2, r3, lsl #12
    3394:	02470f00 	subeq	r0, r7, #0, 30
						val = (~val) + 1;
    3398:	025e0000 	subseq	r0, lr, #0
				enci (10000);
    339c:	00100000 	andseq	r0, r0, r0
					enci (1000000000UL);
    33a0:	0009380e 	andeq	r3, r9, lr, lsl #16
    33a4:	0f990600 	svceq	0x00990600
    33a8:	00000253 	andeq	r0, r0, r3, asr r2
    33ac:	010b0101 	tsteq	fp, r1, lsl #2
    33b0:	96099107 	strls	r9, [r9], -r7, lsl #2
    33b4:	0c000002 	stceq	0, cr0, [r0], {2}
    33b8:	00000915 	andeq	r0, r0, r5, lsl r9
    33bc:	fb079307 	blx	1e7fe2 <__ccfg+0x1c803a>
    33c0:	01000000 	mrseq	r0, (UNDEF: 0)
    33c4:	0c000107 	stfeqs	f0, [r0], {7}
    33c8:	000005c7 	andeq	r0, r0, r7, asr #11
    33cc:	fb039407 	blx	e83f2 <__ccfg+0xc844a>
    33d0:	01000000 	mrseq	r0, (UNDEF: 0)
    33d4:	00000001 	andeq	r0, r0, r1
    33d8:	000aa603 	andeq	sl, sl, r3, lsl #12
    33dc:	03960700 	orrseq	r0, r6, #0, 14
    33e0:	0000026c 	andeq	r0, r0, ip, ror #4
				} else if (c == 'x') {
    33e4:	00029608 	andeq	r9, r2, r8, lsl #12
					for (i = 28; ; i -= 4) {
    33e8:	02a20f00 	adceq	r0, r2, #0, 30
					val = va_arg (ap, lword);
    33ec:	02b20000 	adcseq	r0, r2, #0
							[ (val >> i) & 0xf ]);
    33f0:	00100000 	andseq	r0, r0, r0
    33f4:	0002a708 	andeq	sl, r2, r8, lsl #14
						outc (__pi_hex_enc_table
    33f8:	03ac0e00 			; <UNDEFINED> instruction: 0x03ac0e00
    33fc:	9c070000 	stcls	0, cr0, [r7], {-0}
    3400:	0002b217 	andeq	fp, r2, r7, lsl r2
						if (i == 0)
    3404:	0f010100 	svceq	0x00010100
    3408:	000000e5 	andeq	r0, r0, r5, ror #1
					for (i = 28; ; i -= 4) {
    340c:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
					outc ('%');
    3410:	c5080010 	strgt	r0, [r8, #-16]
    3414:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    3418:	00000609 	andeq	r0, r0, r9, lsl #12
					outc ('l');
    341c:	d0130608 	andsle	r0, r3, r8, lsl #12
    3420:	01000002 	tsteq	r0, r2
				val = (word) va_arg (ap, aword);
    3424:	08d80e01 	ldmeq	r8, {r0, r9, sl, fp}^
				outc (val);
    3428:	c3060000 	movwgt	r0, #24576	; 0x6000
    342c:	00010c0e 	andeq	r0, r1, lr, lsl #24
				while (*st != '\0') {
    3430:	11010100 	mrsne	r0, (UNDEF: 17)
    3434:	00000c6d 	andeq	r0, r0, sp, ror #24
    3438:	10016e09 	andne	r6, r1, r9, lsl #28
    343c:	000002fe 	strdeq	r0, [r0], -lr
					outc (*st);
    3440:	0304040a 	movweq	r0, #17418	; 0x440a
    3444:	01120000 	tsteq	r2, r0
					st++;
    3448:	00000310 	andeq	r0, r0, r0, lsl r3
		c = *fm++;
    344c:	0000d913 	andeq	sp, r0, r3, lsl r9
    3450:	030f0000 	movweq	r0, #61440	; 0xf000
    3454:	1b000002 	blne	3464 <vform+0xc>
char *vform (char *res, const char *fm, va_list aq) {
    3458:	10000003 	andne	r0, r0, r3
    345c:	03100800 	tsteq	r0, #0, 16
	if (res != NULL) {
    3460:	e1140000 	tst	r4, r0
		__pi_vfparse (res, MAX_WORD, fm, aq);
    3464:	09000009 	stmdbeq	r0, {r0, r3}
    3468:	1b16017f 	blne	583a6c <__ccfg+0x563ac4>
    346c:	01000003 	tsteq	r0, r3
}
    3470:	03981401 	orrseq	r1, r8, #16777216	; 0x1000000
    3474:	82090000 	andhi	r0, r9, #0
	fml = strlen (fm) + 17;
    3478:	01181401 	tsteq	r8, r1, lsl #8
    347c:	01010000 	mrseq	r0, (UNDEF: 1)
    3480:	00037014 	andeq	r7, r3, r4, lsl r0
	if ((res = (char*) umalloc (fml)) == NULL)
    3484:	02d80900 	sbcseq	r0, r8, #0, 18
    3488:	00010c0e 	andeq	r0, r1, lr, lsl #24
    348c:	15010100 	strne	r0, [r1, #-256]	; 0xffffff00
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    3490:	03030908 	movweq	r0, #14600	; 0x3908
    3494:	00037409 	andeq	r7, r3, r9, lsl #8
    3498:	3c8e1600 	stccc	6, cr1, [lr], {0}
    349c:	07090000 	streq	r0, [r9, -r0]
		ufree (res);
    34a0:	00d90703 	sbcseq	r0, r9, r3, lsl #14
		goto Again;
    34a4:	16000000 	strne	r0, [r0], -r0
	if (buf == NULL || fmt == NULL)
    34a8:	00000fba 			; <UNDEFINED> instruction: 0x00000fba
int vscan (const char *buf, const char *fmt, va_list ap) {
    34ac:	08030809 	stmdaeq	r3, {r0, r3, fp}
	if (buf == NULL || fmt == NULL)
    34b0:	0000011d 	andeq	r0, r0, sp, lsl r1
    34b4:	04110004 	ldreq	r0, [r1], #-4
    34b8:	0900000a 	stmdbeq	r0, {r1, r3}
		    	    case 'u': scanu (lword); break;
    34bc:	4d030309 	stcmi	3, cr0, [r3, #-36]	; 0xffffffdc
			while (isspace (*buf)) buf++;
    34c0:	17000003 	strne	r0, [r0, -r3]
    34c4:	00000020 	andeq	r0, r0, r0, lsr #32
	while (*fmt != '\0') {
    34c8:	030b0930 	movweq	r0, #47408	; 0xb930
		if (*fmt++ != '%')
    34cc:	0003e408 	andeq	lr, r3, r8, lsl #8
		switch (*fmt++) {
    34d0:	1f111600 	svcne	0x00111600
    34d4:	14090000 	strne	r0, [r9], #-0
    34d8:	00d90803 	sbcseq	r0, r9, r3, lsl #16
    34dc:	16000000 	strne	r0, [r0], -r0
    34e0:	00000be2 	andeq	r0, r0, r2, ror #23
    34e4:	08031509 	stmdaeq	r3, {r0, r3, r8, sl, ip}
    34e8:	000000d9 	ldrdeq	r0, [r0], -r9
}
    34ec:	4c7b1602 	ldclmi	6, cr1, [fp], #-8
		switch (*fmt++) {
    34f0:	16090000 	strne	r0, [r9], -r0
    34f4:	02f10b03 	rscseq	r0, r1, #3072	; 0xc00
    34f8:	16040000 	strne	r0, [r4], -r0
    34fc:	00004741 	andeq	r4, r0, r1, asr #14
			while (isspace (*buf)) buf++;
    3500:	09031709 	stmdbeq	r3, {r0, r3, r8, r9, sl, ip}
    3504:	0000011d 	andeq	r0, r0, sp, lsl r1
    3508:	000f1608 	andeq	r1, pc, r8, lsl #12
    350c:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    3510:	03e40f03 	mvneq	r0, #3, 30
    3514:	160c0000 	strne	r0, [ip], -r0
			if (*buf == '\0')
    3518:	00000958 	andeq	r0, r0, r8, asr r9
			if (*buf != ',') {
    351c:	15031909 	strne	r1, [r3, #-2313]	; 0xfffff6f7
			sap = va_arg (ap, char*);
    3520:	000003f4 	strdeq	r0, [r0], -r4
			nc++;
    3524:	740f002c 	strvc	r0, [pc], #-44	; 352c <vscan+0x84>
			if (*buf != ',') {
    3528:	f4000003 	vst4.8	{d0-d3}, [r0], r3
				while (!isspace (*buf) && *buf != ',' &&
    352c:	18000003 	stmdane	r0, {r0, r1}
    3530:	00000094 	muleq	r0, r4, r0
    3534:	040a0003 	streq	r0, [sl], #-3
    3538:	00000381 	andeq	r0, r0, r1, lsl #7
    353c:	000bd711 	andeq	sp, fp, r1, lsl r7
    3540:	031c0900 	tsteq	ip, #0, 18
    3544:	0003811b 	andeq	r8, r3, fp, lsl r1
			while (isspace (*buf)) buf++;
    3548:	0bb71400 	bleq	fedc8550 <_estack+0xdedc3550>
    354c:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    3550:	04161403 	ldreq	r1, [r6], #-1027	; 0xfffffbfd
    3554:	01010000 	mrseq	r0, (UNDEF: 1)
    3558:	03fa040a 	mvnseq	r0, #167772160	; 0xa000000
			if (*buf == ',') buf++;
    355c:	0a0e0000 	beq	383564 <__ccfg+0x3635bc>
    3560:	0a000007 	beq	3584 <vscan+0xdc>
			*sap = '\0';
    3564:	00d9131d 	sbcseq	r1, r9, sp, lsl r3
			break;
    3568:	01010000 	mrseq	r0, (UNDEF: 1)
		    case 'd': scani (word); break;
    356c:	0002e50e 	andeq	lr, r2, lr, lsl #10
    3570:	1a1e0a00 	bne	785d78 <__ccfg+0x765dd0>
    3574:	000000ea 	andeq	r0, r0, sl, ror #1
    3578:	640e0101 	strvs	r0, [lr], #-257	; 0xfffffeff
    357c:	0a00000c 	beq	35b4 <vscan+0x10c>
    3580:	00ea241e 	rsceq	r2, sl, lr, lsl r4
    3584:	01010000 	mrseq	r0, (UNDEF: 1)
    3588:	000c820e 	andeq	r8, ip, lr, lsl #4
    358c:	14220a00 	strtne	r0, [r2], #-2560	; 0xfffff600
    3590:	00000416 	andeq	r0, r0, r6, lsl r4
    3594:	90030101 	andls	r0, r3, r1, lsl #2
    3598:	0a000014 	beq	35f0 <vscan+0x148>
    359c:	04600f44 	strbteq	r0, [r0], #-3908	; 0xfffff0bc
    35a0:	040a0000 	streq	r0, [sl], #-0
    35a4:	00000466 	andeq	r0, r0, r6, ror #8
    35a8:	008d0119 	addeq	r0, sp, r9, lsl r1
    35ac:	04800000 	streq	r0, [r0], #0
    35b0:	8d130000 	ldchi	0, cr0, [r3, #-0]
    35b4:	13000000 	movwne	r0, #0
    35b8:	000001f6 	strdeq	r0, [r0], -r6
    35bc:	00008d13 	andeq	r8, r0, r3, lsl sp
    35c0:	3e1a0000 	cdpcc	0, 1, cr0, cr10, cr0, {0}
    35c4:	01000003 	tsteq	r0, r3
    35c8:	0305070c 	movweq	r0, #22284	; 0x570c
    35cc:	200006ac 	andcs	r0, r0, ip, lsr #13
    35d0:	0016341b 	andseq	r3, r6, fp, lsl r4
    35d4:	07100100 	ldreq	r0, [r0, -r0, lsl #2]
    35d8:	0000010c 	andeq	r0, r0, ip, lsl #2
		    case 'u': scanu (word); break;
    35dc:	04030501 	streq	r0, [r3], #-1281	; 0xfffffaff
    35e0:	1a200000 	bne	8035e8 <__ccfg+0x7e3640>
    35e4:	00000446 	andeq	r0, r0, r6, asr #8
    35e8:	050d1a01 	streq	r1, [sp, #-2561]	; 0xfffff5ff
    35ec:	00058403 	andeq	r8, r5, r3, lsl #8
    35f0:	04540f20 	ldrbeq	r0, [r4], #-3872	; 0xfffff0e0
    35f4:	04bf0000 	ldrteq	r0, [pc], #0	; 35fc <vscan+0x154>
    35f8:	94180000 	ldrls	r0, [r8], #-0
    35fc:	00000000 	andeq	r0, r0, r0
    3600:	14c81c00 	strbne	r1, [r8], #3072	; 0xc00
    3604:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    3608:	0004af14 	andeq	sl, r4, r4, lsl pc
    360c:	88030500 	stmdahi	r3, {r8, sl}
    3610:	1a200005 	bne	80362c <__ccfg+0x7e3684>
    3614:	000001da 	ldrdeq	r0, [r0], -sl
    3618:	05132201 	ldreq	r2, [r3, #-513]	; 0xfffffdff
    361c:	0006b403 	andeq	fp, r6, r3, lsl #8
    3620:	04071a20 	streq	r1, [r7], #-2592	; 0xfffff5e0
		    case 'x': scanx (word); break;
    3624:	27010000 	strcs	r0, [r1, -r0]
    3628:	d003050d 	andle	r0, r3, sp, lsl #10
    362c:	1a200006 	bne	80364c <__ccfg+0x7e36a4>
    3630:	0000041c 	andeq	r0, r0, ip, lsl r4
    3634:	05073001 	streq	r3, [r7, #-1]
    3638:	0006b003 	andeq	fp, r6, r3
    363c:	042a1a20 	strteq	r1, [sl], #-2592	; 0xfffff5e0
    3640:	31010000 	mrscc	r0, (UNDEF: 1)
    3644:	b203050f 	andlt	r0, r3, #62914560	; 0x3c00000
    3648:	1a200006 	bne	803668 <__ccfg+0x7e36c0>
    364c:	00000438 	andeq	r0, r0, r8, lsr r4
    3650:	05193101 	ldreq	r3, [r9, #-257]	; 0xfffffeff
    3654:	0006bc03 	andeq	fp, r6, r3, lsl #24
    3658:	01290f20 			; <UNDEFINED> instruction: 0x01290f20
    365c:	05270000 	streq	r0, [r7, #-0]!
    3660:	94180000 	ldrls	r0, [r8], #-0
    3664:	03000000 	movweq	r0, #0
    3668:	13ae1b00 			; <UNDEFINED> instruction: 0x13ae1b00
    366c:	36010000 	strcc	r0, [r1], -r0
    3670:	0005170a 	andeq	r1, r5, sl, lsl #14
    3674:	03050100 	movweq	r0, #20736	; 0x5100
    3678:	200006c0 	andcs	r0, r0, r0, asr #13
    367c:	0003201a 	andeq	r2, r3, sl, lsl r0
    3680:	0c3f0100 	ldfeqs	f0, [pc], #-0	; 3688 <vscan+0x1e0>
    3684:	4f750305 	svcmi	0x00750305
    3688:	2f1a0000 	svccs	0x001a0000
    368c:	01000003 	tsteq	r0, r3
    3690:	03050d45 	movweq	r0, #23877	; 0x5d45
    3694:	00000000 	andeq	r0, r0, r0
    3698:	4901020b 	stmdbmi	r1, {r0, r1, r3, r9}
			switch (*fmt++) {
    369c:	00057a09 	andeq	r7, r5, r9, lsl #20
    36a0:	14bc0d00 	ldrtne	r0, [ip], #3328	; 0xd00
    36a4:	4a010000 	bmi	436ac <__ccfg+0x23704>
    36a8:	0000fb07 	andeq	pc, r0, r7, lsl #22
    36ac:	730d0000 	movwvc	r0, #53248	; 0xd000
    36b0:	01000016 	tsteq	r0, r6, lsl r0
		    	    case 'd': scani (lword); break;
    36b4:	00fb074b 	rscseq	r0, fp, fp, asr #14
    36b8:	00010000 	andeq	r0, r1, r0
    36bc:	00158203 	andseq	r8, r5, r3, lsl #4
    36c0:	034c0100 	movteq	r0, #49408	; 0xc100
    36c4:	00000556 	andeq	r0, r0, r6, asr r5
    36c8:	00057a0f 	andeq	r7, r5, pc, lsl #20
    36cc:	00059600 	andeq	r9, r5, r0, lsl #12
    36d0:	00941800 	addseq	r1, r4, r0, lsl #16
    36d4:	00000000 	andeq	r0, r0, r0
    36d8:	0015e21c 	andseq	lr, r5, ip, lsl r2
    36dc:	114e0100 	mrsne	r0, (UNDEF: 94)
    36e0:	00000586 	andeq	r0, r0, r6, lsl #11
    36e4:	05900305 	ldreq	r0, [r0, #773]	; 0x305
    36e8:	b80f2000 	stmdalt	pc, {sp}	; <UNPREDICTABLE>
    36ec:	b8000005 	stmdalt	r0, {r0, r2}
    36f0:	18000005 	stmdane	r0, {r0, r2}
    36f4:	00000094 	muleq	r0, r4, r0
    36f8:	040a0000 	streq	r0, [sl], #-0
    36fc:	0000011d 	andeq	r0, r0, sp, lsl r1
    3700:	0014dd1d 	andseq	sp, r4, sp, lsl sp
    3704:	02bd0100 	adcseq	r0, sp, #0, 2
    3708:	0005a80f 	andeq	sl, r5, pc, lsl #16
    370c:	98030500 	stmdals	r3, {r8, sl}
		    	    case 'x': scanx (lword); break;
    3710:	0f200005 	svceq	0x00200005
    3714:	0000011d 	andeq	r0, r0, sp, lsl r1
    3718:	000005e1 	andeq	r0, r0, r1, ror #11
    371c:	00009418 	andeq	r9, r0, r8, lsl r4
    3720:	1d000000 	stcne	0, cr0, [r0, #-0]
    3724:	0000153d 	andeq	r1, r0, sp, lsr r5
    3728:	0e02c201 	cdpeq	2, 0, cr12, cr2, cr1, {0}
    372c:	000005d1 	ldrdeq	r0, [r0], -r1
    3730:	05940305 	ldreq	r0, [r4, #773]	; 0x305
    3734:	8b1d2000 	blhi	74b73c <__ccfg+0x72b794>
    3738:	01000015 	tsteq	r0, r5, lsl r0
    373c:	d12602c2 	smlawtle	r6, r2, r2, r0
    3740:	05000005 	streq	r0, [r0, #-5]
    3744:	00058c03 	andeq	r8, r5, r3, lsl #24
    3748:	0e011e20 	cdpeq	14, 0, cr1, cr1, cr0, {1}
    374c:	01000016 	tsteq	r0, r6, lsl r0
    3750:	0107052f 	tsteq	r7, pc, lsr #10
    3754:	0000010c 	andeq	r0, r0, ip, lsl #2
    3758:	00001d28 	andeq	r1, r0, r8, lsr #26
    375c:	00001d4c 	andeq	r1, r0, ip, asr #26
    3760:	011f9c01 	tsteq	pc, r1, lsl #24
    3764:	00001571 	andeq	r1, r0, r1, ror r5
    3768:	06048201 	streq	r8, [r4], -r1, lsl #4
    376c:	001bec01 	andseq	lr, fp, r1, lsl #24
    3770:	001d2800 	andseq	r2, sp, r0, lsl #16
    3774:	0e9c0100 	fmleqe	f0, f4, f0
    3778:	20000007 	andcs	r0, r0, r7
    377c:	000015a3 	andeq	r1, r0, r3, lsr #11
		    	    case 'd': scani (lword); break;
    3780:	18048201 	stmdane	r4, {r0, r9, pc}
    3784:	0000070e 	andeq	r0, r0, lr, lsl #14
    3788:	000007fb 	strdeq	r0, [r0], -fp
    378c:	61762221 	cmnvs	r6, r1, lsr #4
    3790:	8701006c 	strhi	r0, [r1, -ip, rrx]
    3794:	010c0804 	tsteq	ip, r4, lsl #16
    3798:	083b0000 	ldmdaeq	fp!, {}	; <UNPREDICTABLE>
		    	    case 'u': scanu (lword); break;
    379c:	61230000 			; <UNDEFINED> instruction: 0x61230000
    37a0:	88010070 	stmdahi	r1, {r4, r5, r6}
    37a4:	00c10a04 	sbceq	r0, r1, r4, lsl #20
    37a8:	91020000 	mrsls	r0, (UNDEF: 2)
    37ac:	6362224c 	cmnvs	r2, #76, 4	; 0xc0000004
    37b0:	04890100 	streq	r0, [r9], #256	; 0x100
    37b4:	0000ef07 	andeq	lr, r0, r7, lsl #30
    37b8:	00087a00 	andeq	r7, r8, r0, lsl #20
    37bc:	00762200 	rsbseq	r2, r6, r0, lsl #4
    37c0:	07048a01 	streq	r8, [r4, -r1, lsl #20]
    37c4:	000000d9 	ldrdeq	r0, [r0], -r9
    37c8:	000008ae 	andeq	r0, r0, lr, lsr #17
    37cc:	00736924 	rsbseq	r6, r3, r4, lsr #18
    37d0:	07048b01 	streq	r8, [r4, -r1, lsl #22]
    37d4:	000000fb 	strdeq	r0, [r0], -fp
    37d8:	00168325 	andseq	r8, r6, r5, lsr #6
    37dc:	04b00100 	ldrteq	r0, [r0], #256	; 0x100
    37e0:	001cb801 	andseq	fp, ip, r1, lsl #16
		    	    case 'x': scanx (lword); break;
    37e4:	1c782600 	ldclne	6, cr2, [r8], #-0
    37e8:	1c940000 	ldcne	0, cr0, [r4], {0}
			if ((c = *buf++) == '\0')
    37ec:	06c00000 	strbeq	r0, [r0], r0
    37f0:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
			sap = va_arg (ap, char*);
    37f4:	049f0100 	ldreq	r0, [pc], #256	; 37fc <vscan+0x354>
			nc++;
    37f8:	0000ef0a 	andeq	lr, r0, sl, lsl #30
			break;
    37fc:	0008d700 	andeq	sp, r8, r0, lsl #14
			while (isspace (*buf)) buf++;
    3800:	88270000 	stmdahi	r7!, {}	; <UNPREDICTABLE>
    3804:	d9000007 	stmdble	r0, {r0, r1, r2}
    3808:	22000006 	andcs	r0, r0, #6
						*sap++ = *buf++;
    380c:	a9010064 	stmdbge	r1, {r2, r5, r6}
    3810:	010c0b04 	tsteq	ip, r4, lsl #22
			while (isspace (*buf)) buf++;
    3814:	08ea0000 	stmiaeq	sl!, {}^	; <UNPREDICTABLE>
    3818:	26000000 	strcs	r0, [r0], -r0
    381c:	00001d04 	andeq	r1, r0, r4, lsl #26
		return 0;
    3820:	00001d12 	andeq	r1, r0, r2, lsl sp
    3824:	000006f6 	strdeq	r0, [r0], -r6
		    case 'x': scanx (word); break;
    3828:	01007322 	tsteq	r0, r2, lsr #6
    382c:	f60b04c6 			; <UNDEFINED> instruction: 0xf60b04c6
		    	    case 'x': scanx (lword); break;
    3830:	13000001 	movwne	r0, #1
    3834:	00000009 	andeq	r0, r0, r9
    3838:	0010c128 	andseq	ip, r0, r8, lsr #2
    383c:	001c1a00 	andseq	r1, ip, r0, lsl #20
    3840:	0007b800 	andeq	fp, r7, r0, lsl #16
    3844:	04d90100 	ldrbeq	r0, [r9], #256	; 0x100
    3848:	10d42902 	sbcsne	r2, r4, r2, lsl #18
    384c:	00000000 	andeq	r0, r0, r0
    3850:	0203040a 	andeq	r0, r3, #167772160	; 0xa000000
    3854:	582a0000 	stmdapl	sl!, {}	; <UNPREDICTABLE>
    3858:	01000016 	tsteq	r0, r6, lsl r0
    385c:	010d0447 	tsteq	sp, r7, asr #8
    3860:	000016d0 	ldrdeq	r1, [r0], -r0
    3864:	000016e8 	andeq	r1, r0, r8, ror #13
    3868:	07539c01 	ldrbeq	r9, [r3, -r1, lsl #24]
    386c:	632b0000 			; <UNDEFINED> instruction: 0x632b0000
    3870:	04470100 	strbeq	r0, [r7], #-256	; 0xffffff00
    3874:	0000d919 	andeq	sp, r0, r9, lsl r9
    3878:	00092600 	andeq	r2, r9, r0, lsl #12
    387c:	10c12800 	sbcne	r2, r1, r0, lsl #16
    3880:	16d00000 	ldrbne	r0, [r0], r0
    3884:	07300000 	ldreq	r0, [r0, -r0]!
    3888:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    388c:	d4290204 	strtle	r0, [r9], #-516	; 0xfffffdfc
    3890:	00000010 	andeq	r0, r0, r0, lsl r0
    3894:	22012c00 	andcs	r2, r1, #0, 24
    3898:	01000015 	tsteq	r0, r5, lsl r0
    389c:	01060428 	tsteq	r6, r8, lsr #8
    38a0:	000000d9 	ldrdeq	r0, [r0], -r9
	...
    38ac:	07b49c01 	ldreq	r9, [r4, r1, lsl #24]!
    38b0:	6e2b0000 	cdpvs	0, 2, cr0, cr11, cr0, {0}
    38b4:	28010063 	stmdacs	r1, {r0, r1, r5, r6}
    38b8:	01291c04 			; <UNDEFINED> instruction: 0x01291c04
    38bc:	09390000 	ldmdbeq	r9!, {}	; <UNPREDICTABLE>
    38c0:	202d0000 	eorcs	r0, sp, r0
    38c4:	01000016 	tsteq	r0, r6, lsl r0
    38c8:	b8090431 	stmdalt	r9, {r0, r4, r5, sl}
    38cc:	57000005 	strpl	r0, [r0, -r5]
    38d0:	22000009 	andcs	r0, r0, #9
    38d4:	0078616d 	rsbseq	r6, r8, sp, ror #2
    38d8:	08043201 	stmdaeq	r4, {r0, r9, ip, sp}
    38dc:	0000011d 	andeq	r0, r0, sp, lsl r1
    38e0:	00000975 	andeq	r0, r0, r5, ror r9
    38e4:	0015382d 	andseq	r3, r5, sp, lsr #16
    38e8:	04320100 	ldrteq	r0, [r2], #-256	; 0xffffff00
    38ec:	00011d0d 	andeq	r1, r1, sp, lsl #26
    38f0:	00099300 	andeq	r9, r9, r0, lsl #6
    38f4:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    38f8:	00001613 	andeq	r1, r0, r3, lsl r6
    38fc:	06041501 	streq	r1, [r4], -r1, lsl #10
    3900:	0000d901 	andeq	sp, r0, r1, lsl #18
	...
    390c:	e39c0100 	orrs	r0, ip, #0, 2
    3910:	2b000007 	blcs	3934 <NOROM_OSCClockSourceGet>
    3914:	006e696d 	rsbeq	r6, lr, sp, ror #18
    3918:	1c041501 	cfstr32ne	mvfx1, [r4], {1}
    391c:	00000129 	andeq	r0, r0, r9, lsr #2
    3920:	000009bc 			; <UNDEFINED> instruction: 0x000009bc
    3924:	01011f00 	tsteq	r1, r0, lsl #30
    3928:	01000016 	tsteq	r0, r6, lsl r0
    392c:	01060402 	tsteq	r6, r2, lsl #8
    3930:	00001bd4 	ldrdeq	r1, [r0], -r4
    3934:	00001bec 	andeq	r1, r0, ip, ror #23
    3938:	080e9c01 	stmdaeq	lr, {r0, sl, fp, ip, pc}
    393c:	70200000 	eorvc	r0, r0, r0
    3940:	01000000 	mrseq	r0, (UNDEF: 0)
    3944:	d9190402 	ldmdble	r9, {r1, sl}
    3948:	cf000000 	svcgt	0x00000000
    394c:	00000009 	andeq	r0, r0, r9
    3950:	14af012c 	strtne	r0, [pc], #300	; 3958 <NOROM_OSCClockSourceGet+0x24>
    3954:	a3010000 	movwge	r0, #4096	; 0x1000
    3958:	b8010803 	stmdalt	r1, {r0, r1, fp}
    395c:	f8000005 			; <UNDEFINED> instruction: 0xf8000005
    3960:	a000001a 	andge	r0, r0, sl, lsl r0
    3964:	0100001b 	tsteq	r0, fp, lsl r0
    3968:	0008809c 	muleq	r8, ip, r0
    396c:	1d8e2000 	stcne	0, cr2, [lr]
    3970:	a3010000 	movwge	r0, #4096	; 0x1000
    3974:	00d91a03 	sbcseq	r1, r9, r3, lsl #20
    3978:	09e20000 	stmibeq	r2!, {}^	; <UNPREDICTABLE>
    397c:	202d0000 	eorcs	r0, sp, r0
    3980:	01000016 	tsteq	r0, r6, lsl r0
    3984:	b80903ab 	stmdalt	r9, {r0, r1, r3, r5, r7, r8, r9}
    3988:	f5000005 			; <UNDEFINED> instruction: 0xf5000005
    398c:	22000009 	andcs	r0, r0, #9
    3990:	01006363 	tsteq	r0, r3, ror #6
    3994:	b81103ab 	ldmdalt	r1, {r0, r1, r3, r5, r7, r8, r9}
    3998:	29000005 	stmdbcs	r0, {r0, r2}
    399c:	2d00000a 	stccs	0, cr0, [r0, #-40]	; 0xffffffd8
    39a0:	00001592 	muleq	r0, r2, r5
    39a4:	1503ab01 	strne	sl, [r3, #-2817]	; 0xfffff4ff
    39a8:	0000011d 	andeq	r0, r0, sp, lsl r1
    39ac:	00000a52 	andeq	r0, r0, r2, asr sl
    39b0:	001d8d2d 	andseq	r8, sp, sp, lsr #26
    39b4:	03af0100 			; <UNDEFINED> instruction: 0x03af0100
    39b8:	00011d08 	andeq	r1, r1, r8, lsl #26
    39bc:	000a6500 	andeq	r6, sl, r0, lsl #10
    39c0:	012e0000 			; <UNDEFINED> instruction: 0x012e0000
    39c4:	00001679 	andeq	r1, r0, r9, ror r6
    39c8:	06037c01 	streq	r7, [r3], -r1, lsl #24
    39cc:	089d0101 	ldmeq	sp, {r0, r8}
    39d0:	632f0000 			; <UNDEFINED> instruction: 0x632f0000
    39d4:	7c010068 	stcvc	0, cr0, [r1], {104}	; 0x68
    39d8:	05b81803 	ldreq	r1, [r8, #2051]!	; 0x803
    39dc:	2a000000 	bcs	39e4 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0xc>
    39e0:	000014c2 	andeq	r1, r0, r2, asr #9
    39e4:	0d034a01 	vstreq	s8, [r3, #-4]
    39e8:	00165001 	andseq	r5, r6, r1
    39ec:	0016d000 	andseq	sp, r6, r0
    39f0:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
    39f4:	2b000008 	blcs	3a1c <NOROM_RFCDoorbellSendTo+0x10>
    39f8:	01006863 	tsteq	r0, r3, ror #16
    39fc:	b81b034a 	ldmdalt	fp, {r1, r3, r6, r8, r9}
    3a00:	8f000005 	svchi	0x00000005
    3a04:	2d00000a 	stccs	0, cr0, [r0, #-40]	; 0xffffffd8
    3a08:	00001620 	andeq	r1, r0, r0, lsr #12
    3a0c:	09035701 	stmdbeq	r3, {r0, r8, r9, sl, ip, lr}
    3a10:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    3a14:	00000aad 	andeq	r0, r0, sp, lsr #21
    3a18:	00636322 	rsbeq	r6, r3, r2, lsr #6
    3a1c:	11035701 	tstne	r3, r1, lsl #14
    3a20:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    3a24:	00000aee 	andeq	r0, r0, lr, ror #21
    3a28:	f8013000 			; <UNDEFINED> instruction: 0xf8013000
    3a2c:	01000014 	tsteq	r0, r4, lsl r0
    3a30:	100602f0 	strdne	r0, [r6], -r0	; <UNPREDICTABLE>
    3a34:	6000001a 	andvs	r0, r0, sl, lsl r0
    3a38:	0100001a 	tsteq	r0, sl, lsl r0
    3a3c:	0009119c 	muleq	r9, ip, r1
    3a40:	154c2d00 	strbne	r2, [ip, #-3328]	; 0xfffff300
    3a44:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    3a48:	011d0802 	tsteq	sp, r2, lsl #16
    3a4c:	0b220000 	bleq	883a54 <__ccfg+0x863aac>
    3a50:	31000000 	mrscc	r0, (UNDEF: 0)
    3a54:	006f6901 	rsbeq	r6, pc, r1, lsl #18
    3a58:	06027901 	streq	r7, [r2], -r1, lsl #18
    3a5c:	0000ef01 	andeq	lr, r0, r1, lsl #30
    3a60:	00197400 	andseq	r7, r9, r0, lsl #8
    3a64:	001a1000 	andseq	r1, sl, r0
    3a68:	949c0100 	ldrls	r0, [ip], #256	; 0x100
    3a6c:	20000009 	andcs	r0, r0, r9
    3a70:	00001598 	muleq	r0, r8, r5
    3a74:	0f027901 	svceq	0x00027901
    3a78:	000000d9 	ldrdeq	r0, [r0], -r9
    3a7c:	00000b40 	andeq	r0, r0, r0, asr #22
    3a80:	7665642b 	strbtvc	r6, [r5], -fp, lsr #8
    3a84:	02790100 	rsbseq	r0, r9, #0, 2
    3a88:	0000d91b 	andeq	sp, r0, fp, lsl r9
    3a8c:	000b5e00 	andeq	r5, fp, r0, lsl #28
    3a90:	116a2000 	cmnne	sl, r0
    3a94:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    3a98:	00d92502 	sbcseq	r2, r9, r2, lsl #10
    3a9c:	0b7c0000 	bleq	1f03aa4 <__ccfg+0x1ee3afc>
    3aa0:	622b0000 	eorvs	r0, fp, #0
    3aa4:	01006675 	tsteq	r0, r5, ror r6
    3aa8:	f6360279 			; <UNDEFINED> instruction: 0xf6360279
    3aac:	9a000001 	bls	3ab8 <NOROM_RFCRfTrimRead+0x38>
    3ab0:	2b00000b 	blcs	3ae4 <NOROM_RFCRfTrimRead+0x64>
    3ab4:	006e656c 	rsbeq	r6, lr, ip, ror #10
    3ab8:	40027901 	andmi	r7, r2, r1, lsl #18
    3abc:	000000d9 	ldrdeq	r0, [r0], -r9
    3ac0:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
    3ac4:	74657222 	strbtvc	r7, [r5], #-546	; 0xfffffdde
    3ac8:	027b0100 	rsbseq	r0, fp, #0, 2
    3acc:	0000ef07 	andeq	lr, r0, r7, lsl #30
    3ad0:	000bd800 	andeq	sp, fp, r0, lsl #16
    3ad4:	011f0000 	tsteq	pc, r0
    3ad8:	0000155f 	andeq	r1, r0, pc, asr r5
    3adc:	06026901 	streq	r6, [r2], -r1, lsl #18
    3ae0:	00195001 	andseq	r5, r9, r1
    3ae4:	00197400 	andseq	r7, r9, r0, lsl #8
    3ae8:	cf9c0100 	svcgt	0x009c0100
    3aec:	2b000009 	blcs	3b18 <NOROM_RFCRfTrimRead+0x98>
    3af0:	01006672 	tsteq	r0, r2, ror r6
    3af4:	541e0269 	ldrpl	r0, [lr], #-617	; 0xfffffd97
    3af8:	0c000004 	stceq	0, cr0, [r0], {4}
    3afc:	2b00000c 	blcs	3b34 <NOROM_RFCRfTrimRead+0xb4>
    3b00:	00636f6c 	rsbeq	r6, r3, ip, ror #30
    3b04:	26026901 	strcs	r6, [r2], -r1, lsl #18
    3b08:	0000008d 	andeq	r0, r0, sp, lsl #1
    3b0c:	00000c35 	andeq	r0, r0, r5, lsr ip
    3b10:	8a011f00 	bhi	4b718 <__ccfg+0x2b770>
    3b14:	01000016 	tsteq	r0, r6, lsl r0
    3b18:	0106025f 	tsteq	r6, pc, asr r2
    3b1c:	00001942 	andeq	r1, r0, r2, asr #18
    3b20:	00001950 	andeq	r1, r0, r0, asr r9
    3b24:	0a169c01 	beq	5aab30 <__ccfg+0x58ab88>
    3b28:	9e200000 	cdpls	0, 2, cr0, cr0, cr0, {0}
    3b2c:	01000015 	tsteq	r0, r5, lsl r0
    3b30:	f619025f 			; <UNDEFINED> instruction: 0xf619025f
    3b34:	5e000001 	cdppl	0, 0, cr0, cr0, cr1, {0}
    3b38:	3200000c 	andcc	r0, r0, #12
    3b3c:	5f010063 	svcpl	0x00010063
    3b40:	01fc2402 	mvnseq	r2, r2, lsl #8
    3b44:	51010000 	mrspl	r0, (UNDEF: 1)
    3b48:	01006e2b 	tsteq	r0, fp, lsr #28
    3b4c:	8d2b025f 	sfmhi	f0, 4, [fp, #-380]!	; 0xfffffe84
    3b50:	7c000000 	stcvc	0, cr0, [r0], {-0}
    3b54:	0000000c 	andeq	r0, r0, ip
    3b58:	164c011f 			; <UNDEFINED> instruction: 0x164c011f
    3b5c:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    3b60:	2e010602 	cfmadd32cs	mvax0, mvfx0, mvfx1, mvfx2
    3b64:	42000019 	andmi	r0, r0, #25
    3b68:	01000019 	tsteq	r0, r9, lsl r0
    3b6c:	000a619c 	muleq	sl, ip, r1
    3b70:	159e2000 	ldrne	r2, [lr]
    3b74:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    3b78:	01f61902 	mvnseq	r1, r2, lsl #18
    3b7c:	0c8f0000 	stceq	0, cr0, [pc], {0}
    3b80:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    3b84:	01006372 	tsteq	r0, r2, ror r3
    3b88:	0e2b0259 	mcreq	2, 1, r0, cr11, cr9, {2}
    3b8c:	a2000007 	andge	r0, r0, #7
    3b90:	2b00000c 	blcs	3bc8 <NOROM_RFCRfTrimRead+0x148>
    3b94:	5901006e 	stmdbpl	r1, {r1, r2, r3, r5, r6}
    3b98:	008d3402 	addeq	r3, sp, r2, lsl #8
    3b9c:	0cc00000 	stcleq	0, cr0, [r0], {0}
    3ba0:	1f000000 	svcne	0x00000000
    3ba4:	0016c301 	andseq	ip, r6, r1, lsl #6
    3ba8:	02540100 	subseq	r0, r4, #0, 2
    3bac:	00000106 	andeq	r0, r0, r6, lsl #2
    3bb0:	00000000 	andeq	r0, r0, r0
    3bb4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3bb8:	00000aa6 	andeq	r0, r0, r6, lsr #21
    3bbc:	0100642b 	tsteq	r0, fp, lsr #8
    3bc0:	f61a0254 			; <UNDEFINED> instruction: 0xf61a0254
    3bc4:	d3000001 	movwle	r0, #1
    3bc8:	2b00000c 	blcs	3c00 <NOROM_RFCRTrim+0x30>
    3bcc:	54010073 	strpl	r0, [r1], #-115	; 0xffffff8d
    3bd0:	070e2902 	streq	r2, [lr, -r2, lsl #18]
    3bd4:	0ce60000 	stcleq	0, cr0, [r6]
    3bd8:	6e320000 	cdpvs	0, 3, cr0, cr2, cr0, {0}
    3bdc:	02540100 	subseq	r0, r4, #0, 2
    3be0:	00008d30 	andeq	r8, r0, r0, lsr sp
    3be4:	00520100 	subseq	r0, r2, r0, lsl #2
    3be8:	1576011f 	ldrbne	r0, [r6, #-287]!	; 0xfffffee1
    3bec:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    3bf0:	00010602 	andeq	r0, r1, r2, lsl #12
    3bf4:	00000000 	andeq	r0, r0, r0
    3bf8:	01000000 	mrseq	r0, (UNDEF: 0)
    3bfc:	000ade9c 	muleq	sl, ip, lr
    3c00:	00642b00 	rsbeq	r2, r4, r0, lsl #22
    3c04:	19024e01 	stmdbne	r2, {r0, r9, sl, fp, lr}
    3c08:	000001f6 	strdeq	r0, [r0], -r6
    3c0c:	00000cf9 	strdeq	r0, [r0], -r9
    3c10:	0100732b 	tsteq	r0, fp, lsr #6
    3c14:	0e28024e 	cdpeq	2, 2, cr0, cr8, cr14, {2}
    3c18:	17000007 	strne	r0, [r0, -r7]
    3c1c:	0000000d 	andeq	r0, r0, sp
    3c20:	169e011f 			; <UNDEFINED> instruction: 0x169e011f
    3c24:	47010000 	strmi	r0, [r1, -r0]
    3c28:	12010602 	andne	r0, r1, #2097152	; 0x200000
    3c2c:	2e000019 	mcrcs	0, 0, r0, cr0, cr9, {0}
    3c30:	01000019 	tsteq	r0, r9, lsl r0
    3c34:	000b259c 	muleq	fp, ip, r5
    3c38:	00642b00 	rsbeq	r2, r4, r0, lsl #22
    3c3c:	1a024701 	bne	95848 <__ccfg+0x758a0>
    3c40:	000001f6 	strdeq	r0, [r0], -r6
    3c44:	00000d2a 	andeq	r0, r0, sl, lsr #26
    3c48:	0100732b 	tsteq	r0, fp, lsr #6
    3c4c:	0e290247 	cdpeq	2, 2, cr0, cr9, cr7, {2}
    3c50:	48000007 	stmdami	r0, {r0, r1, r2}
    3c54:	2b00000d 	blcs	3c90 <NOROM_RFCRTrim+0xc0>
    3c58:	4701006e 	strmi	r0, [r1, -lr, rrx]
    3c5c:	008d3002 	addeq	r3, sp, r2
    3c60:	0d5b0000 	ldcleq	0, cr0, [fp, #-0]
    3c64:	1f000000 	svcne	0x00000000
    3c68:	0014a301 	andseq	sl, r4, r1, lsl #6
    3c6c:	02420100 	subeq	r0, r2, #0, 2
    3c70:	19020106 	stmdbne	r2, {r1, r2, r8}
    3c74:	19120000 	ldmdbne	r2, {}	; <UNPREDICTABLE>
    3c78:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c7c:	00000b5d 	andeq	r0, r0, sp, asr fp
    3c80:	0100642b 	tsteq	r0, fp, lsr #8
    3c84:	f6190242 			; <UNDEFINED> instruction: 0xf6190242
    3c88:	6e000001 	cdpvs	0, 0, cr0, cr0, cr1, {0}
    3c8c:	2b00000d 	blcs	3cc8 <NOROM_RFCRTrim+0xf8>
    3c90:	42010073 	andmi	r0, r1, #115	; 0x73
    3c94:	070e2802 	streq	r2, [lr, -r2, lsl #16]
    3c98:	0d810000 	stceq	0, cr0, [r1]
    3c9c:	2c000000 	stccs	0, cr0, [r0], {-0}
    3ca0:	00151601 	andseq	r1, r5, r1, lsl #12
    3ca4:	02390100 	eorseq	r0, r9, #0, 2
    3ca8:	008d0105 	addeq	r0, sp, r5, lsl #2
    3cac:	18f40000 	ldmne	r4!, {}^	; <UNPREDICTABLE>
    3cb0:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
    3cb4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3cb8:	00000b99 	muleq	r0, r9, fp
    3cbc:	0100732b 	tsteq	r0, fp, lsr #6
    3cc0:	0e1e0239 	mrceq	2, 0, r0, cr14, cr9, {1}
    3cc4:	9f000007 	svcls	0x00000007
    3cc8:	2200000d 	andcs	r0, r0, #13
    3ccc:	3b010069 	blcc	43e78 <__ccfg+0x23ed0>
    3cd0:	008d0602 	addeq	r0, sp, r2, lsl #12
    3cd4:	0dbd0000 	ldceq	0, cr0, [sp]
    3cd8:	2c000000 	stccs	0, cr0, [r0], {-0}
    3cdc:	00152f01 	andseq	r2, r5, r1, lsl #30
    3ce0:	022d0100 	eoreq	r0, sp, #0, 2
    3ce4:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
    3cf0:	9c010000 	stcls	0, cr0, [r1], {-0}
    3cf4:	00000be6 	andeq	r0, r0, r6, ror #23
    3cf8:	6e75662b 	cdpvs	6, 7, cr6, cr5, cr11, {1}
    3cfc:	022d0100 	eoreq	r0, sp, #0, 2
    3d00:	0002f118 	andeq	pc, r2, r8, lsl r1	; <UNPREDICTABLE>
    3d04:	000dd000 	andeq	sp, sp, r0
    3d08:	00692200 	rsbeq	r2, r9, r0, lsl #4
    3d0c:	0e022f01 	cdpeq	15, 0, cr2, cr2, cr1, {0}
    3d10:	00000416 	andeq	r0, r0, r6, lsl r4
    3d14:	00000dee 	andeq	r0, r0, lr, ror #27
    3d18:	01006322 	tsteq	r0, r2, lsr #6
    3d1c:	d9070230 	stmdble	r7, {r4, r5, r9}
    3d20:	0c000000 	stceq	0, cr0, [r0], {-0}
    3d24:	0000000e 	andeq	r0, r0, lr
    3d28:	1530012c 	ldrne	r0, [r0, #-300]!	; 0xfffffed4
    3d2c:	1f010000 	svcne	0x00010000
    3d30:	1d010702 	stcne	7, cr0, [r1, #-8]
    3d34:	d0000001 	andle	r0, r0, r1
    3d38:	f4000018 	vst4.8	{d0-d3}, [r0 :64], r8
    3d3c:	01000018 	tsteq	r0, r8, lsl r0
    3d40:	000c229c 	muleq	ip, ip, r2
    3d44:	75662b00 	strbvc	r2, [r6, #-2816]!	; 0xfffff500
    3d48:	1f01006e 	svcne	0x0001006e
    3d4c:	02f11802 	rscseq	r1, r1, #131072	; 0x20000
    3d50:	0e1f0000 	cdpeq	0, 1, cr0, cr15, cr0, {0}
    3d54:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    3d58:	02210100 	eoreq	r0, r1, #0, 2
    3d5c:	0004160e 	andeq	r1, r4, lr, lsl #12
    3d60:	00500100 	subseq	r0, r0, r0, lsl #2
    3d64:	163e012c 	ldrtne	r0, [lr], -ip, lsr #2
    3d68:	13010000 	movwne	r0, #4096	; 0x1000
    3d6c:	f1010902 			; <UNDEFINED> instruction: 0xf1010902
    3d70:	00000002 	andeq	r0, r0, r2
    3d74:	00000000 	andeq	r0, r0, r0
    3d78:	01000000 	mrseq	r0, (UNDEF: 0)
    3d7c:	000c609c 	muleq	ip, ip, r0
    3d80:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    3d84:	13010064 	movwne	r0, #4196	; 0x1064
    3d88:	011d1802 	tsteq	sp, r2, lsl #16
    3d8c:	0e480000 	cdpeq	0, 4, cr0, cr8, cr0, {0}
    3d90:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    3d94:	02150100 	andseq	r0, r5, #0, 2
    3d98:	0004160e 	andeq	r1, r4, lr, lsl #12
    3d9c:	000e6600 	andeq	r6, lr, r0, lsl #12
    3da0:	011f0000 	tsteq	pc, r0
    3da4:	00001696 	muleq	r0, r6, r6
    3da8:	0601f501 	streq	pc, [r1], -r1, lsl #10
    3dac:	00000001 	andeq	r0, r0, r1
    3db0:	00000000 	andeq	r0, r0, r0
    3db4:	c99c0100 	ldmibgt	ip, {r8}
    3db8:	2b00000c 	blcs	3df0 <TrimAfterColdResetWakeupFromShutDown+0xcc>
    3dbc:	006e7566 	rsbeq	r7, lr, r6, ror #10
    3dc0:	1701f501 	strne	pc, [r1, -r1, lsl #10]
    3dc4:	000002f1 	strdeq	r0, [r0], -r1
    3dc8:	00000e84 	andeq	r0, r0, r4, lsl #29
    3dcc:	6c657222 	sfmvs	f7, 2, [r5], #-136	; 0xffffff78
    3dd0:	01f90100 	mvnseq	r0, r0, lsl #2
    3dd4:	0000cd0a 	andeq	ip, r0, sl, lsl #26
    3dd8:	000ea200 	andeq	sl, lr, r0, lsl #4
    3ddc:	00692200 	rsbeq	r2, r9, r0, lsl #4
    3de0:	0e01fa01 	vmlaeq.f32	s30, s2, s2
    3de4:	00000416 	andeq	r0, r0, r6, lsl r4
    3de8:	00000eb5 			; <UNDEFINED> instruction: 0x00000eb5
    3dec:	01006a22 	tsteq	r0, r2, lsr #20
    3df0:	161201fa 			; <UNDEFINED> instruction: 0x161201fa
    3df4:	e9000004 	stmdb	r0, {r2}
    3df8:	2200000e 	andcs	r0, r0, #14
    3dfc:	fa01006b 	blx	43fb0 <__ccfg+0x24008>
    3e00:	04161601 	ldreq	r1, [r6], #-1537	; 0xfffff9ff
    3e04:	0f070000 	svceq	0x00070000
    3e08:	1f000000 	svcne	0x00000000
    3e0c:	0014d801 	andseq	sp, r4, r1, lsl #16
    3e10:	01d90100 	bicseq	r0, r9, r0, lsl #2
    3e14:	1aa80106 	bne	fea04234 <_estack+0xde9ff234>
    3e18:	1af80000 	bne	ffe03e20 <_estack+0xdfdfee20>
    3e1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e20:	00000d0e 	andeq	r0, r0, lr, lsl #26
    3e24:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    3e28:	01d90100 	bicseq	r0, r9, r0, lsl #2
    3e2c:	00011d12 	andeq	r1, r1, r2, lsl sp
    3e30:	000f2500 	andeq	r2, pc, r0, lsl #10
    3e34:	00692200 	rsbeq	r2, r9, r0, lsl #4
    3e38:	0e01dd01 	cdpeq	13, 0, cr13, cr1, cr1, {0}
    3e3c:	00000416 	andeq	r0, r0, r6, lsl r4
    3e40:	00000f59 	andeq	r0, r0, r9, asr pc
    3e44:	01006a24 	tsteq	r0, r4, lsr #20
    3e48:	161201dd 			; <UNDEFINED> instruction: 0x161201dd
    3e4c:	00000004 	andeq	r0, r0, r4
    3e50:	00149c2a 	andseq	r9, r4, sl, lsr #24
    3e54:	01c40100 	biceq	r0, r4, r0, lsl #2
    3e58:	1614010d 	ldrne	r0, [r4], -sp, lsl #2
    3e5c:	16500000 	ldrbne	r0, [r0], -r0
    3e60:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e64:	00000d63 	andeq	r0, r0, r3, ror #26
    3e68:	64697032 	strbtvs	r7, [r9], #-50	; 0xffffffce
    3e6c:	01c40100 	biceq	r0, r4, r0, lsl #2
    3e70:	00041621 	andeq	r1, r4, r1, lsr #12
    3e74:	2d500100 	ldfcse	f0, [r0, #-0]
    3e78:	0000166e 	andeq	r1, r0, lr, ror #12
    3e7c:	0801c801 	stmdaeq	r1, {r0, fp, lr, pc}
    3e80:	0000011d 	andeq	r0, r0, sp, lsl r1
    3e84:	00000f82 	andeq	r0, r0, r2, lsl #31
    3e88:	01006a22 	tsteq	r0, r2, lsr #20
    3e8c:	8d0601c9 	stfhis	f0, [r6, #-804]	; 0xfffffcdc
    3e90:	95000000 	strls	r0, [r0, #-0]
    3e94:	2300000f 	movwcs	r0, #15
    3e98:	ca010069 	bgt	44044 <__ccfg+0x2409c>
    3e9c:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    3ea0:	52010000 	andpl	r0, r1, #0
    3ea4:	46012c00 	strmi	r2, [r1], -r0, lsl #24
    3ea8:	01000016 	tsteq	r0, r6, lsl r0
    3eac:	010601b3 			; <UNDEFINED> instruction: 0x010601b3
    3eb0:	000000d9 	ldrdeq	r0, [r0], -r9
	...
    3ebc:	0da19c01 	stceq	12, cr9, [r1, #4]!
    3ec0:	702b0000 	eorvc	r0, fp, r0
    3ec4:	01006469 	tsteq	r0, r9, ror #8
    3ec8:	1d1301b3 	ldfnes	f0, [r3, #-716]	; 0xfffffd34
    3ecc:	a8000001 	stmdage	r0, {r0}
    3ed0:	2200000f 	andcs	r0, r0, #15
    3ed4:	b5010069 	strlt	r0, [r1, #-105]	; 0xffffff97
    3ed8:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    3edc:	0fc60000 	svceq	0x00c60000
    3ee0:	33000000 	movwcc	r0, #0
    3ee4:	0014bb01 	andseq	fp, r4, r1, lsl #22
    3ee8:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    3eec:	00000106 	andeq	r0, r0, r6, lsl #2
    3ef0:	00000000 	andeq	r0, r0, r0
    3ef4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ef8:	2cc6011f 	stfcse	f0, [r6], {31}
    3efc:	9a010000 	bls	43f04 <__ccfg+0x23f5c>
    3f00:	98010601 	stmdals	r1, {r0, r9, sl}
    3f04:	d0000018 	andle	r0, r0, r8, lsl r0
    3f08:	01000018 	tsteq	r0, r8, lsl r0
    3f0c:	000df09c 	muleq	sp, ip, r0
    3f10:	00642b00 	rsbeq	r2, r4, r0, lsl #22
    3f14:	12019a01 	andne	r9, r1, #4096	; 0x1000
    3f18:	000000d9 	ldrdeq	r0, [r0], -r9
    3f1c:	00000fe4 	andeq	r0, r0, r4, ror #31
    3f20:	00007020 	andeq	r7, r0, r0, lsr #32
    3f24:	019a0100 	orrseq	r0, sl, r0, lsl #2
    3f28:	0000d91a 	andeq	sp, r0, sl, lsl r9
    3f2c:	000ff700 	andeq	pc, pc, r0, lsl #14
    3f30:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    3f34:	000016ab 	andeq	r1, r0, fp, lsr #13
    3f38:	07018801 	streq	r8, [r1, -r1, lsl #16]
    3f3c:	00011d01 	andeq	r1, r1, r1, lsl #26
    3f40:	00187400 	andseq	r7, r8, r0, lsl #8
    3f44:	00189800 	andseq	r9, r8, r0, lsl #16
    3f48:	3e9c0100 	fmlcce	f0, f4, f0
    3f4c:	2b00000e 	blcs	3f8c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x74>
    3f50:	00646970 	rsbeq	r6, r4, r0, ror r9
    3f54:	18018801 	stmdane	r1, {r0, fp, pc}
    3f58:	0000011d 	andeq	r0, r0, sp, lsl r1
    3f5c:	0000100a 	andeq	r1, r0, sl
    3f60:	0074732b 	rsbseq	r7, r4, fp, lsr #6
    3f64:	22018801 	andcs	r8, r1, #65536	; 0x10000
    3f68:	000000d9 	ldrdeq	r0, [r0], -r9
    3f6c:	00001033 	andeq	r1, r0, r3, lsr r0
    3f70:	01006922 	tsteq	r0, r2, lsr #18
    3f74:	160e018a 	strne	r0, [lr], -sl, lsl #3
    3f78:	51000004 	tstpl	r0, r4
    3f7c:	00000010 	andeq	r0, r0, r0, lsl r0
    3f80:	1551011f 	ldrbne	r0, [r1, #-287]	; 0xfffffee1
    3f84:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    3f88:	00010601 	andeq	r0, r1, r1, lsl #12
    3f8c:	00000000 	andeq	r0, r0, r0
    3f90:	01000000 	mrseq	r0, (UNDEF: 0)
    3f94:	000e969c 	muleq	lr, ip, r6
    3f98:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    3f9c:	78010064 	stmdavc	r1, {r2, r5, r6}
    3fa0:	011d1b01 	tsteq	sp, r1, lsl #22
    3fa4:	106f0000 	rsbne	r0, pc, r0
    3fa8:	e3200000 	nop	{0}	; <UNPREDICTABLE>
    3fac:	01000015 	tsteq	r0, r5, lsl r0
    3fb0:	1d260178 	stfnes	f0, [r6, #-480]!	; 0xfffffe20
    3fb4:	82000001 	andhi	r0, r0, #1
    3fb8:	23000010 	movwcs	r0, #16
    3fbc:	7c010069 	stcvc	0, cr0, [r1], {105}	; 0x69
    3fc0:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    3fc4:	50010000 	andpl	r0, r1, r0
    3fc8:	01006a22 	tsteq	r0, r2, lsr #20
    3fcc:	8d07017d 	stfhis	f0, [r7, #-500]	; 0xfffffe0c
    3fd0:	a0000000 	andge	r0, r0, r0
    3fd4:	00000010 	andeq	r0, r0, r0, lsl r0
    3fd8:	1509011f 	strne	r0, [r9, #-287]	; 0xfffffee1
    3fdc:	66010000 	strvs	r0, [r1], -r0
    3fe0:	40010601 	andmi	r0, r1, r1, lsl #12
    3fe4:	74000018 	strvc	r0, [r0], #-24	; 0xffffffe8
    3fe8:	01000018 	tsteq	r0, r8, lsl r0
    3fec:	000edb9c 	muleq	lr, ip, fp
    3ff0:	15e33400 	strbne	r3, [r3, #1024]!	; 0x400
    3ff4:	66010000 	strvs	r0, [r1], -r0
    3ff8:	011d1a01 	tsteq	sp, r1, lsl #20
    3ffc:	50010000 	andpl	r0, r1, r0
    4000:	01006a22 	tsteq	r0, r2, lsr #20
    4004:	8d06016a 	stfhis	f0, [r6, #-424]	; 0xfffffe58
    4008:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    400c:	23000010 	movwcs	r0, #16
    4010:	6b010069 	blvs	441bc <__ccfg+0x24214>
    4014:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    4018:	52010000 	andpl	r0, r1, #0
    401c:	f7012e00 			; <UNDEFINED> instruction: 0xf7012e00
    4020:	01000015 	tsteq	r0, r5, lsl r0
    4024:	01060159 	tsteq	r6, r9, asr r1
    4028:	000f1101 	andeq	r1, pc, r1, lsl #2
    402c:	15e33500 	strbne	r3, [r3, #1280]!	; 0x500
    4030:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    4034:	011d1701 	tsteq	sp, r1, lsl #14
    4038:	70350000 	eorsvc	r0, r5, r0
    403c:	01000000 	mrseq	r0, (UNDEF: 0)
    4040:	d9230159 	stmdble	r3!, {r0, r3, r4, r6, r8}
    4044:	24000000 	strcs	r0, [r0], #-0
    4048:	5d01006a 	stcpl	0, cr0, [r1, #-424]	; 0xfffffe58
    404c:	00ef0701 	rsceq	r0, pc, r1, lsl #14
    4050:	1f000000 	svcne	0x00000000
    4054:	00154401 	andseq	r4, r5, r1, lsl #8
    4058:	01530100 	cmpeq	r3, r0, lsl #2
    405c:	17f80106 	ldrbne	r0, [r8, r6, lsl #2]!
    4060:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    4064:	9c010000 	stcls	0, cr0, [r1], {-0}
    4068:	00000f3c 	andeq	r0, r0, ip, lsr pc
    406c:	00007020 	andeq	r7, r0, r0, lsr #32
    4070:	01530100 	cmpeq	r3, r0, lsl #2
    4074:	0000d914 	andeq	sp, r0, r4, lsl r9
    4078:	0010d100 	andseq	sp, r0, r0, lsl #2
    407c:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    4080:	000014ce 	andeq	r1, r0, lr, asr #9
    4084:	07012c01 	streq	r2, [r1, -r1, lsl #24]
    4088:	00011d01 	andeq	r1, r1, r1, lsl #26
    408c:	001ba000 	andseq	sl, fp, r0
    4090:	001bd400 	andseq	sp, fp, r0, lsl #8
    4094:	9e9c0100 	fmllse	f0, f4, f0
    4098:	2000000f 	andcs	r0, r0, pc
    409c:	00000695 	muleq	r0, r5, r6
    40a0:	1a012c01 	bne	4f0ac <__ccfg+0x2f104>
    40a4:	000002f1 	strdeq	r0, [r0], -r1
    40a8:	000010e4 	andeq	r1, r0, r4, ror #1
    40ac:	00474120 	subeq	r4, r7, r0, lsr #2
    40b0:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
    40b4:	00011d26 	andeq	r1, r1, r6, lsr #26
    40b8:	00110200 	andseq	r0, r1, r0, lsl #4
    40bc:	00692300 	rsbeq	r2, r9, r0, lsl #6
    40c0:	0e012e01 	cdpeq	14, 0, cr2, cr1, cr1, {0}
    40c4:	00000416 	andeq	r0, r0, r6, lsl r4
    40c8:	60365001 	eorsvs	r5, r6, r1
    40cc:	22000007 	andcs	r0, r0, #7
    40d0:	3d01006a 	stccc	0, cr0, [r1, #-424]	; 0xfffffe58
    40d4:	04160f01 	ldreq	r0, [r6], #-3841	; 0xfffff0ff
    40d8:	11200000 			; <UNDEFINED> instruction: 0x11200000
    40dc:	00000000 	andeq	r0, r0, r0
    40e0:	16260137 			; <UNDEFINED> instruction: 0x16260137
    40e4:	af010000 	svcge	0x00010000
    40e8:	e3010106 	movw	r0, #4358	; 0x1106
    40ec:	3800000f 	stmdacc	r0, {r0, r1, r2, r3}
    40f0:	006e696d 	rsbeq	r6, lr, sp, ror #18
    40f4:	d91aaf01 	ldmdble	sl, {r0, r8, r9, sl, fp, sp, pc}
    40f8:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    40fc:	0000122f 	andeq	r1, r0, pc, lsr #4
    4100:	cd27af01 	stcgt	15, cr10, [r7, #-4]!
    4104:	3a000000 	bcc	410c <NOROM_SetupGetTrimForXoscHfCtl+0x10>
    4108:	bd010069 	stclt	0, cr0, [r1, #-420]	; 0xfffffe5c
    410c:	0004160e 	andeq	r1, r4, lr, lsl #12
    4110:	00643a00 	rsbeq	r3, r4, r0, lsl #20
    4114:	d907be01 	stmdble	r7, {r0, r9, sl, fp, ip, sp, pc}
    4118:	3b000000 	blcc	4120 <NOROM_SetupGetTrimForXoscHfCtl+0x24>
    411c:	004b4f4d 	subeq	r4, fp, sp, asr #30
    4120:	01010901 	tsteq	r1, r1, lsl #18
    4124:	5e013c00 	cdppl	12, 0, cr3, cr1, cr0, {0}
    4128:	01000016 	tsteq	r0, r6, lsl r0
    412c:	240106a7 	strcs	r0, [r1], #-1703	; 0xfffff959
    4130:	2a000017 	bcs	4194 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xc>
    4134:	01000017 	tsteq	r0, r7, lsl r0
    4138:	0010189c 	mulseq	r0, ip, r8
    413c:	00743d00 	rsbseq	r3, r4, r0, lsl #26
    4140:	291fa701 	ldmdbcs	pc, {r0, r8, r9, sl, sp, pc}	; <UNPREDICTABLE>
    4144:	49000001 	stmdbmi	r0, {r0}
    4148:	3d000011 	stccc	0, cr0, [r0, #-68]	; 0xffffffbc
    414c:	a7010076 	smlsdxge	r1, r6, r0, r0
    4150:	0000d927 	andeq	sp, r0, r7, lsr #18
    4154:	00115c00 	andseq	r5, r1, r0, lsl #24
    4158:	013c0000 	teqeq	ip, r0
    415c:	000016b5 			; <UNDEFINED> instruction: 0x000016b5
    4160:	01068f01 	tsteq	r6, r1, lsl #30
	...
    416c:	104e9c01 	subne	r9, lr, r1, lsl #24
    4170:	753d0000 	ldrvc	r0, [sp, #-0]!
    4174:	8f010074 	svchi	0x00010074
    4178:	0001291d 	andeq	r2, r1, sp, lsl r9
    417c:	00116f00 	andseq	r6, r1, r0, lsl #30
    4180:	00693e00 	rsbeq	r3, r9, r0, lsl #28
    4184:	8d069301 	stchi	3, cr9, [r6, #-4]
    4188:	8d000000 	stchi	0, cr0, [r0, #-0]
    418c:	00000011 	andeq	r0, r0, r1, lsl r0
    4190:	14e4013c 	strbtne	r0, [r4], #316	; 0x13c
    4194:	7f010000 	svcvc	0x00010000
    4198:	16f80106 	ldrbtne	r0, [r8], r6, lsl #2
    419c:	17240000 	strne	r0, [r4, -r0]!
    41a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    41a4:	00001084 	andeq	r1, r0, r4, lsl #1
    41a8:	0074753d 	rsbseq	r7, r4, sp, lsr r5
    41ac:	291a7f01 	ldmdbcs	sl, {r0, r8, r9, sl, fp, ip, sp, lr}
    41b0:	ab000001 	blge	41bc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x34>
    41b4:	3e000011 	mcrcc	0, 0, r0, cr0, cr1, {0}
    41b8:	83010069 	movwhi	r0, #4201	; 0x1069
    41bc:	00008d06 	andeq	r8, r0, r6, lsl #26
    41c0:	0011d400 	andseq	sp, r1, r0, lsl #8
    41c4:	013f0000 	teqeq	pc, r0
    41c8:	000015e9 	andeq	r1, r0, r9, ror #11
    41cc:	01067b01 	tsteq	r6, r1, lsl #22
    41d0:	000016e8 	andeq	r1, r0, r8, ror #13
    41d4:	000016f8 	strdeq	r1, [r0], -r8
    41d8:	6a409c01 	bvs	102b1e4 <__ccfg+0x100b23c>
    41dc:	01000015 	tsteq	r0, r5, lsl r0
    41e0:	1601145f 			; <UNDEFINED> instruction: 0x1601145f
    41e4:	01000004 	tsteq	r0, r4
    41e8:	000010c1 	andeq	r1, r0, r1, asr #1
    41ec:	64697038 	strbtvs	r7, [r9], #-56	; 0xffffffc8
    41f0:	225f0100 	subscs	r0, pc, #0, 2
    41f4:	0000011d 	andeq	r0, r0, sp, lsl r1
    41f8:	0100693a 	tsteq	r0, sl, lsr r9
    41fc:	04161761 	ldreq	r1, [r6], #-1889	; 0xfffff89f
    4200:	41000000 	mrsmi	r0, (UNDEF: 0)
    4204:	000014ef 	andeq	r1, r0, pc, ror #9
    4208:	01029e02 	tsteq	r2, r2, lsl #28
    420c:	0010e201 	andseq	lr, r0, r1, lsl #4
    4210:	10e20300 	rscne	r0, r2, r0, lsl #6
    4214:	a7350000 	ldrge	r0, [r5, -r0]!
    4218:	02000011 	andeq	r0, r0, #17
    421c:	7313029e 	tstvc	r3, #-536870903	; 0xe0000009
    4220:	00000000 	andeq	r0, r0, r0
    4224:	a2020102 	andge	r0, r2, #-2147483648	; 0x80000000
    4228:	4200000c 	andmi	r0, r0, #12
    422c:	00001098 	muleq	r0, r8, r0
	...
    4238:	112e9c01 			; <UNDEFINED> instruction: 0x112e9c01
    423c:	aa430000 	bge	10c4244 <__ccfg+0x10a429c>
    4240:	f2000010 	vqadd.s8	d0, d0, d0
    4244:	44000011 	strmi	r0, [r0], #-17	; 0xffffffef
    4248:	000010b6 	strheq	r1, [r0], -r6
    424c:	0000121b 	andeq	r1, r0, fp, lsl r2
    4250:	00109845 	andseq	r9, r0, r5, asr #16
	...
    425c:	145f0100 	ldrbne	r0, [pc], #-256	; 4264 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xdc>
    4260:	0010aa43 	andseq	sl, r0, r3, asr #20
    4264:	00123900 	andseq	r3, r2, r0, lsl #18
    4268:	10b64600 	adcsne	r4, r6, r0, lsl #12
    426c:	00000000 	andeq	r0, r0, r0
    4270:	000f9e42 	andeq	r9, pc, r2, asr #28
    4274:	00172c00 	andseq	r2, r7, r0, lsl #24
    4278:	0017f800 	andseq	pc, r7, r0, lsl #16
    427c:	9a9c0100 	bls	fe704684 <_estack+0xde6ff684>
    4280:	43000011 	movwmi	r0, #17
    4284:	00000fad 	andeq	r0, r0, sp, lsr #31
    4288:	0000124c 	andeq	r1, r0, ip, asr #4
    428c:	000fb943 	andeq	fp, pc, r3, asr #18
    4290:	00125f00 	andseq	r5, r2, r0, lsl #30
    4294:	0fc54600 	svceq	0x00c54600
    4298:	cf460000 	svcgt	0x00460000
    429c:	4700000f 	strmi	r0, [r0, -pc]
    42a0:	00000f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
    42a4:	0000173a 	andeq	r1, r0, sl, lsr r7
    42a8:	00000748 	andeq	r0, r0, r8, asr #14
    42ac:	2906af01 	stmdbcs	r6, {r0, r8, r9, sl, fp, sp, pc}
    42b0:	00000fb9 			; <UNDEFINED> instruction: 0x00000fb9
    42b4:	000fad43 	andeq	sl, pc, r3, asr #26
    42b8:	00127200 	andseq	r7, r2, r0, lsl #4
    42bc:	07483600 	strbeq	r3, [r8, -r0, lsl #12]
    42c0:	c5440000 	strbgt	r0, [r4, #-0]
    42c4:	9b00000f 	blls	4308 <NOROM_SetupSetAonRtcSubSecInc+0xc>
    42c8:	46000012 			; <UNDEFINED> instruction: 0x46000012
    42cc:	00000fcf 	andeq	r0, r0, pc, asr #31
    42d0:	000fd948 	andeq	sp, pc, r8, asr #18
    42d4:	0017d600 	andseq	sp, r7, r0, lsl #12
    42d8:	00000000 	andeq	r0, r0, r0
    42dc:	000edb42 	andeq	sp, lr, r2, asr #22
    42e0:	00180c00 	andseq	r0, r8, r0, lsl #24
    42e4:	00184000 	andseq	r4, r8, r0
    42e8:	ee9c0100 	fmle	f0, f4, f0
    42ec:	43000011 	movwmi	r0, #17
    42f0:	00000eeb 	andeq	r0, r0, fp, ror #29
    42f4:	000012b9 			; <UNDEFINED> instruction: 0x000012b9
    42f8:	000ef843 	andeq	pc, lr, r3, asr #16
    42fc:	0012d700 	andseq	sp, r2, r0, lsl #14
    4300:	0f054600 	svceq	0x00054600
    4304:	db490000 	blle	124430c <__ccfg+0x1224364>
    4308:	1e00000e 	cdpne	0, 0, cr0, cr0, cr14, {0}
    430c:	26000018 			; <UNDEFINED> instruction: 0x26000018
    4310:	01000018 	tsteq	r0, r8, lsl r0
    4314:	43060159 	movwmi	r0, #24921	; 0x6159
    4318:	00000eeb 	andeq	r0, r0, fp, ror #29
    431c:	000012f5 	strdeq	r1, [r0], -r5
    4320:	000ef843 	andeq	pc, lr, r3, asr #16
    4324:	00130800 	andseq	r0, r3, r0, lsl #16
    4328:	0f054600 	svceq	0x00054600
    432c:	00000000 	andeq	r0, r0, r0
    4330:	0008804a 	andeq	r8, r8, sl, asr #32
    4334:	001a6000 	andseq	r6, sl, r0
    4338:	001aa800 	andseq	sl, sl, r0, lsl #16
    433c:	439c0100 	orrsmi	r0, ip, #0, 2
    4340:	00000890 	muleq	r0, r0, r8
    4344:	0000131b 	andeq	r1, r0, fp, lsl r3
    4348:	00088049 	andeq	r8, r8, r9, asr #32
    434c:	001a6c00 	andseq	r6, sl, r0, lsl #24
    4350:	001a7400 	andseq	r7, sl, r0, lsl #8
    4354:	037c0100 	cmneq	ip, #0, 2
    4358:	08904306 	ldmeq	r0, {r1, r2, r8, r9, lr}
    435c:	13390000 	teqne	r9, #0
    4360:	00000000 	andeq	r0, r0, r0
    4364:	00133300 	andseq	r3, r3, r0, lsl #6
    4368:	72000300 	andvc	r0, r0, #0, 6
    436c:	0400000e 	streq	r0, [r0], #-14
    4370:	0000a301 	andeq	sl, r0, r1, lsl #6
    4374:	172f0c00 	strne	r0, [pc, -r0, lsl #24]!
    4378:	0df70000 	ldcleq	0, cr0, [r7]
    437c:	09500000 	ldmdbeq	r0, {}^	; <UNPREDICTABLE>
    4380:	00000000 	andeq	r0, r0, r0
    4384:	31130000 	tstcc	r3, r0
    4388:	01020000 	mrseq	r0, (UNDEF: 2)
    438c:	000c5806 	andeq	r5, ip, r6, lsl #16
    4390:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    4394:	00000a66 	andeq	r0, r0, r6, ror #20
    4398:	f8050402 			; <UNDEFINED> instruction: 0xf8050402
    439c:	02000007 	andeq	r0, r0, #7
    43a0:	07f30508 	ldrbeq	r0, [r3, r8, lsl #10]!
    43a4:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    43a8:	0200002a 	andeq	r0, r0, #42	; 0x2a
    43ac:	004d182e 	subeq	r1, sp, lr, lsr #16
    43b0:	01020000 	mrseq	r0, (UNDEF: 2)
    43b4:	000c5608 	andeq	r5, ip, r8, lsl #12
    43b8:	2dff0300 	ldclcs	3, cr0, [pc]	; 43c0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x9c>
    43bc:	31020000 	mrscc	r0, (UNDEF: 2)
    43c0:	00006019 	andeq	r6, r0, r9, lsl r0
    43c4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    43c8:	00000d53 	andeq	r0, r0, r3, asr sp
    43cc:	0029a103 	eoreq	sl, r9, r3, lsl #2
    43d0:	19340200 	ldmdbne	r4!, {r9}
    43d4:	00000073 	andeq	r0, r0, r3, ror r0
    43d8:	28070402 	stmdacs	r7, {r1, sl}
    43dc:	02000004 	andeq	r0, r0, #4
    43e0:	04230708 	strteq	r0, [r3], #-1800	; 0xfffff8f8
    43e4:	04040000 	streq	r0, [r4], #-0
    43e8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    43ec:	07040200 	streq	r0, [r4, -r0, lsl #4]
    43f0:	0000042d 	andeq	r0, r0, sp, lsr #8
    43f4:	00051903 	andeq	r1, r5, r3, lsl #18
    43f8:	1b280300 	blne	a05000 <__ccfg+0x9e5058>
    43fc:	0000009b 	muleq	r0, fp, r0
    4400:	000b8b05 	andeq	r8, fp, r5, lsl #22
    4404:	000d0400 	andeq	r0, sp, r0, lsl #8
    4408:	000000b3 	strheq	r0, [r0], -r3
    440c:	00086806 	andeq	r6, r8, r6, lsl #16
    4410:	0000b300 	andeq	fp, r0, r0, lsl #6
    4414:	00010000 	andeq	r0, r1, r0
    4418:	8d030407 	cfstrshi	mvf0, [r3, #-28]	; 0xffffffe4
    441c:	0300000b 	movweq	r0, #11
    4420:	008f1863 	addeq	r1, pc, r3, ror #16
    4424:	15030000 	strne	r0, [r3, #-0]
    4428:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    442c:	00411226 	subeq	r1, r1, r6, lsr #4
    4430:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    4434:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    4438:	00541227 	subseq	r1, r4, r7, lsr #4
    443c:	cd080000 	stcgt	0, cr0, [r8, #-0]
    4440:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    4444:	000000cd 	andeq	r0, r0, sp, asr #1
    4448:	001daf03 	andseq	sl, sp, r3, lsl #30
    444c:	122b0400 	eorne	r0, fp, #0, 8
    4450:	00000041 	andeq	r0, r0, r1, asr #32
    4454:	0000e309 	andeq	lr, r0, r9, lsl #6
    4458:	00e30800 	rsceq	r0, r3, r0, lsl #16
    445c:	3a030000 	bcc	c4464 <__ccfg+0xa44bc>
    4460:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    4464:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    4468:	f9080000 			; <UNDEFINED> instruction: 0xf9080000
    446c:	03000000 	movweq	r0, #0
    4470:	00000641 	andeq	r0, r0, r1, asr #12
    4474:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    4478:	03000000 	movweq	r0, #0
    447c:	00000baf 	andeq	r0, r0, pc, lsr #23
    4480:	22102e04 	andscs	r2, r0, #4, 28	; 0x40
    4484:	0a000001 	beq	4490 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    4488:	0000cd04 	andeq	ip, r0, r4, lsl #26
    448c:	04080b00 	streq	r0, [r8], #-2816	; 0xfffff500
    4490:	01b60932 			; <UNDEFINED> instruction: 0x01b60932
    4494:	2b0c0000 	blcs	30449c <__ccfg+0x2e44f4>
    4498:	04000000 	streq	r0, [r0], #-0
    449c:	00e30734 	rsceq	r0, r3, r4, lsr r7
    44a0:	01010000 	mrseq	r0, (UNDEF: 1)
    44a4:	470c0007 	strmi	r0, [ip, -r7]
    44a8:	04000006 	streq	r0, [r0], #-6
    44ac:	00e30335 	rsceq	r0, r3, r5, lsr r3
    44b0:	01010000 	mrseq	r0, (UNDEF: 1)
    44b4:	de0c0006 	cdple	0, 0, cr0, cr12, cr6, {0}
    44b8:	04000002 	streq	r0, [r0], #-2
    44bc:	00e30336 	rsceq	r0, r3, r6, lsr r3
    44c0:	01010000 	mrseq	r0, (UNDEF: 1)
    44c4:	b20c0005 	andlt	r0, ip, #5
    44c8:	04000006 	streq	r0, [r0], #-6
    44cc:	00e30337 	rsceq	r0, r3, r7, lsr r3
    44d0:	01010000 	mrseq	r0, (UNDEF: 1)
    44d4:	9a0c0004 	bls	3044ec <__ccfg+0x2e4544>
    44d8:	0400000a 	streq	r0, [r0], #-10
    44dc:	00e30338 	rsceq	r0, r3, r8, lsr r3
    44e0:	04010000 	streq	r0, [r1], #-0
    44e4:	560d0000 	strpl	r0, [sp], -r0
    44e8:	04000006 	streq	r0, [r0], #-6
    44ec:	00e3073a 	rsceq	r0, r3, sl, lsr r7
    44f0:	0d010000 	stceq	0, cr0, [r1, #-0]
    44f4:	000008f6 	strdeq	r0, [r0], -r6
    44f8:	e3033c04 	movw	r3, #15364	; 0x3c04
    44fc:	02000000 	andeq	r0, r0, #0
    4500:	000f270d 	andeq	r2, pc, sp, lsl #14
    4504:	033d0400 	teqeq	sp, #0, 8
    4508:	000000e3 	andeq	r0, r0, r3, ror #1
    450c:	090e0d03 	stmdbeq	lr, {r0, r1, r8, sl, fp}
    4510:	3f040000 	svccc	0x00040000
    4514:	0000f908 	andeq	pc, r0, r8, lsl #18
    4518:	03000400 	movweq	r0, #1024	; 0x400
    451c:	00000314 	andeq	r0, r0, r4, lsl r3
    4520:	28034104 	stmdacs	r3, {r2, r8, lr}
    4524:	09000001 	stmdbeq	r0, {r0}
    4528:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    452c:	0006b90e 	andeq	fp, r6, lr, lsl #18
    4530:	1a430400 	bne	10c5538 <__ccfg+0x10a5590>
    4534:	000001c2 	andeq	r0, r0, r2, asr #3
    4538:	970e0101 	strls	r0, [lr, -r1, lsl #2]
    453c:	04000001 	streq	r0, [r0], #-1
    4540:	01e30e45 	mvneq	r0, r5, asr #28
    4544:	01010000 	mrseq	r0, (UNDEF: 1)
    4548:	01e9040a 	mvneq	r0, sl, lsl #8
    454c:	01020000 	mrseq	r0, (UNDEF: 2)
    4550:	000c5f08 	andeq	r5, ip, r8, lsl #30
    4554:	01e90800 	mvneq	r0, r0, lsl #16
    4558:	1d0e0000 	stcne	0, cr0, [lr, #-0]
    455c:	04000003 	streq	r0, [r0], #-3
    4560:	01e31e45 	mvneq	r1, r5, asr #28
    4564:	01010000 	mrseq	r0, (UNDEF: 1)
    4568:	8f05080b 	svchi	0x0005080b
    456c:	00023409 	andeq	r3, r2, r9, lsl #8
    4570:	0cc50d00 	stcleq	13, cr0, [r5], {0}
    4574:	90050000 	andls	r0, r5, r0
    4578:	0000670b 	andeq	r6, r0, fp, lsl #14
    457c:	620d0000 	andvs	r0, sp, #0
    4580:	05000010 	streq	r0, [r0, #-16]
    4584:	00cd0891 	smulleq	r0, sp, r1, r8
    4588:	0d040000 	stceq	0, cr0, [r4, #-0]
    458c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    4590:	ef109205 	svc	0x00109205
    4594:	06000000 	streq	r0, [r0], -r0
    4598:	0cb90300 	ldceq	3, cr0, [r9]
    459c:	93050000 	movwls	r0, #20480	; 0x5000
    45a0:	00020303 	andeq	r0, r2, r3, lsl #6
    45a4:	02340f00 	eorseq	r0, r4, #0, 30
    45a8:	024b0000 	subeq	r0, fp, #0
    45ac:	00100000 	andseq	r0, r0, r0
    45b0:	0009380e 	andeq	r3, r9, lr, lsl #16
    45b4:	0f990500 	svceq	0x00990500
    45b8:	00000240 	andeq	r0, r0, r0, asr #4
    45bc:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    45c0:	000000f4 	strdeq	r0, [r0], -r4
    45c4:	9106010b 	tstls	r6, fp, lsl #2
    45c8:	00028909 	andeq	r8, r2, r9, lsl #18
    45cc:	09150c00 	ldmdbeq	r5, {sl, fp}
    45d0:	93060000 	movwls	r0, #24576	; 0x6000
    45d4:	0000e307 	andeq	lr, r0, r7, lsl #6
    45d8:	01070100 	mrseq	r0, (UNDEF: 23)
    45dc:	05c70c00 	strbeq	r0, [r7, #3072]	; 0xc00
    45e0:	94060000 	strls	r0, [r6], #-0
    45e4:	0000e303 	andeq	lr, r0, r3, lsl #6
    45e8:	00010100 	andeq	r0, r1, r0, lsl #2
    45ec:	a6030000 	strge	r0, [r3], -r0
    45f0:	0600000a 	streq	r0, [r0], -sl
    45f4:	025f0396 	subseq	r0, pc, #1476395010	; 0x58000002
    45f8:	89080000 	stmdbhi	r8, {}	; <UNPREDICTABLE>
    45fc:	0f000002 	svceq	0x00000002
    4600:	00000295 	muleq	r0, r5, r2
    4604:	000002a5 	andeq	r0, r0, r5, lsr #5
    4608:	9a080010 	bls	204650 <__ccfg+0x1e46a8>
    460c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    4610:	000003ac 	andeq	r0, r0, ip, lsr #7
    4614:	a5179c06 	ldrge	r9, [r7, #-3078]	; 0xfffff3fa
    4618:	01000002 	tsteq	r0, r2
    461c:	00d90f01 	sbcseq	r0, r9, r1, lsl #30
    4620:	02c30000 	sbceq	r0, r3, #0
    4624:	00100000 	andseq	r0, r0, r0
    4628:	0002b808 	andeq	fp, r2, r8, lsl #16
    462c:	06090e00 	streq	r0, [r9], -r0, lsl #28
    4630:	06070000 	streq	r0, [r7], -r0
    4634:	0002c313 	andeq	ip, r2, r3, lsl r3
    4638:	0e010100 	adfeqs	f0, f1, f0
    463c:	000008d8 	ldrdeq	r0, [r0], -r8
    4640:	f90ec305 			; <UNDEFINED> instruction: 0xf90ec305
    4644:	01000000 	mrseq	r0, (UNDEF: 0)
    4648:	0c6d1101 	stfeqe	f1, [sp], #-4
    464c:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    4650:	02f11001 	rscseq	r1, r1, #1
    4654:	040a0000 	streq	r0, [sl], #-0
    4658:	000002f7 	strdeq	r0, [r0], -r7
    465c:	03030112 	movweq	r0, #12562	; 0x3112
    4660:	cd130000 	ldcgt	0, cr0, [r3, #-0]
    4664:	00000000 	andeq	r0, r0, r0
    4668:	0001f00f 	andeq	pc, r1, pc
    466c:	00030e00 	andeq	r0, r3, r0, lsl #28
    4670:	08001000 	stmdaeq	r0, {ip}
    4674:	00000303 	andeq	r0, r0, r3, lsl #6
    4678:	0009e114 	andeq	lr, r9, r4, lsl r1
    467c:	017f0800 	cmneq	pc, r0, lsl #16
    4680:	00030e16 	andeq	r0, r3, r6, lsl lr
    4684:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    4688:	00000398 	muleq	r0, r8, r3
    468c:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    4690:	00000105 	andeq	r0, r0, r5, lsl #2
    4694:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    4698:	55090809 	strpl	r0, [r9, #-2057]	; 0xfffff7f7
    469c:	0d000003 	stceq	0, cr0, [r0, #-12]
    46a0:	000001c2 	andeq	r0, r0, r2, asr #3
    46a4:	cd070f09 	stcgt	15, cr0, [r7, #-36]	; 0xffffffdc
    46a8:	00000000 	andeq	r0, r0, r0
    46ac:	000c9d0d 	andeq	r9, ip, sp, lsl #26
    46b0:	03100900 	tsteq	r0, #0, 18
    46b4:	000000cd 	andeq	r0, r0, sp, asr #1
    46b8:	66030002 	strvs	r0, [r3], -r2
    46bc:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    46c0:	03310311 	teqeq	r1, #1140850688	; 0x44000000
    46c4:	200b0000 	andcs	r0, fp, r0
    46c8:	d3091609 	movwle	r1, #38409	; 0x9609
    46cc:	0d000003 	stceq	0, cr0, [r0, #-12]
    46d0:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
    46d4:	ed081709 	stc	7, cr1, [r8, #-36]	; 0xffffffdc
    46d8:	00000003 	andeq	r0, r0, r3
    46dc:	0009060d 	andeq	r0, r9, sp, lsl #12
    46e0:	08180900 	ldmdaeq	r8, {r8, fp}
    46e4:	00000408 	andeq	r0, r0, r8, lsl #8
    46e8:	0bc10d04 	bleq	ff047b00 <_estack+0xdf042b00>
    46ec:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    46f0:	00043e08 	andeq	r3, r4, r8, lsl #28
    46f4:	950d0800 	strls	r0, [sp, #-2048]	; 0xfffff800
    46f8:	0900000c 	stmdbeq	r0, {r2, r3}
    46fc:	0459081a 	ldrbeq	r0, [r9], #-2074	; 0xfffff7e6
    4700:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    4704:	0000095d 	andeq	r0, r0, sp, asr r9
    4708:	6f081b09 	svcvs	0x00081b09
    470c:	10000004 	andne	r0, r0, r4
    4710:	000a5e0d 	andeq	r5, sl, sp, lsl #28
    4714:	081c0900 	ldmdaeq	ip, {r8, fp}
    4718:	0000046f 	andeq	r0, r0, pc, ror #8
    471c:	01a50d14 			; <UNDEFINED> instruction: 0x01a50d14
    4720:	1d090000 	stcne	0, cr0, [r9, #-0]
    4724:	00046f08 	andeq	r6, r4, r8, lsl #30
    4728:	0b0d1800 	bleq	34a730 <__ccfg+0x32a788>
    472c:	09000003 	stmdbeq	r0, {r0, r1}
    4730:	0081061e 	addeq	r0, r1, lr, lsl r6
    4734:	001c0000 	andseq	r0, ip, r0
    4738:	00810115 	addeq	r0, r1, r5, lsl r1
    473c:	03ed0000 	mvneq	r0, #0
    4740:	81130000 	tsthi	r3, r0
    4744:	13000000 	movwne	r0, #0
    4748:	00000081 	andeq	r0, r0, r1, lsl #1
    474c:	0000b513 	andeq	fp, r0, r3, lsl r5
    4750:	040a0000 	streq	r0, [sl], #-0
    4754:	000003d3 	ldrdeq	r0, [r0], -r3
    4758:	00810115 	addeq	r0, r1, r5, lsl r1
    475c:	04080000 	streq	r0, [r8], #-0
    4760:	81130000 	tsthi	r3, r0
    4764:	13000000 	movwne	r0, #0
    4768:	00000081 	andeq	r0, r0, r1, lsl #1
    476c:	f3040a00 	vpmax.u8	d0, d4, d0
    4770:	15000003 	strne	r0, [r0, #-3]
    4774:	00008101 	andeq	r8, r0, r1, lsl #2
    4778:	00043200 	andeq	r3, r4, r0, lsl #4
    477c:	00811300 	addeq	r1, r1, r0, lsl #6
    4780:	16130000 	ldrne	r0, [r3], -r0
    4784:	13000001 	movwne	r0, #1
    4788:	00000081 	andeq	r0, r0, r1, lsl #1
    478c:	00043213 	andeq	r3, r4, r3, lsl r2
    4790:	04381300 	ldrteq	r1, [r8], #-768	; 0xfffffd00
    4794:	0a000000 	beq	479c <NOROM_ChipInfo_GetHwRevision+0x44>
    4798:	00008104 	andeq	r8, r0, r4, lsl #2
    479c:	55040a00 	strpl	r0, [r4, #-2560]	; 0xfffff600
    47a0:	0a000003 	beq	47b4 <NOROM_ChipInfo_GetHwRevision+0x5c>
    47a4:	00040e04 	andeq	r0, r4, r4, lsl #28
    47a8:	81011500 	tsthi	r1, r0, lsl #10
    47ac:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    47b0:	13000004 	movwne	r0, #4
    47b4:	00000116 	andeq	r0, r0, r6, lsl r1
    47b8:	00043813 	andeq	r3, r4, r3, lsl r8
    47bc:	040a0000 	streq	r0, [sl], #-0
    47c0:	00000444 	andeq	r0, r0, r4, asr #8
    47c4:	00810115 	addeq	r0, r1, r5, lsl r1
    47c8:	046f0000 	strbteq	r0, [pc], #-0	; 47d0 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0xc>
    47cc:	16130000 	ldrne	r0, [r3], -r0
    47d0:	00000001 	andeq	r0, r0, r1
    47d4:	045f040a 	ldrbeq	r0, [pc], #-1034	; 47dc <AuxAdiDdiSafeWrite.constprop.1>
    47d8:	22030000 	andcs	r0, r3, #0
    47dc:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    47e0:	0361031f 	cmneq	r1, #2080374784	; 0x7c000000
    47e4:	75080000 	strvc	r0, [r8, #-0]
    47e8:	16000004 	strne	r0, [r0], -r4
    47ec:	000017b8 			; <UNDEFINED> instruction: 0x000017b8
    47f0:	08240908 	stmdaeq	r4!, {r3, r8, fp}
    47f4:	000004ae 	andeq	r0, r0, lr, lsr #9
    47f8:	000eb20d 	andeq	fp, lr, sp, lsl #4
    47fc:	18250900 	stmdane	r5!, {r8, fp}
    4800:	000004ae 	andeq	r0, r0, lr, lsr #9
    4804:	16da0d00 	ldrbne	r0, [sl], r0, lsl #26
    4808:	26090000 	strcs	r0, [r9], -r0
    480c:	0004ae06 	andeq	sl, r4, r6, lsl #28
    4810:	0a000400 	beq	5818 <patchImageGenfsk+0xc4>
    4814:	00048604 	andeq	r8, r4, r4, lsl #12
    4818:	17c60300 	strbne	r0, [r6, r0, lsl #6]
    481c:	29090000 	stmdbcs	r9, {}	; <UNPREDICTABLE>
    4820:	0004861e 	andeq	r8, r4, lr, lsl r6
    4824:	18cb0300 	stmiane	fp, {r8, r9}^
    4828:	2a090000 	bcs	244830 <__ccfg+0x224888>
    482c:	0004861e 	andeq	r8, r4, lr, lsl r6
    4830:	09020b00 	stmdbeq	r2, {r8, r9, fp}
    4834:	0536023f 	ldreq	r0, [r6, #-575]!	; 0xfffffdc1
    4838:	6d0c0000 	stcvs	0, cr0, [ip, #-0]
    483c:	09000018 	stmdbeq	r0, {r3, r4}
    4840:	00cd0940 	sbceq	r0, sp, r0, asr #18
    4844:	01020000 	mrseq	r0, (UNDEF: 2)
    4848:	1d0c000f 	stcne	0, cr0, [ip, #-60]	; 0xffffffc4
    484c:	09000019 	stmdbeq	r0, {r0, r3, r4}
    4850:	00cd0441 	sbceq	r0, sp, r1, asr #8
    4854:	01020000 	mrseq	r0, (UNDEF: 2)
    4858:	e80c000e 	stmda	ip, {r1, r2, r3}
    485c:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    4860:	00cd0442 	sbceq	r0, sp, r2, asr #8
    4864:	01020000 	mrseq	r0, (UNDEF: 2)
    4868:	7d0c000d 	stcvc	0, cr0, [ip, #-52]	; 0xffffffcc
    486c:	09000018 	stmdbeq	r0, {r3, r4}
    4870:	00cd0443 	sbceq	r0, sp, r3, asr #8
    4874:	07020000 	streq	r0, [r2, -r0]
    4878:	d90c0006 	stmdble	ip, {r1, r2}
    487c:	09000018 	stmdbeq	r0, {r3, r4}
    4880:	00cd0444 	sbceq	r0, sp, r4, asr #8
    4884:	03020000 	movweq	r0, #8192	; 0x2000
    4888:	5f0c0003 	svcpl	0x000c0003
    488c:	09000018 	stmdbeq	r0, {r3, r4}
    4890:	00cd0445 	sbceq	r0, sp, r5, asr #8
    4894:	03020000 	movweq	r0, #8192	; 0x2000
    4898:	17000000 	strne	r0, [r0, -r0]
    489c:	093d0902 	ldmdbeq	sp!, {r1, r8, fp}
    48a0:	00000556 	andeq	r0, r0, r6, asr r5
    48a4:	0005fe18 	andeq	pc, r5, r8, lsl lr	; <UNPREDICTABLE>
    48a8:	073e0900 	ldreq	r0, [lr, -r0, lsl #18]!
    48ac:	000000cd 	andeq	r0, r0, sp, asr #1
    48b0:	09006219 	stmdbeq	r0, {r0, r3, r4, r9, sp, lr}
    48b4:	04cc0446 	strbeq	r0, [ip], #1094	; 0x446
    48b8:	03000000 	movweq	r0, #0
    48bc:	000016df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    48c0:	36034709 	strcc	r4, [r3], -r9, lsl #14
    48c4:	17000005 	strne	r0, [r0, -r5]
    48c8:	05500908 	ldrbeq	r0, [r0, #-2312]	; 0xfffff6f8
    48cc:	00000584 	andeq	r0, r0, r4, lsl #11
    48d0:	0018ff18 	andseq	pc, r8, r8, lsl pc	; <UNPREDICTABLE>
    48d4:	10510900 	subsne	r0, r1, r0, lsl #18
    48d8:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    48dc:	00182918 	andseq	r2, r8, r8, lsl r9
    48e0:	0b520900 	bleq	1486ce8 <__ccfg+0x1466d40>
    48e4:	00000355 	andeq	r0, r0, r5, asr r3
    48e8:	190e1600 	stmdbne	lr, {r9, sl, ip}
    48ec:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    48f0:	05b7084c 	ldreq	r0, [r7, #2124]!	; 0x84c
    48f4:	751a0000 	ldrvc	r0, [sl, #-0]
    48f8:	07580900 	ldrbeq	r0, [r8, -r0, lsl #18]
    48fc:	00000562 	andeq	r0, r0, r2, ror #10
    4900:	18e00d00 	stmiane	r0!, {r8, sl, fp}^
    4904:	63090000 	movwvs	r0, #36864	; 0x9000
    4908:	0000cd07 	andeq	ip, r0, r7, lsl #26
    490c:	c00d0800 	andgt	r0, sp, r0, lsl #16
    4910:	09000018 	stmdbeq	r0, {r3, r4}
    4914:	05561068 	ldrbeq	r1, [r6, #-104]	; 0xffffff98
    4918:	000a0000 	andeq	r0, sl, r0
    491c:	0017d403 	andseq	sp, r7, r3, lsl #8
    4920:	1f790900 	svcne	0x00790900
    4924:	00000584 	andeq	r0, r0, r4, lsl #11
    4928:	7b090c0b 	blvc	24795c <__ccfg+0x2279b4>
    492c:	0005e709 	andeq	lr, r5, r9, lsl #14
    4930:	181d0d00 	ldmdane	sp, {r8, sl, fp}
    4934:	7f090000 	svcvc	0x00090000
    4938:	0004c011 	andeq	ip, r4, r1, lsl r0
    493c:	ac0d0000 	stcge	0, cr0, [sp], {-0}
    4940:	09000018 	stmdbeq	r0, {r3, r4}
    4944:	05561183 	ldrbeq	r1, [r6, #-387]	; 0xfffffe7d
    4948:	00080000 	andeq	r0, r8, r0
    494c:	00184f03 	andseq	r4, r8, r3, lsl #30
    4950:	03920900 	orrseq	r0, r2, #0, 18
    4954:	000005c3 	andeq	r0, r0, r3, asr #11
    4958:	00037014 	andeq	r7, r3, r4, lsl r0
    495c:	02d80800 	sbcseq	r0, r8, #0, 16
    4960:	0000f90e 	andeq	pc, r0, lr, lsl #18
    4964:	1b010100 	blne	44d6c <__ccfg+0x24dc4>
    4968:	03030808 	movweq	r0, #14344	; 0x3808
    496c:	00062909 	andeq	r2, r6, r9, lsl #18
    4970:	3c8e1c00 	stccc	12, cr1, [lr], {0}
    4974:	07080000 	streq	r0, [r8, -r0]
    4978:	00cd0703 	sbceq	r0, sp, r3, lsl #14
    497c:	1c000000 	stcne	0, cr0, [r0], {-0}
    4980:	00000fba 			; <UNDEFINED> instruction: 0x00000fba
    4984:	08030808 	stmdaeq	r3, {r3, fp}
    4988:	0000010a 	andeq	r0, r0, sl, lsl #2
    498c:	04110004 	ldreq	r0, [r1], #-4
    4990:	0800000a 	stmdaeq	r0, {r1, r3}
    4994:	02030309 	andeq	r0, r3, #603979776	; 0x24000000
    4998:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    499c:	00000020 	andeq	r0, r0, r0, lsr #32
    49a0:	030b0830 	movweq	r0, #47152	; 0xb830
    49a4:	00069908 	andeq	r9, r6, r8, lsl #18
    49a8:	1f111c00 	svcne	0x00111c00
    49ac:	14080000 	strne	r0, [r8], #-0
    49b0:	00cd0803 	sbceq	r0, sp, r3, lsl #16
    49b4:	1c000000 	stcne	0, cr0, [r0], {-0}
    49b8:	00000be2 	andeq	r0, r0, r2, ror #23
    49bc:	08031508 	stmdaeq	r3, {r3, r8, sl, ip}
    49c0:	000000cd 	andeq	r0, r0, sp, asr #1
    49c4:	4c7b1c02 	ldclmi	12, cr1, [fp], #-8
    49c8:	16080000 	strne	r0, [r8], -r0
    49cc:	02e40b03 	rsceq	r0, r4, #3072	; 0xc00
    49d0:	1c040000 	stcne	0, cr0, [r4], {-0}
    49d4:	00004741 	andeq	r4, r0, r1, asr #14
    49d8:	09031708 	stmdbeq	r3, {r3, r8, r9, sl, ip}
    49dc:	0000010a 	andeq	r0, r0, sl, lsl #2
    49e0:	000f1c08 	andeq	r1, pc, r8, lsl #24
    49e4:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    49e8:	06990f03 	ldreq	r0, [r9], r3, lsl #30
    49ec:	1c0c0000 	stcne	0, cr0, [ip], {-0}
    49f0:	00000958 	andeq	r0, r0, r8, asr r9
    49f4:	15031908 	strne	r1, [r3, #-2312]	; 0xfffff6f8
    49f8:	000006a9 	andeq	r0, r0, r9, lsr #13
    49fc:	290f002c 	stmdbcs	pc, {r2, r3, r5}	; <UNPREDICTABLE>
    4a00:	a9000006 	stmdbge	r0, {r1, r2}
    4a04:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    4a08:	00000088 	andeq	r0, r0, r8, lsl #1
    4a0c:	040a0003 	streq	r0, [sl], #-3
    4a10:	00000636 	andeq	r0, r0, r6, lsr r6
    4a14:	000bd711 	andeq	sp, fp, r1, lsl r7
    4a18:	031c0800 	tsteq	ip, #0, 16
    4a1c:	0006361b 	andeq	r3, r6, fp, lsl r6
    4a20:	0bb71400 	bleq	fedc9a28 <_estack+0xdedc4a28>
    4a24:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    4a28:	06cb1403 	strbeq	r1, [fp], r3, lsl #8
    4a2c:	01010000 	mrseq	r0, (UNDEF: 1)
    4a30:	06af040a 	strteq	r0, [pc], sl, lsl #8
    4a34:	0a0e0000 	beq	384a3c <__ccfg+0x364a94>
    4a38:	0a000007 	beq	4a5c <__aeabi_lmul+0x158>
    4a3c:	00cd131d 	sbceq	r1, sp, sp, lsl r3
    4a40:	01010000 	mrseq	r0, (UNDEF: 1)
    4a44:	0002e50e 	andeq	lr, r2, lr, lsl #10
    4a48:	1a1e0a00 	bne	787250 <__ccfg+0x7672a8>
    4a4c:	000000de 	ldrdeq	r0, [r0], -lr
    4a50:	640e0101 	strvs	r0, [lr], #-257	; 0xfffffeff
    4a54:	0a00000c 	beq	4a8c <__aeabi_lmul+0x188>
    4a58:	00de241e 	sbcseq	r2, lr, lr, lsl r4
    4a5c:	01010000 	mrseq	r0, (UNDEF: 1)
    4a60:	000c820e 	andeq	r8, ip, lr, lsl #4
    4a64:	14220a00 	strtne	r0, [r2], #-2560	; 0xfffff600
    4a68:	000006cb 	andeq	r0, r0, fp, asr #13
    4a6c:	25030101 	strcs	r0, [r3, #-257]	; 0xfffffeff
    4a70:	0b000017 	bleq	4ad4 <__aeabi_lmul+0x1d0>
    4a74:	07150f0e 	ldreq	r0, [r5, -lr, lsl #30]
    4a78:	040a0000 	streq	r0, [sl], #-0
    4a7c:	0000071b 	andeq	r0, r0, fp, lsl r7
    4a80:	00810115 	addeq	r0, r1, r5, lsl r1
    4a84:	07300000 	ldreq	r0, [r0, -r0]!
    4a88:	81130000 	tsthi	r3, r0
    4a8c:	13000000 	movwne	r0, #0
    4a90:	00000116 	andeq	r0, r0, r6, lsl r1
    4a94:	07400f00 	strbeq	r0, [r0, -r0, lsl #30]
    4a98:	07400000 	strbeq	r0, [r0, -r0]
    4a9c:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    4aa0:	07000000 	streq	r0, [r0, -r0]
    4aa4:	e7040a00 	str	r0, [r4, -r0, lsl #20]
    4aa8:	1f000005 	svcne	0x00000005
    4aac:	000017f5 	strdeq	r1, [r0], -r5
    4ab0:	30150d0c 	andscc	r0, r5, ip, lsl #26
    4ab4:	05000007 	streq	r0, [r0, #-7]
    4ab8:	00059c03 	andeq	r9, r5, r3, lsl #24
    4abc:	07090f20 	streq	r0, [r9, -r0, lsr #30]
    4ac0:	07680000 	strbeq	r0, [r8, -r0]!
    4ac4:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    4ac8:	02000000 	andeq	r0, r0, #0
    4acc:	18641f00 	stmdane	r4!, {r8, r9, sl, fp, ip}^
    4ad0:	130c0000 	movwne	r0, #49152	; 0xc000
    4ad4:	00075814 	andeq	r5, r7, r4, lsl r8
    4ad8:	c8030500 	stmdagt	r3, {r8, sl}
    4adc:	0f200005 	svceq	0x00200005
    4ae0:	0000078a 	andeq	r0, r0, sl, lsl #15
    4ae4:	0000078a 	andeq	r0, r0, sl, lsl #15
    4ae8:	0000881e 	andeq	r8, r0, lr, lsl r8
    4aec:	0a000200 	beq	52f4 <patchGenfskRfe+0x254>
    4af0:	0004c004 	andeq	ip, r4, r4
    4af4:	17b01f00 	ldrne	r1, [r0, r0, lsl #30]!
    4af8:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
    4afc:	00077a13 	andeq	r7, r7, r3, lsl sl
    4b00:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
    4b04:	0f200005 	svceq	0x00200005
    4b08:	00000081 	andeq	r0, r0, r1, lsl #1
    4b0c:	000007b2 			; <UNDEFINED> instruction: 0x000007b2
    4b10:	0000881e 	andeq	r8, r0, lr, lsl r8
    4b14:	1f000200 	svcne	0x00000200
    4b18:	00001788 	andeq	r1, r0, r8, lsl #15
    4b1c:	a20f1e0c 	andge	r1, pc, #12, 28	; 0xc0
    4b20:	05000007 	streq	r0, [r0, #-7]
    4b24:	0005d403 	andeq	sp, r5, r3, lsl #8
    4b28:	07d40f20 	ldrbeq	r0, [r4, r0, lsr #30]
    4b2c:	07d40000 	ldrbeq	r0, [r4, r0]
    4b30:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    4b34:	02000000 	andeq	r0, r0, #0
    4b38:	81040a00 	tsthi	r4, r0, lsl #20
    4b3c:	1f000004 	svcne	0x00000004
    4b40:	00001906 	andeq	r1, r0, r6, lsl #18
    4b44:	c41b230c 	ldrgt	r2, [fp], #-780	; 0xfffffcf4
    4b48:	05000007 	streq	r0, [r0, #-7]
    4b4c:	0005e003 	andeq	lr, r5, r3
    4b50:	74012020 	strvc	r2, [r1], #-32	; 0xffffffe0
    4b54:	01000018 	tsteq	r0, r8, lsl r0
    4b58:	0101050d 	tsteq	r1, sp, lsl #10
    4b5c:	000023c0 	andeq	r2, r0, r0, asr #7
    4b60:	000023c2 	andeq	r2, r0, r2, asr #7
    4b64:	01219c01 			; <UNDEFINED> instruction: 0x01219c01
    4b68:	00001797 	muleq	r0, r7, r7
    4b6c:	01050501 	tsteq	r5, r1, lsl #10
    4b70:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    4b7c:	639c0100 	orrsvs	r0, ip, #0, 2
    4b80:	22000008 	andcs	r0, r0, #8
    4b84:	00796870 	rsbseq	r6, r9, r0, ror r8
    4b88:	2d050501 	cfstr32cs	mvfx0, [r5, #-4]
    4b8c:	00000081 	andeq	r0, r0, r1, lsl #1
    4b90:	0000134c 	andeq	r1, r0, ip, asr #6
    4b94:	00114e23 	andseq	r4, r1, r3, lsr #28
    4b98:	00000000 	andeq	r0, r0, r0
    4b9c:	00093800 	andeq	r3, r9, r0, lsl #16
    4ba0:	050a0100 	streq	r0, [sl, #-256]	; 0xffffff00
    4ba4:	11602409 	cmnne	r0, r9, lsl #8
    4ba8:	136a0000 	cmnne	sl, #0
    4bac:	38250000 	stmdacc	r5!, {}	; <UNPREDICTABLE>
    4bb0:	26000009 	strcs	r0, [r0], -r9
    4bb4:	0000116b 	andeq	r1, r0, fp, ror #2
    4bb8:	0000137d 	andeq	r1, r0, sp, ror r3
    4bbc:	00117626 	andseq	r7, r1, r6, lsr #12
    4bc0:	00139b00 	andseq	r9, r3, r0, lsl #22
    4bc4:	00000000 	andeq	r0, r0, r0
    4bc8:	18a10127 	stmiane	r1!, {r0, r1, r2, r5, r8}
    4bcc:	fa010000 	blx	44bd4 <__ccfg+0x24c2c>
    4bd0:	84010104 	strhi	r0, [r1], #-260	; 0xfffffefc
    4bd4:	c0000023 	andgt	r0, r0, r3, lsr #32
    4bd8:	01000023 	tsteq	r0, r3, lsr #32
    4bdc:	00089d9c 	muleq	r8, ip, sp
    4be0:	6b702200 	blvs	1c0d3e8 <__ccfg+0x1bed440>
    4be4:	fa010074 	blx	44dbc <__ccfg+0x24e14>
    4be8:	01163004 	tsteq	r6, r4
    4bec:	13c50000 	bicne	r0, r5, #0
    4bf0:	62280000 	eorvs	r0, r8, #0
    4bf4:	04fe0100 	ldrbteq	r0, [lr], #256	; 0x100
    4bf8:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4bfc:	0013e300 	andseq	lr, r3, r0, lsl #6
    4c00:	040a0000 	streq	r0, [sl], #-0
    4c04:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    4c08:	16ed0121 	strbtne	r0, [sp], r1, lsr #2
    4c0c:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    4c10:	16010104 	strne	r0, [r1], -r4, lsl #2
    4c14:	50000001 	andpl	r0, r0, r1
    4c18:	84000023 	strhi	r0, [r0], #-35	; 0xffffffdd
    4c1c:	01000023 	tsteq	r0, r3, lsr #32
    4c20:	0008f19c 	muleq	r8, ip, r1
    4c24:	68702200 	ldmdavs	r0!, {r9, sp}^
    4c28:	e9010079 	stmdb	r1, {r0, r3, r4, r5, r6}
    4c2c:	00812f04 	addeq	r2, r1, r4, lsl #30
    4c30:	14010000 	strne	r0, [r1], #-0
    4c34:	6f280000 	svcvs	0x00280000
    4c38:	ed010071 	stc	0, cr0, [r1, #-452]	; 0xfffffe3c
    4c3c:	078a0b04 	streq	r0, [sl, r4, lsl #22]
    4c40:	141f0000 	ldrne	r0, [pc], #-0	; 4c48 <__aeabi_lmul+0x344>
    4c44:	62280000 	eorvs	r0, r8, #0
    4c48:	04ee0100 	strbteq	r0, [lr], #256	; 0x100
    4c4c:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4c50:	00143200 	andseq	r3, r4, r0, lsl #4
    4c54:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4c58:	0000176b 	andeq	r1, r0, fp, ror #14
    4c5c:	0104d201 	tsteq	r4, r1, lsl #4
    4c60:	00011601 	andeq	r1, r1, r1, lsl #12
    4c64:	00231000 	eoreq	r1, r3, r0
    4c68:	00235000 	eoreq	r5, r3, r0
    4c6c:	509c0100 	addspl	r0, ip, r0, lsl #2
    4c70:	22000009 	andcs	r0, r0, #9
    4c74:	00796870 	rsbseq	r6, r9, r0, ror r8
    4c78:	2f04d201 	svccs	0x0004d201
    4c7c:	00000081 	andeq	r0, r0, r1, lsl #1
    4c80:	00001451 	andeq	r1, r0, r1, asr r4
    4c84:	6e656c22 	cdpvs	12, 6, cr6, cr5, cr2, {1}
    4c88:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    4c8c:	00043239 	andeq	r3, r4, r9, lsr r2
    4c90:	00146f00 	andseq	r6, r4, r0, lsl #30
    4c94:	716f2800 	cmnvc	pc, r0, lsl #16
    4c98:	04d70100 	ldrbeq	r0, [r7], #256	; 0x100
    4c9c:	00078a0b 	andeq	r8, r7, fp, lsl #20
    4ca0:	00148d00 	andseq	r8, r4, r0, lsl #26
    4ca4:	00622800 	rsbeq	r2, r2, r0, lsl #16
    4ca8:	0c04d801 	stceq	8, cr13, [r4], {1}
    4cac:	0000089d 	muleq	r0, sp, r8
    4cb0:	000014ab 	andeq	r1, r0, fp, lsr #9
    4cb4:	f4012100 	vst4.8	{d2,d4,d6,d8}, [r1], r0
    4cb8:	01000018 	tsteq	r0, r8, lsl r0
    4cbc:	010104a1 	smlatbeq	r1, r1, r4, r0
    4cc0:	00000081 	andeq	r0, r0, r1, lsl #1
    4cc4:	00002274 	andeq	r2, r0, r4, ror r2
    4cc8:	00002310 	andeq	r2, r0, r0, lsl r3
    4ccc:	09eb9c01 	stmibeq	fp!, {r0, sl, fp, ip, pc}^
    4cd0:	70220000 	eorvc	r0, r2, r0
    4cd4:	01007968 	tsteq	r0, r8, ror #18
    4cd8:	812b04a1 	smulwbhi	fp, r1, r4
    4cdc:	d5000000 	strle	r0, [r0, #-0]
    4ce0:	22000014 	andcs	r0, r0, #20
    4ce4:	a1010070 	tstge	r1, r0, ror r0
    4ce8:	01163804 	tsteq	r6, r4, lsl #16
    4cec:	15090000 	strne	r0, [r9, #-0]
    4cf0:	6c220000 	stcvs	0, cr0, [r2], #-0
    4cf4:	01006e65 	tsteq	r0, r5, ror #28
    4cf8:	813f04a1 	teqhi	pc, r1, lsr #9
    4cfc:	3d000000 	stccc	0, cr0, [r0, #-0]
    4d00:	29000015 	stmdbcs	r0, {r0, r2, r4}
    4d04:	00676c70 	rsbeq	r6, r7, r0, ror ip
    4d08:	0604a601 	streq	sl, [r4], -r1, lsl #12
    4d0c:	00000081 	andeq	r0, r0, r1, lsl #1
    4d10:	70736428 	rsbsvc	r6, r3, r8, lsr #8
    4d14:	04a60100 	strteq	r0, [r6], #256	; 0x100
    4d18:	0000810b 	andeq	r8, r0, fp, lsl #2
    4d1c:	00157100 	andseq	r7, r5, r0, lsl #2
    4d20:	65732a00 	ldrbvs	r2, [r3, #-2560]!	; 0xfffff600
    4d24:	a6010073 			; <UNDEFINED> instruction: 0xa6010073
    4d28:	00811004 	addeq	r1, r1, r4
    4d2c:	91020000 	mrsls	r0, (UNDEF: 2)
    4d30:	70612a50 	rsbvc	r2, r1, r0, asr sl
    4d34:	04a70100 	strteq	r0, [r7], #256	; 0x100
    4d38:	0003550b 	andeq	r5, r3, fp, lsl #10
    4d3c:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    4d40:	01006328 	tsteq	r0, r8, lsr #6
    4d44:	160a04a8 	strne	r0, [sl], -r8, lsr #9
    4d48:	8f000001 	svchi	0x00000001
    4d4c:	00000015 	andeq	r0, r0, r5, lsl r0
    4d50:	171a0121 	ldrne	r0, [sl, -r1, lsr #2]
    4d54:	87010000 	strhi	r0, [r1, -r0]
    4d58:	81010104 	tsthi	r1, r4, lsl #2
    4d5c:	24000000 	strcs	r0, [r0], #-0
    4d60:	74000022 	strvc	r0, [r0], #-34	; 0xffffffde
    4d64:	01000022 	tsteq	r0, r2, lsr #32
    4d68:	000a4a9c 	muleq	sl, ip, sl
    4d6c:	68702200 	ldmdavs	r0!, {r9, sp}^
    4d70:	87010079 	smlsdxhi	r1, r9, r0, r0
    4d74:	00812b04 	addeq	r2, r1, r4, lsl #22
    4d78:	15a20000 	strne	r0, [r2, #0]!
    4d7c:	70220000 	eorvc	r0, r2, r0
    4d80:	87010073 	smlsdxhi	r1, r3, r0, r0
    4d84:	07093a04 	streq	r3, [r9, -r4, lsl #20]
    4d88:	15c00000 	strbne	r0, [r0]
    4d8c:	782b0000 	stmdavc	fp!, {}	; <UNPREDICTABLE>
    4d90:	0100000e 	tsteq	r0, lr
    4d94:	81420487 	smlalbbhi	r0, r2, r7, r4
    4d98:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    4d9c:	28000015 	stmdacs	r0, {r0, r2, r4}
    4da0:	8d010071 	stchi	0, cr0, [r1, #-452]	; 0xfffffe3c
    4da4:	078a0b04 	streq	r0, [sl, r4, lsl #22]
    4da8:	15fc0000 	ldrbne	r0, [ip, #0]!
    4dac:	2c000000 	stccs	0, cr0, [r0], {-0}
    4db0:	00181401 	andseq	r1, r8, r1, lsl #8
    4db4:	03860100 	orreq	r0, r6, #0, 2
    4db8:	01160101 	tsteq	r6, r1, lsl #2
    4dbc:	91010000 	mrsls	r0, (UNDEF: 1)
    4dc0:	2d00000a 	stccs	0, cr0, [r0, #-40]	; 0xffffffd8
    4dc4:	00001d8e 	andeq	r1, r0, lr, lsl #27
    4dc8:	2d038601 	stccs	6, cr8, [r3, #-4]
    4dcc:	00000081 	andeq	r0, r0, r1, lsl #1
    4dd0:	7073642e 	rsbsvc	r6, r3, lr, lsr #8
    4dd4:	03860100 	orreq	r0, r6, #0, 2
    4dd8:	00008137 	andeq	r8, r0, r7, lsr r1
    4ddc:	65732e00 	ldrbvs	r2, [r3, #-3584]!	; 0xfffff200
    4de0:	86010073 			; <UNDEFINED> instruction: 0x86010073
    4de4:	00814003 	addeq	r4, r1, r3
    4de8:	70290000 	eorvc	r0, r9, r0
    4dec:	038a0100 	orreq	r0, sl, #0, 2
    4df0:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4df4:	01270000 			; <UNDEFINED> instruction: 0x01270000
    4df8:	0000170d 	andeq	r1, r0, sp, lsl #14
    4dfc:	01037f01 	tsteq	r3, r1, lsl #30
    4e00:	00000001 	andeq	r0, r0, r1
    4e04:	00000000 	andeq	r0, r0, r0
    4e08:	cb9c0100 	blgt	fe705210 <_estack+0xde700210>
    4e0c:	2200000a 	andcs	r0, r0, #10
    4e10:	7f010070 	svcvc	0x00010070
    4e14:	01163203 	tsteq	r6, r3, lsl #4
    4e18:	162b0000 	strtne	r0, [fp], -r0
    4e1c:	64220000 	strtvs	r0, [r2], #-0
    4e20:	01007073 	tsteq	r0, r3, ror r0
    4e24:	8139037f 	teqhi	r9, pc, ror r3
    4e28:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    4e2c:	00000016 	andeq	r0, r0, r6, lsl r0
    4e30:	18850121 	stmne	r5, {r0, r5, r8}
    4e34:	6b010000 	blvs	44e3c <__ccfg+0x24e94>
    4e38:	16010103 	strne	r0, [r1], -r3, lsl #2
    4e3c:	00000001 	andeq	r0, r0, r1
    4e40:	00000000 	andeq	r0, r0, r0
    4e44:	01000000 	mrseq	r0, (UNDEF: 0)
    4e48:	000b259c 	muleq	fp, ip, r5
    4e4c:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4e50:	33036b01 	movwcc	r6, #15105	; 0x3b01
    4e54:	00000116 	andeq	r0, r0, r6, lsl r1
    4e58:	00001651 	andeq	r1, r0, r1, asr r6
    4e5c:	0018e72b 	andseq	lr, r8, fp, lsr #14
    4e60:	036b0100 	cmneq	fp, #0, 2
    4e64:	0000813a 	andeq	r8, r0, sl, lsr r1
    4e68:	00166f00 	andseq	r6, r6, r0, lsl #30
    4e6c:	63702800 	cmnvs	r0, #0, 16
    4e70:	036f0100 	cmneq	pc, #0, 2
    4e74:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4e78:	00168d00 	andseq	r8, r6, r0, lsl #26
    4e7c:	70702900 	rsbsvc	r2, r0, r0, lsl #18
    4e80:	036f0100 	cmneq	pc, #0, 2
    4e84:	00089d11 	andeq	r9, r8, r1, lsl sp
    4e88:	01270000 			; <UNDEFINED> instruction: 0x01270000
    4e8c:	000017a4 	andeq	r1, r0, r4, lsr #15
    4e90:	01036301 	tsteq	r3, r1, lsl #6
    4e94:	00000001 	andeq	r0, r0, r1
    4e98:	00000000 	andeq	r0, r0, r0
    4e9c:	5f9c0100 	svcpl	0x009c0100
    4ea0:	2200000b 	andcs	r0, r0, #11
    4ea4:	63010070 	movwvs	r0, #4208	; 0x1070
    4ea8:	01163103 	tsteq	r6, r3, lsl #2
    4eac:	16ab0000 	strtne	r0, [fp], r0
    4eb0:	70220000 	eorvc	r0, r2, r0
    4eb4:	01007968 	tsteq	r0, r8, ror #18
    4eb8:	81380363 	teqhi	r8, r3, ror #6
    4ebc:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    4ec0:	00000016 	andeq	r0, r0, r6, lsl r0
    4ec4:	18900127 	ldmne	r0, {r0, r1, r2, r5, r8}
    4ec8:	5a010000 	bpl	44ed0 <__ccfg+0x24f28>
    4ecc:	00010103 	andeq	r0, r1, r3, lsl #2
    4ed0:	00000000 	andeq	r0, r0, r0
    4ed4:	01000000 	mrseq	r0, (UNDEF: 0)
    4ed8:	000b999c 	muleq	fp, ip, r9
    4edc:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4ee0:	31035a01 	tstcc	r3, r1, lsl #20
    4ee4:	00000116 	andeq	r0, r0, r6, lsl r1
    4ee8:	000016e7 	andeq	r1, r0, r7, ror #13
    4eec:	73657322 	cmnvc	r5, #-2013265920	; 0x88000000
    4ef0:	035a0100 	cmpeq	sl, #0, 2
    4ef4:	00008138 	andeq	r8, r0, r8, lsr r1
    4ef8:	00170500 	andseq	r0, r7, r0, lsl #10
    4efc:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    4f00:	00001926 	andeq	r1, r0, r6, lsr #18
    4f04:	01035201 	tsteq	r3, r1, lsl #4
    4f08:	00008101 	andeq	r8, r0, r1, lsl #2
    4f0c:	0bd50100 	bleq	ff545314 <_estack+0xdf540314>
    4f10:	702e0000 	eorvc	r0, lr, r0
    4f14:	01007968 	tsteq	r0, r8, ror #18
    4f18:	812d0352 			; <UNDEFINED> instruction: 0x812d0352
    4f1c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    4f20:	0074706f 	rsbseq	r7, r4, pc, rrx
    4f24:	36035201 	strcc	r5, [r3], -r1, lsl #4
    4f28:	00000081 	andeq	r0, r0, r1, lsl #1
    4f2c:	6772612e 	ldrbvs	r6, [r2, -lr, lsr #2]!
    4f30:	03520100 	cmpeq	r2, #0, 2
    4f34:	00011643 	andeq	r1, r1, r3, asr #12
    4f38:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4f3c:	000016f8 	strdeq	r1, [r0], -r8
    4f40:	01033301 	tsteq	r3, r1, lsl #6
    4f44:	00008101 	andeq	r8, r0, r1, lsl #2
    4f48:	00215c00 	eoreq	r5, r1, r0, lsl #24
    4f4c:	0021bc00 	eoreq	fp, r1, r0, lsl #24
    4f50:	3e9c0100 	fmlcce	f0, f4, f0
    4f54:	2200000c 	andcs	r0, r0, #12
    4f58:	01006466 	tsteq	r0, r6, ror #8
    4f5c:	812c0333 			; <UNDEFINED> instruction: 0x812c0333
    4f60:	23000000 	movwcs	r0, #0
    4f64:	22000017 	andcs	r0, r0, #23
    4f68:	0074706f 	rsbseq	r7, r4, pc, rrx
    4f6c:	34033301 	strcc	r3, [r3], #-769	; 0xfffffcff
    4f70:	00000081 	andeq	r0, r0, r1, lsl #1
    4f74:	00001762 	andeq	r1, r0, r2, ror #14
    4f78:	67726122 	ldrbvs	r6, [r2, -r2, lsr #2]!
    4f7c:	03330100 	teqeq	r3, #0, 2
    4f80:	00011641 	andeq	r1, r1, r1, asr #12
    4f84:	00178b00 	andseq	r8, r7, r0, lsl #22
    4f88:	216a2f00 	cmncs	sl, r0, lsl #30
    4f8c:	21780000 	cmncs	r8, r0
    4f90:	70280000 	eorvc	r0, r8, r0
    4f94:	033c0100 	teqeq	ip, #0, 2
    4f98:	0007d415 	andeq	sp, r7, r5, lsl r4
    4f9c:	0017b400 	andseq	fp, r7, r0, lsl #8
    4fa0:	27000000 	strcs	r0, [r0, -r0]
    4fa4:	00177f01 	andseq	r7, r7, r1, lsl #30
    4fa8:	032b0100 			; <UNDEFINED> instruction: 0x032b0100
    4fac:	00000101 	andeq	r0, r0, r1, lsl #2
    4fb0:	00000000 	andeq	r0, r0, r0
    4fb4:	9c010000 	stcls	0, cr0, [r1], {-0}
    4fb8:	00000c67 	andeq	r0, r0, r7, ror #24
    4fbc:	01007022 	tsteq	r0, r2, lsr #32
    4fc0:	162e032b 	strtne	r0, [lr], -fp, lsr #6
    4fc4:	c7000001 	strgt	r0, [r0, -r1]
    4fc8:	00000017 	andeq	r0, r0, r7, lsl r0
    4fcc:	183b0121 	ldmdane	fp!, {r0, r5, r8}
    4fd0:	1a010000 	bne	44fd8 <__ccfg+0x25030>
    4fd4:	81010103 	tsthi	r1, r3, lsl #2
	...
    4fe0:	01000000 	mrseq	r0, (UNDEF: 0)
    4fe4:	000cc19c 	muleq	ip, ip, r1
    4fe8:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4fec:	2e031a01 	vmlacs.f32	s2, s6, s2
    4ff0:	00000116 	andeq	r0, r0, r6, lsl r1
    4ff4:	000017e5 	andeq	r1, r0, r5, ror #15
    4ff8:	66756222 	ldrbtvs	r6, [r5], -r2, lsr #4
    4ffc:	031a0100 	tsteq	sl, #0, 2
    5000:	0002593d 	andeq	r5, r2, sp, lsr r9
    5004:	00180300 	andseq	r0, r8, r0, lsl #6
    5008:	656c2200 	strbvs	r2, [ip, #-512]!	; 0xfffffe00
    500c:	1a01006e 	bne	451cc <__ccfg+0x25224>
    5010:	00814603 	addeq	r4, r1, r3, lsl #12
    5014:	18160000 	ldmdane	r6, {}	; <UNPREDICTABLE>
    5018:	62290000 	eorvs	r0, r9, #0
    501c:	031e0100 	tsteq	lr, #0, 2
    5020:	00089d0c 	andeq	r9, r8, ip, lsl #26
    5024:	01210000 			; <UNDEFINED> instruction: 0x01210000
    5028:	00001704 	andeq	r1, r0, r4, lsl #14
    502c:	01030801 	tsteq	r3, r1, lsl #16
    5030:	00008101 	andeq	r8, r0, r1, lsl #2
    5034:	0020f400 	eoreq	pc, r0, r0, lsl #8
    5038:	00212e00 	eoreq	r2, r1, r0, lsl #28
    503c:	1b9c0100 	blne	fe705444 <_estack+0xde700444>
    5040:	2200000d 	andcs	r0, r0, #13
    5044:	08010070 	stmdaeq	r1, {r4, r5, r6}
    5048:	01162d03 	tsteq	r6, r3, lsl #26
    504c:	18340000 	ldmdane	r4!, {}	; <UNPREDICTABLE>
    5050:	62220000 	eorvs	r0, r2, #0
    5054:	01006675 	tsteq	r0, r5, ror r6
    5058:	1b360308 	blne	d85c80 <__ccfg+0xd65cd8>
    505c:	5200000d 	andpl	r0, r0, #13
    5060:	22000018 	andcs	r0, r0, #24
    5064:	006e656c 	rsbeq	r6, lr, ip, ror #10
    5068:	3f030801 	svccc	0x00030801
    506c:	00000081 	andeq	r0, r0, r1, lsl #1
    5070:	00001870 	andeq	r1, r0, r0, ror r8
    5074:	01006229 	tsteq	r0, r9, lsr #4
    5078:	9d0c030c 	stcls	3, cr0, [ip, #-48]	; 0xffffffd0
    507c:	00000008 	andeq	r0, r0, r8
    5080:	00e3040a 	rsceq	r0, r3, sl, lsl #8
    5084:	01210000 			; <UNDEFINED> instruction: 0x01210000
    5088:	00001832 	andeq	r1, r0, r2, lsr r8
    508c:	0102cd01 	tsteq	r2, r1, lsl #26
    5090:	00011601 	andeq	r1, r1, r1, lsl #12
    5094:	00203800 	eoreq	r3, r0, r0, lsl #16
    5098:	0020f400 	eoreq	pc, r0, r0, lsl #8
    509c:	bf9c0100 	svclt	0x009c0100
    50a0:	2b00000d 	blcs	50dc <patchGenfskRfe+0x3c>
    50a4:	00000070 	andeq	r0, r0, r0, ror r0
    50a8:	2e02cd01 	cdpcs	13, 0, cr12, cr2, cr1, {0}
    50ac:	000000cd 	andeq	r0, r0, sp, asr #1
    50b0:	0000188e 	andeq	r1, r0, lr, lsl #17
    50b4:	00646622 	rsbeq	r6, r4, r2, lsr #12
    50b8:	3902cd01 	stmdbcc	r2, {r0, r8, sl, fp, lr, pc}
    50bc:	00000081 	andeq	r0, r0, r1, lsl #1
    50c0:	000018ac 	andeq	r1, r0, ip, lsr #17
    50c4:	0018e02b 	andseq	lr, r8, fp, lsr #32
    50c8:	02cd0100 	sbceq	r0, sp, #0, 2
    50cc:	00008141 	andeq	r8, r0, r1, asr #2
    50d0:	0018d500 	andseq	sp, r8, r0, lsl #10
    50d4:	72752200 	rsbsvc	r2, r5, #0, 4
    50d8:	ce010067 	cdpgt	0, 0, cr0, cr1, cr7, {3}
    50dc:	00c11102 	sbceq	r1, r1, r2, lsl #2
    50e0:	191f0000 	ldmdbne	pc, {}	; <UNPREDICTABLE>
    50e4:	62280000 	eorvs	r0, r8, #0
    50e8:	02cf0100 	sbceq	r0, pc, #0, 2
    50ec:	00089d0c 	andeq	r9, r8, ip, lsl #26
    50f0:	00193200 	andseq	r3, r9, r0, lsl #4
    50f4:	18243000 	stmdane	r4!, {ip, sp}
    50f8:	d0010000 	andle	r0, r1, r0
    50fc:	03550b02 	cmpeq	r5, #2048	; 0x800
    5100:	91020000 	mrsls	r0, (UNDEF: 2)
    5104:	00732a64 	rsbseq	r2, r3, r4, ror #20
    5108:	0d02d101 	stfeqd	f5, [r2, #-4]
    510c:	00000740 	andeq	r0, r0, r0, asr #14
    5110:	65285701 	strvs	r5, [r8, #-1793]!	; 0xfffff8ff
    5114:	01006469 	tsteq	r0, r9, ror #8
    5118:	810602d2 	ldrdhi	r0, [r6, -r2]
    511c:	50000000 	andpl	r0, r0, r0
    5120:	00000019 	andeq	r0, r0, r9, lsl r0
    5124:	18010121 	stmdane	r1, {r0, r5, r8}
    5128:	a4010000 	strge	r0, [r1], #-0
    512c:	81010102 	tsthi	r1, r2, lsl #2
	...
    5138:	01000000 	mrseq	r0, (UNDEF: 0)
    513c:	000e729c 	muleq	lr, ip, r2
    5140:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    5144:	02a40100 	adceq	r0, r4, #0, 2
    5148:	0000812a 	andeq	r8, r0, sl, lsr #2
    514c:	00197900 	andseq	r7, r9, r0, lsl #18
    5150:	18e72b00 	stmiane	r7!, {r8, r9, fp, sp}^
    5154:	a4010000 	strge	r0, [r1], #-0
    5158:	00813202 	addeq	r3, r1, r2, lsl #4
    515c:	19ad0000 	stmibne	sp!, {}	; <UNPREDICTABLE>
    5160:	73280000 			; <UNDEFINED> instruction: 0x73280000
    5164:	02a80100 	adceq	r0, r8, #0, 2
    5168:	0007400d 	andeq	r4, r7, sp
    516c:	0019e100 	andseq	lr, r9, r0, lsl #2
    5170:	716e2800 	cmnvc	lr, r0, lsl #16
    5174:	02a90100 	adceq	r0, r9, #0, 2
    5178:	00008106 	andeq	r8, r0, r6, lsl #2
    517c:	001a4600 	andseq	r4, sl, r0, lsl #12
    5180:	71722800 	cmnvc	r2, r0, lsl #16
    5184:	02aa0100 	adceq	r0, sl, #0, 2
    5188:	00078a0b 	andeq	r8, r7, fp, lsl #20
    518c:	001a6400 	andseq	r6, sl, r0, lsl #8
    5190:	00622800 	rsbeq	r2, r2, r0, lsl #16
    5194:	0c02ab01 			; <UNDEFINED> instruction: 0x0c02ab01
    5198:	0000089d 	muleq	r0, sp, r8
    519c:	00001a82 	andeq	r1, r0, r2, lsl #21
    51a0:	0017ef31 	andseq	lr, r7, r1, lsr pc
    51a4:	02c00100 	sbceq	r0, r0, #0, 2
    51a8:	00000001 	andeq	r0, r0, r1
    51ac:	114e3200 	mrsne	r3, SPSR_fiq
	...
    51b8:	bb010000 	bllt	451c0 <__ccfg+0x25218>
    51bc:	60330a02 	eorsvs	r0, r3, r2, lsl #20
    51c0:	26000011 			; <UNDEFINED> instruction: 0x26000011
    51c4:	0000116b 	andeq	r1, r0, fp, ror #2
    51c8:	00001aab 	andeq	r1, r0, fp, lsr #21
    51cc:	00117626 	andseq	r7, r1, r6, lsr #12
    51d0:	001abe00 	andseq	fp, sl, r0, lsl #28
    51d4:	21000000 	mrscs	r0, (UNDEF: 0)
    51d8:	0016d001 	andseq	sp, r6, r1
    51dc:	027d0100 	rsbseq	r0, sp, #0, 2
    51e0:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    51ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    51f0:	00000eef 	andeq	r0, r0, pc, ror #29
    51f4:	00646622 	rsbeq	r6, r4, r2, lsr #12
    51f8:	2a027d01 	bcs	a4604 <__ccfg+0x8465c>
    51fc:	00000081 	andeq	r0, r0, r1, lsl #1
    5200:	00001ad1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    5204:	0018e72b 	andseq	lr, r8, fp, lsr #14
    5208:	027d0100 	rsbseq	r0, sp, #0, 2
    520c:	00008132 	andeq	r8, r0, r2, lsr r1
    5210:	001b0500 	andseq	r0, fp, r0, lsl #10
    5214:	00732800 	rsbseq	r2, r3, r0, lsl #16
    5218:	0d028101 	stfeqd	f0, [r2, #-4]
    521c:	00000740 	andeq	r0, r0, r0, asr #14
    5220:	00001b2e 	andeq	r1, r0, lr, lsr #22
    5224:	00716e28 	rsbseq	r6, r1, r8, lsr #28
    5228:	06028201 	streq	r8, [r2], -r1, lsl #4
    522c:	00000081 	andeq	r0, r0, r1, lsl #1
    5230:	00001b93 	muleq	r0, r3, fp
    5234:	00717228 	rsbseq	r7, r1, r8, lsr #4
    5238:	0b028301 	bleq	a5e44 <__ccfg+0x85e9c>
    523c:	0000078a 	andeq	r0, r0, sl, lsl #15
    5240:	00001bb1 			; <UNDEFINED> instruction: 0x00001bb1
    5244:	01006228 	tsteq	r0, r8, lsr #4
    5248:	9d0c0284 	sfmls	f0, 4, [ip, #-528]	; 0xfffffdf0
    524c:	da000008 	ble	5274 <patchGenfskRfe+0x1d4>
    5250:	0000001b 	andeq	r0, r0, fp, lsl r0
    5254:	18ec0121 	stmiane	ip!, {r0, r5, r8}^
    5258:	56010000 	strpl	r0, [r1], -r0
    525c:	16010102 	strne	r0, [r1], -r2, lsl #2
    5260:	b8000001 	stmdalt	r0, {r0}
    5264:	3800001f 	stmdacc	r0, {r0, r1, r2, r3, r4}
    5268:	01000020 	tsteq	r0, r0, lsr #32
    526c:	000f5c9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
    5270:	00702b00 	rsbseq	r2, r0, r0, lsl #22
    5274:	56010000 	strpl	r0, [r1], -r0
    5278:	00cd2d02 	sbceq	r2, sp, r2, lsl #26
    527c:	1c0e0000 	stcne	0, cr0, [lr], {-0}
    5280:	66220000 	strtvs	r0, [r2], -r0
    5284:	56010064 	strpl	r0, [r1], -r4, rrx
    5288:	00813802 	addeq	r3, r1, r2, lsl #16
    528c:	1c210000 	stcne	0, cr0, [r1], #-0
    5290:	70280000 	eorvc	r0, r8, r0
    5294:	025d0100 	subseq	r0, sp, #0, 2
    5298:	0001160a 	andeq	r1, r1, sl, lsl #12
    529c:	001c6000 	andseq	r6, ip, r0
    52a0:	00622800 	rsbeq	r2, r2, r0, lsl #16
    52a4:	0c025e01 	stceq	14, cr5, [r2], {1}
    52a8:	0000089d 	muleq	r0, sp, r8
    52ac:	00001c73 	andeq	r1, r0, r3, ror ip
    52b0:	00717228 	rsbseq	r7, r1, r8, lsr #4
    52b4:	0b025f01 	bleq	9cec0 <__ccfg+0x7cf18>
    52b8:	0000078a 	andeq	r0, r0, sl, lsl #15
    52bc:	00001c9c 	muleq	r0, ip, ip
    52c0:	b7012100 	strlt	r2, [r1, -r0, lsl #2]
    52c4:	01000018 	tsteq	r0, r8, lsl r0
    52c8:	0101024a 	tsteq	r1, sl, asr #4
    52cc:	00000081 	andeq	r0, r0, r1, lsl #1
    52d0:	00001f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    52d4:	00001fb8 			; <UNDEFINED> instruction: 0x00001fb8
    52d8:	0f999c01 	svceq	0x00999c01
    52dc:	6f220000 	svcvs	0x00220000
    52e0:	01006472 	tsteq	r0, r2, ror r4
    52e4:	8129024a 			; <UNDEFINED> instruction: 0x8129024a
    52e8:	d6000000 	strle	r0, [r0], -r0
    52ec:	3400001c 	strcc	r0, [r0], #-28	; 0xffffffe4
    52f0:	01006c70 	tsteq	r0, r0, ror ip
    52f4:	d43f024a 	ldrtle	r0, [pc], #-586	; 52fc <patchGenfskRfe+0x25c>
    52f8:	01000007 	tsteq	r0, r7
    52fc:	01210051 	qsubeq	r0, r1, r1
    5300:	00001845 	andeq	r1, r0, r5, asr #16
    5304:	01022901 	tsteq	r2, r1, lsl #18
    5308:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    5314:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    5318:	2b00000f 	blcs	535c <patchGenfskRfe+0x2bc>
    531c:	00000070 	andeq	r0, r0, r0, ror r0
    5320:	2b022901 	blcs	8f72c <__ccfg+0x6f784>
    5324:	000000cd 	andeq	r0, r0, sp, asr #1
    5328:	00001cf4 	strdeq	r1, [r0], -r4
    532c:	00646622 	rsbeq	r6, r4, r2, lsr #12
    5330:	36022901 	strcc	r2, [r2], -r1, lsl #18
    5334:	00000081 	andeq	r0, r0, r1, lsl #1
    5338:	00001d12 	andeq	r1, r0, r2, lsl sp
    533c:	01007328 	tsteq	r0, r8, lsr #6
    5340:	400d022b 	andmi	r0, sp, fp, lsr #4
    5344:	5c000007 	stcpl	0, cr0, [r0], {7}
    5348:	2800001d 	stmdacs	r0, {r0, r2, r3, r4}
    534c:	2c010062 	stccs	0, cr0, [r1], {98}	; 0x62
    5350:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    5354:	1d6f0000 	stclne	0, cr0, [pc, #-0]	; 535c <patchGenfskRfe+0x2bc>
    5358:	21000000 	mrscs	r0, (UNDEF: 0)
    535c:	00177601 	andseq	r7, r7, r1, lsl #12
    5360:	01f60100 	mvnseq	r0, r0, lsl #2
    5364:	00810101 	addeq	r0, r1, r1, lsl #2
    5368:	1ed40000 	cdpne	0, 13, cr0, cr4, cr0, {0}
    536c:	1f940000 	svcne	0x00940000
    5370:	9c010000 	stcls	0, cr0, [r1], {-0}
    5374:	00001083 	andeq	r1, r0, r3, lsl #1
    5378:	0000702b 	andeq	r7, r0, fp, lsr #32
    537c:	01f60100 	mvnseq	r0, r0, lsl #2
    5380:	0000cd2a 	andeq	ip, r0, sl, lsr #26
    5384:	001d8200 	andseq	r8, sp, r0, lsl #4
    5388:	68702200 	ldmdavs	r0!, {r9, sp}^
    538c:	f6010079 			; <UNDEFINED> instruction: 0xf6010079
    5390:	00813501 	addeq	r3, r1, r1, lsl #10
    5394:	1dab0000 	stcne	0, cr0, [fp]
    5398:	9c2b0000 	stcls	0, cr0, [fp], #-0
    539c:	01000018 	tsteq	r0, r8, lsl r0
    53a0:	813e01f6 	teqhi	lr, r6	; <illegal shifter operand>
    53a4:	00000000 	andeq	r0, r0, r0
    53a8:	3500001e 	strcc	r0, [r0, #-30]	; 0xffffffe2
    53ac:	00646628 	rsbeq	r6, r4, r8, lsr #12
    53b0:	0601f801 	streq	pc, [r1], -r1, lsl #16
    53b4:	00000081 	andeq	r0, r0, r1, lsl #1
    53b8:	00001e38 	andeq	r1, r0, r8, lsr lr
    53bc:	0017e336 	andseq	lr, r7, r6, lsr r3
    53c0:	01f90100 	mvnseq	r0, r0, lsl #2
    53c4:	0005560a 	andeq	r5, r5, sl, lsl #12
    53c8:	00732800 	rsbseq	r2, r3, r0, lsl #16
    53cc:	0d01fa01 	vstreq	s30, [r1, #-4]
    53d0:	00000740 	andeq	r0, r0, r0, asr #14
    53d4:	00001e56 	andeq	r1, r0, r6, asr lr
    53d8:	0070612a 	rsbseq	r6, r0, sl, lsr #2
    53dc:	0b01fc01 	bleq	843e8 <__ccfg+0x64440>
    53e0:	000000b5 	strheq	r0, [r0], -r5
    53e4:	00549102 	subseq	r9, r4, r2, lsl #2
    53e8:	180b0127 	stmdane	fp, {r0, r1, r2, r5, r8}
    53ec:	3b010000 	blcc	453f4 <__ccfg+0x2544c>
    53f0:	64010101 	strvs	r0, [r1], #-257	; 0xfffffeff
    53f4:	d400001e 	strle	r0, [r0], #-30	; 0xffffffe2
    53f8:	0100001e 	tsteq	r0, lr, lsl r0
    53fc:	0010bb9c 	mulseq	r0, ip, fp
    5400:	00702200 	rsbseq	r2, r0, r0, lsl #4
    5404:	2e013b01 	vmlacs.f64	d3, d1, d1
    5408:	00000116 	andeq	r0, r0, r6, lsl r1
    540c:	00001ea0 	andeq	r1, r0, r0, lsr #29
    5410:	01006228 	tsteq	r0, r8, lsr #4
    5414:	9d0c0141 	stflss	f0, [ip, #-260]	; 0xfffffefc
    5418:	c9000008 	stmdbgt	r0, {r3}
    541c:	0000001e 	andeq	r0, r0, lr, lsl r0
    5420:	62706137 	rsbsvs	r6, r0, #-1073741811	; 0xc000000d
    5424:	01140100 	tsteq	r4, r0, lsl #2
    5428:	089d0101 	ldmeq	sp, {r0, r8}
    542c:	1d4c0000 	stclne	0, cr0, [ip, #-0]
    5430:	1d620000 	stclne	0, cr0, [r2, #-0]
    5434:	9c010000 	stcls	0, cr0, [r1], {-0}
    5438:	00001102 	andeq	r1, r0, r2, lsl #2
    543c:	001d8e2b 	andseq	r8, sp, fp, lsr #28
    5440:	01140100 	tsteq	r4, r0, lsl #2
    5444:	0000cd2b 	andeq	ip, r0, fp, lsr #26
    5448:	001efd00 	andseq	pc, lr, r0, lsl #26
    544c:	00702a00 	rsbseq	r2, r0, r0, lsl #20
    5450:	0c011901 			; <UNDEFINED> instruction: 0x0c011901
    5454:	0000089d 	muleq	r0, sp, r8
    5458:	63295001 			; <UNDEFINED> instruction: 0x63295001
    545c:	1a010073 	bne	45630 <__ccfg+0x25688>
    5460:	00cd0701 	sbceq	r0, sp, r1, lsl #14
    5464:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    5468:	00706c72 	rsbseq	r6, r0, r2, ror ip
    546c:	01010401 	tsteq	r1, r1, lsl #8
    5470:	001d7c01 	andseq	r7, sp, r1, lsl #24
    5474:	001d8a00 	andseq	r8, sp, r0, lsl #20
    5478:	2a9c0100 	bcs	fe705880 <_estack+0xde700880>
    547c:	22000011 	andcs	r0, r0, #17
    5480:	04010070 	streq	r0, [r1], #-112	; 0xffffff90
    5484:	089d2b01 	ldmeq	sp, {r0, r8, r9, fp, sp}
    5488:	1f100000 	svcne	0x00100000
    548c:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    5490:	00001712 	andeq	r1, r0, r2, lsl r7
    5494:	0101e001 	tsteq	r1, r1
    5498:	00114e01 	andseq	r4, r1, r1, lsl #28
    549c:	00703a00 	rsbseq	r3, r0, r0, lsl #20
    54a0:	9d2fe001 	stcls	0, cr14, [pc, #-4]!	; 54a4 <patchGenfskRfe+0x404>
    54a4:	3a000008 	bcc	54cc <patchGenfskRfe+0x42c>
    54a8:	01007664 	tsteq	r0, r4, ror #12
    54ac:	008136e0 	addeq	r3, r1, r0, ror #13
    54b0:	3b000000 	blcc	54b8 <patchGenfskRfe+0x418>
    54b4:	00001791 	muleq	r0, r1, r7
    54b8:	0101cf01 	tsteq	r1, r1, lsl #30
    54bc:	00000081 	andeq	r0, r0, r1, lsl #1
    54c0:	00118101 	andseq	r8, r1, r1, lsl #2
    54c4:	716f3a00 	cmnvc	pc, r0, lsl #20
    54c8:	2bcf0100 	blcs	ff3c58d0 <_estack+0xdf3c08d0>
    54cc:	0000078a 	andeq	r0, r0, sl, lsl #15
    54d0:	00716e3c 	rsbseq	r6, r1, ip, lsr lr
    54d4:	8106d301 	tsthi	r6, r1, lsl #6
    54d8:	3c000000 	stccc	0, cr0, [r0], {-0}
    54dc:	d4010062 	strle	r0, [r1], #-98	; 0xffffff9e
    54e0:	00089d0c 	andeq	r9, r8, ip, lsl #26
    54e4:	653d0000 	ldrvs	r0, [sp, #-0]!
    54e8:	0100716e 	tsteq	r0, lr, ror #2
    54ec:	010101a8 	smlatbeq	r1, r8, r1, r0
    54f0:	000011a4 	andeq	r1, r0, r4, lsr #3
    54f4:	0100713a 	tsteq	r0, sl, lsr r1
    54f8:	078a2aa8 	streq	r2, [sl, r8, lsr #21]
    54fc:	703a0000 	eorsvc	r0, sl, r0
    5500:	37a80100 	strcc	r0, [r8, r0, lsl #2]!
    5504:	0000089d 	muleq	r0, sp, r8
    5508:	65643d00 	strbvs	r3, [r4, #-3328]!	; 0xfffff300
    550c:	7f010071 	svcvc	0x00010071
    5510:	bd010101 	stflts	f0, [r1, #-4]
    5514:	3a000011 	bcc	5560 <patchGenfskRfe+0x4c0>
    5518:	7f010070 	svcvc	0x00010070
    551c:	00089d2b 	andeq	r9, r8, fp, lsr #26
    5520:	a43e0000 	ldrtge	r0, [lr], #-0
    5524:	62000011 	andvs	r0, r0, #17
    5528:	7c00001d 	stcvc	0, cr0, [r0], {29}
    552c:	0100001d 	tsteq	r0, sp, lsl r0
    5530:	0011f29c 	mulseq	r1, ip, r2
    5534:	11b23f00 			; <UNDEFINED> instruction: 0x11b23f00
    5538:	50010000 	andpl	r0, r1, r0
    553c:	0011a440 	andseq	sl, r1, r0, asr #8
    5540:	001d6800 	andseq	r6, sp, r0, lsl #16
    5544:	001d7a00 	andseq	r7, sp, r0, lsl #20
    5548:	017f0100 	cmneq	pc, r0, lsl #2
    554c:	0011b224 	andseq	fp, r1, r4, lsr #4
    5550:	001f2300 	andseq	r2, pc, r0, lsl #6
    5554:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    5558:	00001181 	andeq	r1, r0, r1, lsl #3
    555c:	00001d8c 	andeq	r1, r0, ip, lsl #27
    5560:	00001dd8 	ldrdeq	r1, [r0], -r8
    5564:	123b9c01 	eorsne	r9, fp, #256	; 0x100
    5568:	8f240000 	svchi	0x00240000
    556c:	36000011 			; <UNDEFINED> instruction: 0x36000011
    5570:	2400001f 	strcs	r0, [r0], #-31	; 0xffffffe1
    5574:	00001199 	muleq	r0, r9, r1
    5578:	00001f6a 	andeq	r1, r0, sl, ror #30
    557c:	00118140 	andseq	r8, r1, r0, asr #2
    5580:	001d9800 	andseq	r9, sp, r0, lsl #16
    5584:	001da000 	andseq	sl, sp, r0
    5588:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    558c:	00118f24 	andseq	r8, r1, r4, lsr #30
    5590:	001f9e00 	andseq	r9, pc, r0, lsl #28
    5594:	11992400 	orrsne	r2, r9, r0, lsl #8
    5598:	1fbc0000 	svcne	0x00bc0000
    559c:	00000000 	andeq	r0, r0, r0
    55a0:	00112a3e 	andseq	r2, r1, lr, lsr sl
    55a4:	001dd800 	andseq	sp, sp, r0, lsl #16
    55a8:	001e6400 	andseq	r6, lr, r0, lsl #8
    55ac:	809c0100 	addshi	r0, ip, r0, lsl #2
    55b0:	24000012 	strcs	r0, [r0], #-18	; 0xffffffee
    55b4:	00001138 	andeq	r1, r0, r8, lsr r1
    55b8:	00001fda 	ldrdeq	r1, [r0], -sl
    55bc:	00114224 	andseq	r4, r1, r4, lsr #4
    55c0:	00202f00 	eoreq	r2, r0, r0, lsl #30
    55c4:	112a4100 			; <UNDEFINED> instruction: 0x112a4100
    55c8:	1e0c0000 	cdpne	0, 0, cr0, cr12, cr0, {0}
    55cc:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
    55d0:	e0010000 	and	r0, r1, r0
    55d4:	11423301 	cmpne	r2, r1, lsl #6
    55d8:	38240000 	stmdacc	r4!, {}	; <UNPREDICTABLE>
    55dc:	42000011 	andmi	r0, r0, #17
    55e0:	00000020 	andeq	r0, r0, r0, lsr #32
    55e4:	0b993e00 	bleq	fe654dec <_estack+0xde64fdec>
    55e8:	21300000 	teqcs	r0, r0
    55ec:	215c0000 	cmpcs	ip, r0
    55f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    55f4:	000012d8 	ldrdeq	r1, [r0], -r8
    55f8:	000bad24 	andeq	sl, fp, r4, lsr #26
    55fc:	00206000 	eoreq	r6, r0, r0
    5600:	0bba2400 	bleq	fee8e608 <_estack+0xdee89608>
    5604:	207e0000 	rsbscs	r0, lr, r0
    5608:	c7240000 	strgt	r0, [r4, -r0]!
    560c:	a700000b 	strge	r0, [r0, -fp]
    5610:	32000020 	andcc	r0, r0, #32
    5614:	00000b99 	muleq	r0, r9, fp
    5618:	00002144 	andeq	r2, r0, r4, asr #2
    561c:	0000214c 	andeq	r2, r0, ip, asr #2
    5620:	01035201 	tsteq	r3, r1, lsl #4
    5624:	000bad33 	andeq	sl, fp, r3, lsr sp
    5628:	0bba2400 	bleq	fee8e630 <_estack+0xdee89630>
    562c:	20d00000 	sbcscs	r0, r0, r0
    5630:	c7240000 	strgt	r0, [r4, -r0]!
    5634:	e300000b 	movw	r0, #11
    5638:	00000020 	andeq	r0, r0, r0, lsr #32
    563c:	0a4a4200 	beq	1295e44 <__ccfg+0x1275e9c>
    5640:	21bc0000 			; <UNDEFINED> instruction: 0x21bc0000
    5644:	22240000 	eorcs	r0, r4, #0
    5648:	9c010000 	stcls	0, cr0, [r1], {-0}
    564c:	000a5e24 	andeq	r5, sl, r4, lsr #28
    5650:	0020f600 	eoreq	pc, r0, r0, lsl #12
    5654:	0a6b2400 	beq	1ace65c <__ccfg+0x1aae6b4>
    5658:	21090000 	mrscs	r0, (UNDEF: 9)
    565c:	78240000 	stmdavc	r4!, {}	; <UNPREDICTABLE>
    5660:	6900000a 	stmdbvs	r0, {r1, r3}
    5664:	26000021 	strcs	r0, [r0], -r1, lsr #32
    5668:	00000a85 	andeq	r0, r0, r5, lsl #21
    566c:	000021b3 			; <UNDEFINED> instruction: 0x000021b3
    5670:	000a4a32 	andeq	r4, sl, r2, lsr sl
    5674:	0021ca00 	eoreq	ip, r1, r0, lsl #20
    5678:	0021ce00 	eoreq	ip, r1, r0, lsl #28
    567c:	03860100 	orreq	r0, r6, #0, 2
    5680:	0a5e3301 	beq	179228c <__ccfg+0x17722e4>
    5684:	6b240000 	blvs	90568c <__ccfg+0x8e56e4>
    5688:	e700000a 	str	r0, [r0, -sl]
    568c:	33000021 	movwcc	r0, #33	; 0x21
    5690:	00000a78 	andeq	r0, r0, r8, ror sl
    5694:	000a8543 	andeq	r8, sl, r3, asr #10
    5698:	00000000 	andeq	r0, r0, r0
    569c:	00000174 	andeq	r0, r0, r4, ror r1
    56a0:	124e0003 	subne	r0, lr, #3
    56a4:	01040000 	mrseq	r0, (UNDEF: 4)
    56a8:	000000a3 	andeq	r0, r0, r3, lsr #1
    56ac:	00196e0c 	andseq	r6, r9, ip, lsl #28
    56b0:	000df700 	andeq	pc, sp, r0, lsl #14
    56b4:	000a4800 	andeq	r4, sl, r0, lsl #16
    56b8:	00000000 	andeq	r0, r0, r0
    56bc:	003dd200 	eorseq	sp, sp, r0, lsl #4
    56c0:	06010200 	streq	r0, [r1], -r0, lsl #4
    56c4:	00000c58 	andeq	r0, r0, r8, asr ip
    56c8:	66050202 	strvs	r0, [r5], -r2, lsl #4
    56cc:	0200000a 	andeq	r0, r0, #10
    56d0:	07f80504 	ldrbeq	r0, [r8, r4, lsl #10]!
    56d4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    56d8:	0007f305 	andeq	pc, r7, r5, lsl #6
    56dc:	08010200 	stmdaeq	r1, {r9}
    56e0:	00000c56 	andeq	r0, r0, r6, asr ip
    56e4:	53070202 	movwpl	r0, #29186	; 0x7202
    56e8:	0300000d 	movweq	r0, #13
    56ec:	000029a1 	andeq	r2, r0, r1, lsr #19
    56f0:	5b193402 	blpl	652700 <__ccfg+0x632758>
    56f4:	02000000 	andeq	r0, r0, #0
    56f8:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
    56fc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5700:	00042307 	andeq	r2, r4, r7, lsl #6
    5704:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    5708:	00746e69 	rsbseq	r6, r4, r9, ror #28
    570c:	2d070402 	cfstrscs	mvf0, [r7, #-8]
    5710:	05000004 	streq	r0, [r0, #-4]
    5714:	00008204 	andeq	r8, r0, r4, lsl #4
    5718:	00770600 	rsbseq	r0, r7, r0, lsl #12
    571c:	01070000 	mrseq	r0, (UNDEF: 7)
    5720:	004f0405 	subeq	r0, pc, r5, lsl #8
    5724:	61080000 	mrsvs	r0, (UNDEF: 8)
    5728:	01000019 	tsteq	r0, r9, lsl r0
    572c:	004f117f 	subeq	r1, pc, pc, ror r1	; <UNPREDICTABLE>
    5730:	01010000 	mrseq	r0, (UNDEF: 1)
    5734:	00474008 	subeq	r4, r7, r8
    5738:	11800100 	orrne	r0, r0, r0, lsl #2
    573c:	0000004f 	andeq	r0, r0, pc, asr #32
    5740:	b2080101 	andlt	r0, r8, #1073741824	; 0x40000000
    5744:	01000019 	tsteq	r0, r9, lsl r0
    5748:	004f1181 	subeq	r1, pc, r1, lsl #3
    574c:	01010000 	mrseq	r0, (UNDEF: 1)
    5750:	0019ad08 	andseq	sl, r9, r8, lsl #26
    5754:	11820100 	orrne	r0, r2, r0, lsl #2
    5758:	0000004f 	andeq	r0, r0, pc, asr #32
    575c:	68080101 	stmdavs	r8, {r0, r8}
    5760:	01000019 	tsteq	r0, r9, lsl r0
    5764:	004f1183 	subeq	r1, pc, r3, lsl #3
    5768:	01010000 	mrseq	r0, (UNDEF: 1)
    576c:	00193308 	andseq	r3, r9, r8, lsl #6
    5770:	11840100 	orrne	r0, r4, r0, lsl #2
    5774:	0000004f 	andeq	r0, r0, pc, asr #32
    5778:	7d090101 	stfvcs	f0, [r9, #-4]
    577c:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    5780:	0a000000 	beq	5788 <patchImageGenfsk+0x34>
    5784:	00000070 	andeq	r0, r0, r0, ror r0
    5788:	de060031 	mcrle	0, 0, r0, cr6, cr1, {1}
    578c:	0b000000 	bleq	5794 <patchImageGenfsk+0x40>
    5790:	000019cb 	andeq	r1, r0, fp, asr #19
    5794:	ee0f8e01 	cdp	14, 0, cr8, cr15, cr1, {0}
    5798:	01000000 	mrseq	r0, (UNDEF: 0)
    579c:	00000305 	andeq	r0, r0, r5, lsl #6
    57a0:	b90c0000 	stmdblt	ip, {}	; <UNPREDICTABLE>
    57a4:	01000019 	tsteq	r0, r9, lsl r0
    57a8:	01010128 	tsteq	r1, r8, lsr #2
    57ac:	000023c6 	andeq	r2, r0, r6, asr #7
    57b0:	000023c8 	andeq	r2, r0, r8, asr #7
    57b4:	440c9c01 	strmi	r9, [ip], #-3073	; 0xfffff3ff
    57b8:	01000019 	tsteq	r0, r9, lsl r0
    57bc:	01010116 	tsteq	r1, r6, lsl r1
    57c0:	000023c4 	andeq	r2, r0, r4, asr #7
    57c4:	000023c6 	andeq	r2, r0, r6, asr #7
    57c8:	540c9c01 	strpl	r9, [ip], #-3073	; 0xfffff3ff
    57cc:	01000019 	tsteq	r0, r9, lsl r0
    57d0:	01010104 	tsteq	r1, r4, lsl #2
    57d4:	000023c2 	andeq	r2, r0, r2, asr #7
    57d8:	000023c4 	andeq	r2, r0, r4, asr #7
    57dc:	010d9c01 	tsteq	sp, r1, lsl #24
    57e0:	000019e2 	andeq	r1, r0, r2, ror #19
    57e4:	0101d201 	tsteq	r1, r1, lsl #4
    57e8:	000023c8 	andeq	r2, r0, r8, asr #7
    57ec:	0000240c 	andeq	r2, r0, ip, lsl #8
    57f0:	3b0e9c01 	blcc	3ac7fc <__ccfg+0x38c854>
    57f4:	01000019 	tsteq	r0, r9, lsl r0
    57f8:	00840fd4 	ldrdeq	r0, [r4], r4
    57fc:	21fa0000 	mvnscs	r0, r0
    5800:	d80e0000 	stmdale	lr, {}	; <UNPREDICTABLE>
    5804:	01000019 	tsteq	r0, r9, lsl r0
    5808:	00841ad4 	ldrdeq	r1, [r4], r4
    580c:	22180000 	andscs	r0, r8, #0
    5810:	00000000 	andeq	r0, r0, r0
    5814:	00000537 	andeq	r0, r0, r7, lsr r5
    5818:	13130003 	tstne	r3, #3
    581c:	01040000 	mrseq	r0, (UNDEF: 4)
    5820:	000000a3 	andeq	r0, r0, r3, lsr #1
    5824:	001a7a0c 	andseq	r7, sl, ip, lsl #20
    5828:	000df700 	andeq	pc, sp, r0, lsl #14
    582c:	003efa00 	eorseq	pc, lr, r0, lsl #20
    5830:	06010200 	streq	r0, [r1], -r0, lsl #4
    5834:	00000c58 	andeq	r0, r0, r8, asr ip
    5838:	66050202 	strvs	r0, [r5], -r2, lsl #4
    583c:	0200000a 	andeq	r0, r0, #10
    5840:	07f80504 	ldrbeq	r0, [r8, r4, lsl #10]!
    5844:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5848:	0007f305 	andeq	pc, r7, r5, lsl #6
    584c:	2a090300 	bcs	246454 <__ccfg+0x2264ac>
    5850:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    5854:	00004518 	andeq	r4, r0, r8, lsl r5
    5858:	08010200 	stmdaeq	r1, {r9}
    585c:	00000c56 	andeq	r0, r0, r6, asr ip
    5860:	002dff03 	eoreq	pc, sp, r3, lsl #30
    5864:	19310100 	ldmdbne	r1!, {r8}
    5868:	00000058 	andeq	r0, r0, r8, asr r0
    586c:	53070202 	movwpl	r0, #29186	; 0x7202
    5870:	0300000d 	movweq	r0, #13
    5874:	000029a1 	andeq	r2, r0, r1, lsr #19
    5878:	6b193401 	blvs	652884 <__ccfg+0x6328dc>
    587c:	02000000 	andeq	r0, r0, #0
    5880:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
    5884:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5888:	00042307 	andeq	r2, r4, r7, lsl #6
    588c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    5890:	00746e69 	rsbseq	r6, r4, r9, ror #28
    5894:	2d070402 	cfstrscs	mvf0, [r7, #-8]
    5898:	05000004 	streq	r0, [r0, #-4]
    589c:	092f0258 	stmdbeq	pc!, {r3, r4, r6, r9}	; <UNPREDICTABLE>
    58a0:	000001af 	andeq	r0, r0, pc, lsr #3
    58a4:	001b9d06 	andseq	r9, fp, r6, lsl #26
    58a8:	10310200 	eorsne	r0, r1, r0, lsl #4
    58ac:	0000005f 	andeq	r0, r0, pc, asr r0
    58b0:	1ab20600 	bne	fec870b8 <_estack+0xdec820b8>
    58b4:	32020000 	andcc	r0, r2, #0
    58b8:	00005f10 	andeq	r5, r0, r0, lsl pc
    58bc:	42060400 	andmi	r0, r6, #0, 8
    58c0:	0200001a 	andeq	r0, r0, #26
    58c4:	005f1033 	subseq	r1, pc, r3, lsr r0	; <UNPREDICTABLE>
    58c8:	06080000 	streq	r0, [r8], -r0
    58cc:	00001a2c 	andeq	r1, r0, ip, lsr #20
    58d0:	5f103402 	svcpl	0x00103402
    58d4:	0c000000 	stceq	0, cr0, [r0], {-0}
    58d8:	0019eb06 	andseq	lr, r9, r6, lsl #22
    58dc:	10350200 	eorsne	r0, r5, r0, lsl #4
    58e0:	0000005f 	andeq	r0, r0, pc, asr r0
    58e4:	19fc0610 	ldmibne	ip!, {r4, r9, sl}^
    58e8:	36020000 	strcc	r0, [r2], -r0
    58ec:	00005f10 	andeq	r5, r0, r0, lsl pc
    58f0:	1c061400 	cfstrsne	mvf1, [r6], {-0}
    58f4:	0200001a 	andeq	r0, r0, #26
    58f8:	005f1037 	subseq	r1, pc, r7, lsr r0	; <UNPREDICTABLE>
    58fc:	06180000 	ldreq	r0, [r8], -r0
    5900:	00001b42 	andeq	r1, r0, r2, asr #22
    5904:	5f103802 	svcpl	0x00103802
    5908:	1c000000 	stcne	0, cr0, [r0], {-0}
    590c:	001a5a06 	andseq	r5, sl, r6, lsl #20
    5910:	10390200 	eorsne	r0, r9, r0, lsl #4
    5914:	0000005f 	andeq	r0, r0, pc, asr r0
    5918:	1a6a0620 	bne	1a871a0 <__ccfg+0x1a671f8>
    591c:	3a020000 	bcc	85924 <__ccfg+0x6597c>
    5920:	00005f10 	andeq	r5, r0, r0, lsl pc
    5924:	68062400 	stmdavs	r6, {sl, sp}
    5928:	0200001b 	andeq	r0, r0, #27
    592c:	005f103b 	subseq	r1, pc, fp, lsr r0	; <UNPREDICTABLE>
    5930:	06280000 	strteq	r0, [r8], -r0
    5934:	00001b78 	andeq	r1, r0, r8, ror fp
    5938:	5f103c02 	svcpl	0x00103c02
    593c:	2c000000 	stccs	0, cr0, [r0], {-0}
    5940:	001a0d06 	andseq	r0, sl, r6, lsl #26
    5944:	103d0200 	eorsne	r0, sp, r0, lsl #4
    5948:	0000005f 	andeq	r0, r0, pc, asr r0
    594c:	1b080630 	blne	207214 <__ccfg+0x1e726c>
    5950:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
    5954:	00005f10 	andeq	r5, r0, r0, lsl pc
    5958:	ad063400 	cfstrsge	mvf3, [r6, #-0]
    595c:	0200001b 	andeq	r0, r0, #27
    5960:	005f103f 	subseq	r1, pc, pc, lsr r0	; <UNPREDICTABLE>
    5964:	06380000 	ldrteq	r0, [r8], -r0
    5968:	00001ac3 	andeq	r1, r0, r3, asr #21
    596c:	5f104002 	svcpl	0x00104002
    5970:	3c000000 	stccc	0, cr0, [r0], {-0}
    5974:	001ad706 	andseq	sp, sl, r6, lsl #14
    5978:	10410200 	subne	r0, r1, r0, lsl #4
    597c:	0000005f 	andeq	r0, r0, pc, asr r0
    5980:	1b2c0640 	blne	b07288 <__ccfg+0xae72e0>
    5984:	42020000 	andmi	r0, r2, #0
    5988:	00005f10 	andeq	r5, r0, r0, lsl pc
    598c:	18064400 	stmdane	r6, {sl, lr}
    5990:	0200001b 	andeq	r0, r0, #27
    5994:	005f1043 	subseq	r1, pc, r3, asr #32
    5998:	06480000 	strbeq	r0, [r8], -r0
    599c:	00001b53 	andeq	r1, r0, r3, asr fp
    59a0:	5f104402 	svcpl	0x00104402
    59a4:	4c000000 	stcmi	0, cr0, [r0], {-0}
    59a8:	001b8806 	andseq	r8, fp, r6, lsl #16
    59ac:	10450200 	subne	r0, r5, r0, lsl #4
    59b0:	0000005f 	andeq	r0, r0, pc, asr r0
    59b4:	1af20650 	bne	ffc872fc <_estack+0xdfc822fc>
    59b8:	46020000 	strmi	r0, [r2], -r0
    59bc:	00005f10 	andeq	r5, r0, r0, lsl pc
    59c0:	03005400 	movweq	r5, #1024	; 0x400
    59c4:	00001aeb 	andeq	r1, r0, fp, ror #21
    59c8:	87034702 	strhi	r4, [r3, -r2, lsl #14]
    59cc:	07000000 	streq	r0, [r0, -r0]
    59d0:	000001af 	andeq	r0, r0, pc, lsr #3
    59d4:	001a3b08 	andseq	r3, sl, r8, lsl #22
    59d8:	154e0200 	strbne	r0, [lr, #-512]	; 0xfffffe00
    59dc:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    59e0:	e8030101 	stmda	r3, {r0, r8}
    59e4:	03000028 	movweq	r0, #40	; 0x28
    59e8:	004c1227 	subeq	r1, ip, r7, lsr #4
    59ec:	ce070000 	cdpgt	0, 0, cr0, cr7, cr0, {0}
    59f0:	09000001 	stmdbeq	r0, {r0}
    59f4:	000001ce 	andeq	r0, r0, lr, asr #3
    59f8:	001daf03 	andseq	sl, sp, r3, lsl #30
    59fc:	122b0300 	eorne	r0, fp, #0, 6
    5a00:	00000039 	andeq	r0, r0, r9, lsr r0
    5a04:	0001e409 	andeq	lr, r1, r9, lsl #8
    5a08:	293a0300 	ldmdbcs	sl!, {r8, r9}
    5a0c:	2c030000 	stccs	0, cr0, [r3], {-0}
    5a10:	00005f12 	andeq	r5, r0, r2, lsl pc
    5a14:	01f50700 	mvnseq	r0, r0, lsl #14
    5a18:	41030000 	mrsmi	r0, (UNDEF: 3)
    5a1c:	03000006 	movweq	r0, #6
    5a20:	005f122d 	subseq	r1, pc, sp, lsr #4
    5a24:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    5a28:	a0093203 	andge	r3, r9, r3, lsl #4
    5a2c:	0a000002 	beq	5a3c <__exidx_end+0x18>
    5a30:	0000002b 	andeq	r0, r0, fp, lsr #32
    5a34:	e4073403 	str	r3, [r7], #-1027	; 0xfffffbfd
    5a38:	01000001 	tsteq	r0, r1
    5a3c:	0a000701 	beq	7648 <__exidx_end+0x1c24>
    5a40:	00000647 	andeq	r0, r0, r7, asr #12
    5a44:	e4033503 	str	r3, [r3], #-1283	; 0xfffffafd
    5a48:	01000001 	tsteq	r0, r1
    5a4c:	0a000601 	beq	7258 <__exidx_end+0x1834>
    5a50:	000002de 	ldrdeq	r0, [r0], -lr
    5a54:	e4033603 	str	r3, [r3], #-1539	; 0xfffff9fd
    5a58:	01000001 	tsteq	r0, r1
    5a5c:	0a000501 	beq	6e68 <__exidx_end+0x1444>
    5a60:	000006b2 			; <UNDEFINED> instruction: 0x000006b2
    5a64:	e4033703 	str	r3, [r3], #-1795	; 0xfffff8fd
    5a68:	01000001 	tsteq	r0, r1
    5a6c:	0a000401 	beq	6a78 <__exidx_end+0x1054>
    5a70:	00000a9a 	muleq	r0, sl, sl
    5a74:	e4033803 	str	r3, [r3], #-2051	; 0xfffff7fd
    5a78:	01000001 	tsteq	r0, r1
    5a7c:	06000004 	streq	r0, [r0], -r4
    5a80:	00000656 	andeq	r0, r0, r6, asr r6
    5a84:	e4073a03 	str	r3, [r7], #-2563	; 0xfffff5fd
    5a88:	01000001 	tsteq	r0, r1
    5a8c:	0008f606 	andeq	pc, r8, r6, lsl #12
    5a90:	033c0300 	teqeq	ip, #0, 6
    5a94:	000001e4 	andeq	r0, r0, r4, ror #3
    5a98:	0f270602 	svceq	0x00270602
    5a9c:	3d030000 	stccc	0, cr0, [r3, #-0]
    5aa0:	0001e403 	andeq	lr, r1, r3, lsl #8
    5aa4:	0e060300 	cdpeq	3, 0, cr0, cr6, cr0, {0}
    5aa8:	03000009 	movweq	r0, #9
    5aac:	01f5083f 	mvnseq	r0, pc, lsr r8
    5ab0:	00040000 	andeq	r0, r4, r0
    5ab4:	00031403 	andeq	r1, r3, r3, lsl #8
    5ab8:	03410300 	movteq	r0, #4864	; 0x1300
    5abc:	00000212 	andeq	r0, r0, r2, lsl r2
    5ac0:	0002a009 	andeq	sl, r2, r9
    5ac4:	06b90800 	ldrteq	r0, [r9], r0, lsl #16
    5ac8:	43030000 	movwmi	r0, #12288	; 0x3000
    5acc:	0002ac1a 	andeq	sl, r2, sl, lsl ip
    5ad0:	08010100 	stmdaeq	r1, {r8}
    5ad4:	00000197 	muleq	r0, r7, r1
    5ad8:	cd0e4503 	cfstr32gt	mvfx4, [lr, #-12]
    5adc:	01000002 	tsteq	r0, r2
    5ae0:	d3040b01 	movwle	r0, #19201	; 0x4b01
    5ae4:	02000002 	andeq	r0, r0, #2
    5ae8:	0c5f0801 	mrrceq	8, 0, r0, pc, cr1	; <UNPREDICTABLE>
    5aec:	d3070000 	movwle	r0, #28672	; 0x7000
    5af0:	08000002 	stmdaeq	r0, {r1}
    5af4:	0000031d 	andeq	r0, r0, sp, lsl r3
    5af8:	cd1e4503 	cfldr32gt	mvfx4, [lr, #-12]
    5afc:	01000002 	tsteq	r0, r2
    5b00:	04080501 	streq	r0, [r8], #-1281	; 0xfffffaff
    5b04:	031e098f 	tsteq	lr, #2342912	; 0x23c000
    5b08:	c5060000 	strgt	r0, [r6, #-0]
    5b0c:	0400000c 	streq	r0, [r0], #-12
    5b10:	005f0b90 			; <UNDEFINED> instruction: 0x005f0b90
    5b14:	06000000 	streq	r0, [r0], -r0
    5b18:	00001062 	andeq	r1, r0, r2, rrx
    5b1c:	ce089104 	mvfgte	f1, f4
    5b20:	04000001 	streq	r0, [r0], #-1
    5b24:	0001bc06 	andeq	fp, r1, r6, lsl #24
    5b28:	10920400 	addsne	r0, r2, r0, lsl #8
    5b2c:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5b30:	b9030006 	stmdblt	r3, {r1, r2}
    5b34:	0400000c 	streq	r0, [r0], #-12
    5b38:	02ed0393 	rsceq	r0, sp, #1275068418	; 0x4c000002
    5b3c:	1e0c0000 	cdpne	0, 0, cr0, cr12, cr0, {0}
    5b40:	35000003 	strcc	r0, [r0, #-3]
    5b44:	0d000003 	stceq	0, cr0, [r0, #-12]
    5b48:	09380800 	ldmdbeq	r8!, {fp}
    5b4c:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    5b50:	00032a0f 	andeq	r2, r3, pc, lsl #20
    5b54:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5b58:	09910501 	ldmibeq	r1, {r0, r8, sl}
    5b5c:	0000036d 	andeq	r0, r0, sp, ror #6
    5b60:	0009150a 	andeq	r1, r9, sl, lsl #10
    5b64:	07930500 	ldreq	r0, [r3, r0, lsl #10]
    5b68:	000001e4 	andeq	r0, r0, r4, ror #3
    5b6c:	00010701 	andeq	r0, r1, r1, lsl #14
    5b70:	0005c70a 	andeq	ip, r5, sl, lsl #14
    5b74:	03940500 	orrseq	r0, r4, #0, 10
    5b78:	000001e4 	andeq	r0, r0, r4, ror #3
    5b7c:	00000101 	andeq	r0, r0, r1, lsl #2
    5b80:	0aa60300 	beq	fe986788 <_estack+0xde981788>
    5b84:	96050000 	strls	r0, [r5], -r0
    5b88:	00034303 	andeq	r4, r3, r3, lsl #6
    5b8c:	036d0700 	cmneq	sp, #0, 14
    5b90:	790c0000 	stmdbvc	ip, {}	; <UNPREDICTABLE>
    5b94:	89000003 	stmdbhi	r0, {r0, r1}
    5b98:	0d000003 	stceq	0, cr0, [r0, #-12]
    5b9c:	037e0700 	cmneq	lr, #0, 14
    5ba0:	ac080000 	stcge	0, cr0, [r8], {-0}
    5ba4:	05000003 	streq	r0, [r0, #-3]
    5ba8:	0389179c 	orreq	r1, r9, #156, 14	; 0x2700000
    5bac:	01010000 	mrseq	r0, (UNDEF: 1)
    5bb0:	0001da0c 	andeq	sp, r1, ip, lsl #20
    5bb4:	0003a700 	andeq	sl, r3, r0, lsl #14
    5bb8:	07000d00 	streq	r0, [r0, -r0, lsl #26]
    5bbc:	0000039c 	muleq	r0, ip, r3
    5bc0:	00060908 	andeq	r0, r6, r8, lsl #18
    5bc4:	13060600 	movwne	r0, #26112	; 0x6600
    5bc8:	000003a7 	andeq	r0, r0, r7, lsr #7
    5bcc:	d8080101 	stmdale	r8, {r0, r8}
    5bd0:	04000008 	streq	r0, [r0], #-8
    5bd4:	01f50ec3 	mvnseq	r0, r3, asr #29
    5bd8:	01010000 	mrseq	r0, (UNDEF: 1)
    5bdc:	000c6d0e 	andeq	r6, ip, lr, lsl #26
    5be0:	016e0700 	cmneq	lr, r0, lsl #14
    5be4:	0003d510 	andeq	sp, r3, r0, lsl r5
    5be8:	db040b00 	blle	1087f0 <__ccfg+0xe8848>
    5bec:	0f000003 	svceq	0x00000003
    5bf0:	0003e701 	andeq	lr, r3, r1, lsl #14
    5bf4:	01ce1000 	biceq	r1, lr, r0
    5bf8:	0c000000 	stceq	0, cr0, [r0], {-0}
    5bfc:	000002da 	ldrdeq	r0, [r0], -sl
    5c00:	000003f2 	strdeq	r0, [r0], -r2
    5c04:	e707000d 	str	r0, [r7, -sp]
    5c08:	11000003 	tstne	r0, r3
    5c0c:	000009e1 	andeq	r0, r0, r1, ror #19
    5c10:	16017f07 	strne	r7, [r1], -r7, lsl #30
    5c14:	000003f2 	strdeq	r0, [r0], -r2
    5c18:	98110101 	ldmdals	r1, {r0, r8}
    5c1c:	07000003 	streq	r0, [r0, -r3]
    5c20:	01140182 	tsteq	r4, r2, lsl #3
    5c24:	01000002 	tsteq	r0, r2
    5c28:	03701101 	cmneq	r0, #1073741824	; 0x40000000
    5c2c:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
    5c30:	01f50e02 	mvnseq	r0, r2, lsl #28
    5c34:	01010000 	mrseq	r0, (UNDEF: 1)
    5c38:	03070812 	movweq	r0, #30738	; 0x7812
    5c3c:	044b0903 	strbeq	r0, [fp], #-2307	; 0xfffff6fd
    5c40:	8e130000 	cdphi	0, 1, cr0, cr3, cr0, {0}
    5c44:	0700003c 	smladxeq	r0, ip, r0, r0
    5c48:	ce070307 	cdpgt	3, 0, cr0, cr7, cr7, {0}
    5c4c:	00000001 	andeq	r0, r0, r1
    5c50:	000fba13 	andeq	fp, pc, r3, lsl sl	; <UNPREDICTABLE>
    5c54:	03080700 	movweq	r0, #34560	; 0x8700
    5c58:	00020608 	andeq	r0, r2, r8, lsl #12
    5c5c:	0e000400 	cfcpyseq	mvf0, mvf0
    5c60:	00000a04 	andeq	r0, r0, r4, lsl #20
    5c64:	03030907 	movweq	r0, #14599	; 0x3907
    5c68:	00000424 	andeq	r0, r0, r4, lsr #8
    5c6c:	00002014 	andeq	r2, r0, r4, lsl r0
    5c70:	0b073000 	bleq	1d1c78 <__ccfg+0x1b1cd0>
    5c74:	04bb0803 	ldrteq	r0, [fp], #2051	; 0x803
    5c78:	11130000 	tstne	r3, r0
    5c7c:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    5c80:	ce080314 	mcrgt	3, 0, r0, cr8, cr4, {0}
    5c84:	00000001 	andeq	r0, r0, r1
    5c88:	000be213 	andeq	lr, fp, r3, lsl r2
    5c8c:	03150700 	tsteq	r5, #0, 14
    5c90:	0001ce08 	andeq	ip, r1, r8, lsl #28
    5c94:	7b130200 	blvc	4c649c <__ccfg+0x4a64f4>
    5c98:	0700004c 	streq	r0, [r0, -ip, asr #32]
    5c9c:	c80b0316 	stmdagt	fp, {r1, r2, r4, r8, r9}
    5ca0:	04000003 	streq	r0, [r0], #-3
    5ca4:	00474113 	subeq	r4, r7, r3, lsl r1
    5ca8:	03170700 	tsteq	r7, #0, 14
    5cac:	00020609 	andeq	r0, r2, r9, lsl #12
    5cb0:	0f130800 	svceq	0x00130800
    5cb4:	07000000 	streq	r0, [r0, -r0]
    5cb8:	bb0f0318 	bllt	3c6920 <__ccfg+0x3a6978>
    5cbc:	0c000004 	stceq	0, cr0, [r0], {4}
    5cc0:	00095813 	andeq	r5, r9, r3, lsl r8
    5cc4:	03190700 	tsteq	r9, #0, 14
    5cc8:	0004cb15 	andeq	ip, r4, r5, lsl fp
    5ccc:	0c002c00 	stceq	12, cr2, [r0], {-0}
    5cd0:	0000044b 	andeq	r0, r0, fp, asr #8
    5cd4:	000004cb 	andeq	r0, r0, fp, asr #9
    5cd8:	00008015 	andeq	r8, r0, r5, lsl r0
    5cdc:	0b000300 	bleq	68e4 <__exidx_end+0xec0>
    5ce0:	00045804 	andeq	r5, r4, r4, lsl #16
    5ce4:	0bd70e00 	bleq	ff5c94ec <_estack+0xdf5c44ec>
    5ce8:	1c070000 	stcne	0, cr0, [r7], {-0}
    5cec:	04581b03 	ldrbeq	r1, [r8], #-2819	; 0xfffff4fd
    5cf0:	b7110000 	ldrlt	r0, [r1, -r0]
    5cf4:	0700000b 	streq	r0, [r0, -fp]
    5cf8:	ed14031e 	ldc	3, cr0, [r4, #-120]	; 0xffffff88
    5cfc:	01000004 	tsteq	r0, r4
    5d00:	d1040b01 	tstle	r4, r1, lsl #22
    5d04:	08000004 	stmdaeq	r0, {r2}
    5d08:	0000070a 	andeq	r0, r0, sl, lsl #14
    5d0c:	ce131d08 	cdpgt	13, 1, cr1, cr3, cr8, {0}
    5d10:	01000001 	tsteq	r0, r1
    5d14:	02e50801 	rsceq	r0, r5, #65536	; 0x10000
    5d18:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    5d1c:	0001df1a 	andeq	sp, r1, sl, lsl pc
    5d20:	08010100 	stmdaeq	r1, {r8}
    5d24:	00000c64 	andeq	r0, r0, r4, ror #24
    5d28:	df241e08 	svcle	0x00241e08
    5d2c:	01000001 	tsteq	r0, r1
    5d30:	0c820801 	stceq	8, cr0, [r2], {1}
    5d34:	22080000 	andcs	r0, r8, #0
    5d38:	0004ed14 	andeq	lr, r4, r4, lsl sp
    5d3c:	16010100 	strne	r0, [r1], -r0, lsl #2
    5d40:	000001c0 	andeq	r0, r0, r0, asr #3
    5d44:	0e021709 	cdpeq	7, 0, cr1, cr2, cr9, {0}
    5d48:	ffa80305 			; <UNDEFINED> instruction: 0xffa80305
    5d4c:	00000001 	andeq	r0, r0, r1
    5d50:	03000005 	movweq	r0, #5
    5d54:	00143200 	andseq	r3, r4, r0, lsl #4
    5d58:	a3010400 	movwge	r0, #5120	; 0x1400
    5d5c:	0c000000 	stceq	0, cr0, [r0], {-0}
    5d60:	00001bcf 	andeq	r1, r0, pc, asr #23
    5d64:	00000df7 	strdeq	r0, [r0], -r7
    5d68:	00000a98 	muleq	r0, r8, sl
    5d6c:	00000000 	andeq	r0, r0, r0
    5d70:	00004087 	andeq	r4, r0, r7, lsl #1
    5d74:	58060102 	stmdapl	r6, {r1, r8}
    5d78:	0200000c 	andeq	r0, r0, #12
    5d7c:	0a660502 	beq	198718c <__ccfg+0x19671e4>
    5d80:	04020000 	streq	r0, [r2], #-0
    5d84:	0007f805 	andeq	pc, r7, r5, lsl #16
    5d88:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    5d8c:	000007f3 	strdeq	r0, [r0], -r3
    5d90:	002a0903 	eoreq	r0, sl, r3, lsl #18
    5d94:	182e0400 	stmdane	lr!, {sl}
    5d98:	0000004d 	andeq	r0, r0, sp, asr #32
    5d9c:	56080102 	strpl	r0, [r8], -r2, lsl #2
    5da0:	0300000c 	movweq	r0, #12
    5da4:	00002dff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    5da8:	60193104 	andsvs	r3, r9, r4, lsl #2
    5dac:	02000000 	andeq	r0, r0, #0
    5db0:	0d530702 	ldcleq	7, cr0, [r3, #-8]
    5db4:	a1030000 	mrsge	r0, (UNDEF: 3)
    5db8:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    5dbc:	00731934 	rsbseq	r1, r3, r4, lsr r9
    5dc0:	04020000 	streq	r0, [r2], #-0
    5dc4:	00042807 	andeq	r2, r4, r7, lsl #16
    5dc8:	07080200 	streq	r0, [r8, -r0, lsl #4]
    5dcc:	00000423 	andeq	r0, r0, r3, lsr #8
    5dd0:	69050404 	stmdbvs	r5, {r2, sl}
    5dd4:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    5dd8:	042d0704 	strteq	r0, [sp], #-1796	; 0xfffff8fc
    5ddc:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    5de0:	05000028 	streq	r0, [r0, #-40]	; 0xffffffd8
    5de4:	00541227 	subseq	r1, r4, r7, lsr #4
    5de8:	8f050000 	svchi	0x00050000
    5dec:	06000000 	streq	r0, [r0], -r0
    5df0:	0000008f 	andeq	r0, r0, pc, lsl #1
    5df4:	001daf03 	andseq	sl, sp, r3, lsl #30
    5df8:	122b0500 	eorne	r0, fp, #0, 10
    5dfc:	00000041 	andeq	r0, r0, r1, asr #32
    5e00:	0000a506 	andeq	sl, r0, r6, lsl #10
    5e04:	00a50500 	adceq	r0, r5, r0, lsl #10
    5e08:	3a030000 	bcc	c5e10 <__ccfg+0xa5e68>
    5e0c:	05000029 	streq	r0, [r0, #-41]	; 0xffffffd7
    5e10:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    5e14:	bb050000 	bllt	145e1c <__ccfg+0x125e74>
    5e18:	03000000 	movweq	r0, #0
    5e1c:	00000641 	andeq	r0, r0, r1, asr #12
    5e20:	67122d05 	ldrvs	r2, [r2, -r5, lsl #26]
    5e24:	03000000 	movweq	r0, #0
    5e28:	00000baf 	andeq	r0, r0, pc, lsr #23
    5e2c:	e4102e05 	ldr	r2, [r0], #-3589	; 0xfffff1fb
    5e30:	07000000 	streq	r0, [r0, -r0]
    5e34:	00008f04 	andeq	r8, r0, r4, lsl #30
    5e38:	05080800 	streq	r0, [r8, #-2048]	; 0xfffff800
    5e3c:	01780932 	cmneq	r8, r2, lsr r9
    5e40:	2b090000 	blcs	245e48 <__ccfg+0x225ea0>
    5e44:	05000000 	streq	r0, [r0, #-0]
    5e48:	00a50734 	adceq	r0, r5, r4, lsr r7
    5e4c:	01010000 	mrseq	r0, (UNDEF: 1)
    5e50:	47090007 	strmi	r0, [r9, -r7]
    5e54:	05000006 	streq	r0, [r0, #-6]
    5e58:	00a50335 	adceq	r0, r5, r5, lsr r3
    5e5c:	01010000 	mrseq	r0, (UNDEF: 1)
    5e60:	de090006 	cdple	0, 0, cr0, cr9, cr6, {0}
    5e64:	05000002 	streq	r0, [r0, #-2]
    5e68:	00a50336 	adceq	r0, r5, r6, lsr r3
    5e6c:	01010000 	mrseq	r0, (UNDEF: 1)
    5e70:	b2090005 	andlt	r0, r9, #5
    5e74:	05000006 	streq	r0, [r0, #-6]
    5e78:	00a50337 	adceq	r0, r5, r7, lsr r3
    5e7c:	01010000 	mrseq	r0, (UNDEF: 1)
    5e80:	9a090004 	bls	245e98 <__ccfg+0x225ef0>
    5e84:	0500000a 	streq	r0, [r0, #-10]
    5e88:	00a50338 	adceq	r0, r5, r8, lsr r3
    5e8c:	04010000 	streq	r0, [r1], #-0
    5e90:	560a0000 	strpl	r0, [sl], -r0
    5e94:	05000006 	streq	r0, [r0, #-6]
    5e98:	00a5073a 	adceq	r0, r5, sl, lsr r7
    5e9c:	0a010000 	beq	45ea4 <__ccfg+0x25efc>
    5ea0:	000008f6 	strdeq	r0, [r0], -r6
    5ea4:	a5033c05 	strge	r3, [r3, #-3077]	; 0xfffff3fb
    5ea8:	02000000 	andeq	r0, r0, #0
    5eac:	000f270a 	andeq	r2, pc, sl, lsl #14
    5eb0:	033d0500 	teqeq	sp, #0, 10
    5eb4:	000000a5 	andeq	r0, r0, r5, lsr #1
    5eb8:	090e0a03 	stmdbeq	lr, {r0, r1, r9, fp}
    5ebc:	3f050000 	svccc	0x00050000
    5ec0:	0000bb08 	andeq	fp, r0, r8, lsl #22
    5ec4:	03000400 	movweq	r0, #1024	; 0x400
    5ec8:	00000314 	andeq	r0, r0, r4, lsl r3
    5ecc:	ea034105 	b	d62e8 <__ccfg+0xb6340>
    5ed0:	06000000 	streq	r0, [r0], -r0
    5ed4:	00000178 	andeq	r0, r0, r8, ror r1
    5ed8:	0006b90b 	andeq	fp, r6, fp, lsl #18
    5edc:	1a430500 	bne	10c72e4 <__ccfg+0x10a733c>
    5ee0:	00000184 	andeq	r0, r0, r4, lsl #3
    5ee4:	970b0101 	strls	r0, [fp, -r1, lsl #2]
    5ee8:	05000001 	streq	r0, [r0, #-1]
    5eec:	01a50e45 			; <UNDEFINED> instruction: 0x01a50e45
    5ef0:	01010000 	mrseq	r0, (UNDEF: 1)
    5ef4:	01ab0407 			; <UNDEFINED> instruction: 0x01ab0407
    5ef8:	01020000 	mrseq	r0, (UNDEF: 2)
    5efc:	000c5f08 	andeq	r5, ip, r8, lsl #30
    5f00:	01ab0500 			; <UNDEFINED> instruction: 0x01ab0500
    5f04:	1d0b0000 	stcne	0, cr0, [fp, #-0]
    5f08:	05000003 	streq	r0, [r0, #-3]
    5f0c:	01a51e45 			; <UNDEFINED> instruction: 0x01a51e45
    5f10:	01010000 	mrseq	r0, (UNDEF: 1)
    5f14:	8f060808 	svchi	0x00060808
    5f18:	0001f609 	andeq	pc, r1, r9, lsl #12
    5f1c:	0cc50a00 	vstmiaeq	r5, {s1-s0}
    5f20:	90060000 	andls	r0, r6, r0
    5f24:	0000670b 	andeq	r6, r0, fp, lsl #14
    5f28:	620a0000 	andvs	r0, sl, #0
    5f2c:	06000010 			; <UNDEFINED> instruction: 0x06000010
    5f30:	008f0891 	umulleq	r0, pc, r1, r8	; <UNPREDICTABLE>
    5f34:	0a040000 	beq	105f3c <__ccfg+0xe5f94>
    5f38:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    5f3c:	b1109206 	tstlt	r0, r6, lsl #4
    5f40:	06000000 	streq	r0, [r0], -r0
    5f44:	0cb90300 	ldceq	3, cr0, [r9]
    5f48:	93060000 	movwls	r0, #24576	; 0x6000
    5f4c:	0001c503 	andeq	ip, r1, r3, lsl #10
    5f50:	01f60c00 	mvnseq	r0, r0, lsl #24
    5f54:	020d0000 	andeq	r0, sp, #0
    5f58:	000d0000 	andeq	r0, sp, r0
    5f5c:	0009380b 	andeq	r3, r9, fp, lsl #16
    5f60:	0f990600 	svceq	0x00990600
    5f64:	00000202 	andeq	r0, r0, r2, lsl #4
    5f68:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    5f6c:	000000b6 	strheq	r0, [r0], -r6
    5f70:	91070108 	tstls	r7, r8, lsl #2
    5f74:	00024b09 	andeq	r4, r2, r9, lsl #22
    5f78:	09150900 	ldmdbeq	r5, {r8, fp}
    5f7c:	93070000 	movwls	r0, #28672	; 0x7000
    5f80:	0000a507 	andeq	sl, r0, r7, lsl #10
    5f84:	01070100 	mrseq	r0, (UNDEF: 23)
    5f88:	05c70900 	strbeq	r0, [r7, #2304]	; 0x900
    5f8c:	94070000 	strls	r0, [r7], #-0
    5f90:	0000a503 	andeq	sl, r0, r3, lsl #10
    5f94:	00010100 	andeq	r0, r1, r0, lsl #2
    5f98:	a6030000 	strge	r0, [r3], -r0
    5f9c:	0700000a 	streq	r0, [r0, -sl]
    5fa0:	02210396 	eoreq	r0, r1, #1476395010	; 0x58000002
    5fa4:	4b050000 	blmi	145fac <__ccfg+0x126004>
    5fa8:	0c000002 	stceq	0, cr0, [r0], {2}
    5fac:	00000257 	andeq	r0, r0, r7, asr r2
    5fb0:	00000267 	andeq	r0, r0, r7, ror #4
    5fb4:	5c05000d 	stcpl	0, cr0, [r5], {13}
    5fb8:	0b000002 	bleq	5fc8 <__exidx_end+0x5a4>
    5fbc:	000003ac 	andeq	r0, r0, ip, lsr #7
    5fc0:	67179c07 	ldrvs	r9, [r7, -r7, lsl #24]
    5fc4:	01000002 	tsteq	r0, r2
    5fc8:	009b0c01 	addseq	r0, fp, r1, lsl #24
    5fcc:	02850000 	addeq	r0, r5, #0
    5fd0:	000d0000 	andeq	r0, sp, r0
    5fd4:	00027a05 	andeq	r7, r2, r5, lsl #20
    5fd8:	06090b00 	streq	r0, [r9], -r0, lsl #22
    5fdc:	06080000 	streq	r0, [r8], -r0
    5fe0:	00028513 	andeq	r8, r2, r3, lsl r5
    5fe4:	0b010100 	bleq	463ec <__ccfg+0x26444>
    5fe8:	000008d8 	ldrdeq	r0, [r0], -r8
    5fec:	bb0ec306 	bllt	3b6c0c <__ccfg+0x396c64>
    5ff0:	01000000 	mrseq	r0, (UNDEF: 0)
    5ff4:	0c6d0e01 	stcleq	14, cr0, [sp], #-4
    5ff8:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
    5ffc:	02b31001 	adcseq	r1, r3, #1
    6000:	04070000 	streq	r0, [r7], #-0
    6004:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    6008:	02c5010f 	sbceq	r0, r5, #-1073741821	; 0xc0000003
    600c:	8f100000 	svchi	0x00100000
    6010:	00000000 	andeq	r0, r0, r0
    6014:	0001b20c 	andeq	fp, r1, ip, lsl #4
    6018:	0002d000 	andeq	sp, r2, r0
    601c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    6020:	000002c5 	andeq	r0, r0, r5, asr #5
    6024:	0009e111 	andeq	lr, r9, r1, lsl r1
    6028:	017f0900 	cmneq	pc, r0, lsl #18
    602c:	0002d016 	andeq	sp, r2, r6, lsl r0
    6030:	11010100 	mrsne	r0, (UNDEF: 17)
    6034:	00000398 	muleq	r0, r8, r3
    6038:	14018209 	strne	r8, [r1], #-521	; 0xfffffdf7
    603c:	000000c7 	andeq	r0, r0, r7, asr #1
    6040:	70110101 	andsvc	r0, r1, r1, lsl #2
    6044:	09000003 	stmdbeq	r0, {r0, r1}
    6048:	bb0e02d8 	bllt	386bb0 <__ccfg+0x366c08>
    604c:	01000000 	mrseq	r0, (UNDEF: 0)
    6050:	09081201 	stmdbeq	r8, {r0, r9, ip}
    6054:	29090303 	stmdbcs	r9, {r0, r1, r8, r9}
    6058:	13000003 	movwne	r0, #3
    605c:	00003c8e 	andeq	r3, r0, lr, lsl #25
    6060:	07030709 	streq	r0, [r3, -r9, lsl #14]
    6064:	0000008f 	andeq	r0, r0, pc, lsl #1
    6068:	0fba1300 	svceq	0x00ba1300
    606c:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
    6070:	00cc0803 	sbceq	r0, ip, r3, lsl #16
    6074:	00040000 	andeq	r0, r4, r0
    6078:	000a040e 	andeq	r0, sl, lr, lsl #8
    607c:	03090900 	movweq	r0, #39168	; 0x9900
    6080:	00030203 	andeq	r0, r3, r3, lsl #4
    6084:	00201400 	eoreq	r1, r0, r0, lsl #8
    6088:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
    608c:	9908030b 	stmdbls	r8, {r0, r1, r3, r8, r9}
    6090:	13000003 	movwne	r0, #3
    6094:	00001f11 	andeq	r1, r0, r1, lsl pc
    6098:	08031409 	stmdaeq	r3, {r0, r3, sl, ip}
    609c:	0000008f 	andeq	r0, r0, pc, lsl #1
    60a0:	0be21300 	bleq	ff88aca8 <_estack+0xdf885ca8>
    60a4:	15090000 	strne	r0, [r9, #-0]
    60a8:	008f0803 	addeq	r0, pc, r3, lsl #16
    60ac:	13020000 	movwne	r0, #8192	; 0x2000
    60b0:	00004c7b 	andeq	r4, r0, fp, ror ip
    60b4:	0b031609 	bleq	cb8e0 <__ccfg+0xab938>
    60b8:	000002a6 	andeq	r0, r0, r6, lsr #5
    60bc:	47411304 	strbmi	r1, [r1, -r4, lsl #6]
    60c0:	17090000 	strne	r0, [r9, -r0]
    60c4:	00cc0903 	sbceq	r0, ip, r3, lsl #18
    60c8:	13080000 	movwne	r0, #32768	; 0x8000
    60cc:	0000000f 	andeq	r0, r0, pc
    60d0:	0f031809 	svceq	0x00031809
    60d4:	00000399 	muleq	r0, r9, r3
    60d8:	0958130c 	ldmdbeq	r8, {r2, r3, r8, r9, ip}^
    60dc:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    60e0:	03a91503 			; <UNDEFINED> instruction: 0x03a91503
    60e4:	002c0000 	eoreq	r0, ip, r0
    60e8:	0003290c 	andeq	r2, r3, ip, lsl #18
    60ec:	0003a900 	andeq	sl, r3, r0, lsl #18
    60f0:	00881500 	addeq	r1, r8, r0, lsl #10
    60f4:	00030000 	andeq	r0, r3, r0
    60f8:	03360407 	teqeq	r6, #117440512	; 0x7000000
    60fc:	d70e0000 	strle	r0, [lr, -r0]
    6100:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    6104:	361b031c 			; <UNDEFINED> instruction: 0x361b031c
    6108:	11000003 	tstne	r0, r3
    610c:	00000bb7 			; <UNDEFINED> instruction: 0x00000bb7
    6110:	14031e09 	strne	r1, [r3], #-3593	; 0xfffff1f7
    6114:	000003cb 	andeq	r0, r0, fp, asr #7
    6118:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    611c:	000003af 	andeq	r0, r0, pc, lsr #7
    6120:	00070a0b 	andeq	r0, r7, fp, lsl #20
    6124:	131d0a00 	tstne	sp, #0, 20
    6128:	0000008f 	andeq	r0, r0, pc, lsl #1
    612c:	e50b0101 	str	r0, [fp, #-257]	; 0xfffffeff
    6130:	0a000002 	beq	6140 <__exidx_end+0x71c>
    6134:	00a01a1e 	adceq	r1, r0, lr, lsl sl
    6138:	01010000 	mrseq	r0, (UNDEF: 1)
    613c:	000c640b 	andeq	r6, ip, fp, lsl #8
    6140:	241e0a00 	ldrcs	r0, [lr], #-2560	; 0xfffff600
    6144:	000000a0 	andeq	r0, r0, r0, lsr #1
    6148:	820b0101 	andhi	r0, fp, #1073741824	; 0x40000000
    614c:	0a00000c 	beq	6184 <__exidx_end+0x760>
    6150:	03cb1422 	biceq	r1, fp, #570425344	; 0x22000000
    6154:	01010000 	mrseq	r0, (UNDEF: 1)
    6158:	00026c16 	andeq	r6, r2, r6, lsl ip
    615c:	100d0100 	andne	r0, sp, r0, lsl #2
    6160:	50210305 	eorpl	r0, r1, r5, lsl #6
    6164:	01170000 	tsteq	r7, r0
    6168:	00001c19 	andeq	r1, r0, r9, lsl ip
    616c:	01061101 	tsteq	r6, r1, lsl #2
	...
    6178:	04bb9c01 	ldrteq	r9, [fp], #3073	; 0xc01
    617c:	73180000 	tstvc	r8, #0
    6180:	11010074 	tstne	r1, r4, ror r0
    6184:	00008f1c 	andeq	r8, r0, ip, lsl pc
    6188:	00223600 	eoreq	r3, r2, r0, lsl #12
    618c:	1c141900 			; <UNDEFINED> instruction: 0x1c141900
    6190:	11010000 	mrsne	r0, (UNDEF: 1)
    6194:	00021b2c 	andeq	r1, r2, ip, lsr #22
    6198:	00225400 	eoreq	r5, r2, r0, lsl #8
    619c:	61761800 	cmnvs	r6, r0, lsl #16
    61a0:	1101006c 	tstne	r1, ip, rrx
    61a4:	0000d83a 	andeq	sp, r0, sl, lsr r8
    61a8:	00227200 	eoreq	r7, r2, r0, lsl #4
    61ac:	00701a00 	rsbseq	r1, r0, r0, lsl #20
    61b0:	bb121301 	bllt	48adbc <__ccfg+0x46ae14>
    61b4:	1b000004 	blne	61cc <__exidx_end+0x7a8>
    61b8:	14010069 	strne	r0, [r1], #-105	; 0xffffff97
    61bc:	00008f07 	andeq	r8, r0, r7, lsl #30
    61c0:	00229000 	eoreq	r9, r2, r0
    61c4:	00761a00 	rsbseq	r1, r6, r0, lsl #20
    61c8:	a5071501 	strge	r1, [r7, #-1281]	; 0xfffffaff
    61cc:	1c000000 	stcne	0, cr0, [r0], {-0}
    61d0:	000004d4 	ldrdeq	r0, [r0], -r4
	...
    61dc:	1c031c01 	stcne	12, cr1, [r3], {1}
    61e0:	000004de 	ldrdeq	r0, [r0], -lr
	...
    61ec:	1d031f01 	stcne	15, cr1, [r3, #-4]
    61f0:	000004e8 	andeq	r0, r0, r8, ror #9
    61f4:	00000000 	andeq	r0, r0, r0
    61f8:	00000a70 	andeq	r0, r0, r0, ror sl
    61fc:	1e0b2601 	cfmadd32ne	mvax0, mvfx2, mvfx11, mvfx1
    6200:	000004f6 	strdeq	r0, [r0], -r6
    6204:	000022a3 	andeq	r2, r0, r3, lsr #5
    6208:	04070000 	streq	r0, [r7], #-0
    620c:	00000257 	andeq	r0, r0, r7, asr r2
    6210:	1c29011f 	stfnes	f0, [r9], #-124	; 0xffffff84
    6214:	0f010000 	svceq	0x00010000
    6218:	00000006 	andeq	r0, r0, r6
    621c:	00000000 	andeq	r0, r0, r0
    6220:	209c0100 	addscs	r0, ip, r0, lsl #2
    6224:	0000126b 	andeq	r1, r0, fp, ror #4
    6228:	01355b02 	teqeq	r5, r2, lsl #22
    622c:	0f8b2003 	svceq	0x008b2003
    6230:	50020000 	andpl	r0, r2, r0
    6234:	21030135 	tstcs	r3, r5, lsr r1
    6238:	00001bc2 	andeq	r1, r0, r2, asr #23
    623c:	0101a403 	tsteq	r1, r3, lsl #8
    6240:	00000067 	andeq	r0, r0, r7, rrx
    6244:	110e2203 	tstne	lr, r3, lsl #4
    6248:	a4030000 	strge	r0, [r3], #-0
    624c:	00006718 	andeq	r6, r0, r8, lsl r7
    6250:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    6254:	03000004 	movweq	r0, #4
    6258:	00162300 	andseq	r2, r6, r0, lsl #6
    625c:	a3010400 	movwge	r0, #5120	; 0x1400
    6260:	0c000000 	stceq	0, cr0, [r0], {-0}
    6264:	00001c73 	andeq	r1, r0, r3, ror ip
    6268:	00000df7 	strdeq	r0, [r0], -r7
    626c:	00000b10 	andeq	r0, r0, r0, lsl fp
    6270:	00000000 	andeq	r0, r0, r0
    6274:	00004329 	andeq	r4, r0, r9, lsr #6
    6278:	58060102 	stmdapl	r6, {r1, r8}
    627c:	0200000c 	andeq	r0, r0, #12
    6280:	0a660502 	beq	1987690 <__ccfg+0x19676e8>
    6284:	04020000 	streq	r0, [r2], #-0
    6288:	0007f805 	andeq	pc, r7, r5, lsl #16
    628c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    6290:	000007f3 	strdeq	r0, [r0], -r3
    6294:	002a0903 	eoreq	r0, sl, r3, lsl #18
    6298:	182e0300 	stmdane	lr!, {r8, r9}
    629c:	0000004d 	andeq	r0, r0, sp, asr #32
    62a0:	56080102 	strpl	r0, [r8], -r2, lsl #2
    62a4:	0300000c 	movweq	r0, #12
    62a8:	00002dff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    62ac:	60193103 	andsvs	r3, r9, r3, lsl #2
    62b0:	02000000 	andeq	r0, r0, #0
    62b4:	0d530702 	ldcleq	7, cr0, [r3, #-8]
    62b8:	a1030000 	mrsge	r0, (UNDEF: 3)
    62bc:	03000029 	movweq	r0, #41	; 0x29
    62c0:	00731934 	rsbseq	r1, r3, r4, lsr r9
    62c4:	04020000 	streq	r0, [r2], #-0
    62c8:	00042807 	andeq	r2, r4, r7, lsl #16
    62cc:	07080200 	streq	r0, [r8, -r0, lsl #4]
    62d0:	00000423 	andeq	r0, r0, r3, lsr #8
    62d4:	69050404 	stmdbvs	r5, {r2, sl}
    62d8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    62dc:	042d0704 	strteq	r0, [sp], #-1796	; 0xfffff8fc
    62e0:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    62e4:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    62e8:	00541227 	subseq	r1, r4, r7, lsr #4
    62ec:	8f050000 	svchi	0x00050000
    62f0:	06000000 	streq	r0, [r0], -r0
    62f4:	0000008f 	andeq	r0, r0, pc, lsl #1
    62f8:	001daf03 	andseq	sl, sp, r3, lsl #30
    62fc:	122b0400 	eorne	r0, fp, #0, 8
    6300:	00000041 	andeq	r0, r0, r1, asr #32
    6304:	0000a506 	andeq	sl, r0, r6, lsl #10
    6308:	293a0300 	ldmdbcs	sl!, {r8, r9}
    630c:	2c040000 	stccs	0, cr0, [r4], {-0}
    6310:	00006712 	andeq	r6, r0, r2, lsl r7
    6314:	00b60500 	adcseq	r0, r6, r0, lsl #10
    6318:	41030000 	mrsmi	r0, (UNDEF: 3)
    631c:	04000006 	streq	r0, [r0], #-6
    6320:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    6324:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    6328:	61093204 	tstvs	r9, r4, lsl #4
    632c:	08000001 	stmdaeq	r0, {r0}
    6330:	0000002b 	andeq	r0, r0, fp, lsr #32
    6334:	a5073404 	strge	r3, [r7, #-1028]	; 0xfffffbfc
    6338:	01000000 	mrseq	r0, (UNDEF: 0)
    633c:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
    6340:	00000647 	andeq	r0, r0, r7, asr #12
    6344:	a5033504 	strge	r3, [r3, #-1284]	; 0xfffffafc
    6348:	01000000 	mrseq	r0, (UNDEF: 0)
    634c:	08000601 	stmdaeq	r0, {r0, r9, sl}
    6350:	000002de 	ldrdeq	r0, [r0], -lr
    6354:	a5033604 	strge	r3, [r3, #-1540]	; 0xfffff9fc
    6358:	01000000 	mrseq	r0, (UNDEF: 0)
    635c:	08000501 	stmdaeq	r0, {r0, r8, sl}
    6360:	000006b2 			; <UNDEFINED> instruction: 0x000006b2
    6364:	a5033704 	strge	r3, [r3, #-1796]	; 0xfffff8fc
    6368:	01000000 	mrseq	r0, (UNDEF: 0)
    636c:	08000401 	stmdaeq	r0, {r0, sl}
    6370:	00000a9a 	muleq	r0, sl, sl
    6374:	a5033804 	strge	r3, [r3, #-2052]	; 0xfffff7fc
    6378:	01000000 	mrseq	r0, (UNDEF: 0)
    637c:	09000004 	stmdbeq	r0, {r2}
    6380:	00000656 	andeq	r0, r0, r6, asr r6
    6384:	a5073a04 	strge	r3, [r7, #-2564]	; 0xfffff5fc
    6388:	01000000 	mrseq	r0, (UNDEF: 0)
    638c:	0008f609 	andeq	pc, r8, r9, lsl #12
    6390:	033c0400 	teqeq	ip, #0, 8
    6394:	000000a5 	andeq	r0, r0, r5, lsr #1
    6398:	0f270902 	svceq	0x00270902
    639c:	3d040000 	stccc	0, cr0, [r4, #-0]
    63a0:	0000a503 	andeq	sl, r0, r3, lsl #10
    63a4:	0e090300 	cdpeq	3, 0, cr0, cr9, cr0, {0}
    63a8:	04000009 	streq	r0, [r0], #-9
    63ac:	00b6083f 	adcseq	r0, r6, pc, lsr r8
    63b0:	00040000 	andeq	r0, r4, r0
    63b4:	00031403 	andeq	r1, r3, r3, lsl #8
    63b8:	03410400 	movteq	r0, #5120	; 0x1400
    63bc:	000000d3 	ldrdeq	r0, [r0], -r3
    63c0:	00016106 	andeq	r6, r1, r6, lsl #2
    63c4:	06b90a00 	ldrteq	r0, [r9], r0, lsl #20
    63c8:	43040000 	movwmi	r0, #16384	; 0x4000
    63cc:	00016d1a 	andeq	r6, r1, sl, lsl sp
    63d0:	0a010100 	beq	467d8 <__ccfg+0x26830>
    63d4:	00000197 	muleq	r0, r7, r1
    63d8:	8e0e4504 	cfsh32hi	mvfx4, mvfx14, #4
    63dc:	01000001 	tsteq	r0, r1
    63e0:	94040b01 	strls	r0, [r4], #-2817	; 0xfffff4ff
    63e4:	02000001 	andeq	r0, r0, #1
    63e8:	0c5f0801 	mrrceq	8, 0, r0, pc, cr1	; <UNPREDICTABLE>
    63ec:	94050000 	strls	r0, [r5], #-0
    63f0:	0a000001 	beq	63fc <__exidx_end+0x9d8>
    63f4:	0000031d 	andeq	r0, r0, sp, lsl r3
    63f8:	8e1e4504 	cfmul32hi	mvfx4, mvfx14, mvfx4
    63fc:	01000001 	tsteq	r0, r1
    6400:	05080701 	streq	r0, [r8, #-1793]	; 0xfffff8ff
    6404:	01df098f 	bicseq	r0, pc, pc, lsl #19
    6408:	c5090000 	strgt	r0, [r9, #-0]
    640c:	0500000c 	streq	r0, [r0, #-12]
    6410:	00670b90 	mlseq	r7, r0, fp, r0
    6414:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    6418:	00001062 	andeq	r1, r0, r2, rrx
    641c:	8f089105 	svchi	0x00089105
    6420:	04000000 	streq	r0, [r0], #-0
    6424:	0001bc09 	andeq	fp, r1, r9, lsl #24
    6428:	10920500 	addsne	r0, r2, r0, lsl #10
    642c:	000000b1 	strheq	r0, [r0], -r1
    6430:	b9030006 	stmdblt	r3, {r1, r2}
    6434:	0500000c 	streq	r0, [r0, #-12]
    6438:	01ae0393 			; <UNDEFINED> instruction: 0x01ae0393
    643c:	df0c0000 	svcle	0x000c0000
    6440:	f6000001 			; <UNDEFINED> instruction: 0xf6000001
    6444:	0d000001 	stceq	0, cr0, [r0, #-4]
    6448:	09380a00 	ldmdbeq	r8!, {r9, fp}
    644c:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    6450:	0001eb0f 	andeq	lr, r1, pc, lsl #22
    6454:	07010100 	streq	r0, [r1, -r0, lsl #2]
    6458:	09910601 	ldmibeq	r1, {r0, r9, sl}
    645c:	0000022e 	andeq	r0, r0, lr, lsr #4
    6460:	00091508 	andeq	r1, r9, r8, lsl #10
    6464:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    6468:	000000a5 	andeq	r0, r0, r5, lsr #1
    646c:	00010701 	andeq	r0, r1, r1, lsl #14
    6470:	0005c708 	andeq	ip, r5, r8, lsl #14
    6474:	03940600 	orrseq	r0, r4, #0, 12
    6478:	000000a5 	andeq	r0, r0, r5, lsr #1
    647c:	00000101 	andeq	r0, r0, r1, lsl #2
    6480:	0aa60300 	beq	fe987088 <_estack+0xde982088>
    6484:	96060000 	strls	r0, [r6], -r0
    6488:	00020403 	andeq	r0, r2, r3, lsl #8
    648c:	022e0500 	eoreq	r0, lr, #0, 10
    6490:	3a0c0000 	bcc	306498 <__ccfg+0x2e64f0>
    6494:	4a000002 	bmi	64a4 <__exidx_end+0xa80>
    6498:	0d000002 	stceq	0, cr0, [r0, #-8]
    649c:	023f0500 	eorseq	r0, pc, #0, 10
    64a0:	ac0a0000 	stcge	0, cr0, [sl], {-0}
    64a4:	06000003 	streq	r0, [r0], -r3
    64a8:	024a179c 	subeq	r1, sl, #156, 14	; 0x2700000
    64ac:	01010000 	mrseq	r0, (UNDEF: 1)
    64b0:	00009b0c 	andeq	r9, r0, ip, lsl #22
    64b4:	00026800 	andeq	r6, r2, r0, lsl #16
    64b8:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    64bc:	0000025d 	andeq	r0, r0, sp, asr r2
    64c0:	0006090a 	andeq	r0, r6, sl, lsl #18
    64c4:	13060700 	movwne	r0, #26368	; 0x6700
    64c8:	00000268 	andeq	r0, r0, r8, ror #4
    64cc:	d80a0101 	stmdale	sl, {r0, r8}
    64d0:	05000008 	streq	r0, [r0, #-8]
    64d4:	00b60ec3 	adcseq	r0, r6, r3, asr #29
    64d8:	01010000 	mrseq	r0, (UNDEF: 1)
    64dc:	000c6d0e 	andeq	r6, ip, lr, lsl #26
    64e0:	016e0800 	cmneq	lr, r0, lsl #16
    64e4:	00029610 	andeq	r9, r2, r0, lsl r6
    64e8:	9c040b00 			; <UNDEFINED> instruction: 0x9c040b00
    64ec:	0f000002 	svceq	0x00000002
    64f0:	0002a801 	andeq	sl, r2, r1, lsl #16
    64f4:	008f1000 	addeq	r1, pc, r0
    64f8:	0c000000 	stceq	0, cr0, [r0], {-0}
    64fc:	0000019b 	muleq	r0, fp, r1
    6500:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    6504:	a805000d 	stmdage	r5, {r0, r2, r3}
    6508:	11000002 	tstne	r0, r2
    650c:	000009e1 	andeq	r0, r0, r1, ror #19
    6510:	16017f08 	strne	r7, [r1], -r8, lsl #30
    6514:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    6518:	98110101 	ldmdals	r1, {r0, r8}
    651c:	08000003 	stmdaeq	r0, {r0, r1}
    6520:	c2140182 	andsgt	r0, r4, #-2147483616	; 0x80000020
    6524:	01000000 	mrseq	r0, (UNDEF: 0)
    6528:	03701101 	cmneq	r0, #1073741824	; 0x40000000
    652c:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    6530:	00b60e02 	adcseq	r0, r6, r2, lsl #28
    6534:	01010000 	mrseq	r0, (UNDEF: 1)
    6538:	03080812 	movweq	r0, #34834	; 0x8812
    653c:	030c0903 	movweq	r0, #51459	; 0xc903
    6540:	8e130000 	cdphi	0, 1, cr0, cr3, cr0, {0}
    6544:	0800003c 	stmdaeq	r0, {r2, r3, r4, r5}
    6548:	8f070307 	svchi	0x00070307
    654c:	00000000 	andeq	r0, r0, r0
    6550:	000fba13 	andeq	fp, pc, r3, lsl sl	; <UNPREDICTABLE>
    6554:	03080800 	movweq	r0, #34816	; 0x8800
    6558:	0000c708 	andeq	ip, r0, r8, lsl #14
    655c:	0e000400 	cfcpyseq	mvf0, mvf0
    6560:	00000a04 	andeq	r0, r0, r4, lsl #20
    6564:	03030908 	movweq	r0, #14600	; 0x3908
    6568:	000002e5 	andeq	r0, r0, r5, ror #5
    656c:	00002014 	andeq	r2, r0, r4, lsl r0
    6570:	0b083000 	bleq	212578 <__ccfg+0x1f25d0>
    6574:	037c0803 	cmneq	ip, #196608	; 0x30000
    6578:	11130000 	tstne	r3, r0
    657c:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    6580:	8f080314 	svchi	0x00080314
    6584:	00000000 	andeq	r0, r0, r0
    6588:	000be213 	andeq	lr, fp, r3, lsl r2
    658c:	03150800 	tsteq	r5, #0, 16
    6590:	00008f08 	andeq	r8, r0, r8, lsl #30
    6594:	7b130200 	blvc	4c6d9c <__ccfg+0x4a6df4>
    6598:	0800004c 	stmdaeq	r0, {r2, r3, r6}
    659c:	890b0316 	stmdbhi	fp, {r1, r2, r4, r8, r9}
    65a0:	04000002 	streq	r0, [r0], #-2
    65a4:	00474113 	subeq	r4, r7, r3, lsl r1
    65a8:	03170800 	tsteq	r7, #0, 16
    65ac:	0000c709 	andeq	ip, r0, r9, lsl #14
    65b0:	0f130800 	svceq	0x00130800
    65b4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    65b8:	7c0f0318 	stcvc	3, cr0, [pc], {24}
    65bc:	0c000003 	stceq	0, cr0, [r0], {3}
    65c0:	00095813 	andeq	r5, r9, r3, lsl r8
    65c4:	03190800 	tsteq	r9, #0, 16
    65c8:	00038c15 	andeq	r8, r3, r5, lsl ip
    65cc:	0c002c00 	stceq	12, cr2, [r0], {-0}
    65d0:	0000030c 	andeq	r0, r0, ip, lsl #6
    65d4:	0000038c 	andeq	r0, r0, ip, lsl #7
    65d8:	00008815 	andeq	r8, r0, r5, lsl r8
    65dc:	0b000300 	bleq	71e4 <__exidx_end+0x17c0>
    65e0:	00031904 	andeq	r1, r3, r4, lsl #18
    65e4:	0bd70e00 	bleq	ff5c9dec <_estack+0xdf5c4dec>
    65e8:	1c080000 	stcne	0, cr0, [r8], {-0}
    65ec:	03191b03 	tsteq	r9, #3072	; 0xc00
    65f0:	b7110000 	ldrlt	r0, [r1, -r0]
    65f4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    65f8:	ae14031e 	mrcge	3, 0, r0, cr4, cr14, {0}
    65fc:	01000003 	tsteq	r0, r3
    6600:	92040b01 	andls	r0, r4, #1024	; 0x400
    6604:	0a000003 	beq	6618 <__exidx_end+0xbf4>
    6608:	0000070a 	andeq	r0, r0, sl, lsl #14
    660c:	8f131d09 	svchi	0x00131d09
    6610:	01000000 	mrseq	r0, (UNDEF: 0)
    6614:	02e50a01 	rsceq	r0, r5, #4096	; 0x1000
    6618:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    661c:	0000a01a 	andeq	sl, r0, sl, lsl r0
    6620:	0a010100 	beq	46a28 <__ccfg+0x26a80>
    6624:	00000c64 	andeq	r0, r0, r4, ror #24
    6628:	a0241e09 	eorge	r1, r4, r9, lsl #28
    662c:	01000000 	mrseq	r0, (UNDEF: 0)
    6630:	0c820a01 	vstmiaeq	r2, {s0}
    6634:	22090000 	andcs	r0, r9, #0
    6638:	0003ae14 	andeq	sl, r3, r4, lsl lr
    663c:	16010100 	strne	r0, [r1], -r0, lsl #2
    6640:	00001c3e 	andeq	r1, r0, lr, lsr ip
    6644:	960f0801 	strls	r0, [pc], -r1, lsl #16
    6648:	05000002 	streq	r0, [r0, #-2]
    664c:	00000003 	andeq	r0, r0, r3
    6650:	1c4f1600 	mcrrne	6, 0, r1, pc, cr0
    6654:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    6658:	00008f0d 	andeq	r8, r0, sp, lsl #30
    665c:	00030500 	andeq	r0, r3, r0, lsl #10
    6660:	17000000 	strne	r0, [r0, -r0]
    6664:	0000026d 	andeq	r0, r0, sp, ror #4
    6668:	050c0a01 	streq	r0, [ip, #-2561]	; 0xfffff5ff
    666c:	00502603 	subseq	r2, r0, r3, lsl #12
    6670:	64011800 	strvs	r1, [r1], #-2048	; 0xfffff800
    6674:	0100001c 	tsteq	r0, ip, lsl r0
    6678:	00010658 	andeq	r0, r1, r8, asr r6
    667c:	00000000 	andeq	r0, r0, r0
    6680:	01000000 	mrseq	r0, (UNDEF: 0)
    6684:	0004479c 	muleq	r4, ip, r7
    6688:	63611900 	cmnvs	r1, #0, 18
    668c:	58010074 	stmdapl	r1, {r2, r4, r5, r6}
    6690:	0002961d 	andeq	r9, r2, sp, lsl r6
    6694:	0022b600 	eoreq	fp, r2, r0, lsl #12
    6698:	01180000 	tsteq	r8, r0
    669c:	00001c57 	andeq	r1, r0, r7, asr ip
    66a0:	01011c01 	tsteq	r1, r1, lsl #24
	...
    66ac:	04de9c01 	ldrbeq	r9, [lr], #3073	; 0xc01
    66b0:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
    66b4:	0100000c 	tsteq	r0, ip
    66b8:	008f011c 	addeq	r0, pc, ip, lsl r1	; <UNPREDICTABLE>
    66bc:	22f20000 	rscscs	r0, r2, #0
    66c0:	391b0000 	ldmdbcc	fp, {}	; <UNPREDICTABLE>
    66c4:	0100001c 	tsteq	r0, ip, lsl r0
    66c8:	00000121 	andeq	r0, r0, r1, lsr #2
    66cc:	461b0000 	ldrmi	r0, [fp], -r0
    66d0:	0100001c 	tsteq	r0, ip, lsl r0
    66d4:	00000130 	andeq	r0, r0, r0, lsr r1
    66d8:	9a1b0000 	bls	6c66e0 <__ccfg+0x6a6738>
    66dc:	0100001d 	tsteq	r0, sp, lsl r0
    66e0:	00000137 	andeq	r0, r0, r7, lsr r1
    66e4:	de1c0000 	cdple	0, 1, cr0, cr12, cr0, {0}
    66e8:	00000004 	andeq	r0, r0, r4
    66ec:	b0000000 	andlt	r0, r0, r0
    66f0:	0100000a 	tsteq	r0, sl
    66f4:	04ad072b 	strteq	r0, [sp], #1835	; 0x72b
    66f8:	ec1d0000 	ldc	0, cr0, [sp], {-0}
    66fc:	00000004 	andeq	r0, r0, r4
    6700:	0004de1c 	andeq	sp, r4, ip, lsl lr
    6704:	00000000 	andeq	r0, r0, r0
    6708:	000ad800 	andeq	sp, sl, r0, lsl #16
    670c:	073e0100 	ldreq	r0, [lr, -r0, lsl #2]!
    6710:	000004c7 	andeq	r0, r0, r7, asr #9
    6714:	0004ec1d 	andeq	lr, r4, sp, lsl ip
    6718:	de1e0000 	cdple	0, 1, cr0, cr14, cr0, {0}
    671c:	00000004 	andeq	r0, r0, r4
    6720:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    6724:	0100000a 	tsteq	r0, sl
    6728:	ec1d074a 	ldc	7, cr0, [sp], {74}	; 0x4a
    672c:	00000004 	andeq	r0, r0, r4
    6730:	1bc21f00 	blne	ff08e338 <_estack+0xdf089338>
    6734:	a4020000 	strge	r0, [r2], #-0
    6738:	00670101 	rsbeq	r0, r7, r1, lsl #2
    673c:	20030000 	andcs	r0, r3, r0
    6740:	0000110e 	andeq	r1, r0, lr, lsl #2
    6744:	6718a402 	ldrvs	sl, [r8, -r2, lsl #8]
    6748:	00000000 	andeq	r0, r0, r0
    674c:	000aa700 	andeq	sl, sl, r0, lsl #14
    6750:	ee000300 	cdp	3, 0, cr0, cr0, cr0, {0}
    6754:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    6758:	0000a301 	andeq	sl, r0, r1, lsl #6
    675c:	1d340c00 	ldcne	12, cr0, [r4, #-0]
    6760:	0df70000 	ldcleq	0, cr0, [r7]
    6764:	0cb00000 	ldceq	0, cr0, [r0]
    6768:	00000000 	andeq	r0, r0, r0
    676c:	466e0000 	strbtmi	r0, [lr], -r0
    6770:	01020000 	mrseq	r0, (UNDEF: 2)
    6774:	000c5806 	andeq	r5, ip, r6, lsl #16
    6778:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    677c:	00000a66 	andeq	r0, r0, r6, ror #20
    6780:	f8050402 			; <UNDEFINED> instruction: 0xf8050402
    6784:	02000007 	andeq	r0, r0, #7
    6788:	07f30508 	ldrbeq	r0, [r3, r8, lsl #10]!
    678c:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    6790:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    6794:	004d182e 	subeq	r1, sp, lr, lsr #16
    6798:	01020000 	mrseq	r0, (UNDEF: 2)
    679c:	000c5608 	andeq	r5, ip, r8, lsl #12
    67a0:	2dff0300 	ldclcs	3, cr0, [pc]	; 67a8 <__exidx_end+0xd84>
    67a4:	31040000 	mrscc	r0, (UNDEF: 4)
    67a8:	00006019 	andeq	r6, r0, r9, lsl r0
    67ac:	07020200 	streq	r0, [r2, -r0, lsl #4]
    67b0:	00000d53 	andeq	r0, r0, r3, asr sp
    67b4:	0029a103 	eoreq	sl, r9, r3, lsl #2
    67b8:	19340400 	ldmdbne	r4!, {sl}
    67bc:	00000073 	andeq	r0, r0, r3, ror r0
    67c0:	28070402 	stmdacs	r7, {r1, sl}
    67c4:	02000004 	andeq	r0, r0, #4
    67c8:	04230708 	strteq	r0, [r3], #-1800	; 0xfffff8f8
    67cc:	04040000 	streq	r0, [r4], #-0
    67d0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    67d4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    67d8:	0000042d 	andeq	r0, r0, sp, lsr #8
    67dc:	00131503 	andseq	r1, r3, r3, lsl #10
    67e0:	12260500 	eorne	r0, r6, #0, 10
    67e4:	00000041 	andeq	r0, r0, r1, asr #32
    67e8:	0028e803 	eoreq	lr, r8, r3, lsl #16
    67ec:	12270500 	eorne	r0, r7, #0, 10
    67f0:	00000054 	andeq	r0, r0, r4, asr r0
    67f4:	00009b05 	andeq	r9, r0, r5, lsl #22
    67f8:	009b0600 	addseq	r0, fp, r0, lsl #12
    67fc:	af030000 	svcge	0x00030000
    6800:	0500001d 	streq	r0, [r0, #-29]	; 0xffffffe3
    6804:	0041122b 	subeq	r1, r1, fp, lsr #4
    6808:	b1060000 	mrslt	r0, (UNDEF: 6)
    680c:	05000000 	streq	r0, [r0, #-0]
    6810:	000000b1 	strheq	r0, [r0], -r1
    6814:	00293a03 	eoreq	r3, r9, r3, lsl #20
    6818:	122c0500 	eorne	r0, ip, #0, 10
    681c:	00000067 	andeq	r0, r0, r7, rrx
    6820:	0000c705 	andeq	ip, r0, r5, lsl #14
    6824:	06410300 	strbeq	r0, [r1], -r0, lsl #6
    6828:	2d050000 	stccs	0, cr0, [r5, #-0]
    682c:	00006712 	andeq	r6, r0, r2, lsl r7
    6830:	05080700 	streq	r0, [r8, #-1792]	; 0xfffff900
    6834:	01720932 	cmneq	r2, r2, lsr r9
    6838:	2b080000 	blcs	206840 <__ccfg+0x1e6898>
    683c:	05000000 	streq	r0, [r0, #-0]
    6840:	00b10734 	adcseq	r0, r1, r4, lsr r7
    6844:	01010000 	mrseq	r0, (UNDEF: 1)
    6848:	47080007 	strmi	r0, [r8, -r7]
    684c:	05000006 	streq	r0, [r0, #-6]
    6850:	00b10335 	adcseq	r0, r1, r5, lsr r3
    6854:	01010000 	mrseq	r0, (UNDEF: 1)
    6858:	de080006 	cdple	0, 0, cr0, cr8, cr6, {0}
    685c:	05000002 	streq	r0, [r0, #-2]
    6860:	00b10336 	adcseq	r0, r1, r6, lsr r3
    6864:	01010000 	mrseq	r0, (UNDEF: 1)
    6868:	b2080005 	andlt	r0, r8, #5
    686c:	05000006 	streq	r0, [r0, #-6]
    6870:	00b10337 	adcseq	r0, r1, r7, lsr r3
    6874:	01010000 	mrseq	r0, (UNDEF: 1)
    6878:	9a080004 	bls	206890 <__ccfg+0x1e68e8>
    687c:	0500000a 	streq	r0, [r0, #-10]
    6880:	00b10338 	adcseq	r0, r1, r8, lsr r3
    6884:	04010000 	streq	r0, [r1], #-0
    6888:	56090000 	strpl	r0, [r9], -r0
    688c:	05000006 	streq	r0, [r0, #-6]
    6890:	00b1073a 	adcseq	r0, r1, sl, lsr r7
    6894:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    6898:	000008f6 	strdeq	r0, [r0], -r6
    689c:	b1033c05 	tstlt	r3, r5, lsl #24
    68a0:	02000000 	andeq	r0, r0, #0
    68a4:	000f2709 	andeq	r2, pc, r9, lsl #14
    68a8:	033d0500 	teqeq	sp, #0, 10
    68ac:	000000b1 	strheq	r0, [r0], -r1
    68b0:	090e0903 	stmdbeq	lr, {r0, r1, r8, fp}
    68b4:	3f050000 	svccc	0x00050000
    68b8:	0000c708 	andeq	ip, r0, r8, lsl #14
    68bc:	03000400 	movweq	r0, #1024	; 0x400
    68c0:	00000314 	andeq	r0, r0, r4, lsl r3
    68c4:	e4034105 	str	r4, [r3], #-261	; 0xfffffefb
    68c8:	06000000 	streq	r0, [r0], -r0
    68cc:	00000172 	andeq	r0, r0, r2, ror r1
    68d0:	0006b90a 	andeq	fp, r6, sl, lsl #18
    68d4:	1a430500 	bne	10c7cdc <__ccfg+0x10a7d34>
    68d8:	0000017e 	andeq	r0, r0, lr, ror r1
    68dc:	970a0101 	strls	r0, [sl, -r1, lsl #2]
    68e0:	05000001 	streq	r0, [r0, #-1]
    68e4:	019f0e45 	orrseq	r0, pc, r5, asr #28
    68e8:	01010000 	mrseq	r0, (UNDEF: 1)
    68ec:	01a5040b 			; <UNDEFINED> instruction: 0x01a5040b
    68f0:	01020000 	mrseq	r0, (UNDEF: 2)
    68f4:	000c5f08 	andeq	r5, ip, r8, lsl #30
    68f8:	01a50500 			; <UNDEFINED> instruction: 0x01a50500
    68fc:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    6900:	05000003 	streq	r0, [r0, #-3]
    6904:	019f1e45 	orrseq	r1, pc, r5, asr #28
    6908:	01010000 	mrseq	r0, (UNDEF: 1)
    690c:	8f060807 	svchi	0x00060807
    6910:	0001f009 	andeq	pc, r1, r9
    6914:	0cc50900 			; <UNDEFINED> instruction: 0x0cc50900
    6918:	90060000 	andls	r0, r6, r0
    691c:	0000670b 	andeq	r6, r0, fp, lsl #14
    6920:	62090000 	andvs	r0, r9, #0
    6924:	06000010 			; <UNDEFINED> instruction: 0x06000010
    6928:	009b0891 	umullseq	r0, fp, r1, r8
    692c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    6930:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    6934:	bd109206 	lfmlt	f1, 1, [r0, #-24]	; 0xffffffe8
    6938:	06000000 	streq	r0, [r0], -r0
    693c:	0cb90300 	ldceq	3, cr0, [r9]
    6940:	93060000 	movwls	r0, #24576	; 0x6000
    6944:	0001bf03 	andeq	fp, r1, r3, lsl #30
    6948:	01f00c00 	mvnseq	r0, r0, lsl #24
    694c:	02070000 	andeq	r0, r7, #0
    6950:	000d0000 	andeq	r0, sp, r0
    6954:	0009380a 	andeq	r3, r9, sl, lsl #16
    6958:	0f990600 	svceq	0x00990600
    695c:	000001fc 	strdeq	r0, [r0], -ip
    6960:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    6964:	000000c2 	andeq	r0, r0, r2, asr #1
    6968:	91070107 	tstls	r7, r7, lsl #2
    696c:	00024509 	andeq	r4, r2, r9, lsl #10
    6970:	09150800 	ldmdbeq	r5, {fp}
    6974:	93070000 	movwls	r0, #28672	; 0x7000
    6978:	0000b107 	andeq	fp, r0, r7, lsl #2
    697c:	01070100 	mrseq	r0, (UNDEF: 23)
    6980:	05c70800 	strbeq	r0, [r7, #2048]	; 0x800
    6984:	94070000 	strls	r0, [r7], #-0
    6988:	0000b103 	andeq	fp, r0, r3, lsl #2
    698c:	00010100 	andeq	r0, r1, r0, lsl #2
    6990:	a6030000 	strge	r0, [r3], -r0
    6994:	0700000a 	streq	r0, [r0, -sl]
    6998:	021b0396 	andseq	r0, fp, #1476395010	; 0x58000002
    699c:	45050000 	strmi	r0, [r5, #-0]
    69a0:	0c000002 	stceq	0, cr0, [r0], {2}
    69a4:	00000251 	andeq	r0, r0, r1, asr r2
    69a8:	00000261 	andeq	r0, r0, r1, ror #4
    69ac:	5605000d 	strpl	r0, [r5], -sp
    69b0:	0a000002 	beq	69c0 <__exidx_end+0xf9c>
    69b4:	000003ac 	andeq	r0, r0, ip, lsr #7
    69b8:	61179c07 	tstvs	r7, r7, lsl #24
    69bc:	01000002 	tsteq	r0, r2
    69c0:	00a70c01 	adceq	r0, r7, r1, lsl #24
    69c4:	027f0000 	rsbseq	r0, pc, #0
    69c8:	000d0000 	andeq	r0, sp, r0
    69cc:	00027405 	andeq	r7, r2, r5, lsl #8
    69d0:	06090a00 	streq	r0, [r9], -r0, lsl #20
    69d4:	06080000 	streq	r0, [r8], -r0
    69d8:	00027f13 	andeq	r7, r2, r3, lsl pc
    69dc:	0a010100 	beq	46de4 <__ccfg+0x26e3c>
    69e0:	000008d8 	ldrdeq	r0, [r0], -r8
    69e4:	c70ec306 	strgt	ip, [lr, -r6, lsl #6]
    69e8:	01000000 	mrseq	r0, (UNDEF: 0)
    69ec:	0c6d0e01 	stcleq	14, cr0, [sp], #-4
    69f0:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
    69f4:	02ad1001 	adceq	r1, sp, #1
    69f8:	040b0000 	streq	r0, [fp], #-0
    69fc:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    6a00:	02bf010f 	adcseq	r0, pc, #-1073741821	; 0xc0000003
    6a04:	9b100000 	blls	406a0c <__ccfg+0x3e6a64>
    6a08:	00000000 	andeq	r0, r0, r0
    6a0c:	0001ac0c 	andeq	sl, r1, ip, lsl #24
    6a10:	0002ca00 	andeq	ip, r2, r0, lsl #20
    6a14:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    6a18:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
    6a1c:	0009e111 	andeq	lr, r9, r1, lsl r1
    6a20:	017f0900 	cmneq	pc, r0, lsl #18
    6a24:	0002ca16 	andeq	ip, r2, r6, lsl sl
    6a28:	11010100 	mrsne	r0, (UNDEF: 17)
    6a2c:	00000398 	muleq	r0, r8, r3
    6a30:	14018209 	strne	r8, [r1], #-521	; 0xfffffdf7
    6a34:	000000d3 	ldrdeq	r0, [r0], -r3
    6a38:	70110101 	andsvc	r0, r1, r1, lsl #2
    6a3c:	09000003 	stmdbeq	r0, {r0, r1}
    6a40:	c70e02d8 			; <UNDEFINED> instruction: 0xc70e02d8
    6a44:	01000000 	mrseq	r0, (UNDEF: 0)
    6a48:	09081201 	stmdbeq	r8, {r0, r9, ip}
    6a4c:	23090303 	movwcs	r0, #37635	; 0x9303
    6a50:	13000003 	movwne	r0, #3
    6a54:	00003c8e 	andeq	r3, r0, lr, lsl #25
    6a58:	07030709 	streq	r0, [r3, -r9, lsl #14]
    6a5c:	0000009b 	muleq	r0, fp, r0
    6a60:	0fba1300 	svceq	0x00ba1300
    6a64:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
    6a68:	00d80803 	sbcseq	r0, r8, r3, lsl #16
    6a6c:	00040000 	andeq	r0, r4, r0
    6a70:	000a040e 	andeq	r0, sl, lr, lsl #8
    6a74:	03090900 	movweq	r0, #39168	; 0x9900
    6a78:	0002fc03 	andeq	pc, r2, r3, lsl #24
    6a7c:	00201400 	eoreq	r1, r0, r0, lsl #8
    6a80:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
    6a84:	9308030b 	movwls	r0, #33547	; 0x830b
    6a88:	13000003 	movwne	r0, #3
    6a8c:	00001f11 	andeq	r1, r0, r1, lsl pc
    6a90:	08031409 	stmdaeq	r3, {r0, r3, sl, ip}
    6a94:	0000009b 	muleq	r0, fp, r0
    6a98:	0be21300 	bleq	ff88b6a0 <_estack+0xdf8866a0>
    6a9c:	15090000 	strne	r0, [r9, #-0]
    6aa0:	009b0803 	addseq	r0, fp, r3, lsl #16
    6aa4:	13020000 	movwne	r0, #8192	; 0x2000
    6aa8:	00004c7b 	andeq	r4, r0, fp, ror ip
    6aac:	0b031609 	bleq	cc2d8 <__ccfg+0xac330>
    6ab0:	000002a0 	andeq	r0, r0, r0, lsr #5
    6ab4:	47411304 	strbmi	r1, [r1, -r4, lsl #6]
    6ab8:	17090000 	strne	r0, [r9, -r0]
    6abc:	00d80903 	sbcseq	r0, r8, r3, lsl #18
    6ac0:	13080000 	movwne	r0, #32768	; 0x8000
    6ac4:	0000000f 	andeq	r0, r0, pc
    6ac8:	0f031809 	svceq	0x00031809
    6acc:	00000393 	muleq	r0, r3, r3
    6ad0:	0958130c 	ldmdbeq	r8, {r2, r3, r8, r9, ip}^
    6ad4:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    6ad8:	03a31503 			; <UNDEFINED> instruction: 0x03a31503
    6adc:	002c0000 	eoreq	r0, ip, r0
    6ae0:	0003230c 	andeq	r2, r3, ip, lsl #6
    6ae4:	0003a300 	andeq	sl, r3, r0, lsl #6
    6ae8:	00881500 	addeq	r1, r8, r0, lsl #10
    6aec:	00030000 	andeq	r0, r3, r0
    6af0:	0330040b 	teqeq	r0, #184549376	; 0xb000000
    6af4:	d70e0000 	strle	r0, [lr, -r0]
    6af8:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    6afc:	301b031c 	andscc	r0, fp, ip, lsl r3
    6b00:	11000003 	tstne	r0, r3
    6b04:	00000bb7 			; <UNDEFINED> instruction: 0x00000bb7
    6b08:	14031e09 	strne	r1, [r3], #-3593	; 0xfffff1f7
    6b0c:	000003c5 	andeq	r0, r0, r5, asr #7
    6b10:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    6b14:	000003a9 	andeq	r0, r0, r9, lsr #7
    6b18:	00070a0a 	andeq	r0, r7, sl, lsl #20
    6b1c:	131d0a00 	tstne	sp, #0, 20
    6b20:	0000009b 	muleq	r0, fp, r0
    6b24:	e50a0101 	str	r0, [sl, #-257]	; 0xfffffeff
    6b28:	0a000002 	beq	6b38 <__exidx_end+0x1114>
    6b2c:	00ac1a1e 	adceq	r1, ip, lr, lsl sl
    6b30:	01010000 	mrseq	r0, (UNDEF: 1)
    6b34:	000c640a 	andeq	r6, ip, sl, lsl #8
    6b38:	241e0a00 	ldrcs	r0, [lr], #-2560	; 0xfffff600
    6b3c:	000000ac 	andeq	r0, r0, ip, lsr #1
    6b40:	820a0101 	andhi	r0, sl, #1073741824	; 0x40000000
    6b44:	0a00000c 	beq	6b7c <__exidx_end+0x1158>
    6b48:	03c51422 	biceq	r1, r5, #570425344	; 0x22000000
    6b4c:	01010000 	mrseq	r0, (UNDEF: 1)
    6b50:	000bbc16 	andeq	fp, fp, r6, lsl ip
    6b54:	0f0f0100 	svceq	0x000f0100
    6b58:	000000c7 	andeq	r0, r0, r7, asr #1
    6b5c:	00000305 	andeq	r0, r0, r5, lsl #6
    6b60:	e0160000 	ands	r0, r6, r0
    6b64:	0100000c 	tsteq	r0, ip
    6b68:	00c7150f 	sbceq	r1, r7, pc, lsl #10
    6b6c:	03050000 	movweq	r0, #20480	; 0x5000
    6b70:	00000000 	andeq	r0, r0, r0
    6b74:	001d8616 	andseq	r8, sp, r6, lsl r6
    6b78:	14100100 	ldrne	r0, [r0], #-256	; 0xffffff00
    6b7c:	00000215 	andeq	r0, r0, r5, lsl r2
    6b80:	00000305 	andeq	r0, r0, r5, lsl #6
    6b84:	ea160000 	b	586b8c <__ccfg+0x566be4>
    6b88:	0100001c 	tsteq	r0, ip, lsl r0
    6b8c:	00b10d12 	adcseq	r0, r1, r2, lsl sp
    6b90:	03050000 	movweq	r0, #20480	; 0x5000
    6b94:	200005ec 	andcs	r0, r0, ip, ror #11
    6b98:	001d2e16 	andseq	r2, sp, r6, lsl lr
    6b9c:	03130100 	tsteq	r3, #0, 2
    6ba0:	000000b1 	strheq	r0, [r0], -r1
    6ba4:	05ed0305 	strbeq	r0, [sp, #773]!	; 0x305
    6ba8:	47162000 	ldrmi	r2, [r6, -r0]
    6bac:	01000016 	tsteq	r0, r6, lsl r0
    6bb0:	009b0d15 	addseq	r0, fp, r5, lsl sp
    6bb4:	03050000 	movweq	r0, #20480	; 0x5000
    6bb8:	00000000 	andeq	r0, r0, r0
    6bbc:	1cb60117 	ldfnes	f0, [r6], #92	; 0x5c
    6bc0:	13030000 	movwne	r0, #12288	; 0x3000
    6bc4:	00000006 	andeq	r0, r0, r6
    6bc8:	00000000 	andeq	r0, r0, r0
    6bcc:	189c0100 	ldmne	ip, {r8}
    6bd0:	001d8b01 	andseq	r8, sp, r1, lsl #22
    6bd4:	07080300 	streq	r0, [r8, -r0, lsl #6]
    6bd8:	0000c701 	andeq	ip, r0, r1, lsl #14
	...
    6be4:	bc9c0100 	ldflts	f0, [ip], {0}
    6be8:	19000004 	stmdbne	r0, {r2}
    6bec:	03007265 	movweq	r7, #613	; 0x265
    6bf0:	04bc1908 	ldrteq	r1, [ip], #2312	; 0x908
    6bf4:	23260000 			; <UNDEFINED> instruction: 0x23260000
    6bf8:	651a0000 	ldrvs	r0, [sl, #-0]
    6bfc:	03007572 	movweq	r7, #1394	; 0x572
    6c00:	04c22408 	strbeq	r2, [r2], #1032	; 0x408
    6c04:	51010000 	mrspl	r0, (UNDEF: 1)
    6c08:	8f040b00 	svchi	0x00040b00
    6c0c:	0b000000 	bleq	6c14 <__exidx_end+0x11f0>
    6c10:	0000c704 	andeq	ip, r0, r4, lsl #14
    6c14:	0d011b00 	vstreq	d1, [r1, #-0]
    6c18:	0100001d 	tsteq	r0, sp, lsl r0
    6c1c:	01060160 	tsteq	r6, r0, ror #2
    6c20:	0000009b 	muleq	r0, fp, r0
	...
    6c2c:	04f69c01 	ldrbteq	r9, [r6], #3073	; 0xc01
    6c30:	731c0000 	tstvc	ip, #0
    6c34:	60010074 	andvs	r0, r1, r4, ror r0
    6c38:	009b1401 	addseq	r1, fp, r1, lsl #8
    6c3c:	23390000 	teqcs	r9, #0
    6c40:	1d000000 	stcne	0, cr0, [r0, #-0]
    6c44:	001d0401 	andseq	r0, sp, r1, lsl #8
    6c48:	015b0100 	cmpeq	fp, r0, lsl #2
    6c4c:	00000006 	andeq	r0, r0, r6
    6c50:	00000000 	andeq	r0, r0, r0
    6c54:	1b9c0100 	blne	fe70705c <_estack+0xde70205c>
    6c58:	001ce101 	andseq	lr, ip, r1, lsl #2
    6c5c:	01210100 			; <UNDEFINED> instruction: 0x01210100
    6c60:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    6c6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6c70:	000005c0 	andeq	r0, r0, r0, asr #11
    6c74:	0074731c 	rsbseq	r7, r4, ip, lsl r3
    6c78:	15012101 	strne	r2, [r1, #-257]	; 0xfffffeff
    6c7c:	0000009b 	muleq	r0, fp, r0
    6c80:	0000234c 	andeq	r2, r0, ip, asr #6
    6c84:	0100611c 	tsteq	r0, ip, lsl r1
    6c88:	c71f0121 	ldrgt	r0, [pc, -r1, lsr #2]
    6c8c:	5f000000 	svcpl	0x00000000
    6c90:	1c000023 	stcne	0, cr0, [r0], {35}	; 0x23
    6c94:	21010073 	tstcs	r1, r3, ror r0
    6c98:	02152e01 	andseq	r2, r5, #1, 28
    6c9c:	237d0000 	cmncs	sp, #0
    6ca0:	6c1c0000 	ldcvs	0, cr0, [ip], {-0}
    6ca4:	01006e65 	tsteq	r0, r5, ror #28
    6ca8:	9b360121 	blls	d87134 <__ccfg+0xd6718c>
    6cac:	90000000 	andls	r0, r0, r0
    6cb0:	1e000023 	cdpne	0, 0, cr0, cr0, cr3, {1}
    6cb4:	01006c62 	tsteq	r0, r2, ror #24
    6cb8:	9b070123 	blls	1c714c <__ccfg+0x1a71a4>
    6cbc:	a3000000 	movwge	r0, #0
    6cc0:	1f000023 	svcne	0x00000023
    6cc4:	00001cf8 	strdeq	r1, [r0], -r8
    6cc8:	01013201 	tsteq	r1, r1, lsl #4
    6ccc:	00000000 	andeq	r0, r0, r0
    6cd0:	0009f620 	andeq	pc, r9, r0, lsr #12
    6cd4:	00000000 	andeq	r0, r0, r0
    6cd8:	000c9800 	andeq	r9, ip, r0, lsl #16
    6cdc:	01430100 	mrseq	r0, (UNDEF: 83)
    6ce0:	0005a303 	andeq	sl, r5, r3, lsl #6
    6ce4:	0a122100 	beq	48f0ec <__ccfg+0x46f144>
    6ce8:	05210000 	streq	r0, [r1, #-0]!
    6cec:	0000000a 	andeq	r0, r0, sl
    6cf0:	0009f622 	andeq	pc, r9, r2, lsr #12
	...
    6cfc:	01500100 	cmpeq	r0, r0, lsl #2
    6d00:	0a122103 	beq	48f114 <__ccfg+0x46f16c>
    6d04:	05210000 	streq	r0, [r1, #-0]!
    6d08:	0000000a 	andeq	r0, r0, sl
    6d0c:	d8011800 	stmdale	r1, {fp, ip}
    6d10:	0100001c 	tsteq	r0, ip, lsl r0
    6d14:	9b0106cb 	blls	48848 <__ccfg+0x288a0>
	...
    6d20:	01000000 	mrseq	r0, (UNDEF: 0)
    6d24:	0006819c 	muleq	r6, ip, r1
    6d28:	74731900 	ldrbtvc	r1, [r3], #-2304	; 0xfffff700
    6d2c:	15cb0100 	strbne	r0, [fp, #256]	; 0x100
    6d30:	0000009b 	muleq	r0, fp, r0
    6d34:	000023cc 	andeq	r2, r0, ip, asr #7
    6d38:	001d1523 	andseq	r1, sp, r3, lsr #10
    6d3c:	1fcb0100 	svcne	0x00cb0100
    6d40:	000000c7 	andeq	r0, r0, r7, asr #1
    6d44:	000023ea 	andeq	r2, r0, sl, ror #7
    6d48:	001cc423 	andseq	ip, ip, r3, lsr #8
    6d4c:	2bcb0100 	blcs	ff2c7154 <_estack+0xdf2c2154>
    6d50:	000000c7 	andeq	r0, r0, r7, asr #1
    6d54:	00002413 	andeq	r2, r0, r3, lsl r4
    6d58:	001cb024 	andseq	fp, ip, r4, lsr #32
    6d5c:	01e60100 	mvneq	r0, r0, lsl #2
    6d60:	00000000 	andeq	r0, r0, r0
    6d64:	001d9924 	andseq	r9, sp, r4, lsr #18
    6d68:	01ea0100 	mvneq	r0, r0, lsl #2
    6d6c:	00000000 	andeq	r0, r0, r0
    6d70:	00085e25 	andeq	r5, r8, r5, lsr #28
    6d74:	00000000 	andeq	r0, r0, r0
    6d78:	000c6800 	andeq	r6, ip, r0, lsl #16
    6d7c:	04fc0100 	ldrbteq	r0, [ip], #256	; 0x100
    6d80:	00087826 	andeq	r7, r8, r6, lsr #16
    6d84:	00243100 	eoreq	r3, r4, r0, lsl #2
    6d88:	086c2600 	stmdaeq	ip!, {r9, sl, sp}^
    6d8c:	24440000 	strbcs	r0, [r4], #-0
    6d90:	f6270000 			; <UNDEFINED> instruction: 0xf6270000
    6d94:	00000009 	andeq	r0, r0, r9
    6d98:	80000000 	andhi	r0, r0, r0
    6d9c:	0100000c 	tsteq	r0, ip
    6da0:	06640243 	strbteq	r0, [r4], -r3, asr #4
    6da4:	12210000 	eorne	r0, r1, #0
    6da8:	2100000a 	tstcs	r0, sl
    6dac:	00000a05 	andeq	r0, r0, r5, lsl #20
    6db0:	09f62800 	ldmibeq	r6!, {fp, sp}^
	...
    6dbc:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    6dc0:	0a122102 	beq	48f1d0 <__ccfg+0x46f228>
    6dc4:	05210000 	streq	r0, [r1, #-0]!
    6dc8:	0000000a 	andeq	r0, r0, sl
    6dcc:	01180000 	tsteq	r8, r0
    6dd0:	00001d1a 	andeq	r1, r0, sl, lsl sp
    6dd4:	0106b001 	tsteq	r6, r1
    6dd8:	0000009b 	muleq	r0, fp, r0
	...
    6de4:	07049c01 	streq	r9, [r4, -r1, lsl #24]
    6de8:	61190000 	tstvs	r9, r0
    6dec:	15b00100 	ldrne	r0, [r0, #256]!	; 0x100
    6df0:	000000c7 	andeq	r0, r0, r7, asr #1
    6df4:	00002457 	andeq	r2, r0, r7, asr r4
    6df8:	01007319 	tsteq	r0, r9, lsl r3
    6dfc:	07041eb0 			; <UNDEFINED> instruction: 0x07041eb0
    6e00:	24800000 	strcs	r0, [r0], #0
    6e04:	6c190000 	ldcvs	0, cr0, [r9], {-0}
    6e08:	01006e65 	tsteq	r0, r5, ror #28
    6e0c:	009b26b0 			; <UNDEFINED> instruction: 0x009b26b0
    6e10:	24b40000 	ldrtcs	r0, [r4], #0
    6e14:	f6270000 			; <UNDEFINED> instruction: 0xf6270000
    6e18:	00000009 	andeq	r0, r0, r9
    6e1c:	50000000 	andpl	r0, r0, r0
    6e20:	0100000c 	tsteq	r0, ip
    6e24:	06e802ba 			; <UNDEFINED> instruction: 0x06e802ba
    6e28:	12210000 	eorne	r0, r1, #0
    6e2c:	2100000a 	tstcs	r0, sl
    6e30:	00000a05 	andeq	r0, r0, r5, lsl #20
    6e34:	09f62800 	ldmibeq	r6!, {fp, sp}^
	...
    6e40:	c4010000 	strgt	r0, [r1], #-0
    6e44:	0a122102 	beq	48f254 <__ccfg+0x46f2ac>
    6e48:	05210000 	streq	r0, [r1, #-0]!
    6e4c:	0000000a 	andeq	r0, r0, sl
    6e50:	b1040b00 	tstlt	r4, r0, lsl #22
    6e54:	17000000 	strne	r0, [r0, -r0]
    6e58:	001ccf01 	andseq	ip, ip, r1, lsl #30
    6e5c:	06a80100 	strteq	r0, [r8], r0, lsl #2
    6e60:	0000255c 	andeq	r2, r0, ip, asr r5
    6e64:	00002570 	andeq	r2, r0, r0, ror r5
    6e68:	01299c01 			; <UNDEFINED> instruction: 0x01299c01
    6e6c:	00001cf0 	strdeq	r1, [r0], -r0
    6e70:	9b069301 	blls	1aba7c <__ccfg+0x18bad4>
    6e74:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    6e78:	5c000025 	stcpl	0, cr0, [r0], {37}	; 0x25
    6e7c:	01000025 	tsteq	r0, r5, lsr #32
    6e80:	1d932a9c 	vldrne	s4, [r3, #624]	; 0x270
    6e84:	82010000 	andhi	r0, r1, #0
    6e88:	0024e40d 	eoreq	lr, r4, sp, lsl #8
    6e8c:	00252400 	eoreq	r2, r5, r0, lsl #8
    6e90:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    6e94:	28000007 	stmdacs	r0, {r0, r1, r2}
    6e98:	0000079f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    6e9c:	000024fe 	strdeq	r2, [r0], -lr
    6ea0:	00002512 	andeq	r2, r0, r2, lsl r5
    6ea4:	27038a01 	strcs	r8, [r3, -r1, lsl #20]
    6ea8:	000009f6 	strdeq	r0, [r0], -r6
    6eac:	000024fe 	strdeq	r2, [r0], -lr
    6eb0:	00000c20 	andeq	r0, r0, r0, lsr #24
    6eb4:	79027201 	stmdbvc	r2, {r0, r9, ip, sp, lr}
    6eb8:	21000007 	tstcs	r0, r7
    6ebc:	00000a12 	andeq	r0, r0, r2, lsl sl
    6ec0:	000a0521 	andeq	r0, sl, r1, lsr #10
    6ec4:	f6250000 			; <UNDEFINED> instruction: 0xf6250000
    6ec8:	0a000009 	beq	6ef4 <__exidx_end+0x14d0>
    6ecc:	38000025 	stmdacc	r0, {r0, r2, r5}
    6ed0:	0100000c 	tsteq	r0, ip
    6ed4:	12210274 	eorne	r0, r1, #116, 4	; 0x40000007
    6ed8:	2100000a 	tstcs	r0, sl
    6edc:	00000a05 	andeq	r0, r0, r5, lsl #20
    6ee0:	2b000000 	blcs	6ee8 <__exidx_end+0x14c4>
    6ee4:	00001d27 	andeq	r1, r0, r7, lsr #26
    6ee8:	010d7801 	tsteq	sp, r1, lsl #16
    6eec:	001d802b 	andseq	r8, sp, fp, lsr #32
    6ef0:	0d6d0100 	stfeqe	f0, [sp, #-0]
    6ef4:	1d9f2b01 	vldrne	d2, [pc, #4]	; 6f00 <__exidx_end+0x14dc>
    6ef8:	66010000 	strvs	r0, [r1], -r0
    6efc:	a52c010d 	strge	r0, [ip, #-269]!	; 0xfffffef3
    6f00:	0100001d 	tsteq	r0, sp, lsl r0
    6f04:	90010d58 	andls	r0, r1, r8, asr sp
    6f08:	e4000024 	str	r0, [r0], #-36	; 0xffffffdc
    6f0c:	01000024 	tsteq	r0, r4, lsr #32
    6f10:	0008429c 	muleq	r8, ip, r2
    6f14:	74731900 	ldrbtvc	r1, [r3], #-2304	; 0xfffff700
    6f18:	19580100 	ldmdbne	r8, {r8}^
    6f1c:	0000009b 	muleq	r0, fp, r0
    6f20:	000024d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    6f24:	6c656419 	cfstrdvs	mvd6, [r5], #-100	; 0xffffff9c
    6f28:	22580100 	subscs	r0, r8, #0, 2
    6f2c:	0000009b 	muleq	r0, fp, r0
    6f30:	000024e5 	andeq	r2, r0, r5, ror #9
    6f34:	00084225 	andeq	r4, r8, r5, lsr #4
    6f38:	00249800 	eoreq	r9, r4, r0, lsl #16
    6f3c:	000bd800 	andeq	sp, fp, r0, lsl #16
    6f40:	135c0100 	cmpne	ip, #0, 2
    6f44:	000bd82d 	andeq	sp, fp, sp, lsr #16
    6f48:	08532e00 	ldmdaeq	r3, {r9, sl, fp, sp}^
    6f4c:	24f80000 	ldrbtcs	r0, [r8], #0
    6f50:	f6270000 			; <UNDEFINED> instruction: 0xf6270000
    6f54:	98000009 	stmdals	r0, {r0, r3}
    6f58:	f8000024 			; <UNDEFINED> instruction: 0xf8000024
    6f5c:	0100000b 	tsteq	r0, fp
    6f60:	08240251 	stmdaeq	r4!, {r0, r4, r6, r9}
    6f64:	12210000 	eorne	r0, r1, #0
    6f68:	2100000a 	tstcs	r0, sl
    6f6c:	00000a05 	andeq	r0, r0, r5, lsl #20
    6f70:	09f62800 	ldmibeq	r6!, {fp, sp}^
    6f74:	24b20000 	ldrtcs	r0, [r2], #0
    6f78:	24b60000 	ldrtcs	r0, [r6], #0
    6f7c:	54010000 	strpl	r0, [r1], #-0
    6f80:	0a122102 	beq	48f390 <__ccfg+0x46f3e8>
    6f84:	05210000 	streq	r0, [r1, #-0]!
    6f88:	0000000a 	andeq	r0, r0, sl
    6f8c:	2f000000 	svccs	0x00000000
    6f90:	00001d22 	andeq	r1, r0, r2, lsr #26
    6f94:	b10d4b01 	tstlt	sp, r1, lsl #22
    6f98:	01000000 	mrseq	r0, (UNDEF: 0)
    6f9c:	0000085e 	andeq	r0, r0, lr, asr r8
    6fa0:	01007230 	tsteq	r0, r0, lsr r2
    6fa4:	00b1074f 	adcseq	r0, r1, pc, asr #14
    6fa8:	31000000 	mrscc	r0, (UNDEF: 0)
    6fac:	00001cfe 	strdeq	r1, [r0], -lr
    6fb0:	010d4101 	tsteq	sp, r1, lsl #2
    6fb4:	00088301 	andeq	r8, r8, r1, lsl #6
    6fb8:	6d633200 	sfmvs	f3, 2, [r3, #-0]
    6fbc:	41010064 	tstmi	r1, r4, rrx
    6fc0:	0000b119 	andeq	fp, r0, r9, lsl r1
    6fc4:	00613200 	rsbeq	r3, r1, r0, lsl #4
    6fc8:	c7244101 	strgt	r4, [r4, -r1, lsl #2]!
    6fcc:	00000000 	andeq	r0, r0, r0
    6fd0:	001cc92c 	andseq	ip, ip, ip, lsr #18
    6fd4:	0d3a0100 	ldfeqs	f0, [sl, #-0]
    6fd8:	00247801 	eoreq	r7, r4, r1, lsl #16
    6fdc:	00249000 	eoreq	r9, r4, r0
    6fe0:	e59c0100 	ldr	r0, [ip, #256]	; 0x100
    6fe4:	19000008 	stmdbne	r0, {r3}
    6fe8:	00646d63 	rsbeq	r6, r4, r3, ror #26
    6fec:	b1193a01 	tstlt	r9, r1, lsl #20
    6ff0:	0b000000 	bleq	6ff8 <__exidx_end+0x15d4>
    6ff4:	27000025 	strcs	r0, [r0, -r5, lsr #32]
    6ff8:	000009f6 	strdeq	r0, [r0], -r6
    6ffc:	00002478 	andeq	r2, r0, r8, ror r4
    7000:	00000bc0 	andeq	r0, r0, r0, asr #23
    7004:	c9023c01 	stmdbgt	r2, {r0, sl, fp, ip, sp}
    7008:	21000008 	tstcs	r0, r8
    700c:	00000a12 	andeq	r0, r0, r2, lsl sl
    7010:	000a0521 	andeq	r0, sl, r1, lsr #10
    7014:	f6280000 			; <UNDEFINED> instruction: 0xf6280000
    7018:	84000009 	strhi	r0, [r0], #-9
    701c:	88000024 	stmdahi	r0, {r2, r5}
    7020:	01000024 	tsteq	r0, r4, lsr #32
    7024:	1221023e 	eorne	r0, r1, #-536870909	; 0xe0000003
    7028:	2100000a 	tstcs	r0, sl
    702c:	00000a05 	andeq	r0, r0, r5, lsl #20
    7030:	b42c0000 	strtlt	r0, [ip], #-0
    7034:	0100001d 	tsteq	r0, sp, lsl r0
    7038:	48010d29 	stmdami	r1, {r0, r3, r5, r8, sl, fp}
    703c:	78000024 	stmdavc	r0, {r2, r5}
    7040:	01000024 	tsteq	r0, r4, lsr #32
    7044:	0009799c 	muleq	r9, ip, r9
    7048:	00621900 	rsbeq	r1, r2, r0, lsl #18
    704c:	b11c2901 	tstlt	ip, r1, lsl #18
    7050:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    7054:	30000025 	andcc	r0, r0, r5, lsr #32
    7058:	2b010069 	blcs	47204 <__ccfg+0x2725c>
    705c:	00008106 	andeq	r8, r0, r6, lsl #2
    7060:	0a3d2700 	beq	f50c68 <__ccfg+0xf30cc0>
    7064:	24500000 	ldrbcs	r0, [r0], #-0
    7068:	0b880000 	bleq	fe207070 <_estack+0xde202070>
    706c:	32010000 	andcc	r0, r1, #0
    7070:	00092e03 	andeq	r2, r9, r3, lsl #28
    7074:	0a4c2100 	beq	130f47c <__ccfg+0x12ef4d4>
    7078:	33000000 	movwcc	r0, #0
    707c:	00000a3d 	andeq	r0, r0, sp, lsr sl
    7080:	0000245c 	andeq	r2, r0, ip, asr r4
    7084:	00002460 	andeq	r2, r0, r0, ror #8
    7088:	48042f01 	stmdami	r4, {r0, r8, r9, sl, fp, sp}
    708c:	21000009 	tstcs	r0, r9
    7090:	00000a4c 	andeq	r0, r0, ip, asr #20
    7094:	0a203300 	beq	813c9c <__ccfg+0x7f3cf4>
    7098:	24600000 	strbtcs	r0, [r0], #-0
    709c:	24620000 	strbtcs	r0, [r2], #-0
    70a0:	31010000 	mrscc	r0, (UNDEF: 1)
    70a4:	00096204 	andeq	r6, r9, r4, lsl #4
    70a8:	0a2f2100 	beq	bcf4b0 <__ccfg+0xbaf508>
    70ac:	25000000 	strcs	r0, [r0, #-0]
    70b0:	00000a20 	andeq	r0, r0, r0, lsr #20
    70b4:	00002468 	andeq	r2, r0, r8, ror #8
    70b8:	00000ba8 	andeq	r0, r0, r8, lsr #23
    70bc:	21033301 	tstcs	r3, r1, lsl #6
    70c0:	00000a2f 	andeq	r0, r0, pc, lsr #20
    70c4:	ab340000 	blge	d070cc <__ccfg+0xce7124>
    70c8:	0100001d 	tsteq	r0, sp, lsl r0
    70cc:	00b10d19 	adcseq	r0, r1, r9, lsl sp
    70d0:	24140000 	ldrcs	r0, [r4], #-0
    70d4:	24480000 	strbcs	r0, [r8], #-0
    70d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    70dc:	000009f6 	strdeq	r0, [r0], -r6
    70e0:	01006930 	tsteq	r0, r0, lsr r9
    70e4:	0081061b 	addeq	r0, r1, fp, lsl r6
    70e8:	62350000 	eorsvs	r0, r5, #0
    70ec:	071c0100 	ldreq	r0, [ip, -r0, lsl #2]
    70f0:	000000b1 	strheq	r0, [r0], -r1
    70f4:	0000253c 	andeq	r2, r0, ip, lsr r5
    70f8:	000a3d27 	andeq	r3, sl, r7, lsr #26
    70fc:	00241800 	eoreq	r1, r4, r0, lsl #16
    7100:	000b2800 	andeq	r2, fp, r0, lsl #16
    7104:	03220100 			; <UNDEFINED> instruction: 0x03220100
    7108:	000009c5 	andeq	r0, r0, r5, asr #19
    710c:	000a4c21 	andeq	r4, sl, r1, lsr #24
    7110:	20270000 	eorcs	r0, r7, r0
    7114:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    7118:	50000024 	andpl	r0, r0, r4, lsr #32
    711c:	0100000b 	tsteq	r0, fp
    7120:	09df0323 	ldmibeq	pc, {r0, r1, r5, r8, r9}^	; <UNPREDICTABLE>
    7124:	2f210000 	svccs	0x00210000
    7128:	0000000a 	andeq	r0, r0, sl
    712c:	000a5a25 	andeq	r5, sl, r5, lsr #20
    7130:	00242000 	eoreq	r2, r4, r0
    7134:	000b6800 	andeq	r6, fp, r0, lsl #16
    7138:	07200100 	streq	r0, [r0, -r0, lsl #2]!
    713c:	000a6c21 	andeq	r6, sl, r1, lsr #24
    7140:	36000000 	strcc	r0, [r0], -r0
    7144:	00000f3d 	andeq	r0, r0, sp, lsr pc
    7148:	01020602 	tsteq	r2, r2, lsl #12
    714c:	0a200301 	beq	807d58 <__ccfg+0x7e7db0>
    7150:	0e370000 	cdpeq	0, 3, cr0, cr7, cr0, {0}
    7154:	02000011 	andeq	r0, r0, #17
    7158:	67230206 	strvs	r0, [r3, -r6, lsl #4]!
    715c:	37000000 	strcc	r0, [r0, -r0]
    7160:	0000141d 	andeq	r1, r0, sp, lsl r4
    7164:	37020602 	strcc	r0, [r2, -r2, lsl #12]
    7168:	00000067 	andeq	r0, r0, r7, rrx
    716c:	12b13600 	adcsne	r3, r1, #0, 12
    7170:	54020000 	strpl	r0, [r2], #-0
    7174:	03010101 	movweq	r0, #4353	; 0x1101
    7178:	00000a3d 	andeq	r0, r0, sp, lsr sl
    717c:	00110e37 	andseq	r0, r1, r7, lsr lr
    7180:	01540200 	cmpeq	r4, r0, lsl #4
    7184:	00006719 	andeq	r6, r0, r9, lsl r7
    7188:	be360000 	cdplt	0, 3, cr0, cr6, cr0, {0}
    718c:	02000013 	andeq	r0, r0, #19
    7190:	0101011e 	tsteq	r1, lr, lsl r1
    7194:	000a5a03 	andeq	r5, sl, r3, lsl #20
    7198:	110e3700 	tstne	lr, r0, lsl #14
    719c:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
    71a0:	00671701 	rsbeq	r1, r7, r1, lsl #14
    71a4:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    71a8:	00001bc2 	andeq	r1, r0, r2, asr #23
    71ac:	0101a402 	tsteq	r1, r2, lsl #8
    71b0:	00000067 	andeq	r0, r0, r7, rrx
    71b4:	000a7903 	andeq	r7, sl, r3, lsl #18
    71b8:	110e3900 	tstne	lr, r0, lsl #18
    71bc:	a4020000 	strge	r0, [r2], #-0
    71c0:	00006718 	andeq	r6, r0, r8, lsl r7
    71c4:	963a0000 	ldrtls	r0, [sl], -r0
    71c8:	24000007 	strcs	r0, [r0], #-7
    71cc:	48000025 	stmdami	r0, {r0, r2, r5}
    71d0:	01000025 	tsteq	r0, r5, lsr #32
    71d4:	0796289c 			; <UNDEFINED> instruction: 0x0796289c
    71d8:	252e0000 	strcs	r0, [lr, #-0]!
    71dc:	25420000 	strbcs	r0, [r2, #-0]
    71e0:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    71e4:	07a83b0d 	streq	r3, [r8, sp, lsl #22]!
    71e8:	25380000 	ldrcs	r0, [r8, #-0]!
    71ec:	253e0000 	ldrcs	r0, [lr, #-0]!
    71f0:	7c010000 	stcvc	0, cr0, [r1], {-0}
    71f4:	00000003 	andeq	r0, r0, r3
    71f8:	0000041e 	andeq	r0, r0, lr, lsl r4
    71fc:	1b940003 	blne	fe507210 <_estack+0xde502210>
    7200:	01040000 	mrseq	r0, (UNDEF: 4)
    7204:	000000a3 	andeq	r0, r0, r3, lsr #1
    7208:	001dbd0c 	andseq	fp, sp, ip, lsl #26
    720c:	000df700 	andeq	pc, sp, r0, lsl #14
    7210:	000d3000 	andeq	r3, sp, r0
    7214:	00000000 	andeq	r0, r0, r0
    7218:	004fa800 	subeq	sl, pc, r0, lsl #16
    721c:	06010200 	streq	r0, [r1], -r0, lsl #4
    7220:	00000c58 	andeq	r0, r0, r8, asr ip
    7224:	66050202 	strvs	r0, [r5], -r2, lsl #4
    7228:	0200000a 	andeq	r0, r0, #10
    722c:	07f80504 	ldrbeq	r0, [r8, r4, lsl #10]!
    7230:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7234:	0007f305 	andeq	pc, r7, r5, lsl #6
    7238:	2a090300 	bcs	247e40 <__ccfg+0x227e98>
    723c:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    7240:	00004d18 	andeq	r4, r0, r8, lsl sp
    7244:	08010200 	stmdaeq	r1, {r9}
    7248:	00000c56 	andeq	r0, r0, r6, asr ip
    724c:	002dff03 	eoreq	pc, sp, r3, lsl #30
    7250:	19310200 	ldmdbne	r1!, {r9}
    7254:	00000060 	andeq	r0, r0, r0, rrx
    7258:	53070202 	movwpl	r0, #29186	; 0x7202
    725c:	0300000d 	movweq	r0, #13
    7260:	000029a1 	andeq	r2, r0, r1, lsr #19
    7264:	73193402 	tstvc	r9, #33554432	; 0x2000000
    7268:	02000000 	andeq	r0, r0, #0
    726c:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
    7270:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7274:	00042307 	andeq	r2, r4, r7, lsl #6
    7278:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    727c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    7280:	2d070402 	cfstrscs	mvf0, [r7, #-8]
    7284:	03000004 	movweq	r0, #4
    7288:	000028e8 	andeq	r2, r0, r8, ror #17
    728c:	54122703 	ldrpl	r2, [r2], #-1795	; 0xfffff8fd
    7290:	05000000 	streq	r0, [r0, #-0]
    7294:	0000008f 	andeq	r0, r0, pc, lsl #1
    7298:	001daf03 	andseq	sl, sp, r3, lsl #30
    729c:	122b0300 	eorne	r0, fp, #0, 6
    72a0:	00000041 	andeq	r0, r0, r1, asr #32
    72a4:	0000a006 	andeq	sl, r0, r6
    72a8:	293a0300 	ldmdbcs	sl!, {r8, r9}
    72ac:	2c030000 	stccs	0, cr0, [r3], {-0}
    72b0:	00006712 	andeq	r6, r0, r2, lsl r7
    72b4:	00b10500 	adcseq	r0, r1, r0, lsl #10
    72b8:	41030000 	mrsmi	r0, (UNDEF: 3)
    72bc:	03000006 	movweq	r0, #6
    72c0:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    72c4:	af030000 	svcge	0x00030000
    72c8:	0300000b 	movweq	r0, #11
    72cc:	00da102e 	sbcseq	r1, sl, lr, lsr #32
    72d0:	04070000 	streq	r0, [r7], #-0
    72d4:	0000008f 	andeq	r0, r0, pc, lsl #1
    72d8:	32030808 	andcc	r0, r3, #8, 16	; 0x80000
    72dc:	00016e09 	andeq	r6, r1, r9, lsl #28
    72e0:	002b0900 	eoreq	r0, fp, r0, lsl #18
    72e4:	34030000 	strcc	r0, [r3], #-0
    72e8:	0000a007 	andeq	sl, r0, r7
    72ec:	07010100 	streq	r0, [r1, -r0, lsl #2]
    72f0:	06470900 	strbeq	r0, [r7], -r0, lsl #18
    72f4:	35030000 	strcc	r0, [r3, #-0]
    72f8:	0000a003 	andeq	sl, r0, r3
    72fc:	06010100 	streq	r0, [r1], -r0, lsl #2
    7300:	02de0900 	sbcseq	r0, lr, #0, 18
    7304:	36030000 	strcc	r0, [r3], -r0
    7308:	0000a003 	andeq	sl, r0, r3
    730c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    7310:	06b20900 	ldrteq	r0, [r2], r0, lsl #18
    7314:	37030000 	strcc	r0, [r3, -r0]
    7318:	0000a003 	andeq	sl, r0, r3
    731c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    7320:	0a9a0900 	beq	fe689728 <_estack+0xde684728>
    7324:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    7328:	0000a003 	andeq	sl, r0, r3
    732c:	00040100 	andeq	r0, r4, r0, lsl #2
    7330:	06560a00 	ldrbeq	r0, [r6], -r0, lsl #20
    7334:	3a030000 	bcc	c733c <__ccfg+0xa7394>
    7338:	0000a007 	andeq	sl, r0, r7
    733c:	f60a0100 			; <UNDEFINED> instruction: 0xf60a0100
    7340:	03000008 	movweq	r0, #8
    7344:	00a0033c 	adceq	r0, r0, ip, lsr r3
    7348:	0a020000 	beq	87350 <__ccfg+0x673a8>
    734c:	00000f27 	andeq	r0, r0, r7, lsr #30
    7350:	a0033d03 	andge	r3, r3, r3, lsl #26
    7354:	03000000 	movweq	r0, #0
    7358:	00090e0a 	andeq	r0, r9, sl, lsl #28
    735c:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    7360:	000000b1 	strheq	r0, [r0], -r1
    7364:	14030004 	strne	r0, [r3], #-4
    7368:	03000003 	movweq	r0, #3
    736c:	00e00341 	rsceq	r0, r0, r1, asr #6
    7370:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
    7374:	0b000001 	bleq	7380 <__exidx_end+0x195c>
    7378:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
    737c:	7a1a4303 	bvc	697f90 <__ccfg+0x677fe8>
    7380:	01000001 	tsteq	r0, r1
    7384:	01970b01 	orrseq	r0, r7, r1, lsl #22
    7388:	45030000 	strmi	r0, [r3, #-0]
    738c:	00019b0e 	andeq	r9, r1, lr, lsl #22
    7390:	07010100 	streq	r0, [r1, -r0, lsl #2]
    7394:	0001a104 	andeq	sl, r1, r4, lsl #2
    7398:	08010200 	stmdaeq	r1, {r9}
    739c:	00000c5f 	andeq	r0, r0, pc, asr ip
    73a0:	0001a105 	andeq	sl, r1, r5, lsl #2
    73a4:	031d0b00 	tsteq	sp, #0, 22
    73a8:	45030000 	strmi	r0, [r3, #-0]
    73ac:	00019b1e 	andeq	r9, r1, lr, lsl fp
    73b0:	08010100 	stmdaeq	r1, {r8}
    73b4:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    73b8:	000001ec 	andeq	r0, r0, ip, ror #3
    73bc:	000cc50a 	andeq	ip, ip, sl, lsl #10
    73c0:	0b900400 	bleq	fe4083c8 <_estack+0xde4033c8>
    73c4:	00000067 	andeq	r0, r0, r7, rrx
    73c8:	10620a00 	rsbne	r0, r2, r0, lsl #20
    73cc:	91040000 	mrsls	r0, (UNDEF: 4)
    73d0:	00008f08 	andeq	r8, r0, r8, lsl #30
    73d4:	bc0a0400 	cfstrslt	mvf0, [sl], {-0}
    73d8:	04000001 	streq	r0, [r0], #-1
    73dc:	00ac1092 	umlaleq	r1, ip, r2, r0
    73e0:	00060000 	andeq	r0, r6, r0
    73e4:	000cb903 	andeq	fp, ip, r3, lsl #18
    73e8:	03930400 	orrseq	r0, r3, #0, 8
    73ec:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    73f0:	0001ec0c 	andeq	lr, r1, ip, lsl #24
    73f4:	00020300 	andeq	r0, r2, r0, lsl #6
    73f8:	0b000d00 	bleq	a800 <__exidx_end+0x4ddc>
    73fc:	00000938 	andeq	r0, r0, r8, lsr r9
    7400:	f80f9904 			; <UNDEFINED> instruction: 0xf80f9904
    7404:	01000001 	tsteq	r0, r1
    7408:	05010801 	streq	r0, [r1, #-2049]	; 0xfffff7ff
    740c:	023b0991 	eorseq	r0, fp, #2375680	; 0x244000
    7410:	15090000 	strne	r0, [r9, #-0]
    7414:	05000009 	streq	r0, [r0, #-9]
    7418:	00a00793 	umlaleq	r0, r0, r3, r7	; <UNPREDICTABLE>
    741c:	07010000 	streq	r0, [r1, -r0]
    7420:	c7090001 	strgt	r0, [r9, -r1]
    7424:	05000005 	streq	r0, [r0, #-5]
    7428:	00a00394 	umlaleq	r0, r0, r4, r3	; <UNPREDICTABLE>
    742c:	01010000 	mrseq	r0, (UNDEF: 1)
    7430:	03000000 	movweq	r0, #0
    7434:	00000aa6 	andeq	r0, r0, r6, lsr #21
    7438:	11039605 	tstne	r3, r5, lsl #12
    743c:	05000002 	streq	r0, [r0, #-2]
    7440:	0000023b 	andeq	r0, r0, fp, lsr r2
    7444:	0002470c 	andeq	r4, r2, ip, lsl #14
    7448:	00025700 	andeq	r5, r2, r0, lsl #14
    744c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    7450:	0000024c 	andeq	r0, r0, ip, asr #4
    7454:	0003ac0b 	andeq	sl, r3, fp, lsl #24
    7458:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    745c:	00000257 	andeq	r0, r0, r7, asr r2
    7460:	9b0c0101 	blls	30786c <__ccfg+0x2e78c4>
    7464:	75000000 	strvc	r0, [r0, #-0]
    7468:	0d000002 	stceq	0, cr0, [r0, #-8]
    746c:	026a0500 	rsbeq	r0, sl, #0, 10
    7470:	090b0000 	stmdbeq	fp, {}	; <UNPREDICTABLE>
    7474:	06000006 	streq	r0, [r0], -r6
    7478:	02751306 	rsbseq	r1, r5, #402653184	; 0x18000000
    747c:	01010000 	mrseq	r0, (UNDEF: 1)
    7480:	0008d80b 	andeq	sp, r8, fp, lsl #16
    7484:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    7488:	000000b1 	strheq	r0, [r0], -r1
    748c:	6d0e0101 	stfvss	f0, [lr, #-4]
    7490:	0700000c 	streq	r0, [r0, -ip]
    7494:	a310016e 	tstge	r0, #-2147483621	; 0x8000001b
    7498:	07000002 	streq	r0, [r0, -r2]
    749c:	0002a904 	andeq	sl, r2, r4, lsl #18
    74a0:	b5010f00 	strlt	r0, [r1, #-3840]	; 0xfffff100
    74a4:	10000002 	andne	r0, r0, r2
    74a8:	0000008f 	andeq	r0, r0, pc, lsl #1
    74ac:	01a80c00 			; <UNDEFINED> instruction: 0x01a80c00
    74b0:	02c00000 	sbceq	r0, r0, #0
    74b4:	000d0000 	andeq	r0, sp, r0
    74b8:	0002b505 	andeq	fp, r2, r5, lsl #10
    74bc:	09e11100 	stmibeq	r1!, {r8, ip}^
    74c0:	7f070000 	svcvc	0x00070000
    74c4:	02c01601 	sbceq	r1, r0, #1048576	; 0x100000
    74c8:	01010000 	mrseq	r0, (UNDEF: 1)
    74cc:	00039811 	andeq	r9, r3, r1, lsl r8
    74d0:	01820700 	orreq	r0, r2, r0, lsl #14
    74d4:	0000bd14 	andeq	fp, r0, r4, lsl sp
    74d8:	11010100 	mrsne	r0, (UNDEF: 17)
    74dc:	00000370 	andeq	r0, r0, r0, ror r3
    74e0:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    74e4:	000000b1 	strheq	r0, [r0], -r1
    74e8:	08120101 	ldmdaeq	r2, {r0, r8}
    74ec:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    74f0:	00000319 	andeq	r0, r0, r9, lsl r3
    74f4:	003c8e13 	eorseq	r8, ip, r3, lsl lr
    74f8:	03070700 	movweq	r0, #30464	; 0x7700
    74fc:	00008f07 	andeq	r8, r0, r7, lsl #30
    7500:	ba130000 	blt	4c7508 <__ccfg+0x4a7560>
    7504:	0700000f 	streq	r0, [r0, -pc]
    7508:	c2080308 	andgt	r0, r8, #8, 6	; 0x20000000
    750c:	04000000 	streq	r0, [r0], #-0
    7510:	0a040e00 	beq	10ad18 <__ccfg+0xead70>
    7514:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    7518:	02f20303 	rscseq	r0, r2, #201326592	; 0xc000000
    751c:	20140000 	andscs	r0, r4, r0
    7520:	30000000 	andcc	r0, r0, r0
    7524:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    7528:	00000389 	andeq	r0, r0, r9, lsl #7
    752c:	001f1113 	andseq	r1, pc, r3, lsl r1	; <UNPREDICTABLE>
    7530:	03140700 	tsteq	r4, #0, 14
    7534:	00008f08 	andeq	r8, r0, r8, lsl #30
    7538:	e2130000 	ands	r0, r3, #0
    753c:	0700000b 	streq	r0, [r0, -fp]
    7540:	8f080315 	svchi	0x00080315
    7544:	02000000 	andeq	r0, r0, #0
    7548:	004c7b13 	subeq	r7, ip, r3, lsl fp
    754c:	03160700 	tsteq	r6, #0, 14
    7550:	0002960b 	andeq	r9, r2, fp, lsl #12
    7554:	41130400 	tstmi	r3, r0, lsl #8
    7558:	07000047 	streq	r0, [r0, -r7, asr #32]
    755c:	c2090317 	andgt	r0, r9, #1543503872	; 0x5c000000
    7560:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7564:	00000f13 	andeq	r0, r0, r3, lsl pc
    7568:	03180700 	tsteq	r8, #0, 14
    756c:	0003890f 	andeq	r8, r3, pc, lsl #18
    7570:	58130c00 	ldmdapl	r3, {sl, fp}
    7574:	07000009 	streq	r0, [r0, -r9]
    7578:	99150319 	ldmdbls	r5, {r0, r3, r4, r8, r9}
    757c:	2c000003 	stccs	0, cr0, [r0], {3}
    7580:	03190c00 	tsteq	r9, #0, 24
    7584:	03990000 	orrseq	r0, r9, #0
    7588:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    758c:	03000000 	movweq	r0, #0
    7590:	26040700 	strcs	r0, [r4], -r0, lsl #14
    7594:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    7598:	00000bd7 	ldrdeq	r0, [r0], -r7
    759c:	1b031c07 	blne	ce5c0 <__ccfg+0xae618>
    75a0:	00000326 	andeq	r0, r0, r6, lsr #6
    75a4:	000bb711 	andeq	fp, fp, r1, lsl r7
    75a8:	031e0700 	tsteq	lr, #0, 14
    75ac:	0003bb14 	andeq	fp, r3, r4, lsl fp
    75b0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    75b4:	00039f04 	andeq	r9, r3, r4, lsl #30
    75b8:	fe011600 	cdp2	6, 0, cr1, cr1, cr0, {0}
    75bc:	0100001d 	tsteq	r0, sp, lsl r0
    75c0:	8101050b 	tsthi	r1, fp, lsl #10
    75c4:	70000000 	andvc	r0, r0, r0
    75c8:	dc000025 	stcle	0, cr0, [r0], {37}	; 0x25
    75cc:	01000025 	tsteq	r0, r5, lsr #32
    75d0:	00041b9c 	muleq	r4, ip, fp
    75d4:	74731700 	ldrbtvc	r1, [r3], #-1792	; 0xfffff900
    75d8:	130b0100 	movwne	r0, #45312	; 0xb100
    75dc:	0000008f 	andeq	r0, r0, pc, lsl #1
    75e0:	0000255a 	andeq	r2, r0, sl, asr r5
    75e4:	01006d17 	tsteq	r0, r7, lsl sp
    75e8:	041b230b 	ldreq	r2, [fp], #-779	; 0xfffffcf5
    75ec:	256d0000 	strbcs	r0, [sp, #-0]!
    75f0:	f8180000 			; <UNDEFINED> instruction: 0xf8180000
    75f4:	01000025 	tsteq	r0, r5, lsr #32
    75f8:	0081060d 	addeq	r0, r1, sp, lsl #12
    75fc:	258b0000 	strcs	r0, [fp]
    7600:	62190000 	andsvs	r0, r9, #0
    7604:	01006675 	tsteq	r0, r5, ror r6
    7608:	019b080e 	orrseq	r0, fp, lr, lsl #16
    760c:	25ca0000 	strbcs	r0, [sl]
    7610:	07000000 	streq	r0, [r0, -r0]
    7614:	0001a804 	andeq	sl, r1, r4, lsl #16
    7618:	04120000 	ldreq	r0, [r2], #-0
    761c:	00030000 	andeq	r0, r3, r0
    7620:	00001cf6 	strdeq	r1, [r0], -r6
    7624:	00a30104 	adceq	r0, r3, r4, lsl #2
    7628:	060c0000 	streq	r0, [ip], -r0
    762c:	f700001e 			; <UNDEFINED> instruction: 0xf700001e
    7630:	4000000d 	andmi	r0, r0, sp
    7634:	0000000d 	andeq	r0, r0, sp
    7638:	5c000000 	stcpl	0, cr0, [r0], {-0}
    763c:	02000051 	andeq	r0, r0, #81	; 0x51
    7640:	0c580601 	mrrceq	6, 0, r0, r8, cr1
    7644:	02020000 	andeq	r0, r2, #0
    7648:	000a6605 	andeq	r6, sl, r5, lsl #12
    764c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    7650:	000007f8 	strdeq	r0, [r0], -r8
    7654:	f3050802 	vsub.i8	d0, d5, d2
    7658:	03000007 	movweq	r0, #7
    765c:	00002a09 	andeq	r2, r0, r9, lsl #20
    7660:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    7664:	02000000 	andeq	r0, r0, #0
    7668:	0c560801 	mrrceq	8, 0, r0, r6, cr1
    766c:	ff030000 			; <UNDEFINED> instruction: 0xff030000
    7670:	0200002d 	andeq	r0, r0, #45	; 0x2d
    7674:	00601931 	rsbeq	r1, r0, r1, lsr r9
    7678:	02020000 	andeq	r0, r2, #0
    767c:	000d5307 	andeq	r5, sp, r7, lsl #6
    7680:	29a10300 	stmibcs	r1!, {r8, r9}
    7684:	34020000 	strcc	r0, [r2], #-0
    7688:	00007319 	andeq	r7, r0, r9, lsl r3
    768c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7690:	00000428 	andeq	r0, r0, r8, lsr #8
    7694:	23070802 	movwcs	r0, #30722	; 0x7802
    7698:	04000004 	streq	r0, [r0], #-4
    769c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    76a0:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    76a4:	00042d07 	andeq	r2, r4, r7, lsl #26
    76a8:	28e80300 	stmiacs	r8!, {r8, r9}^
    76ac:	27030000 	strcs	r0, [r3, -r0]
    76b0:	00005412 	andeq	r5, r0, r2, lsl r4
    76b4:	008f0500 	addeq	r0, pc, r0, lsl #10
    76b8:	af030000 	svcge	0x00030000
    76bc:	0300001d 	movweq	r0, #29
    76c0:	0041122b 	subeq	r1, r1, fp, lsr #4
    76c4:	a0060000 	andge	r0, r6, r0
    76c8:	03000000 	movweq	r0, #0
    76cc:	0000293a 	andeq	r2, r0, sl, lsr r9
    76d0:	67122c03 	ldrvs	r2, [r2, -r3, lsl #24]
    76d4:	05000000 	streq	r0, [r0, #-0]
    76d8:	000000b1 	strheq	r0, [r0], -r1
    76dc:	00064103 	andeq	r4, r6, r3, lsl #2
    76e0:	122d0300 	eorne	r0, sp, #0, 6
    76e4:	00000067 	andeq	r0, r0, r7, rrx
    76e8:	32030807 	andcc	r0, r3, #458752	; 0x70000
    76ec:	00015c09 	andeq	r5, r1, r9, lsl #24
    76f0:	002b0800 	eoreq	r0, fp, r0, lsl #16
    76f4:	34030000 	strcc	r0, [r3], #-0
    76f8:	0000a007 	andeq	sl, r0, r7
    76fc:	07010100 	streq	r0, [r1, -r0, lsl #2]
    7700:	06470800 	strbeq	r0, [r7], -r0, lsl #16
    7704:	35030000 	strcc	r0, [r3, #-0]
    7708:	0000a003 	andeq	sl, r0, r3
    770c:	06010100 	streq	r0, [r1], -r0, lsl #2
    7710:	02de0800 	sbcseq	r0, lr, #0, 16
    7714:	36030000 	strcc	r0, [r3], -r0
    7718:	0000a003 	andeq	sl, r0, r3
    771c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    7720:	06b20800 	ldrteq	r0, [r2], r0, lsl #16
    7724:	37030000 	strcc	r0, [r3, -r0]
    7728:	0000a003 	andeq	sl, r0, r3
    772c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    7730:	0a9a0800 	beq	fe689738 <_estack+0xde684738>
    7734:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    7738:	0000a003 	andeq	sl, r0, r3
    773c:	00040100 	andeq	r0, r4, r0, lsl #2
    7740:	06560900 	ldrbeq	r0, [r6], -r0, lsl #18
    7744:	3a030000 	bcc	c774c <__ccfg+0xa77a4>
    7748:	0000a007 	andeq	sl, r0, r7
    774c:	f6090100 			; <UNDEFINED> instruction: 0xf6090100
    7750:	03000008 	movweq	r0, #8
    7754:	00a0033c 	adceq	r0, r0, ip, lsr r3
    7758:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    775c:	00000f27 	andeq	r0, r0, r7, lsr #30
    7760:	a0033d03 	andge	r3, r3, r3, lsl #26
    7764:	03000000 	movweq	r0, #0
    7768:	00090e09 	andeq	r0, r9, r9, lsl #28
    776c:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    7770:	000000b1 	strheq	r0, [r0], -r1
    7774:	14030004 	strne	r0, [r3], #-4
    7778:	03000003 	movweq	r0, #3
    777c:	00ce0341 	sbceq	r0, lr, r1, asr #6
    7780:	5c060000 	stcpl	0, cr0, [r6], {-0}
    7784:	0a000001 	beq	7790 <__exidx_end+0x1d6c>
    7788:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
    778c:	681a4303 	ldmdavs	sl, {r0, r1, r8, r9, lr}
    7790:	01000001 	tsteq	r0, r1
    7794:	01970a01 	orrseq	r0, r7, r1, lsl #20
    7798:	45030000 	strmi	r0, [r3, #-0]
    779c:	0001890e 	andeq	r8, r1, lr, lsl #18
    77a0:	0b010100 	bleq	47ba8 <__ccfg+0x27c00>
    77a4:	00018f04 	andeq	r8, r1, r4, lsl #30
    77a8:	08010200 	stmdaeq	r1, {r9}
    77ac:	00000c5f 	andeq	r0, r0, pc, asr ip
    77b0:	00018f05 	andeq	r8, r1, r5, lsl #30
    77b4:	031d0a00 	tsteq	sp, #0, 20
    77b8:	45030000 	strmi	r0, [r3, #-0]
    77bc:	0001891e 	andeq	r8, r1, lr, lsl r9
    77c0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    77c4:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    77c8:	000001da 	ldrdeq	r0, [r0], -sl
    77cc:	000cc509 	andeq	ip, ip, r9, lsl #10
    77d0:	0b900400 	bleq	fe4087d8 <_estack+0xde4037d8>
    77d4:	00000067 	andeq	r0, r0, r7, rrx
    77d8:	10620900 	rsbne	r0, r2, r0, lsl #18
    77dc:	91040000 	mrsls	r0, (UNDEF: 4)
    77e0:	00008f08 	andeq	r8, r0, r8, lsl #30
    77e4:	bc090400 	cfstrslt	mvf0, [r9], {-0}
    77e8:	04000001 	streq	r0, [r0], #-1
    77ec:	00ac1092 	umlaleq	r1, ip, r2, r0
    77f0:	00060000 	andeq	r0, r6, r0
    77f4:	000cb903 	andeq	fp, ip, r3, lsl #18
    77f8:	03930400 	orrseq	r0, r3, #0, 8
    77fc:	000001a9 	andeq	r0, r0, r9, lsr #3
    7800:	0001da0c 	andeq	sp, r1, ip, lsl #20
    7804:	0001f100 	andeq	pc, r1, r0, lsl #2
    7808:	0a000d00 	beq	ac10 <__exidx_end+0x51ec>
    780c:	00000938 	andeq	r0, r0, r8, lsr r9
    7810:	e60f9904 	str	r9, [pc], -r4, lsl #18
    7814:	01000001 	tsteq	r0, r1
    7818:	05010701 	streq	r0, [r1, #-1793]	; 0xfffff8ff
    781c:	02290991 	eoreq	r0, r9, #2375680	; 0x244000
    7820:	15080000 	strne	r0, [r8, #-0]
    7824:	05000009 	streq	r0, [r0, #-9]
    7828:	00a00793 	umlaleq	r0, r0, r3, r7	; <UNPREDICTABLE>
    782c:	07010000 	streq	r0, [r1, -r0]
    7830:	c7080001 	strgt	r0, [r8, -r1]
    7834:	05000005 	streq	r0, [r0, #-5]
    7838:	00a00394 	umlaleq	r0, r0, r4, r3	; <UNPREDICTABLE>
    783c:	01010000 	mrseq	r0, (UNDEF: 1)
    7840:	03000000 	movweq	r0, #0
    7844:	00000aa6 	andeq	r0, r0, r6, lsr #21
    7848:	ff039605 			; <UNDEFINED> instruction: 0xff039605
    784c:	05000001 	streq	r0, [r0, #-1]
    7850:	00000229 	andeq	r0, r0, r9, lsr #4
    7854:	0002350c 	andeq	r3, r2, ip, lsl #10
    7858:	00024500 	andeq	r4, r2, r0, lsl #10
    785c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    7860:	0000023a 	andeq	r0, r0, sl, lsr r2
    7864:	0003ac0a 	andeq	sl, r3, sl, lsl #24
    7868:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    786c:	00000245 	andeq	r0, r0, r5, asr #4
    7870:	9b0c0101 	blls	307c7c <__ccfg+0x2e7cd4>
    7874:	63000000 	movwvs	r0, #0
    7878:	0d000002 	stceq	0, cr0, [r0, #-8]
    787c:	02580500 	subseq	r0, r8, #0, 10
    7880:	090a0000 	stmdbeq	sl, {}	; <UNPREDICTABLE>
    7884:	06000006 	streq	r0, [r0], -r6
    7888:	02631306 	rsbeq	r1, r3, #402653184	; 0x18000000
    788c:	01010000 	mrseq	r0, (UNDEF: 1)
    7890:	0008d80a 	andeq	sp, r8, sl, lsl #16
    7894:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    7898:	000000b1 	strheq	r0, [r0], -r1
    789c:	6d0e0101 	stfvss	f0, [lr, #-4]
    78a0:	0700000c 	streq	r0, [r0, -ip]
    78a4:	9110016e 	tstls	r0, lr, ror #2
    78a8:	0b000002 	bleq	78b8 <__exidx_end+0x1e94>
    78ac:	00029704 	andeq	r9, r2, r4, lsl #14
    78b0:	a3010f00 	movwge	r0, #7936	; 0x1f00
    78b4:	10000002 	andne	r0, r0, r2
    78b8:	0000008f 	andeq	r0, r0, pc, lsl #1
    78bc:	01960c00 	orrseq	r0, r6, r0, lsl #24
    78c0:	02ae0000 	adceq	r0, lr, #0
    78c4:	000d0000 	andeq	r0, sp, r0
    78c8:	0002a305 	andeq	sl, r2, r5, lsl #6
    78cc:	09e11100 	stmibeq	r1!, {r8, ip}^
    78d0:	7f070000 	svcvc	0x00070000
    78d4:	02ae1601 	adceq	r1, lr, #1048576	; 0x100000
    78d8:	01010000 	mrseq	r0, (UNDEF: 1)
    78dc:	00039811 	andeq	r9, r3, r1, lsl r8
    78e0:	01820700 	orreq	r0, r2, r0, lsl #14
    78e4:	0000bd14 	andeq	fp, r0, r4, lsl sp
    78e8:	11010100 	mrsne	r0, (UNDEF: 17)
    78ec:	00000370 	andeq	r0, r0, r0, ror r3
    78f0:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    78f4:	000000b1 	strheq	r0, [r0], -r1
    78f8:	08120101 	ldmdaeq	r2, {r0, r8}
    78fc:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    7900:	00000307 	andeq	r0, r0, r7, lsl #6
    7904:	003c8e13 	eorseq	r8, ip, r3, lsl lr
    7908:	03070700 	movweq	r0, #30464	; 0x7700
    790c:	00008f07 	andeq	r8, r0, r7, lsl #30
    7910:	ba130000 	blt	4c7918 <__ccfg+0x4a7970>
    7914:	0700000f 	streq	r0, [r0, -pc]
    7918:	c2080308 	andgt	r0, r8, #8, 6	; 0x20000000
    791c:	04000000 	streq	r0, [r0], #-0
    7920:	0a040e00 	beq	10b128 <__ccfg+0xeb180>
    7924:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    7928:	02e00303 	rsceq	r0, r0, #201326592	; 0xc000000
    792c:	20140000 	andscs	r0, r4, r0
    7930:	30000000 	andcc	r0, r0, r0
    7934:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    7938:	00000377 	andeq	r0, r0, r7, ror r3
    793c:	001f1113 	andseq	r1, pc, r3, lsl r1	; <UNPREDICTABLE>
    7940:	03140700 	tsteq	r4, #0, 14
    7944:	00008f08 	andeq	r8, r0, r8, lsl #30
    7948:	e2130000 	ands	r0, r3, #0
    794c:	0700000b 	streq	r0, [r0, -fp]
    7950:	8f080315 	svchi	0x00080315
    7954:	02000000 	andeq	r0, r0, #0
    7958:	004c7b13 	subeq	r7, ip, r3, lsl fp
    795c:	03160700 	tsteq	r6, #0, 14
    7960:	0002840b 	andeq	r8, r2, fp, lsl #8
    7964:	41130400 	tstmi	r3, r0, lsl #8
    7968:	07000047 	streq	r0, [r0, -r7, asr #32]
    796c:	c2090317 	andgt	r0, r9, #1543503872	; 0x5c000000
    7970:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7974:	00000f13 	andeq	r0, r0, r3, lsl pc
    7978:	03180700 	tsteq	r8, #0, 14
    797c:	0003770f 	andeq	r7, r3, pc, lsl #14
    7980:	58130c00 	ldmdapl	r3, {sl, fp}
    7984:	07000009 	streq	r0, [r0, -r9]
    7988:	87150319 			; <UNDEFINED> instruction: 0x87150319
    798c:	2c000003 	stccs	0, cr0, [r0], {3}
    7990:	03070c00 	movweq	r0, #31744	; 0x7c00
    7994:	03870000 	orreq	r0, r7, #0
    7998:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    799c:	03000000 	movweq	r0, #0
    79a0:	14040b00 	strne	r0, [r4], #-2816	; 0xfffff500
    79a4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    79a8:	00000bd7 	ldrdeq	r0, [r0], -r7
    79ac:	1b031c07 	blne	ce9d0 <__ccfg+0xaea28>
    79b0:	00000314 	andeq	r0, r0, r4, lsl r3
    79b4:	000bb711 	andeq	fp, fp, r1, lsl r7
    79b8:	031e0700 	tsteq	lr, #0, 14
    79bc:	0003a914 	andeq	sl, r3, r4, lsl r9
    79c0:	0b010100 	bleq	47dc8 <__ccfg+0x27e20>
    79c4:	00038d04 	andeq	r8, r3, r4, lsl #26
    79c8:	1e460a00 	vmlane.f32	s1, s12, s0
    79cc:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    79d0:	0001890e 	andeq	r8, r1, lr, lsl #18
    79d4:	16010100 	strne	r0, [r1], -r0, lsl #2
    79d8:	001e5001 	andseq	r5, lr, r1
    79dc:	050d0100 	streq	r0, [sp, #-256]	; 0xffffff00
    79e0:	00008101 	andeq	r8, r0, r1, lsl #2
    79e4:	0025dc00 	eoreq	sp, r5, r0, lsl #24
    79e8:	00265400 	eoreq	r5, r6, r0, lsl #8
    79ec:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    79f0:	01007473 	tsteq	r0, r3, ror r4
    79f4:	008f120d 	addeq	r1, pc, sp, lsl #4
    79f8:	26140000 	ldrcs	r0, [r4], -r0
    79fc:	62170000 	andsvs	r0, r7, #0
    7a00:	01006675 	tsteq	r0, r5, ror r6
    7a04:	01891c0d 	orreq	r1, r9, sp, lsl #24
    7a08:	26320000 	ldrtcs	r0, [r2], -r0
    7a0c:	6c170000 	ldcvs	0, cr0, [r7], {-0}
    7a10:	01006e65 	tsteq	r0, r5, ror #28
    7a14:	0081250d 	addeq	r2, r1, sp, lsl #10
    7a18:	26870000 	strcs	r0, [r7], r0
    7a1c:	f8180000 			; <UNDEFINED> instruction: 0xf8180000
    7a20:	01000025 	tsteq	r0, r5, lsr #32
    7a24:	00810611 	addeq	r0, r1, r1, lsl r6
    7a28:	26dc0000 	ldrbcs	r0, [ip], r0
    7a2c:	00000000 	andeq	r0, r0, r0
    7a30:	0000044c 	andeq	r0, r0, ip, asr #8
    7a34:	1e450003 	cdpne	0, 4, cr0, cr5, cr3, {0}
    7a38:	01040000 	mrseq	r0, (UNDEF: 4)
    7a3c:	000000a3 	andeq	r0, r0, r3, lsr #1
    7a40:	001e600c 	andseq	r6, lr, ip
    7a44:	000df700 	andeq	pc, sp, r0, lsl #14
    7a48:	000d5000 	andeq	r5, sp, r0
    7a4c:	00000000 	andeq	r0, r0, r0
    7a50:	00532400 	subseq	r2, r3, r0, lsl #8
    7a54:	06010200 	streq	r0, [r1], -r0, lsl #4
    7a58:	00000c58 	andeq	r0, r0, r8, asr ip
    7a5c:	66050202 	strvs	r0, [r5], -r2, lsl #4
    7a60:	0200000a 	andeq	r0, r0, #10
    7a64:	07f80504 	ldrbeq	r0, [r8, r4, lsl #10]!
    7a68:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7a6c:	0007f305 	andeq	pc, r7, r5, lsl #6
    7a70:	2a090300 	bcs	248678 <__ccfg+0x2286d0>
    7a74:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    7a78:	00004d18 	andeq	r4, r0, r8, lsl sp
    7a7c:	08010200 	stmdaeq	r1, {r9}
    7a80:	00000c56 	andeq	r0, r0, r6, asr ip
    7a84:	002dff03 	eoreq	pc, sp, r3, lsl #30
    7a88:	19310200 	ldmdbne	r1!, {r9}
    7a8c:	00000060 	andeq	r0, r0, r0, rrx
    7a90:	53070202 	movwpl	r0, #29186	; 0x7202
    7a94:	0300000d 	movweq	r0, #13
    7a98:	000029a1 	andeq	r2, r0, r1, lsr #19
    7a9c:	73193402 	tstvc	r9, #33554432	; 0x2000000
    7aa0:	02000000 	andeq	r0, r0, #0
    7aa4:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
    7aa8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7aac:	00042307 	andeq	r2, r4, r7, lsl #6
    7ab0:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    7ab4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    7ab8:	2d070402 	cfstrscs	mvf0, [r7, #-8]
    7abc:	03000004 	movweq	r0, #4
    7ac0:	00000519 	andeq	r0, r0, r9, lsl r5
    7ac4:	9b1b2803 	blls	6d1ad8 <__ccfg+0x6b1b30>
    7ac8:	05000000 	streq	r0, [r0, #-0]
    7acc:	00000b8b 	andeq	r0, r0, fp, lsl #23
    7ad0:	b3000904 	movwlt	r0, #2308	; 0x904
    7ad4:	06000000 	streq	r0, [r0], -r0
    7ad8:	00000868 	andeq	r0, r0, r8, ror #16
    7adc:	000000b3 	strheq	r0, [r0], -r3
    7ae0:	07000100 	streq	r0, [r0, -r0, lsl #2]
    7ae4:	0b8d0304 	bleq	fe3486fc <_estack+0xde3436fc>
    7ae8:	63030000 	movwvs	r0, #12288	; 0x3000
    7aec:	00008f18 	andeq	r8, r0, r8, lsl pc
    7af0:	28e80300 	stmiacs	r8!, {r8, r9}^
    7af4:	27040000 	strcs	r0, [r4, -r0]
    7af8:	00005412 	andeq	r5, r0, r2, lsl r4
    7afc:	00c10800 	sbceq	r0, r1, r0, lsl #16
    7b00:	af030000 	svcge	0x00030000
    7b04:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    7b08:	0041122b 	subeq	r1, r1, fp, lsr #4
    7b0c:	d2090000 	andle	r0, r9, #0
    7b10:	03000000 	movweq	r0, #0
    7b14:	0000293a 	andeq	r2, r0, sl, lsr r9
    7b18:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    7b1c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7b20:	000000e3 	andeq	r0, r0, r3, ror #1
    7b24:	00064103 	andeq	r4, r6, r3, lsl #2
    7b28:	122d0400 	eorne	r0, sp, #0, 8
    7b2c:	00000067 	andeq	r0, r0, r7, rrx
    7b30:	3204080a 	andcc	r0, r4, #655360	; 0xa0000
    7b34:	00018e09 	andeq	r8, r1, r9, lsl #28
    7b38:	002b0b00 	eoreq	r0, fp, r0, lsl #22
    7b3c:	34040000 	strcc	r0, [r4], #-0
    7b40:	0000d207 	andeq	sp, r0, r7, lsl #4
    7b44:	07010100 	streq	r0, [r1, -r0, lsl #2]
    7b48:	06470b00 	strbeq	r0, [r7], -r0, lsl #22
    7b4c:	35040000 	strcc	r0, [r4, #-0]
    7b50:	0000d203 	andeq	sp, r0, r3, lsl #4
    7b54:	06010100 	streq	r0, [r1], -r0, lsl #2
    7b58:	02de0b00 	sbcseq	r0, lr, #0, 22
    7b5c:	36040000 	strcc	r0, [r4], -r0
    7b60:	0000d203 	andeq	sp, r0, r3, lsl #4
    7b64:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    7b68:	06b20b00 	ldrteq	r0, [r2], r0, lsl #22
    7b6c:	37040000 	strcc	r0, [r4, -r0]
    7b70:	0000d203 	andeq	sp, r0, r3, lsl #4
    7b74:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    7b78:	0a9a0b00 	beq	fe68a780 <_estack+0xde685780>
    7b7c:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    7b80:	0000d203 	andeq	sp, r0, r3, lsl #4
    7b84:	00040100 	andeq	r0, r4, r0, lsl #2
    7b88:	06560c00 	ldrbeq	r0, [r6], -r0, lsl #24
    7b8c:	3a040000 	bcc	107b94 <__ccfg+0xe7bec>
    7b90:	0000d207 	andeq	sp, r0, r7, lsl #4
    7b94:	f60c0100 			; <UNDEFINED> instruction: 0xf60c0100
    7b98:	04000008 	streq	r0, [r0], #-8
    7b9c:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    7ba0:	0c020000 	stceq	0, cr0, [r2], {-0}
    7ba4:	00000f27 	andeq	r0, r0, r7, lsr #30
    7ba8:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    7bac:	03000000 	movweq	r0, #0
    7bb0:	00090e0c 	andeq	r0, r9, ip, lsl #28
    7bb4:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    7bb8:	000000e3 	andeq	r0, r0, r3, ror #1
    7bbc:	14030004 	strne	r0, [r3], #-4
    7bc0:	04000003 	streq	r0, [r0], #-3
    7bc4:	01000341 	tsteq	r0, r1, asr #6
    7bc8:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    7bcc:	0d000001 	stceq	0, cr0, [r0, #-4]
    7bd0:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
    7bd4:	9a1a4304 	bls	6987ec <__ccfg+0x678844>
    7bd8:	01000001 	tsteq	r0, r1
    7bdc:	01970d01 	orrseq	r0, r7, r1, lsl #26
    7be0:	45040000 	strmi	r0, [r4, #-0]
    7be4:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    7be8:	0e010100 	adfeqs	f0, f1, f0
    7bec:	0001c104 	andeq	ip, r1, r4, lsl #2
    7bf0:	08010200 	stmdaeq	r1, {r9}
    7bf4:	00000c5f 	andeq	r0, r0, pc, asr ip
    7bf8:	0001c108 	andeq	ip, r1, r8, lsl #2
    7bfc:	031d0d00 	tsteq	sp, #0, 26
    7c00:	45040000 	strmi	r0, [r4, #-0]
    7c04:	0001bb1e 	andeq	fp, r1, lr, lsl fp
    7c08:	0a010100 	beq	48010 <__ccfg+0x28068>
    7c0c:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    7c10:	0000020c 	andeq	r0, r0, ip, lsl #4
    7c14:	000cc50c 	andeq	ip, ip, ip, lsl #10
    7c18:	0b900500 	bleq	fe409020 <_estack+0xde404020>
    7c1c:	00000067 	andeq	r0, r0, r7, rrx
    7c20:	10620c00 	rsbne	r0, r2, r0, lsl #24
    7c24:	91050000 	mrsls	r0, (UNDEF: 5)
    7c28:	0000c108 	andeq	ip, r0, r8, lsl #2
    7c2c:	bc0c0400 	cfstrslt	mvf0, [ip], {-0}
    7c30:	05000001 	streq	r0, [r0, #-1]
    7c34:	00de1092 	smullseq	r1, lr, r2, r0
    7c38:	00060000 	andeq	r0, r6, r0
    7c3c:	000cb903 	andeq	fp, ip, r3, lsl #18
    7c40:	03930500 	orrseq	r0, r3, #0, 10
    7c44:	000001db 	ldrdeq	r0, [r0], -fp
    7c48:	00020c0f 	andeq	r0, r2, pc, lsl #24
    7c4c:	00022300 	andeq	r2, r2, r0, lsl #6
    7c50:	0d001000 	stceq	0, cr1, [r0, #-0]
    7c54:	00000938 	andeq	r0, r0, r8, lsr r9
    7c58:	180f9905 	stmdane	pc, {r0, r2, r8, fp, ip, pc}	; <UNPREDICTABLE>
    7c5c:	01000002 	tsteq	r0, r2
    7c60:	06010a01 	streq	r0, [r1], -r1, lsl #20
    7c64:	025b0991 	subseq	r0, fp, #2375680	; 0x244000
    7c68:	150b0000 	strne	r0, [fp, #-0]
    7c6c:	06000009 	streq	r0, [r0], -r9
    7c70:	00d20793 	smullseq	r0, r2, r3, r7
    7c74:	07010000 	streq	r0, [r1, -r0]
    7c78:	c70b0001 	strgt	r0, [fp, -r1]
    7c7c:	06000005 	streq	r0, [r0], -r5
    7c80:	00d20394 	smullseq	r0, r2, r4, r3
    7c84:	01010000 	mrseq	r0, (UNDEF: 1)
    7c88:	03000000 	movweq	r0, #0
    7c8c:	00000aa6 	andeq	r0, r0, r6, lsr #21
    7c90:	31039606 	tstcc	r3, r6, lsl #12
    7c94:	08000002 	stmdaeq	r0, {r1}
    7c98:	0000025b 	andeq	r0, r0, fp, asr r2
    7c9c:	0002670f 	andeq	r6, r2, pc, lsl #14
    7ca0:	00027700 	andeq	r7, r2, r0, lsl #14
    7ca4:	08001000 	stmdaeq	r0, {ip}
    7ca8:	0000026c 	andeq	r0, r0, ip, ror #4
    7cac:	0003ac0d 	andeq	sl, r3, sp, lsl #24
    7cb0:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    7cb4:	00000277 	andeq	r0, r0, r7, ror r2
    7cb8:	cd0f0101 	stfgts	f0, [pc, #-4]	; 7cbc <__exidx_end+0x2298>
    7cbc:	95000000 	strls	r0, [r0, #-0]
    7cc0:	10000002 	andne	r0, r0, r2
    7cc4:	028a0800 	addeq	r0, sl, #0, 16
    7cc8:	090d0000 	stmdbeq	sp, {}	; <UNPREDICTABLE>
    7ccc:	07000006 	streq	r0, [r0, -r6]
    7cd0:	02951306 	addseq	r1, r5, #402653184	; 0x18000000
    7cd4:	01010000 	mrseq	r0, (UNDEF: 1)
    7cd8:	0008d80d 	andeq	sp, r8, sp, lsl #16
    7cdc:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    7ce0:	000000e3 	andeq	r0, r0, r3, ror #1
    7ce4:	6d110101 	ldfvss	f0, [r1, #-4]
    7ce8:	0800000c 	stmdaeq	r0, {r2, r3}
    7cec:	c310016e 	tstgt	r0, #-2147483621	; 0x8000001b
    7cf0:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    7cf4:	0002c904 	andeq	ip, r2, r4, lsl #18
    7cf8:	d5011200 	strle	r1, [r1, #-512]	; 0xfffffe00
    7cfc:	13000002 	movwne	r0, #2
    7d00:	000000c1 	andeq	r0, r0, r1, asr #1
    7d04:	01c80f00 	biceq	r0, r8, r0, lsl #30
    7d08:	02e00000 	rsceq	r0, r0, #0
    7d0c:	00100000 	andseq	r0, r0, r0
    7d10:	0002d508 	andeq	sp, r2, r8, lsl #10
    7d14:	09e11400 	stmibeq	r1!, {sl, ip}^
    7d18:	7f080000 	svcvc	0x00080000
    7d1c:	02e01601 	rsceq	r1, r0, #1048576	; 0x100000
    7d20:	01010000 	mrseq	r0, (UNDEF: 1)
    7d24:	00039814 	andeq	r9, r3, r4, lsl r8
    7d28:	01820800 	orreq	r0, r2, r0, lsl #16
    7d2c:	0000ef14 	andeq	lr, r0, r4, lsl pc
    7d30:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    7d34:	00000370 	andeq	r0, r0, r0, ror r3
    7d38:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    7d3c:	000000e3 	andeq	r0, r0, r3, ror #1
    7d40:	08150101 	ldmdaeq	r5, {r0, r8}
    7d44:	09030308 	stmdbeq	r3, {r3, r8, r9}
    7d48:	00000339 	andeq	r0, r0, r9, lsr r3
    7d4c:	003c8e16 	eorseq	r8, ip, r6, lsl lr
    7d50:	03070800 	movweq	r0, #30720	; 0x7800
    7d54:	0000c107 	andeq	ip, r0, r7, lsl #2
    7d58:	ba160000 	blt	587d60 <__ccfg+0x567db8>
    7d5c:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    7d60:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    7d64:	04000000 	streq	r0, [r0], #-0
    7d68:	0a041100 	beq	10c170 <__ccfg+0xec1c8>
    7d6c:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    7d70:	03120303 	tsteq	r2, #201326592	; 0xc000000
    7d74:	20170000 	andscs	r0, r7, r0
    7d78:	30000000 	andcc	r0, r0, r0
    7d7c:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    7d80:	000003a9 	andeq	r0, r0, r9, lsr #7
    7d84:	001f1116 	andseq	r1, pc, r6, lsl r1	; <UNPREDICTABLE>
    7d88:	03140800 	tsteq	r4, #0, 16
    7d8c:	0000c108 	andeq	ip, r0, r8, lsl #2
    7d90:	e2160000 	ands	r0, r6, #0
    7d94:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    7d98:	c1080315 	tstgt	r8, r5, lsl r3
    7d9c:	02000000 	andeq	r0, r0, #0
    7da0:	004c7b16 	subeq	r7, ip, r6, lsl fp
    7da4:	03160800 	tsteq	r6, #0, 16
    7da8:	0002b60b 	andeq	fp, r2, fp, lsl #12
    7dac:	41160400 	tstmi	r6, r0, lsl #8
    7db0:	08000047 	stmdaeq	r0, {r0, r1, r2, r6}
    7db4:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    7db8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7dbc:	00000f16 	andeq	r0, r0, r6, lsl pc
    7dc0:	03180800 	tsteq	r8, #0, 16
    7dc4:	0003a90f 	andeq	sl, r3, pc, lsl #18
    7dc8:	58160c00 	ldmdapl	r6, {sl, fp}
    7dcc:	08000009 	stmdaeq	r0, {r0, r3}
    7dd0:	b9150319 	ldmdblt	r5, {r0, r3, r4, r8, r9}
    7dd4:	2c000003 	stccs	0, cr0, [r0], {3}
    7dd8:	03390f00 	teqeq	r9, #0, 30
    7ddc:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    7de0:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    7de4:	03000000 	movweq	r0, #0
    7de8:	46040e00 	strmi	r0, [r4], -r0, lsl #28
    7dec:	11000003 	tstne	r0, r3
    7df0:	00000bd7 	ldrdeq	r0, [r0], -r7
    7df4:	1b031c08 	blne	cee1c <__ccfg+0xaee74>
    7df8:	00000346 	andeq	r0, r0, r6, asr #6
    7dfc:	000bb714 	andeq	fp, fp, r4, lsl r7
    7e00:	031e0800 	tsteq	lr, #0, 16
    7e04:	0003db14 	andeq	sp, r3, r4, lsl fp
    7e08:	0e010100 	adfeqs	f0, f1, f0
    7e0c:	0003bf04 	andeq	fp, r3, r4, lsl #30
    7e10:	57011900 	strpl	r1, [r1, -r0, lsl #18]
    7e14:	0100001e 	tsteq	r0, lr, lsl r0
    7e18:	8101050c 	tsthi	r1, ip, lsl #10
    7e1c:	54000000 	strpl	r0, [r0], #-0
    7e20:	a8000026 	stmdage	r0, {r1, r2, r5}
    7e24:	01000026 	tsteq	r0, r6, lsr #32
    7e28:	0004499c 	muleq	r4, ip, r9
    7e2c:	74731a00 	ldrbtvc	r1, [r3], #-2560	; 0xfffff600
    7e30:	140c0100 	strne	r0, [ip], #-256	; 0xffffff00
    7e34:	000000c1 	andeq	r0, r0, r1, asr #1
    7e38:	00002726 	andeq	r2, r0, r6, lsr #14
    7e3c:	01006d1b 	tsteq	r0, fp, lsl sp
    7e40:	0449240c 	strbeq	r2, [r9], #-1036	; 0xfffffbf4
    7e44:	91020000 	mrsls	r0, (UNDEF: 2)
    7e48:	f81d1c74 			; <UNDEFINED> instruction: 0xf81d1c74
    7e4c:	01000025 	tsteq	r0, r5, lsr #32
    7e50:	0081060e 	addeq	r0, r1, lr, lsl #12
    7e54:	27390000 	ldrcs	r0, [r9, -r0]!
    7e58:	621e0000 	andsvs	r0, lr, #0
    7e5c:	01006675 	tsteq	r0, r5, ror r6
    7e60:	01bb080f 			; <UNDEFINED> instruction: 0x01bb080f
    7e64:	27780000 	ldrbcs	r0, [r8, -r0]!
    7e68:	611f0000 	tstvs	pc, r0
    7e6c:	10010070 	andne	r0, r1, r0, ror r0
    7e70:	0000b50a 	andeq	fp, r0, sl, lsl #10
    7e74:	5c910200 	lfmpl	f0, 4, [r1], {0}
    7e78:	c8040e00 	stmdagt	r4, {r9, sl, fp}
    7e7c:	00000001 	andeq	r0, r0, r1
    7e80:	0000044c 	andeq	r0, r0, ip, asr #8
    7e84:	1ff10003 	svcne	0x00f10003
    7e88:	01040000 	mrseq	r0, (UNDEF: 4)
    7e8c:	000000a3 	andeq	r0, r0, r3, lsr #1
    7e90:	001ea20c 	andseq	sl, lr, ip, lsl #4
    7e94:	000df700 	andeq	pc, sp, r0, lsl #14
    7e98:	000d6000 	andeq	r6, sp, r0
    7e9c:	00000000 	andeq	r0, r0, r0
    7ea0:	0054c900 	subseq	ip, r4, r0, lsl #18
    7ea4:	06010200 	streq	r0, [r1], -r0, lsl #4
    7ea8:	00000c58 	andeq	r0, r0, r8, asr ip
    7eac:	66050202 	strvs	r0, [r5], -r2, lsl #4
    7eb0:	0200000a 	andeq	r0, r0, #10
    7eb4:	07f80504 	ldrbeq	r0, [r8, r4, lsl #10]!
    7eb8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7ebc:	0007f305 	andeq	pc, r7, r5, lsl #6
    7ec0:	2a090300 	bcs	248ac8 <__ccfg+0x228b20>
    7ec4:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    7ec8:	00004d18 	andeq	r4, r0, r8, lsl sp
    7ecc:	08010200 	stmdaeq	r1, {r9}
    7ed0:	00000c56 	andeq	r0, r0, r6, asr ip
    7ed4:	002dff03 	eoreq	pc, sp, r3, lsl #30
    7ed8:	19310200 	ldmdbne	r1!, {r9}
    7edc:	00000060 	andeq	r0, r0, r0, rrx
    7ee0:	53070202 	movwpl	r0, #29186	; 0x7202
    7ee4:	0300000d 	movweq	r0, #13
    7ee8:	000029a1 	andeq	r2, r0, r1, lsr #19
    7eec:	73193402 	tstvc	r9, #33554432	; 0x2000000
    7ef0:	02000000 	andeq	r0, r0, #0
    7ef4:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
    7ef8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7efc:	00042307 	andeq	r2, r4, r7, lsl #6
    7f00:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    7f04:	00746e69 	rsbseq	r6, r4, r9, ror #28
    7f08:	2d070402 	cfstrscs	mvf0, [r7, #-8]
    7f0c:	03000004 	movweq	r0, #4
    7f10:	00000519 	andeq	r0, r0, r9, lsl r5
    7f14:	9b1b2803 	blls	6d1f28 <__ccfg+0x6b1f80>
    7f18:	05000000 	streq	r0, [r0, #-0]
    7f1c:	00000b8b 	andeq	r0, r0, fp, lsl #23
    7f20:	b3000904 	movwlt	r0, #2308	; 0x904
    7f24:	06000000 	streq	r0, [r0], -r0
    7f28:	00000868 	andeq	r0, r0, r8, ror #16
    7f2c:	000000b3 	strheq	r0, [r0], -r3
    7f30:	07000100 	streq	r0, [r0, -r0, lsl #2]
    7f34:	0b8d0304 	bleq	fe348b4c <_estack+0xde343b4c>
    7f38:	63030000 	movwvs	r0, #12288	; 0x3000
    7f3c:	00008f18 	andeq	r8, r0, r8, lsl pc
    7f40:	28e80300 	stmiacs	r8!, {r8, r9}^
    7f44:	27040000 	strcs	r0, [r4, -r0]
    7f48:	00005412 	andeq	r5, r0, r2, lsl r4
    7f4c:	00c10800 	sbceq	r0, r1, r0, lsl #16
    7f50:	af030000 	svcge	0x00030000
    7f54:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    7f58:	0041122b 	subeq	r1, r1, fp, lsr #4
    7f5c:	d2090000 	andle	r0, r9, #0
    7f60:	03000000 	movweq	r0, #0
    7f64:	0000293a 	andeq	r2, r0, sl, lsr r9
    7f68:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    7f6c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7f70:	000000e3 	andeq	r0, r0, r3, ror #1
    7f74:	00064103 	andeq	r4, r6, r3, lsl #2
    7f78:	122d0400 	eorne	r0, sp, #0, 8
    7f7c:	00000067 	andeq	r0, r0, r7, rrx
    7f80:	3204080a 	andcc	r0, r4, #655360	; 0xa0000
    7f84:	00018e09 	andeq	r8, r1, r9, lsl #28
    7f88:	002b0b00 	eoreq	r0, fp, r0, lsl #22
    7f8c:	34040000 	strcc	r0, [r4], #-0
    7f90:	0000d207 	andeq	sp, r0, r7, lsl #4
    7f94:	07010100 	streq	r0, [r1, -r0, lsl #2]
    7f98:	06470b00 	strbeq	r0, [r7], -r0, lsl #22
    7f9c:	35040000 	strcc	r0, [r4, #-0]
    7fa0:	0000d203 	andeq	sp, r0, r3, lsl #4
    7fa4:	06010100 	streq	r0, [r1], -r0, lsl #2
    7fa8:	02de0b00 	sbcseq	r0, lr, #0, 22
    7fac:	36040000 	strcc	r0, [r4], -r0
    7fb0:	0000d203 	andeq	sp, r0, r3, lsl #4
    7fb4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    7fb8:	06b20b00 	ldrteq	r0, [r2], r0, lsl #22
    7fbc:	37040000 	strcc	r0, [r4, -r0]
    7fc0:	0000d203 	andeq	sp, r0, r3, lsl #4
    7fc4:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    7fc8:	0a9a0b00 	beq	fe68abd0 <_estack+0xde685bd0>
    7fcc:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    7fd0:	0000d203 	andeq	sp, r0, r3, lsl #4
    7fd4:	00040100 	andeq	r0, r4, r0, lsl #2
    7fd8:	06560c00 	ldrbeq	r0, [r6], -r0, lsl #24
    7fdc:	3a040000 	bcc	107fe4 <__ccfg+0xe803c>
    7fe0:	0000d207 	andeq	sp, r0, r7, lsl #4
    7fe4:	f60c0100 			; <UNDEFINED> instruction: 0xf60c0100
    7fe8:	04000008 	streq	r0, [r0], #-8
    7fec:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    7ff0:	0c020000 	stceq	0, cr0, [r2], {-0}
    7ff4:	00000f27 	andeq	r0, r0, r7, lsr #30
    7ff8:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    7ffc:	03000000 	movweq	r0, #0
    8000:	00090e0c 	andeq	r0, r9, ip, lsl #28
    8004:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    8008:	000000e3 	andeq	r0, r0, r3, ror #1
    800c:	14030004 	strne	r0, [r3], #-4
    8010:	04000003 	streq	r0, [r0], #-3
    8014:	01000341 	tsteq	r0, r1, asr #6
    8018:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    801c:	0d000001 	stceq	0, cr0, [r0, #-4]
    8020:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
    8024:	9a1a4304 	bls	698c3c <__ccfg+0x678c94>
    8028:	01000001 	tsteq	r0, r1
    802c:	01970d01 	orrseq	r0, r7, r1, lsl #26
    8030:	45040000 	strmi	r0, [r4, #-0]
    8034:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    8038:	0e010100 	adfeqs	f0, f1, f0
    803c:	0001c104 	andeq	ip, r1, r4, lsl #2
    8040:	08010200 	stmdaeq	r1, {r9}
    8044:	00000c5f 	andeq	r0, r0, pc, asr ip
    8048:	0001c108 	andeq	ip, r1, r8, lsl #2
    804c:	031d0d00 	tsteq	sp, #0, 26
    8050:	45040000 	strmi	r0, [r4, #-0]
    8054:	0001bb1e 	andeq	fp, r1, lr, lsl fp
    8058:	0a010100 	beq	48460 <__ccfg+0x284b8>
    805c:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    8060:	0000020c 	andeq	r0, r0, ip, lsl #4
    8064:	000cc50c 	andeq	ip, ip, ip, lsl #10
    8068:	0b900500 	bleq	fe409470 <_estack+0xde404470>
    806c:	00000067 	andeq	r0, r0, r7, rrx
    8070:	10620c00 	rsbne	r0, r2, r0, lsl #24
    8074:	91050000 	mrsls	r0, (UNDEF: 5)
    8078:	0000c108 	andeq	ip, r0, r8, lsl #2
    807c:	bc0c0400 	cfstrslt	mvf0, [ip], {-0}
    8080:	05000001 	streq	r0, [r0, #-1]
    8084:	00de1092 	smullseq	r1, lr, r2, r0
    8088:	00060000 	andeq	r0, r6, r0
    808c:	000cb903 	andeq	fp, ip, r3, lsl #18
    8090:	03930500 	orrseq	r0, r3, #0, 10
    8094:	000001db 	ldrdeq	r0, [r0], -fp
    8098:	00020c0f 	andeq	r0, r2, pc, lsl #24
    809c:	00022300 	andeq	r2, r2, r0, lsl #6
    80a0:	0d001000 	stceq	0, cr1, [r0, #-0]
    80a4:	00000938 	andeq	r0, r0, r8, lsr r9
    80a8:	180f9905 	stmdane	pc, {r0, r2, r8, fp, ip, pc}	; <UNPREDICTABLE>
    80ac:	01000002 	tsteq	r0, r2
    80b0:	06010a01 	streq	r0, [r1], -r1, lsl #20
    80b4:	025b0991 	subseq	r0, fp, #2375680	; 0x244000
    80b8:	150b0000 	strne	r0, [fp, #-0]
    80bc:	06000009 	streq	r0, [r0], -r9
    80c0:	00d20793 	smullseq	r0, r2, r3, r7
    80c4:	07010000 	streq	r0, [r1, -r0]
    80c8:	c70b0001 	strgt	r0, [fp, -r1]
    80cc:	06000005 	streq	r0, [r0], -r5
    80d0:	00d20394 	smullseq	r0, r2, r4, r3
    80d4:	01010000 	mrseq	r0, (UNDEF: 1)
    80d8:	03000000 	movweq	r0, #0
    80dc:	00000aa6 	andeq	r0, r0, r6, lsr #21
    80e0:	31039606 	tstcc	r3, r6, lsl #12
    80e4:	08000002 	stmdaeq	r0, {r1}
    80e8:	0000025b 	andeq	r0, r0, fp, asr r2
    80ec:	0002670f 	andeq	r6, r2, pc, lsl #14
    80f0:	00027700 	andeq	r7, r2, r0, lsl #14
    80f4:	08001000 	stmdaeq	r0, {ip}
    80f8:	0000026c 	andeq	r0, r0, ip, ror #4
    80fc:	0003ac0d 	andeq	sl, r3, sp, lsl #24
    8100:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    8104:	00000277 	andeq	r0, r0, r7, ror r2
    8108:	cd0f0101 	stfgts	f0, [pc, #-4]	; 810c <__exidx_end+0x26e8>
    810c:	95000000 	strls	r0, [r0, #-0]
    8110:	10000002 	andne	r0, r0, r2
    8114:	028a0800 	addeq	r0, sl, #0, 16
    8118:	090d0000 	stmdbeq	sp, {}	; <UNPREDICTABLE>
    811c:	07000006 	streq	r0, [r0, -r6]
    8120:	02951306 	addseq	r1, r5, #402653184	; 0x18000000
    8124:	01010000 	mrseq	r0, (UNDEF: 1)
    8128:	0008d80d 	andeq	sp, r8, sp, lsl #16
    812c:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    8130:	000000e3 	andeq	r0, r0, r3, ror #1
    8134:	6d110101 	ldfvss	f0, [r1, #-4]
    8138:	0800000c 	stmdaeq	r0, {r2, r3}
    813c:	c310016e 	tstgt	r0, #-2147483621	; 0x8000001b
    8140:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    8144:	0002c904 	andeq	ip, r2, r4, lsl #18
    8148:	d5011200 	strle	r1, [r1, #-512]	; 0xfffffe00
    814c:	13000002 	movwne	r0, #2
    8150:	000000c1 	andeq	r0, r0, r1, asr #1
    8154:	01c80f00 	biceq	r0, r8, r0, lsl #30
    8158:	02e00000 	rsceq	r0, r0, #0
    815c:	00100000 	andseq	r0, r0, r0
    8160:	0002d508 	andeq	sp, r2, r8, lsl #10
    8164:	09e11400 	stmibeq	r1!, {sl, ip}^
    8168:	7f080000 	svcvc	0x00080000
    816c:	02e01601 	rsceq	r1, r0, #1048576	; 0x100000
    8170:	01010000 	mrseq	r0, (UNDEF: 1)
    8174:	00039814 	andeq	r9, r3, r4, lsl r8
    8178:	01820800 	orreq	r0, r2, r0, lsl #16
    817c:	0000ef14 	andeq	lr, r0, r4, lsl pc
    8180:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    8184:	00000370 	andeq	r0, r0, r0, ror r3
    8188:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    818c:	000000e3 	andeq	r0, r0, r3, ror #1
    8190:	08150101 	ldmdaeq	r5, {r0, r8}
    8194:	09030308 	stmdbeq	r3, {r3, r8, r9}
    8198:	00000339 	andeq	r0, r0, r9, lsr r3
    819c:	003c8e16 	eorseq	r8, ip, r6, lsl lr
    81a0:	03070800 	movweq	r0, #30720	; 0x7800
    81a4:	0000c107 	andeq	ip, r0, r7, lsl #2
    81a8:	ba160000 	blt	5881b0 <__ccfg+0x568208>
    81ac:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    81b0:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    81b4:	04000000 	streq	r0, [r0], #-0
    81b8:	0a041100 	beq	10c5c0 <__ccfg+0xec618>
    81bc:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    81c0:	03120303 	tsteq	r2, #201326592	; 0xc000000
    81c4:	20170000 	andscs	r0, r7, r0
    81c8:	30000000 	andcc	r0, r0, r0
    81cc:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    81d0:	000003a9 	andeq	r0, r0, r9, lsr #7
    81d4:	001f1116 	andseq	r1, pc, r6, lsl r1	; <UNPREDICTABLE>
    81d8:	03140800 	tsteq	r4, #0, 16
    81dc:	0000c108 	andeq	ip, r0, r8, lsl #2
    81e0:	e2160000 	ands	r0, r6, #0
    81e4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    81e8:	c1080315 	tstgt	r8, r5, lsl r3
    81ec:	02000000 	andeq	r0, r0, #0
    81f0:	004c7b16 	subeq	r7, ip, r6, lsl fp
    81f4:	03160800 	tsteq	r6, #0, 16
    81f8:	0002b60b 	andeq	fp, r2, fp, lsl #12
    81fc:	41160400 	tstmi	r6, r0, lsl #8
    8200:	08000047 	stmdaeq	r0, {r0, r1, r2, r6}
    8204:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    8208:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    820c:	00000f16 	andeq	r0, r0, r6, lsl pc
    8210:	03180800 	tsteq	r8, #0, 16
    8214:	0003a90f 	andeq	sl, r3, pc, lsl #18
    8218:	58160c00 	ldmdapl	r6, {sl, fp}
    821c:	08000009 	stmdaeq	r0, {r0, r3}
    8220:	b9150319 	ldmdblt	r5, {r0, r3, r4, r8, r9}
    8224:	2c000003 	stccs	0, cr0, [r0], {3}
    8228:	03390f00 	teqeq	r9, #0, 30
    822c:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    8230:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    8234:	03000000 	movweq	r0, #0
    8238:	46040e00 	strmi	r0, [r4], -r0, lsl #28
    823c:	11000003 	tstne	r0, r3
    8240:	00000bd7 	ldrdeq	r0, [r0], -r7
    8244:	1b031c08 	blne	cf26c <__ccfg+0xaf2c4>
    8248:	00000346 	andeq	r0, r0, r6, asr #6
    824c:	000bb714 	andeq	fp, fp, r4, lsl r7
    8250:	031e0800 	tsteq	lr, #0, 16
    8254:	0003db14 	andeq	sp, r3, r4, lsl fp
    8258:	0e010100 	adfeqs	f0, f1, f0
    825c:	0003bf04 	andeq	fp, r3, r4, lsl #30
    8260:	1e460d00 	cdpne	13, 4, cr0, cr6, cr0, {0}
    8264:	0a010000 	beq	4826c <__ccfg+0x282c4>
    8268:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    826c:	19010100 	stmdbne	r1, {r8}
    8270:	001ee301 	andseq	lr, lr, r1, lsl #6
    8274:	050e0100 	streq	r0, [lr, #-256]	; 0xffffff00
    8278:	00008101 	andeq	r8, r0, r1, lsl #2
    827c:	0026a800 	eoreq	sl, r6, r0, lsl #16
    8280:	00270800 	eoreq	r0, r7, r0, lsl #16
    8284:	499c0100 	ldmibmi	ip, {r8}
    8288:	1a000004 	bne	82a0 <__exidx_end+0x287c>
    828c:	01007473 	tsteq	r0, r3, ror r4
    8290:	00c1130e 	sbceq	r1, r1, lr, lsl #6
    8294:	27ac0000 	strcs	r0, [ip, r0]!
    8298:	661b0000 	ldrvs	r0, [fp], -r0
    829c:	0100746d 	tsteq	r0, sp, ror #8
    82a0:	0449230e 	strbeq	r2, [r9], #-782	; 0xfffffcf2
    82a4:	91020000 	mrsls	r0, (UNDEF: 2)
    82a8:	f81d1c74 			; <UNDEFINED> instruction: 0xf81d1c74
    82ac:	01000025 	tsteq	r0, r5, lsr #32
    82b0:	00810613 	addeq	r0, r1, r3, lsl r6
    82b4:	27ca0000 	strbcs	r0, [sl, r0]
    82b8:	611e0000 	tstvs	lr, r0
    82bc:	14010070 	strne	r0, [r1], #-112	; 0xffffff90
    82c0:	0000b50a 	andeq	fp, r0, sl, lsl #10
    82c4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    82c8:	c8040e00 	stmdagt	r4, {r9, sl, fp}
    82cc:	00000001 	andeq	r0, r0, r1
    82d0:	00002474 	andeq	r2, r0, r4, ror r4
    82d4:	218c0003 	orrcs	r0, ip, r3
    82d8:	01040000 	mrseq	r0, (UNDEF: 4)
    82dc:	000000a3 	andeq	r0, r0, r3, lsr #1
    82e0:	0022c80c 	eoreq	ip, r2, ip, lsl #16
    82e4:	000df700 	andeq	pc, sp, r0, lsl #14
    82e8:	000ee800 	andeq	lr, lr, r0, lsl #16
    82ec:	00000000 	andeq	r0, r0, r0
    82f0:	00567f00 	subseq	r7, r6, r0, lsl #30
    82f4:	2b980200 	blcs	fe608afc <_estack+0xde603afc>
    82f8:	22060000 	andcs	r0, r6, #0
    82fc:	00003117 	andeq	r3, r0, r7, lsl r1
    8300:	06010300 	streq	r0, [r1], -r0, lsl #6
    8304:	00000c58 	andeq	r0, r0, r8, asr ip
    8308:	0031da02 	eorseq	sp, r1, r2, lsl #20
    830c:	18250600 	stmdane	r5!, {r9, sl}
    8310:	00000044 	andeq	r0, r0, r4, asr #32
    8314:	66050203 	strvs	r0, [r5], -r3, lsl #4
    8318:	0300000a 	movweq	r0, #10
    831c:	07f80504 	ldrbeq	r0, [r8, r4, lsl #10]!
    8320:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    8324:	0007f305 	andeq	pc, r7, r5, lsl #6
    8328:	2a090200 	bcs	248b30 <__ccfg+0x228b88>
    832c:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    8330:	00006518 	andeq	r6, r0, r8, lsl r5
    8334:	08010300 	stmdaeq	r1, {r8, r9}
    8338:	00000c56 	andeq	r0, r0, r6, asr ip
    833c:	002dff02 	eoreq	pc, sp, r2, lsl #30
    8340:	19310600 	ldmdbne	r1!, {r9, sl}
    8344:	00000078 	andeq	r0, r0, r8, ror r0
    8348:	53070203 	movwpl	r0, #29187	; 0x7203
    834c:	0200000d 	andeq	r0, r0, #13
    8350:	000029a1 	andeq	r2, r0, r1, lsr #19
    8354:	90193406 	andsls	r3, r9, r6, lsl #8
    8358:	04000000 	streq	r0, [r0], #-0
    835c:	0000007f 	andeq	r0, r0, pc, ror r0
    8360:	28070403 	stmdacs	r7, {r0, r1, sl}
    8364:	05000004 	streq	r0, [r0, #-4]
    8368:	00000090 	muleq	r0, r0, r0
    836c:	23070803 	movwcs	r0, #30723	; 0x7803
    8370:	06000004 	streq	r0, [r0], -r4
    8374:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    8378:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
    837c:	00042d07 	andeq	r2, r4, r7, lsl #26
    8380:	0bd00700 	bleq	ff409f88 <_estack+0xdf404f88>
    8384:	5e070000 	cdppl	0, 0, cr0, cr7, cr0, {0}
    8388:	00aa1701 	adceq	r1, sl, r1, lsl #14
    838c:	36020000 	strcc	r0, [r2], -r0
    8390:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    8394:	004b0e2e 	subeq	r0, fp, lr, lsr #28
    8398:	f6020000 			; <UNDEFINED> instruction: 0xf6020000
    839c:	08000002 	stmdaeq	r0, {r1}
    83a0:	004b0e74 	subeq	r0, fp, r4, ror lr
    83a4:	04080000 	streq	r0, [r8], #-0
    83a8:	f803a508 			; <UNDEFINED> instruction: 0xf803a508
    83ac:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    83b0:	00000767 	andeq	r0, r0, r7, ror #14
    83b4:	b10ca708 	tstlt	ip, r8, lsl #14
    83b8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    83bc:	00000aaf 	andeq	r0, r0, pc, lsr #21
    83c0:	f813a808 			; <UNDEFINED> instruction: 0xf813a808
    83c4:	00000000 	andeq	r0, r0, r0
    83c8:	0000650a 	andeq	r6, r0, sl, lsl #10
    83cc:	00010800 	andeq	r0, r1, r0, lsl #16
    83d0:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    83d4:	00030000 	andeq	r0, r3, r0
    83d8:	a208080c 	andge	r0, r8, #12, 16	; 0xc0000
    83dc:	00012c09 	andeq	r2, r1, r9, lsl #24
    83e0:	03900d00 	orrseq	r0, r0, #0, 26
    83e4:	a4080000 	strge	r0, [r8], #-0
    83e8:	0000a307 	andeq	sl, r0, r7, lsl #6
    83ec:	fc0d0000 	stc2	0, cr0, [sp], {-0}
    83f0:	08000005 	stmdaeq	r0, {r0, r2}
    83f4:	00d605a9 	sbcseq	r0, r6, r9, lsr #11
    83f8:	00040000 	andeq	r0, r4, r0
    83fc:	0008b002 	andeq	fp, r8, r2
    8400:	03aa0800 			; <UNDEFINED> instruction: 0x03aa0800
    8404:	00000108 	andeq	r0, r0, r8, lsl #2
    8408:	3d02040e 	cfstrscc	mvf0, [r2, #-56]	; 0xffffffc8
    840c:	09000008 	stmdbeq	r0, {r3}
    8410:	00901916 	addseq	r1, r0, r6, lsl r9
    8414:	4a020000 	bmi	8841c <__ccfg+0x68474>
    8418:	0a000002 	beq	8428 <__exidx_end+0x2a04>
    841c:	00a30d0c 	adceq	r0, r3, ip, lsl #26
    8420:	25020000 	strcs	r0, [r2, #-0]
    8424:	09000007 	stmdbeq	r0, {r0, r1, r2}
    8428:	01461b23 	cmpeq	r6, r3, lsr #22
    842c:	290f0000 	stmdbcs	pc, {}	; <UNPREDICTABLE>
    8430:	18000003 	stmdane	r0, {r0, r1}
    8434:	b8083409 	stmdalt	r8, {r0, r3, sl, ip, sp}
    8438:	0d000001 	stceq	0, cr0, [r0, #-4]
    843c:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
    8440:	b8133609 	ldmdalt	r3, {r0, r3, r9, sl, ip, sp}
    8444:	00000001 	andeq	r0, r0, r1
    8448:	006b5f10 	rsbeq	r5, fp, r0, lsl pc
    844c:	a3073709 	movwge	r3, #30473	; 0x7709
    8450:	04000000 	streq	r0, [r0], #-0
    8454:	000b5d0d 	andeq	r5, fp, sp, lsl #26
    8458:	0b370900 	bleq	dca860 <__ccfg+0xdaa8b8>
    845c:	000000a3 	andeq	r0, r0, r3, lsr #1
    8460:	43e20d08 	mvnmi	r0, #8, 26	; 0x200
    8464:	37090000 	strcc	r0, [r9, -r0]
    8468:	0000a314 	andeq	sl, r0, r4, lsl r3
    846c:	570d0c00 	strpl	r0, [sp, -r0, lsl #24]
    8470:	09000004 	stmdbeq	r0, {r2}
    8474:	00a31b37 	adceq	r1, r3, r7, lsr fp
    8478:	10100000 	andsne	r0, r0, r0
    847c:	0900785f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}
    8480:	01be0b38 			; <UNDEFINED> instruction: 0x01be0b38
    8484:	00140000 	andseq	r0, r4, r0
    8488:	015e0411 	cmpeq	lr, r1, lsl r4
    848c:	3a0a0000 	bcc	288494 <__ccfg+0x2684ec>
    8490:	ce000001 	cdpgt	0, 0, cr0, cr0, cr1, {0}
    8494:	0b000001 	bleq	84a0 <__exidx_end+0x2a7c>
    8498:	000000aa 	andeq	r0, r0, sl, lsr #1
    849c:	780f0000 	stmdavc	pc, {}	; <UNPREDICTABLE>
    84a0:	2400000b 	strcs	r0, [r0], #-11
    84a4:	51083c09 	tstpl	r8, r9, lsl #24
    84a8:	0d000002 	stceq	0, cr0, [r0, #-8]
    84ac:	00000567 	andeq	r0, r0, r7, ror #10
    84b0:	a3093e09 	movwge	r3, #40457	; 0x9e09
    84b4:	00000000 	andeq	r0, r0, r0
    84b8:	0003b90d 	andeq	fp, r3, sp, lsl #18
    84bc:	093f0900 	ldmdbeq	pc!, {r8, fp}	; <UNPREDICTABLE>
    84c0:	000000a3 	andeq	r0, r0, r3, lsr #1
    84c4:	035a0d04 	cmpeq	sl, #4, 26	; 0x100
    84c8:	40090000 	andmi	r0, r9, r0
    84cc:	0000a309 	andeq	sl, r0, r9, lsl #6
    84d0:	6f0d0800 	svcvs	0x000d0800
    84d4:	09000006 	stmdbeq	r0, {r1, r2}
    84d8:	00a30941 	adceq	r0, r3, r1, asr #18
    84dc:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    84e0:	0000094f 	andeq	r0, r0, pc, asr #18
    84e4:	a3094209 	movwge	r4, #37385	; 0x9209
    84e8:	10000000 	andne	r0, r0, r0
    84ec:	000ac90d 	andeq	ip, sl, sp, lsl #18
    84f0:	09430900 	stmdbeq	r3, {r8, fp}^
    84f4:	000000a3 	andeq	r0, r0, r3, lsr #1
    84f8:	033d0d14 	teqeq	sp, #20, 26	; 0x500
    84fc:	44090000 	strmi	r0, [r9], #-0
    8500:	0000a309 	andeq	sl, r0, r9, lsl #6
    8504:	700d1800 	andvc	r1, sp, r0, lsl #16
    8508:	09000005 	stmdbeq	r0, {r0, r2}
    850c:	00a30945 	adceq	r0, r3, r5, asr #18
    8510:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    8514:	000008eb 	andeq	r0, r0, fp, ror #17
    8518:	a3094609 	movwge	r4, #38409	; 0x9609
    851c:	20000000 	andcs	r0, r0, r0
    8520:	00321200 	eorseq	r1, r2, r0, lsl #4
    8524:	01080000 	mrseq	r0, (UNDEF: 8)
    8528:	96084f09 	strls	r4, [r8], -r9, lsl #30
    852c:	0d000002 	stceq	0, cr0, [r0, #-8]
    8530:	00000d1a 	andeq	r0, r0, sl, lsl sp
    8534:	960a5009 	strls	r5, [sl], -r9
    8538:	00000002 	andeq	r0, r0, r2
    853c:	000c120d 	andeq	r1, ip, sp, lsl #4
    8540:	09510900 	ldmdbeq	r1, {r8, fp}^
    8544:	00000296 	muleq	r0, r6, r2
    8548:	0db31380 	ldceq	3, cr1, [r3, #512]!	; 0x200
    854c:	53090000 	movwpl	r0, #36864	; 0x9000
    8550:	00013a0a 	andeq	r3, r1, sl, lsl #20
    8554:	13010000 	movwne	r0, #4096	; 0x1000
    8558:	00000ea4 	andeq	r0, r0, r4, lsr #29
    855c:	3a0a5609 	bcc	29dd88 <__ccfg+0x27dde0>
    8560:	04000001 	streq	r0, [r0], #-1
    8564:	380a0001 	stmdacc	sl, {r0}
    8568:	a6000001 	strge	r0, [r0], -r1
    856c:	0b000002 	bleq	857c <__exidx_end+0x2b58>
    8570:	000000aa 	andeq	r0, r0, sl, lsr #1
    8574:	1112001f 	tstne	r2, pc, lsl r0
    8578:	9000000a 	andls	r0, r0, sl
    857c:	08620901 	stmdaeq	r2!, {r0, r8, fp}^
    8580:	000002e9 	andeq	r0, r0, r9, ror #5
    8584:	000eb10d 	andeq	fp, lr, sp, lsl #2
    8588:	12630900 	rsbne	r0, r3, #0, 18
    858c:	000002e9 	andeq	r0, r0, r9, ror #5
    8590:	057f0d00 	ldrbeq	r0, [pc, #-3328]!	; 7898 <__exidx_end+0x1e74>
    8594:	64090000 	strvs	r0, [r9], #-0
    8598:	0000a306 	andeq	sl, r0, r6, lsl #6
    859c:	fe0d0400 	cdp2	4, 0, cr0, cr13, cr0, {0}
    85a0:	09000002 	stmdbeq	r0, {r1}
    85a4:	02ef0966 	rsceq	r0, pc, #1671168	; 0x198000
    85a8:	0d080000 	stceq	0, cr0, [r8, #-0]
    85ac:	00000032 	andeq	r0, r0, r2, lsr r0
    85b0:	511e6709 	tstpl	lr, r9, lsl #14
    85b4:	88000002 	stmdahi	r0, {r1}
    85b8:	a6041100 	strge	r1, [r4], -r0, lsl #2
    85bc:	0a000002 	beq	85cc <__exidx_end+0x2ba8>
    85c0:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    85c4:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    85c8:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    85cc:	11001f00 	tstne	r0, r0, lsl #30
    85d0:	00030504 	andeq	r0, r3, r4, lsl #10
    85d4:	0f011400 	svceq	0x00011400
    85d8:	00000cb2 			; <UNDEFINED> instruction: 0x00000cb2
    85dc:	087a0908 	ldmdaeq	sl!, {r3, r8, fp}^
    85e0:	0000032f 	andeq	r0, r0, pc, lsr #6
    85e4:	000cc40d 	andeq	ip, ip, sp, lsl #8
    85e8:	117b0900 	cmnne	fp, r0, lsl #18
    85ec:	0000032f 	andeq	r0, r0, pc, lsr #6
    85f0:	1d8d0d00 	stcne	13, cr0, [sp]
    85f4:	7c090000 	stcvc	0, cr0, [r9], {-0}
    85f8:	0000a306 	andeq	sl, r0, r6, lsl #6
    85fc:	11000400 	tstne	r0, r0, lsl #8
    8600:	00006504 	andeq	r6, r0, r4, lsl #10
    8604:	044f0f00 	strbeq	r0, [pc], #-3840	; 860c <__exidx_end+0x2be8>
    8608:	09680000 	stmdbeq	r8!, {}^	; <UNPREDICTABLE>
    860c:	047808ba 	ldrbteq	r0, [r8], #-2234	; 0xfffff746
    8610:	5f100000 	svcpl	0x00100000
    8614:	bb090070 	bllt	2487dc <__ccfg+0x228834>
    8618:	00032f12 	andeq	r2, r3, r2, lsl pc
    861c:	5f100000 	svcpl	0x00100000
    8620:	bc090072 	stclt	0, cr0, [r9], {114}	; 0x72
    8624:	0000a307 	andeq	sl, r0, r7, lsl #6
    8628:	5f100400 	svcpl	0x00100400
    862c:	bd090077 	stclt	0, cr0, [r9, #-476]	; 0xfffffe24
    8630:	0000a307 	andeq	sl, r0, r7, lsl #6
    8634:	bb0d0800 	bllt	34a63c <__ccfg+0x32a694>
    8638:	09000001 	stmdbeq	r0, {r0}
    863c:	004409be 	strheq	r0, [r4], #-158	; 0xffffff62
    8640:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    8644:	00000854 	andeq	r0, r0, r4, asr r8
    8648:	4409bf09 	strmi	fp, [r9], #-3849	; 0xfffff0f7
    864c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    8650:	66625f10 	uqadd16vs	r5, r2, r0
    8654:	11c00900 	bicne	r0, r0, r0, lsl #18
    8658:	00000307 	andeq	r0, r0, r7, lsl #6
    865c:	01b20d10 			; <UNDEFINED> instruction: 0x01b20d10
    8660:	c1090000 	mrsgt	r0, (UNDEF: 9)
    8664:	0000a307 	andeq	sl, r0, r7, lsl #6
    8668:	030d1800 	movweq	r1, #55296	; 0xd800
    866c:	09000003 	stmdbeq	r0, {r0, r1}
    8670:	01380ac8 	teqeq	r8, r8, asr #21
    8674:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    8678:	00001d1c 	andeq	r1, r0, ip, lsl sp
    867c:	fd1dca09 	ldc2	10, cr12, [sp, #-36]	; 0xffffffdc	; <UNPREDICTABLE>
    8680:	20000005 	andcs	r0, r0, r5
    8684:	001ce30d 	andseq	lr, ip, sp, lsl #6
    8688:	1dcc0900 	vstrne.16	s1, [ip]	; <UNPREDICTABLE>
    868c:	00000628 	andeq	r0, r0, r8, lsr #12
    8690:	0ed10d24 	cdpeq	13, 13, cr0, cr1, cr4, {1}
    8694:	cf090000 	svcgt	0x00090000
    8698:	00064d0d 	andeq	r4, r6, sp, lsl #26
    869c:	d10d2800 	tstle	sp, r0, lsl #16
    86a0:	0900001c 	stmdbeq	r0, {r2, r3, r4}
    86a4:	066809d0 			; <UNDEFINED> instruction: 0x066809d0
    86a8:	102c0000 	eorne	r0, ip, r0
    86ac:	0062755f 	rsbeq	r7, r2, pc, asr r5
    86b0:	0711d309 	ldreq	sp, [r1, -r9, lsl #6]
    86b4:	30000003 	andcc	r0, r0, r3
    86b8:	70755f10 	rsbsvc	r5, r5, r0, lsl pc
    86bc:	12d40900 	sbcsne	r0, r4, #0, 18
    86c0:	0000032f 	andeq	r0, r0, pc, lsr #6
    86c4:	755f1038 	ldrbvc	r1, [pc, #-56]	; 8694 <__exidx_end+0x2c70>
    86c8:	d5090072 	strle	r0, [r9, #-114]	; 0xffffff8e
    86cc:	0000a307 	andeq	sl, r0, r7, lsl #6
    86d0:	080d3c00 	stmdaeq	sp, {sl, fp, ip, sp}
    86d4:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    86d8:	066e11d8 			; <UNDEFINED> instruction: 0x066e11d8
    86dc:	0d400000 	stcleq	0, cr0, [r0, #-0]
    86e0:	00000e51 	andeq	r0, r0, r1, asr lr
    86e4:	7e11d909 	vnmlsvc.f16	s26, s2, s18	; <UNPREDICTABLE>
    86e8:	43000006 	movwmi	r0, #6
    86ec:	626c5f10 	rsbvs	r5, ip, #16, 30	; 0x40
    86f0:	11dc0900 	bicsne	r0, ip, r0, lsl #18
    86f4:	00000307 	andeq	r0, r0, r7, lsl #6
    86f8:	0b6f0d44 	bleq	1bcbc10 <__ccfg+0x1babc68>
    86fc:	df090000 	svcle	0x00090000
    8700:	0000a307 	andeq	sl, r0, r7, lsl #6
    8704:	830d4c00 	movwhi	r4, #56320	; 0xdc00
    8708:	09000004 	stmdbeq	r0, {r2}
    870c:	00be0ae0 	adcseq	r0, lr, r0, ror #21
    8710:	0d500000 	ldcleq	0, cr0, [r0, #-0]
    8714:	00004740 	andeq	r4, r0, r0, asr #14
    8718:	9712e309 	ldrls	lr, [r2, -r9, lsl #6]
    871c:	54000004 	strpl	r0, [r0], #-4
    8720:	000b950d 	andeq	r9, fp, sp, lsl #10
    8724:	0ce70900 			; <UNDEFINED> instruction: 0x0ce70900
    8728:	00000152 	andeq	r0, r0, r2, asr r1
    872c:	0a190d58 	beq	64bc94 <__ccfg+0x62bcec>
    8730:	e9090000 	stmdb	r9, {}	; <UNPREDICTABLE>
    8734:	00012c0e 	andeq	r2, r1, lr, lsl #24
    8738:	840d5c00 	strhi	r5, [sp], #-3072	; 0xfffff400
    873c:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    8740:	00a309ea 	adceq	r0, r3, sl, ror #19
    8744:	00640000 	rsbeq	r0, r4, r0
    8748:	00a30115 	adceq	r0, r3, r5, lsl r1
    874c:	04970000 	ldreq	r0, [r7], #0
    8750:	97160000 	ldrls	r0, [r6, -r0]
    8754:	16000004 	strne	r0, [r0], -r4
    8758:	00000138 	andeq	r0, r0, r8, lsr r1
    875c:	0005eb16 	andeq	lr, r5, r6, lsl fp
    8760:	00a31600 	adceq	r1, r3, r0, lsl #12
    8764:	11000000 	mrsne	r0, (UNDEF: 0)
    8768:	0004a204 	andeq	sl, r4, r4, lsl #4
    876c:	04970400 	ldreq	r0, [r7], #1024	; 0x400
    8770:	4c170000 	ldcmi	0, cr0, [r7], {-0}
    8774:	2800000d 	stmdacs	r0, {r0, r2, r3}
    8778:	02650904 	rsbeq	r0, r5, #4, 18	; 0x10000
    877c:	0005eb08 	andeq	lr, r5, r8, lsl #22
    8780:	08ff1800 	ldmeq	pc!, {fp, ip}^	; <UNPREDICTABLE>
    8784:	67090000 	strvs	r0, [r9, -r0]
    8788:	00a30702 	adceq	r0, r3, r2, lsl #14
    878c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    8790:	000007dd 	ldrdeq	r0, [r0], -sp
    8794:	0b026c09 	bleq	a37c0 <__ccfg+0x83818>
    8798:	000006da 	ldrdeq	r0, [r0], -sl
    879c:	02ee1804 	rsceq	r1, lr, #4, 16	; 0x40000
    87a0:	6c090000 	stcvs	0, cr0, [r9], {-0}
    87a4:	06da1402 	ldrbeq	r1, [sl], r2, lsl #8
    87a8:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    87ac:	00000ef7 	strdeq	r0, [r0], -r7
    87b0:	1e026c09 	cdpne	12, 0, cr6, cr2, cr9, {0}
    87b4:	000006da 	ldrdeq	r0, [r0], -sl
    87b8:	057a180c 	ldrbeq	r1, [sl, #-2060]!	; 0xfffff7f4
    87bc:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
    87c0:	00a30802 	adceq	r0, r3, r2, lsl #16
    87c4:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    87c8:	000004cf 	andeq	r0, r0, pc, asr #9
    87cc:	08026f09 	stmdaeq	r2, {r0, r3, r8, r9, sl, fp, sp, lr}
    87d0:	000008da 	ldrdeq	r0, [r0], -sl
    87d4:	0e641814 	mcreq	8, 3, r1, cr4, cr4, {0}
    87d8:	72090000 	andvc	r0, r9, #0
    87dc:	00a30702 	adceq	r0, r3, r2, lsl #14
    87e0:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
    87e4:	0000428e 	andeq	r4, r0, lr, lsl #5
    87e8:	16027309 	strne	r7, [r2], -r9, lsl #6
    87ec:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    87f0:	07851834 			; <UNDEFINED> instruction: 0x07851834
    87f4:	75090000 	strvc	r0, [r9, #-0]
    87f8:	00a30702 	adceq	r0, r3, r2, lsl #14
    87fc:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
    8800:	0000087f 	andeq	r0, r0, pc, ror r8
    8804:	0a027709 	beq	a6430 <__ccfg+0x86488>
    8808:	00000902 	andeq	r0, r0, r2, lsl #18
    880c:	0352183c 	cmpeq	r2, #60, 16	; 0x3c0000
    8810:	7a090000 	bvc	248818 <__ccfg+0x228870>
    8814:	01b81302 			; <UNDEFINED> instruction: 0x01b81302
    8818:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
    881c:	0000040d 	andeq	r0, r0, sp, lsl #8
    8820:	07027b09 	streq	r7, [r2, -r9, lsl #22]
    8824:	000000a3 	andeq	r0, r0, r3, lsr #1
    8828:	06041844 	streq	r1, [r4], -r4, asr #16
    882c:	7c090000 	stcvc	0, cr0, [r9], {-0}
    8830:	01b81302 			; <UNDEFINED> instruction: 0x01b81302
    8834:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
    8838:	0000081a 	andeq	r0, r0, sl, lsl r8
    883c:	14027d09 	strne	r7, [r2], #-3337	; 0xfffff2f7
    8840:	00000908 	andeq	r0, r0, r8, lsl #18
    8844:	0b55184c 	bleq	154e97c <__ccfg+0x152e9d4>
    8848:	80090000 	andhi	r0, r9, r0
    884c:	00a30702 	adceq	r0, r3, r2, lsl #14
    8850:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    8854:	00000c4e 	andeq	r0, r0, lr, asr #24
    8858:	09028109 	stmdbeq	r2, {r0, r3, r8, pc}
    885c:	000005eb 	andeq	r0, r0, fp, ror #11
    8860:	0c681854 	stcleq	8, cr1, [r8], #-336	; 0xfffffeb0
    8864:	a4090000 	strge	r0, [r9], #-0
    8868:	08b50702 	ldmeq	r5!, {r1, r8, r9, sl}
    886c:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
    8870:	00000a11 	andeq	r0, r0, r1, lsl sl
    8874:	1302a809 	movwne	sl, #10249	; 0x2809
    8878:	000002e9 	andeq	r0, r0, r9, ror #5
    887c:	a9190148 	ldmdbge	r9, {r3, r6, r8}
    8880:	09000006 	stmdbeq	r0, {r1, r2}
    8884:	a61202a9 	ldrge	r0, [r2], -r9, lsr #5
    8888:	4c000002 	stcmi	0, cr0, [r0], {2}
    888c:	06901901 	ldreq	r1, [r0], r1, lsl #18
    8890:	ad090000 	stcge	0, cr0, [r9, #-0]
    8894:	091a0c02 	ldmdbeq	sl, {r1, sl, fp}
    8898:	02dc0000 	sbcseq	r0, ip, #0
    889c:	000cd019 	andeq	sp, ip, r9, lsl r0
    88a0:	02b20900 	adcseq	r0, r2, #0, 18
    88a4:	00069b10 	andeq	r9, r6, r0, lsl fp
    88a8:	1902e000 	stmdbne	r2, {sp, lr, pc}
    88ac:	00000aa1 	andeq	r0, r0, r1, lsr #21
    88b0:	0a02b409 	beq	b58dc <__ccfg+0x95934>
    88b4:	00000926 	andeq	r0, r0, r6, lsr #18
    88b8:	110002ec 	smlattne	r0, ip, r2, r0
    88bc:	0005f104 	andeq	pc, r5, r4, lsl #2
    88c0:	08010300 	stmdaeq	r1, {r8, r9}
    88c4:	00000c5f 	andeq	r0, r0, pc, asr ip
    88c8:	0005f104 	andeq	pc, r5, r4, lsl #2
    88cc:	78041100 	stmdavc	r4, {r8, ip}
    88d0:	15000004 	strne	r0, [r0, #-4]
    88d4:	0000a301 	andeq	sl, r0, r1, lsl #6
    88d8:	00062200 	andeq	r2, r6, r0, lsl #4
    88dc:	04971600 	ldreq	r1, [r7], #1536	; 0x600
    88e0:	38160000 	ldmdacc	r6, {}	; <UNPREDICTABLE>
    88e4:	16000001 	strne	r0, [r0], -r1
    88e8:	00000622 	andeq	r0, r0, r2, lsr #12
    88ec:	0000a316 	andeq	sl, r0, r6, lsl r3
    88f0:	04110000 	ldreq	r0, [r1], #-0
    88f4:	000005f8 	strdeq	r0, [r0], -r8
    88f8:	06030411 			; <UNDEFINED> instruction: 0x06030411
    88fc:	01150000 	tsteq	r5, r0
    8900:	000000ca 	andeq	r0, r0, sl, asr #1
    8904:	0000064d 	andeq	r0, r0, sp, asr #12
    8908:	00049716 	andeq	r9, r4, r6, lsl r7
    890c:	01381600 	teqeq	r8, r0, lsl #12
    8910:	ca160000 	bgt	588918 <__ccfg+0x568970>
    8914:	16000000 	strne	r0, [r0], -r0
    8918:	000000a3 	andeq	r0, r0, r3, lsr #1
    891c:	2e041100 	adfcss	f1, f4, f0
    8920:	15000006 	strne	r0, [r0, #-6]
    8924:	0000a301 	andeq	sl, r0, r1, lsl #6
    8928:	00066800 	andeq	r6, r6, r0, lsl #16
    892c:	04971600 	ldreq	r1, [r7], #1536	; 0x600
    8930:	38160000 	ldmdacc	r6, {}	; <UNPREDICTABLE>
    8934:	00000001 	andeq	r0, r0, r1
    8938:	06530411 			; <UNDEFINED> instruction: 0x06530411
    893c:	650a0000 	strvs	r0, [sl, #-0]
    8940:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    8944:	0b000006 	bleq	8964 <__exidx_end+0x2f40>
    8948:	000000aa 	andeq	r0, r0, sl, lsr #1
    894c:	650a0002 	strvs	r0, [sl, #-2]
    8950:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    8954:	0b000006 	bleq	8974 <__exidx_end+0x2f50>
    8958:	000000aa 	andeq	r0, r0, sl, lsr #1
    895c:	70070000 	andvc	r0, r7, r0
    8960:	09000004 	stmdbeq	r0, {r2}
    8964:	351a0124 	ldrcc	r0, [sl, #-292]	; 0xfffffedc
    8968:	1a000003 	bne	897c <__exidx_end+0x2f58>
    896c:	00000cca 	andeq	r0, r0, sl, asr #25
    8970:	0128090c 			; <UNDEFINED> instruction: 0x0128090c
    8974:	0006d408 	andeq	sp, r6, r8, lsl #8
    8978:	0eb11800 	cdpeq	8, 11, cr1, cr1, cr0, {0}
    897c:	2a090000 	bcs	248984 <__ccfg+0x2289dc>
    8980:	06d41101 	ldrbeq	r1, [r4], r1, lsl #2
    8984:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    8988:	00000bc9 	andeq	r0, r0, r9, asr #23
    898c:	07012b09 	streq	r2, [r1, -r9, lsl #22]
    8990:	000000a3 	andeq	r0, r0, r3, lsr #1
    8994:	076d1804 	strbeq	r1, [sp, -r4, lsl #16]!
    8998:	2c090000 	stccs	0, cr0, [r9], {-0}
    899c:	06da0b01 	ldrbeq	r0, [sl], r1, lsl #22
    89a0:	00080000 	andeq	r0, r8, r0
    89a4:	069b0411 			; <UNDEFINED> instruction: 0x069b0411
    89a8:	04110000 	ldreq	r0, [r1], #-0
    89ac:	0000068e 	andeq	r0, r0, lr, lsl #13
    89b0:	0003dc1a 	andeq	sp, r3, sl, lsl ip
    89b4:	44090e00 	strmi	r0, [r9], #-3584	; 0xfffff200
    89b8:	07190801 	ldreq	r0, [r9, -r1, lsl #16]
    89bc:	38180000 	ldmdacc	r8, {}	; <UNPREDICTABLE>
    89c0:	09000016 	stmdbeq	r0, {r1, r2, r4}
    89c4:	19120145 	ldmdbne	r2, {r0, r2, r6, r8}
    89c8:	00000007 	andeq	r0, r0, r7
    89cc:	00082c18 	andeq	r2, r8, r8, lsl ip
    89d0:	01460900 	cmpeq	r6, r0, lsl #18
    89d4:	00071912 	andeq	r1, r7, r2, lsl r9
    89d8:	ea180600 	b	60a1e0 <__ccfg+0x5ea238>
    89dc:	09000014 	stmdbeq	r0, {r2, r4}
    89e0:	78120147 	ldmdavc	r2, {r0, r1, r2, r6, r8}
    89e4:	0c000000 	stceq	0, cr0, [r0], {-0}
    89e8:	00780a00 	rsbseq	r0, r8, r0, lsl #20
    89ec:	07290000 	streq	r0, [r9, -r0]!
    89f0:	aa0b0000 	bge	2c89f8 <__ccfg+0x2a8a50>
    89f4:	02000000 	andeq	r0, r0, #0
    89f8:	09d01b00 	ldmibeq	r0, {r8, r9, fp, ip}^
    89fc:	3e070285 	cdpcc	2, 0, cr0, cr7, cr5, {4}
    8a00:	18000008 	stmdane	r0, {r3}
    8a04:	00000e57 	andeq	r0, r0, r7, asr lr
    8a08:	18028709 	stmdane	r2, {r0, r3, r8, r9, sl, pc}
    8a0c:	000000aa 	andeq	r0, r0, sl, lsr #1
    8a10:	0cd81800 	ldcleq	8, cr1, [r8], {0}
    8a14:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    8a18:	05eb1202 	strbeq	r1, [fp, #514]!	; 0x202
    8a1c:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    8a20:	0000043a 	andeq	r0, r0, sl, lsr r4
    8a24:	10028909 	andne	r8, r2, r9, lsl #18
    8a28:	0000083e 	andeq	r0, r0, lr, lsr r8
    8a2c:	0b3e1808 	bleq	f8ea54 <__ccfg+0xf6eaac>
    8a30:	8a090000 	bhi	248a38 <__ccfg+0x228a90>
    8a34:	01ce1702 	biceq	r1, lr, r2, lsl #14
    8a38:	18240000 	stmdane	r4!, {}	; <UNPREDICTABLE>
    8a3c:	000007e4 	andeq	r0, r0, r4, ror #15
    8a40:	0f028b09 	svceq	0x00028b09
    8a44:	000000a3 	andeq	r0, r0, r3, lsr #1
    8a48:	0eac1848 	cdpeq	8, 10, cr1, cr12, cr8, {2}
    8a4c:	8c090000 	stchi	0, cr0, [r9], {-0}
    8a50:	009c2c02 	addseq	r2, ip, r2, lsl #24
    8a54:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    8a58:	00000076 	andeq	r0, r0, r6, ror r0
    8a5c:	1a028d09 	bne	abe88 <__ccfg+0x8bee0>
    8a60:	000006e0 	andeq	r0, r0, r0, ror #13
    8a64:	06341858 			; <UNDEFINED> instruction: 0x06341858
    8a68:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    8a6c:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    8a70:	18680000 	stmdane	r8!, {}^	; <UNPREDICTABLE>
    8a74:	00000ce5 	andeq	r0, r0, r5, ror #25
    8a78:	16028f09 	strne	r8, [r2], -r9, lsl #30
    8a7c:	0000012c 	andeq	r0, r0, ip, lsr #2
    8a80:	00681870 	rsbeq	r1, r8, r0, ror r8
    8a84:	90090000 	andls	r0, r9, r0
    8a88:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    8a8c:	18780000 	ldmdane	r8!, {}^	; <UNPREDICTABLE>
    8a90:	00000b65 	andeq	r0, r0, r5, ror #22
    8a94:	10029109 	andne	r9, r2, r9, lsl #2
    8a98:	0000084e 	andeq	r0, r0, lr, asr #16
    8a9c:	04171880 	ldreq	r1, [r7], #-2176	; 0xfffff780
    8aa0:	92090000 	andls	r0, r9, #0
    8aa4:	085e1002 	ldmdaeq	lr, {r1, ip}^
    8aa8:	18880000 	stmne	r8, {}	; <UNPREDICTABLE>
    8aac:	00000c88 	andeq	r0, r0, r8, lsl #25
    8ab0:	0f029309 	svceq	0x00029309
    8ab4:	000000a3 	andeq	r0, r0, r3, lsr #1
    8ab8:	02a318a0 	adceq	r1, r3, #160, 16	; 0xa00000
    8abc:	94090000 	strls	r0, [r9], #-0
    8ac0:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    8ac4:	18a40000 	stmiane	r4!, {}	; <UNPREDICTABLE>
    8ac8:	0000069a 	muleq	r0, sl, r6
    8acc:	16029509 	strne	r9, [r2], -r9, lsl #10
    8ad0:	0000012c 	andeq	r0, r0, ip, lsr #2
    8ad4:	05b618ac 	ldreq	r1, [r6, #2220]!	; 0x8ac
    8ad8:	96090000 	strls	r0, [r9], -r0
    8adc:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    8ae0:	18b40000 	ldmne	r4!, {}	; <UNPREDICTABLE>
    8ae4:	00000845 	andeq	r0, r0, r5, asr #16
    8ae8:	16029709 	strne	r9, [r2], -r9, lsl #14
    8aec:	0000012c 	andeq	r0, r0, ip, lsr #2
    8af0:	062318bc 			; <UNDEFINED> instruction: 0x062318bc
    8af4:	98090000 	stmdals	r9, {}	; <UNPREDICTABLE>
    8af8:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    8afc:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
    8b00:	000008fd 	strdeq	r0, [r0], -sp
    8b04:	08029909 	stmdaeq	r2, {r0, r3, r8, fp, ip, pc}
    8b08:	000000a3 	andeq	r0, r0, r3, lsr #1
    8b0c:	f10a00cc 	cpsie	if,#12
    8b10:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
    8b14:	0b000008 	bleq	8b3c <__exidx_end+0x3118>
    8b18:	000000aa 	andeq	r0, r0, sl, lsr #1
    8b1c:	f10a0019 	cpsie	,#25
    8b20:	5e000005 	cdppl	0, 0, cr0, cr0, cr5, {0}
    8b24:	0b000008 	bleq	8b4c <__exidx_end+0x3128>
    8b28:	000000aa 	andeq	r0, r0, sl, lsr #1
    8b2c:	f10a0007 	cpsie	,#7
    8b30:	6e000005 	cdpvs	0, 0, cr0, cr0, cr5, {0}
    8b34:	0b000008 	bleq	8b5c <__exidx_end+0x3138>
    8b38:	000000aa 	andeq	r0, r0, sl, lsr #1
    8b3c:	f01b0017 			; <UNDEFINED> instruction: 0xf01b0017
    8b40:	07029e09 	streq	r9, [r2, -r9, lsl #28]
    8b44:	00000895 	muleq	r0, r5, r8
    8b48:	0003c218 	andeq	ip, r3, r8, lsl r2
    8b4c:	02a10900 	adceq	r0, r1, #0, 18
    8b50:	0008951b 	andeq	r9, r8, fp, lsl r5
    8b54:	ff180000 			; <UNDEFINED> instruction: 0xff180000
    8b58:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    8b5c:	a51802a2 	ldrge	r0, [r8, #-674]	; 0xfffffd5e
    8b60:	78000008 	stmdavc	r0, {r3}
    8b64:	032f0a00 			; <UNDEFINED> instruction: 0x032f0a00
    8b68:	08a50000 	stmiaeq	r5!, {}	; <UNPREDICTABLE>
    8b6c:	aa0b0000 	bge	2c8b74 <__ccfg+0x2a8bcc>
    8b70:	1d000000 	stcne	0, cr0, [r0, #-0]
    8b74:	00aa0a00 	adceq	r0, sl, r0, lsl #20
    8b78:	08b50000 	ldmeq	r5!, {}	; <UNPREDICTABLE>
    8b7c:	aa0b0000 	bge	2c8b84 <__ccfg+0x2a8bdc>
    8b80:	1d000000 	stcne	0, cr0, [r0, #-0]
    8b84:	09f01c00 	ldmibeq	r0!, {sl, fp, ip}^
    8b88:	da030283 	ble	c959c <__ccfg+0xa95f4>
    8b8c:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    8b90:	00000d4c 	andeq	r0, r0, ip, asr #26
    8b94:	0b029a09 	bleq	af3c0 <__ccfg+0x8f418>
    8b98:	00000729 	andeq	r0, r0, r9, lsr #14
    8b9c:	000b4d1d 	andeq	r4, fp, sp, lsl sp
    8ba0:	02a30900 	adceq	r0, r3, #0, 18
    8ba4:	00086e0b 	andeq	r6, r8, fp, lsl #28
    8ba8:	f10a0000 	cpsie	,#0
    8bac:	ea000005 	b	8bc8 <__exidx_end+0x31a4>
    8bb0:	0b000008 	bleq	8bd8 <__exidx_end+0x31b4>
    8bb4:	000000aa 	andeq	r0, r0, sl, lsr #1
    8bb8:	b71e0018 			; <UNDEFINED> instruction: 0xb71e0018
    8bbc:	0100000e 	tsteq	r0, lr
    8bc0:	08ea0411 	stmiaeq	sl!, {r0, r4, sl}^
    8bc4:	011f0000 	tsteq	pc, r0
    8bc8:	00000902 	andeq	r0, r0, r2, lsl #18
    8bcc:	00049716 	andeq	r9, r4, r6, lsl r7
    8bd0:	04110000 	ldreq	r0, [r1], #-0
    8bd4:	000008f6 	strdeq	r0, [r0], -r6
    8bd8:	01b80411 			; <UNDEFINED> instruction: 0x01b80411
    8bdc:	011f0000 	tsteq	pc, r0
    8be0:	0000091a 	andeq	r0, r0, sl, lsl r9
    8be4:	0000a316 	andeq	sl, r0, r6, lsl r3
    8be8:	04110000 	ldreq	r0, [r1], #-0
    8bec:	00000920 	andeq	r0, r0, r0, lsr #18
    8bf0:	090e0411 	stmdbeq	lr, {r0, r4, sl}
    8bf4:	8e0a0000 	cdphi	0, 0, cr0, cr10, cr0, {0}
    8bf8:	36000006 	strcc	r0, [r0], -r6
    8bfc:	0b000009 	bleq	8c28 <__exidx_end+0x3204>
    8c00:	000000aa 	andeq	r0, r0, sl, lsr #1
    8c04:	bd200002 	stclt	0, cr0, [r0, #-8]!
    8c08:	0900000a 	stmdbeq	r0, {r1, r3}
    8c0c:	97170333 			; <UNDEFINED> instruction: 0x97170333
    8c10:	01000004 	tsteq	r0, r4
    8c14:	0ab62001 	beq	fed90c20 <_estack+0xded8bc20>
    8c18:	34090000 	strcc	r0, [r9], #-0
    8c1c:	049d1d03 	ldreq	r1, [sp], #3331	; 0xd03
    8c20:	01010000 	mrseq	r0, (UNDEF: 1)
    8c24:	0024ce02 	eoreq	ip, r4, r2, lsl #28
    8c28:	123b0b00 	eorsne	r0, fp, #0, 22
    8c2c:	0000007f 	andeq	r0, r0, pc, ror r0
    8c30:	400b080c 	andmi	r0, fp, ip, lsl #16
    8c34:	00098409 	andeq	r8, r9, r9, lsl #8
    8c38:	1fd10d00 	svcne	0x00d10d00
    8c3c:	410b0000 	mrsmi	r0, (UNDEF: 11)
    8c40:	0009840d 	andeq	r8, r9, sp, lsl #8
    8c44:	140d0000 	strne	r0, [sp], #-0
    8c48:	0b000022 	bleq	8cd8 <__exidx_end+0x32b4>
    8c4c:	09840d42 	stmibeq	r4, {r1, r6, r8, sl, fp}
    8c50:	00040000 	andeq	r0, r4, r0
    8c54:	00590411 	subseq	r0, r9, r1, lsl r4
    8c58:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
    8c5c:	0b000027 	bleq	8d00 <__exidx_end+0x32dc>
    8c60:	09600343 	stmdbeq	r0!, {r0, r1, r6, r8, r9}^
    8c64:	95020000 	strls	r0, [r2, #-0]
    8c68:	0c000022 	stceq	0, cr0, [r0], {34}	; 0x22
    8c6c:	09a22b3c 	stmibeq	r2!, {r2, r3, r4, r5, r8, r9, fp, sp}
    8c70:	340f0000 	strcc	r0, [pc], #-0	; 8c78 <__exidx_end+0x3254>
    8c74:	10000025 	andne	r0, r0, r5, lsr #32
    8c78:	fe156f0c 	cdp2	15, 1, cr6, cr5, cr12, {0}
    8c7c:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    8c80:	00001f00 	andeq	r1, r0, r0, lsl #30
    8c84:	6c0d700c 	stcvs	0, cr7, [sp], {12}
    8c88:	00000000 	andeq	r0, r0, r0
    8c8c:	0007730d 	andeq	r7, r7, sp, lsl #6
    8c90:	0d710c00 	ldcleq	12, cr0, [r1, #-0]
    8c94:	0000006c 	andeq	r0, r0, ip, rrx
    8c98:	22730d02 	rsbscs	r0, r3, #2, 26	; 0x80
    8c9c:	740c0000 	strvc	r0, [ip], #-0
    8ca0:	000bc013 	andeq	ip, fp, r3, lsl r0
    8ca4:	020d0400 	andeq	r0, sp, #0, 8
    8ca8:	0c000020 	stceq	0, cr0, [r0], {32}
    8cac:	09540c75 	ldmdbeq	r4, {r0, r2, r4, r5, r6, sl, fp}^
    8cb0:	0d080000 	stceq	0, cr0, [r8, #-0]
    8cb4:	000022a3 	andeq	r2, r0, r3, lsr #5
    8cb8:	4c067d0c 	stcmi	13, cr7, [r6], {12}
    8cbc:	0c00000b 	stceq	0, cr0, [r0], {11}
    8cc0:	0021ed0d 	eoreq	lr, r1, sp, lsl #26
    8cc4:	06810c00 	streq	r0, [r1], r0, lsl #24
    8cc8:	00000b96 	muleq	r0, r6, fp
    8ccc:	7602000d 	strvc	r0, [r2], -sp
    8cd0:	0c000020 	stceq	0, cr0, [r0], {32}
    8cd4:	0a0a2a3f 	beq	2935d8 <__ccfg+0x273630>
    8cd8:	690f0000 	stmdbvs	pc, {}	; <UNPREDICTABLE>
    8cdc:	18000020 	stmdane	r0, {r5}
    8ce0:	c115e00c 	tstgt	r5, ip
    8ce4:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
    8ce8:	00001f00 	andeq	r1, r0, r0, lsl #30
    8cec:	6c0de10c 	stfvsd	f6, [sp], {12}
    8cf0:	00000000 	andeq	r0, r0, r0
    8cf4:	0007730d 	andeq	r7, r7, sp, lsl #6
    8cf8:	0de20c00 	stcleq	12, cr0, [r2]
    8cfc:	0000006c 	andeq	r0, r0, ip, rrx
    8d00:	22730d02 	rsbscs	r0, r3, #2, 26	; 0x80
    8d04:	e50c0000 	str	r0, [ip, #-0]
    8d08:	000bc013 	andeq	ip, fp, r3, lsl r0
    8d0c:	020d0400 	andeq	r0, sp, #0, 8
    8d10:	0c000020 	stceq	0, cr0, [r0], {32}
    8d14:	09540ce6 	ldmdbeq	r4, {r1, r2, r5, r6, r7, sl, fp}^
    8d18:	0d080000 	stceq	0, cr0, [r8, #-0]
    8d1c:	000022a3 	andeq	r2, r0, r3, lsr #5
    8d20:	cc06ee0c 	stcgt	14, cr14, [r6], {12}
    8d24:	0c00000b 	stceq	0, cr0, [r0], {11}
    8d28:	0021ed0d 	eoreq	lr, r1, sp, lsl #26
    8d2c:	06f20c00 	ldrbteq	r0, [r2], r0, lsl #24
    8d30:	00000c16 	andeq	r0, r0, r6, lsl ip
    8d34:	263f0d0d 	ldrtcs	r0, [pc], -sp, lsl #26
    8d38:	f30c0000 	vhadd.u8	d0, d12, d0
    8d3c:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8d40:	970d0e00 	strls	r0, [sp, -r0, lsl #28]
    8d44:	0c000023 	stceq	0, cr0, [r0], {35}	; 0x23
    8d48:	006c0df4 	strdeq	r0, [ip], #-212	; 0xffffff2c	; <UNPREDICTABLE>
    8d4c:	0d100000 	ldceq	0, cr0, [r0, #-0]
    8d50:	000020a9 	andeq	r2, r0, r9, lsr #1
    8d54:	4006fa0c 	andmi	pc, r6, ip, lsl #20
    8d58:	1200000c 	andne	r0, r0, #12
    8d5c:	0022530d 	eoreq	r5, r2, sp, lsl #6
    8d60:	0cfb0c00 	ldcleq	12, cr0, [fp]
    8d64:	00000059 	andeq	r0, r0, r9, asr r0
    8d68:	25a30d13 	strcs	r0, [r3, #3347]!	; 0xd13
    8d6c:	fc0c0000 	stc2	0, cr0, [ip], {-0}
    8d70:	0000590c 	andeq	r5, r0, ip, lsl #18
    8d74:	ac0d1400 	cfstrsge	mvf1, [sp], {-0}
    8d78:	0c000025 	stceq	0, cr0, [r0], {37}	; 0x25
    8d7c:	00590cfd 	ldrsheq	r0, [r9], #-205	; 0xffffff33
    8d80:	0d150000 	ldceq	0, cr0, [r5, #-0]
    8d84:	000025b5 			; <UNDEFINED> instruction: 0x000025b5
    8d88:	6c0dfe0c 	stcvs	14, cr15, [sp], {12}
    8d8c:	16000000 	strne	r0, [r0], -r0
    8d90:	26ba0200 	ldrtcs	r0, [sl], r0, lsl #4
    8d94:	440c0000 	strmi	r0, [ip], #-0
    8d98:	000acd36 	andeq	ip, sl, r6, lsr sp
    8d9c:	26a11a00 	strtcs	r1, [r1], r0, lsl #20
    8da0:	0c140000 	ldceq	0, cr0, [r4], {-0}
    8da4:	4c15019f 	ldfmis	f0, [r5], {159}	; 0x9f
    8da8:	1800000b 	stmdane	r0, {r0, r1, r3}
    8dac:	00001f00 	andeq	r1, r0, r0, lsl #30
    8db0:	0d01a00c 	stceq	0, cr10, [r1, #-48]	; 0xffffffd0
    8db4:	0000006c 	andeq	r0, r0, ip, rrx
    8db8:	07731800 	ldrbeq	r1, [r3, -r0, lsl #16]!
    8dbc:	a10c0000 	mrsge	r0, (UNDEF: 12)
    8dc0:	006c0d01 	rsbeq	r0, ip, r1, lsl #26
    8dc4:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    8dc8:	00002273 	andeq	r2, r0, r3, ror r2
    8dcc:	1301a40c 	movwne	sl, #5132	; 0x140c
    8dd0:	00000bc0 	andeq	r0, r0, r0, asr #23
    8dd4:	20021804 	andcs	r1, r2, r4, lsl #16
    8dd8:	a50c0000 	strge	r0, [ip, #-0]
    8ddc:	09540c01 	ldmdbeq	r4, {r0, sl, fp}^
    8de0:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    8de4:	000022a3 	andeq	r2, r0, r3, lsr #5
    8de8:	0601ad0c 	streq	sl, [r1], -ip, lsl #26
    8dec:	00000c6a 	andeq	r0, r0, sl, ror #24
    8df0:	21ed180c 	mvncs	r1, ip, lsl #16
    8df4:	b10c0000 	mrslt	r0, (UNDEF: 12)
    8df8:	0cb90601 	ldceq	6, cr0, [r9], #4
    8dfc:	180d0000 	stmdane	sp, {}	; <UNPREDICTABLE>
    8e00:	00002253 	andeq	r2, r0, r3, asr r2
    8e04:	0d01b20c 	sfmeq	f3, 1, [r1, #-48]	; 0xffffffd0
    8e08:	0000006c 	andeq	r0, r0, ip, rrx
    8e0c:	2141180e 	cmpcs	r1, lr, lsl #16
    8e10:	b30c0000 	movwlt	r0, #49152	; 0xc000
    8e14:	09540c01 	ldmdbeq	r4, {r0, sl, fp}^
    8e18:	00100000 	andseq	r0, r0, r0
    8e1c:	760c010c 	strvc	r0, [ip], -ip, lsl #2
    8e20:	000b9604 	andeq	r9, fp, r4, lsl #12
    8e24:	27562100 	ldrbcs	r2, [r6, -r0, lsl #2]
    8e28:	770c0000 	strvc	r0, [ip, -r0]
    8e2c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8e30:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8e34:	20f42100 	rscscs	r2, r4, r0, lsl #2
    8e38:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
    8e3c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8e40:	03010100 	movweq	r0, #4352	; 0x1100
    8e44:	21b42100 			; <UNDEFINED> instruction: 0x21b42100
    8e48:	7a0c0000 	bvc	308e50 <__ccfg+0x2e8ea8>
    8e4c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8e50:	01020100 	mrseq	r0, (UNDEF: 18)
    8e54:	1f6f2100 	svcne	0x006f2100
    8e58:	7b0c0000 	blvc	308e60 <__ccfg+0x2e8eb8>
    8e5c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8e60:	00010100 	andeq	r0, r1, r0, lsl #2
    8e64:	010c0000 	mrseq	r0, (UNDEF: 12)
    8e68:	c0047e0c 	andgt	r7, r4, ip, lsl #28
    8e6c:	2100000b 	tstcs	r0, fp
    8e70:	000025d1 	ldrdeq	r2, [r0], -r1
    8e74:	590f7f0c 	stmdbpl	pc, {r2, r3, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    8e78:	01000000 	mrseq	r0, (UNDEF: 0)
    8e7c:	21000404 	tstcs	r0, r4, lsl #8
    8e80:	00002725 	andeq	r2, r0, r5, lsr #14
    8e84:	590f800c 	stmdbpl	pc, {r2, r3, pc}	; <UNPREDICTABLE>
    8e88:	01000000 	mrseq	r0, (UNDEF: 0)
    8e8c:	00000004 	andeq	r0, r0, r4
    8e90:	09960411 	ldmibeq	r6, {r0, r4, sl}
    8e94:	04110000 	ldreq	r0, [r1], #-0
    8e98:	0000007f 	andeq	r0, r0, pc, ror r0
    8e9c:	e70c010c 	str	r0, [ip, -ip, lsl #2]
    8ea0:	000c1604 	andeq	r1, ip, r4, lsl #12
    8ea4:	27562100 	ldrbcs	r2, [r6, -r0, lsl #2]
    8ea8:	e80c0000 	stmda	ip, {}	; <UNPREDICTABLE>
    8eac:	0000590f 	andeq	r5, r0, pc, lsl #18
    8eb0:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8eb4:	20f42100 	rscscs	r2, r4, r0, lsl #2
    8eb8:	e90c0000 	stmdb	ip, {}	; <UNPREDICTABLE>
    8ebc:	0000590f 	andeq	r5, r0, pc, lsl #18
    8ec0:	03010100 	movweq	r0, #4352	; 0x1100
    8ec4:	21b42100 			; <UNDEFINED> instruction: 0x21b42100
    8ec8:	eb0c0000 	bl	308ed0 <__ccfg+0x2e8f28>
    8ecc:	0000590f 	andeq	r5, r0, pc, lsl #18
    8ed0:	01020100 	mrseq	r0, (UNDEF: 18)
    8ed4:	1f6f2100 	svcne	0x006f2100
    8ed8:	ec0c0000 	stc	0, cr0, [ip], {-0}
    8edc:	0000590f 	andeq	r5, r0, pc, lsl #18
    8ee0:	00010100 	andeq	r0, r1, r0, lsl #2
    8ee4:	010c0000 	mrseq	r0, (UNDEF: 12)
    8ee8:	4004ef0c 	andmi	lr, r4, ip, lsl #30
    8eec:	2100000c 	tstcs	r0, ip
    8ef0:	000025d1 	ldrdeq	r2, [r0], -r1
    8ef4:	590ff00c 	stmdbpl	pc, {r2, r3, ip, sp, lr, pc}	; <UNPREDICTABLE>
    8ef8:	01000000 	mrseq	r0, (UNDEF: 0)
    8efc:	21000404 	tstcs	r0, r4, lsl #8
    8f00:	00002725 	andeq	r2, r0, r5, lsr #14
    8f04:	590ff10c 	stmdbpl	pc, {r2, r3, r8, ip, sp, lr, pc}	; <UNPREDICTABLE>
    8f08:	01000000 	mrseq	r0, (UNDEF: 0)
    8f0c:	00000004 	andeq	r0, r0, r4
    8f10:	f50c010c 			; <UNDEFINED> instruction: 0xf50c010c
    8f14:	000c6a04 	andeq	r6, ip, r4, lsl #20
    8f18:	20de2100 	sbcscs	r2, lr, r0, lsl #2
    8f1c:	f60c0000 			; <UNDEFINED> instruction: 0xf60c0000
    8f20:	0000590f 	andeq	r5, r0, pc, lsl #18
    8f24:	07010100 	streq	r0, [r1, -r0, lsl #2]
    8f28:	273f2100 	ldrcs	r2, [pc, -r0, lsl #2]!
    8f2c:	f80c0000 			; <UNDEFINED> instruction: 0xf80c0000
    8f30:	0000590f 	andeq	r5, r0, pc, lsl #18
    8f34:	01060100 	mrseq	r0, (UNDEF: 22)
    8f38:	011b0000 	tsteq	fp, r0
    8f3c:	0401a60c 	streq	sl, [r1], #-1548	; 0xfffff9f4
    8f40:	00000cb9 			; <UNDEFINED> instruction: 0x00000cb9
    8f44:	00275622 	eoreq	r5, r7, r2, lsr #12
    8f48:	01a70c00 			; <UNDEFINED> instruction: 0x01a70c00
    8f4c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8f50:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8f54:	20f42200 	rscscs	r2, r4, r0, lsl #4
    8f58:	a80c0000 	stmdage	ip, {}	; <UNPREDICTABLE>
    8f5c:	00590f01 	subseq	r0, r9, r1, lsl #30
    8f60:	01010000 	mrseq	r0, (UNDEF: 1)
    8f64:	b4220003 	strtlt	r0, [r2], #-3
    8f68:	0c000021 	stceq	0, cr0, [r0], {33}	; 0x21
    8f6c:	590f01aa 	stmdbpl	pc, {r1, r3, r5, r7, r8}	; <UNPREDICTABLE>
    8f70:	01000000 	mrseq	r0, (UNDEF: 0)
    8f74:	22000102 	andcs	r0, r0, #-2147483648	; 0x80000000
    8f78:	00001f6f 	andeq	r1, r0, pc, ror #30
    8f7c:	0f01ab0c 	svceq	0x0001ab0c
    8f80:	00000059 	andeq	r0, r0, r9, asr r0
    8f84:	00000101 	andeq	r0, r0, r1, lsl #2
    8f88:	0c011b00 			; <UNDEFINED> instruction: 0x0c011b00
    8f8c:	e60401ae 	str	r0, [r4], -lr, lsr #3
    8f90:	2200000c 	andcs	r0, r0, #12
    8f94:	000025d1 	ldrdeq	r2, [r0], -r1
    8f98:	0f01af0c 	svceq	0x0001af0c
    8f9c:	00000059 	andeq	r0, r0, r9, asr r0
    8fa0:	00040401 	andeq	r0, r4, r1, lsl #8
    8fa4:	00272522 	eoreq	r2, r7, r2, lsr #10
    8fa8:	01b00c00 	lslseq	r0, r0, #24
    8fac:	0000590f 	andeq	r5, r0, pc, lsl #18
    8fb0:	00040100 	andeq	r0, r4, r0, lsl #2
    8fb4:	04110000 	ldreq	r0, [r1], #-0
    8fb8:	0000098a 	andeq	r0, r0, sl, lsl #19
    8fbc:	00261402 	eoreq	r1, r6, r2, lsl #8
    8fc0:	2f3d0d00 	svccs	0x003d0d00
    8fc4:	00000cf8 	strdeq	r0, [r0], -r8
    8fc8:	0026260f 	eoreq	r2, r6, pc, lsl #12
    8fcc:	780d1800 	stmdavc	sp, {fp, ip}
    8fd0:	000d8815 	andeq	r8, sp, r5, lsl r8
    8fd4:	1f000d00 	svcne	0x00000d00
    8fd8:	790d0000 	stmdbvc	sp, {}	; <UNPREDICTABLE>
    8fdc:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8fe0:	730d0000 	movwvc	r0, #53248	; 0xd000
    8fe4:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    8fe8:	006c0d7a 	rsbeq	r0, ip, sl, ror sp
    8fec:	0d020000 	stceq	0, cr0, [r2, #-0]
    8ff0:	00002273 	andeq	r2, r0, r3, ror r2
    8ff4:	c0137d0d 	andsgt	r7, r3, sp, lsl #26
    8ff8:	0400000b 	streq	r0, [r0], #-11
    8ffc:	0020020d 	eoreq	r0, r0, sp, lsl #4
    9000:	0c7e0d00 	ldcleq	13, cr0, [lr], #-0
    9004:	00000954 	andeq	r0, r0, r4, asr r9
    9008:	22a30d08 	adccs	r0, r3, #8, 26	; 0x200
    900c:	860d0000 	strhi	r0, [sp], -r0
    9010:	0010f306 	andseq	pc, r0, r6, lsl #6
    9014:	ed0d0c00 	stc	12, cr0, [sp, #-0]
    9018:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    901c:	113d068a 	teqne	sp, sl, lsl #13
    9020:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    9024:	00002047 	andeq	r2, r0, r7, asr #32
    9028:	6706930d 	strvs	r9, [r6, -sp, lsl #6]
    902c:	0e000011 	mcreq	0, 0, r0, cr0, cr1, {0}
    9030:	0025ca0d 	eoreq	ip, r5, sp, lsl #20
    9034:	0c940d00 	ldceq	13, cr0, [r4], {0}
    9038:	00000059 	andeq	r0, r0, r9, asr r0
    903c:	23290d0f 			; <UNDEFINED> instruction: 0x23290d0f
    9040:	950d0000 	strls	r0, [sp, #-0]
    9044:	00007f0d 	andeq	r7, r0, sp, lsl #30
    9048:	2d0d1000 	stccs	0, cr1, [sp, #-0]
    904c:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9050:	09840d96 	stmibeq	r4, {r1, r2, r4, r7, r8, sl, fp}
    9054:	00140000 	andseq	r0, r4, r0
    9058:	00248002 	eoreq	r8, r4, r2
    905c:	2f3e0d00 	svccs	0x003e0d00
    9060:	00000d94 	muleq	r0, r4, sp
    9064:	0021780f 	eoreq	r7, r1, pc, lsl #16
    9068:	9f0d2400 	svcls	0x000d2400
    906c:	000e7215 	andeq	r7, lr, r5, lsl r2
    9070:	1f000d00 	svcne	0x00000d00
    9074:	a00d0000 	andge	r0, sp, r0
    9078:	00006c0d 	andeq	r6, r0, sp, lsl #24
    907c:	730d0000 	movwvc	r0, #53248	; 0xd000
    9080:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    9084:	006c0da1 	rsbeq	r0, ip, r1, lsr #27
    9088:	0d020000 	stceq	0, cr0, [r2, #-0]
    908c:	00002273 	andeq	r2, r0, r3, ror r2
    9090:	c013a40d 	andsgt	sl, r3, sp, lsl #8
    9094:	0400000b 	streq	r0, [r0], #-11
    9098:	0020020d 	eoreq	r0, r0, sp, lsl #4
    909c:	0ca50d00 	stceq	13, cr0, [r5]
    90a0:	00000954 	andeq	r0, r0, r4, asr r9
    90a4:	22a30d08 	adccs	r0, r3, #8, 26	; 0x200
    90a8:	ad0d0000 	stcge	0, cr0, [sp, #-0]
    90ac:	0011a106 	andseq	sl, r1, r6, lsl #2
    90b0:	ed0d0c00 	stc	12, cr0, [sp, #-0]
    90b4:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    90b8:	11eb06b1 	strhne	r0, [fp, #97]!	; 0x61
    90bc:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    90c0:	00002047 	andeq	r2, r0, r7, asr #32
    90c4:	1506c30d 	strne	ip, [r6, #-781]	; 0xfffffcf3
    90c8:	0e000012 	mcreq	0, 0, r0, cr0, cr2, {0}
    90cc:	0023de0d 	eoreq	sp, r3, sp, lsl #28
    90d0:	06cd0d00 	strbeq	r0, [sp], r0, lsl #26
    90d4:	0000129f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    90d8:	23290d0f 			; <UNDEFINED> instruction: 0x23290d0f
    90dc:	ce0d0000 	cdpgt	0, 0, cr0, cr13, cr0, {0}
    90e0:	00007f0d 	andeq	r7, r0, sp, lsl #30
    90e4:	2c0d1000 	stccs	0, cr1, [sp], {-0}
    90e8:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    90ec:	00590ccf 	subseq	r0, r9, pc, asr #25
    90f0:	0d140000 	ldceq	0, cr0, [r4, #-0]
    90f4:	00002430 	andeq	r2, r0, r0, lsr r4
    90f8:	590cd10d 	stmdbpl	ip, {r0, r2, r3, r8, ip, lr, pc}
    90fc:	15000000 	strne	r0, [r0, #-0]
    9100:	0024390d 	eoreq	r3, r4, sp, lsl #18
    9104:	0cd20d00 	ldcleq	13, cr0, [r2], {0}
    9108:	00000059 	andeq	r0, r0, r9, asr r0
    910c:	218a0d16 	orrcs	r0, sl, r6, lsl sp
    9110:	db0d0000 	blle	349118 <__ccfg+0x329170>
    9114:	00131906 	andseq	r1, r3, r6, lsl #18
    9118:	790d1700 	stmdbvc	sp, {r8, r9, sl, ip}
    911c:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    9120:	09540cdc 	ldmdbeq	r4, {r2, r3, r4, r6, r7, sl, fp}^
    9124:	0d180000 	ldceq	0, cr0, [r8, #-0]
    9128:	000021be 			; <UNDEFINED> instruction: 0x000021be
    912c:	e611dd0d 	ldr	sp, [r1], -sp, lsl #26
    9130:	1c00000c 	stcne	0, cr0, [r0], {12}
    9134:	001f920d 	andseq	r9, pc, sp, lsl #4
    9138:	0dde0d00 	ldcleq	13, cr0, [lr]
    913c:	00000984 	andeq	r0, r0, r4, lsl #19
    9140:	95020020 	strls	r0, [r2, #-32]	; 0xffffffe0
    9144:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9148:	0e7e2f41 	cdpeq	15, 7, cr2, cr14, cr1, {2}
    914c:	5d1a0000 	ldcpl	0, cr0, [sl, #-0]
    9150:	1c00001f 	stcne	0, cr0, [r0], {31}
    9154:	15017d0d 	strne	r7, [r1, #-3341]	; 0xfffff2f3
    9158:	00000f6d 	andeq	r0, r0, sp, ror #30
    915c:	001f0018 	andseq	r0, pc, r8, lsl r0	; <UNPREDICTABLE>
    9160:	017e0d00 	cmneq	lr, r0, lsl #26
    9164:	00006c0d 	andeq	r6, r0, sp, lsl #24
    9168:	73180000 	tstvc	r8, #0
    916c:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    9170:	6c0d017f 	stfvss	f0, [sp], {127}	; 0x7f
    9174:	02000000 	andeq	r0, r0, #0
    9178:	00227318 	eoreq	r7, r2, r8, lsl r3
    917c:	01820d00 	orreq	r0, r2, r0, lsl #26
    9180:	000bc013 	andeq	ip, fp, r3, lsl r0
    9184:	02180400 	andseq	r0, r8, #0, 8
    9188:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    918c:	540c0183 	strpl	r0, [ip], #-387	; 0xfffffe7d
    9190:	08000009 	stmdaeq	r0, {r0, r3}
    9194:	0022a318 	eoreq	sl, r2, r8, lsl r3
    9198:	018b0d00 	orreq	r0, fp, r0, lsl #26
    919c:	00136306 	andseq	r6, r3, r6, lsl #6
    91a0:	ed180c00 	ldc	12, cr0, [r8, #-0]
    91a4:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    91a8:	b206018f 	andlt	r0, r6, #-1073741789	; 0xc0000023
    91ac:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    91b0:	00265318 	eoreq	r5, r6, r8, lsl r3
    91b4:	01950d00 	orrseq	r0, r5, r0, lsl #26
    91b8:	0013df06 	andseq	sp, r3, r6, lsl #30
    91bc:	53180e00 	tstpl	r8, #0, 28
    91c0:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    91c4:	590c0196 	stmdbpl	ip, {r1, r2, r4, r7, r8}
    91c8:	0f000000 	svceq	0x00000000
    91cc:	00271218 	eoreq	r1, r7, r8, lsl r2
    91d0:	01a30d00 			; <UNDEFINED> instruction: 0x01a30d00
    91d4:	00140c06 	andseq	r0, r4, r6, lsl #24
    91d8:	d4181000 	ldrle	r1, [r8], #-0
    91dc:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    91e0:	250b01a4 	strcs	r0, [fp, #-420]	; 0xfffffe5c
    91e4:	11000000 	mrsne	r0, (UNDEF: 0)
    91e8:	0024a518 	eoreq	sl, r4, r8, lsl r5
    91ec:	01a50d00 			; <UNDEFINED> instruction: 0x01a50d00
    91f0:	0000590c 	andeq	r5, r0, ip, lsl #18
    91f4:	da181200 	ble	60d9fc <__ccfg+0x5eda54>
    91f8:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    91fc:	590c01a7 	stmdbpl	ip, {r0, r1, r2, r5, r7, r8}
    9200:	13000000 	movwne	r0, #0
    9204:	00235c18 	eoreq	r5, r3, r8, lsl ip
    9208:	01a90d00 			; <UNDEFINED> instruction: 0x01a90d00
    920c:	00006c0d 	andeq	r6, r0, sp, lsl #24
    9210:	36181400 	ldrcc	r1, [r8], -r0, lsl #8
    9214:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9218:	7d0601af 	stfvcs	f0, [r6, #-700]	; 0xfffffd44
    921c:	16000014 			; <UNDEFINED> instruction: 0x16000014
    9220:	00223918 	eoreq	r3, r2, r8, lsl r9
    9224:	01b70d00 			; <UNDEFINED> instruction: 0x01b70d00
    9228:	0014aa06 	andseq	sl, r4, r6, lsl #20
    922c:	48181700 	ldmdami	r8, {r8, r9, sl, ip}
    9230:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    9234:	540c01b8 	strpl	r0, [ip], #-440	; 0xfffffe48
    9238:	18000009 	stmdane	r0, {r0, r3}
    923c:	24610200 	strbtcs	r0, [r1], #-512	; 0xfffffe00
    9240:	430d0000 	movwmi	r0, #53248	; 0xd000
    9244:	000f793c 	andeq	r7, pc, ip, lsr r9	; <UNPREDICTABLE>
    9248:	24421a00 	strbcs	r1, [r2], #-2560	; 0xfffff600
    924c:	0d280000 	stceq	0, cr0, [r8, #-0]
    9250:	7615021a 			; <UNDEFINED> instruction: 0x7615021a
    9254:	18000010 	stmdane	r0, {r4}
    9258:	00001f00 	andeq	r1, r0, r0, lsl #30
    925c:	0d021b0d 	vstreq	d1, [r2, #-52]	; 0xffffffcc
    9260:	0000006c 	andeq	r0, r0, ip, rrx
    9264:	07731800 	ldrbeq	r1, [r3, -r0, lsl #16]!
    9268:	1d0d0000 	stcne	0, cr0, [sp, #-0]
    926c:	006c0d02 	rsbeq	r0, ip, r2, lsl #26
    9270:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    9274:	00002273 	andeq	r2, r0, r3, ror r2
    9278:	1302200d 	movwne	r2, #8205	; 0x200d
    927c:	00000bc0 	andeq	r0, r0, r0, asr #23
    9280:	20021804 	andcs	r1, r2, r4, lsl #16
    9284:	210d0000 	mrscs	r0, (UNDEF: 13)
    9288:	09540c02 	ldmdbeq	r4, {r1, sl, fp}^
    928c:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    9290:	000022a3 	andeq	r2, r0, r3, lsr #5
    9294:	0602290d 	streq	r2, [r2], -sp, lsl #18
    9298:	000014f9 	strdeq	r1, [r0], -r9
    929c:	21ed180c 	mvncs	r1, ip, lsl #16
    92a0:	2d0d0000 	stccs	0, cr0, [sp, #-0]
    92a4:	15480602 	strbne	r0, [r8, #-1538]	; 0xfffff9fe
    92a8:	180d0000 	stmdane	sp, {}	; <UNPREDICTABLE>
    92ac:	00001ef5 	strdeq	r1, [r0], -r5
    92b0:	0602330d 	streq	r3, [r2], -sp, lsl #6
    92b4:	00001575 	andeq	r1, r0, r5, ror r5
    92b8:	225c180e 	subscs	r1, ip, #917504	; 0xe0000
    92bc:	380d0000 	stmdacc	sp, {}	; <UNPREDICTABLE>
    92c0:	15a20602 	strne	r0, [r2, #1538]!	; 0x602
    92c4:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    92c8:	0000208b 	andeq	r2, r0, fp, lsl #1
    92cc:	0c02390d 			; <UNDEFINED> instruction: 0x0c02390d
    92d0:	00000059 	andeq	r0, r0, r9, asr r0
    92d4:	231f1814 	tstcs	pc, #20, 16	; 0x140000
    92d8:	410d0000 	mrsmi	r0, (UNDEF: 13)
    92dc:	15cf0602 	strbne	r0, [pc, #1538]	; 98e6 <__exidx_end+0x3ec2>
    92e0:	18150000 	ldmdane	r5, {}	; <UNPREDICTABLE>
    92e4:	00001ff7 	strdeq	r1, [r0], -r7
    92e8:	0602550d 	streq	r5, [r2], -sp, lsl #10
    92ec:	000015fc 	strdeq	r1, [r0], -ip
    92f0:	146a1816 	strbtne	r1, [sl], #-2070	; 0xfffff7ea
    92f4:	680d0000 	stmdavs	sp, {}	; <UNPREDICTABLE>
    92f8:	165c0602 	ldrbne	r0, [ip], -r2, lsl #12
    92fc:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
    9300:	00002083 	andeq	r2, r0, r3, lsl #1
    9304:	0d02690d 	vstreq.16	s12, [r2, #-26]	; 0xffffffe6	; <UNPREDICTABLE>
    9308:	0000006c 	andeq	r0, r0, ip, rrx
    930c:	24c1181a 	strbcs	r1, [r1], #2074	; 0x81a
    9310:	6a0d0000 	bvs	349318 <__ccfg+0x329370>
    9314:	0bc60e02 	bleq	ff18cb24 <_estack+0xdf187b24>
    9318:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
    931c:	00001f32 	andeq	r1, r0, r2, lsr pc
    9320:	0d026c0d 	stceq	12, cr6, [r2, #-52]	; 0xffffffcc
    9324:	0000006c 	andeq	r0, r0, ip, rrx
    9328:	227b1820 	rsbscs	r1, fp, #32, 16	; 0x200000
    932c:	700d0000 	andvc	r0, sp, r0
    9330:	00380c02 	eorseq	r0, r8, r2, lsl #24
    9334:	18220000 	stmdane	r2!, {}	; <UNPREDICTABLE>
    9338:	000023b9 			; <UNDEFINED> instruction: 0x000023b9
    933c:	0c02730d 	stceq	3, cr7, [r2], {13}
    9340:	00000059 	andeq	r0, r0, r9, asr r0
    9344:	f5020024 			; <UNDEFINED> instruction: 0xf5020024
    9348:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    934c:	10823048 	addne	r3, r2, r8, asr #32
    9350:	e21a0000 	ands	r0, sl, #0
    9354:	0c000024 	stceq	0, cr0, [r0], {36}	; 0x24
    9358:	1503750d 	strne	r7, [r3, #-1293]	; 0xfffffaf3
    935c:	000010f3 	strdeq	r1, [r0], -r3
    9360:	00259818 	eoreq	r9, r5, r8, lsl r8
    9364:	03760d00 	cmneq	r6, #0, 26
    9368:	00006c0d 	andeq	r6, r0, sp, lsl #24
    936c:	b7180000 	ldrlt	r0, [r8, -r0]
    9370:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9374:	6c0d0377 	stcvs	3, cr0, [sp], {119}	; 0x77
    9378:	02000000 	andeq	r0, r0, #0
    937c:	001fa418 	andseq	sl, pc, r8, lsl r4	; <UNPREDICTABLE>
    9380:	03780d00 	cmneq	r8, #0, 26
    9384:	0000590c 	andeq	r5, r0, ip, lsl #18
    9388:	9a180400 	bls	60a390 <__ccfg+0x5ea3e8>
    938c:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    9390:	590c0379 	stmdbpl	ip, {r0, r3, r4, r5, r6, r8, r9}
    9394:	05000000 	streq	r0, [r0, #-0]
    9398:	00221f18 	eoreq	r1, r2, r8, lsl pc
    939c:	037a0d00 	cmneq	sl, #0, 26
    93a0:	0000590c 	andeq	r5, r0, ip, lsl #18
    93a4:	03180600 	tsteq	r8, #0, 12
    93a8:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    93ac:	250b037b 	strcs	r0, [fp, #-891]	; 0xfffffc85
    93b0:	07000000 	streq	r0, [r0, -r0]
    93b4:	001fdc18 	andseq	sp, pc, r8, lsl ip	; <UNPREDICTABLE>
    93b8:	037c0d00 	cmneq	ip, #0, 26
    93bc:	0009540c 	andeq	r5, r9, ip, lsl #8
    93c0:	0c000800 	stceq	8, cr0, [r0], {-0}
    93c4:	047f0d01 	ldrbteq	r0, [pc], #-3329	; 93cc <__exidx_end+0x39a8>
    93c8:	0000113d 	andeq	r1, r0, sp, lsr r1
    93cc:	00275621 	eoreq	r5, r7, r1, lsr #12
    93d0:	0f800d00 	svceq	0x00800d00
    93d4:	00000059 	andeq	r0, r0, r9, asr r0
    93d8:	00040401 	andeq	r0, r4, r1, lsl #8
    93dc:	0020f421 	eoreq	pc, r0, r1, lsr #8
    93e0:	0f810d00 	svceq	0x00810d00
    93e4:	00000059 	andeq	r0, r0, r9, asr r0
    93e8:	00030101 	andeq	r0, r3, r1, lsl #2
    93ec:	0021b421 	eoreq	fp, r1, r1, lsr #8
    93f0:	0f830d00 	svceq	0x00830d00
    93f4:	00000059 	andeq	r0, r0, r9, asr r0
    93f8:	00010201 	andeq	r0, r1, r1, lsl #4
    93fc:	001f6f21 	andseq	r6, pc, r1, lsr #30
    9400:	0f840d00 	svceq	0x00840d00
    9404:	00000059 	andeq	r0, r0, r9, asr r0
    9408:	00000101 	andeq	r0, r0, r1, lsl #2
    940c:	0d010c00 	stceq	12, cr0, [r1, #-0]
    9410:	11670487 	smulbbne	r7, r7, r4
    9414:	d1210000 			; <UNDEFINED> instruction: 0xd1210000
    9418:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    941c:	00590f88 	subseq	r0, r9, r8, lsl #31
    9420:	04010000 	streq	r0, [r1], #-0
    9424:	25210004 	strcs	r0, [r1, #-4]!
    9428:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    942c:	00590f89 	subseq	r0, r9, r9, lsl #31
    9430:	04010000 	streq	r0, [r1], #-0
    9434:	0c000000 	stceq	0, cr0, [r0], {-0}
    9438:	048b0d01 	streq	r0, [fp], #3329	; 0xd01
    943c:	000011a1 	andeq	r1, r0, r1, lsr #3
    9440:	00266421 	eoreq	r6, r6, r1, lsr #8
    9444:	0f8c0d00 	svceq	0x008c0d00
    9448:	00000059 	andeq	r0, r0, r9, asr r0
    944c:	00070101 	andeq	r0, r7, r1, lsl #2
    9450:	0026ec21 	eoreq	lr, r6, r1, lsr #24
    9454:	0f8f0d00 	svceq	0x008f0d00
    9458:	00000059 	andeq	r0, r0, r9, asr r0
    945c:	00040101 	andeq	r0, r4, r1, lsl #2
    9460:	001f2521 	andseq	r2, pc, r1, lsr #10
    9464:	0f910d00 	svceq	0x00910d00
    9468:	00000059 	andeq	r0, r0, r9, asr r0
    946c:	00030101 	andeq	r0, r3, r1, lsl #2
    9470:	0d010c00 	stceq	12, cr0, [r1, #-0]
    9474:	11eb04a6 	mvnne	r0, r6, lsr #9
    9478:	56210000 	strtpl	r0, [r1], -r0
    947c:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    9480:	00590fa7 	subseq	r0, r9, r7, lsr #31
    9484:	04010000 	streq	r0, [r1], #-0
    9488:	f4210004 	vld4.8	{d0-d3}, [r1], r4
    948c:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    9490:	00590fa8 	subseq	r0, r9, r8, lsr #31
    9494:	01010000 	mrseq	r0, (UNDEF: 1)
    9498:	b4210003 	strtlt	r0, [r1], #-3
    949c:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    94a0:	00590faa 	subseq	r0, r9, sl, lsr #31
    94a4:	02010000 	andeq	r0, r1, #0
    94a8:	6f210001 	svcvs	0x00210001
    94ac:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    94b0:	00590fab 	subseq	r0, r9, fp, lsr #31
    94b4:	01010000 	mrseq	r0, (UNDEF: 1)
    94b8:	0c000000 	stceq	0, cr0, [r0], {-0}
    94bc:	04ae0d01 	strteq	r0, [lr], #3329	; 0xd01
    94c0:	00001215 	andeq	r1, r0, r5, lsl r2
    94c4:	0025d121 	eoreq	sp, r5, r1, lsr #2
    94c8:	0faf0d00 	svceq	0x00af0d00
    94cc:	00000059 	andeq	r0, r0, r9, asr r0
    94d0:	00040401 	andeq	r0, r4, r1, lsl #8
    94d4:	00272521 	eoreq	r2, r7, r1, lsr #10
    94d8:	0fb00d00 	svceq	0x00b00d00
    94dc:	00000059 	andeq	r0, r0, r9, asr r0
    94e0:	00000401 	andeq	r0, r0, r1, lsl #8
    94e4:	0d010c00 	stceq	12, cr0, [r1, #-0]
    94e8:	129f04b2 	addsne	r0, pc, #-1308622848	; 0xb2000000
    94ec:	64210000 	strtvs	r0, [r1], #-0
    94f0:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    94f4:	00590fb3 	ldrheq	r0, [r9], #-243	; 0xffffff0d
    94f8:	01010000 	mrseq	r0, (UNDEF: 1)
    94fc:	9a210007 	bls	849520 <__ccfg+0x829578>
    9500:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9504:	00590fb5 	ldrheq	r0, [r9], #-245	; 0xffffff0b
    9508:	01010000 	mrseq	r0, (UNDEF: 1)
    950c:	42210006 	eormi	r0, r1, #6
    9510:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    9514:	00590fb7 	ldrheq	r0, [r9], #-247	; 0xffffff09
    9518:	01010000 	mrseq	r0, (UNDEF: 1)
    951c:	ec210005 	stc	0, cr0, [r1], #-20	; 0xffffffec
    9520:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    9524:	00590fb9 	ldrheq	r0, [r9], #-249	; 0xffffff07
    9528:	01010000 	mrseq	r0, (UNDEF: 1)
    952c:	25210004 	strcs	r0, [r1, #-4]!
    9530:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9534:	00590fbb 	ldrheq	r0, [r9], #-251	; 0xffffff05
    9538:	01010000 	mrseq	r0, (UNDEF: 1)
    953c:	81210003 			; <UNDEFINED> instruction: 0x81210003
    9540:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    9544:	00590fbd 	ldrheq	r0, [r9], #-253	; 0xffffff03
    9548:	01010000 	mrseq	r0, (UNDEF: 1)
    954c:	c5210002 	strgt	r0, [r1, #-2]!
    9550:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9554:	00590fbf 	ldrheq	r0, [r9], #-255	; 0xffffff01
    9558:	01010000 	mrseq	r0, (UNDEF: 1)
    955c:	4d210001 	stcmi	0, cr0, [r1, #-4]!
    9560:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    9564:	00590fc1 	subseq	r0, r9, r1, asr #31
    9568:	01010000 	mrseq	r0, (UNDEF: 1)
    956c:	0c000000 	stceq	0, cr0, [r0], {-0}
    9570:	04c40d01 	strbeq	r0, [r4], #3329	; 0xd01
    9574:	00001319 	andeq	r1, r0, r9, lsl r3
    9578:	00228321 	eoreq	r8, r2, r1, lsr #6
    957c:	0fc50d00 	svceq	0x00c50d00
    9580:	00000059 	andeq	r0, r0, r9, asr r0
    9584:	00070101 	andeq	r0, r7, r1, lsl #2
    9588:	0020bc21 	eoreq	fp, r0, r1, lsr #24
    958c:	0fc60d00 	svceq	0x00c60d00
    9590:	00000059 	andeq	r0, r0, r9, asr r0
    9594:	00060101 	andeq	r0, r6, r1, lsl #2
    9598:	0021f721 	eoreq	pc, r1, r1, lsr #14
    959c:	0fc80d00 	svceq	0x00c80d00
    95a0:	00000059 	andeq	r0, r0, r9, asr r0
    95a4:	00040101 	andeq	r0, r4, r1, lsl #2
    95a8:	00216021 	eoreq	r6, r1, r1, lsr #32
    95ac:	0fc90d00 	svceq	0x00c90d00
    95b0:	00000059 	andeq	r0, r0, r9, asr r0
    95b4:	00030101 	andeq	r0, r3, r1, lsl #2
    95b8:	0024d621 	eoreq	sp, r4, r1, lsr #12
    95bc:	0fca0d00 	svceq	0x00ca0d00
    95c0:	00000059 	andeq	r0, r0, r9, asr r0
    95c4:	00020101 	andeq	r0, r2, r1, lsl #2
    95c8:	00200c21 	eoreq	r0, r0, r1, lsr #24
    95cc:	0fcb0d00 	svceq	0x00cb0d00
    95d0:	00000059 	andeq	r0, r0, r9, asr r0
    95d4:	00010101 	andeq	r0, r1, r1, lsl #2
    95d8:	001f0a21 	andseq	r0, pc, r1, lsr #20
    95dc:	0fcc0d00 	svceq	0x00cc0d00
    95e0:	00000059 	andeq	r0, r0, r9, asr r0
    95e4:	00000101 	andeq	r0, r0, r1, lsl #2
    95e8:	0d010c00 	stceq	12, cr0, [r1, #-0]
    95ec:	136304d4 	cmnne	r3, #212, 8	; 0xd4000000
    95f0:	56210000 	strtpl	r0, [r1], -r0
    95f4:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    95f8:	00590fd5 	ldrsbeq	r0, [r9], #-245	; 0xffffff0b
    95fc:	04010000 	streq	r0, [r1], #-0
    9600:	f4210004 	vld4.8	{d0-d3}, [r1], r4
    9604:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    9608:	00590fd6 	ldrsbeq	r0, [r9], #-246	; 0xffffff0a
    960c:	01010000 	mrseq	r0, (UNDEF: 1)
    9610:	b4210003 	strtlt	r0, [r1], #-3
    9614:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9618:	00590fd8 	ldrsbeq	r0, [r9], #-248	; 0xffffff08
    961c:	02010000 	andeq	r0, r1, #0
    9620:	6f210001 	svcvs	0x00210001
    9624:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9628:	00590fd9 	ldrsbeq	r0, [r9], #-249	; 0xffffff07
    962c:	01010000 	mrseq	r0, (UNDEF: 1)
    9630:	1b000000 	blne	9638 <__exidx_end+0x3c14>
    9634:	01840d01 	orreq	r0, r4, r1, lsl #26
    9638:	0013b204 	andseq	fp, r3, r4, lsl #4
    963c:	27562200 	ldrbcs	r2, [r6, -r0, lsl #4]
    9640:	850d0000 	strhi	r0, [sp, #-0]
    9644:	00590f01 	subseq	r0, r9, r1, lsl #30
    9648:	04010000 	streq	r0, [r1], #-0
    964c:	f4220004 	vld4.8	{d0-d3}, [r2], r4
    9650:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    9654:	590f0186 	stmdbpl	pc, {r1, r2, r7, r8}	; <UNPREDICTABLE>
    9658:	01000000 	mrseq	r0, (UNDEF: 0)
    965c:	22000301 	andcs	r0, r0, #67108864	; 0x4000000
    9660:	000021b4 			; <UNDEFINED> instruction: 0x000021b4
    9664:	0f01880d 	svceq	0x0001880d
    9668:	00000059 	andeq	r0, r0, r9, asr r0
    966c:	00010201 	andeq	r0, r1, r1, lsl #4
    9670:	001f6f22 	andseq	r6, pc, r2, lsr #30
    9674:	01890d00 	orreq	r0, r9, r0, lsl #26
    9678:	0000590f 	andeq	r5, r0, pc, lsl #18
    967c:	00010100 	andeq	r0, r1, r0, lsl #2
    9680:	011b0000 	tsteq	fp, r0
    9684:	04018c0d 	streq	r8, [r1], #-3085	; 0xfffff3f3
    9688:	000013df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    968c:	0025d122 	eoreq	sp, r5, r2, lsr #2
    9690:	018d0d00 	orreq	r0, sp, r0, lsl #26
    9694:	0000590f 	andeq	r5, r0, pc, lsl #18
    9698:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    969c:	27252200 	strcs	r2, [r5, -r0, lsl #4]!
    96a0:	8e0d0000 	cdphi	0, 0, cr0, cr13, cr0, {0}
    96a4:	00590f01 	subseq	r0, r9, r1, lsl #30
    96a8:	04010000 	streq	r0, [r1], #-0
    96ac:	1b000000 	blne	96b4 <__exidx_end+0x3c90>
    96b0:	01900d01 	orrseq	r0, r0, r1, lsl #26
    96b4:	00140c04 	andseq	r0, r4, r4, lsl #24
    96b8:	230b2200 	movwcs	r2, #45568	; 0xb200
    96bc:	910d0000 	mrsls	r0, (UNDEF: 13)
    96c0:	00590f01 	subseq	r0, r9, r1, lsl #30
    96c4:	01010000 	mrseq	r0, (UNDEF: 1)
    96c8:	f9220007 			; <UNDEFINED> instruction: 0xf9220007
    96cc:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    96d0:	590f0193 	stmdbpl	pc, {r0, r1, r4, r7, r8}	; <UNPREDICTABLE>
    96d4:	01000000 	mrseq	r0, (UNDEF: 0)
    96d8:	00000601 	andeq	r0, r0, r1, lsl #12
    96dc:	970d011b 	smladls	sp, fp, r1, r0
    96e0:	147d0401 	ldrbtne	r0, [sp], #-1025	; 0xfffffbff
    96e4:	b3220000 			; <UNDEFINED> instruction: 0xb3220000
    96e8:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    96ec:	590f0198 	stmdbpl	pc, {r3, r4, r7, r8}	; <UNPREDICTABLE>
    96f0:	01000000 	mrseq	r0, (UNDEF: 0)
    96f4:	22000701 	andcs	r0, r0, #262144	; 0x40000
    96f8:	00002302 	andeq	r2, r0, r2, lsl #6
    96fc:	0f01990d 	svceq	0x0001990d
    9700:	00000059 	andeq	r0, r0, r9, asr r0
    9704:	00060101 	andeq	r0, r6, r1, lsl #2
    9708:	00116a22 	andseq	r6, r1, r2, lsr #20
    970c:	019a0d00 	orrseq	r0, sl, r0, lsl #26
    9710:	0000590f 	andeq	r5, r0, pc, lsl #18
    9714:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    9718:	23b22200 			; <UNDEFINED> instruction: 0x23b22200
    971c:	9c0d0000 	stcls	0, cr0, [sp], {-0}
    9720:	00590f01 	subseq	r0, r9, r1, lsl #30
    9724:	01010000 	mrseq	r0, (UNDEF: 1)
    9728:	38220004 	stmdacc	r2!, {r2}
    972c:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    9730:	590f019f 	stmdbpl	pc, {r0, r1, r2, r3, r4, r7, r8}	; <UNPREDICTABLE>
    9734:	01000000 	mrseq	r0, (UNDEF: 0)
    9738:	22000301 	andcs	r0, r0, #67108864	; 0x4000000
    973c:	0000238c 	andeq	r2, r0, ip, lsl #7
    9740:	0f01a10d 	svceq	0x0001a10d
    9744:	00000059 	andeq	r0, r0, r9, asr r0
    9748:	00020101 	andeq	r0, r2, r1, lsl #2
    974c:	0d011b00 	vstreq	d1, [r1, #-0]
    9750:	aa0401aa 	bge	109e00 <__ccfg+0xe9e58>
    9754:	22000014 	andcs	r0, r0, #20
    9758:	000020fc 	strdeq	r2, [r0], -ip
    975c:	0f01ab0d 	svceq	0x0001ab0d
    9760:	00000059 	andeq	r0, r0, r9, asr r0
    9764:	00040401 	andeq	r0, r4, r1, lsl #8
    9768:	0021dc22 	eoreq	sp, r1, r2, lsr #24
    976c:	01ad0d00 			; <UNDEFINED> instruction: 0x01ad0d00
    9770:	0000590f 	andeq	r5, r0, pc, lsl #18
    9774:	00040100 	andeq	r0, r4, r0, lsl #2
    9778:	011b0000 	tsteq	fp, r0
    977c:	0401b00d 	streq	fp, [r1], #-13
    9780:	000014f9 	strdeq	r1, [r0], -r9
    9784:	00275622 	eoreq	r5, r7, r2, lsr #12
    9788:	01b10d00 			; <UNDEFINED> instruction: 0x01b10d00
    978c:	0000590f 	andeq	r5, r0, pc, lsl #18
    9790:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    9794:	20f42200 	rscscs	r2, r4, r0, lsl #4
    9798:	b20d0000 	andlt	r0, sp, #0
    979c:	00590f01 	subseq	r0, r9, r1, lsl #30
    97a0:	01010000 	mrseq	r0, (UNDEF: 1)
    97a4:	b4220003 	strtlt	r0, [r2], #-3
    97a8:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    97ac:	590f01b4 	stmdbpl	pc, {r2, r4, r5, r7, r8}	; <UNPREDICTABLE>
    97b0:	01000000 	mrseq	r0, (UNDEF: 0)
    97b4:	22000102 	andcs	r0, r0, #-2147483648	; 0x80000000
    97b8:	00001f6f 	andeq	r1, r0, pc, ror #30
    97bc:	0f01b50d 	svceq	0x0001b50d
    97c0:	00000059 	andeq	r0, r0, r9, asr r0
    97c4:	00000101 	andeq	r0, r0, r1, lsl #2
    97c8:	0d011b00 	vstreq	d1, [r1, #-0]
    97cc:	48040222 	stmdami	r4, {r1, r5, r9}
    97d0:	22000015 	andcs	r0, r0, #21
    97d4:	00002756 	andeq	r2, r0, r6, asr r7
    97d8:	0f02230d 	svceq	0x0002230d
    97dc:	00000059 	andeq	r0, r0, r9, asr r0
    97e0:	00040401 	andeq	r0, r4, r1, lsl #8
    97e4:	0020f422 	eoreq	pc, r0, r2, lsr #8
    97e8:	02240d00 	eoreq	r0, r4, #0, 26
    97ec:	0000590f 	andeq	r5, r0, pc, lsl #18
    97f0:	03010100 	movweq	r0, #4352	; 0x1100
    97f4:	21b42200 			; <UNDEFINED> instruction: 0x21b42200
    97f8:	260d0000 	strcs	r0, [sp], -r0
    97fc:	00590f02 	subseq	r0, r9, r2, lsl #30
    9800:	02010000 	andeq	r0, r1, #0
    9804:	6f220001 	svcvs	0x00220001
    9808:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    980c:	590f0227 	stmdbpl	pc, {r0, r1, r2, r5, r9}	; <UNPREDICTABLE>
    9810:	01000000 	mrseq	r0, (UNDEF: 0)
    9814:	00000001 	andeq	r0, r0, r1
    9818:	2a0d011b 	bcs	349c8c <__ccfg+0x329ce4>
    981c:	15750402 	ldrbne	r0, [r5, #-1026]!	; 0xfffffbfe
    9820:	d1220000 			; <UNDEFINED> instruction: 0xd1220000
    9824:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    9828:	590f022b 	stmdbpl	pc, {r0, r1, r3, r5, r9}	; <UNPREDICTABLE>
    982c:	01000000 	mrseq	r0, (UNDEF: 0)
    9830:	22000404 	andcs	r0, r0, #4, 8	; 0x4000000
    9834:	00002725 	andeq	r2, r0, r5, lsr #14
    9838:	0f022c0d 	svceq	0x00022c0d
    983c:	00000059 	andeq	r0, r0, r9, asr r0
    9840:	00000401 	andeq	r0, r0, r1, lsl #8
    9844:	0d021b00 	vstreq	d1, [r2, #-0]
    9848:	a204022e 	andge	r0, r4, #-536870910	; 0xe0000002
    984c:	22000015 	andcs	r0, r0, #21
    9850:	0000220c 	andeq	r2, r0, ip, lsl #4
    9854:	10022f0d 	andne	r2, r2, sp, lsl #30
    9858:	0000006c 	andeq	r0, r0, ip, rrx
    985c:	000d0302 	andeq	r0, sp, r2, lsl #6
    9860:	00270822 	eoreq	r0, r7, r2, lsr #16
    9864:	02320d00 	eorseq	r0, r2, #0, 26
    9868:	00006c10 	andeq	r6, r0, r0, lsl ip
    986c:	000d0200 	andeq	r0, sp, r0, lsl #4
    9870:	041b0000 	ldreq	r0, [fp], #-0
    9874:	0402340d 	streq	r3, [r2], #-1037	; 0xfffffbf3
    9878:	000015cf 	andeq	r1, r0, pc, asr #11
    987c:	0023a122 	eoreq	sl, r3, r2, lsr #2
    9880:	02350d00 	eorseq	r0, r5, #0, 26
    9884:	00007f10 	andeq	r7, r0, r0, lsl pc
    9888:	1c040400 	cfstrsne	mvf0, [r4], {-0}
    988c:	24b12200 	ldrtcs	r2, [r1], #512	; 0x200
    9890:	370d0000 	strcc	r0, [sp, -r0]
    9894:	007f1002 	rsbseq	r1, pc, r2
    9898:	15040000 	strne	r0, [r4, #-0]
    989c:	1b000003 	blne	98b0 <__exidx_end+0x3e8c>
    98a0:	023a0d01 	eorseq	r0, sl, #1, 26	; 0x40
    98a4:	0015fc04 	andseq	pc, r5, r4, lsl #24
    98a8:	25fd2200 	ldrbcs	r2, [sp, #512]!	; 0x200
    98ac:	3b0d0000 	blcc	3498b4 <__ccfg+0x32990c>
    98b0:	00590f02 	subseq	r0, r9, r2, lsl #30
    98b4:	06010000 	streq	r0, [r1], -r0
    98b8:	c7220002 	strgt	r0, [r2, -r2]!
    98bc:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    98c0:	590f023d 	stmdbpl	pc, {r0, r2, r3, r4, r5, r9}	; <UNPREDICTABLE>
    98c4:	01000000 	mrseq	r0, (UNDEF: 0)
    98c8:	00000002 	andeq	r0, r0, r2
    98cc:	420d021b 	andmi	r0, sp, #-1342177279	; 0xb0000001
    98d0:	165c0402 	ldrbne	r0, [ip], -r2, lsl #8
    98d4:	aa220000 	bge	8898dc <__ccfg+0x869934>
    98d8:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    98dc:	6c100243 	lfmvs	f0, 4, [r0], {67}	; 0x43
    98e0:	02000000 	andeq	r0, r0, #0
    98e4:	22000a06 	andcs	r0, r0, #24576	; 0x6000
    98e8:	00002246 	andeq	r2, r0, r6, asr #4
    98ec:	1002440d 	andne	r4, r2, sp, lsl #8
    98f0:	0000006c 	andeq	r0, r0, ip, rrx
    98f4:	00090102 	andeq	r0, r9, r2, lsl #2
    98f8:	00241222 	eoreq	r1, r4, r2, lsr #4
    98fc:	02460d00 	subeq	r0, r6, #0, 26
    9900:	00006c10 	andeq	r6, r0, r0, lsl ip
    9904:	08010200 	stmdaeq	r1, {r9}
    9908:	1faf2200 	svcne	0x00af2200
    990c:	480d0000 	stmdami	sp, {}	; <UNPREDICTABLE>
    9910:	006c1002 	rsbeq	r1, ip, r2
    9914:	04020000 	streq	r0, [r2], #-0
    9918:	52220004 	eorpl	r0, r2, #4
    991c:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9920:	6c10024d 	lfmvs	f0, 4, [r0], {77}	; 0x4d
    9924:	02000000 	andeq	r0, r0, #0
    9928:	00000003 	andeq	r0, r0, r3
    992c:	560d021b 			; <UNDEFINED> instruction: 0x560d021b
    9930:	16ab0402 	strtne	r0, [fp], r2, lsl #8
    9934:	a7220000 	strge	r0, [r2, -r0]!
    9938:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    993c:	6c100257 	lfmvs	f0, 4, [r0], {87}	; 0x57
    9940:	02000000 	andeq	r0, r0, #0
    9944:	22000d03 	andcs	r0, r0, #3, 26	; 0xc0
    9948:	00002146 	andeq	r2, r0, r6, asr #2
    994c:	10025d0d 	andne	r5, r2, sp, lsl #26
    9950:	0000006c 	andeq	r0, r0, ip, rrx
    9954:	000c0102 	andeq	r0, ip, r2, lsl #2
    9958:	0020e622 	eoreq	lr, r0, r2, lsr #12
    995c:	025f0d00 	subseq	r0, pc, #0, 26
    9960:	00006c10 	andeq	r6, r0, r0, lsl ip
    9964:	06060200 	streq	r0, [r6], -r0, lsl #4
    9968:	23e52200 	mvncs	r2, #0, 4
    996c:	660d0000 	strvs	r0, [sp], -r0
    9970:	006c1002 	rsbeq	r1, ip, r2
    9974:	01020000 	mrseq	r0, (UNDEF: 2)
    9978:	02000005 	andeq	r0, r0, #5
    997c:	0000256d 	andeq	r2, r0, sp, ror #10
    9980:	b7343c0e 	ldrlt	r3, [r4, -lr, lsl #24]!
    9984:	0f000016 	svceq	0x00000016
    9988:	00002556 	andeq	r2, r0, r6, asr r5
    998c:	155e0e0c 	ldrbne	r0, [lr, #-3596]	; 0xfffff1f4
    9990:	00001706 	andeq	r1, r0, r6, lsl #14
    9994:	00201d0d 	eoreq	r1, r0, sp, lsl #26
    9998:	0d5f0e00 	ldcleq	14, cr0, [pc, #-0]	; 99a0 <__exidx_end+0x3f7c>
    999c:	00000984 	andeq	r0, r0, r4, lsl #19
    99a0:	07730d00 	ldrbeq	r0, [r3, -r0, lsl #26]!
    99a4:	600e0000 	andvs	r0, lr, r0
    99a8:	0000590c 	andeq	r5, r0, ip, lsl #18
    99ac:	6a0d0400 	bvs	34a9b4 <__ccfg+0x32aa0c>
    99b0:	0e000014 	mcreq	0, 0, r0, cr0, cr4, {0}
    99b4:	1706066e 	strne	r0, [r6, -lr, ror #12]
    99b8:	0d050000 	stceq	0, cr0, [r5, #-0]
    99bc:	000018e0 	andeq	r1, r0, r0, ror #17
    99c0:	6c0d6f0e 	stcvs	15, cr6, [sp], {14}
    99c4:	06000000 	streq	r0, [r0], -r0
    99c8:	0047410d 	subeq	r4, r7, sp, lsl #2
    99cc:	0c710e00 	ldcleq	14, cr0, [r1], #-0
    99d0:	00000059 	andeq	r0, r0, r9, asr r0
    99d4:	010c0008 	tsteq	ip, r8
    99d8:	4004610e 	andmi	r6, r4, lr, lsl #2
    99dc:	21000017 	tstcs	r0, r7, lsl r0
    99e0:	00005353 	andeq	r5, r0, r3, asr r3
    99e4:	590f620e 	stmdbpl	pc, {r1, r2, r3, r9, sp, lr}	; <UNPREDICTABLE>
    99e8:	01000000 	mrseq	r0, (UNDEF: 0)
    99ec:	21000602 	tstcs	r0, r2, lsl #12
    99f0:	0000252e 	andeq	r2, r0, lr, lsr #10
    99f4:	590f670e 	stmdbpl	pc, {r1, r2, r3, r8, r9, sl, sp, lr}	; <UNPREDICTABLE>
    99f8:	01000000 	mrseq	r0, (UNDEF: 0)
    99fc:	21000402 	tstcs	r0, r2, lsl #8
    9a00:	00001fe6 	andeq	r1, r0, r6, ror #31
    9a04:	590f6c0e 	stmdbpl	pc, {r1, r2, r3, sl, fp, sp, lr}	; <UNPREDICTABLE>
    9a08:	01000000 	mrseq	r0, (UNDEF: 0)
    9a0c:	00000004 	andeq	r0, r0, r4
    9a10:	4802100c 	stmdami	r2, {r2, r3, ip}
    9a14:	00177e09 	andseq	r7, r7, r9, lsl #28
    9a18:	216c0d00 	cmncs	ip, r0, lsl #26
    9a1c:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    9a20:	00007f0d 	andeq	r7, r0, sp, lsl #30
    9a24:	cd0d0000 	stcgt	0, cr0, [sp, #-0]
    9a28:	02000020 	andeq	r0, r0, #32
    9a2c:	007f0d4a 	rsbseq	r0, pc, sl, asr #26
    9a30:	0d040000 	stceq	0, cr0, [r4, #-0]
    9a34:	00002518 	andeq	r2, r0, r8, lsl r5
    9a38:	7f0d4b02 	svcvc	0x000d4b02
    9a3c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9a40:	00266b0d 	eoreq	r6, r6, sp, lsl #22
    9a44:	0d4c0200 	sfmeq	f0, 2, [ip, #-0]
    9a48:	0000007f 	andeq	r0, r0, pc, ror r0
    9a4c:	7802000c 	stmdavc	r2, {r2, r3}
    9a50:	0200001f 	andeq	r0, r0, #31
    9a54:	1740034d 	strbne	r0, [r0, -sp, asr #6]
    9a58:	8b0a0000 	blhi	289a60 <__ccfg+0x269ab8>
    9a5c:	9a000000 	bls	9a64 <__exidx_end+0x4040>
    9a60:	0b000017 	bleq	9ac4 <__exidx_end+0x40a0>
    9a64:	000000aa 	andeq	r0, r0, sl, lsr #1
    9a68:	8a0400a2 	bhi	109cf8 <__ccfg+0xe9d50>
    9a6c:	23000017 	movwcs	r0, #23
    9a70:	000022b0 			; <UNDEFINED> instruction: 0x000022b0
    9a74:	9a104904 	bls	41be8c <__ccfg+0x3fbee4>
    9a78:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9a7c:	00575403 	subseq	r5, r7, r3, lsl #8
    9a80:	008b0a00 	addeq	r0, fp, r0, lsl #20
    9a84:	17c20000 	strbne	r0, [r2, r0]
    9a88:	aa240000 	bge	909a90 <__ccfg+0x8e9ae8>
    9a8c:	ac000000 	stcge	0, cr0, [r0], {-0}
    9a90:	b1040001 	tstlt	r4, r1
    9a94:	23000017 	movwcs	r0, #23
    9a98:	00002339 	andeq	r2, r0, r9, lsr r3
    9a9c:	c2103a05 	andsgt	r3, r0, #20480	; 0x5000
    9aa0:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9aa4:	0050a003 	subseq	sl, r0, r3
    9aa8:	28e80200 	stmiacs	r8!, {r9}^
    9aac:	270f0000 	strcs	r0, [pc, -r0]
    9ab0:	00006c12 	andeq	r6, r0, r2, lsl ip
    9ab4:	17d90400 	ldrbne	r0, [r9, r0, lsl #8]
    9ab8:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
    9abc:	02000017 	andeq	r0, r0, #23
    9ac0:	00001daf 	andeq	r1, r0, pc, lsr #27
    9ac4:	59122b0f 	ldmdbpl	r2, {r0, r1, r2, r3, r8, r9, fp, sp}
    9ac8:	05000000 	streq	r0, [r0, #-0]
    9acc:	000017ef 	andeq	r1, r0, pc, ror #15
    9ad0:	00293a02 	eoreq	r3, r9, r2, lsl #20
    9ad4:	122c0f00 	eorne	r0, ip, #0, 30
    9ad8:	0000007f 	andeq	r0, r0, pc, ror r0
    9adc:	00180004 	andseq	r0, r8, r4
    9ae0:	06410200 	strbeq	r0, [r1], -r0, lsl #4
    9ae4:	2d0f0000 	stccs	0, cr0, [pc, #-0]	; 9aec <__exidx_end+0x40c8>
    9ae8:	00007f12 	andeq	r7, r0, r2, lsl pc
    9aec:	0baf0200 	bleq	febca2f4 <_estack+0xdebc52f4>
    9af0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    9af4:	00182910 	andseq	r2, r8, r0, lsl r9
    9af8:	d9041100 	stmdble	r4, {r8, ip}
    9afc:	0c000017 	stceq	0, cr0, [r0], {23}
    9b00:	09320f08 	ldmdbeq	r2!, {r3, r8, r9, sl, fp}
    9b04:	000018bd 			; <UNDEFINED> instruction: 0x000018bd
    9b08:	00002b21 	andeq	r2, r0, r1, lsr #22
    9b0c:	07340f00 	ldreq	r0, [r4, -r0, lsl #30]!
    9b10:	000017ef 	andeq	r1, r0, pc, ror #15
    9b14:	00070101 	andeq	r0, r7, r1, lsl #2
    9b18:	00064721 	andeq	r4, r6, r1, lsr #14
    9b1c:	03350f00 	teqeq	r5, #0, 30
    9b20:	000017ef 	andeq	r1, r0, pc, ror #15
    9b24:	00060101 	andeq	r0, r6, r1, lsl #2
    9b28:	0002de21 	andeq	sp, r2, r1, lsr #28
    9b2c:	03360f00 	teqeq	r6, #0, 30
    9b30:	000017ef 	andeq	r1, r0, pc, ror #15
    9b34:	00050101 	andeq	r0, r5, r1, lsl #2
    9b38:	0006b221 	andeq	fp, r6, r1, lsr #4
    9b3c:	03370f00 	teqeq	r7, #0, 30
    9b40:	000017ef 	andeq	r1, r0, pc, ror #15
    9b44:	00040101 	andeq	r0, r4, r1, lsl #2
    9b48:	000a9a21 	andeq	r9, sl, r1, lsr #20
    9b4c:	03380f00 	teqeq	r8, #0, 30
    9b50:	000017ef 	andeq	r1, r0, pc, ror #15
    9b54:	00000401 	andeq	r0, r0, r1, lsl #8
    9b58:	0006560d 	andeq	r5, r6, sp, lsl #12
    9b5c:	073a0f00 	ldreq	r0, [sl, -r0, lsl #30]!
    9b60:	000017ef 	andeq	r1, r0, pc, ror #15
    9b64:	08f60d01 	ldmeq	r6!, {r0, r8, sl, fp}^
    9b68:	3c0f0000 	stccc	0, cr0, [pc], {-0}
    9b6c:	0017ef03 	andseq	lr, r7, r3, lsl #30
    9b70:	270d0200 	strcs	r0, [sp, -r0, lsl #4]
    9b74:	0f00000f 	svceq	0x0000000f
    9b78:	17ef033d 			; <UNDEFINED> instruction: 0x17ef033d
    9b7c:	0d030000 	stceq	0, cr0, [r3, #-0]
    9b80:	0000090e 	andeq	r0, r0, lr, lsl #18
    9b84:	00083f0f 	andeq	r3, r8, pc, lsl #30
    9b88:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    9b8c:	03140200 	tsteq	r4, #0, 4
    9b90:	410f0000 	mrsmi	r0, CPSR
    9b94:	00182f03 	andseq	r2, r8, r3, lsl #30
    9b98:	18bd0500 	popne	{r8, sl}
    9b9c:	b9250000 	stmdblt	r5!, {}	; <UNPREDICTABLE>
    9ba0:	0f000006 	svceq	0x00000006
    9ba4:	18c91a43 	stmiane	r9, {r0, r1, r6, r9, fp, ip}^
    9ba8:	01010000 	mrseq	r0, (UNDEF: 1)
    9bac:	00019725 	andeq	r9, r1, r5, lsr #14
    9bb0:	0e450f00 	cdpeq	15, 4, cr0, cr5, cr0, {0}
    9bb4:	000005eb 	andeq	r0, r0, fp, ror #11
    9bb8:	1d250101 	stfnes	f0, [r5, #-4]!
    9bbc:	0f000003 	svceq	0x00000003
    9bc0:	05eb1e45 	strbeq	r1, [fp, #3653]!	; 0xe45
    9bc4:	01010000 	mrseq	r0, (UNDEF: 1)
    9bc8:	8f10080c 	svchi	0x0010080c
    9bcc:	00192909 	andseq	r2, r9, r9, lsl #18
    9bd0:	0cc50d00 	stcleq	13, cr0, [r5], {0}
    9bd4:	90100000 	andsls	r0, r0, r0
    9bd8:	00007f0b 	andeq	r7, r0, fp, lsl #30
    9bdc:	620d0000 	andvs	r0, sp, #0
    9be0:	10000010 	andne	r0, r0, r0, lsl r0
    9be4:	17d90891 	bfine	r0, r1, #17, #9
    9be8:	0d040000 	stceq	0, cr0, [r4, #-0]
    9bec:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    9bf0:	fb109210 	blx	42e43a <__ccfg+0x40e492>
    9bf4:	06000017 			; <UNDEFINED> instruction: 0x06000017
    9bf8:	0cb90200 	lfmeq	f0, 4, [r9]
    9bfc:	93100000 	tstls	r0, #0
    9c00:	0018f803 	andseq	pc, r8, r3, lsl #16
    9c04:	19290a00 	stmdbne	r9!, {r9, fp}
    9c08:	19400000 	stmdbne	r0, {}^	; <UNPREDICTABLE>
    9c0c:	00260000 	eoreq	r0, r6, r0
    9c10:	00093825 	andeq	r3, r9, r5, lsr #16
    9c14:	0f991000 	svceq	0x00991000
    9c18:	00001935 	andeq	r1, r0, r5, lsr r9
    9c1c:	010c0101 	tsteq	ip, r1, lsl #2
    9c20:	78099111 	stmdavc	r9, {r0, r4, r8, ip, pc}
    9c24:	21000019 	tstcs	r0, r9, lsl r0
    9c28:	00000915 	andeq	r0, r0, r5, lsl r9
    9c2c:	ef079311 	svc	0x00079311
    9c30:	01000017 	tsteq	r0, r7, lsl r0
    9c34:	21000107 	tstcs	r0, r7, lsl #2
    9c38:	000005c7 	andeq	r0, r0, r7, asr #11
    9c3c:	ef039411 	svc	0x00039411
    9c40:	01000017 	tsteq	r0, r7, lsl r0
    9c44:	00000001 	andeq	r0, r0, r1
    9c48:	000aa602 	andeq	sl, sl, r2, lsl #12
    9c4c:	03961100 	orrseq	r1, r6, #0, 2
    9c50:	0000194e 	andeq	r1, r0, lr, asr #18
    9c54:	00197804 	andseq	r7, r9, r4, lsl #16
    9c58:	19840a00 	stmibne	r4, {r9, fp}
    9c5c:	19940000 	ldmibne	r4, {}	; <UNPREDICTABLE>
    9c60:	00260000 	eoreq	r0, r6, r0
    9c64:	00198904 	andseq	r8, r9, r4, lsl #18
    9c68:	03ac2500 			; <UNDEFINED> instruction: 0x03ac2500
    9c6c:	9c110000 	ldcls	0, cr0, [r1], {-0}
    9c70:	00199417 	andseq	r9, r9, r7, lsl r4
    9c74:	0a010100 	beq	4a07c <__ccfg+0x2a0d4>
    9c78:	000017e5 	andeq	r1, r0, r5, ror #15
    9c7c:	000019b2 			; <UNDEFINED> instruction: 0x000019b2
    9c80:	a7040026 	strge	r0, [r4, -r6, lsr #32]
    9c84:	25000019 	strcs	r0, [r0, #-25]	; 0xffffffe7
    9c88:	00000609 	andeq	r0, r0, r9, lsl #12
    9c8c:	b2130612 	andslt	r0, r3, #18874368	; 0x1200000
    9c90:	01000019 	tsteq	r0, r9, lsl r0
    9c94:	08d82501 	ldmeq	r8, {r0, r8, sl, sp}^
    9c98:	c3100000 	tstgt	r0, #0
    9c9c:	0018000e 	andseq	r0, r8, lr
    9ca0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    9ca4:	00000c6d 	andeq	r0, r0, sp, ror #24
    9ca8:	10016e13 	andne	r6, r1, r3, lsl lr
    9cac:	000019e0 	andeq	r1, r0, r0, ror #19
    9cb0:	19e60411 	stmibne	r6!, {r0, r4, sl}^
    9cb4:	011f0000 	tsteq	pc, r0
    9cb8:	000019f2 	strdeq	r1, [r0], -r2
    9cbc:	0017d916 	andseq	sp, r7, r6, lsl r9
    9cc0:	f80a0000 			; <UNDEFINED> instruction: 0xf80a0000
    9cc4:	fd000005 	stc2	0, cr0, [r0, #-20]	; 0xffffffec
    9cc8:	26000019 			; <UNDEFINED> instruction: 0x26000019
    9ccc:	19f20400 	ldmibne	r2!, {sl}^
    9cd0:	e1200000 			; <UNDEFINED> instruction: 0xe1200000
    9cd4:	13000009 	movwne	r0, #9
    9cd8:	fd16017f 	ldc2	1, cr0, [r6, #-508]	; 0xfffffe04
    9cdc:	01000019 	tsteq	r0, r9, lsl r0
    9ce0:	03982001 	orrseq	r2, r8, #1
    9ce4:	82130000 	andshi	r0, r3, #0
    9ce8:	180c1401 	stmdane	ip, {r0, sl, ip}
    9cec:	01010000 	mrseq	r0, (UNDEF: 1)
    9cf0:	00037020 	andeq	r7, r3, r0, lsr #32
    9cf4:	02d81300 	sbcseq	r1, r8, #0, 6
    9cf8:	0018000e 	andseq	r0, r8, lr
    9cfc:	1b010100 	blne	4a104 <__ccfg+0x2a15c>
    9d00:	03031308 	movweq	r1, #13064	; 0x3308
    9d04:	001a5609 	andseq	r5, sl, r9, lsl #12
    9d08:	3c8e1800 	stccc	8, cr1, [lr], {0}
    9d0c:	07130000 	ldreq	r0, [r3, -r0]
    9d10:	17d90703 	ldrbne	r0, [r9, r3, lsl #14]
    9d14:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9d18:	00000fba 			; <UNDEFINED> instruction: 0x00000fba
    9d1c:	08030813 	stmdaeq	r3, {r0, r1, r4, fp}
    9d20:	00001811 	andeq	r1, r0, r1, lsl r8
    9d24:	04070004 	streq	r0, [r7], #-4
    9d28:	1300000a 	movwne	r0, #10
    9d2c:	2f030309 	svccs	0x00030309
    9d30:	1a00001a 	bne	9da0 <__exidx_end+0x437c>
    9d34:	00000020 	andeq	r0, r0, r0, lsr #32
    9d38:	030b1330 	movweq	r1, #45872	; 0xb330
    9d3c:	001ac608 	andseq	ip, sl, r8, lsl #12
    9d40:	1f111800 	svcne	0x00111800
    9d44:	14130000 	ldrne	r0, [r3], #-0
    9d48:	17d90803 	ldrbne	r0, [r9, r3, lsl #16]
    9d4c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9d50:	00000be2 	andeq	r0, r0, r2, ror #23
    9d54:	08031513 	stmdaeq	r3, {r0, r1, r4, r8, sl, ip}
    9d58:	000017d9 	ldrdeq	r1, [r0], -r9
    9d5c:	4c7b1802 	ldclmi	8, cr1, [fp], #-8
    9d60:	16130000 	ldrne	r0, [r3], -r0
    9d64:	19d30b03 	ldmibne	r3, {r0, r1, r8, r9, fp}^
    9d68:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    9d6c:	00004741 	andeq	r4, r0, r1, asr #14
    9d70:	09031713 	stmdbeq	r3, {r0, r1, r4, r8, r9, sl, ip}
    9d74:	00001811 	andeq	r1, r0, r1, lsl r8
    9d78:	000f1808 	andeq	r1, pc, r8, lsl #16
    9d7c:	18130000 	ldmdane	r3, {}	; <UNPREDICTABLE>
    9d80:	1ac60f03 	bne	ff18d994 <_estack+0xdf188994>
    9d84:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    9d88:	00000958 	andeq	r0, r0, r8, asr r9
    9d8c:	15031913 	strne	r1, [r3, #-2323]	; 0xfffff6ed
    9d90:	00001ad6 	ldrdeq	r1, [r0], -r6
    9d94:	560a002c 	strpl	r0, [sl], -ip, lsr #32
    9d98:	d600001a 			; <UNDEFINED> instruction: 0xd600001a
    9d9c:	0b00001a 	bleq	9e0c <__exidx_end+0x43e8>
    9da0:	000000aa 	andeq	r0, r0, sl, lsr #1
    9da4:	04110003 	ldreq	r0, [r1], #-3
    9da8:	00001a63 	andeq	r1, r0, r3, ror #20
    9dac:	000bd707 	andeq	sp, fp, r7, lsl #14
    9db0:	031c1300 	tsteq	ip, #0, 6
    9db4:	001a631b 	andseq	r6, sl, fp, lsl r3
    9db8:	0bb72000 	bleq	fedd1dc0 <_estack+0xdedccdc0>
    9dbc:	1e130000 	cdpne	0, 1, cr0, cr3, cr0, {0}
    9dc0:	1af81403 	bne	ffe0edd4 <_estack+0xdfe09dd4>
    9dc4:	01010000 	mrseq	r0, (UNDEF: 1)
    9dc8:	1adc0411 	bne	ff70ae14 <_estack+0xdf705e14>
    9dcc:	0a250000 	beq	949dd4 <__ccfg+0x929e2c>
    9dd0:	14000007 	strne	r0, [r0], #-7
    9dd4:	17d9131d 	bfine	r1, sp, #6, #20
    9dd8:	01010000 	mrseq	r0, (UNDEF: 1)
    9ddc:	0002e525 	andeq	lr, r2, r5, lsr #10
    9de0:	1a1e1400 	bne	78ede8 <__ccfg+0x76ee40>
    9de4:	000017ea 	andeq	r1, r0, sl, ror #15
    9de8:	64250101 	strtvs	r0, [r5], #-257	; 0xfffffeff
    9dec:	1400000c 	strne	r0, [r0], #-12
    9df0:	17ea241e 			; <UNDEFINED> instruction: 0x17ea241e
    9df4:	01010000 	mrseq	r0, (UNDEF: 1)
    9df8:	000c8225 	andeq	r8, ip, r5, lsr #4
    9dfc:	14221400 	strtne	r1, [r2], #-1024	; 0xfffffc00
    9e00:	00001af8 	strdeq	r1, [r0], -r8
    9e04:	28250101 	stmdacs	r5!, {r0, r8}
    9e08:	15000020 	strne	r0, [r0, #-32]	; 0xffffffe0
    9e0c:	0f6d2739 	svceq	0x006d2739
    9e10:	01010000 	mrseq	r0, (UNDEF: 1)
    9e14:	00231625 	eoreq	r1, r3, r5, lsr #12
    9e18:	153a1500 	ldrne	r1, [sl, #-1280]!	; 0xfffffb00
    9e1c:	000009fe 	strdeq	r0, [r0], -lr
    9e20:	32250101 	eorcc	r0, r5, #1073741824	; 0x40000000
    9e24:	15000027 	strne	r0, [r0, #-39]	; 0xffffffd9
    9e28:	0cec1a3b 	vstmiaeq	ip!, {s3-s61}
    9e2c:	01010000 	mrseq	r0, (UNDEF: 1)
    9e30:	0025d625 	eoreq	sp, r5, r5, lsr #12
    9e34:	1a3c1500 	bne	f0f23c <__ccfg+0xeef294>
    9e38:	00000d88 	andeq	r0, r0, r8, lsl #27
    9e3c:	d3230101 			; <UNDEFINED> instruction: 0xd3230101
    9e40:	01000026 	tsteq	r0, r6, lsr #32
    9e44:	00a30c24 	adceq	r0, r3, r4, lsr #24
    9e48:	03050000 	movweq	r0, #20480	; 0x5000
    9e4c:	200005fc 	strdcs	r0, [r0], -ip
    9e50:	001f8123 	andseq	r8, pc, r3, lsr #2
    9e54:	0d260100 	stfeqs	f0, [r6, #-0]
    9e58:	000017ef 	andeq	r1, r0, pc, ror #15
    9e5c:	06080305 	streq	r0, [r8], -r5, lsl #6
    9e60:	f0232000 			; <UNDEFINED> instruction: 0xf0232000
    9e64:	01000015 	tsteq	r0, r5, lsl r0
    9e68:	17ef0327 	strbne	r0, [pc, r7, lsr #6]!
    9e6c:	03050000 	movweq	r0, #20480	; 0x5000
    9e70:	200005f8 	strdcs	r0, [r0], -r8
    9e74:	00240a23 	eoreq	r0, r4, r3, lsr #20
    9e78:	0d2a0100 	stfeqs	f0, [sl, #-0]
    9e7c:	000017ef 	andeq	r1, r0, pc, ror #15
    9e80:	062a0305 	strteq	r0, [sl], -r5, lsl #6
    9e84:	04232000 	strteq	r2, [r3], #-0
    9e88:	01000024 	tsteq	r0, r4, lsr #32
    9e8c:	17ef0d43 	strbne	r0, [pc, r3, asr #26]!
    9e90:	03050000 	movweq	r0, #20480	; 0x5000
    9e94:	2000003a 	andcs	r0, r0, sl, lsr r0
    9e98:	0020a123 	eoreq	sl, r0, r3, lsr #2
    9e9c:	0d470100 	stfeqe	f0, [r7, #-0]
    9ea0:	000017ef 	andeq	r1, r0, pc, ror #15
    9ea4:	05f00305 	ldrbeq	r0, [r0, #773]!	; 0x305
    9ea8:	e50a2000 	str	r2, [sl, #-0]
    9eac:	ea000017 	b	9f10 <__exidx_end+0x44ec>
    9eb0:	0b00001b 	bleq	9f24 <__exidx_end+0x4500>
    9eb4:	000000aa 	andeq	r0, r0, sl, lsr #1
    9eb8:	da040007 	ble	109edc <__ccfg+0xe9f34>
    9ebc:	2300001b 	movwcs	r0, #27
    9ec0:	00002492 	muleq	r0, r2, r4
    9ec4:	ea134e01 	b	4dd6d0 <__ccfg+0x4bd728>
    9ec8:	0500001b 	streq	r0, [r0, #-27]	; 0xffffffe5
    9ecc:	00508e03 	subseq	r8, r0, r3, lsl #28
    9ed0:	272b2300 	strcs	r2, [fp, -r0, lsl #6]!
    9ed4:	52010000 	andpl	r0, r1, #0
    9ed8:	0017d90d 	andseq	sp, r7, sp, lsl #18
    9edc:	00030500 	andeq	r0, r3, r0, lsl #10
    9ee0:	23200006 			; <UNDEFINED> instruction: 0x23200006
    9ee4:	000023c3 	andeq	r2, r0, r3, asr #7
    9ee8:	d9035301 	stmdble	r3, {r0, r8, r9, ip, lr}
    9eec:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9ef0:	00062803 	andeq	r2, r6, r3, lsl #16
    9ef4:	26092320 	strcs	r2, [r9], -r0, lsr #6
    9ef8:	54010000 	strpl	r0, [r1], #-0
    9efc:	0017d903 	andseq	sp, r7, r3, lsl #18
    9f00:	ee030500 	cfsh32	mvfx0, mvfx3, #0
    9f04:	23200005 			; <UNDEFINED> instruction: 0x23200005
    9f08:	00001fbe 			; <UNDEFINED> instruction: 0x00001fbe
    9f0c:	d9035501 	stmdble	r3, {r0, r8, sl, ip, lr}
    9f10:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9f14:	00003803 	andeq	r3, r0, r3, lsl #16
    9f18:	01040c20 	tsteq	r4, r0, lsr #24
    9f1c:	1c6b0959 			; <UNDEFINED> instruction: 0x1c6b0959
    9f20:	70100000 	andsvc	r0, r0, r0
    9f24:	5a010073 	bpl	4a0f8 <__ccfg+0x2a150>
    9f28:	0017d908 	andseq	sp, r7, r8, lsl #18
    9f2c:	72100000 	andsvc	r0, r0, #0
    9f30:	5b010077 	blpl	4a114 <__ccfg+0x2a16c>
    9f34:	0017d904 	andseq	sp, r7, r4, lsl #18
    9f38:	02000200 	andeq	r0, r0, #0, 4
    9f3c:	00002352 	andeq	r2, r0, r2, asr r3
    9f40:	49035c01 	stmdbmi	r3, {r0, sl, fp, ip, lr}
    9f44:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    9f48:	00001c6b 	andeq	r1, r0, fp, ror #24
    9f4c:	001c770a 	andseq	r7, ip, sl, lsl #14
    9f50:	001c8c00 	andseq	r8, ip, r0, lsl #24
    9f54:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    9f58:	00020000 	andeq	r0, r2, r0
    9f5c:	001c7c04 	andseq	r7, ip, r4, lsl #24
    9f60:	23842300 	orrcs	r2, r4, #0, 6
    9f64:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    9f68:	001c8c18 	andseq	r8, ip, r8, lsl ip
    9f6c:	e0030500 	and	r0, r3, r0, lsl #10
    9f70:	23000059 	movwcs	r0, #89	; 0x59
    9f74:	000024ba 			; <UNDEFINED> instruction: 0x000024ba
    9f78:	761b6601 	ldrvc	r6, [fp], -r1, lsl #12
    9f7c:	05000010 	streq	r0, [r0, #-16]
    9f80:	00061c03 	andeq	r1, r6, r3, lsl #24
    9f84:	25f52320 	ldrbcs	r2, [r5, #800]!	; 0x320
    9f88:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    9f8c:	0018110e 	andseq	r1, r8, lr, lsl #2
    9f90:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    9f94:	23200005 			; <UNDEFINED> instruction: 0x23200005
    9f98:	00002040 	andeq	r2, r0, r0, asr #32
    9f9c:	11176901 	tstne	r7, r1, lsl #18
    9fa0:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    9fa4:	00060403 	andeq	r0, r6, r3, lsl #8
    9fa8:	265c2320 	ldrbcs	r2, [ip], -r0, lsr #6
    9fac:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    9fb0:	000ac121 	andeq	ip, sl, r1, lsr #2
    9fb4:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
    9fb8:	23200000 	nopcs	{0}	; <UNPREDICTABLE>
    9fbc:	000021cd 	andeq	r2, r0, sp, asr #3
    9fc0:	721a8301 	andsvc	r8, sl, #67108864	; 0x4000000
    9fc4:	0500000e 	streq	r0, [r0, #-14]
    9fc8:	00000803 	andeq	r0, r0, r3, lsl #16
    9fcc:	1f1e2320 	svcne	0x001e2320
    9fd0:	c1010000 	mrsgt	r0, (UNDEF: 1)
    9fd4:	00177e11 	andseq	r7, r7, r1, lsl lr
    9fd8:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    9fdc:	27200006 	strcs	r0, [r0, -r6]!
    9fe0:	00002524 	andeq	r2, r0, r4, lsr #10
    9fe4:	0c020a01 			; <UNDEFINED> instruction: 0x0c020a01
    9fe8:	000000a3 	andeq	r0, r0, r3, lsr #1
    9fec:	204f0128 	subcs	r0, pc, r8, lsr #2
    9ff0:	d7010000 	strle	r0, [r1, -r0]
    9ff4:	68010603 	stmdavs	r1, {r0, r1, r9, sl}
    9ff8:	dc00002e 	stcle	0, cr0, [r0], {46}	; 0x2e
    9ffc:	0100002f 	tsteq	r0, pc, lsr #32
    a000:	001da59c 	mulseq	sp, ip, r5
    a004:	68702900 	ldmdavs	r0!, {r8, fp, sp}^
    a008:	d7010079 	smlsdxle	r1, r9, r0, r0
    a00c:	00a31703 	adceq	r1, r3, r3, lsl #14
    a010:	28140000 	ldmdacs	r4, {}	; <UNPREDICTABLE>
    a014:	6d290000 	stcvs	0, cr0, [r9, #-0]
    a018:	01007362 	tsteq	r0, r2, ror #6
    a01c:	a32003d7 			; <UNDEFINED> instruction: 0xa32003d7
    a020:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    a024:	2a000028 	bcs	a0cc <__exidx_end+0x46a8>
    a028:	00001e35 	andeq	r1, r0, r5, lsr lr
    a02c:	00002e8c 	andeq	r2, r0, ip, lsl #29
    a030:	00000e90 	muleq	r0, r0, lr
    a034:	0203f001 	andeq	pc, r3, #1
    a038:	00001d93 	muleq	r0, r3, sp
    a03c:	000e902b 	andeq	r9, lr, fp, lsr #32
    a040:	1e432c00 	cdpne	12, 4, cr2, cr3, cr0, {0}
    a044:	4e2d0000 	cdpmi	0, 2, cr0, cr13, cr0, {0}
    a048:	8700001e 	smladhi	r0, lr, r0, r0
    a04c:	2d000028 	stccs	0, cr0, [r0, #-160]	; 0xffffff60
    a050:	00001e5a 	andeq	r1, r0, sl, asr lr
    a054:	000028a6 	andeq	r2, r0, r6, lsr #17
    a058:	001e662d 	andseq	r6, lr, sp, lsr #12
    a05c:	0028cf00 	eoreq	ip, r8, r0, lsl #30
    a060:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    a064:	00001fcc 	andeq	r1, r0, ip, asr #31
    a068:	00002f42 	andeq	r2, r0, r2, asr #30
    a06c:	00000ed0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    a070:	02041401 	andeq	r1, r4, #16777216	; 0x1000000
    a074:	23322f00 	teqcs	r2, #0, 30
    a078:	4a010000 	bmi	4a080 <__ccfg+0x2a0d8>
    a07c:	a3010c03 	movwge	r0, #7171	; 0x1c03
    a080:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    a084:	b8000027 	stmdalt	r0, {r0, r1, r2, r5}
    a088:	01000028 	tsteq	r0, r8, lsr #32
    a08c:	001e359c 	mulseq	lr, ip, r5
    a090:	706f2900 	rsbvc	r2, pc, r0, lsl #18
    a094:	4a010074 	bmi	4a26c <__ccfg+0x2a2c4>
    a098:	00a31803 	adceq	r1, r3, r3, lsl #16
    a09c:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    a0a0:	76290000 	strtvc	r0, [r9], -r0
    a0a4:	01006c61 	tsteq	r0, r1, ror #24
    a0a8:	1d25034a 	stcne	3, cr0, [r5, #-296]!	; 0xfffffed8
    a0ac:	8f000018 	svchi	0x00000018
    a0b0:	30000029 	andcc	r0, r0, r9, lsr #32
    a0b4:	00746572 	rsbseq	r6, r4, r2, ror r5
    a0b8:	06034c01 	streq	r4, [r3], -r1, lsl #24
    a0bc:	000000a3 	andeq	r0, r0, r3, lsr #1
    a0c0:	00002a47 	andeq	r2, r0, r7, asr #20
    a0c4:	0021e831 	eoreq	lr, r1, r1, lsr r8
    a0c8:	03cf0100 	biceq	r0, pc, #0, 2
    a0cc:	0027b001 	eoreq	fp, r7, r1
    a0d0:	23f23100 	mvnscs	r3, #0, 2
    a0d4:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    a0d8:	276a0103 	strbcs	r0, [sl, -r3, lsl #2]!
    a0dc:	9e310000 	cdpls	0, 3, cr0, cr1, cr0, {0}
    a0e0:	01000025 	tsteq	r0, r5, lsr #32
    a0e4:	b40103cd 	strlt	r0, [r1], #-973	; 0xfffffc33
    a0e8:	32000027 	andcc	r0, r0, #39	; 0x27
    a0ec:	0000276a 	andeq	r2, r0, sl, ror #14
    a0f0:	00002794 	muleq	r0, r4, r7
    a0f4:	01006a30 	tsteq	r0, r0, lsr sl
    a0f8:	a3040359 	movwge	r0, #17241	; 0x4359
    a0fc:	91000000 	mrsls	r0, (UNDEF: 0)
    a100:	0000002a 	andeq	r0, r0, sl, lsr #32
    a104:	22673300 	rsbcs	r3, r7, #0, 6
    a108:	07010000 	streq	r0, [r1, -r0]
    a10c:	73010d03 	movwvc	r0, #7427	; 0x1d03
    a110:	3400001e 	strcc	r0, [r0], #-30	; 0xffffffe2
    a114:	0b010069 	bleq	4a2c0 <__ccfg+0x2a318>
    a118:	00a30603 	adceq	r0, r3, r3, lsl #12
    a11c:	72340000 	eorsvc	r0, r4, #0
    a120:	0c010065 	stceq	0, cr0, [r1], {101}	; 0x65
    a124:	1e731a03 	vaddne.f32	s3, s6, s6
    a128:	64340000 	ldrtvs	r0, [r4], #-0
    a12c:	0c010061 	stceq	0, cr0, [r1], {97}	; 0x61
    a130:	1e731f03 	cdpne	15, 7, cr1, cr3, cr3, {0}
    a134:	64340000 	ldrtvs	r0, [r4], #-0
    a138:	0c010062 	stceq	0, cr0, [r1], {98}	; 0x62
    a13c:	1e732403 	cdpne	4, 7, cr2, cr3, cr3, {0}
    a140:	11000000 	mrsne	r0, (UNDEF: 0)
    a144:	0016ab04 	andseq	sl, r6, r4, lsl #22
    a148:	5b012800 	blpl	54150 <__ccfg+0x341a8>
    a14c:	01000020 	tsteq	r0, r0, lsr #32
    a150:	0101020d 	tsteq	r1, sp, lsl #4
    a154:	00002c08 	andeq	r2, r0, r8, lsl #24
    a158:	00002df8 	strdeq	r2, [r0], -r8
    a15c:	1efd9c01 	cdpne	12, 15, cr9, cr13, cr1, {0}
    a160:	2e350000 	cdpcs	0, 3, cr0, cr5, cr0, {0}
    a164:	0100000c 	tsteq	r0, ip
    a168:	d901020d 	stmdble	r1, {r0, r2, r3, r9}
    a16c:	a4000017 	strge	r0, [r0], #-23	; 0xffffffe9
    a170:	3100002a 	tstcc	r0, sl, lsr #32
    a174:	00001f88 	andeq	r1, r0, r8, lsl #31
    a178:	01021601 	tsteq	r2, r1, lsl #12
    a17c:	00002c1c 	andeq	r2, r0, ip, lsl ip
    a180:	0020232e 	eoreq	r2, r0, lr, lsr #6
    a184:	002c7e00 	eoreq	r7, ip, r0, lsl #28
    a188:	000e3000 	andeq	r3, lr, r0
    a18c:	02250100 	eoreq	r0, r5, #0, 2
    a190:	1ff32a04 	svcne	0x00f32a04
    a194:	2c820000 	stccs	0, cr0, [r2], {0}
    a198:	0e480000 	cdpeq	0, 4, cr0, cr8, cr0, {0}
    a19c:	26010000 	strcs	r0, [r1], -r0
    a1a0:	1eeb0402 	cdpne	4, 14, cr0, cr11, cr2, {0}
    a1a4:	482b0000 	stmdami	fp!, {}	; <UNPREDICTABLE>
    a1a8:	2d00000e 	stccs	0, cr0, [r0, #-56]	; 0xffffffc8
    a1ac:	00002001 	andeq	r2, r0, r1
    a1b0:	00002acd 	andeq	r2, r0, sp, asr #21
    a1b4:	00200d2c 	eoreq	r0, r0, ip, lsr #26
    a1b8:	36000000 	strcc	r0, [r0], -r0
    a1bc:	00002023 	andeq	r2, r0, r3, lsr #32
    a1c0:	00002d06 	andeq	r2, r0, r6, lsl #26
    a1c4:	00002d10 	andeq	r2, r0, r0, lsl sp
    a1c8:	03026501 	movweq	r6, #9473	; 0x2501
    a1cc:	e3012800 	movw	r2, #6144	; 0x1800
    a1d0:	01000025 	tsteq	r0, r5, lsr #32
    a1d4:	010601ec 	smlatteq	r6, ip, r1, r0
    a1d8:	00002df8 	strdeq	r2, [r0], -r8
    a1dc:	00002e68 	andeq	r2, r0, r8, ror #28
    a1e0:	1f629c01 	svcne	0x00629c01
    a1e4:	78370000 	ldmdavc	r7!, {}	; <UNPREDICTABLE>
    a1e8:	2f00000e 	svccs	0x0000000e
    a1ec:	3000001f 	andcc	r0, r0, pc, lsl r0
    a1f0:	fe01006a 	cdp2	0, 0, cr0, cr1, cr10, {3}
    a1f4:	00a30201 	adceq	r0, r3, r1, lsl #4
    a1f8:	2aec0000 	bcs	ffb0a200 <_estack+0xdfb05200>
    a1fc:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    a200:	000021d5 	ldrdeq	r2, [r0], -r5
    a204:	00002e0c 	andeq	r2, r0, ip, lsl #28
    a208:	00002e16 	andeq	r2, r0, r6, lsl lr
    a20c:	0201f801 	andeq	pc, r1, #65536	; 0x10000
    a210:	00001f4a 	andeq	r1, r0, sl, asr #30
    a214:	0021e439 	eoreq	lr, r1, r9, lsr r4
    a218:	f23a0000 	vhadd.s<illegal width 64>	d0, d10, d0
    a21c:	16000021 	strne	r0, [r0], -r1, lsr #32
    a220:	6000002e 	andvs	r0, r0, lr, lsr #32
    a224:	0100000e 	tsteq	r0, lr
    a228:	390201fb 	stmdbcc	r2, {r0, r1, r3, r4, r5, r6, r7, r8}
    a22c:	00002200 	andeq	r2, r0, r0, lsl #4
    a230:	223b0000 	eorscs	r0, fp, #0
    a234:	01000024 	tsteq	r0, r4, lsr #32
    a238:	380d01b5 	stmdacc	sp, {r0, r2, r4, r5, r7, r8}
    a23c:	0800002b 	stmdaeq	r0, {r0, r1, r3, r5}
    a240:	0100002c 	tsteq	r0, ip, lsr #32
    a244:	001fcc9c 	mulseq	pc, ip, ip	; <UNPREDICTABLE>
    a248:	62643000 	rsbvs	r3, r4, #0
    a24c:	01b70100 			; <UNDEFINED> instruction: 0x01b70100
    a250:	001e731a 	andseq	r7, lr, sl, lsl r3
    a254:	002aff00 	eoreq	pc, sl, r0, lsl #30
    a258:	00693400 	rsbeq	r3, r9, r0, lsl #8
    a25c:	0601b801 	streq	fp, [r1], -r1, lsl #16
    a260:	000000a3 	andeq	r0, r0, r3, lsr #1
    a264:	006c7030 	rsbeq	r7, ip, r0, lsr r0
    a268:	0901b801 	stmdbeq	r1, {r0, fp, ip, sp, pc}
    a26c:	000000a3 	andeq	r0, r0, r3, lsr #1
    a270:	00002b41 	andeq	r2, r0, r1, asr #22
    a274:	00726e30 	rsbseq	r6, r2, r0, lsr lr
    a278:	0d01b801 	stceq	8, cr11, [r1, #-4]
    a27c:	000000a3 	andeq	r0, r0, r3, lsr #1
    a280:	00002b54 	andeq	r2, r0, r4, asr fp
    a284:	00220d3a 	eoreq	r0, r2, sl, lsr sp
    a288:	002b3800 	eoreq	r3, fp, r0, lsl #16
    a28c:	000e0000 	andeq	r0, lr, r0
    a290:	01c10100 	biceq	r0, r1, r0, lsl #2
    a294:	221b3902 	andscs	r3, fp, #32768	; 0x8000
    a298:	00000000 	andeq	r0, r0, r0
    a29c:	0023673c 	eoreq	r6, r3, ip, lsr r7
    a2a0:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    a2a4:	7d3d010d 	ldfvcs	f0, [sp, #-52]!	; 0xffffffcc
    a2a8:	01000023 	tsteq	r0, r3, lsr #32
    a2ac:	080d01a0 	stmdaeq	sp, {r5, r7, r8}
    a2b0:	28000027 	stmdacs	r0, {r0, r1, r2, r5}
    a2b4:	01000027 	tsteq	r0, r7, lsr #32
    a2b8:	241c3c9c 	ldrcs	r3, [ip], #-3228	; 0xfffff364
    a2bc:	95010000 	strls	r0, [r1, #-0]
    a2c0:	33010d01 	movwcc	r0, #7425	; 0x1d01
    a2c4:	0000222a 	andeq	r2, r0, sl, lsr #4
    a2c8:	0d018001 	stceq	0, cr8, [r1, #-4]
    a2cc:	00201901 	eoreq	r1, r0, r1, lsl #18
    a2d0:	65723400 	ldrbvs	r3, [r2, #-1024]!	; 0xfffffc00
    a2d4:	01840100 	orreq	r0, r4, r0, lsl #2
    a2d8:	001e731a 	andseq	r7, lr, sl, lsl r3
    a2dc:	00693400 	rsbeq	r3, r9, r0, lsl #8
    a2e0:	06018501 	streq	r8, [r1], -r1, lsl #10
    a2e4:	000000a3 	andeq	r0, r0, r3, lsr #1
    a2e8:	22c13c00 	sbccs	r3, r1, #0, 24
    a2ec:	61010000 	mrsvs	r0, (UNDEF: 1)
    a2f0:	3e010d01 	cdpcc	13, 0, cr0, cr1, cr1, {0}
    a2f4:	00001f18 	andeq	r1, r0, r8, lsl pc
    a2f8:	010dff01 	tsteq	sp, r1, lsl #30	; <UNPREDICTABLE>
    a2fc:	001fee3f 	andseq	lr, pc, pc, lsr lr	; <UNPREDICTABLE>
    a300:	0de20100 	stfeqe	f0, [r2]
    a304:	205f0101 	subscs	r0, pc, r1, lsl #2
    a308:	63400000 	movtvs	r0, #0
    a30c:	0100646d 	tsteq	r0, sp, ror #8
    a310:	0bc026e2 	bleq	ff013ea0 <_estack+0xdf00eea0>
    a314:	e6410000 	strb	r0, [r1], -r0
    a318:	01000026 	tsteq	r0, r6, lsr #32
    a31c:	180031e2 	stmdane	r0, {r1, r5, r6, r7, r8, ip, sp}
    a320:	1d410000 	stclne	0, cr0, [r1, #-0]
    a324:	01000007 	tsteq	r0, r7
    a328:	18003ee2 	stmdane	r0, {r1, r5, r6, r7, r9, sl, fp, ip, sp}
    a32c:	3f000000 	svccc	0x00000000
    a330:	00001eeb 	andeq	r1, r0, fp, ror #29
    a334:	010dc501 	tsteq	sp, r1, lsl #10
    a338:	00209201 	eoreq	r9, r0, r1, lsl #4
    a33c:	6d634000 	stclvs	0, cr4, [r3, #-0]
    a340:	c5010064 	strgt	r0, [r1, #-100]	; 0xffffff9c
    a344:	0018001e 	andseq	r0, r8, lr, lsl r0
    a348:	65724200 	ldrbvs	r4, [r2, #-512]!	; 0xfffffe00
    a34c:	ca010073 	bgt	4a520 <__ccfg+0x2a578>
    a350:	0000a306 	andeq	sl, r0, r6, lsl #6
    a354:	6e634200 	cdpvs	2, 6, cr4, cr3, cr0, {0}
    a358:	cd010074 	stcgt	0, cr0, [r1, #-464]	; 0xfffffe30
    a35c:	0000a306 	andeq	sl, r0, r6, lsl #6
    a360:	b1430000 	mrslt	r0, (UNDEF: 67)
    a364:	03000012 	movweq	r0, #18
    a368:	01010154 	tsteq	r1, r4, asr r1
    a36c:	0020af03 	eoreq	sl, r0, r3, lsl #30
    a370:	110e4400 	tstne	lr, r0, lsl #8
    a374:	54030000 	strpl	r0, [r3], #-0
    a378:	007f1901 	rsbseq	r1, pc, r1, lsl #18
    a37c:	43000000 	movwmi	r0, #0
    a380:	000013be 			; <UNDEFINED> instruction: 0x000013be
    a384:	01011e03 	tsteq	r1, r3, lsl #28
    a388:	20cc0301 	sbccs	r0, ip, r1, lsl #6
    a38c:	0e440000 	cdpeq	0, 4, cr0, cr4, cr0, {0}
    a390:	03000011 	movweq	r0, #17
    a394:	7f17011e 	svcvc	0x0017011e
    a398:	00000000 	andeq	r0, r0, r0
    a39c:	00258443 	eoreq	r8, r5, r3, asr #8
    a3a0:	01ea0500 	mvneq	r0, r0, lsl #10
    a3a4:	61030115 	tstvs	r3, r5, lsl r1
    a3a8:	34000021 	strcc	r0, [r0], #-33	; 0xffffffdf
    a3ac:	05005370 	streq	r5, [r0, #-880]	; 0xfffffc90
    a3b0:	611401f2 			; <UNDEFINED> instruction: 0x611401f2
    a3b4:	34000021 	strcc	r0, [r0], #-33	; 0xffffffdf
    a3b8:	05004470 	streq	r4, [r0, #-1136]	; 0xfffffb90
    a3bc:	671c01f3 			; <UNDEFINED> instruction: 0x671c01f3
    a3c0:	34000021 	strcc	r0, [r0], #-33	; 0xffffffdf
    a3c4:	05003174 	streq	r3, [r0, #-372]	; 0xfffffe8c
    a3c8:	7f0d01f4 	svcvc	0x000d01f4
    a3cc:	34000000 	strcc	r0, [r0], #-0
    a3d0:	05003274 	streq	r3, [r0, #-628]	; 0xfffffd8c
    a3d4:	7f1101f4 	svcvc	0x001101f4
    a3d8:	34000000 	strcc	r0, [r0], #-0
    a3dc:	05003374 	streq	r3, [r0, #-884]	; 0xfffffc8c
    a3e0:	7f1501f4 	svcvc	0x001501f4
    a3e4:	34000000 	strcc	r0, [r0], #-0
    a3e8:	05003474 	streq	r3, [r0, #-1140]	; 0xfffffb8c
    a3ec:	7f1901f4 	svcvc	0x001901f4
    a3f0:	34000000 	strcc	r0, [r0], #-0
    a3f4:	05003574 	streq	r3, [r0, #-1396]	; 0xfffffa8c
    a3f8:	7f1d01f4 	svcvc	0x001d01f4
    a3fc:	34000000 	strcc	r0, [r0], #-0
    a400:	05003674 	streq	r3, [r0, #-1652]	; 0xfffff98c
    a404:	7f2101f4 	svcvc	0x002101f4
    a408:	34000000 	strcc	r0, [r0], #-0
    a40c:	05003774 	streq	r3, [r0, #-1908]	; 0xfffff88c
    a410:	7f2501f4 	svcvc	0x002501f4
    a414:	34000000 	strcc	r0, [r0], #-0
    a418:	05003874 	streq	r3, [r0, #-2164]	; 0xfffff78c
    a41c:	7f2901f4 	svcvc	0x002901f4
    a420:	27000000 	strcs	r0, [r0, -r0]
    a424:	000025be 			; <UNDEFINED> instruction: 0x000025be
    a428:	0d01f505 	cfstr32eq	mvfx15, [r1, #-20]	; 0xffffffec
    a42c:	0000007f 	andeq	r0, r0, pc, ror r0
    a430:	8b041100 	blhi	10e838 <__ccfg+0xee890>
    a434:	11000000 	mrsne	r0, (UNDEF: 0)
    a438:	00009704 	andeq	r9, r0, r4, lsl #14
    a43c:	23ca4500 	biccs	r4, sl, #0, 10
    a440:	2f040000 	svccs	0x00040000
    a444:	03011501 	movweq	r1, #5377	; 0x1501
    a448:	00209045 	eoreq	r9, r0, r5, asr #32
    a44c:	01220400 			; <UNDEFINED> instruction: 0x01220400
    a450:	43030115 	movwmi	r0, #12565	; 0x3115
    a454:	00001f3d 	andeq	r1, r0, sp, lsr pc
    a458:	15011104 	strne	r1, [r1, #-260]	; 0xfffffefc
    a45c:	21ad0301 			; <UNDEFINED> instruction: 0x21ad0301
    a460:	49270000 	stmdbmi	r7!, {}	; <UNPREDICTABLE>
    a464:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    a468:	840d0113 	strhi	r0, [sp], #-275	; 0xfffffeed
    a46c:	27000009 	strcs	r0, [r0, -r9]
    a470:	00002107 	andeq	r2, r0, r7, lsl #2
    a474:	0e011404 	cdpeq	4, 0, cr1, cr1, cr4, {0}
    a478:	00000bc6 	andeq	r0, r0, r6, asr #23
    a47c:	26f44500 	ldrbtcs	r4, [r4], r0, lsl #10
    a480:	0d040000 	stceq	0, cr0, [r4, #-0]
    a484:	03011501 	movweq	r1, #5377	; 0x1501
    a488:	00268d43 	eoreq	r8, r6, r3, asr #26
    a48c:	01040400 	tsteq	r4, r0, lsl #8
    a490:	d5030115 	strle	r0, [r3, #-277]	; 0xfffffeeb
    a494:	27000021 	strcs	r0, [r0, -r1, lsr #32]
    a498:	00002111 	andeq	r2, r0, r1, lsl r1
    a49c:	0e010604 	cfmadd32eq	mvax0, mvfx0, mvfx1, mvfx4
    a4a0:	00000bc6 	andeq	r0, r0, r6, asr #23
    a4a4:	236e4300 	cmncs	lr, #0, 6
    a4a8:	1d020000 	stcne	0, cr0, [r2, #-0]
    a4ac:	03010101 	movweq	r0, #4353	; 0x1101
    a4b0:	000021f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    a4b4:	00223044 	eoreq	r3, r2, r4, asr #32
    a4b8:	011d0200 	tsteq	sp, r0, lsl #4
    a4bc:	00007f19 	andeq	r7, r0, r9, lsl pc
    a4c0:	1b3f0000 	blne	fca4c8 <__ccfg+0xfaa520>
    a4c4:	02000021 	andeq	r0, r0, #33	; 0x21
    a4c8:	030101f7 	movweq	r0, #4599	; 0x11f7
    a4cc:	0000220d 	andeq	r2, r0, sp, lsl #4
    a4d0:	00223041 	eoreq	r3, r2, r1, asr #32
    a4d4:	1bf70200 	blne	ffdcacdc <_estack+0xdfdc5cdc>
    a4d8:	0000007f 	andeq	r0, r0, pc, ror r0
    a4dc:	214f3f00 	cmpcs	pc, r0, lsl #30
    a4e0:	aa020000 	bge	8a4e8 <__ccfg+0x6a540>
    a4e4:	28030101 	stmdacs	r3, {r0, r8}
    a4e8:	41000022 	tstmi	r0, r2, lsr #32
    a4ec:	00002230 	andeq	r2, r0, r0, lsr r2
    a4f0:	7f1baa02 	svcvc	0x001baa02
    a4f4:	00000000 	andeq	r0, r0, r0
    a4f8:	00250846 	eoreq	r0, r5, r6, asr #16
    a4fc:	019c0200 	orrseq	r0, ip, r0, lsl #4
    a500:	47460301 	strbmi	r0, [r6, -r1, lsl #6]
    a504:	02000027 	andeq	r0, r0, #39	; 0x27
    a508:	03010179 	movweq	r0, #4473	; 0x1179
    a50c:	00205f47 	eoreq	r5, r0, r7, asr #30
    a510:	0028b800 	eoreq	fp, r8, r0, lsl #16
    a514:	00290000 	eoreq	r0, r9, r0
    a518:	8b9c0100 	blhi	fe70a920 <_estack+0xde705920>
    a51c:	48000022 	stmdami	r0, {r1, r5}
    a520:	0000206d 	andeq	r2, r0, sp, rrx
    a524:	00002b72 	andeq	r2, r0, r2, ror fp
    a528:	0020792d 	eoreq	r7, r0, sp, lsr #18
    a52c:	002b9000 	eoreq	r9, fp, r0
    a530:	20852c00 	addcs	r2, r5, r0, lsl #24
    a534:	5f490000 	svcpl	0x00490000
    a538:	ce000020 	cdpgt	0, 0, cr0, cr0, cr0, {1}
    a53c:	d0000028 	andle	r0, r0, r8, lsr #32
    a540:	01000028 	tsteq	r0, r8, lsr #32
    a544:	6d480dc5 	stclvs	13, cr0, [r8, #-788]	; 0xfffffcec
    a548:	c4000020 	strgt	r0, [r0], #-32	; 0xffffffe0
    a54c:	2c00002b 	stccs	0, cr0, [r0], {43}	; 0x2b
    a550:	00002079 	andeq	r2, r0, r9, ror r0
    a554:	0020852c 	eoreq	r8, r0, ip, lsr #10
    a558:	47000000 	strmi	r0, [r0, -r0]
    a55c:	00001fe9 	andeq	r1, r0, r9, ror #31
    a560:	00002900 	andeq	r2, r0, r0, lsl #18
    a564:	00002924 	andeq	r2, r0, r4, lsr #18
    a568:	22b09c01 	adcscs	r9, r0, #256	; 0x100
    a56c:	e9360000 	ldmdb	r6!, {}	; <UNPREDICTABLE>
    a570:	0a00001f 	beq	a5f4 <__exidx_end+0x4bd0>
    a574:	18000029 	stmdane	r0, {r0, r3, r5}
    a578:	01000029 	tsteq	r0, r9, lsr #32
    a57c:	000d0195 	muleq	sp, r5, r1
    a580:	00201947 	eoreq	r1, r0, r7, asr #18
    a584:	00292400 	eoreq	r2, r9, r0, lsl #8
    a588:	00298000 	eoreq	r8, r9, r0
    a58c:	199c0100 	ldmibne	ip, {r8}
    a590:	4a000023 	bmi	a624 <__exidx_end+0x4c00>
    a594:	00002019 	andeq	r2, r0, r9, lsl r0
    a598:	0000292e 	andeq	r2, r0, lr, lsr #18
    a59c:	0000296a 	andeq	r2, r0, sl, ror #18
    a5a0:	0d016101 	stfeqs	f6, [r1, #-4]
    a5a4:	0022282e 	eoreq	r2, r2, lr, lsr #16
    a5a8:	00292e00 	eoreq	r2, r9, r0, lsl #28
    a5ac:	000d7000 	andeq	r7, sp, r0
    a5b0:	016f0100 	cmneq	pc, r0, lsl #2
    a5b4:	20923802 	addscs	r3, r2, r2, lsl #16
    a5b8:	29560000 	ldmdbcs	r6, {}^	; <UNPREDICTABLE>
    a5bc:	295e0000 	ldmdbcs	lr, {}^	; <UNPREDICTABLE>
    a5c0:	7a010000 	bvc	4a5c8 <__ccfg+0x2a620>
    a5c4:	23000201 	movwcs	r0, #513	; 0x201
    a5c8:	a1390000 	teqge	r9, r0
    a5cc:	00000020 	andeq	r0, r0, r0, lsr #32
    a5d0:	0020924a 	eoreq	r9, r0, sl, asr #4
    a5d4:	00295e00 	eoreq	r5, r9, r0, lsl #28
    a5d8:	00296200 	eoreq	r6, r9, r0, lsl #4
    a5dc:	017a0100 	cmneq	sl, r0, lsl #2
    a5e0:	20a13902 	adccs	r3, r1, r2, lsl #18
    a5e4:	00000000 	andeq	r0, r0, r0
    a5e8:	202c4700 	eorcs	r4, ip, r0, lsl #14
    a5ec:	29800000 	stmibcs	r0, {}	; <UNPREDICTABLE>
    a5f0:	29b80000 	ldmibcs	r8!, {}	; <UNPREDICTABLE>
    a5f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    a5f8:	00002344 	andeq	r2, r0, r4, asr #6
    a5fc:	00203a48 	eoreq	r3, r0, r8, asr #20
    a600:	002bd700 	eoreq	sp, fp, r0, lsl #14
    a604:	20464800 	subcs	r4, r6, r0, lsl #16
    a608:	2bf50000 	blcs	ffd4a610 <_estack+0xdfd45610>
    a60c:	52390000 	eorspl	r0, r9, #0
    a610:	00000020 	andeq	r0, r0, r0, lsr #32
    a614:	0020234b 	eoreq	r2, r0, fp, asr #6
    a618:	0029b800 	eoreq	fp, r9, r0, lsl #16
    a61c:	002b3800 	eoreq	r3, fp, r0, lsl #16
    a620:	2a9c0100 	bcs	fe70aa28 <_estack+0xde705a28>
    a624:	000020af 	andeq	r2, r0, pc, lsr #1
    a628:	000029b8 			; <UNDEFINED> instruction: 0x000029b8
    a62c:	00000d90 	muleq	r0, r0, sp
    a630:	02010801 	andeq	r0, r1, #65536	; 0x10000
    a634:	0000236e 	andeq	r2, r0, lr, ror #6
    a638:	0020be39 	eoreq	fp, r0, r9, lsr lr
    a63c:	af380000 	svcge	0x00380000
    a640:	c4000020 	strgt	r0, [r0], #-32	; 0xffffffe0
    a644:	c8000029 	stmdagt	r0, {r0, r3, r5}
    a648:	01000029 	tsteq	r0, r9, lsr #32
    a64c:	89020108 	stmdbhi	r2, {r3, r8}
    a650:	39000023 	stmdbcc	r0, {r0, r1, r5}
    a654:	000020be 	strheq	r2, [r0], -lr
    a658:	22322e00 	eorscs	r2, r2, #0, 28
    a65c:	29e60000 	stmibcs	r6!, {}^	; <UNPREDICTABLE>
    a660:	0da80000 	stceq	0, cr0, [r8]
    a664:	1a010000 	bne	4a66c <__ccfg+0x2a6c4>
    a668:	6d2a0201 	sfmvs	f0, 4, [sl, #-4]!
    a66c:	f4000021 	vst4.8	{d0-d3}, [r0 :128], r1
    a670:	c0000029 	andgt	r0, r0, r9, lsr #32
    a674:	0100000d 	tsteq	r0, sp
    a678:	0b020121 	bleq	8ab04 <__ccfg+0x6ab5c>
    a67c:	3a000024 	bcc	a714 <__exidx_end+0x4cf0>
    a680:	00002178 	andeq	r2, r0, r8, ror r1
    a684:	000029f4 	strdeq	r2, [r0], -r4
    a688:	00000dc0 	andeq	r0, r0, r0, asr #27
    a68c:	04013104 	streq	r3, [r1], #-260	; 0xfffffefc
    a690:	0021b838 	eoreq	fp, r1, r8, lsr r8
    a694:	0029f400 	eoreq	pc, r9, r0, lsl #8
    a698:	002a0000 	eoreq	r0, sl, r0
    a69c:	01250400 			; <UNDEFINED> instruction: 0x01250400
    a6a0:	0023df04 	eoreq	sp, r3, r4, lsl #30
    a6a4:	21c74c00 	biccs	r4, r7, r0, lsl #24
    a6a8:	041c0000 	ldreq	r0, [ip], #-0
    a6ac:	3a002100 	bcc	12ab4 <__exidx_end+0xd090>
    a6b0:	00002183 	andeq	r2, r0, r3, lsl #3
    a6b4:	00002a00 	andeq	r2, r0, r0, lsl #20
    a6b8:	00000dc8 	andeq	r0, r0, r8, asr #27
    a6bc:	04012604 	streq	r2, [r1], #-1540	; 0xfffff9fc
    a6c0:	000dc82b 	andeq	ip, sp, fp, lsr #16
    a6c4:	21924c00 	orrscs	r4, r2, r0, lsl #24
    a6c8:	03400000 	movteq	r0, #0
    a6cc:	9f4c2100 	svcls	0x004c2100
    a6d0:	bc000021 	stclt	0, cr0, [r0], {33}	; 0x21
    a6d4:	00210003 	eoreq	r0, r1, r3
    a6d8:	3a000000 	bcc	a6e0 <__exidx_end+0x4cbc>
    a6dc:	000020cc 	andeq	r2, r0, ip, asr #1
    a6e0:	00002a04 	andeq	r2, r0, r4, lsl #20
    a6e4:	00000de0 	andeq	r0, r0, r0, ror #27
    a6e8:	02012201 	andeq	r2, r1, #268435456	; 0x10000000
    a6ec:	000de02b 	andeq	lr, sp, fp, lsr #32
    a6f0:	20db2d00 	sbcscs	r2, fp, r0, lsl #26
    a6f4:	2c130000 	ldccs	0, cr0, [r3], {-0}
    a6f8:	e72d0000 	str	r0, [sp, -r0]!
    a6fc:	26000020 	strcs	r0, [r0], -r0, lsr #32
    a700:	2c00002c 	stccs	0, cr0, [r0], {44}	; 0x2c
    a704:	000020f3 	strdeq	r2, [r0], -r3
    a708:	0020ff2d 	eoreq	pc, r0, sp, lsr #30
    a70c:	002c4400 	eoreq	r4, ip, r0, lsl #8
    a710:	210b2c00 	tstcs	fp, r0, lsl #24
    a714:	172d0000 	strne	r0, [sp, -r0]!
    a718:	57000021 	strpl	r0, [r0, -r1, lsr #32]
    a71c:	2c00002c 	stccs	0, cr0, [r0], {44}	; 0x2c
    a720:	00002123 	andeq	r2, r0, r3, lsr #2
    a724:	00212f2d 	eoreq	r2, r1, sp, lsr #30
    a728:	002c6a00 	eoreq	r6, ip, r0, lsl #20
    a72c:	213b2d00 	teqcs	fp, r0, lsl #26
    a730:	2c7d0000 	ldclcs	0, cr0, [sp], #-0
    a734:	472d0000 	strmi	r0, [sp, -r0]!
    a738:	a8000021 	stmdage	r0, {r0, r5}
    a73c:	2c00002c 	stccs	0, cr0, [r0], {44}	; 0x2c
    a740:	00002153 	andeq	r2, r0, r3, asr r1
    a744:	00000000 	andeq	r0, r0, r0
    a748:	00000731 	andeq	r0, r0, r1, lsr r7
    a74c:	25db0003 	ldrbcs	r0, [fp, #3]
    a750:	01040000 	mrseq	r0, (UNDEF: 4)
    a754:	000000a3 	andeq	r0, r0, r3, lsr #1
    a758:	0027620c 	eoreq	r6, r7, ip, lsl #4
    a75c:	000df700 	andeq	pc, sp, r0, lsl #14
    a760:	000f4800 	andeq	r4, pc, r0, lsl #16
    a764:	00000000 	andeq	r0, r0, r0
    a768:	00633100 	rsbeq	r3, r3, r0, lsl #2
    a76c:	06010200 	streq	r0, [r1], -r0, lsl #4
    a770:	00000c58 	andeq	r0, r0, r8, asr ip
    a774:	66050202 	strvs	r0, [r5], -r2, lsl #4
    a778:	0200000a 	andeq	r0, r0, #10
    a77c:	07f80504 	ldrbeq	r0, [r8, r4, lsl #10]!
    a780:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    a784:	0007f305 	andeq	pc, r7, r5, lsl #6
    a788:	2a090300 	bcs	24b390 <__ccfg+0x22b3e8>
    a78c:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    a790:	00004d17 	andeq	r4, r0, r7, lsl sp
    a794:	08010200 	stmdaeq	r1, {r9}
    a798:	00000c56 	andeq	r0, r0, r6, asr ip
    a79c:	002dff03 	eoreq	pc, sp, r3, lsl #30
    a7a0:	1c310200 	lfmne	f0, 4, [r1], #-0
    a7a4:	00000060 	andeq	r0, r0, r0, rrx
    a7a8:	53070202 	movwpl	r0, #29186	; 0x7202
    a7ac:	0300000d 	movweq	r0, #13
    a7b0:	000029a1 	andeq	r2, r0, r1, lsr #19
    a7b4:	731b3402 	tstvc	fp, #33554432	; 0x2000000
    a7b8:	02000000 	andeq	r0, r0, #0
    a7bc:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
    a7c0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    a7c4:	00042307 	andeq	r2, r4, r7, lsl #6
    a7c8:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    a7cc:	00746e69 	rsbseq	r6, r4, r9, ror #28
    a7d0:	2d070402 	cfstrscs	mvf0, [r7, #-8]
    a7d4:	03000004 	movweq	r0, #4
    a7d8:	00000519 	andeq	r0, r0, r9, lsl r5
    a7dc:	9b1b2803 	blls	6d47f0 <__ccfg+0x6b4848>
    a7e0:	05000000 	streq	r0, [r0, #-0]
    a7e4:	00000b8b 	andeq	r0, r0, fp, lsl #23
    a7e8:	b3000a04 	movwlt	r0, #2564	; 0xa04
    a7ec:	06000000 	streq	r0, [r0], -r0
    a7f0:	00000868 	andeq	r0, r0, r8, ror #16
    a7f4:	000000b3 	strheq	r0, [r0], -r3
    a7f8:	07000100 	streq	r0, [r0, -r0, lsl #2]
    a7fc:	0b8d0304 	bleq	fe34b414 <_estack+0xde346414>
    a800:	63030000 	movwvs	r0, #12288	; 0x3000
    a804:	00008f18 	andeq	r8, r0, r8, lsl pc
    a808:	28e80300 	stmiacs	r8!, {r8, r9}^
    a80c:	27040000 	strcs	r0, [r4, -r0]
    a810:	00005412 	andeq	r5, r0, r2, lsl r4
    a814:	00c10800 	sbceq	r0, r1, r0, lsl #16
    a818:	af030000 	svcge	0x00030000
    a81c:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    a820:	0041112b 	subeq	r1, r1, fp, lsr #2
    a824:	d2090000 	andle	r0, r9, #0
    a828:	03000000 	movweq	r0, #0
    a82c:	0000293a 	andeq	r2, r0, sl, lsr r9
    a830:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    a834:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a838:	000000e3 	andeq	r0, r0, r3, ror #1
    a83c:	00064103 	andeq	r4, r6, r3, lsl #2
    a840:	122d0400 	eorne	r0, sp, #0, 8
    a844:	00000067 	andeq	r0, r0, r7, rrx
    a848:	000baf03 	andeq	sl, fp, r3, lsl #30
    a84c:	0f2e0400 	svceq	0x002e0400
    a850:	0000010c 	andeq	r0, r0, ip, lsl #2
    a854:	00c1040a 	sbceq	r0, r1, sl, lsl #8
    a858:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    a85c:	a0093204 	andge	r3, r9, r4, lsl #4
    a860:	0c000001 	stceq	0, cr0, [r0], {1}
    a864:	0000002b 	andeq	r0, r0, fp, lsr #32
    a868:	d2073404 	andle	r3, r7, #4, 8	; 0x4000000
    a86c:	01000000 	mrseq	r0, (UNDEF: 0)
    a870:	0c000701 	stceq	7, cr0, [r0], {1}
    a874:	00000647 	andeq	r0, r0, r7, asr #12
    a878:	d2033504 	andle	r3, r3, #4, 10	; 0x1000000
    a87c:	01000000 	mrseq	r0, (UNDEF: 0)
    a880:	0c000601 	stceq	6, cr0, [r0], {1}
    a884:	000002de 	ldrdeq	r0, [r0], -lr
    a888:	d2033604 	andle	r3, r3, #4, 12	; 0x400000
    a88c:	01000000 	mrseq	r0, (UNDEF: 0)
    a890:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    a894:	000006b2 			; <UNDEFINED> instruction: 0x000006b2
    a898:	d2033704 	andle	r3, r3, #4, 14	; 0x100000
    a89c:	01000000 	mrseq	r0, (UNDEF: 0)
    a8a0:	0c000401 	cfstrseq	mvf0, [r0], {1}
    a8a4:	00000a9a 	muleq	r0, sl, sl
    a8a8:	d2033804 	andle	r3, r3, #4, 16	; 0x40000
    a8ac:	01000000 	mrseq	r0, (UNDEF: 0)
    a8b0:	0d000004 	stceq	0, cr0, [r0, #-16]
    a8b4:	00000656 	andeq	r0, r0, r6, asr r6
    a8b8:	d2073a04 	andle	r3, r7, #4, 20	; 0x4000
    a8bc:	01000000 	mrseq	r0, (UNDEF: 0)
    a8c0:	0008f60d 	andeq	pc, r8, sp, lsl #12
    a8c4:	033c0400 	teqeq	ip, #0, 8
    a8c8:	000000d2 	ldrdeq	r0, [r0], -r2
    a8cc:	0f270d02 	svceq	0x00270d02
    a8d0:	3d040000 	stccc	0, cr0, [r4, #-0]
    a8d4:	0000d203 	andeq	sp, r0, r3, lsl #4
    a8d8:	0e0d0300 	cdpeq	3, 0, cr0, cr13, cr0, {0}
    a8dc:	04000009 	streq	r0, [r0], #-9
    a8e0:	00e3083f 	rsceq	r0, r3, pc, lsr r8
    a8e4:	00040000 	andeq	r0, r4, r0
    a8e8:	00031403 	andeq	r1, r3, r3, lsl #8
    a8ec:	03410400 	movteq	r0, #5120	; 0x1400
    a8f0:	00000112 	andeq	r0, r0, r2, lsl r1
    a8f4:	0001a009 	andeq	sl, r1, r9
    a8f8:	06b90e00 	ldrteq	r0, [r9], r0, lsl #28
    a8fc:	43040000 	movwmi	r0, #16384	; 0x4000
    a900:	0001ac1a 	andeq	sl, r1, sl, lsl ip
    a904:	0e010100 	adfeqs	f0, f1, f0
    a908:	00000197 	muleq	r0, r7, r1
    a90c:	cd0e4504 	cfstr32gt	mvfx4, [lr, #-16]
    a910:	01000001 	tsteq	r0, r1
    a914:	d3040a01 	movwle	r0, #18945	; 0x4a01
    a918:	02000001 	andeq	r0, r0, #1
    a91c:	0c5f0801 	mrrceq	8, 0, r0, pc, cr1	; <UNPREDICTABLE>
    a920:	d3080000 	movwle	r0, #32768	; 0x8000
    a924:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    a928:	0000031d 	andeq	r0, r0, sp, lsl r3
    a92c:	cd1e4504 	cfldr32gt	mvfx4, [lr, #-16]
    a930:	01000001 	tsteq	r0, r1
    a934:	05080b01 	streq	r0, [r8, #-2817]	; 0xfffff4ff
    a938:	021e098f 	andseq	r0, lr, #2342912	; 0x23c000
    a93c:	c50d0000 	strgt	r0, [sp, #-0]
    a940:	0500000c 	streq	r0, [r0, #-12]
    a944:	00670b90 	mlseq	r7, r0, fp, r0
    a948:	0d000000 	stceq	0, cr0, [r0, #-0]
    a94c:	00001062 	andeq	r1, r0, r2, rrx
    a950:	c1079105 	tstgt	r7, r5, lsl #2
    a954:	04000000 	streq	r0, [r0], #-0
    a958:	0001bc0d 	andeq	fp, r1, sp, lsl #24
    a95c:	10920500 	addsne	r0, r2, r0, lsl #10
    a960:	000000de 	ldrdeq	r0, [r0], -lr
    a964:	b9030006 	stmdblt	r3, {r1, r2}
    a968:	0500000c 	streq	r0, [r0, #-12]
    a96c:	01ed0393 			; <UNDEFINED> instruction: 0x01ed0393
    a970:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    a974:	35000002 	strcc	r0, [r0, #-2]
    a978:	10000002 	andne	r0, r0, r2
    a97c:	09380e00 	ldmdbeq	r8!, {r9, sl, fp}
    a980:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    a984:	00022a0f 	andeq	r2, r2, pc, lsl #20
    a988:	0b010100 	bleq	4ad90 <__ccfg+0x2ade8>
    a98c:	09910601 	ldmibeq	r1, {r0, r9, sl}
    a990:	0000026d 	andeq	r0, r0, sp, ror #4
    a994:	0009150c 	andeq	r1, r9, ip, lsl #10
    a998:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    a99c:	000000d2 	ldrdeq	r0, [r0], -r2
    a9a0:	00010701 	andeq	r0, r1, r1, lsl #14
    a9a4:	0005c70c 	andeq	ip, r5, ip, lsl #14
    a9a8:	03940600 	orrseq	r0, r4, #0, 12
    a9ac:	000000d2 	ldrdeq	r0, [r0], -r2
    a9b0:	00000101 	andeq	r0, r0, r1, lsl #2
    a9b4:	0aa60300 	beq	fe98b5bc <_estack+0xde9865bc>
    a9b8:	96060000 	strls	r0, [r6], -r0
    a9bc:	00024303 	andeq	r4, r2, r3, lsl #6
    a9c0:	026d0800 	rsbeq	r0, sp, #0, 16
    a9c4:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    a9c8:	89000002 	stmdbhi	r0, {r1}
    a9cc:	10000002 	andne	r0, r0, r2
    a9d0:	027e0800 	rsbseq	r0, lr, #0, 16
    a9d4:	ac0e0000 	stcge	0, cr0, [lr], {-0}
    a9d8:	06000003 	streq	r0, [r0], -r3
    a9dc:	0289179c 	addeq	r1, r9, #156, 14	; 0x2700000
    a9e0:	01010000 	mrseq	r0, (UNDEF: 1)
    a9e4:	0000cd0f 	andeq	ip, r0, pc, lsl #26
    a9e8:	0002a700 	andeq	sl, r2, r0, lsl #14
    a9ec:	08001000 	stmdaeq	r0, {ip}
    a9f0:	0000029c 	muleq	r0, ip, r2
    a9f4:	0006090e 	andeq	r0, r6, lr, lsl #18
    a9f8:	13060700 	movwne	r0, #26368	; 0x6700
    a9fc:	000002a7 	andeq	r0, r0, r7, lsr #5
    aa00:	d80e0101 	stmdale	lr, {r0, r8}
    aa04:	05000008 	streq	r0, [r0, #-8]
    aa08:	00e30ec3 	rsceq	r0, r3, r3, asr #29
    aa0c:	01010000 	mrseq	r0, (UNDEF: 1)
    aa10:	000c6d11 	andeq	r6, ip, r1, lsl sp
    aa14:	016e0800 	cmneq	lr, r0, lsl #16
    aa18:	0002d510 	andeq	sp, r2, r0, lsl r5
    aa1c:	db040a00 	blle	10d224 <__ccfg+0xed27c>
    aa20:	12000002 	andne	r0, r0, #2
    aa24:	0002e701 	andeq	lr, r2, r1, lsl #14
    aa28:	00c11300 	sbceq	r1, r1, r0, lsl #6
    aa2c:	0f000000 	svceq	0x00000000
    aa30:	000001da 	ldrdeq	r0, [r0], -sl
    aa34:	000002f2 	strdeq	r0, [r0], -r2
    aa38:	e7080010 	smlad	r8, r0, r0, r0
    aa3c:	14000002 	strne	r0, [r0], #-2
    aa40:	000009e1 	andeq	r0, r0, r1, ror #19
    aa44:	13017f08 	movwne	r7, #7944	; 0x1f08
    aa48:	000002f2 	strdeq	r0, [r0], -r2
    aa4c:	98140101 	ldmdals	r4, {r0, r8}
    aa50:	08000003 	stmdaeq	r0, {r0, r1}
    aa54:	ef140182 	svc	0x00140182
    aa58:	01000000 	mrseq	r0, (UNDEF: 0)
    aa5c:	09040b01 	stmdbeq	r4, {r0, r8, r9, fp}
    aa60:	03390908 	teqeq	r9, #8, 18	; 0x20000
    aa64:	c20d0000 	andgt	r0, sp, #0
    aa68:	09000001 	stmdbeq	r0, {r0}
    aa6c:	00c1070f 	sbceq	r0, r1, pc, lsl #14
    aa70:	0d000000 	stceq	0, cr0, [r0, #-0]
    aa74:	00000c9d 	muleq	r0, sp, ip
    aa78:	c1031009 	tstgt	r3, r9
    aa7c:	02000000 	andeq	r0, r0, #0
    aa80:	0d660300 	stcleq	3, cr0, [r6, #-0]
    aa84:	11090000 	mrsne	r0, (UNDEF: 9)
    aa88:	00031503 	andeq	r1, r3, r3, lsl #10
    aa8c:	09200b00 	stmdbeq	r0!, {r8, r9, fp}
    aa90:	03b70916 			; <UNDEFINED> instruction: 0x03b70916
    aa94:	b30d0000 	movwlt	r0, #53248	; 0xd000
    aa98:	09000004 	stmdbeq	r0, {r2}
    aa9c:	03d10817 	bicseq	r0, r1, #1507328	; 0x170000
    aaa0:	0d000000 	stceq	0, cr0, [r0, #-0]
    aaa4:	00000906 	andeq	r0, r0, r6, lsl #18
    aaa8:	ec081809 	stc	8, cr1, [r8], {9}
    aaac:	04000003 	streq	r0, [r0], #-3
    aab0:	000bc10d 	andeq	ip, fp, sp, lsl #2
    aab4:	08190900 	ldmdaeq	r9, {r8, fp}
    aab8:	00000422 	andeq	r0, r0, r2, lsr #8
    aabc:	0c950d08 	ldceq	13, cr0, [r5], {8}
    aac0:	1a090000 	bne	24aac8 <__ccfg+0x22ab20>
    aac4:	00043d08 	andeq	r3, r4, r8, lsl #26
    aac8:	5d0d0c00 	stcpl	12, cr0, [sp, #-0]
    aacc:	09000009 	stmdbeq	r0, {r0, r3}
    aad0:	0453081b 	ldrbeq	r0, [r3], #-2075	; 0xfffff7e5
    aad4:	0d100000 	ldceq	0, cr0, [r0, #-0]
    aad8:	00000a5e 	andeq	r0, r0, lr, asr sl
    aadc:	53081c09 	movwpl	r1, #35849	; 0x8c09
    aae0:	14000004 	strne	r0, [r0], #-4
    aae4:	0001a50d 	andeq	sl, r1, sp, lsl #10
    aae8:	081d0900 	ldmdaeq	sp, {r8, fp}
    aaec:	00000453 	andeq	r0, r0, r3, asr r4
    aaf0:	030b0d18 	movweq	r0, #48408	; 0xbd18
    aaf4:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    aaf8:	00008106 	andeq	r8, r0, r6, lsl #2
    aafc:	15001c00 	strne	r1, [r0, #-3072]	; 0xfffff400
    ab00:	00008101 	andeq	r8, r0, r1, lsl #2
    ab04:	0003d100 	andeq	sp, r3, r0, lsl #2
    ab08:	00811300 	addeq	r1, r1, r0, lsl #6
    ab0c:	81130000 	tsthi	r3, r0
    ab10:	13000000 	movwne	r0, #0
    ab14:	000000b5 	strheq	r0, [r0], -r5
    ab18:	b7040a00 	strlt	r0, [r4, -r0, lsl #20]
    ab1c:	15000003 	strne	r0, [r0, #-3]
    ab20:	00008101 	andeq	r8, r0, r1, lsl #2
    ab24:	0003ec00 	andeq	lr, r3, r0, lsl #24
    ab28:	00811300 	addeq	r1, r1, r0, lsl #6
    ab2c:	81130000 	tsthi	r3, r0
    ab30:	00000000 	andeq	r0, r0, r0
    ab34:	03d7040a 	bicseq	r0, r7, #167772160	; 0xa000000
    ab38:	01150000 	tsteq	r5, r0
    ab3c:	00000081 	andeq	r0, r0, r1, lsl #1
    ab40:	00000416 	andeq	r0, r0, r6, lsl r4
    ab44:	00008113 	andeq	r8, r0, r3, lsl r1
    ab48:	01001300 	mrseq	r1, LR_irq
    ab4c:	81130000 	tsthi	r3, r0
    ab50:	13000000 	movwne	r0, #0
    ab54:	00000416 	andeq	r0, r0, r6, lsl r4
    ab58:	00041c13 	andeq	r1, r4, r3, lsl ip
    ab5c:	040a0000 	streq	r0, [sl], #-0
    ab60:	00000081 	andeq	r0, r0, r1, lsl #1
    ab64:	0339040a 	teqeq	r9, #167772160	; 0xa000000
    ab68:	040a0000 	streq	r0, [sl], #-0
    ab6c:	000003f2 	strdeq	r0, [r0], -r2
    ab70:	00810115 	addeq	r0, r1, r5, lsl r1
    ab74:	043d0000 	ldrteq	r0, [sp], #-0
    ab78:	00130000 	andseq	r0, r3, r0
    ab7c:	13000001 	movwne	r0, #1
    ab80:	0000041c 	andeq	r0, r0, ip, lsl r4
    ab84:	28040a00 	stmdacs	r4, {r9, fp}
    ab88:	15000004 	strne	r0, [r0, #-4]
    ab8c:	00008101 	andeq	r8, r0, r1, lsl #2
    ab90:	00045300 	andeq	r5, r4, r0, lsl #6
    ab94:	01001300 	mrseq	r1, LR_irq
    ab98:	0a000000 	beq	aba0 <__exidx_end+0x517c>
    ab9c:	00044304 	andeq	r4, r4, r4, lsl #6
    aba0:	0d220300 	stceq	3, cr0, [r2, #-0]
    aba4:	1f090000 	svcne	0x00090000
    aba8:	00034503 	andeq	r4, r3, r3, lsl #10
    abac:	04590800 	ldrbeq	r0, [r9], #-2048	; 0xfffff800
    abb0:	70140000 	andsvc	r0, r4, r0
    abb4:	08000003 	stmdaeq	r0, {r0, r1}
    abb8:	e30e02d8 	movw	r0, #58072	; 0xe2d8
    abbc:	01000000 	mrseq	r0, (UNDEF: 0)
    abc0:	08081601 	stmdaeq	r8, {r0, r9, sl, ip}
    abc4:	a0090303 	andge	r0, r9, r3, lsl #6
    abc8:	17000004 	strne	r0, [r0, -r4]
    abcc:	00003c8e 	andeq	r3, r0, lr, lsl #25
    abd0:	07030708 	streq	r0, [r3, -r8, lsl #14]
    abd4:	000000c1 	andeq	r0, r0, r1, asr #1
    abd8:	0fba1700 	svceq	0x00ba1700
    abdc:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    abe0:	00f40803 	rscseq	r0, r4, r3, lsl #16
    abe4:	00040000 	andeq	r0, r4, r0
    abe8:	000a0411 	andeq	r0, sl, r1, lsl r4
    abec:	03090800 	movweq	r0, #38912	; 0x9800
    abf0:	00047903 	andeq	r7, r4, r3, lsl #18
    abf4:	00201800 	eoreq	r1, r0, r0, lsl #16
    abf8:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    abfc:	1008030b 	andne	r0, r8, fp, lsl #6
    ac00:	17000005 	strne	r0, [r0, -r5]
    ac04:	00001f11 	andeq	r1, r0, r1, lsl pc
    ac08:	07031408 	streq	r1, [r3, -r8, lsl #8]
    ac0c:	000000c1 	andeq	r0, r0, r1, asr #1
    ac10:	0be21700 	bleq	ff890818 <_estack+0xdf88b818>
    ac14:	15080000 	strne	r0, [r8, #-0]
    ac18:	00c10703 	sbceq	r0, r1, r3, lsl #14
    ac1c:	17020000 	strne	r0, [r2, -r0]
    ac20:	00004c7b 	andeq	r4, r0, fp, ror ip
    ac24:	0a031608 	beq	d044c <__ccfg+0xb04a4>
    ac28:	000002c8 	andeq	r0, r0, r8, asr #5
    ac2c:	47411704 	strbmi	r1, [r1, -r4, lsl #14]
    ac30:	17080000 	strne	r0, [r8, -r0]
    ac34:	00f40803 	rscseq	r0, r4, r3, lsl #16
    ac38:	17080000 	strne	r0, [r8, -r0]
    ac3c:	0000000f 	andeq	r0, r0, pc
    ac40:	0f031808 	svceq	0x00031808
    ac44:	00000510 	andeq	r0, r0, r0, lsl r5
    ac48:	0958170c 	ldmdbeq	r8, {r2, r3, r8, r9, sl, ip}^
    ac4c:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    ac50:	05201503 	streq	r1, [r0, #-1283]!	; 0xfffffafd
    ac54:	002c0000 	eoreq	r0, ip, r0
    ac58:	0004a00f 	andeq	sl, r4, pc
    ac5c:	00052000 	andeq	r2, r5, r0
    ac60:	00881900 	addeq	r1, r8, r0, lsl #18
    ac64:	00030000 	andeq	r0, r3, r0
    ac68:	04ad040a 	strteq	r0, [sp], #1034	; 0x40a
    ac6c:	d7110000 	ldrle	r0, [r1, -r0]
    ac70:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    ac74:	ad1b031c 	ldcge	3, cr0, [fp, #-112]	; 0xffffff90
    ac78:	14000004 	strne	r0, [r0], #-4
    ac7c:	00000bb7 			; <UNDEFINED> instruction: 0x00000bb7
    ac80:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    ac84:	00000542 	andeq	r0, r0, r2, asr #10
    ac88:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    ac8c:	00000526 	andeq	r0, r0, r6, lsr #10
    ac90:	0000161a 	andeq	r1, r0, sl, lsl r6
    ac94:	111a0100 	tstne	sl, r0, lsl #2
    ac98:	00000465 	andeq	r0, r0, r5, ror #8
    ac9c:	04030501 	streq	r0, [r3], #-1281	; 0xfffffaff
    aca0:	1b00005a 	blne	ae10 <__exidx_end+0x53ec>
    aca4:	000027c8 	andeq	r2, r0, r8, asr #15
    aca8:	160d1f01 	strne	r1, [sp], -r1, lsl #30
    acac:	05000004 	streq	r0, [r0, #-4]
    acb0:	00062c03 	andeq	r2, r6, r3, lsl #24
    acb4:	27b41c20 	ldrcs	r1, [r4, r0, lsr #24]!
    acb8:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    acbc:	0081010c 	addeq	r0, r1, ip, lsl #2
    acc0:	30300000 	eorscc	r0, r0, r0
    acc4:	30340000 	eorscc	r0, r4, r0
    acc8:	9c010000 	stcls	0, cr0, [r1], {-0}
    accc:	00000597 	muleq	r0, r7, r5
    acd0:	0100701d 	tsteq	r0, sp, lsl r0
    acd4:	01002258 	tsteq	r0, r8, asr r2
    acd8:	2cbb0000 	ldccs	0, cr0, [fp]
    acdc:	1c000000 	stcne	0, cr0, [r0], {-0}
    ace0:	00002773 	andeq	r2, r0, r3, ror r7
    ace4:	010c5201 	tsteq	ip, r1, lsl #4
    ace8:	00000081 	andeq	r0, r0, r1, lsl #1
    acec:	0000302c 	andeq	r3, r0, ip, lsr #32
    acf0:	00003030 	andeq	r3, r0, r0, lsr r0
    acf4:	05c19c01 	strbeq	r9, [r1, #3073]	; 0xc01
    acf8:	701d0000 	andsvc	r0, sp, r0
    acfc:	22520100 	subscs	r0, r2, #0, 2
    ad00:	00000100 	andeq	r0, r0, r0, lsl #2
    ad04:	00002cce 	andeq	r2, r0, lr, asr #25
    ad08:	279a1c00 	ldrcs	r1, [sl, r0, lsl #24]
    ad0c:	4d010000 	stcmi	0, cr0, [r1, #-0]
    ad10:	0081010c 	addeq	r0, r1, ip, lsl #2
    ad14:	30240000 	eorcc	r0, r4, r0
    ad18:	302c0000 	eorcc	r0, ip, r0
    ad1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    ad20:	000005f9 	strdeq	r0, [r0], -r9
    ad24:	0100701d 	tsteq	r0, sp, lsl r0
    ad28:	0100224d 	tsteq	r0, sp, asr #4
    ad2c:	2ce10000 	stclcs	0, cr0, [r1]
    ad30:	c11e0000 	tstgt	lr, r0
    ad34:	01000027 	tsteq	r0, r7, lsr #32
    ad38:	041c2f4d 	ldreq	r2, [ip], #-3917	; 0xfffff0b3
    ad3c:	51010000 	mrspl	r0, (UNDEF: 1)
    ad40:	27801c00 	strcs	r1, [r0, r0, lsl #24]
    ad44:	42010000 	andmi	r0, r1, #0
    ad48:	0081010c 	addeq	r0, r1, ip, lsl #2
    ad4c:	30000000 	andcc	r0, r0, r0
    ad50:	30240000 	eorcc	r0, r4, r0
    ad54:	9c010000 	stcls	0, cr0, [r1], {-0}
    ad58:	00000662 	andeq	r0, r0, r2, ror #12
    ad5c:	7968701d 	stmdbvc	r8!, {r0, r2, r3, r4, ip, sp, lr}^
    ad60:	1e420100 	dvfnes	f0, f2, f0
    ad64:	00000081 	andeq	r0, r0, r1, lsl #1
    ad68:	00002cf4 	strdeq	r2, [r0], -r4
    ad6c:	0100701d 	tsteq	r0, sp, lsl r0
    ad70:	01002b42 	tsteq	r0, r2, asr #22
    ad74:	2d120000 	ldccs	0, cr0, [r2, #-0]
    ad78:	6c1d0000 	ldcvs	0, cr0, [sp], {-0}
    ad7c:	01006e65 	tsteq	r0, r5, ror #28
    ad80:	00813242 	addeq	r3, r1, r2, asr #4
    ad84:	2d250000 	stccs	0, cr0, [r5, #-0]
    ad88:	731d0000 	tstvc	sp, #0
    ad8c:	01007365 	tsteq	r0, r5, ror #6
    ad90:	04163c42 	ldreq	r3, [r6], #-3138	; 0xfffff3be
    ad94:	2d380000 	ldccs	0, cr0, [r8, #-0]
    ad98:	c11e0000 	tstgt	lr, r0
    ad9c:	01000027 	tsteq	r0, r7, lsr #32
    ada0:	041c1743 	ldreq	r1, [ip], #-1859	; 0xfffff8bd
    ada4:	91020000 	mrsls	r0, (UNDEF: 2)
    ada8:	a71c0000 	ldrge	r0, [ip, -r0]
    adac:	01000027 	tsteq	r0, r7, lsr #32
    adb0:	81010c37 	tsthi	r1, r7, lsr ip
    adb4:	dc000000 	stcle	0, cr0, [r0], {-0}
    adb8:	0000002f 	andeq	r0, r0, pc, lsr #32
    adbc:	01000030 	tsteq	r0, r0, lsr r0
    adc0:	00069b9c 	muleq	r6, ip, fp
    adc4:	68701d00 	ldmdavs	r0!, {r8, sl, fp, ip}^
    adc8:	37010079 	smlsdxcc	r1, r9, r0, r0
    adcc:	0000811e 	andeq	r8, r0, lr, lsl r1
    add0:	002d4b00 	eoreq	r4, sp, r0, lsl #22
    add4:	64661f00 	strbtvs	r1, [r6], #-3840	; 0xfffff100
    add8:	27370100 	ldrcs	r0, [r7, -r0, lsl #2]!
    addc:	00000081 	andeq	r0, r0, r1, lsl #1
    ade0:	20005101 	andcs	r5, r0, r1, lsl #2
    ade4:	0000278d 	andeq	r2, r0, sp, lsl #15
    ade8:	010c2101 	tsteq	ip, r1, lsl #2
    adec:	00000081 	andeq	r0, r0, r1, lsl #1
    adf0:	0006db01 	andeq	sp, r6, r1, lsl #22
    adf4:	68702100 	ldmdavs	r0!, {r8, sp}^
    adf8:	21010079 	tstcs	r1, r9, ror r0
    adfc:	0000811e 	andeq	r8, r0, lr, lsl r1
    ae00:	64662100 	strbtvs	r2, [r6], #-256	; 0xffffff00
    ae04:	27210100 	strcs	r0, [r1, -r0, lsl #2]!
    ae08:	00000081 	andeq	r0, r0, r1, lsl #1
    ae0c:	00189c22 	andseq	r9, r8, r2, lsr #24
    ae10:	33210100 			; <UNDEFINED> instruction: 0x33210100
    ae14:	000000b5 	strheq	r0, [r0], -r5
    ae18:	01006923 	tsteq	r0, r3, lsr #18
    ae1c:	00810625 	addeq	r0, r1, r5, lsr #12
    ae20:	24000000 	strcs	r0, [r0], #-0
    ae24:	0000069b 	muleq	r0, fp, r6
    ae28:	00003034 	andeq	r3, r0, r4, lsr r0
    ae2c:	0000307c 	andeq	r3, r0, ip, ror r0
    ae30:	ad259c01 	stcge	12, cr9, [r5, #-4]!
    ae34:	69000006 	stmdbvs	r0, {r1, r2}
    ae38:	2500002d 	strcs	r0, [r0, #-45]	; 0xffffffd3
    ae3c:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
    ae40:	00002d87 	andeq	r2, r0, r7, lsl #27
    ae44:	0006c425 	andeq	ip, r6, r5, lsr #8
    ae48:	002da500 	eoreq	sl, sp, r0, lsl #10
    ae4c:	06d02600 	ldrbeq	r2, [r0], r0, lsl #12
    ae50:	9b270000 	blls	9cae58 <__ccfg+0x9aaeb0>
    ae54:	6a000006 	bvs	ae74 <__exidx_end+0x5450>
    ae58:	7c000030 	stcvc	0, cr0, [r0], {48}	; 0x30
    ae5c:	01000030 	tsteq	r0, r0, lsr r0
    ae60:	ad280c21 	stcge	12, cr0, [r8, #-132]!	; 0xffffff7c
    ae64:	01000006 	tsteq	r0, r6
    ae68:	06b92855 	ssateq	r2, #26, r5, asr #16
    ae6c:	56010000 	strpl	r0, [r1], -r0
    ae70:	0006c429 	andeq	ip, r6, r9, lsr #8
    ae74:	06d02600 	ldrbeq	r2, [r0], r0, lsl #12
    ae78:	00000000 	andeq	r0, r0, r0
    ae7c:	00042d00 	andeq	r2, r4, r0, lsl #26
    ae80:	0d000300 	stceq	3, cr0, [r0, #-0]
    ae84:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    ae88:	0000a301 	andeq	sl, r0, r1, lsl #6
    ae8c:	27d80c00 	ldrbcs	r0, [r8, r0, lsl #24]
    ae90:	0df70000 	ldcleq	0, cr0, [r7]
    ae94:	0f980000 	svceq	0x00980000
    ae98:	00000000 	andeq	r0, r0, r0
    ae9c:	65e00000 	strbvs	r0, [r0, #0]!
    aea0:	01020000 	mrseq	r0, (UNDEF: 2)
    aea4:	000c5806 	andeq	r5, ip, r6, lsl #16
    aea8:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    aeac:	00000a66 	andeq	r0, r0, r6, ror #20
    aeb0:	f8050402 			; <UNDEFINED> instruction: 0xf8050402
    aeb4:	02000007 	andeq	r0, r0, #7
    aeb8:	07f30508 	ldrbeq	r0, [r3, r8, lsl #10]!
    aebc:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    aec0:	0200002a 	andeq	r0, r0, #42	; 0x2a
    aec4:	004d182e 	subeq	r1, sp, lr, lsr #16
    aec8:	01020000 	mrseq	r0, (UNDEF: 2)
    aecc:	000c5608 	andeq	r5, ip, r8, lsl #12
    aed0:	2dff0300 	ldclcs	3, cr0, [pc]	; aed8 <__exidx_end+0x54b4>
    aed4:	31020000 	mrscc	r0, (UNDEF: 2)
    aed8:	00006019 	andeq	r6, r0, r9, lsl r0
    aedc:	07020200 	streq	r0, [r2, -r0, lsl #4]
    aee0:	00000d53 	andeq	r0, r0, r3, asr sp
    aee4:	0029a103 	eoreq	sl, r9, r3, lsl #2
    aee8:	19340200 	ldmdbne	r4!, {r9}
    aeec:	00000073 	andeq	r0, r0, r3, ror r0
    aef0:	28070402 	stmdacs	r7, {r1, sl}
    aef4:	02000004 	andeq	r0, r0, #4
    aef8:	04230708 	strteq	r0, [r3], #-1800	; 0xfffff8f8
    aefc:	04040000 	streq	r0, [r4], #-0
    af00:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    af04:	07040200 	streq	r0, [r4, -r0, lsl #4]
    af08:	0000042d 	andeq	r0, r0, sp, lsr #8
    af0c:	0028e803 	eoreq	lr, r8, r3, lsl #16
    af10:	12270300 	eorne	r0, r7, #0, 6
    af14:	00000054 	andeq	r0, r0, r4, asr r0
    af18:	00008f05 	andeq	r8, r0, r5, lsl #30
    af1c:	1daf0300 	stcne	3, cr0, [pc]	; af24 <__exidx_end+0x5500>
    af20:	2b030000 	blcs	caf28 <__ccfg+0xaaf80>
    af24:	00004112 	andeq	r4, r0, r2, lsl r1
    af28:	00a00600 	adceq	r0, r0, r0, lsl #12
    af2c:	3a030000 	bcc	caf34 <__ccfg+0xaaf8c>
    af30:	03000029 	movweq	r0, #41	; 0x29
    af34:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    af38:	b1050000 	mrslt	r0, (UNDEF: 5)
    af3c:	03000000 	movweq	r0, #0
    af40:	00000641 	andeq	r0, r0, r1, asr #12
    af44:	67122d03 	ldrvs	r2, [r2, -r3, lsl #26]
    af48:	07000000 	streq	r0, [r0, -r0]
    af4c:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    af50:	0000015c 	andeq	r0, r0, ip, asr r1
    af54:	00002b08 	andeq	r2, r0, r8, lsl #22
    af58:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    af5c:	000000a0 	andeq	r0, r0, r0, lsr #1
    af60:	00070101 	andeq	r0, r7, r1, lsl #2
    af64:	00064708 	andeq	r4, r6, r8, lsl #14
    af68:	03350300 	teqeq	r5, #0, 6
    af6c:	000000a0 	andeq	r0, r0, r0, lsr #1
    af70:	00060101 	andeq	r0, r6, r1, lsl #2
    af74:	0002de08 	andeq	sp, r2, r8, lsl #28
    af78:	03360300 	teqeq	r6, #0, 6
    af7c:	000000a0 	andeq	r0, r0, r0, lsr #1
    af80:	00050101 	andeq	r0, r5, r1, lsl #2
    af84:	0006b208 	andeq	fp, r6, r8, lsl #4
    af88:	03370300 	teqeq	r7, #0, 6
    af8c:	000000a0 	andeq	r0, r0, r0, lsr #1
    af90:	00040101 	andeq	r0, r4, r1, lsl #2
    af94:	000a9a08 	andeq	r9, sl, r8, lsl #20
    af98:	03380300 	teqeq	r8, #0, 6
    af9c:	000000a0 	andeq	r0, r0, r0, lsr #1
    afa0:	00000401 	andeq	r0, r0, r1, lsl #8
    afa4:	00065609 	andeq	r5, r6, r9, lsl #12
    afa8:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    afac:	000000a0 	andeq	r0, r0, r0, lsr #1
    afb0:	08f60901 	ldmeq	r6!, {r0, r8, fp}^
    afb4:	3c030000 	stccc	0, cr0, [r3], {-0}
    afb8:	0000a003 	andeq	sl, r0, r3
    afbc:	27090200 	strcs	r0, [r9, -r0, lsl #4]
    afc0:	0300000f 	movweq	r0, #15
    afc4:	00a0033d 	adceq	r0, r0, sp, lsr r3
    afc8:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    afcc:	0000090e 	andeq	r0, r0, lr, lsl #18
    afd0:	b1083f03 	tstlt	r8, r3, lsl #30
    afd4:	04000000 	streq	r0, [r0], #-0
    afd8:	03140300 	tsteq	r4, #0, 6
    afdc:	41030000 	mrsmi	r0, (UNDEF: 3)
    afe0:	0000ce03 	andeq	ip, r0, r3, lsl #28
    afe4:	015c0600 	cmpeq	ip, r0, lsl #12
    afe8:	b90a0000 	stmdblt	sl, {}	; <UNPREDICTABLE>
    afec:	03000006 	movweq	r0, #6
    aff0:	01681a43 	cmneq	r8, r3, asr #20
    aff4:	01010000 	mrseq	r0, (UNDEF: 1)
    aff8:	0001970a 	andeq	r9, r1, sl, lsl #14
    affc:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    b000:	00000189 	andeq	r0, r0, r9, lsl #3
    b004:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    b008:	0000018f 	andeq	r0, r0, pc, lsl #3
    b00c:	5f080102 	svcpl	0x00080102
    b010:	0500000c 	streq	r0, [r0, #-12]
    b014:	0000018f 	andeq	r0, r0, pc, lsl #3
    b018:	00031d0a 	andeq	r1, r3, sl, lsl #26
    b01c:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    b020:	00000189 	andeq	r0, r0, r9, lsl #3
    b024:	08070101 	stmdaeq	r7, {r0, r8}
    b028:	da098f04 	ble	26ec40 <__ccfg+0x24ec98>
    b02c:	09000001 	stmdbeq	r0, {r0}
    b030:	00000cc5 	andeq	r0, r0, r5, asr #25
    b034:	670b9004 	strvs	r9, [fp, -r4]
    b038:	00000000 	andeq	r0, r0, r0
    b03c:	00106209 	andseq	r6, r0, r9, lsl #4
    b040:	08910400 	ldmeq	r1, {sl}
    b044:	0000008f 	andeq	r0, r0, pc, lsl #1
    b048:	01bc0904 			; <UNDEFINED> instruction: 0x01bc0904
    b04c:	92040000 	andls	r0, r4, #0
    b050:	0000ac10 	andeq	sl, r0, r0, lsl ip
    b054:	03000600 	movweq	r0, #1536	; 0x600
    b058:	00000cb9 			; <UNDEFINED> instruction: 0x00000cb9
    b05c:	a9039304 	stmdbge	r3, {r2, r8, r9, ip, pc}
    b060:	0c000001 	stceq	0, cr0, [r0], {1}
    b064:	000001da 	ldrdeq	r0, [r0], -sl
    b068:	000001f1 	strdeq	r0, [r0], -r1
    b06c:	380a000d 	stmdacc	sl, {r0, r2, r3}
    b070:	04000009 	streq	r0, [r0], #-9
    b074:	01e60f99 	strexheq	r0, r9, [r6]
    b078:	01010000 	mrseq	r0, (UNDEF: 1)
    b07c:	91050107 	tstls	r5, r7, lsl #2
    b080:	00022909 	andeq	r2, r2, r9, lsl #18
    b084:	09150800 	ldmdbeq	r5, {fp}
    b088:	93050000 	movwls	r0, #20480	; 0x5000
    b08c:	0000a007 	andeq	sl, r0, r7
    b090:	01070100 	mrseq	r0, (UNDEF: 23)
    b094:	05c70800 	strbeq	r0, [r7, #2048]	; 0x800
    b098:	94050000 	strls	r0, [r5], #-0
    b09c:	0000a003 	andeq	sl, r0, r3
    b0a0:	00010100 	andeq	r0, r1, r0, lsl #2
    b0a4:	a6030000 	strge	r0, [r3], -r0
    b0a8:	0500000a 	streq	r0, [r0, #-10]
    b0ac:	01ff0396 			; <UNDEFINED> instruction: 0x01ff0396
    b0b0:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
    b0b4:	0c000002 	stceq	0, cr0, [r0], {2}
    b0b8:	00000235 	andeq	r0, r0, r5, lsr r2
    b0bc:	00000245 	andeq	r0, r0, r5, asr #4
    b0c0:	3a05000d 	bcc	14b0fc <__ccfg+0x12b154>
    b0c4:	0a000002 	beq	b0d4 <__exidx_end+0x56b0>
    b0c8:	000003ac 	andeq	r0, r0, ip, lsr #7
    b0cc:	45179c05 	ldrmi	r9, [r7, #-3077]	; 0xfffff3fb
    b0d0:	01000002 	tsteq	r0, r2
    b0d4:	009b0c01 	addseq	r0, fp, r1, lsl #24
    b0d8:	02630000 	rsbeq	r0, r3, #0
    b0dc:	000d0000 	andeq	r0, sp, r0
    b0e0:	00025805 	andeq	r5, r2, r5, lsl #16
    b0e4:	06090a00 	streq	r0, [r9], -r0, lsl #20
    b0e8:	06060000 	streq	r0, [r6], -r0
    b0ec:	00026313 	andeq	r6, r2, r3, lsl r3
    b0f0:	0a010100 	beq	4b4f8 <__ccfg+0x2b550>
    b0f4:	000008d8 	ldrdeq	r0, [r0], -r8
    b0f8:	b10ec304 	tstlt	lr, r4, lsl #6
    b0fc:	01000000 	mrseq	r0, (UNDEF: 0)
    b100:	0c6d0e01 	stcleq	14, cr0, [sp], #-4
    b104:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    b108:	02911001 	addseq	r1, r1, #1
    b10c:	040b0000 	streq	r0, [fp], #-0
    b110:	00000297 	muleq	r0, r7, r2
    b114:	02a3010f 	adceq	r0, r3, #-1073741821	; 0xc0000003
    b118:	8f100000 	svchi	0x00100000
    b11c:	00000000 	andeq	r0, r0, r0
    b120:	0001960c 	andeq	r9, r1, ip, lsl #12
    b124:	0002ae00 	andeq	sl, r2, r0, lsl #28
    b128:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    b12c:	000002a3 	andeq	r0, r0, r3, lsr #5
    b130:	0009e111 	andeq	lr, r9, r1, lsl r1
    b134:	017f0700 	cmneq	pc, r0, lsl #14
    b138:	0002ae16 	andeq	sl, r2, r6, lsl lr
    b13c:	11010100 	mrsne	r0, (UNDEF: 17)
    b140:	00000398 	muleq	r0, r8, r3
    b144:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    b148:	000000bd 	strheq	r0, [r0], -sp
    b14c:	70110101 	andsvc	r0, r1, r1, lsl #2
    b150:	07000003 	streq	r0, [r0, -r3]
    b154:	b10e02d8 	ldrdlt	r0, [lr, -r8]
    b158:	01000000 	mrseq	r0, (UNDEF: 0)
    b15c:	07081201 	streq	r1, [r8, -r1, lsl #4]
    b160:	07090303 	streq	r0, [r9, -r3, lsl #6]
    b164:	13000003 	movwne	r0, #3
    b168:	00003c8e 	andeq	r3, r0, lr, lsl #25
    b16c:	07030707 	streq	r0, [r3, -r7, lsl #14]
    b170:	0000008f 	andeq	r0, r0, pc, lsl #1
    b174:	0fba1300 	svceq	0x00ba1300
    b178:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    b17c:	00c20803 	sbceq	r0, r2, r3, lsl #16
    b180:	00040000 	andeq	r0, r4, r0
    b184:	000a040e 	andeq	r0, sl, lr, lsl #8
    b188:	03090700 	movweq	r0, #38656	; 0x9700
    b18c:	0002e003 	andeq	lr, r2, r3
    b190:	00201400 	eoreq	r1, r0, r0, lsl #8
    b194:	07300000 	ldreq	r0, [r0, -r0]!
    b198:	7708030b 	strvc	r0, [r8, -fp, lsl #6]
    b19c:	13000003 	movwne	r0, #3
    b1a0:	00001f11 	andeq	r1, r0, r1, lsl pc
    b1a4:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    b1a8:	0000008f 	andeq	r0, r0, pc, lsl #1
    b1ac:	0be21300 	bleq	ff88fdb4 <_estack+0xdf88adb4>
    b1b0:	15070000 	strne	r0, [r7, #-0]
    b1b4:	008f0803 	addeq	r0, pc, r3, lsl #16
    b1b8:	13020000 	movwne	r0, #8192	; 0x2000
    b1bc:	00004c7b 	andeq	r4, r0, fp, ror ip
    b1c0:	0b031607 	bleq	d09e4 <__ccfg+0xb0a3c>
    b1c4:	00000284 	andeq	r0, r0, r4, lsl #5
    b1c8:	47411304 	strbmi	r1, [r1, -r4, lsl #6]
    b1cc:	17070000 	strne	r0, [r7, -r0]
    b1d0:	00c20903 	sbceq	r0, r2, r3, lsl #18
    b1d4:	13080000 	movwne	r0, #32768	; 0x8000
    b1d8:	0000000f 	andeq	r0, r0, pc
    b1dc:	0f031807 	svceq	0x00031807
    b1e0:	00000377 	andeq	r0, r0, r7, ror r3
    b1e4:	0958130c 	ldmdbeq	r8, {r2, r3, r8, r9, ip}^
    b1e8:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    b1ec:	03871503 	orreq	r1, r7, #12582912	; 0xc00000
    b1f0:	002c0000 	eoreq	r0, ip, r0
    b1f4:	0003070c 	andeq	r0, r3, ip, lsl #14
    b1f8:	00038700 	andeq	r8, r3, r0, lsl #14
    b1fc:	00881500 	addeq	r1, r8, r0, lsl #10
    b200:	00030000 	andeq	r0, r3, r0
    b204:	0314040b 	tsteq	r4, #184549376	; 0xb000000
    b208:	d70e0000 	strle	r0, [lr, -r0]
    b20c:	0700000b 	streq	r0, [r0, -fp]
    b210:	141b031c 	ldrne	r0, [fp], #-796	; 0xfffffce4
    b214:	11000003 	tstne	r0, r3
    b218:	00000bb7 			; <UNDEFINED> instruction: 0x00000bb7
    b21c:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    b220:	000003a9 	andeq	r0, r0, r9, lsr #7
    b224:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    b228:	0000038d 	andeq	r0, r0, sp, lsl #7
    b22c:	281d0116 	ldmdacs	sp, {r1, r2, r4, r8}
    b230:	1d010000 	stcne	0, cr0, [r1, #-0]
    b234:	307c0101 	rsbscc	r0, ip, r1, lsl #2
    b238:	30ec0000 	rsccc	r0, ip, r0
    b23c:	9c010000 	stcls	0, cr0, [r1], {-0}
    b240:	0000042a 	andeq	r0, r0, sl, lsr #8
    b244:	000c2e17 	andeq	r2, ip, r7, lsl lr
    b248:	011d0100 	tsteq	sp, r0, lsl #2
    b24c:	0000008f 	andeq	r0, r0, pc, lsl #1
    b250:	00002dc3 	andeq	r2, r0, r3, asr #27
    b254:	00474118 	subeq	r4, r7, r8, lsl r1
    b258:	011d0100 	tsteq	sp, r0, lsl #2
    b25c:	0000042a 	andeq	r0, r0, sl, lsr #8
    b260:	00002dec 	andeq	r2, r0, ip, ror #27
    b264:	00282919 	eoreq	r2, r8, r9, lsl r9
    b268:	01300100 	teqeq	r0, r0, lsl #2
    b26c:	000f801a 	andeq	r8, pc, sl, lsl r0	; <UNPREDICTABLE>
    b270:	74701b00 	ldrbtvc	r1, [r0], #-2816	; 0xfffff500
    b274:	22010072 	andcs	r0, r1, #114	; 0x72
    b278:	00042a15 	andeq	r2, r4, r5, lsl sl
    b27c:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    b280:	1b200006 	blne	80b2a0 <__ccfg+0x7eb2f8>
    b284:	006e656c 	rsbeq	r6, lr, ip, ror #10
    b288:	810d2301 	tsthi	sp, r1, lsl #6
    b28c:	05000000 	streq	r0, [r0, #-0]
    b290:	00063003 	andeq	r3, r6, r3
    b294:	27d21820 	ldrbcs	r1, [r2, r0, lsr #16]
    b298:	24010000 	strcs	r0, [r1], #-0
    b29c:	00008106 	andeq	r8, r0, r6, lsl #2
    b2a0:	002e1600 	eoreq	r1, lr, r0, lsl #12
    b2a4:	0b000000 	bleq	b2ac <__exidx_end+0x5888>
    b2a8:	00019604 	andeq	r9, r1, r4, lsl #12
    b2ac:	04400000 	strbeq	r0, [r0], #-0
    b2b0:	00030000 	andeq	r0, r3, r0
    b2b4:	00002981 	andeq	r2, r0, r1, lsl #19
    b2b8:	00a30104 	adceq	r0, r3, r4, lsl #2
    b2bc:	3f0c0000 	svccc	0x000c0000
    b2c0:	f7000028 			; <UNDEFINED> instruction: 0xf7000028
    b2c4:	c800000d 	stmdagt	r0, {r0, r2, r3}
    b2c8:	0000000f 	andeq	r0, r0, pc
    b2cc:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    b2d0:	02000067 	andeq	r0, r0, #103	; 0x67
    b2d4:	0c580601 	mrrceq	6, 0, r0, r8, cr1
    b2d8:	02020000 	andeq	r0, r2, #0
    b2dc:	000a6605 	andeq	r6, sl, r5, lsl #12
    b2e0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    b2e4:	000007f8 	strdeq	r0, [r0], -r8
    b2e8:	f3050802 	vsub.i8	d0, d5, d2
    b2ec:	03000007 	movweq	r0, #7
    b2f0:	00002a09 	andeq	r2, r0, r9, lsl #20
    b2f4:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    b2f8:	02000000 	andeq	r0, r0, #0
    b2fc:	0c560801 	mrrceq	8, 0, r0, r6, cr1
    b300:	ff030000 			; <UNDEFINED> instruction: 0xff030000
    b304:	0200002d 	andeq	r0, r0, #45	; 0x2d
    b308:	00601931 	rsbeq	r1, r0, r1, lsr r9
    b30c:	02020000 	andeq	r0, r2, #0
    b310:	000d5307 	andeq	r5, sp, r7, lsl #6
    b314:	29a10300 	stmibcs	r1!, {r8, r9}
    b318:	34020000 	strcc	r0, [r2], #-0
    b31c:	00007319 	andeq	r7, r0, r9, lsl r3
    b320:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b324:	00000428 	andeq	r0, r0, r8, lsr #8
    b328:	23070802 	movwcs	r0, #30722	; 0x7802
    b32c:	04000004 	streq	r0, [r0], #-4
    b330:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    b334:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    b338:	00042d07 	andeq	r2, r4, r7, lsl #26
    b33c:	28e80300 	stmiacs	r8!, {r8, r9}^
    b340:	27030000 	strcs	r0, [r3, -r0]
    b344:	00005412 	andeq	r5, r0, r2, lsl r4
    b348:	008f0500 	addeq	r0, pc, r0, lsl #10
    b34c:	af030000 	svcge	0x00030000
    b350:	0300001d 	movweq	r0, #29
    b354:	0041122b 	subeq	r1, r1, fp, lsr #4
    b358:	a0060000 	andge	r0, r6, r0
    b35c:	03000000 	movweq	r0, #0
    b360:	0000293a 	andeq	r2, r0, sl, lsr r9
    b364:	67122c03 	ldrvs	r2, [r2, -r3, lsl #24]
    b368:	05000000 	streq	r0, [r0, #-0]
    b36c:	000000b1 	strheq	r0, [r0], -r1
    b370:	00064103 	andeq	r4, r6, r3, lsl #2
    b374:	122d0300 	eorne	r0, sp, #0, 6
    b378:	00000067 	andeq	r0, r0, r7, rrx
    b37c:	000baf03 	andeq	sl, fp, r3, lsl #30
    b380:	102e0300 	eorne	r0, lr, r0, lsl #6
    b384:	000000da 	ldrdeq	r0, [r0], -sl
    b388:	008f0407 	addeq	r0, pc, r7, lsl #8
    b38c:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    b390:	6e093203 	cdpvs	2, 0, cr3, cr9, cr3, {0}
    b394:	09000001 	stmdbeq	r0, {r0}
    b398:	0000002b 	andeq	r0, r0, fp, lsr #32
    b39c:	a0073403 	andge	r3, r7, r3, lsl #8
    b3a0:	01000000 	mrseq	r0, (UNDEF: 0)
    b3a4:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
    b3a8:	00000647 	andeq	r0, r0, r7, asr #12
    b3ac:	a0033503 	andge	r3, r3, r3, lsl #10
    b3b0:	01000000 	mrseq	r0, (UNDEF: 0)
    b3b4:	09000601 	stmdbeq	r0, {r0, r9, sl}
    b3b8:	000002de 	ldrdeq	r0, [r0], -lr
    b3bc:	a0033603 	andge	r3, r3, r3, lsl #12
    b3c0:	01000000 	mrseq	r0, (UNDEF: 0)
    b3c4:	09000501 	stmdbeq	r0, {r0, r8, sl}
    b3c8:	000006b2 			; <UNDEFINED> instruction: 0x000006b2
    b3cc:	a0033703 	andge	r3, r3, r3, lsl #14
    b3d0:	01000000 	mrseq	r0, (UNDEF: 0)
    b3d4:	09000401 	stmdbeq	r0, {r0, sl}
    b3d8:	00000a9a 	muleq	r0, sl, sl
    b3dc:	a0033803 	andge	r3, r3, r3, lsl #16
    b3e0:	01000000 	mrseq	r0, (UNDEF: 0)
    b3e4:	0a000004 	beq	b3fc <__exidx_end+0x59d8>
    b3e8:	00000656 	andeq	r0, r0, r6, asr r6
    b3ec:	a0073a03 	andge	r3, r7, r3, lsl #20
    b3f0:	01000000 	mrseq	r0, (UNDEF: 0)
    b3f4:	0008f60a 	andeq	pc, r8, sl, lsl #12
    b3f8:	033c0300 	teqeq	ip, #0, 6
    b3fc:	000000a0 	andeq	r0, r0, r0, lsr #1
    b400:	0f270a02 	svceq	0x00270a02
    b404:	3d030000 	stccc	0, cr0, [r3, #-0]
    b408:	0000a003 	andeq	sl, r0, r3
    b40c:	0e0a0300 	cdpeq	3, 0, cr0, cr10, cr0, {0}
    b410:	03000009 	movweq	r0, #9
    b414:	00b1083f 	adcseq	r0, r1, pc, lsr r8
    b418:	00040000 	andeq	r0, r4, r0
    b41c:	00031403 	andeq	r1, r3, r3, lsl #8
    b420:	03410300 	movteq	r0, #4864	; 0x1300
    b424:	000000e0 	andeq	r0, r0, r0, ror #1
    b428:	00016e06 	andeq	r6, r1, r6, lsl #28
    b42c:	06b90b00 	ldrteq	r0, [r9], r0, lsl #22
    b430:	43030000 	movwmi	r0, #12288	; 0x3000
    b434:	00017a1a 	andeq	r7, r1, sl, lsl sl
    b438:	0b010100 	bleq	4b840 <__ccfg+0x2b898>
    b43c:	00000197 	muleq	r0, r7, r1
    b440:	9b0e4503 	blls	39c854 <__ccfg+0x37c8ac>
    b444:	01000001 	tsteq	r0, r1
    b448:	a1040701 	tstge	r4, r1, lsl #14
    b44c:	02000001 	andeq	r0, r0, #1
    b450:	0c5f0801 	mrrceq	8, 0, r0, pc, cr1	; <UNPREDICTABLE>
    b454:	a1050000 	mrsge	r0, (UNDEF: 5)
    b458:	0b000001 	bleq	b464 <__exidx_end+0x5a40>
    b45c:	0000031d 	andeq	r0, r0, sp, lsl r3
    b460:	9b1e4503 	blls	79c874 <__ccfg+0x77c8cc>
    b464:	01000001 	tsteq	r0, r1
    b468:	04080801 	streq	r0, [r8], #-2049	; 0xfffff7ff
    b46c:	01ec098f 	mvneq	r0, pc, lsl #19
    b470:	c50a0000 	strgt	r0, [sl, #-0]
    b474:	0400000c 	streq	r0, [r0], #-12
    b478:	00670b90 	mlseq	r7, r0, fp, r0
    b47c:	0a000000 	beq	b484 <__exidx_end+0x5a60>
    b480:	00001062 	andeq	r1, r0, r2, rrx
    b484:	8f089104 	svchi	0x00089104
    b488:	04000000 	streq	r0, [r0], #-0
    b48c:	0001bc0a 	andeq	fp, r1, sl, lsl #24
    b490:	10920400 	addsne	r0, r2, r0, lsl #8
    b494:	000000ac 	andeq	r0, r0, ip, lsr #1
    b498:	b9030006 	stmdblt	r3, {r1, r2}
    b49c:	0400000c 	streq	r0, [r0], #-12
    b4a0:	01bb0393 			; <UNDEFINED> instruction: 0x01bb0393
    b4a4:	ec0c0000 	stc	0, cr0, [ip], {-0}
    b4a8:	03000001 	movweq	r0, #1
    b4ac:	0d000002 	stceq	0, cr0, [r0, #-8]
    b4b0:	09380b00 	ldmdbeq	r8!, {r8, r9, fp}
    b4b4:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    b4b8:	0001f80f 	andeq	pc, r1, pc, lsl #16
    b4bc:	08010100 	stmdaeq	r1, {r8}
    b4c0:	09910501 	ldmibeq	r1, {r0, r8, sl}
    b4c4:	0000023b 	andeq	r0, r0, fp, lsr r2
    b4c8:	00091509 	andeq	r1, r9, r9, lsl #10
    b4cc:	07930500 	ldreq	r0, [r3, r0, lsl #10]
    b4d0:	000000a0 	andeq	r0, r0, r0, lsr #1
    b4d4:	00010701 	andeq	r0, r1, r1, lsl #14
    b4d8:	0005c709 	andeq	ip, r5, r9, lsl #14
    b4dc:	03940500 	orrseq	r0, r4, #0, 10
    b4e0:	000000a0 	andeq	r0, r0, r0, lsr #1
    b4e4:	00000101 	andeq	r0, r0, r1, lsl #2
    b4e8:	0aa60300 	beq	fe98c0f0 <_estack+0xde9870f0>
    b4ec:	96050000 	strls	r0, [r5], -r0
    b4f0:	00021103 	andeq	r1, r2, r3, lsl #2
    b4f4:	023b0500 	eorseq	r0, fp, #0, 10
    b4f8:	470c0000 	strmi	r0, [ip, -r0]
    b4fc:	57000002 	strpl	r0, [r0, -r2]
    b500:	0d000002 	stceq	0, cr0, [r0, #-8]
    b504:	024c0500 	subeq	r0, ip, #0, 10
    b508:	ac0b0000 	stcge	0, cr0, [fp], {-0}
    b50c:	05000003 	streq	r0, [r0, #-3]
    b510:	0257179c 	subseq	r1, r7, #156, 14	; 0x2700000
    b514:	01010000 	mrseq	r0, (UNDEF: 1)
    b518:	00009b0c 	andeq	r9, r0, ip, lsl #22
    b51c:	00027500 	andeq	r7, r2, r0, lsl #10
    b520:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    b524:	0000026a 	andeq	r0, r0, sl, ror #4
    b528:	0006090b 	andeq	r0, r6, fp, lsl #18
    b52c:	13060600 	movwne	r0, #26112	; 0x6600
    b530:	00000275 	andeq	r0, r0, r5, ror r2
    b534:	d80b0101 	stmdale	fp, {r0, r8}
    b538:	04000008 	streq	r0, [r0], #-8
    b53c:	00b10ec3 	adcseq	r0, r1, r3, asr #29
    b540:	01010000 	mrseq	r0, (UNDEF: 1)
    b544:	000c6d0e 	andeq	r6, ip, lr, lsl #26
    b548:	016e0700 	cmneq	lr, r0, lsl #14
    b54c:	0002a310 	andeq	sl, r2, r0, lsl r3
    b550:	a9040700 	stmdbge	r4, {r8, r9, sl}
    b554:	0f000002 	svceq	0x00000002
    b558:	0002b501 	andeq	fp, r2, r1, lsl #10
    b55c:	008f1000 	addeq	r1, pc, r0
    b560:	0c000000 	stceq	0, cr0, [r0], {-0}
    b564:	000001a8 	andeq	r0, r0, r8, lsr #3
    b568:	000002c0 	andeq	r0, r0, r0, asr #5
    b56c:	b505000d 	strlt	r0, [r5, #-13]
    b570:	11000002 	tstne	r0, r2
    b574:	000009e1 	andeq	r0, r0, r1, ror #19
    b578:	16017f07 	strne	r7, [r1], -r7, lsl #30
    b57c:	000002c0 	andeq	r0, r0, r0, asr #5
    b580:	98110101 	ldmdals	r1, {r0, r8}
    b584:	07000003 	streq	r0, [r0, -r3]
    b588:	bd140182 	ldflts	f0, [r4, #-520]	; 0xfffffdf8
    b58c:	01000000 	mrseq	r0, (UNDEF: 0)
    b590:	03701101 	cmneq	r0, #1073741824	; 0x40000000
    b594:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
    b598:	00b10e02 	adcseq	r0, r1, r2, lsl #28
    b59c:	01010000 	mrseq	r0, (UNDEF: 1)
    b5a0:	03070812 	movweq	r0, #30738	; 0x7812
    b5a4:	03190903 	tsteq	r9, #49152	; 0xc000
    b5a8:	8e130000 	cdphi	0, 1, cr0, cr3, cr0, {0}
    b5ac:	0700003c 	smladxeq	r0, ip, r0, r0
    b5b0:	8f070307 	svchi	0x00070307
    b5b4:	00000000 	andeq	r0, r0, r0
    b5b8:	000fba13 	andeq	fp, pc, r3, lsl sl	; <UNPREDICTABLE>
    b5bc:	03080700 	movweq	r0, #34560	; 0x8700
    b5c0:	0000c208 	andeq	ip, r0, r8, lsl #4
    b5c4:	0e000400 	cfcpyseq	mvf0, mvf0
    b5c8:	00000a04 	andeq	r0, r0, r4, lsl #20
    b5cc:	03030907 	movweq	r0, #14599	; 0x3907
    b5d0:	000002f2 	strdeq	r0, [r0], -r2
    b5d4:	00002014 	andeq	r2, r0, r4, lsl r0
    b5d8:	0b073000 	bleq	1d75e0 <__ccfg+0x1b7638>
    b5dc:	03890803 	orreq	r0, r9, #196608	; 0x30000
    b5e0:	11130000 	tstne	r3, r0
    b5e4:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    b5e8:	8f080314 	svchi	0x00080314
    b5ec:	00000000 	andeq	r0, r0, r0
    b5f0:	000be213 	andeq	lr, fp, r3, lsl r2
    b5f4:	03150700 	tsteq	r5, #0, 14
    b5f8:	00008f08 	andeq	r8, r0, r8, lsl #30
    b5fc:	7b130200 	blvc	4cbe04 <__ccfg+0x4abe5c>
    b600:	0700004c 	streq	r0, [r0, -ip, asr #32]
    b604:	960b0316 			; <UNDEFINED> instruction: 0x960b0316
    b608:	04000002 	streq	r0, [r0], #-2
    b60c:	00474113 	subeq	r4, r7, r3, lsl r1
    b610:	03170700 	tsteq	r7, #0, 14
    b614:	0000c209 	andeq	ip, r0, r9, lsl #4
    b618:	0f130800 	svceq	0x00130800
    b61c:	07000000 	streq	r0, [r0, -r0]
    b620:	890f0318 	stmdbhi	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    b624:	0c000003 	stceq	0, cr0, [r0], {3}
    b628:	00095813 	andeq	r5, r9, r3, lsl r8
    b62c:	03190700 	tsteq	r9, #0, 14
    b630:	00039915 	andeq	r9, r3, r5, lsl r9
    b634:	0c002c00 	stceq	12, cr2, [r0], {-0}
    b638:	00000319 	andeq	r0, r0, r9, lsl r3
    b63c:	00000399 	muleq	r0, r9, r3
    b640:	00008815 	andeq	r8, r0, r5, lsl r8
    b644:	07000300 	streq	r0, [r0, -r0, lsl #6]
    b648:	00032604 	andeq	r2, r3, r4, lsl #12
    b64c:	0bd70e00 	bleq	ff5cee54 <_estack+0xdf5c9e54>
    b650:	1c070000 	stcne	0, cr0, [r7], {-0}
    b654:	03261b03 			; <UNDEFINED> instruction: 0x03261b03
    b658:	b7110000 	ldrlt	r0, [r1, -r0]
    b65c:	0700000b 	streq	r0, [r0, -fp]
    b660:	bb14031e 	bllt	50c2e0 <__ccfg+0x4ec338>
    b664:	01000003 	tsteq	r0, r3
    b668:	9f040701 	svcls	0x00040701
    b66c:	16000003 	strne	r0, [r0], -r3
    b670:	00001e46 	andeq	r1, r0, r6, asr #28
    b674:	9b070d01 	blls	1cea80 <__ccfg+0x1aead8>
    b678:	01000001 	tsteq	r0, r1
    b67c:	06380305 	ldrteq	r0, [r8], -r5, lsl #6
    b680:	01172000 	tsteq	r7, r0
    b684:	00002834 	andeq	r2, r0, r4, lsr r8
    b688:	01012301 	tsteq	r1, r1, lsl #6
    b68c:	000030ec 	andeq	r3, r0, ip, ror #1
    b690:	00003208 	andeq	r3, r0, r8, lsl #4
    b694:	2e189c01 	cdpcs	12, 1, cr9, cr8, cr1, {0}
    b698:	0100000c 	tsteq	r0, ip
    b69c:	008f0123 	addeq	r0, pc, r3, lsr #2
    b6a0:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
    b6a4:	41190000 	tstmi	r9, r0
    b6a8:	01000047 	tsteq	r0, r7, asr #32
    b6ac:	00ce0123 	sbceq	r0, lr, r3, lsr #2
    b6b0:	2e470000 	cdpcs	0, 4, cr0, cr7, cr0, {0}
    b6b4:	a81a0000 	ldmdage	sl, {}	; <UNPREDICTABLE>
    b6b8:	1b00000f 	blne	b6fc <__exidx_end+0x5cd8>
    b6bc:	00727470 	rsbseq	r7, r2, r0, ror r4
    b6c0:	9b0f2801 	blls	3d56cc <__ccfg+0x3b5724>
    b6c4:	05000001 	streq	r0, [r0, #-1]
    b6c8:	00064003 	andeq	r4, r6, r3
    b6cc:	656c1b20 	strbvs	r1, [ip, #-2848]!	; 0xfffff4e0
    b6d0:	2901006e 	stmdbcs	r1, {r1, r2, r3, r5, r6}
    b6d4:	0000810d 	andeq	r8, r0, sp, lsl #2
    b6d8:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
    b6dc:	19200006 	stmdbne	r0!, {r1, r2}
    b6e0:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    b6e4:	81062a01 	tsthi	r6, r1, lsl #20
    b6e8:	9d000000 	stcls	0, cr0, [r0, #-0]
    b6ec:	0000002e 	andeq	r0, r0, lr, lsr #32
    b6f0:	05f00000 	ldrbeq	r0, [r0, #0]!
    b6f4:	00030000 	andeq	r0, r3, r0
    b6f8:	00002af9 	strdeq	r2, [r0], -r9
    b6fc:	00a30104 	adceq	r0, r3, r4, lsl #2
    b700:	830c0000 	movwhi	r0, #49152	; 0xc000
    b704:	f7000028 			; <UNDEFINED> instruction: 0xf7000028
    b708:	5000000d 	andpl	r0, r0, sp
    b70c:	00000010 	andeq	r0, r0, r0, lsl r0
    b710:	da000000 	ble	b718 <__exidx_end+0x5cf4>
    b714:	02000069 	andeq	r0, r0, #105	; 0x69
    b718:	0c580601 	mrrceq	6, 0, r0, r8, cr1
    b71c:	02020000 	andeq	r0, r2, #0
    b720:	000a6605 	andeq	r6, sl, r5, lsl #12
    b724:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    b728:	000007f8 	strdeq	r0, [r0], -r8
    b72c:	f3050802 	vsub.i8	d0, d5, d2
    b730:	03000007 	movweq	r0, #7
    b734:	00002a09 	andeq	r2, r0, r9, lsl #20
    b738:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    b73c:	02000000 	andeq	r0, r0, #0
    b740:	0c560801 	mrrceq	8, 0, r0, r6, cr1
    b744:	ff030000 			; <UNDEFINED> instruction: 0xff030000
    b748:	0200002d 	andeq	r0, r0, #45	; 0x2d
    b74c:	00601931 	rsbeq	r1, r0, r1, lsr r9
    b750:	02020000 	andeq	r0, r2, #0
    b754:	000d5307 	andeq	r5, sp, r7, lsl #6
    b758:	29a10300 	stmibcs	r1!, {r8, r9}
    b75c:	34020000 	strcc	r0, [r2], #-0
    b760:	00007319 	andeq	r7, r0, r9, lsl r3
    b764:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b768:	00000428 	andeq	r0, r0, r8, lsr #8
    b76c:	23070802 	movwcs	r0, #30722	; 0x7802
    b770:	04000004 	streq	r0, [r0], #-4
    b774:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    b778:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    b77c:	00042d07 	andeq	r2, r4, r7, lsl #26
    b780:	05190300 	ldreq	r0, [r9, #-768]	; 0xfffffd00
    b784:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    b788:	00009b1b 	andeq	r9, r0, fp, lsl fp
    b78c:	0b8b0500 	bleq	fe2ccb94 <_estack+0xde2c7b94>
    b790:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    b794:	0000b300 	andeq	fp, r0, r0, lsl #6
    b798:	08680600 	stmdaeq	r8!, {r9, sl}^
    b79c:	00b30000 	adcseq	r0, r3, r0
    b7a0:	01000000 	mrseq	r0, (UNDEF: 0)
    b7a4:	03040700 	movweq	r0, #18176	; 0x4700
    b7a8:	00000b8d 	andeq	r0, r0, sp, lsl #23
    b7ac:	8f186303 	svchi	0x00186303
    b7b0:	03000000 	movweq	r0, #0
    b7b4:	000028e8 	andeq	r2, r0, r8, ror #17
    b7b8:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    b7bc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b7c0:	000000c1 	andeq	r0, r0, r1, asr #1
    b7c4:	001daf03 	andseq	sl, sp, r3, lsl #30
    b7c8:	122b0400 	eorne	r0, fp, #0, 8
    b7cc:	00000041 	andeq	r0, r0, r1, asr #32
    b7d0:	0000d209 	andeq	sp, r0, r9, lsl #4
    b7d4:	293a0300 	ldmdbcs	sl!, {r8, r9}
    b7d8:	2c040000 	stccs	0, cr0, [r4], {-0}
    b7dc:	00006712 	andeq	r6, r0, r2, lsl r7
    b7e0:	00e30800 	rsceq	r0, r3, r0, lsl #16
    b7e4:	41030000 	mrsmi	r0, (UNDEF: 3)
    b7e8:	04000006 	streq	r0, [r0], #-6
    b7ec:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    b7f0:	af030000 	svcge	0x00030000
    b7f4:	0400000b 	streq	r0, [r0], #-11
    b7f8:	010c102e 	tsteq	ip, lr, lsr #32
    b7fc:	040a0000 	streq	r0, [sl], #-0
    b800:	000000c1 	andeq	r0, r0, r1, asr #1
    b804:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    b808:	0001a009 	andeq	sl, r1, r9
    b80c:	002b0c00 	eoreq	r0, fp, r0, lsl #24
    b810:	34040000 	strcc	r0, [r4], #-0
    b814:	0000d207 	andeq	sp, r0, r7, lsl #4
    b818:	07010100 	streq	r0, [r1, -r0, lsl #2]
    b81c:	06470c00 	strbeq	r0, [r7], -r0, lsl #24
    b820:	35040000 	strcc	r0, [r4, #-0]
    b824:	0000d203 	andeq	sp, r0, r3, lsl #4
    b828:	06010100 	streq	r0, [r1], -r0, lsl #2
    b82c:	02de0c00 	sbcseq	r0, lr, #0, 24
    b830:	36040000 	strcc	r0, [r4], -r0
    b834:	0000d203 	andeq	sp, r0, r3, lsl #4
    b838:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    b83c:	06b20c00 	ldrteq	r0, [r2], r0, lsl #24
    b840:	37040000 	strcc	r0, [r4, -r0]
    b844:	0000d203 	andeq	sp, r0, r3, lsl #4
    b848:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    b84c:	0a9a0c00 	beq	fe68e854 <_estack+0xde689854>
    b850:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    b854:	0000d203 	andeq	sp, r0, r3, lsl #4
    b858:	00040100 	andeq	r0, r4, r0, lsl #2
    b85c:	06560d00 	ldrbeq	r0, [r6], -r0, lsl #26
    b860:	3a040000 	bcc	10b868 <__ccfg+0xeb8c0>
    b864:	0000d207 	andeq	sp, r0, r7, lsl #4
    b868:	f60d0100 			; <UNDEFINED> instruction: 0xf60d0100
    b86c:	04000008 	streq	r0, [r0], #-8
    b870:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    b874:	0d020000 	stceq	0, cr0, [r2, #-0]
    b878:	00000f27 	andeq	r0, r0, r7, lsr #30
    b87c:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    b880:	03000000 	movweq	r0, #0
    b884:	00090e0d 	andeq	r0, r9, sp, lsl #28
    b888:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    b88c:	000000e3 	andeq	r0, r0, r3, ror #1
    b890:	14030004 	strne	r0, [r3], #-4
    b894:	04000003 	streq	r0, [r0], #-3
    b898:	01120341 	tsteq	r2, r1, asr #6
    b89c:	a0090000 	andge	r0, r9, r0
    b8a0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    b8a4:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
    b8a8:	ac1a4304 	ldcge	3, cr4, [sl], {4}
    b8ac:	01000001 	tsteq	r0, r1
    b8b0:	01970e01 	orrseq	r0, r7, r1, lsl #28
    b8b4:	45040000 	strmi	r0, [r4, #-0]
    b8b8:	0001cd0e 	andeq	ip, r1, lr, lsl #26
    b8bc:	0a010100 	beq	4bcc4 <__ccfg+0x2bd1c>
    b8c0:	0001d304 	andeq	sp, r1, r4, lsl #6
    b8c4:	08010200 	stmdaeq	r1, {r9}
    b8c8:	00000c5f 	andeq	r0, r0, pc, asr ip
    b8cc:	0001d308 	andeq	sp, r1, r8, lsl #6
    b8d0:	031d0e00 	tsteq	sp, #0, 28
    b8d4:	45040000 	strmi	r0, [r4, #-0]
    b8d8:	0001cd1e 	andeq	ip, r1, lr, lsl sp
    b8dc:	0b010100 	bleq	4bce4 <__ccfg+0x2bd3c>
    b8e0:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    b8e4:	0000021e 	andeq	r0, r0, lr, lsl r2
    b8e8:	000cc50d 	andeq	ip, ip, sp, lsl #10
    b8ec:	0b900500 	bleq	fe40ccf4 <_estack+0xde407cf4>
    b8f0:	00000067 	andeq	r0, r0, r7, rrx
    b8f4:	10620d00 	rsbne	r0, r2, r0, lsl #26
    b8f8:	91050000 	mrsls	r0, (UNDEF: 5)
    b8fc:	0000c108 	andeq	ip, r0, r8, lsl #2
    b900:	bc0d0400 	cfstrslt	mvf0, [sp], {-0}
    b904:	05000001 	streq	r0, [r0, #-1]
    b908:	00de1092 	smullseq	r1, lr, r2, r0
    b90c:	00060000 	andeq	r0, r6, r0
    b910:	000cb903 	andeq	fp, ip, r3, lsl #18
    b914:	03930500 	orrseq	r0, r3, #0, 10
    b918:	000001ed 	andeq	r0, r0, sp, ror #3
    b91c:	00021e0f 	andeq	r1, r2, pc, lsl #28
    b920:	00023500 	andeq	r3, r2, r0, lsl #10
    b924:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    b928:	00000938 	andeq	r0, r0, r8, lsr r9
    b92c:	2a0f9905 	bcs	3f1d48 <__ccfg+0x3d1da0>
    b930:	01000002 	tsteq	r0, r2
    b934:	06010b01 	streq	r0, [r1], -r1, lsl #22
    b938:	026d0991 	rsbeq	r0, sp, #2375680	; 0x244000
    b93c:	150c0000 	strne	r0, [ip, #-0]
    b940:	06000009 	streq	r0, [r0], -r9
    b944:	00d20793 	smullseq	r0, r2, r3, r7
    b948:	07010000 	streq	r0, [r1, -r0]
    b94c:	c70c0001 	strgt	r0, [ip, -r1]
    b950:	06000005 	streq	r0, [r0], -r5
    b954:	00d20394 	smullseq	r0, r2, r4, r3
    b958:	01010000 	mrseq	r0, (UNDEF: 1)
    b95c:	03000000 	movweq	r0, #0
    b960:	00000aa6 	andeq	r0, r0, r6, lsr #21
    b964:	43039606 	movwmi	r9, #13830	; 0x3606
    b968:	08000002 	stmdaeq	r0, {r1}
    b96c:	0000026d 	andeq	r0, r0, sp, ror #4
    b970:	0002790f 	andeq	r7, r2, pc, lsl #18
    b974:	00028900 	andeq	r8, r2, r0, lsl #18
    b978:	08001000 	stmdaeq	r0, {ip}
    b97c:	0000027e 	andeq	r0, r0, lr, ror r2
    b980:	0003ac0e 	andeq	sl, r3, lr, lsl #24
    b984:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    b988:	00000289 	andeq	r0, r0, r9, lsl #5
    b98c:	cd0f0101 	stfgts	f0, [pc, #-4]	; b990 <__exidx_end+0x5f6c>
    b990:	a7000000 	strge	r0, [r0, -r0]
    b994:	10000002 	andne	r0, r0, r2
    b998:	029c0800 	addseq	r0, ip, #0, 16
    b99c:	090e0000 	stmdbeq	lr, {}	; <UNPREDICTABLE>
    b9a0:	07000006 	streq	r0, [r0, -r6]
    b9a4:	02a71306 	adceq	r1, r7, #402653184	; 0x18000000
    b9a8:	01010000 	mrseq	r0, (UNDEF: 1)
    b9ac:	0008d80e 	andeq	sp, r8, lr, lsl #16
    b9b0:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    b9b4:	000000e3 	andeq	r0, r0, r3, ror #1
    b9b8:	6d110101 	ldfvss	f0, [r1, #-4]
    b9bc:	0800000c 	stmdaeq	r0, {r2, r3}
    b9c0:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    b9c4:	0a000002 	beq	b9d4 <__exidx_end+0x5fb0>
    b9c8:	0002db04 	andeq	sp, r2, r4, lsl #22
    b9cc:	e7011200 	str	r1, [r1, -r0, lsl #4]
    b9d0:	13000002 	movwne	r0, #2
    b9d4:	000000c1 	andeq	r0, r0, r1, asr #1
    b9d8:	01da0f00 	bicseq	r0, sl, r0, lsl #30
    b9dc:	02f20000 	rscseq	r0, r2, #0
    b9e0:	00100000 	andseq	r0, r0, r0
    b9e4:	0002e708 	andeq	lr, r2, r8, lsl #14
    b9e8:	09e11400 	stmibeq	r1!, {sl, ip}^
    b9ec:	7f080000 	svcvc	0x00080000
    b9f0:	02f21601 	rscseq	r1, r2, #1048576	; 0x100000
    b9f4:	01010000 	mrseq	r0, (UNDEF: 1)
    b9f8:	00039814 	andeq	r9, r3, r4, lsl r8
    b9fc:	01820800 	orreq	r0, r2, r0, lsl #16
    ba00:	0000ef14 	andeq	lr, r0, r4, lsl pc
    ba04:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    ba08:	00000370 	andeq	r0, r0, r0, ror r3
    ba0c:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    ba10:	000000e3 	andeq	r0, r0, r3, ror #1
    ba14:	08150101 	ldmdaeq	r5, {r0, r8}
    ba18:	09030308 	stmdbeq	r3, {r3, r8, r9}
    ba1c:	0000034b 	andeq	r0, r0, fp, asr #6
    ba20:	003c8e16 	eorseq	r8, ip, r6, lsl lr
    ba24:	03070800 	movweq	r0, #30720	; 0x7800
    ba28:	0000c107 	andeq	ip, r0, r7, lsl #2
    ba2c:	ba160000 	blt	58ba34 <__ccfg+0x56ba8c>
    ba30:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    ba34:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    ba38:	04000000 	streq	r0, [r0], #-0
    ba3c:	0a041100 	beq	10fe44 <__ccfg+0xefe9c>
    ba40:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    ba44:	03240303 			; <UNDEFINED> instruction: 0x03240303
    ba48:	20170000 	andscs	r0, r7, r0
    ba4c:	30000000 	andcc	r0, r0, r0
    ba50:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    ba54:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    ba58:	001f1116 	andseq	r1, pc, r6, lsl r1	; <UNPREDICTABLE>
    ba5c:	03140800 	tsteq	r4, #0, 16
    ba60:	0000c108 	andeq	ip, r0, r8, lsl #2
    ba64:	e2160000 	ands	r0, r6, #0
    ba68:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    ba6c:	c1080315 	tstgt	r8, r5, lsl r3
    ba70:	02000000 	andeq	r0, r0, #0
    ba74:	004c7b16 	subeq	r7, ip, r6, lsl fp
    ba78:	03160800 	tsteq	r6, #0, 16
    ba7c:	0002c80b 	andeq	ip, r2, fp, lsl #16
    ba80:	41160400 	tstmi	r6, r0, lsl #8
    ba84:	08000047 	stmdaeq	r0, {r0, r1, r2, r6}
    ba88:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    ba8c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    ba90:	00000f16 	andeq	r0, r0, r6, lsl pc
    ba94:	03180800 	tsteq	r8, #0, 16
    ba98:	0003bb0f 	andeq	fp, r3, pc, lsl #22
    ba9c:	58160c00 	ldmdapl	r6, {sl, fp}
    baa0:	08000009 	stmdaeq	r0, {r0, r3}
    baa4:	cb150319 	blgt	54c710 <__ccfg+0x52c768>
    baa8:	2c000003 	stccs	0, cr0, [r0], {3}
    baac:	034b0f00 	movteq	r0, #48896	; 0xbf00
    bab0:	03cb0000 	biceq	r0, fp, #0
    bab4:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    bab8:	03000000 	movweq	r0, #0
    babc:	58040a00 	stmdapl	r4, {r9, fp}
    bac0:	11000003 	tstne	r0, r3
    bac4:	00000bd7 	ldrdeq	r0, [r0], -r7
    bac8:	1b031c08 	blne	d2af0 <__ccfg+0xb2b48>
    bacc:	00000358 	andeq	r0, r0, r8, asr r3
    bad0:	000bb714 	andeq	fp, fp, r4, lsl r7
    bad4:	031e0800 	tsteq	lr, #0, 16
    bad8:	0003ed14 	andeq	lr, r3, r4, lsl sp
    badc:	0a010100 	beq	4bee4 <__ccfg+0x2bf3c>
    bae0:	0003d104 	andeq	sp, r3, r4, lsl #2
    bae4:	da011900 	ble	51eec <__ccfg+0x31f44>
    bae8:	01000028 	tsteq	r0, r8, lsr #32
    baec:	cd010791 	stcgt	7, cr0, [r1, #-580]	; 0xfffffdbc
    baf0:	58000001 	stmdapl	r0, {r0}
    baf4:	a8000034 	stmdage	r0, {r2, r4, r5}
    baf8:	01000034 	tsteq	r0, r4, lsr r0
    bafc:	0004689c 	muleq	r4, ip, r8
    bb00:	65721a00 	ldrbvs	r1, [r2, #-2560]!	; 0xfffff600
    bb04:	91010073 	tstls	r1, r3, ror r0
    bb08:	0001cd14 	andeq	ip, r1, r4, lsl sp
    bb0c:	002ebb00 	eoreq	fp, lr, r0, lsl #22
    bb10:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    bb14:	25910100 	ldrcs	r0, [r1, #256]	; 0x100
    bb18:	00000468 	andeq	r0, r0, r8, ror #8
    bb1c:	00002f05 	andeq	r2, r0, r5, lsl #30
    bb20:	0071611a 	rsbseq	r6, r1, sl, lsl r1
    bb24:	b5319101 	ldrlt	r9, [r1, #-257]!	; 0xfffffeff
    bb28:	44000000 	strmi	r0, [r0], #-0
    bb2c:	1b00002f 	blne	bbf0 <__exidx_end+0x61cc>
    bb30:	006c6d66 	rsbeq	r6, ip, r6, ror #26
    bb34:	c1079301 	tstgt	r7, r1, lsl #6
    bb38:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    bb3c:	1b00002f 	blne	bc00 <__exidx_end+0x61dc>
    bb40:	93010064 	movwls	r0, #4196	; 0x1064
    bb44:	0000c10c 	andeq	ip, r0, ip, lsl #2
    bb48:	002f9600 	eoreq	r9, pc, r0, lsl #12
    bb4c:	28c21c00 	stmiacs	r2, {sl, fp, ip}^
    bb50:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    bb54:	00348201 	eorseq	r8, r4, r1, lsl #4
    bb58:	040a0000 	streq	r0, [sl], #-0
    bb5c:	000001da 	ldrdeq	r0, [r0], -sl
    bb60:	28cd011d 	stmiacs	sp, {r0, r2, r3, r4, r8}^
    bb64:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    bb68:	00c10106 	sbceq	r0, r1, r6, lsl #2
    bb6c:	32280000 	eorcc	r0, r8, #0
    bb70:	34580000 	ldrbcc	r0, [r8], #-0
    bb74:	9c010000 	stcls	0, cr0, [r1], {-0}
    bb78:	7365721a 	cmnvc	r5, #-1610612735	; 0xa0000001
    bb7c:	1a080100 	bne	20bf84 <__ccfg+0x1ebfdc>
    bb80:	000001cd 	andeq	r0, r0, sp, asr #3
    bb84:	00002fa9 	andeq	r2, r0, r9, lsr #31
    bb88:	01006e1a 	tsteq	r0, sl, lsl lr
    bb8c:	00c12408 	sbceq	r2, r1, r8, lsl #8
    bb90:	2fbc0000 	svccs	0x00bc0000
    bb94:	661a0000 	ldrvs	r0, [sl], -r0
    bb98:	0801006d 	stmdaeq	r1, {r0, r2, r3, r5, r6}
    bb9c:	00046833 	andeq	r6, r4, r3, lsr r8
    bba0:	002fcf00 	eoreq	ip, pc, r0, lsl #30
    bba4:	70611a00 	rsbvc	r1, r1, r0, lsl #20
    bba8:	3f080100 	svccc	0x00080100
    bbac:	000000b5 	strheq	r0, [r0], -r5
    bbb0:	00002ff8 	strdeq	r2, [r0], -r8
    bbb4:	0100631b 	tsteq	r0, fp, lsl r3
    bbb8:	01d3070a 	bicseq	r0, r3, sl, lsl #14
    bbbc:	309a0000 	addscc	r0, sl, r0
    bbc0:	641e0000 	ldrvs	r0, [lr], #-0
    bbc4:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    bbc8:	000000c1 	andeq	r0, r0, r1, asr #1
    bbcc:	23549104 	cmpcs	r4, #4, 2
    bbd0:	28c81f06 	stmiacs	r8, {r1, r2, r8, r9, sl, fp, ip}^
    bbd4:	0d010000 	stceq	0, cr0, [r1, #-0]
    bbd8:	32080107 	andcc	r0, r8, #-1073741823	; 0xc0000001
    bbdc:	32280000 	eorcc	r0, r8, #0
    bbe0:	9c010000 	stcls	0, cr0, [r1], {-0}
    bbe4:	23007c05 	movwcs	r7, #3077	; 0xc05
    bbe8:	05090608 	streq	r0, [r9, #-1544]	; 0xfffff9f8
    bbec:	63200000 	nopvs	{0}	; <UNPREDICTABLE>
    bbf0:	120d0100 	andne	r0, sp, #0, 2
    bbf4:	000000c1 	andeq	r0, r0, r1, asr #1
    bbf8:	21005001 	tstcs	r0, r1
    bbfc:	006c6f45 	rsbeq	r6, ip, r5, asr #30
    bc00:	62018801 	andvs	r8, r1, #65536	; 0x10000
    bc04:	21000032 	tstcs	r0, r2, lsr r0
    bc08:	00746552 	rsbseq	r6, r4, r2, asr r5
    bc0c:	c4018b01 	strgt	r8, [r1], #-2817	; 0xfffff4ff
    bc10:	22000032 	andcs	r0, r0, #50	; 0x32
    bc14:	00001000 	andeq	r1, r0, r0
    bc18:	00000545 	andeq	r0, r0, r5, asr #10
    bc1c:	6c617623 	stclvs	6, cr7, [r1], #-140	; 0xffffff74
    bc20:	0a3a0100 	beq	e8c028 <__ccfg+0xe6c080>
    bc24:	000000c1 	andeq	r0, r0, r1, asr #1
    bc28:	0100691b 	tsteq	r0, fp, lsl r9
    bc2c:	0081133a 	addeq	r1, r1, sl, lsr r3
    bc30:	31800000 	orrcc	r0, r0, r0
    bc34:	22000000 	andcs	r0, r0, #0
    bc38:	00000fd8 	ldrdeq	r0, [r0], -r8
    bc3c:	0000056d 	andeq	r0, r0, sp, ror #10
    bc40:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    bc44:	0a460100 	beq	118c04c <__ccfg+0x116c0a4>
    bc48:	000000c1 	andeq	r0, r0, r1, asr #1
    bc4c:	00003193 	muleq	r0, r3, r1
    bc50:	0100691b 	tsteq	r0, fp, lsl r9
    bc54:	00c10f46 	sbceq	r0, r1, r6, asr #30
    bc58:	31bc0000 			; <UNDEFINED> instruction: 0x31bc0000
    bc5c:	22000000 	andcs	r0, r0, #0
    bc60:	00001038 	andeq	r1, r0, r8, lsr r0
    bc64:	00000595 	muleq	r0, r5, r5
    bc68:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    bc6c:	0c550100 	ldfeqe	f0, [r5], {-0}
    bc70:	000000e3 	andeq	r0, r0, r3, ror #1
    bc74:	000031e5 	andeq	r3, r0, r5, ror #3
    bc78:	0100691b 	tsteq	r0, fp, lsl r9
    bc7c:	00e31155 	rsceq	r1, r3, r5, asr r1
    bc80:	31f80000 	mvnscc	r0, r0
    bc84:	24000000 	strcs	r0, [r0], #-0
    bc88:	000033e6 	andeq	r3, r0, r6, ror #7
    bc8c:	00003410 	andeq	r3, r0, r0, lsl r4
    bc90:	000005bf 			; <UNDEFINED> instruction: 0x000005bf
    bc94:	6c61761e 	stclvs	6, cr7, [r1], #-120	; 0xffffff88
    bc98:	0c600100 	stfeqe	f0, [r0], #-0
    bc9c:	000000e3 	andeq	r0, r0, r3, ror #1
    bca0:	691b5901 	ldmdbvs	fp, {r0, r8, fp, ip, lr}
    bca4:	0a610100 	beq	184c0ac <__ccfg+0x182c104>
    bca8:	00000081 	andeq	r0, r0, r1, lsl #1
    bcac:	00003221 	andeq	r3, r0, r1, lsr #4
    bcb0:	10202200 	eorne	r2, r0, r0, lsl #4
    bcb4:	05d90000 	ldrbeq	r0, [r9]
    bcb8:	761b0000 	ldrvc	r0, [fp], -r0
    bcbc:	01006c61 	tsteq	r0, r1, ror #24
    bcc0:	00c10a71 	sbceq	r0, r1, r1, ror sl
    bcc4:	32340000 	eorscc	r0, r4, #0
    bcc8:	25000000 	strcs	r0, [r0, #-0]
    bccc:	0000342e 	andeq	r3, r0, lr, lsr #8
    bcd0:	0000344a 	andeq	r3, r0, sl, asr #8
    bcd4:	0074731b 	rsbseq	r7, r4, fp, lsl r3
    bcd8:	cd0b7801 	stcgt	8, cr7, [fp, #-4]
    bcdc:	54000001 	strpl	r0, [r0], #-1
    bce0:	00000032 	andeq	r0, r0, r2, lsr r0
    bce4:	058f0000 	streq	r0, [pc]	; bcec <__exidx_end+0x62c8>
    bce8:	00030000 	andeq	r0, r3, r0
    bcec:	00002d0b 	andeq	r2, r0, fp, lsl #26
    bcf0:	00a30104 	adceq	r0, r3, r4, lsl #2
    bcf4:	ed0c0000 	stc	0, cr0, [ip, #-0]
    bcf8:	f7000028 			; <UNDEFINED> instruction: 0xf7000028
    bcfc:	f800000d 			; <UNDEFINED> instruction: 0xf800000d
    bd00:	00000010 	andeq	r0, r0, r0, lsl r0
    bd04:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    bd08:	0200006d 	andeq	r0, r0, #109	; 0x6d
    bd0c:	0c580601 	mrrceq	6, 0, r0, r8, cr1
    bd10:	02020000 	andeq	r0, r2, #0
    bd14:	000a6605 	andeq	r6, sl, r5, lsl #12
    bd18:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    bd1c:	000007f8 	strdeq	r0, [r0], -r8
    bd20:	f3050802 	vsub.i8	d0, d5, d2
    bd24:	03000007 	movweq	r0, #7
    bd28:	00002a09 	andeq	r2, r0, r9, lsl #20
    bd2c:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    bd30:	02000000 	andeq	r0, r0, #0
    bd34:	0c560801 	mrrceq	8, 0, r0, r6, cr1
    bd38:	ff030000 			; <UNDEFINED> instruction: 0xff030000
    bd3c:	0200002d 	andeq	r0, r0, #45	; 0x2d
    bd40:	00601931 	rsbeq	r1, r0, r1, lsr r9
    bd44:	02020000 	andeq	r0, r2, #0
    bd48:	000d5307 	andeq	r5, sp, r7, lsl #6
    bd4c:	29a10300 	stmibcs	r1!, {r8, r9}
    bd50:	34020000 	strcc	r0, [r2], #-0
    bd54:	00007319 	andeq	r7, r0, r9, lsl r3
    bd58:	07040200 	streq	r0, [r4, -r0, lsl #4]
    bd5c:	00000428 	andeq	r0, r0, r8, lsr #8
    bd60:	23070802 	movwcs	r0, #30722	; 0x7802
    bd64:	04000004 	streq	r0, [r0], #-4
    bd68:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    bd6c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    bd70:	00042d07 	andeq	r2, r4, r7, lsl #26
    bd74:	05190300 	ldreq	r0, [r9, #-768]	; 0xfffffd00
    bd78:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    bd7c:	00009b1b 	andeq	r9, r0, fp, lsl fp
    bd80:	0b8b0500 	bleq	fe2cd188 <_estack+0xde2c8188>
    bd84:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    bd88:	0000b300 	andeq	fp, r0, r0, lsl #6
    bd8c:	08680600 	stmdaeq	r8!, {r9, sl}^
    bd90:	00b30000 	adcseq	r0, r3, r0
    bd94:	01000000 	mrseq	r0, (UNDEF: 0)
    bd98:	03040700 	movweq	r0, #18176	; 0x4700
    bd9c:	00000b8d 	andeq	r0, r0, sp, lsl #23
    bda0:	8f186303 	svchi	0x00186303
    bda4:	03000000 	movweq	r0, #0
    bda8:	00001315 	andeq	r1, r0, r5, lsl r3
    bdac:	41122604 	tstmi	r2, r4, lsl #12
    bdb0:	03000000 	movweq	r0, #0
    bdb4:	000028e8 	andeq	r2, r0, r8, ror #17
    bdb8:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    bdbc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    bdc0:	000000cd 	andeq	r0, r0, sp, asr #1
    bdc4:	001daf03 	andseq	sl, sp, r3, lsl #30
    bdc8:	122b0400 	eorne	r0, fp, #0, 8
    bdcc:	00000041 	andeq	r0, r0, r1, asr #32
    bdd0:	0000de09 	andeq	sp, r0, r9, lsl #28
    bdd4:	293a0300 	ldmdbcs	sl!, {r8, r9}
    bdd8:	2c040000 	stccs	0, cr0, [r4], {-0}
    bddc:	00006712 	andeq	r6, r0, r2, lsl r7
    bde0:	00ef0800 	rsceq	r0, pc, r0, lsl #16
    bde4:	41030000 	mrsmi	r0, (UNDEF: 3)
    bde8:	04000006 	streq	r0, [r0], #-6
    bdec:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    bdf0:	040a0000 	streq	r0, [sl], #-0
    bdf4:	000000cd 	andeq	r0, r0, sp, asr #1
    bdf8:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    bdfc:	0001a009 	andeq	sl, r1, r9
    be00:	002b0c00 	eoreq	r0, fp, r0, lsl #24
    be04:	34040000 	strcc	r0, [r4], #-0
    be08:	0000de07 	andeq	sp, r0, r7, lsl #28
    be0c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    be10:	06470c00 	strbeq	r0, [r7], -r0, lsl #24
    be14:	35040000 	strcc	r0, [r4, #-0]
    be18:	0000de03 	andeq	sp, r0, r3, lsl #28
    be1c:	06010100 	streq	r0, [r1], -r0, lsl #2
    be20:	02de0c00 	sbcseq	r0, lr, #0, 24
    be24:	36040000 	strcc	r0, [r4], -r0
    be28:	0000de03 	andeq	sp, r0, r3, lsl #28
    be2c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    be30:	06b20c00 	ldrteq	r0, [r2], r0, lsl #24
    be34:	37040000 	strcc	r0, [r4, -r0]
    be38:	0000de03 	andeq	sp, r0, r3, lsl #28
    be3c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    be40:	0a9a0c00 	beq	fe68ee48 <_estack+0xde689e48>
    be44:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    be48:	0000de03 	andeq	sp, r0, r3, lsl #28
    be4c:	00040100 	andeq	r0, r4, r0, lsl #2
    be50:	06560d00 	ldrbeq	r0, [r6], -r0, lsl #26
    be54:	3a040000 	bcc	10be5c <__ccfg+0xebeb4>
    be58:	0000de07 	andeq	sp, r0, r7, lsl #28
    be5c:	f60d0100 			; <UNDEFINED> instruction: 0xf60d0100
    be60:	04000008 	streq	r0, [r0], #-8
    be64:	00de033c 	sbcseq	r0, lr, ip, lsr r3
    be68:	0d020000 	stceq	0, cr0, [r2, #-0]
    be6c:	00000f27 	andeq	r0, r0, r7, lsr #30
    be70:	de033d04 	cdple	13, 0, cr3, cr3, cr4, {0}
    be74:	03000000 	movweq	r0, #0
    be78:	00090e0d 	andeq	r0, r9, sp, lsl #28
    be7c:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    be80:	000000ef 	andeq	r0, r0, pc, ror #1
    be84:	14030004 	strne	r0, [r3], #-4
    be88:	04000003 	streq	r0, [r0], #-3
    be8c:	01120341 	tsteq	r2, r1, asr #6
    be90:	a0090000 	andge	r0, r9, r0
    be94:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    be98:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
    be9c:	ac1a4304 	ldcge	3, cr4, [sl], {4}
    bea0:	01000001 	tsteq	r0, r1
    bea4:	01970e01 	orrseq	r0, r7, r1, lsl #28
    bea8:	45040000 	strmi	r0, [r4, #-0]
    beac:	0001cd0e 	andeq	ip, r1, lr, lsl #26
    beb0:	0a010100 	beq	4c2b8 <__ccfg+0x2c310>
    beb4:	0001d304 	andeq	sp, r1, r4, lsl #6
    beb8:	08010200 	stmdaeq	r1, {r9}
    bebc:	00000c5f 	andeq	r0, r0, pc, asr ip
    bec0:	0001d308 	andeq	sp, r1, r8, lsl #6
    bec4:	031d0e00 	tsteq	sp, #0, 28
    bec8:	45040000 	strmi	r0, [r4, #-0]
    becc:	0001cd1e 	andeq	ip, r1, lr, lsl sp
    bed0:	0b010100 	bleq	4c2d8 <__ccfg+0x2c330>
    bed4:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    bed8:	0000021e 	andeq	r0, r0, lr, lsl r2
    bedc:	000cc50d 	andeq	ip, ip, sp, lsl #10
    bee0:	0b900500 	bleq	fe40d2e8 <_estack+0xde4082e8>
    bee4:	00000067 	andeq	r0, r0, r7, rrx
    bee8:	10620d00 	rsbne	r0, r2, r0, lsl #26
    beec:	91050000 	mrsls	r0, (UNDEF: 5)
    bef0:	0000cd08 	andeq	ip, r0, r8, lsl #26
    bef4:	bc0d0400 	cfstrslt	mvf0, [sp], {-0}
    bef8:	05000001 	streq	r0, [r0, #-1]
    befc:	00ea1092 	smlaleq	r1, sl, r2, r0
    bf00:	00060000 	andeq	r0, r6, r0
    bf04:	000cb903 	andeq	fp, ip, r3, lsl #18
    bf08:	03930500 	orrseq	r0, r3, #0, 10
    bf0c:	000001ed 	andeq	r0, r0, sp, ror #3
    bf10:	00021e0f 	andeq	r1, r2, pc, lsl #28
    bf14:	00023500 	andeq	r3, r2, r0, lsl #10
    bf18:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    bf1c:	00000938 	andeq	r0, r0, r8, lsr r9
    bf20:	2a0f9905 	bcs	3f233c <__ccfg+0x3d2394>
    bf24:	01000002 	tsteq	r0, r2
    bf28:	06010b01 	streq	r0, [r1], -r1, lsl #22
    bf2c:	026d0991 	rsbeq	r0, sp, #2375680	; 0x244000
    bf30:	150c0000 	strne	r0, [ip, #-0]
    bf34:	06000009 	streq	r0, [r0], -r9
    bf38:	00de0793 	smullseq	r0, lr, r3, r7
    bf3c:	07010000 	streq	r0, [r1, -r0]
    bf40:	c70c0001 	strgt	r0, [ip, -r1]
    bf44:	06000005 	streq	r0, [r0], -r5
    bf48:	00de0394 	smullseq	r0, lr, r4, r3
    bf4c:	01010000 	mrseq	r0, (UNDEF: 1)
    bf50:	03000000 	movweq	r0, #0
    bf54:	00000aa6 	andeq	r0, r0, r6, lsr #21
    bf58:	43039606 	movwmi	r9, #13830	; 0x3606
    bf5c:	08000002 	stmdaeq	r0, {r1}
    bf60:	0000026d 	andeq	r0, r0, sp, ror #4
    bf64:	0002790f 	andeq	r7, r2, pc, lsl #18
    bf68:	00028900 	andeq	r8, r2, r0, lsl #18
    bf6c:	08001000 	stmdaeq	r0, {ip}
    bf70:	0000027e 	andeq	r0, r0, lr, ror r2
    bf74:	0003ac0e 	andeq	sl, r3, lr, lsl #24
    bf78:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    bf7c:	00000289 	andeq	r0, r0, r9, lsl #5
    bf80:	d90f0101 	stmdble	pc, {r0, r8}	; <UNPREDICTABLE>
    bf84:	a7000000 	strge	r0, [r0, -r0]
    bf88:	10000002 	andne	r0, r0, r2
    bf8c:	029c0800 	addseq	r0, ip, #0, 16
    bf90:	090e0000 	stmdbeq	lr, {}	; <UNPREDICTABLE>
    bf94:	07000006 	streq	r0, [r0, -r6]
    bf98:	02a71306 	adceq	r1, r7, #402653184	; 0x18000000
    bf9c:	01010000 	mrseq	r0, (UNDEF: 1)
    bfa0:	0008d80e 	andeq	sp, r8, lr, lsl #16
    bfa4:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    bfa8:	000000ef 	andeq	r0, r0, pc, ror #1
    bfac:	6d110101 	ldfvss	f0, [r1, #-4]
    bfb0:	0800000c 	stmdaeq	r0, {r2, r3}
    bfb4:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    bfb8:	0a000002 	beq	bfc8 <__exidx_end+0x65a4>
    bfbc:	0002db04 	andeq	sp, r2, r4, lsl #22
    bfc0:	e7011200 	str	r1, [r1, -r0, lsl #4]
    bfc4:	13000002 	movwne	r0, #2
    bfc8:	000000cd 	andeq	r0, r0, sp, asr #1
    bfcc:	01da0f00 	bicseq	r0, sl, r0, lsl #30
    bfd0:	02f20000 	rscseq	r0, r2, #0
    bfd4:	00100000 	andseq	r0, r0, r0
    bfd8:	0002e708 	andeq	lr, r2, r8, lsl #14
    bfdc:	09e11400 	stmibeq	r1!, {sl, ip}^
    bfe0:	7f080000 	svcvc	0x00080000
    bfe4:	02f21601 	rscseq	r1, r2, #1048576	; 0x100000
    bfe8:	01010000 	mrseq	r0, (UNDEF: 1)
    bfec:	00039814 	andeq	r9, r3, r4, lsl r8
    bff0:	01820800 	orreq	r0, r2, r0, lsl #16
    bff4:	0000fb14 	andeq	pc, r0, r4, lsl fp	; <UNPREDICTABLE>
    bff8:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    bffc:	00000370 	andeq	r0, r0, r0, ror r3
    c000:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    c004:	000000ef 	andeq	r0, r0, pc, ror #1
    c008:	08150101 	ldmdaeq	r5, {r0, r8}
    c00c:	09030308 	stmdbeq	r3, {r3, r8, r9}
    c010:	0000034b 	andeq	r0, r0, fp, asr #6
    c014:	003c8e16 	eorseq	r8, ip, r6, lsl lr
    c018:	03070800 	movweq	r0, #30720	; 0x7800
    c01c:	0000cd07 	andeq	ip, r0, r7, lsl #26
    c020:	ba160000 	blt	58c028 <__ccfg+0x56c080>
    c024:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    c028:	00080308 	andeq	r0, r8, r8, lsl #6
    c02c:	04000001 	streq	r0, [r0], #-1
    c030:	0a041100 	beq	110438 <__ccfg+0xf0490>
    c034:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    c038:	03240303 			; <UNDEFINED> instruction: 0x03240303
    c03c:	20170000 	andscs	r0, r7, r0
    c040:	30000000 	andcc	r0, r0, r0
    c044:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    c048:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    c04c:	001f1116 	andseq	r1, pc, r6, lsl r1	; <UNPREDICTABLE>
    c050:	03140800 	tsteq	r4, #0, 16
    c054:	0000cd08 	andeq	ip, r0, r8, lsl #26
    c058:	e2160000 	ands	r0, r6, #0
    c05c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    c060:	cd080315 	stcgt	3, cr0, [r8, #-84]	; 0xffffffac
    c064:	02000000 	andeq	r0, r0, #0
    c068:	004c7b16 	subeq	r7, ip, r6, lsl fp
    c06c:	03160800 	tsteq	r6, #0, 16
    c070:	0002c80b 	andeq	ip, r2, fp, lsl #16
    c074:	41160400 	tstmi	r6, r0, lsl #8
    c078:	08000047 	stmdaeq	r0, {r0, r1, r2, r6}
    c07c:	00090317 	andeq	r0, r9, r7, lsl r3
    c080:	08000001 	stmdaeq	r0, {r0}
    c084:	00000f16 	andeq	r0, r0, r6, lsl pc
    c088:	03180800 	tsteq	r8, #0, 16
    c08c:	0003bb0f 	andeq	fp, r3, pc, lsl #22
    c090:	58160c00 	ldmdapl	r6, {sl, fp}
    c094:	08000009 	stmdaeq	r0, {r0, r3}
    c098:	cb150319 	blgt	54cd04 <__ccfg+0x52cd5c>
    c09c:	2c000003 	stccs	0, cr0, [r0], {3}
    c0a0:	034b0f00 	movteq	r0, #48896	; 0xbf00
    c0a4:	03cb0000 	biceq	r0, fp, #0
    c0a8:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    c0ac:	03000000 	movweq	r0, #0
    c0b0:	58040a00 	stmdapl	r4, {r9, fp}
    c0b4:	11000003 	tstne	r0, r3
    c0b8:	00000bd7 	ldrdeq	r0, [r0], -r7
    c0bc:	1b031c08 	blne	d30e4 <__ccfg+0xb313c>
    c0c0:	00000358 	andeq	r0, r0, r8, asr r3
    c0c4:	000bb714 	andeq	fp, fp, r4, lsl r7
    c0c8:	031e0800 	tsteq	lr, #0, 16
    c0cc:	0003ed14 	andeq	lr, r3, r4, lsl sp
    c0d0:	0a010100 	beq	4c4d8 <__ccfg+0x2c530>
    c0d4:	0003d104 	andeq	sp, r3, r4, lsl #2
    c0d8:	2c011900 			; <UNDEFINED> instruction: 0x2c011900
    c0dc:	01000029 	tsteq	r0, r9, lsr #32
    c0e0:	81010508 	tsthi	r1, r8, lsl #10
    c0e4:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    c0e8:	38000034 	stmdacc	r0, {r2, r4, r5}
    c0ec:	01000038 	tsteq	r0, r8, lsr r0
    c0f0:	0005869c 	muleq	r5, ip, r6
    c0f4:	75621a00 	strbvc	r1, [r2, #-2560]!	; 0xfffff600
    c0f8:	08010066 	stmdaeq	r1, {r1, r2, r5, r6}
    c0fc:	00058618 	andeq	r8, r5, r8, lsl r6
    c100:	00326700 	eorseq	r6, r2, r0, lsl #14
    c104:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    c108:	08010074 	stmdaeq	r1, {r2, r4, r5, r6}
    c10c:	00058629 	andeq	r8, r5, r9, lsr #12
    c110:	00345e00 	eorseq	r5, r4, r0, lsl #28
    c114:	70611a00 	rsbvc	r1, r1, r0, lsl #20
    c118:	36080100 	strcc	r0, [r8], -r0, lsl #2
    c11c:	000000b5 	strheq	r0, [r0], -r5
    c120:	00003492 	muleq	r0, r2, r4
    c124:	00636e1b 	rsbeq	r6, r3, fp, lsl lr
    c128:	81060a01 	tsthi	r6, r1, lsl #20
    c12c:	2b000000 	blcs	c134 <__exidx_end+0x6710>
    c130:	1c000035 	stcne	0, cr0, [r0], {53}	; 0x35
    c134:	000028e0 	andeq	r2, r0, r0, ror #17
    c138:	1c114e01 	ldcne	14, cr4, [r1], {1}
    c13c:	00002932 	andeq	r2, r0, r2, lsr r9
    c140:	1d165501 	cfldr32ne	mvfx5, [r6, #-4]
    c144:	0000356a 	andeq	r3, r0, sl, ror #10
    c148:	000035da 	ldrdeq	r3, [r0], -sl
    c14c:	00000488 	andeq	r0, r0, r8, lsl #9
    c150:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    c154:	114e0100 	mrsne	r0, (UNDEF: 94)
    c158:	0000010c 	andeq	r0, r0, ip, lsl #2
    c15c:	6d1b5601 	ldcvs	6, cr5, [fp, #-4]
    c160:	4e010066 	cdpmi	0, 0, cr0, cr1, cr6, {3}
    c164:	0000c111 	andeq	ip, r0, r1, lsl r1
    c168:	0035ac00 	eorseq	sl, r5, r0, lsl #24
    c16c:	da1d0000 	ble	74c174 <__ccfg+0x72c1cc>
    c170:	22000035 	andcs	r0, r0, #53	; 0x35
    c174:	a4000036 	strge	r0, [r0], #-54	; 0xffffffca
    c178:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    c17c:	00706176 	rsbseq	r6, r0, r6, ror r1
    c180:	0c114f01 	ldceq	15, cr4, [r1], {1}
    c184:	01000001 	tsteq	r0, r1
    c188:	a81f005e 	ldmdage	pc, {r1, r2, r3, r4, r6}	; <UNPREDICTABLE>
    c18c:	d5000010 	strle	r0, [r0, #-16]
    c190:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    c194:	00706176 	rsbseq	r6, r0, r6, ror r1
    c198:	0c115001 	ldceq	0, cr5, [r1], {1}
    c19c:	01000001 	tsteq	r0, r1
    c1a0:	6364205e 	cmnvs	r4, #94	; 0x5e
    c1a4:	11500100 	cmpne	r0, r0, lsl #2
    c1a8:	00000081 	andeq	r0, r0, r1, lsl #1
    c1ac:	0100631b 	tsteq	r0, fp, lsl r3
    c1b0:	01d31150 	bicseq	r1, r3, r0, asr r1
    c1b4:	35ca0000 	strbcc	r0, [sl]
    c1b8:	1f000000 	svcne	0x00000000
    c1bc:	000010c0 	andeq	r1, r0, r0, asr #1
    c1c0:	000004fc 	strdeq	r0, [r0], -ip
    c1c4:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    c1c8:	16550100 	ldrbne	r0, [r5], -r0, lsl #2
    c1cc:	0000058c 	andeq	r0, r0, ip, lsl #11
    c1d0:	6d1b5e01 	ldcvs	14, cr5, [fp, #-4]
    c1d4:	55010066 	strpl	r0, [r1, #-102]	; 0xffffff9a
    c1d8:	0000c116 	andeq	ip, r0, r6, lsl r1
    c1dc:	0035e800 	eorseq	lr, r5, r0, lsl #16
    c1e0:	701f0000 	andsvc	r0, pc, r0
    c1e4:	14000010 	strne	r0, [r0], #-16
    c1e8:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    c1ec:	00706176 	rsbseq	r6, r0, r6, ror r1
    c1f0:	8c165601 	ldchi	6, cr5, [r6], {1}
    c1f4:	01000005 	tsteq	r0, r5
    c1f8:	d81f005e 	ldmdale	pc, {r1, r2, r3, r4, r6}	; <UNPREDICTABLE>
    c1fc:	45000010 	strmi	r0, [r0, #-16]
    c200:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    c204:	00706176 	rsbseq	r6, r0, r6, ror r1
    c208:	8c165701 	ldchi	7, cr5, [r6], {1}
    c20c:	01000005 	tsteq	r0, r5
    c210:	6364205e 	cmnvs	r4, #94	; 0x5e
    c214:	16570100 	ldrbne	r0, [r7], -r0, lsl #2
    c218:	00000081 	andeq	r0, r0, r1, lsl #1
    c21c:	0100631b 	tsteq	r0, fp, lsl r3
    c220:	01d31657 	bicseq	r1, r3, r7, asr r6
    c224:	36060000 	strcc	r0, [r6], -r0
    c228:	1d000000 	stcne	0, cr0, [r0, #-0]
    c22c:	000037ea 	andeq	r3, r0, sl, ror #15
    c230:	000037fe 	strdeq	r3, [r0], -lr
    c234:	0000056f 	andeq	r0, r0, pc, ror #10
    c238:	0100631b 	tsteq	r0, fp, lsl r3
    c23c:	01d3095c 	bicseq	r0, r3, ip, asr r9
    c240:	36240000 	strtcc	r0, [r4], -r0
    c244:	731e0000 	tstvc	lr, #0
    c248:	01007061 	tsteq	r0, r1, rrx
    c24c:	01cd0d5c 	biceq	r0, sp, ip, asr sp
    c250:	56010000 	strpl	r0, [r1], -r0
    c254:	10882100 	addne	r2, r8, r0, lsl #2
    c258:	731b0000 	tstvc	fp, #0
    c25c:	01007061 	tsteq	r0, r1, rrx
    c260:	01cd0a66 	biceq	r0, sp, r6, ror #20
    c264:	36370000 	ldrtcc	r0, [r7], -r0
    c268:	00000000 	andeq	r0, r0, r0
    c26c:	01da040a 	bicseq	r0, sl, sl, lsl #8
    c270:	040a0000 	streq	r0, [sl], #-0
    c274:	000000ef 	andeq	r0, r0, pc, ror #1
    c278:	001fea00 	andseq	lr, pc, r0, lsl #20
    c27c:	c7000300 	strgt	r0, [r0, -r0, lsl #6]
    c280:	0400002e 	streq	r0, [r0], #-46	; 0xffffffd2
    c284:	0000a301 	andeq	sl, r0, r1, lsl #6
    c288:	29400c00 	stmdbcs	r0, {sl, fp}^
    c28c:	0df70000 	ldcleq	0, cr0, [r7]
    c290:	706b0000 	rsbvc	r0, fp, r0
    c294:	01020000 	mrseq	r0, (UNDEF: 2)
    c298:	000c5806 	andeq	r5, ip, r6, lsl #16
    c29c:	31da0300 	bicscc	r0, sl, r0, lsl #6
    c2a0:	25010000 	strcs	r0, [r1, #-0]
    c2a4:	00003018 	andeq	r3, r0, r8, lsl r0
    c2a8:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    c2ac:	00000a66 	andeq	r0, r0, r6, ror #20
    c2b0:	f8050402 			; <UNDEFINED> instruction: 0xf8050402
    c2b4:	02000007 	andeq	r0, r0, #7
    c2b8:	07f30508 	ldrbeq	r0, [r3, r8, lsl #10]!
    c2bc:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    c2c0:	0100002a 	tsteq	r0, sl, lsr #32
    c2c4:	0051182e 	subseq	r1, r1, lr, lsr #16
    c2c8:	01020000 	mrseq	r0, (UNDEF: 2)
    c2cc:	000c5608 	andeq	r5, ip, r8, lsl #12
    c2d0:	2dff0300 	ldclcs	3, cr0, [pc]	; c2d8 <__exidx_end+0x68b4>
    c2d4:	31010000 	mrscc	r0, (UNDEF: 1)
    c2d8:	00006419 	andeq	r6, r0, r9, lsl r4
    c2dc:	07020200 	streq	r0, [r2, -r0, lsl #4]
    c2e0:	00000d53 	andeq	r0, r0, r3, asr sp
    c2e4:	0029a103 	eoreq	sl, r9, r3, lsl #2
    c2e8:	19340100 	ldmdbne	r4!, {r8}
    c2ec:	0000007c 	andeq	r0, r0, ip, ror r0
    c2f0:	00006b04 	andeq	r6, r0, r4, lsl #22
    c2f4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    c2f8:	00000428 	andeq	r0, r0, r8, lsr #8
    c2fc:	23070802 	movwcs	r0, #30722	; 0x7802
    c300:	05000004 	streq	r0, [r0, #-4]
    c304:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    c308:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    c30c:	00042d07 	andeq	r2, r4, r7, lsl #26
    c310:	298a0300 	stmibcs	sl, {r8, r9}
    c314:	56010000 	strpl	r0, [r1], -r0
    c318:	0000911a 	andeq	r9, r0, sl, lsl r1
    c31c:	0bd00600 	bleq	ff40db24 <_estack+0xdf408b24>
    c320:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
    c324:	00911701 	addseq	r1, r1, r1, lsl #14
    c328:	36030000 	strcc	r0, [r3], -r0
    c32c:	0300000e 	movweq	r0, #14
    c330:	00370e2e 	eorseq	r0, r7, lr, lsr #28
    c334:	f6030000 			; <UNDEFINED> instruction: 0xf6030000
    c338:	03000002 	movweq	r0, #2
    c33c:	00370e74 	eorseq	r0, r7, r4, ror lr
    c340:	04070000 	streq	r0, [r7], #-0
    c344:	eb03a503 	bl	f5758 <__ccfg+0xd57b0>
    c348:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    c34c:	00000767 	andeq	r0, r0, r7, ror #14
    c350:	a40ca703 	strge	sl, [ip], #-1795	; 0xfffff8fd
    c354:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    c358:	00000aaf 	andeq	r0, r0, pc, lsr #21
    c35c:	eb13a803 	bl	4f6370 <__ccfg+0x4d63c8>
    c360:	00000000 	andeq	r0, r0, r0
    c364:	00005109 	andeq	r5, r0, r9, lsl #2
    c368:	0000fb00 	andeq	pc, r0, r0, lsl #22
    c36c:	00910a00 	addseq	r0, r1, r0, lsl #20
    c370:	00030000 	andeq	r0, r3, r0
    c374:	a203080b 	andge	r0, r3, #720896	; 0xb0000
    c378:	00011f09 	andeq	r1, r1, r9, lsl #30
    c37c:	03900c00 	orrseq	r0, r0, #0, 24
    c380:	a4030000 	strge	r0, [r3], #-0
    c384:	00008a07 	andeq	r8, r0, r7, lsl #20
    c388:	fc0c0000 	stc2	0, cr0, [ip], {-0}
    c38c:	03000005 	movweq	r0, #5
    c390:	00c905a9 	sbceq	r0, r9, r9, lsr #11
    c394:	00040000 	andeq	r0, r4, r0
    c398:	0008b003 	andeq	fp, r8, r3
    c39c:	03aa0300 			; <UNDEFINED> instruction: 0x03aa0300
    c3a0:	000000fb 	strdeq	r0, [r0], -fp
    c3a4:	3d03040d 	cfstrscc	mvf0, [r3, #-52]	; 0xffffffcc
    c3a8:	04000008 	streq	r0, [r0], #-8
    c3ac:	007c1916 	rsbseq	r1, ip, r6, lsl r9
    c3b0:	4a030000 	bmi	cc3b8 <__ccfg+0xac410>
    c3b4:	05000002 	streq	r0, [r0, #-2]
    c3b8:	008a0d0c 	addeq	r0, sl, ip, lsl #26
    c3bc:	25030000 	strcs	r0, [r3, #-0]
    c3c0:	04000007 	streq	r0, [r0], #-7
    c3c4:	01391b23 	teqeq	r9, r3, lsr #22
    c3c8:	290e0000 	stmdbcs	lr, {}	; <UNPREDICTABLE>
    c3cc:	18000003 	stmdane	r0, {r0, r1}
    c3d0:	ab083404 	blge	2193e8 <__ccfg+0x1f9440>
    c3d4:	0c000001 	stceq	0, cr0, [r0], {1}
    c3d8:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
    c3dc:	ab133604 	blge	4d9bf4 <__ccfg+0x4b9c4c>
    c3e0:	00000001 	andeq	r0, r0, r1
    c3e4:	006b5f0f 	rsbeq	r5, fp, pc, lsl #30
    c3e8:	8a073704 	bhi	1da000 <__ccfg+0x1ba058>
    c3ec:	04000000 	streq	r0, [r0], #-0
    c3f0:	000b5d0c 	andeq	r5, fp, ip, lsl #26
    c3f4:	0b370400 	bleq	dcd3fc <__ccfg+0xdad454>
    c3f8:	0000008a 	andeq	r0, r0, sl, lsl #1
    c3fc:	43e20c08 	mvnmi	r0, #8, 24	; 0x800
    c400:	37040000 	strcc	r0, [r4, -r0]
    c404:	00008a14 	andeq	r8, r0, r4, lsl sl
    c408:	570c0c00 	strpl	r0, [ip, -r0, lsl #24]
    c40c:	04000004 	streq	r0, [r0], #-4
    c410:	008a1b37 	addeq	r1, sl, r7, lsr fp
    c414:	0f100000 	svceq	0x00100000
    c418:	0400785f 	streq	r7, [r0], #-2143	; 0xfffff7a1
    c41c:	01b10b38 			; <UNDEFINED> instruction: 0x01b10b38
    c420:	00140000 	andseq	r0, r4, r0
    c424:	01510410 	cmpeq	r1, r0, lsl r4
    c428:	2d090000 	stccs	0, cr0, [r9, #-0]
    c42c:	c1000001 	tstgt	r0, r1
    c430:	0a000001 	beq	c43c <__exidx_end+0x6a18>
    c434:	00000091 	muleq	r0, r1, r0
    c438:	780e0000 	stmdavc	lr, {}	; <UNPREDICTABLE>
    c43c:	2400000b 	strcs	r0, [r0], #-11
    c440:	44083c04 	strmi	r3, [r8], #-3076	; 0xfffff3fc
    c444:	0c000002 	stceq	0, cr0, [r0], {2}
    c448:	00000567 	andeq	r0, r0, r7, ror #10
    c44c:	8a093e04 	bhi	25bc64 <__ccfg+0x23bcbc>
    c450:	00000000 	andeq	r0, r0, r0
    c454:	0003b90c 	andeq	fp, r3, ip, lsl #18
    c458:	093f0400 	ldmdbeq	pc!, {sl}	; <UNPREDICTABLE>
    c45c:	0000008a 	andeq	r0, r0, sl, lsl #1
    c460:	035a0c04 	cmpeq	sl, #4, 24	; 0x400
    c464:	40040000 	andmi	r0, r4, r0
    c468:	00008a09 	andeq	r8, r0, r9, lsl #20
    c46c:	6f0c0800 	svcvs	0x000c0800
    c470:	04000006 	streq	r0, [r0], #-6
    c474:	008a0941 	addeq	r0, sl, r1, asr #18
    c478:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    c47c:	0000094f 	andeq	r0, r0, pc, asr #18
    c480:	8a094204 	bhi	25cc98 <__ccfg+0x23ccf0>
    c484:	10000000 	andne	r0, r0, r0
    c488:	000ac90c 	andeq	ip, sl, ip, lsl #18
    c48c:	09430400 	stmdbeq	r3, {sl}^
    c490:	0000008a 	andeq	r0, r0, sl, lsl #1
    c494:	033d0c14 	teqeq	sp, #20, 24	; 0x1400
    c498:	44040000 	strmi	r0, [r4], #-0
    c49c:	00008a09 	andeq	r8, r0, r9, lsl #20
    c4a0:	700c1800 	andvc	r1, ip, r0, lsl #16
    c4a4:	04000005 	streq	r0, [r0], #-5
    c4a8:	008a0945 	addeq	r0, sl, r5, asr #18
    c4ac:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    c4b0:	000008eb 	andeq	r0, r0, fp, ror #17
    c4b4:	8a094604 	bhi	25dccc <__ccfg+0x23dd24>
    c4b8:	20000000 	andcs	r0, r0, r0
    c4bc:	00321100 	eorseq	r1, r2, r0, lsl #2
    c4c0:	01080000 	mrseq	r0, (UNDEF: 8)
    c4c4:	89084f04 	stmdbhi	r8, {r2, r8, r9, sl, fp, lr}
    c4c8:	0c000002 	stceq	0, cr0, [r0], {2}
    c4cc:	00000d1a 	andeq	r0, r0, sl, lsl sp
    c4d0:	890a5004 	stmdbhi	sl, {r2, ip, lr}
    c4d4:	00000002 	andeq	r0, r0, r2
    c4d8:	000c120c 	andeq	r1, ip, ip, lsl #4
    c4dc:	09510400 	ldmdbeq	r1, {sl}^
    c4e0:	00000289 	andeq	r0, r0, r9, lsl #5
    c4e4:	0db31280 	lfmeq	f1, 4, [r3, #512]!	; 0x200
    c4e8:	53040000 	movwpl	r0, #16384	; 0x4000
    c4ec:	00012d0a 	andeq	r2, r1, sl, lsl #26
    c4f0:	12010000 	andne	r0, r1, #0
    c4f4:	00000ea4 	andeq	r0, r0, r4, lsr #29
    c4f8:	2d0a5604 	stccs	6, cr5, [sl, #-16]
    c4fc:	04000001 	streq	r0, [r0], #-1
    c500:	2b090001 	blcs	24c50c <__ccfg+0x22c564>
    c504:	99000001 	stmdbls	r0, {r0}
    c508:	0a000002 	beq	c518 <__exidx_end+0x6af4>
    c50c:	00000091 	muleq	r0, r1, r0
    c510:	1111001f 	tstne	r1, pc, lsl r0
    c514:	9000000a 	andls	r0, r0, sl
    c518:	08620401 	stmdaeq	r2!, {r0, sl}^
    c51c:	000002dc 	ldrdeq	r0, [r0], -ip
    c520:	000eb10c 	andeq	fp, lr, ip, lsl #2
    c524:	12630400 	rsbne	r0, r3, #0, 8
    c528:	000002dc 	ldrdeq	r0, [r0], -ip
    c52c:	057f0c00 	ldrbeq	r0, [pc, #-3072]!	; b934 <__exidx_end+0x5f10>
    c530:	64040000 	strvs	r0, [r4], #-0
    c534:	00008a06 	andeq	r8, r0, r6, lsl #20
    c538:	fe0c0400 	cdp2	4, 0, cr0, cr12, cr0, {0}
    c53c:	04000002 	streq	r0, [r0], #-2
    c540:	02e20966 	rsceq	r0, r2, #1671168	; 0x198000
    c544:	0c080000 	stceq	0, cr0, [r8], {-0}
    c548:	00000032 	andeq	r0, r0, r2, lsr r0
    c54c:	441e6704 	ldrmi	r6, [lr], #-1796	; 0xfffff8fc
    c550:	88000002 	stmdahi	r0, {r1}
    c554:	99041000 	stmdbls	r4, {ip}
    c558:	09000002 	stmdbeq	r0, {r1}
    c55c:	000002f2 	strdeq	r0, [r0], -r2
    c560:	000002f2 	strdeq	r0, [r0], -r2
    c564:	0000910a 	andeq	r9, r0, sl, lsl #2
    c568:	10001f00 	andne	r1, r0, r0, lsl #30
    c56c:	0002f804 	andeq	pc, r2, r4, lsl #16
    c570:	0e011300 	cdpeq	3, 0, cr1, cr1, cr0, {0}
    c574:	00000cb2 			; <UNDEFINED> instruction: 0x00000cb2
    c578:	087a0408 	ldmdaeq	sl!, {r3, sl}^
    c57c:	00000322 	andeq	r0, r0, r2, lsr #6
    c580:	000cc40c 	andeq	ip, ip, ip, lsl #8
    c584:	117b0400 	cmnne	fp, r0, lsl #8
    c588:	00000322 	andeq	r0, r0, r2, lsr #6
    c58c:	1d8d0c00 	stcne	12, cr0, [sp]
    c590:	7c040000 	stcvc	0, cr0, [r4], {-0}
    c594:	00008a06 	andeq	r8, r0, r6, lsl #20
    c598:	10000400 	andne	r0, r0, r0, lsl #8
    c59c:	00005104 	andeq	r5, r0, r4, lsl #2
    c5a0:	044f0e00 	strbeq	r0, [pc], #-3584	; c5a8 <__exidx_end+0x6b84>
    c5a4:	04680000 	strbteq	r0, [r8], #-0
    c5a8:	046b08ba 	strbteq	r0, [fp], #-2234	; 0xfffff746
    c5ac:	5f0f0000 	svcpl	0x000f0000
    c5b0:	bb040070 	bllt	10c778 <__ccfg+0xec7d0>
    c5b4:	00032212 	andeq	r2, r3, r2, lsl r2
    c5b8:	5f0f0000 	svcpl	0x000f0000
    c5bc:	bc040072 	stclt	0, cr0, [r4], {114}	; 0x72
    c5c0:	00008a07 	andeq	r8, r0, r7, lsl #20
    c5c4:	5f0f0400 	svcpl	0x000f0400
    c5c8:	bd040077 	stclt	0, cr0, [r4, #-476]	; 0xfffffe24
    c5cc:	00008a07 	andeq	r8, r0, r7, lsl #20
    c5d0:	bb0c0800 	bllt	30e5d8 <__ccfg+0x2ee630>
    c5d4:	04000001 	streq	r0, [r0], #-1
    c5d8:	003009be 	ldrhteq	r0, [r0], -lr
    c5dc:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    c5e0:	00000854 	andeq	r0, r0, r4, asr r8
    c5e4:	3009bf04 	andcc	fp, r9, r4, lsl #30
    c5e8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    c5ec:	66625f0f 	strbtvs	r5, [r2], -pc, lsl #30
    c5f0:	11c00400 	bicne	r0, r0, r0, lsl #8
    c5f4:	000002fa 	strdeq	r0, [r0], -sl
    c5f8:	01b20c10 			; <UNDEFINED> instruction: 0x01b20c10
    c5fc:	c1040000 	mrsgt	r0, (UNDEF: 4)
    c600:	00008a07 	andeq	r8, r0, r7, lsl #20
    c604:	030c1800 	movweq	r1, #51200	; 0xc800
    c608:	04000003 	streq	r0, [r0], #-3
    c60c:	012b0ac8 	smlawteq	fp, r8, sl, r0
    c610:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    c614:	00001d1c 	andeq	r1, r0, ip, lsl sp
    c618:	f01dca04 			; <UNDEFINED> instruction: 0xf01dca04
    c61c:	20000005 	andcs	r0, r0, r5
    c620:	001ce30c 	andseq	lr, ip, ip, lsl #6
    c624:	1dcc0400 	cfstrdne	mvd0, [ip]
    c628:	0000061b 	andeq	r0, r0, fp, lsl r6
    c62c:	0ed10c24 	cdpeq	12, 13, cr0, cr1, cr4, {1}
    c630:	cf040000 	svcgt	0x00040000
    c634:	0006400d 	andeq	r4, r6, sp
    c638:	d10c2800 	tstle	ip, r0, lsl #16
    c63c:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    c640:	065b09d0 			; <UNDEFINED> instruction: 0x065b09d0
    c644:	0f2c0000 	svceq	0x002c0000
    c648:	0062755f 	rsbeq	r7, r2, pc, asr r5
    c64c:	fa11d304 	blx	481264 <__ccfg+0x4612bc>
    c650:	30000002 	andcc	r0, r0, r2
    c654:	70755f0f 	rsbsvc	r5, r5, pc, lsl #30
    c658:	12d40400 	sbcsne	r0, r4, #0, 8
    c65c:	00000322 	andeq	r0, r0, r2, lsr #6
    c660:	755f0f38 	ldrbvc	r0, [pc, #-3896]	; b730 <__exidx_end+0x5d0c>
    c664:	d5040072 	strle	r0, [r4, #-114]	; 0xffffff8e
    c668:	00008a07 	andeq	r8, r0, r7, lsl #20
    c66c:	080c3c00 	stmdaeq	ip, {sl, fp, ip, sp}
    c670:	0400000f 	streq	r0, [r0], #-15
    c674:	066111d8 			; <UNDEFINED> instruction: 0x066111d8
    c678:	0c400000 	mareq	acc0, r0, r0
    c67c:	00000e51 	andeq	r0, r0, r1, asr lr
    c680:	7111d904 	tstvc	r1, r4, lsl #18
    c684:	43000006 	movwmi	r0, #6
    c688:	626c5f0f 	rsbvs	r5, ip, #15, 30	; 0x3c
    c68c:	11dc0400 	bicsne	r0, ip, r0, lsl #8
    c690:	000002fa 	strdeq	r0, [r0], -sl
    c694:	0b6f0c44 	bleq	1bcf7ac <__ccfg+0x1baf804>
    c698:	df040000 	svcle	0x00040000
    c69c:	00008a07 	andeq	r8, r0, r7, lsl #20
    c6a0:	830c4c00 	movwhi	r4, #52224	; 0xcc00
    c6a4:	04000004 	streq	r0, [r0], #-4
    c6a8:	00b10ae0 	adcseq	r0, r1, r0, ror #21
    c6ac:	0c500000 	mraeq	r0, r0, acc0
    c6b0:	00004740 	andeq	r4, r0, r0, asr #14
    c6b4:	8a12e304 	bhi	4c52cc <__ccfg+0x4a5324>
    c6b8:	54000004 	strpl	r0, [r0], #-4
    c6bc:	000b950c 	andeq	r9, fp, ip, lsl #10
    c6c0:	0ce70400 	cfstrdeq	mvd0, [r7]
    c6c4:	00000145 	andeq	r0, r0, r5, asr #2
    c6c8:	0a190c58 	beq	64f830 <__ccfg+0x62f888>
    c6cc:	e9040000 	stmdb	r4, {}	; <UNPREDICTABLE>
    c6d0:	00011f0e 	andeq	r1, r1, lr, lsl #30
    c6d4:	840c5c00 	strhi	r5, [ip], #-3072	; 0xfffff400
    c6d8:	0400000e 	streq	r0, [r0], #-14
    c6dc:	008a09ea 	addeq	r0, sl, sl, ror #19
    c6e0:	00640000 	rsbeq	r0, r4, r0
    c6e4:	008a0114 	addeq	r0, sl, r4, lsl r1
    c6e8:	048a0000 	streq	r0, [sl], #0
    c6ec:	8a150000 	bhi	54c6f4 <__ccfg+0x52c74c>
    c6f0:	15000004 	strne	r0, [r0, #-4]
    c6f4:	0000012b 	andeq	r0, r0, fp, lsr #2
    c6f8:	0005de15 	andeq	sp, r5, r5, lsl lr
    c6fc:	008a1500 	addeq	r1, sl, r0, lsl #10
    c700:	10000000 	andne	r0, r0, r0
    c704:	00049504 	andeq	r9, r4, r4, lsl #10
    c708:	048a0400 	streq	r0, [sl], #1024	; 0x400
    c70c:	4c160000 	ldcmi	0, cr0, [r6], {-0}
    c710:	2800000d 	stmdacs	r0, {r0, r2, r3}
    c714:	02650404 	rsbeq	r0, r5, #4, 8	; 0x4000000
    c718:	0005de08 	andeq	sp, r5, r8, lsl #28
    c71c:	08ff1700 	ldmeq	pc!, {r8, r9, sl, ip}^	; <UNPREDICTABLE>
    c720:	67040000 	strvs	r0, [r4, -r0]
    c724:	008a0702 	addeq	r0, sl, r2, lsl #14
    c728:	17000000 	strne	r0, [r0, -r0]
    c72c:	000007dd 	ldrdeq	r0, [r0], -sp
    c730:	0b026c04 	bleq	a7748 <__ccfg+0x877a0>
    c734:	000006cd 	andeq	r0, r0, sp, asr #13
    c738:	02ee1704 	rsceq	r1, lr, #4, 14	; 0x100000
    c73c:	6c040000 	stcvs	0, cr0, [r4], {-0}
    c740:	06cd1402 	strbeq	r1, [sp], r2, lsl #8
    c744:	17080000 	strne	r0, [r8, -r0]
    c748:	00000ef7 	strdeq	r0, [r0], -r7
    c74c:	1e026c04 	cdpne	12, 0, cr6, cr2, cr4, {0}
    c750:	000006cd 	andeq	r0, r0, sp, asr #13
    c754:	057a170c 	ldrbeq	r1, [sl, #-1804]!	; 0xfffff8f4
    c758:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
    c75c:	008a0802 	addeq	r0, sl, r2, lsl #16
    c760:	17100000 	ldrne	r0, [r0, -r0]
    c764:	000004cf 	andeq	r0, r0, pc, asr #9
    c768:	08026f04 	stmdaeq	r2, {r2, r8, r9, sl, fp, sp, lr}
    c76c:	000008cd 	andeq	r0, r0, sp, asr #17
    c770:	0e641714 	mcreq	7, 3, r1, cr4, cr4, {0}
    c774:	72040000 	andvc	r0, r4, #0
    c778:	008a0702 	addeq	r0, sl, r2, lsl #14
    c77c:	17300000 	ldrne	r0, [r0, -r0]!
    c780:	0000428e 	andeq	r4, r0, lr, lsl #5
    c784:	16027304 	strne	r7, [r2], -r4, lsl #6
    c788:	000008e3 	andeq	r0, r0, r3, ror #17
    c78c:	07851734 			; <UNDEFINED> instruction: 0x07851734
    c790:	75040000 	strvc	r0, [r4, #-0]
    c794:	008a0702 	addeq	r0, sl, r2, lsl #14
    c798:	17380000 	ldrne	r0, [r8, -r0]!
    c79c:	0000087f 	andeq	r0, r0, pc, ror r8
    c7a0:	0a027704 	beq	aa3b8 <__ccfg+0x8a410>
    c7a4:	000008f5 	strdeq	r0, [r0], -r5
    c7a8:	0352173c 	cmpeq	r2, #60, 14	; 0xf00000
    c7ac:	7a040000 	bvc	10c7b4 <__ccfg+0xec80c>
    c7b0:	01ab1302 			; <UNDEFINED> instruction: 0x01ab1302
    c7b4:	17400000 	strbne	r0, [r0, -r0]
    c7b8:	0000040d 	andeq	r0, r0, sp, lsl #8
    c7bc:	07027b04 	streq	r7, [r2, -r4, lsl #22]
    c7c0:	0000008a 	andeq	r0, r0, sl, lsl #1
    c7c4:	06041744 	streq	r1, [r4], -r4, asr #14
    c7c8:	7c040000 	stcvc	0, cr0, [r4], {-0}
    c7cc:	01ab1302 			; <UNDEFINED> instruction: 0x01ab1302
    c7d0:	17480000 	strbne	r0, [r8, -r0]
    c7d4:	0000081a 	andeq	r0, r0, sl, lsl r8
    c7d8:	14027d04 	strne	r7, [r2], #-3332	; 0xfffff2fc
    c7dc:	000008fb 	strdeq	r0, [r0], -fp
    c7e0:	0b55174c 	bleq	1552518 <__ccfg+0x1532570>
    c7e4:	80040000 	andhi	r0, r4, r0
    c7e8:	008a0702 	addeq	r0, sl, r2, lsl #14
    c7ec:	17500000 	ldrbne	r0, [r0, -r0]
    c7f0:	00000c4e 	andeq	r0, r0, lr, asr #24
    c7f4:	09028104 	stmdbeq	r2, {r2, r8, pc}
    c7f8:	000005de 	ldrdeq	r0, [r0], -lr
    c7fc:	0c681754 	stcleq	7, cr1, [r8], #-336	; 0xfffffeb0
    c800:	a4040000 	strge	r0, [r4], #-0
    c804:	08a80702 	stmiaeq	r8!, {r1, r8, r9, sl}
    c808:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
    c80c:	00000a11 	andeq	r0, r0, r1, lsl sl
    c810:	1302a804 	movwne	sl, #10244	; 0x2804
    c814:	000002dc 	ldrdeq	r0, [r0], -ip
    c818:	a9180148 	ldmdbge	r8, {r3, r6, r8}
    c81c:	04000006 	streq	r0, [r0], #-6
    c820:	991202a9 	ldmdbls	r2, {r0, r3, r5, r7, r9}
    c824:	4c000002 	stcmi	0, cr0, [r0], {2}
    c828:	06901801 	ldreq	r1, [r0], r1, lsl #16
    c82c:	ad040000 	stcge	0, cr0, [r4, #-0]
    c830:	090d0c02 	stmdbeq	sp, {r1, sl, fp}
    c834:	02dc0000 	sbcseq	r0, ip, #0
    c838:	000cd018 	andeq	sp, ip, r8, lsl r0
    c83c:	02b20400 	adcseq	r0, r2, #0, 8
    c840:	00068e10 	andeq	r8, r6, r0, lsl lr
    c844:	1802e000 	stmdane	r2, {sp, lr, pc}
    c848:	00000aa1 	andeq	r0, r0, r1, lsr #21
    c84c:	0a02b404 	beq	b9864 <__ccfg+0x998bc>
    c850:	00000919 	andeq	r0, r0, r9, lsl r9
    c854:	100002ec 	andne	r0, r0, ip, ror #5
    c858:	0005e404 	andeq	lr, r5, r4, lsl #8
    c85c:	08010200 	stmdaeq	r1, {r9}
    c860:	00000c5f 	andeq	r0, r0, pc, asr ip
    c864:	0005e404 	andeq	lr, r5, r4, lsl #8
    c868:	6b041000 	blvs	110870 <__ccfg+0xf08c8>
    c86c:	14000004 	strne	r0, [r0], #-4
    c870:	00008a01 	andeq	r8, r0, r1, lsl #20
    c874:	00061500 	andeq	r1, r6, r0, lsl #10
    c878:	048a1500 	streq	r1, [sl], #1280	; 0x500
    c87c:	2b150000 	blcs	54c884 <__ccfg+0x52c8dc>
    c880:	15000001 	strne	r0, [r0, #-1]
    c884:	00000615 	andeq	r0, r0, r5, lsl r6
    c888:	00008a15 	andeq	r8, r0, r5, lsl sl
    c88c:	04100000 	ldreq	r0, [r0], #-0
    c890:	000005eb 	andeq	r0, r0, fp, ror #11
    c894:	05f60410 	ldrbeq	r0, [r6, #1040]!	; 0x410
    c898:	01140000 	tsteq	r4, r0
    c89c:	000000bd 	strheq	r0, [r0], -sp
    c8a0:	00000640 	andeq	r0, r0, r0, asr #12
    c8a4:	00048a15 	andeq	r8, r4, r5, lsl sl
    c8a8:	012b1500 			; <UNDEFINED> instruction: 0x012b1500
    c8ac:	bd150000 	ldclt	0, cr0, [r5, #-0]
    c8b0:	15000000 	strne	r0, [r0, #-0]
    c8b4:	0000008a 	andeq	r0, r0, sl, lsl #1
    c8b8:	21041000 	mrscs	r1, (UNDEF: 4)
    c8bc:	14000006 	strne	r0, [r0], #-6
    c8c0:	00008a01 	andeq	r8, r0, r1, lsl #20
    c8c4:	00065b00 	andeq	r5, r6, r0, lsl #22
    c8c8:	048a1500 	streq	r1, [sl], #1280	; 0x500
    c8cc:	2b150000 	blcs	54c8d4 <__ccfg+0x52c92c>
    c8d0:	00000001 	andeq	r0, r0, r1
    c8d4:	06460410 			; <UNDEFINED> instruction: 0x06460410
    c8d8:	51090000 	mrspl	r0, (UNDEF: 9)
    c8dc:	71000000 	mrsvc	r0, (UNDEF: 0)
    c8e0:	0a000006 	beq	c900 <__exidx_end+0x6edc>
    c8e4:	00000091 	muleq	r0, r1, r0
    c8e8:	51090002 	tstpl	r9, r2
    c8ec:	81000000 	mrshi	r0, (UNDEF: 0)
    c8f0:	0a000006 	beq	c910 <__exidx_end+0x6eec>
    c8f4:	00000091 	muleq	r0, r1, r0
    c8f8:	70060000 	andvc	r0, r6, r0
    c8fc:	04000004 	streq	r0, [r0], #-4
    c900:	281a0124 	ldmdacs	sl, {r2, r5, r8}
    c904:	19000003 	stmdbne	r0, {r0, r1}
    c908:	00000cca 	andeq	r0, r0, sl, asr #25
    c90c:	0128040c 			; <UNDEFINED> instruction: 0x0128040c
    c910:	0006c708 	andeq	ip, r6, r8, lsl #14
    c914:	0eb11700 	cdpeq	7, 11, cr1, cr1, cr0, {0}
    c918:	2a040000 	bcs	10c920 <__ccfg+0xec978>
    c91c:	06c71101 	strbeq	r1, [r7], r1, lsl #2
    c920:	17000000 	strne	r0, [r0, -r0]
    c924:	00000bc9 	andeq	r0, r0, r9, asr #23
    c928:	07012b04 	streq	r2, [r1, -r4, lsl #22]
    c92c:	0000008a 	andeq	r0, r0, sl, lsl #1
    c930:	076d1704 	strbeq	r1, [sp, -r4, lsl #14]!
    c934:	2c040000 	stccs	0, cr0, [r4], {-0}
    c938:	06cd0b01 	strbeq	r0, [sp], r1, lsl #22
    c93c:	00080000 	andeq	r0, r8, r0
    c940:	068e0410 	pkhbteq	r0, lr, r0, lsl #8
    c944:	04100000 	ldreq	r0, [r0], #-0
    c948:	00000681 	andeq	r0, r0, r1, lsl #13
    c94c:	0003dc19 	andeq	sp, r3, r9, lsl ip
    c950:	44040e00 	strmi	r0, [r4], #-3584	; 0xfffff200
    c954:	070c0801 	streq	r0, [ip, -r1, lsl #16]
    c958:	38170000 	ldmdacc	r7, {}	; <UNPREDICTABLE>
    c95c:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    c960:	0c120145 	ldfeqs	f0, [r2], {69}	; 0x45
    c964:	00000007 	andeq	r0, r0, r7
    c968:	00082c17 	andeq	r2, r8, r7, lsl ip
    c96c:	01460400 	cmpeq	r6, r0, lsl #8
    c970:	00070c12 	andeq	r0, r7, r2, lsl ip
    c974:	ea170600 	b	5ce17c <__ccfg+0x5ae1d4>
    c978:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    c97c:	64120147 	ldrvs	r0, [r2], #-327	; 0xfffffeb9
    c980:	0c000000 	stceq	0, cr0, [r0], {-0}
    c984:	00640900 	rsbeq	r0, r4, r0, lsl #18
    c988:	071c0000 	ldreq	r0, [ip, -r0]
    c98c:	910a0000 	mrsls	r0, (UNDEF: 10)
    c990:	02000000 	andeq	r0, r0, #0
    c994:	04d01a00 	ldrbeq	r1, [r0], #2560	; 0xa00
    c998:	31070285 	smlabbcc	r7, r5, r2, r0
    c99c:	17000008 	strne	r0, [r0, -r8]
    c9a0:	00000e57 	andeq	r0, r0, r7, asr lr
    c9a4:	18028704 	stmdane	r2, {r2, r8, r9, sl, pc}
    c9a8:	00000091 	muleq	r0, r1, r0
    c9ac:	0cd81700 	ldcleq	7, cr1, [r8], {0}
    c9b0:	88040000 	stmdahi	r4, {}	; <UNPREDICTABLE>
    c9b4:	05de1202 	ldrbeq	r1, [lr, #514]	; 0x202
    c9b8:	17040000 	strne	r0, [r4, -r0]
    c9bc:	0000043a 	andeq	r0, r0, sl, lsr r4
    c9c0:	10028904 	andne	r8, r2, r4, lsl #18
    c9c4:	00000831 	andeq	r0, r0, r1, lsr r8
    c9c8:	0b3e1708 	bleq	f925f0 <__ccfg+0xf72648>
    c9cc:	8a040000 	bhi	10c9d4 <__ccfg+0xeca2c>
    c9d0:	01c11702 	biceq	r1, r1, r2, lsl #14
    c9d4:	17240000 	strne	r0, [r4, -r0]!
    c9d8:	000007e4 	andeq	r0, r0, r4, ror #15
    c9dc:	0f028b04 	svceq	0x00028b04
    c9e0:	0000008a 	andeq	r0, r0, sl, lsl #1
    c9e4:	0eac1748 	cdpeq	7, 10, cr1, cr12, cr8, {2}
    c9e8:	8c040000 	stchi	0, cr0, [r4], {-0}
    c9ec:	00832c02 	addeq	r2, r3, r2, lsl #24
    c9f0:	17500000 	ldrbne	r0, [r0, -r0]
    c9f4:	00000076 	andeq	r0, r0, r6, ror r0
    c9f8:	1a028d04 	bne	afe10 <__ccfg+0x8fe68>
    c9fc:	000006d3 	ldrdeq	r0, [r0], -r3
    ca00:	06341758 			; <UNDEFINED> instruction: 0x06341758
    ca04:	8e040000 	cdphi	0, 0, cr0, cr4, cr0, {0}
    ca08:	011f1602 	tsteq	pc, r2, lsl #12
    ca0c:	17680000 	strbne	r0, [r8, -r0]!
    ca10:	00000ce5 	andeq	r0, r0, r5, ror #25
    ca14:	16028f04 	strne	r8, [r2], -r4, lsl #30
    ca18:	0000011f 	andeq	r0, r0, pc, lsl r1
    ca1c:	00681770 	rsbeq	r1, r8, r0, ror r7
    ca20:	90040000 	andls	r0, r4, r0
    ca24:	011f1602 	tsteq	pc, r2, lsl #12
    ca28:	17780000 	ldrbne	r0, [r8, -r0]!
    ca2c:	00000b65 	andeq	r0, r0, r5, ror #22
    ca30:	10029104 	andne	r9, r2, r4, lsl #2
    ca34:	00000841 	andeq	r0, r0, r1, asr #16
    ca38:	04171780 	ldreq	r1, [r7], #-1920	; 0xfffff880
    ca3c:	92040000 	andls	r0, r4, #0
    ca40:	08511002 	ldmdaeq	r1, {r1, ip}^
    ca44:	17880000 	strne	r0, [r8, r0]
    ca48:	00000c88 	andeq	r0, r0, r8, lsl #25
    ca4c:	0f029304 	svceq	0x00029304
    ca50:	0000008a 	andeq	r0, r0, sl, lsl #1
    ca54:	02a317a0 	adceq	r1, r3, #160, 14	; 0x2800000
    ca58:	94040000 	strls	r0, [r4], #-0
    ca5c:	011f1602 	tsteq	pc, r2, lsl #12
    ca60:	17a40000 	strne	r0, [r4, r0]!
    ca64:	0000069a 	muleq	r0, sl, r6
    ca68:	16029504 	strne	r9, [r2], -r4, lsl #10
    ca6c:	0000011f 	andeq	r0, r0, pc, lsl r1
    ca70:	05b617ac 	ldreq	r1, [r6, #1964]!	; 0x7ac
    ca74:	96040000 	strls	r0, [r4], -r0
    ca78:	011f1602 	tsteq	pc, r2, lsl #12
    ca7c:	17b40000 	ldrne	r0, [r4, r0]!
    ca80:	00000845 	andeq	r0, r0, r5, asr #16
    ca84:	16029704 	strne	r9, [r2], -r4, lsl #14
    ca88:	0000011f 	andeq	r0, r0, pc, lsl r1
    ca8c:	062317bc 			; <UNDEFINED> instruction: 0x062317bc
    ca90:	98040000 	stmdals	r4, {}	; <UNPREDICTABLE>
    ca94:	011f1602 	tsteq	pc, r2, lsl #12
    ca98:	17c40000 	strbne	r0, [r4, r0]
    ca9c:	000008fd 	strdeq	r0, [r0], -sp
    caa0:	08029904 	stmdaeq	r2, {r2, r8, fp, ip, pc}
    caa4:	0000008a 	andeq	r0, r0, sl, lsl #1
    caa8:	e40900cc 	str	r0, [r9], #-204	; 0xffffff34
    caac:	41000005 	tstmi	r0, r5
    cab0:	0a000008 	beq	cad8 <__exidx_end+0x70b4>
    cab4:	00000091 	muleq	r0, r1, r0
    cab8:	e4090019 	str	r0, [r9], #-25	; 0xffffffe7
    cabc:	51000005 	tstpl	r0, r5
    cac0:	0a000008 	beq	cae8 <__exidx_end+0x70c4>
    cac4:	00000091 	muleq	r0, r1, r0
    cac8:	e4090007 	str	r0, [r9], #-7
    cacc:	61000005 	tstvs	r0, r5
    cad0:	0a000008 	beq	caf8 <__exidx_end+0x70d4>
    cad4:	00000091 	muleq	r0, r1, r0
    cad8:	f01a0017 			; <UNDEFINED> instruction: 0xf01a0017
    cadc:	07029e04 	streq	r9, [r2, -r4, lsl #28]
    cae0:	00000888 	andeq	r0, r0, r8, lsl #17
    cae4:	0003c217 	andeq	ip, r3, r7, lsl r2
    cae8:	02a10400 	adceq	r0, r1, #0, 8
    caec:	0008881b 	andeq	r8, r8, fp, lsl r8
    caf0:	ff170000 			; <UNDEFINED> instruction: 0xff170000
    caf4:	0400000e 	streq	r0, [r0], #-14
    caf8:	981802a2 	ldmdals	r8, {r1, r5, r7, r9}
    cafc:	78000008 	stmdavc	r0, {r3}
    cb00:	03220900 			; <UNDEFINED> instruction: 0x03220900
    cb04:	08980000 	ldmeq	r8, {}	; <UNPREDICTABLE>
    cb08:	910a0000 	mrsls	r0, (UNDEF: 10)
    cb0c:	1d000000 	stcne	0, cr0, [r0, #-0]
    cb10:	00910900 	addseq	r0, r1, r0, lsl #18
    cb14:	08a80000 	stmiaeq	r8!, {}	; <UNPREDICTABLE>
    cb18:	910a0000 	mrsls	r0, (UNDEF: 10)
    cb1c:	1d000000 	stcne	0, cr0, [r0, #-0]
    cb20:	04f01b00 	ldrbteq	r1, [r0], #2816	; 0xb00
    cb24:	cd030283 	sfmgt	f0, 4, [r3, #-524]	; 0xfffffdf4
    cb28:	1c000008 	stcne	0, cr0, [r0], {8}
    cb2c:	00000d4c 	andeq	r0, r0, ip, asr #26
    cb30:	0b029a04 	bleq	b3348 <__ccfg+0x933a0>
    cb34:	0000071c 	andeq	r0, r0, ip, lsl r7
    cb38:	000b4d1c 	andeq	r4, fp, ip, lsl sp
    cb3c:	02a30400 	adceq	r0, r3, #0, 8
    cb40:	0008610b 	andeq	r6, r8, fp, lsl #2
    cb44:	e4090000 	str	r0, [r9], #-0
    cb48:	dd000005 	stcle	0, cr0, [r0, #-20]	; 0xffffffec
    cb4c:	0a000008 	beq	cb74 <__exidx_end+0x7150>
    cb50:	00000091 	muleq	r0, r1, r0
    cb54:	b71d0018 			; <UNDEFINED> instruction: 0xb71d0018
    cb58:	0100000e 	tsteq	r0, lr
    cb5c:	08dd0410 	ldmeq	sp, {r4, sl}^
    cb60:	011e0000 	tsteq	lr, r0
    cb64:	000008f5 	strdeq	r0, [r0], -r5
    cb68:	00048a15 	andeq	r8, r4, r5, lsl sl
    cb6c:	04100000 	ldreq	r0, [r0], #-0
    cb70:	000008e9 	andeq	r0, r0, r9, ror #17
    cb74:	01ab0410 			; <UNDEFINED> instruction: 0x01ab0410
    cb78:	011e0000 	tsteq	lr, r0
    cb7c:	0000090d 	andeq	r0, r0, sp, lsl #18
    cb80:	00008a15 	andeq	r8, r0, r5, lsl sl
    cb84:	04100000 	ldreq	r0, [r0], #-0
    cb88:	00000913 	andeq	r0, r0, r3, lsl r9
    cb8c:	09010410 	stmdbeq	r1, {r4, sl}
    cb90:	81090000 	mrshi	r0, (UNDEF: 9)
    cb94:	29000006 	stmdbcs	r0, {r1, r2}
    cb98:	0a000009 	beq	cbc4 <__exidx_end+0x71a0>
    cb9c:	00000091 	muleq	r0, r1, r0
    cba0:	bd1f0002 	ldclt	0, cr0, [pc, #-8]	; cba0 <__exidx_end+0x717c>
    cba4:	0400000a 	streq	r0, [r0], #-10
    cba8:	8a170333 	bhi	5cd87c <__ccfg+0x5ad8d4>
    cbac:	01000004 	tsteq	r0, r4
    cbb0:	0ab61f01 	beq	fed947bc <_estack+0xded8f7bc>
    cbb4:	34040000 	strcc	r0, [r4], #-0
    cbb8:	04901d03 	ldreq	r1, [r0], #3331	; 0xd03
    cbbc:	01010000 	mrseq	r0, (UNDEF: 1)
    cbc0:	0024ce03 	eoreq	ip, r4, r3, lsl #28
    cbc4:	123b0600 	eorsne	r0, fp, #0, 12
    cbc8:	0000006b 	andeq	r0, r0, fp, rrx
    cbcc:	4006080b 	andmi	r0, r6, fp, lsl #16
    cbd0:	00097709 	andeq	r7, r9, r9, lsl #14
    cbd4:	1fd10c00 	svcne	0x00d10c00
    cbd8:	41060000 	mrsmi	r0, (UNDEF: 6)
    cbdc:	0009770d 	andeq	r7, r9, sp, lsl #14
    cbe0:	140c0000 	strne	r0, [ip], #-0
    cbe4:	06000022 	streq	r0, [r0], -r2, lsr #32
    cbe8:	09770d42 	ldmdbeq	r7!, {r1, r6, r8, sl, fp}^
    cbec:	00040000 	andeq	r0, r4, r0
    cbf0:	00450410 	subeq	r0, r5, r0, lsl r4
    cbf4:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
    cbf8:	06000027 	streq	r0, [r0], -r7, lsr #32
    cbfc:	09530343 	ldmdbeq	r3, {r0, r1, r6, r8, r9}^
    cc00:	95030000 	strls	r0, [r3, #-0]
    cc04:	07000022 	streq	r0, [r0, -r2, lsr #32]
    cc08:	09952b3c 	ldmibeq	r5, {r2, r3, r4, r5, r8, r9, fp, sp}
    cc0c:	340e0000 	strcc	r0, [lr], #-0
    cc10:	10000025 	andne	r0, r0, r5, lsr #32
    cc14:	f1156f07 			; <UNDEFINED> instruction: 0xf1156f07
    cc18:	0c000009 	stceq	0, cr0, [r0], {9}
    cc1c:	00001f00 	andeq	r1, r0, r0, lsl #30
    cc20:	580d7007 	stmdapl	sp, {r0, r1, r2, ip, sp, lr}
    cc24:	00000000 	andeq	r0, r0, r0
    cc28:	0007730c 	andeq	r7, r7, ip, lsl #6
    cc2c:	0d710700 	ldcleq	7, cr0, [r1, #-0]
    cc30:	00000058 	andeq	r0, r0, r8, asr r0
    cc34:	22730c02 	rsbscs	r0, r3, #512	; 0x200
    cc38:	74070000 	strvc	r0, [r7], #-0
    cc3c:	000b2813 	andeq	r2, fp, r3, lsl r8
    cc40:	020c0400 	andeq	r0, ip, #0, 8
    cc44:	07000020 	streq	r0, [r0, -r0, lsr #32]
    cc48:	09470c75 	stmdbeq	r7, {r0, r2, r4, r5, r6, sl, fp}^
    cc4c:	0c080000 	stceq	0, cr0, [r8], {-0}
    cc50:	000022a3 	andeq	r2, r0, r3, lsr #5
    cc54:	b4067d07 	strlt	r7, [r6], #-3335	; 0xfffff2f9
    cc58:	0c00000a 	stceq	0, cr0, [r0], {10}
    cc5c:	0021ed0c 	eoreq	lr, r1, ip, lsl #26
    cc60:	06810700 	streq	r0, [r1], r0, lsl #14
    cc64:	00000afe 	strdeq	r0, [r0], -lr
    cc68:	7603000d 	strvc	r0, [r3], -sp
    cc6c:	07000020 	streq	r0, [r0, -r0, lsr #32]
    cc70:	09fd2a3f 	ldmibeq	sp!, {r0, r1, r2, r3, r4, r5, r9, fp, sp}^
    cc74:	690e0000 	stmdbvs	lr, {}	; <UNPREDICTABLE>
    cc78:	18000020 	stmdane	r0, {r5}
    cc7c:	b415e007 	ldrlt	lr, [r5], #-7
    cc80:	0c00000a 	stceq	0, cr0, [r0], {10}
    cc84:	00001f00 	andeq	r1, r0, r0, lsl #30
    cc88:	580de107 	stmdapl	sp, {r0, r1, r2, r8, sp, lr, pc}
    cc8c:	00000000 	andeq	r0, r0, r0
    cc90:	0007730c 	andeq	r7, r7, ip, lsl #6
    cc94:	0de20700 	stcleq	7, cr0, [r2]
    cc98:	00000058 	andeq	r0, r0, r8, asr r0
    cc9c:	22730c02 	rsbscs	r0, r3, #512	; 0x200
    cca0:	e5070000 	str	r0, [r7, #-0]
    cca4:	000b2813 	andeq	r2, fp, r3, lsl r8
    cca8:	020c0400 	andeq	r0, ip, #0, 8
    ccac:	07000020 	streq	r0, [r0, -r0, lsr #32]
    ccb0:	09470ce6 	stmdbeq	r7, {r1, r2, r5, r6, r7, sl, fp}^
    ccb4:	0c080000 	stceq	0, cr0, [r8], {-0}
    ccb8:	000022a3 	andeq	r2, r0, r3, lsr #5
    ccbc:	3406ee07 	strcc	lr, [r6], #-3591	; 0xfffff1f9
    ccc0:	0c00000b 	stceq	0, cr0, [r0], {11}
    ccc4:	0021ed0c 	eoreq	lr, r1, ip, lsl #26
    ccc8:	06f20700 	ldrbteq	r0, [r2], r0, lsl #14
    cccc:	00000b7e 	andeq	r0, r0, lr, ror fp
    ccd0:	263f0c0d 	ldrtcs	r0, [pc], -sp, lsl #24
    ccd4:	f3070000 	vhadd.u8	d0, d7, d0
    ccd8:	0000580d 	andeq	r5, r0, sp, lsl #16
    ccdc:	970c0e00 	strls	r0, [ip, -r0, lsl #28]
    cce0:	07000023 	streq	r0, [r0, -r3, lsr #32]
    cce4:	00580df4 	ldrsheq	r0, [r8], #-212	; 0xffffff2c
    cce8:	0c100000 	ldceq	0, cr0, [r0], {-0}
    ccec:	000020a9 	andeq	r2, r0, r9, lsr #1
    ccf0:	a806fa07 	stmdage	r6, {r0, r1, r2, r9, fp, ip, sp, lr, pc}
    ccf4:	1200000b 	andne	r0, r0, #11
    ccf8:	0022530c 	eoreq	r5, r2, ip, lsl #6
    ccfc:	0cfb0700 	ldcleq	7, cr0, [fp]
    cd00:	00000045 	andeq	r0, r0, r5, asr #32
    cd04:	25a30c13 	strcs	r0, [r3, #3091]!	; 0xc13
    cd08:	fc070000 	stc2	0, cr0, [r7], {-0}
    cd0c:	0000450c 	andeq	r4, r0, ip, lsl #10
    cd10:	ac0c1400 	cfstrsge	mvf1, [ip], {-0}
    cd14:	07000025 	streq	r0, [r0, -r5, lsr #32]
    cd18:	00450cfd 	strdeq	r0, [r5], #-205	; 0xffffff33
    cd1c:	0c150000 	ldceq	0, cr0, [r5], {-0}
    cd20:	000025b5 			; <UNDEFINED> instruction: 0x000025b5
    cd24:	580dfe07 	stmdapl	sp, {r0, r1, r2, r9, sl, fp, ip, sp, lr, pc}
    cd28:	16000000 	strne	r0, [r0], -r0
    cd2c:	07010b00 	streq	r0, [r1, -r0, lsl #22]
    cd30:	0afe0476 	beq	fff8df10 <_estack+0xdff88f10>
    cd34:	56200000 	strtpl	r0, [r0], -r0
    cd38:	07000027 	streq	r0, [r0, -r7, lsr #32]
    cd3c:	00450f77 	subeq	r0, r5, r7, ror pc
    cd40:	04010000 	streq	r0, [r1], #-0
    cd44:	f4200004 	vld4.8	{d0-d3}, [r0], r4
    cd48:	07000020 	streq	r0, [r0, -r0, lsr #32]
    cd4c:	00450f78 	subeq	r0, r5, r8, ror pc
    cd50:	01010000 	mrseq	r0, (UNDEF: 1)
    cd54:	b4200003 	strtlt	r0, [r0], #-3
    cd58:	07000021 	streq	r0, [r0, -r1, lsr #32]
    cd5c:	00450f7a 	subeq	r0, r5, sl, ror pc
    cd60:	02010000 	andeq	r0, r1, #0
    cd64:	6f200001 	svcvs	0x00200001
    cd68:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    cd6c:	00450f7b 	subeq	r0, r5, fp, ror pc
    cd70:	01010000 	mrseq	r0, (UNDEF: 1)
    cd74:	0b000000 	bleq	cd7c <__exidx_end+0x7358>
    cd78:	047e0701 	ldrbteq	r0, [lr], #-1793	; 0xfffff8ff
    cd7c:	00000b28 	andeq	r0, r0, r8, lsr #22
    cd80:	0025d120 	eoreq	sp, r5, r0, lsr #2
    cd84:	0f7f0700 	svceq	0x007f0700
    cd88:	00000045 	andeq	r0, r0, r5, asr #32
    cd8c:	00040401 	andeq	r0, r4, r1, lsl #8
    cd90:	00272520 	eoreq	r2, r7, r0, lsr #10
    cd94:	0f800700 	svceq	0x00800700
    cd98:	00000045 	andeq	r0, r0, r5, asr #32
    cd9c:	00000401 	andeq	r0, r0, r1, lsl #8
    cda0:	89041000 	stmdbhi	r4, {ip}
    cda4:	10000009 	andne	r0, r0, r9
    cda8:	00006b04 	andeq	r6, r0, r4, lsl #22
    cdac:	07010b00 	streq	r0, [r1, -r0, lsl #22]
    cdb0:	0b7e04e7 	bleq	1f8e154 <__ccfg+0x1f6e1ac>
    cdb4:	56200000 	strtpl	r0, [r0], -r0
    cdb8:	07000027 	streq	r0, [r0, -r7, lsr #32]
    cdbc:	00450fe8 	subeq	r0, r5, r8, ror #31
    cdc0:	04010000 	streq	r0, [r1], #-0
    cdc4:	f4200004 	vld4.8	{d0-d3}, [r0], r4
    cdc8:	07000020 	streq	r0, [r0, -r0, lsr #32]
    cdcc:	00450fe9 	subeq	r0, r5, r9, ror #31
    cdd0:	01010000 	mrseq	r0, (UNDEF: 1)
    cdd4:	b4200003 	strtlt	r0, [r0], #-3
    cdd8:	07000021 	streq	r0, [r0, -r1, lsr #32]
    cddc:	00450feb 	subeq	r0, r5, fp, ror #31
    cde0:	02010000 	andeq	r0, r1, #0
    cde4:	6f200001 	svcvs	0x00200001
    cde8:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    cdec:	00450fec 	subeq	r0, r5, ip, ror #31
    cdf0:	01010000 	mrseq	r0, (UNDEF: 1)
    cdf4:	0b000000 	bleq	cdfc <__exidx_end+0x73d8>
    cdf8:	04ef0701 	strbteq	r0, [pc], #1793	; ce00 <__exidx_end+0x73dc>
    cdfc:	00000ba8 	andeq	r0, r0, r8, lsr #23
    ce00:	0025d120 	eoreq	sp, r5, r0, lsr #2
    ce04:	0ff00700 	svceq	0x00f00700
    ce08:	00000045 	andeq	r0, r0, r5, asr #32
    ce0c:	00040401 	andeq	r0, r4, r1, lsl #8
    ce10:	00272520 	eoreq	r2, r7, r0, lsr #10
    ce14:	0ff10700 	svceq	0x00f10700
    ce18:	00000045 	andeq	r0, r0, r5, asr #32
    ce1c:	00000401 	andeq	r0, r0, r1, lsl #8
    ce20:	07010b00 	streq	r0, [r1, -r0, lsl #22]
    ce24:	0bd204f5 	bleq	ff48e200 <_estack+0xdf489200>
    ce28:	de200000 	cdple	0, 2, cr0, cr0, cr0, {0}
    ce2c:	07000020 	streq	r0, [r0, -r0, lsr #32]
    ce30:	00450ff6 	strdeq	r0, [r5], #-246	; 0xffffff0a
    ce34:	01010000 	mrseq	r0, (UNDEF: 1)
    ce38:	3f200007 	svccc	0x00200007
    ce3c:	07000027 	streq	r0, [r0, -r7, lsr #32]
    ce40:	00450ff8 	strdeq	r0, [r5], #-248	; 0xffffff08
    ce44:	06010000 	streq	r0, [r1], -r0
    ce48:	10000001 	andne	r0, r0, r1
    ce4c:	00097d04 	andeq	r7, r9, r4, lsl #26
    ce50:	26140300 	ldrcs	r0, [r4], -r0, lsl #6
    ce54:	3d080000 	stccc	0, cr0, [r8, #-0]
    ce58:	000be42f 	andeq	lr, fp, pc, lsr #8
    ce5c:	26260e00 	strtcs	r0, [r6], -r0, lsl #28
    ce60:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    ce64:	0c741578 	cfldr64eq	mvdx1, [r4], #-480	; 0xfffffe20
    ce68:	000c0000 	andeq	r0, ip, r0
    ce6c:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    ce70:	00580d79 	subseq	r0, r8, r9, ror sp
    ce74:	0c000000 	stceq	0, cr0, [r0], {-0}
    ce78:	00000773 	andeq	r0, r0, r3, ror r7
    ce7c:	580d7a08 	stmdapl	sp, {r3, r9, fp, ip, sp, lr}
    ce80:	02000000 	andeq	r0, r0, #0
    ce84:	0022730c 	eoreq	r7, r2, ip, lsl #6
    ce88:	137d0800 	cmnne	sp, #0, 16
    ce8c:	00000b28 	andeq	r0, r0, r8, lsr #22
    ce90:	20020c04 	andcs	r0, r2, r4, lsl #24
    ce94:	7e080000 	cdpvc	0, 0, cr0, cr8, cr0, {0}
    ce98:	0009470c 	andeq	r4, r9, ip, lsl #14
    ce9c:	a30c0800 	movwge	r0, #51200	; 0xc800
    cea0:	08000022 	stmdaeq	r0, {r1, r5}
    cea4:	0e670686 	cdpeq	6, 6, cr0, cr7, cr6, {4}
    cea8:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    ceac:	000021ed 	andeq	r2, r0, sp, ror #3
    ceb0:	b1068a08 	tstlt	r6, r8, lsl #20
    ceb4:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    ceb8:	0020470c 	eoreq	r4, r0, ip, lsl #14
    cebc:	06930800 	ldreq	r0, [r3], r0, lsl #16
    cec0:	00000edb 	ldrdeq	r0, [r0], -fp
    cec4:	25ca0c0e 	strbcs	r0, [sl, #3086]	; 0xc0e
    cec8:	94080000 	strls	r0, [r8], #-0
    cecc:	0000450c 	andeq	r4, r0, ip, lsl #10
    ced0:	290c0f00 	stmdbcs	ip, {r8, r9, sl, fp}
    ced4:	08000023 	stmdaeq	r0, {r0, r1, r5}
    ced8:	006b0d95 	mlseq	fp, r5, sp, r0
    cedc:	0c100000 	ldceq	0, cr0, [r0], {-0}
    cee0:	00001f2d 	andeq	r1, r0, sp, lsr #30
    cee4:	770d9608 	strvc	r9, [sp, -r8, lsl #12]
    cee8:	14000009 	strne	r0, [r0], #-9
    ceec:	24800300 	strcs	r0, [r0], #768	; 0x300
    cef0:	3e080000 	cdpcc	0, 0, cr0, cr8, cr0, {0}
    cef4:	000c802f 	andeq	r8, ip, pc, lsr #32
    cef8:	21780e00 	cmncs	r8, r0, lsl #28
    cefc:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
    cf00:	0d5e159f 	cfldr64eq	mvdx1, [lr, #-636]	; 0xfffffd84
    cf04:	000c0000 	andeq	r0, ip, r0
    cf08:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    cf0c:	00580da0 	subseq	r0, r8, r0, lsr #27
    cf10:	0c000000 	stceq	0, cr0, [r0], {-0}
    cf14:	00000773 	andeq	r0, r0, r3, ror r7
    cf18:	580da108 	stmdapl	sp, {r3, r8, sp, pc}
    cf1c:	02000000 	andeq	r0, r0, #0
    cf20:	0022730c 	eoreq	r7, r2, ip, lsl #6
    cf24:	13a40800 			; <UNDEFINED> instruction: 0x13a40800
    cf28:	00000b28 	andeq	r0, r0, r8, lsr #22
    cf2c:	20020c04 	andcs	r0, r2, r4, lsl #24
    cf30:	a5080000 	strge	r0, [r8, #-0]
    cf34:	0009470c 	andeq	r4, r9, ip, lsl #14
    cf38:	a30c0800 	movwge	r0, #51200	; 0xc800
    cf3c:	08000022 	stmdaeq	r0, {r1, r5}
    cf40:	0f1506ad 	svceq	0x001506ad
    cf44:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    cf48:	000021ed 	andeq	r2, r0, sp, ror #3
    cf4c:	5f06b108 	svcpl	0x0006b108
    cf50:	0d00000f 	stceq	0, cr0, [r0, #-60]	; 0xffffffc4
    cf54:	0020470c 	eoreq	r4, r0, ip, lsl #14
    cf58:	06c30800 	strbeq	r0, [r3], r0, lsl #16
    cf5c:	00000f89 	andeq	r0, r0, r9, lsl #31
    cf60:	23de0c0e 	bicscs	r0, lr, #3584	; 0xe00
    cf64:	cd080000 	stcgt	0, cr0, [r8, #-0]
    cf68:	00101306 	andseq	r1, r0, r6, lsl #6
    cf6c:	290c0f00 	stmdbcs	ip, {r8, r9, sl, fp}
    cf70:	08000023 	stmdaeq	r0, {r0, r1, r5}
    cf74:	006b0dce 	rsbeq	r0, fp, lr, asr #27
    cf78:	0c100000 	ldceq	0, cr0, [r0], {-0}
    cf7c:	0000212c 	andeq	r2, r0, ip, lsr #2
    cf80:	450ccf08 	strmi	ip, [ip, #-3848]	; 0xfffff0f8
    cf84:	14000000 	strne	r0, [r0], #-0
    cf88:	0024300c 	eoreq	r3, r4, ip
    cf8c:	0cd10800 	ldcleq	8, cr0, [r1], {0}
    cf90:	00000045 	andeq	r0, r0, r5, asr #32
    cf94:	24390c15 	ldrtcs	r0, [r9], #-3093	; 0xfffff3eb
    cf98:	d2080000 	andle	r0, r8, #0
    cf9c:	0000450c 	andeq	r4, r0, ip, lsl #10
    cfa0:	8a0c1600 	bhi	3127a8 <__ccfg+0x2f2800>
    cfa4:	08000021 	stmdaeq	r0, {r0, r5}
    cfa8:	108d06db 	ldrdne	r0, [sp], fp
    cfac:	0c170000 	ldceq	0, cr0, [r7], {-0}
    cfb0:	00002679 	andeq	r2, r0, r9, ror r6
    cfb4:	470cdc08 	strmi	sp, [ip, -r8, lsl #24]
    cfb8:	18000009 	stmdane	r0, {r0, r3}
    cfbc:	0021be0c 	eoreq	fp, r1, ip, lsl #28
    cfc0:	11dd0800 	bicsne	r0, sp, r0, lsl #16
    cfc4:	00000bd2 	ldrdeq	r0, [r0], -r2
    cfc8:	1f920c1c 	svcne	0x00920c1c
    cfcc:	de080000 	cdple	0, 0, cr0, cr8, cr0, {0}
    cfd0:	0009770d 	andeq	r7, r9, sp, lsl #14
    cfd4:	03002000 	movweq	r2, #0
    cfd8:	00002461 	andeq	r2, r0, r1, ror #8
    cfdc:	6a3c4308 	bvs	f1dc04 <__ccfg+0xefdc5c>
    cfe0:	1900000d 	stmdbne	r0, {r0, r2, r3}
    cfe4:	00002442 	andeq	r2, r0, r2, asr #8
    cfe8:	021a0828 	andseq	r0, sl, #40, 16	; 0x280000
    cfec:	000e6715 	andeq	r6, lr, r5, lsl r7
    cff0:	1f001700 	svcne	0x00001700
    cff4:	1b080000 	blne	20cffc <__ccfg+0x1ed054>
    cff8:	00580d02 	subseq	r0, r8, r2, lsl #26
    cffc:	17000000 	strne	r0, [r0, -r0]
    d000:	00000773 	andeq	r0, r0, r3, ror r7
    d004:	0d021d08 	stceq	13, cr1, [r2, #-32]	; 0xffffffe0
    d008:	00000058 	andeq	r0, r0, r8, asr r0
    d00c:	22731702 	rsbscs	r1, r3, #524288	; 0x80000
    d010:	20080000 	andcs	r0, r8, r0
    d014:	0b281302 	bleq	a11c24 <__ccfg+0x9f1c7c>
    d018:	17040000 	strne	r0, [r4, -r0]
    d01c:	00002002 	andeq	r2, r0, r2
    d020:	0c022108 	stfeqs	f2, [r2], {8}
    d024:	00000947 	andeq	r0, r0, r7, asr #18
    d028:	22a31708 	adccs	r1, r3, #8, 14	; 0x200000
    d02c:	29080000 	stmdbcs	r8, {}	; <UNPREDICTABLE>
    d030:	10d70602 	sbcsne	r0, r7, r2, lsl #12
    d034:	170c0000 	strne	r0, [ip, -r0]
    d038:	000021ed 	andeq	r2, r0, sp, ror #3
    d03c:	06022d08 	streq	r2, [r2], -r8, lsl #26
    d040:	00001126 	andeq	r1, r0, r6, lsr #2
    d044:	1ef5170d 	cdpne	7, 15, cr1, cr5, cr13, {0}
    d048:	33080000 	movwcc	r0, #32768	; 0x8000
    d04c:	11530602 	cmpne	r3, r2, lsl #12
    d050:	170e0000 	strne	r0, [lr, -r0]
    d054:	0000225c 	andeq	r2, r0, ip, asr r2
    d058:	06023808 	streq	r3, [r2], -r8, lsl #16
    d05c:	00001180 	andeq	r1, r0, r0, lsl #3
    d060:	208b1710 	addcs	r1, fp, r0, lsl r7
    d064:	39080000 	stmdbcc	r8, {}	; <UNPREDICTABLE>
    d068:	00450c02 	subeq	r0, r5, r2, lsl #24
    d06c:	17140000 	ldrne	r0, [r4, -r0]
    d070:	0000231f 	andeq	r2, r0, pc, lsl r3
    d074:	06024108 	streq	r4, [r2], -r8, lsl #2
    d078:	000011ad 	andeq	r1, r0, sp, lsr #3
    d07c:	1ff71715 	svcne	0x00f71715
    d080:	55080000 	strpl	r0, [r8, #-0]
    d084:	11da0602 	bicsne	r0, sl, r2, lsl #12
    d088:	17160000 	ldrne	r0, [r6, -r0]
    d08c:	0000146a 	andeq	r1, r0, sl, ror #8
    d090:	06026808 	streq	r6, [r2], -r8, lsl #16
    d094:	0000123a 	andeq	r1, r0, sl, lsr r2
    d098:	20831718 	addcs	r1, r3, r8, lsl r7
    d09c:	69080000 	stmdbvs	r8, {}	; <UNPREDICTABLE>
    d0a0:	00580d02 	subseq	r0, r8, r2, lsl #26
    d0a4:	171a0000 	ldrne	r0, [sl, -r0]
    d0a8:	000024c1 	andeq	r2, r0, r1, asr #9
    d0ac:	0e026a08 	vmlaeq.f32	s12, s4, s16
    d0b0:	00000b2e 	andeq	r0, r0, lr, lsr #22
    d0b4:	1f32171c 	svcne	0x0032171c
    d0b8:	6c080000 	stcvs	0, cr0, [r8], {-0}
    d0bc:	00580d02 	subseq	r0, r8, r2, lsl #26
    d0c0:	17200000 	strne	r0, [r0, -r0]!
    d0c4:	0000227b 	andeq	r2, r0, fp, ror r2
    d0c8:	0c027008 	stceq	0, cr7, [r2], {8}
    d0cc:	00000024 	andeq	r0, r0, r4, lsr #32
    d0d0:	23b91722 			; <UNDEFINED> instruction: 0x23b91722
    d0d4:	73080000 	movwvc	r0, #32768	; 0x8000
    d0d8:	00450c02 	subeq	r0, r5, r2, lsl #24
    d0dc:	00240000 	eoreq	r0, r4, r0
    d0e0:	7f08010b 	svcvc	0x0008010b
    d0e4:	000eb104 	andeq	fp, lr, r4, lsl #2
    d0e8:	27562000 	ldrbcs	r2, [r6, -r0]
    d0ec:	80080000 	andhi	r0, r8, r0
    d0f0:	0000450f 	andeq	r4, r0, pc, lsl #10
    d0f4:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    d0f8:	20f42000 	rscscs	r2, r4, r0
    d0fc:	81080000 	mrshi	r0, (UNDEF: 8)
    d100:	0000450f 	andeq	r4, r0, pc, lsl #10
    d104:	03010100 	movweq	r0, #4352	; 0x1100
    d108:	21b42000 			; <UNDEFINED> instruction: 0x21b42000
    d10c:	83080000 	movwhi	r0, #32768	; 0x8000
    d110:	0000450f 	andeq	r4, r0, pc, lsl #10
    d114:	01020100 	mrseq	r0, (UNDEF: 18)
    d118:	1f6f2000 	svcne	0x006f2000
    d11c:	84080000 	strhi	r0, [r8], #-0
    d120:	0000450f 	andeq	r4, r0, pc, lsl #10
    d124:	00010100 	andeq	r0, r1, r0, lsl #2
    d128:	010b0000 	mrseq	r0, (UNDEF: 11)
    d12c:	db048708 	blle	12ed54 <__ccfg+0x10edac>
    d130:	2000000e 	andcs	r0, r0, lr
    d134:	000025d1 	ldrdeq	r2, [r0], -r1
    d138:	450f8808 	strmi	r8, [pc, #-2056]	; c938 <__exidx_end+0x6f14>
    d13c:	01000000 	mrseq	r0, (UNDEF: 0)
    d140:	20000404 	andcs	r0, r0, r4, lsl #8
    d144:	00002725 	andeq	r2, r0, r5, lsr #14
    d148:	450f8908 	strmi	r8, [pc, #-2312]	; c848 <__exidx_end+0x6e24>
    d14c:	01000000 	mrseq	r0, (UNDEF: 0)
    d150:	00000004 	andeq	r0, r0, r4
    d154:	8b08010b 	blhi	20d588 <__ccfg+0x1ed5e0>
    d158:	000f1504 	andeq	r1, pc, r4, lsl #10
    d15c:	26642000 	strbtcs	r2, [r4], -r0
    d160:	8c080000 	stchi	0, cr0, [r8], {-0}
    d164:	0000450f 	andeq	r4, r0, pc, lsl #10
    d168:	07010100 	streq	r0, [r1, -r0, lsl #2]
    d16c:	26ec2000 	strbtcs	r2, [ip], r0
    d170:	8f080000 	svchi	0x00080000
    d174:	0000450f 	andeq	r4, r0, pc, lsl #10
    d178:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    d17c:	1f252000 	svcne	0x00252000
    d180:	91080000 	mrsls	r0, (UNDEF: 8)
    d184:	0000450f 	andeq	r4, r0, pc, lsl #10
    d188:	03010100 	movweq	r0, #4352	; 0x1100
    d18c:	010b0000 	mrseq	r0, (UNDEF: 11)
    d190:	5f04a608 	svcpl	0x0004a608
    d194:	2000000f 	andcs	r0, r0, pc
    d198:	00002756 	andeq	r2, r0, r6, asr r7
    d19c:	450fa708 	strmi	sl, [pc, #-1800]	; ca9c <__exidx_end+0x7078>
    d1a0:	01000000 	mrseq	r0, (UNDEF: 0)
    d1a4:	20000404 	andcs	r0, r0, r4, lsl #8
    d1a8:	000020f4 	strdeq	r2, [r0], -r4
    d1ac:	450fa808 	strmi	sl, [pc, #-2056]	; c9ac <__exidx_end+0x6f88>
    d1b0:	01000000 	mrseq	r0, (UNDEF: 0)
    d1b4:	20000301 	andcs	r0, r0, r1, lsl #6
    d1b8:	000021b4 			; <UNDEFINED> instruction: 0x000021b4
    d1bc:	450faa08 	strmi	sl, [pc, #-2568]	; c7bc <__exidx_end+0x6d98>
    d1c0:	01000000 	mrseq	r0, (UNDEF: 0)
    d1c4:	20000102 	andcs	r0, r0, r2, lsl #2
    d1c8:	00001f6f 	andeq	r1, r0, pc, ror #30
    d1cc:	450fab08 	strmi	sl, [pc, #-2824]	; c6cc <__exidx_end+0x6ca8>
    d1d0:	01000000 	mrseq	r0, (UNDEF: 0)
    d1d4:	00000001 	andeq	r0, r0, r1
    d1d8:	ae08010b 	adfgee	f0, f0, #3.0
    d1dc:	000f8904 	andeq	r8, pc, r4, lsl #18
    d1e0:	25d12000 	ldrbcs	r2, [r1]
    d1e4:	af080000 	svcge	0x00080000
    d1e8:	0000450f 	andeq	r4, r0, pc, lsl #10
    d1ec:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    d1f0:	27252000 	strcs	r2, [r5, -r0]!
    d1f4:	b0080000 	andlt	r0, r8, r0
    d1f8:	0000450f 	andeq	r4, r0, pc, lsl #10
    d1fc:	00040100 	andeq	r0, r4, r0, lsl #2
    d200:	010b0000 	mrseq	r0, (UNDEF: 11)
    d204:	1304b208 	movwne	fp, #16904	; 0x4208
    d208:	20000010 	andcs	r0, r0, r0, lsl r0
    d20c:	00002664 	andeq	r2, r0, r4, ror #12
    d210:	450fb308 	strmi	fp, [pc, #-776]	; cf10 <__exidx_end+0x74ec>
    d214:	01000000 	mrseq	r0, (UNDEF: 0)
    d218:	20000701 	andcs	r0, r0, r1, lsl #14
    d21c:	00001f9a 	muleq	r0, sl, pc	; <UNPREDICTABLE>
    d220:	450fb508 	strmi	fp, [pc, #-1288]	; cd20 <__exidx_end+0x72fc>
    d224:	01000000 	mrseq	r0, (UNDEF: 0)
    d228:	20000601 	andcs	r0, r0, r1, lsl #12
    d22c:	00002542 	andeq	r2, r0, r2, asr #10
    d230:	450fb708 	strmi	fp, [pc, #-1800]	; cb30 <__exidx_end+0x710c>
    d234:	01000000 	mrseq	r0, (UNDEF: 0)
    d238:	20000501 	andcs	r0, r0, r1, lsl #10
    d23c:	000026ec 	andeq	r2, r0, ip, ror #13
    d240:	450fb908 	strmi	fp, [pc, #-2312]	; c940 <__exidx_end+0x6f1c>
    d244:	01000000 	mrseq	r0, (UNDEF: 0)
    d248:	20000401 	andcs	r0, r0, r1, lsl #8
    d24c:	00001f25 	andeq	r1, r0, r5, lsr #30
    d250:	450fbb08 	strmi	fp, [pc, #-2824]	; c750 <__exidx_end+0x6d2c>
    d254:	01000000 	mrseq	r0, (UNDEF: 0)
    d258:	20000301 	andcs	r0, r0, r1, lsl #6
    d25c:	00002681 	andeq	r2, r0, r1, lsl #13
    d260:	450fbd08 	strmi	fp, [pc, #-3336]	; c560 <__exidx_end+0x6b3c>
    d264:	01000000 	mrseq	r0, (UNDEF: 0)
    d268:	20000201 	andcs	r0, r0, r1, lsl #4
    d26c:	000021c5 	andeq	r2, r0, r5, asr #3
    d270:	450fbf08 	strmi	fp, [pc, #-3848]	; c370 <__exidx_end+0x694c>
    d274:	01000000 	mrseq	r0, (UNDEF: 0)
    d278:	20000101 	andcs	r0, r0, r1, lsl #2
    d27c:	0000254d 	andeq	r2, r0, sp, asr #10
    d280:	450fc108 	strmi	ip, [pc, #-264]	; d180 <__exidx_end+0x775c>
    d284:	01000000 	mrseq	r0, (UNDEF: 0)
    d288:	00000001 	andeq	r0, r0, r1
    d28c:	c408010b 	strgt	r0, [r8], #-267	; 0xfffffef5
    d290:	00108d04 	andseq	r8, r0, r4, lsl #26
    d294:	22832000 	addcs	r2, r3, #0
    d298:	c5080000 	strgt	r0, [r8, #-0]
    d29c:	0000450f 	andeq	r4, r0, pc, lsl #10
    d2a0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    d2a4:	20bc2000 	adcscs	r2, ip, r0
    d2a8:	c6080000 	strgt	r0, [r8], -r0
    d2ac:	0000450f 	andeq	r4, r0, pc, lsl #10
    d2b0:	06010100 	streq	r0, [r1], -r0, lsl #2
    d2b4:	21f72000 	mvnscs	r2, r0
    d2b8:	c8080000 	stmdagt	r8, {}	; <UNPREDICTABLE>
    d2bc:	0000450f 	andeq	r4, r0, pc, lsl #10
    d2c0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    d2c4:	21602000 	cmncs	r0, r0
    d2c8:	c9080000 	stmdbgt	r8, {}	; <UNPREDICTABLE>
    d2cc:	0000450f 	andeq	r4, r0, pc, lsl #10
    d2d0:	03010100 	movweq	r0, #4352	; 0x1100
    d2d4:	24d62000 	ldrbcs	r2, [r6], #0
    d2d8:	ca080000 	bgt	20d2e0 <__ccfg+0x1ed338>
    d2dc:	0000450f 	andeq	r4, r0, pc, lsl #10
    d2e0:	02010100 	andeq	r0, r1, #0, 2
    d2e4:	200c2000 	andcs	r2, ip, r0
    d2e8:	cb080000 	blgt	20d2f0 <__ccfg+0x1ed348>
    d2ec:	0000450f 	andeq	r4, r0, pc, lsl #10
    d2f0:	01010100 	mrseq	r0, (UNDEF: 17)
    d2f4:	1f0a2000 	svcne	0x000a2000
    d2f8:	cc080000 	stcgt	0, cr0, [r8], {-0}
    d2fc:	0000450f 	andeq	r4, r0, pc, lsl #10
    d300:	00010100 	andeq	r0, r1, r0, lsl #2
    d304:	010b0000 	mrseq	r0, (UNDEF: 11)
    d308:	d704d408 	strle	sp, [r4, -r8, lsl #8]
    d30c:	20000010 	andcs	r0, r0, r0, lsl r0
    d310:	00002756 	andeq	r2, r0, r6, asr r7
    d314:	450fd508 	strmi	sp, [pc, #-1288]	; ce14 <__exidx_end+0x73f0>
    d318:	01000000 	mrseq	r0, (UNDEF: 0)
    d31c:	20000404 	andcs	r0, r0, r4, lsl #8
    d320:	000020f4 	strdeq	r2, [r0], -r4
    d324:	450fd608 	strmi	sp, [pc, #-1544]	; cd24 <__exidx_end+0x7300>
    d328:	01000000 	mrseq	r0, (UNDEF: 0)
    d32c:	20000301 	andcs	r0, r0, r1, lsl #6
    d330:	000021b4 			; <UNDEFINED> instruction: 0x000021b4
    d334:	450fd808 	strmi	sp, [pc, #-2056]	; cb34 <__exidx_end+0x7110>
    d338:	01000000 	mrseq	r0, (UNDEF: 0)
    d33c:	20000102 	andcs	r0, r0, r2, lsl #2
    d340:	00001f6f 	andeq	r1, r0, pc, ror #30
    d344:	450fd908 	strmi	sp, [pc, #-2312]	; ca44 <__exidx_end+0x7020>
    d348:	01000000 	mrseq	r0, (UNDEF: 0)
    d34c:	00000001 	andeq	r0, r0, r1
    d350:	2208011a 	andcs	r0, r8, #-2147483642	; 0x80000006
    d354:	11260402 			; <UNDEFINED> instruction: 0x11260402
    d358:	56210000 	strtpl	r0, [r1], -r0
    d35c:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    d360:	450f0223 	strmi	r0, [pc, #-547]	; d145 <__exidx_end+0x7721>
    d364:	01000000 	mrseq	r0, (UNDEF: 0)
    d368:	21000404 	tstcs	r0, r4, lsl #8
    d36c:	000020f4 	strdeq	r2, [r0], -r4
    d370:	0f022408 	svceq	0x00022408
    d374:	00000045 	andeq	r0, r0, r5, asr #32
    d378:	00030101 	andeq	r0, r3, r1, lsl #2
    d37c:	0021b421 	eoreq	fp, r1, r1, lsr #8
    d380:	02260800 	eoreq	r0, r6, #0, 16
    d384:	0000450f 	andeq	r4, r0, pc, lsl #10
    d388:	01020100 	mrseq	r0, (UNDEF: 18)
    d38c:	1f6f2100 	svcne	0x006f2100
    d390:	27080000 	strcs	r0, [r8, -r0]
    d394:	00450f02 	subeq	r0, r5, r2, lsl #30
    d398:	01010000 	mrseq	r0, (UNDEF: 1)
    d39c:	1a000000 	bne	d3a4 <__exidx_end+0x7980>
    d3a0:	022a0801 	eoreq	r0, sl, #65536	; 0x10000
    d3a4:	00115304 	andseq	r5, r1, r4, lsl #6
    d3a8:	25d12100 	ldrbcs	r2, [r1, #256]	; 0x100
    d3ac:	2b080000 	blcs	20d3b4 <__ccfg+0x1ed40c>
    d3b0:	00450f02 	subeq	r0, r5, r2, lsl #30
    d3b4:	04010000 	streq	r0, [r1], #-0
    d3b8:	25210004 	strcs	r0, [r1, #-4]!
    d3bc:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    d3c0:	450f022c 	strmi	r0, [pc, #-556]	; d19c <__exidx_end+0x7778>
    d3c4:	01000000 	mrseq	r0, (UNDEF: 0)
    d3c8:	00000004 	andeq	r0, r0, r4
    d3cc:	2e08021a 	mcrcs	2, 0, r0, cr8, cr10, {0}
    d3d0:	11800402 	orrne	r0, r0, r2, lsl #8
    d3d4:	0c210000 	stceq	0, cr0, [r1], #-0
    d3d8:	08000022 	stmdaeq	r0, {r1, r5}
    d3dc:	5810022f 	ldmdapl	r0, {r0, r1, r2, r3, r5, r9}
    d3e0:	02000000 	andeq	r0, r0, #0
    d3e4:	21000d03 	tstcs	r0, r3, lsl #26
    d3e8:	00002708 	andeq	r2, r0, r8, lsl #14
    d3ec:	10023208 	andne	r3, r2, r8, lsl #4
    d3f0:	00000058 	andeq	r0, r0, r8, asr r0
    d3f4:	00000d02 	andeq	r0, r0, r2, lsl #26
    d3f8:	08041a00 	stmdaeq	r4, {r9, fp, ip}
    d3fc:	ad040234 	sfmge	f0, 4, [r4, #-208]	; 0xffffff30
    d400:	21000011 	tstcs	r0, r1, lsl r0
    d404:	000023a1 	andeq	r2, r0, r1, lsr #7
    d408:	10023508 	andne	r3, r2, r8, lsl #10
    d40c:	0000006b 	andeq	r0, r0, fp, rrx
    d410:	001c0404 	andseq	r0, ip, r4, lsl #8
    d414:	0024b121 	eoreq	fp, r4, r1, lsr #2
    d418:	02370800 	eorseq	r0, r7, #0, 16
    d41c:	00006b10 	andeq	r6, r0, r0, lsl fp
    d420:	03150400 	tsteq	r5, #0, 8
    d424:	011a0000 	tsteq	sl, r0
    d428:	04023a08 	streq	r3, [r2], #-2568	; 0xfffff5f8
    d42c:	000011da 	ldrdeq	r1, [r0], -sl
    d430:	0025fd21 	eoreq	pc, r5, r1, lsr #26
    d434:	023b0800 	eorseq	r0, fp, #0, 16
    d438:	0000450f 	andeq	r4, r0, pc, lsl #10
    d43c:	02060100 	andeq	r0, r6, #0, 2
    d440:	1fc72100 	svcne	0x00c72100
    d444:	3d080000 	stccc	0, cr0, [r8, #-0]
    d448:	00450f02 	subeq	r0, r5, r2, lsl #30
    d44c:	02010000 	andeq	r0, r1, #0
    d450:	1a000000 	bne	d458 <__exidx_end+0x7a34>
    d454:	02420802 	subeq	r0, r2, #131072	; 0x20000
    d458:	00123a04 	andseq	r3, r2, r4, lsl #20
    d45c:	23aa2100 			; <UNDEFINED> instruction: 0x23aa2100
    d460:	43080000 	movwmi	r0, #32768	; 0x8000
    d464:	00581002 	subseq	r1, r8, r2
    d468:	06020000 	streq	r0, [r2], -r0
    d46c:	4621000a 	strtmi	r0, [r1], -sl
    d470:	08000022 	stmdaeq	r0, {r1, r5}
    d474:	58100244 	ldmdapl	r0, {r2, r6, r9}
    d478:	02000000 	andeq	r0, r0, #0
    d47c:	21000901 	tstcs	r0, r1, lsl #18
    d480:	00002412 	andeq	r2, r0, r2, lsl r4
    d484:	10024608 	andne	r4, r2, r8, lsl #12
    d488:	00000058 	andeq	r0, r0, r8, asr r0
    d48c:	00080102 	andeq	r0, r8, r2, lsl #2
    d490:	001faf21 	andseq	sl, pc, r1, lsr #30
    d494:	02480800 	subeq	r0, r8, #0, 16
    d498:	00005810 	andeq	r5, r0, r0, lsl r8
    d49c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    d4a0:	1f522100 	svcne	0x00522100
    d4a4:	4d080000 	stcmi	0, cr0, [r8, #-0]
    d4a8:	00581002 	subseq	r1, r8, r2
    d4ac:	03020000 	movweq	r0, #8192	; 0x2000
    d4b0:	1a000000 	bne	d4b8 <__exidx_end+0x7a94>
    d4b4:	02560802 	subseq	r0, r6, #131072	; 0x20000
    d4b8:	00128904 	andseq	r8, r2, r4, lsl #18
    d4bc:	21a72100 			; <UNDEFINED> instruction: 0x21a72100
    d4c0:	57080000 	strpl	r0, [r8, -r0]
    d4c4:	00581002 	subseq	r1, r8, r2
    d4c8:	03020000 	movweq	r0, #8192	; 0x2000
    d4cc:	4621000d 	strtmi	r0, [r1], -sp
    d4d0:	08000021 	stmdaeq	r0, {r0, r5}
    d4d4:	5810025d 	ldmdapl	r0, {r0, r2, r3, r4, r6, r9}
    d4d8:	02000000 	andeq	r0, r0, #0
    d4dc:	21000c01 	tstcs	r0, r1, lsl #24
    d4e0:	000020e6 	andeq	r2, r0, r6, ror #1
    d4e4:	10025f08 	andne	r5, r2, r8, lsl #30
    d4e8:	00000058 	andeq	r0, r0, r8, asr r0
    d4ec:	00060602 	andeq	r0, r6, r2, lsl #12
    d4f0:	0023e521 	eoreq	lr, r3, r1, lsr #10
    d4f4:	02660800 	rsbeq	r0, r6, #0, 16
    d4f8:	00005810 	andeq	r5, r0, r0, lsl r8
    d4fc:	05010200 	streq	r0, [r1, #-512]	; 0xfffffe00
    d500:	77090000 	strvc	r0, [r9, -r0]
    d504:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    d508:	0a000012 	beq	d558 <__exidx_end+0x7b34>
    d50c:	00000091 	muleq	r0, r1, r0
    d510:	890400a2 	stmdbhi	r4, {r1, r5, r7}
    d514:	22000012 	andcs	r0, r0, #18
    d518:	000022b0 			; <UNDEFINED> instruction: 0x000022b0
    d51c:	99104909 	ldmdbls	r0, {r0, r3, r8, fp, lr}
    d520:	8c000012 	stchi	0, cr0, [r0], {18}
    d524:	0004ad02 	andeq	sl, r4, r2, lsl #26
    d528:	00044921 	andeq	r4, r4, r1, lsr #18
    d52c:	00047d21 	andeq	r7, r4, r1, lsr #26
    d530:	00048121 	andeq	r8, r4, r1, lsr #2
    d534:	00051121 	andeq	r1, r5, r1, lsr #2
    d538:	00059121 	andeq	r9, r5, r1, lsr #2
    d53c:	00064121 	andeq	r4, r6, r1, lsr #2
    d540:	10b5f821 	adcsne	pc, r5, r1, lsr #16
    d544:	0eb5f847 	cdpeq	8, 11, cr15, cr5, cr7, {2}
    d548:	01210046 			; <UNDEFINED> instruction: 0x01210046
    d54c:	3004ad25 	andcc	sl, r4, r5, lsr #26
    d550:	03480a47 	movteq	r0, #35399	; 0x8a47
    d554:	0ff00078 	svceq	0x00f00078
    d558:	0b079bf8 	bleq	1f4540 <__ccfg+0x1d4598>
    d55c:	204c12d0 	ldrdcs	r1, [ip], #-32	; 0xffffffe0
    d560:	0728ff78 			; <UNDEFINED> instruction: 0x0728ff78
    d564:	2121ffd0 	ldrdcs	pc, [r1, -r0]!
    d568:	0f490e70 	svceq	0x00490e70
    d56c:	20022424 	andcs	r2, r2, r4, lsr #8
    d570:	c8316043 	ldmdagt	r1!, {r0, r1, r6, sp, lr}
    d574:	f8bdf882 			; <UNDEFINED> instruction: 0xf8bdf882
    d578:	004801b5 	strheq	r0, [r8], #-21	; 0xffffffeb
    d57c:	00026b47 	andeq	r6, r2, r7, asr #22
    d580:	004ce521 	subeq	lr, ip, r1, lsr #10
    d584:	01480900 	cmpeq	r8, r0, lsl #18
    d588:	004808e0 	subeq	r0, r8, r0, ror #17
    d58c:	054c060c 	strbeq	r0, [ip, #-1548]	; 0xfffff9f4
    d590:	ff782249 			; <UNDEFINED> instruction: 0xff782249
    d594:	cad1012a 	bgt	ff44da44 <_estack+0xdf448a44>
    d598:	6070227a 	rsbsvs	r2, r0, sl, ror r2
    d59c:	7082c831 	addvc	ip, r2, r1, lsr r8
    d5a0:	001c8046 	andseq	r8, ip, r6, asr #32
    d5a4:	08620047 	stmdaeq	r2!, {r0, r1, r2, r6}^
    d5a8:	0006a440 	andeq	sl, r6, r0, asr #8
    d5ac:	080f0721 	stmdaeq	pc, {r0, r5, r8, r9, sl}	; <UNPREDICTABLE>
    d5b0:	08b4f008 	ldmeq	r4!, {r3, ip, sp, lr, pc}
    d5b4:	03b57047 			; <UNDEFINED> instruction: 0x03b57047
    d5b8:	01461546 	cmpeq	r6, r6, asr #10
    d5bc:	00d00629 	sbcseq	r0, r0, r9, lsr #12
    d5c0:	11d00629 	bicsne	r0, r0, r9, lsr #12
    d5c4:	ff46284a 			; <UNDEFINED> instruction: 0xff46284a
    d5c8:	70ffbbf7 	ldrshtvc	fp, [pc], #183
    d5cc:	00480fbd 	strheq	r0, [r8], #-253	; 0xffffff03
    d5d0:	05480fe0 	strbeq	r0, [r8, #-4064]	; 0xfffff020
    d5d4:	03428324 	movteq	r8, #8996	; 0x2324
    d5d8:	640840d8 	strvs	r4, [r8], #-216	; 0xffffff28
    d5dc:	f92c001e 			; <UNDEFINED> instruction: 0xf92c001e
    d5e0:	0140e3dc 	ldrdeq	lr, [r0, #-60]	; 0xffffffc4
    d5e4:	18034020 	stmdane	r3, {r5, lr}
    d5e8:	010b8218 	tsteq	fp, r8, lsl r2
    d5ec:	06d00729 	ldrbeq	r0, [r0], r9, lsr #14
    d5f0:	80230049 	eorhi	r0, r3, r9, asr #32
    d5f4:	ff462831 			; <UNDEFINED> instruction: 0xff462831
    d5f8:	e0ffa5f7 	ldrsht	sl, [pc], #87
    d5fc:	02bd70b2 	adcseq	r7, sp, #178	; 0xb2
    d600:	6c4b0449 	cfstrdvs	mvd0, [fp], {73}	; 0x49
    d604:	00e7f631 	rsceq	pc, r7, r1, lsr r6	; <UNPREDICTABLE>
    d608:	005c8300 	subseq	r8, ip, r0, lsl #6
    d60c:	86bca000 	ldrthi	sl, [ip], r0
    d610:	0d830023 	stceq	0, cr0, [r3, #140]	; 0x8c
    d614:	00067423 	andeq	r7, r6, r3, lsr #8
    d618:	1ab5f821 	bne	fed8b6a4 <_estack+0xded866a4>
    d61c:	7146054e 	cmpvc	r6, lr, asr #10
    d620:	cc48196b 	mcrrgt	9, 6, r1, r8, cr11	; <UNPREDICTABLE>
    d624:	0001e409 	andeq	lr, r1, r9, lsl #8
    d628:	18d0112d 	ldmne	r0, {r0, r2, r3, r5, r8, ip}^
    d62c:	02780949 	rsbseq	r0, r8, #1196032	; 0x124000
    d630:	00d00f29 	sbcseq	r0, r0, r9, lsr #30
    d634:	7243047b 	subvc	r0, r3, #2063597568	; 0x7b000000
    d638:	152001b6 	strne	r0, [r0, #-438]!	; 0xfffffe4a
    d63c:	b802404f 	stmdalt	r2, {r0, r1, r2, r3, r6, lr}
    d640:	20481147 	subcs	r1, r8, r7, asr #2
    d644:	c1880038 	orrgt	r0, r8, r8, lsr r0
    d648:	0407c909 	streq	ip, [r7], #-2313	; 0xfffff6f7
    d64c:	c0e016d0 	ldrdgt	r1, [r0], #96	; 0x60	; <UNPREDICTABLE>
    d650:	40e7f07a 	rscmi	pc, r7, sl, ror r0	; <UNPREDICTABLE>
    d654:	0fe7ee7b 	svceq	0x00e7ee7b
    d658:	cc637449 	cfstrdgt	mvd7, [r3], #-292	; 0xfffffedc
    d65c:	c00a4061 	andgt	r4, sl, r1, rrx
    d660:	01d00c07 	bicseq	r0, r0, r7, lsl #24
    d664:	31038020 	tstcc	r3, r0, lsr #32
    d668:	012d006b 			; <UNDEFINED> instruction: 0x012d006b
    d66c:	004301d0 	ldrdeq	r0, [r3], #-16
    d670:	084381e0 	stmdaeq	r3, {r5, r6, r7, r8, pc}^
    d674:	07633146 	strbeq	r3, [r3, -r6, asr #2]!
    d678:	48394049 	ldmdami	r9!, {r0, r3, r6, lr}
    d67c:	b8200063 	stmdalt	r0!, {r0, r1, r5, r6}
    d680:	f8b66247 			; <UNDEFINED> instruction: 0xf8b66247
    d684:	000280bd 	strheq	r8, [r2], -sp
    d688:	00008821 	andeq	r8, r0, r1, lsr #16
    d68c:	00029b21 	andeq	r9, r2, r1, lsr #22
    d690:	003f7b21 	eorseq	r7, pc, r1, lsr #22
    d694:	04404000 	strbeq	r4, [r0], #-0
    d698:	22b51040 	adcscs	r1, r5, #64	; 0x40
    d69c:	5121004a 			; <UNDEFINED> instruction: 0x5121004a
    d6a0:	89492161 	stmdbhi	r9, {r0, r5, r6, r8, sp}^
    d6a4:	0900c968 	stmdbeq	r0, {r3, r5, r6, r8, fp, lr, pc}
    d6a8:	204921d4 	ldrdcs	r2, [r9], #-20	; 0xffffffec
    d6ac:	9805ca4b 	stmdals	r5, {r0, r1, r3, r6, r9, fp, lr, pc}
    d6b0:	016b4b42 	cmneq	fp, r2, asr #22
    d6b4:	004313d8 	ldrdeq	r1, [r3], #-56	; 0xffffffc8
    d6b8:	4b4393e0 	blmi	10f2640 <__ccfg+0x10d2698>
    d6bc:	ff491d63 			; <UNDEFINED> instruction: 0xff491d63
    d6c0:	10ff77f7 	ldrshtne	r7, [pc], #119
    d6c4:	1ab538bd 	bne	fed5b9c0 <_estack+0xded569c0>
    d6c8:	007f284d 	rsbseq	r2, pc, sp, asr #16
    d6cc:	1ad12728 	bne	ff457374 <_estack+0xdf452374>
    d6d0:	c0880048 	addgt	r0, r8, r8, asr #32
    d6d4:	2207c009 	andcs	ip, r7, #9
    d6d8:	604c12d1 	ldrdvs	r1, [ip], #-33	; 0xffffffdf
    d6dc:	1e280069 	cdpne	0, 2, cr0, cr8, cr9, {3}
    d6e0:	004668d1 	ldrdeq	r6, [r6], #-129	; 0xffffff7f
    d6e4:	68f845f0 	ldmvs	r8!, {r4, r5, r6, r7, r8, sl, lr}^
    d6e8:	01780046 	cmneq	r8, r6, asr #32
    d6ec:	68d11728 	ldmvs	r1, {r3, r5, r8, r9, sl, ip}^
    d6f0:	10784046 	rsbsne	r4, r8, r6, asr #32
    d6f4:	08d21328 	ldmeq	r2, {r3, r5, r8, r9, ip}^
    d6f8:	68616020 	stmdavs	r1!, {r5, sp, lr}^
    d6fc:	4009406a 	andmi	r4, r9, sl, rrx
    d700:	0e602001 	cdpeq	0, 6, cr2, cr0, cr1, {0}
    d704:	d121004a 			; <UNDEFINED> instruction: 0xd121004a
    d708:	024a0d62 	subeq	r0, sl, #6272	; 0x1880
    d70c:	01601121 	cmneq	r0, r1, lsr #2
    d710:	20430821 	subcs	r0, r3, r1, lsr #16
    d714:	08210360 	stmdaeq	r1!, {r5, r6, r8, r9}
    d718:	20626843 	rsbcs	r6, r2, r3, asr #16
    d71c:	09bd3860 	ldmibeq	sp!, {r5, r6, fp, ip, sp}
    d720:	38478048 	stmdacc	r7, {r3, r6, pc}^
    d724:	044000bd 	strbeq	r0, [r0], #-189	; 0xffffff43
    d728:	00001840 	andeq	r1, r0, r0, asr #16
    d72c:	93000021 	movwls	r0, #33	; 0x21
    d730:	00028008 	andeq	r8, r2, r8
    d734:	0068cf21 	rsbeq	ip, r8, r1, lsr #30
    d738:	00006800 	andeq	r6, r0, r0, lsl #16
    d73c:	04110021 	ldreq	r0, [r1], #-33	; 0xffffffdf
    d740:	00e28040 	rsceq	r8, r2, r0, asr #32
    d744:	003bc3e0 	eorseq	ip, fp, r0, ror #7
    d748:	00490700 	subeq	r0, r9, r0, lsl #14
    d74c:	04d00028 	ldrbeq	r0, [r0], #40	; 0x28
    d750:	724a0620 	subvc	r0, sl, #32, 12	; 0x2000000
    d754:	c97809b6 	ldmdbgt	r8!, {r1, r2, r4, r5, r7, r8, fp}^
    d758:	10d00107 	sbcsne	r0, r0, r7, lsl #2
    d75c:	80e00058 	rschi	r0, r0, r8, asr r0
    d760:	40b66220 	adcsmi	r6, r6, r0, lsr #4
    d764:	004770b2 	strheq	r7, [r7], #-2
    d768:	00026b00 	andeq	r6, r2, r0, lsl #22
    d76c:	04605821 	strbteq	r5, [r0], #-2081	; 0xfffff7df
    d770:	01b40340 			; <UNDEFINED> instruction: 0x01b40340
    d774:	01900148 	orrseq	r0, r0, r8, asr #2
    d778:	006fa5bd 	strhteq	sl, [pc], #-93
    d77c:	00000000 	andeq	r0, r0, r0
    d780:	03000100 	movweq	r0, #256	; 0x100
    d784:	1f000a00 	svcne	0x00000a00
    d788:	eb005900 	bl	23b90 <__ccfg+0x3be8>
    d78c:	ea023900 	b	9bb94 <__ccfg+0x7bbec>
    d790:	9709f904 	strls	pc, [r9, -r4, lsl #18]
    d794:	a11feb12 	tstge	pc, r2, lsl fp	; <UNPREDICTABLE>
    d798:	0a4a7832 	beq	12ab868 <__ccfg+0x128b8c0>
    d79c:	8c82fa66 	vstmiahi	r2, {s30-s131}
    d7a0:	17b6639e 			; <UNDEFINED> instruction: 0x17b6639e
    d7a4:	edd664c9 	cfldrd	mvd6, [r6, #804]	; 0x324
    d7a8:	e0e3c1de 	ldrd	ip, [r3], #30	; <UNPREDICTABLE>
    d7ac:	0000ffe5 	andeq	pc, r0, r5, ror #31
    d7b0:	00770900 	rsbseq	r0, r7, r0, lsl #18
    d7b4:	15490000 	strbne	r0, [r9, #-0]
    d7b8:	91230000 			; <UNDEFINED> instruction: 0x91230000
    d7bc:	ac000000 	stcge	0, cr0, [r0], {-0}
    d7c0:	38040001 	stmdacc	r4, {r0}
    d7c4:	22000015 	andcs	r0, r0, #21
    d7c8:	00002339 	andeq	r2, r0, r9, lsr r3
    d7cc:	49103a0a 	ldmdbmi	r0, {r1, r3, r9, fp, ip, sp}
    d7d0:	b4000015 	strlt	r0, [r0], #-21	; 0xffffffeb
    d7d4:	0061a306 	rsbeq	sl, r1, r6, lsl #6
    d7d8:	07147f00 	ldreq	r7, [r4, -r0, lsl #30]
    d7dc:	f1004d13 			; <UNDEFINED> instruction: 0xf1004d13
    d7e0:	131f2e24 	tstne	pc, #36, 28	; 0x240
    d7e4:	3f0ab03f 	svccc	0x000ab03f
    d7e8:	00ff0700 	rscseq	r0, pc, r0, lsl #14
    d7ec:	00403000 	subeq	r3, r0, r0
    d7f0:	03400140 	movteq	r0, #320	; 0x140
    d7f4:	0f400740 	svceq	0x00400740
    d7f8:	cf404f40 	svcgt	0x00404f40
    d7fc:	cf41cf40 	svcgt	0x0041cf40
    d800:	cf47cf43 	svcgt	0x0047cf43
    d804:	cf3fcf4f 	svcgt	0x003fcf4f
    d808:	cf1fcf2f 	svcgt	0x001fcf2f
    d80c:	0000000f 	andeq	r0, r0, pc
    d810:	08000f00 	stmdaeq	r0, {r8, r9, sl, fp}
    d814:	3f000000 	svccc	0x00000000
    d818:	40000000 	andmi	r0, r0, r0
    d81c:	00003f00 	andeq	r3, r0, r0, lsl #30
    d820:	68000400 	stmdavs	r0, {sl}
    d824:	dc000e00 	stcle	14, cr0, [r0], {-0}
    d828:	43000600 	movwmi	r0, #1536	; 0x600
    d82c:	05001a00 	streq	r1, [r0, #-2560]	; 0xfffff600
    d830:	00000000 	andeq	r0, r0, r0
    d834:	00000200 	andeq	r0, r0, r0, lsl #4
    d838:	00003f00 	andeq	r3, r0, r0, lsl #30
    d83c:	04000000 	streq	r0, [r0], #-0
    d840:	0000c000 	andeq	ip, r0, r0
    d844:	c0000400 	andgt	r0, r0, r0, lsl #8
    d848:	07000000 	streq	r0, [r0, -r0]
    d84c:	00c05000 	sbceq	r5, r0, r0
    d850:	70700091 			; <UNDEFINED> instruction: 0x70700091
    d854:	009100c0 	addseq	r0, r1, r0, asr #1
    d858:	21318270 	teqcs	r1, r0, ror r2
    d85c:	10913100 	addsne	r3, r1, r0, lsl #2
    d860:	017000b1 	ldrheq	r0, [r0, #-1]!
    d864:	00b10181 	adcseq	r0, r1, r1, lsl #3
    d868:	323182a1 	eorscc	r8, r1, #268435466	; 0x1000000a
    d86c:	01b11091 			; <UNDEFINED> instruction: 0x01b11091
    d870:	41101191 			; <UNDEFINED> instruction: 0x41101191
    d874:	4f224181 	svcmi	0x00224181
    d878:	0006f140 	andeq	pc, r6, r0, asr #2
    d87c:	01c05170 	biceq	r5, r0, r0, ror r1
    d880:	10183091 	mulsne	r8, r1, r0
    d884:	08318339 	ldmdaeq	r1!, {r0, r3, r4, r5, r8, r9, pc}
    d888:	413118d0 	teqmi	r1, r0	; <illegal shifter operand>
    d88c:	3100316f 	tstcc	r0, pc, ror #2
    d890:	83b11091 			; <UNDEFINED> instruction: 0x83b11091
    d894:	5b161414 	blpl	5928ec <__ccfg+0x572944>
    d898:	25700068 	ldrbcs	r0, [r0, #-104]!	; 0xffffff98
    d89c:	00c05010 	sbceq	r5, r0, r0, lsl r0
    d8a0:	c0c3f491 	smullgt	pc, r3, r1, r4	; <UNPREDICTABLE>
    d8a4:	031420c0 	tsteq	r4, #192	; 0xc0
    d8a8:	4110316f 	tstmi	r0, pc, ror #2
    d8ac:	82c02204 	sbchi	r2, r0, #4, 4	; 0x40000000
    d8b0:	31002131 	tstcc	r0, r1, lsr r1
    d8b4:	63b11091 			; <UNDEFINED> instruction: 0x63b11091
    d8b8:	41103139 	tstmi	r0, r9, lsr r1
    d8bc:	82c08204 	sbchi	r8, r0, #4, 4	; 0x40000000
    d8c0:	31002131 	tstcc	r0, r1, lsr r1
    d8c4:	63b11091 			; <UNDEFINED> instruction: 0x63b11091
    d8c8:	a2103139 	andsge	r3, r0, #1073741838	; 0x4000000e
    d8cc:	213182c0 	teqcs	r1, r0, asr #5
    d8d0:	10913100 	addsne	r3, r1, r0, lsl #2
    d8d4:	151050b1 	ldrne	r5, [r0, #-177]	; 0xffffff4f
    d8d8:	05140531 	ldreq	r0, [r4, #-1329]	; 0xfffffacf
    d8dc:	3f700092 	svccc	0x00700092
    d8e0:	31c05264 	biccc	r5, r0, r4, ror #4
    d8e4:	61063110 	tstvs	r6, r0, lsl r1
    d8e8:	4202c131 	andmi	ip, r2, #1073741836	; 0x4000000c
    d8ec:	31c11264 	biccc	r1, r1, r4, ror #4
    d8f0:	71392110 	teqvc	r9, r0, lsl r1
    d8f4:	e1315106 	teq	r1, r6, lsl #2
    d8f8:	00644202 	rsbeq	r4, r4, r2, lsl #4
    d8fc:	99658a70 	stmdbls	r5!, {r4, r5, r6, r9, fp, pc}^
    d900:	20c08865 	sbccs	r8, r0, r5, ror #16
    d904:	80395082 	eorshi	r5, r9, r2, lsl #1
    d908:	9f1e0039 	svcls	0x001e0039
    d90c:	01c04140 	biceq	r4, r0, r0, asr #2
    d910:	18141830 	ldmdane	r4, {r4, r5, fp, ip}
    d914:	30c0891a 	sbccc	r8, r0, sl, lsl r9
    d918:	80396082 	eorshi	r6, r9, r2, lsl #1
    d91c:	a91e0039 	ldmdbge	lr, {r0, r3, r4, r5}
    d920:	01c04140 	biceq	r4, r0, r0, asr #2
    d924:	19141930 	ldmdbne	r4, {r4, r5, r8, fp, ip}
    d928:	36643c1a 			; <UNDEFINED> instruction: 0x36643c1a
    d92c:	34b11091 	ldrtcc	r1, [r1], #145	; 0x91
    d930:	54b11091 	ldrtpl	r1, [r1], #145	; 0x91
    d934:	547100b0 	ldrbtpl	r0, [r1], #-176	; 0xffffff50
    d938:	f0b064a0 			; <UNDEFINED> instruction: 0xf0b064a0
    d93c:	af220080 	svcge	0x00220080
    d940:	b0124040 	andslt	r4, r2, r0, asr #32
    d944:	53b03290 	movspl	r3, #144, 4
    d948:	53395382 	teqpl	r9, #134217730	; 0x8000002
    d94c:	3f648539 	svccc	0x00648539
    d950:	22c11164 	sbccs	r1, r1, #100, 2
    d954:	706442c1 	rsbvc	r4, r4, r1, asr #5
    d958:	1168c2c1 	cmnne	r8, r1, asr #5
    d95c:	42c0c2c1 	sbcmi	ip, r0, #268435468	; 0x1000000c
    d960:	c7c17064 	strbgt	r7, [r1, r4, rrx]
    d964:	00c05068 	sbceq	r5, r0, r8, rrx
    d968:	98722791 	ldmdals	r2!, {r0, r4, r7, r8, r9, sl, sp}^
    d96c:	14161592 	ldrne	r1, [r6], #-1426	; 0xfffffa6e
    d970:	53104216 	tstpl	r0, #1610612737	; 0x60000001
    d974:	21c1f010 	biccs	pc, r1, r0, lsl r0	; <UNPREDICTABLE>
    d978:	31313182 	teqcc	r1, r2, lsl #3
    d97c:	31398139 	teqcc	r9, r9, lsr r1
    d980:	70b05131 	adcsvc	r5, r0, r1, lsr r1
    d984:	276572b2 			; <UNDEFINED> instruction: 0x276572b2
    d988:	70929972 	addsvc	r9, r2, r2, ror r9
    d98c:	731062b2 	tstvc	r0, #536870923	; 0x2000000b
    d990:	31c3f010 	biccc	pc, r3, r0, lsl r0	; <UNPREDICTABLE>
    d994:	21312182 	teqcs	r1, r2, lsl #3
    d998:	1b398139 	blne	e6de84 <__ccfg+0xe4dedc>
    d99c:	e2657210 	rsb	r7, r5, #16, 4
    d9a0:	603182c0 	eorsvs	r8, r1, r0, asr #5
    d9a4:	80318082 	eorshi	r8, r1, r2, lsl #1
    d9a8:	61000239 	tstvs	r0, r9, lsr r2
    d9ac:	327100b0 	rsbscc	r0, r1, #176	; 0xb0
    d9b0:	51b11091 			; <UNDEFINED> instruction: 0x51b11091
    d9b4:	27b061a0 	ldrcs	r6, [r0, r0, lsr #3]!
    d9b8:	f3c23072 	vmvn.i32	<illegal reg q9.5>, #162	; 0x000000a2
    d9bc:	80000068 	andhi	r0, r0, r8, rrx
    d9c0:	3290b012 	addscc	fp, r0, #18
    d9c4:	507000b0 	ldrhtpl	r0, [r0], #-0
    d9c8:	279100c0 	ldrcs	r0, [r1, r0, asr #1]
    d9cc:	62929972 	addsvs	r9, r2, #1867776	; 0x1c8000
    d9d0:	f0107310 			; <UNDEFINED> instruction: 0xf0107310
    d9d4:	218231c3 	orrcs	r3, r2, r3, asr #3
    d9d8:	81392131 	teqhi	r9, r1, lsr r1
    d9dc:	70b05139 	adcsvc	r5, r0, r9, lsr r1
    d9e0:	27657eb2 			; <UNDEFINED> instruction: 0x27657eb2
    d9e4:	70929872 	addsvc	r9, r2, r2, ror r8
    d9e8:	531042b2 	tstpl	r0, #536870923	; 0x2000000b
    d9ec:	21c1f010 	biccs	pc, r1, r0, lsl r0	; <UNPREDICTABLE>
    d9f0:	31313182 	teqcc	r1, r2, lsl #3
    d9f4:	31398139 	teqcc	r9, r9, lsr r1
    d9f8:	7e101a31 			; <UNDEFINED> instruction: 0x7e101a31
    d9fc:	61a05165 	rorvs	r5, r5, #2
    da00:	b07227b0 	ldrhtlt	r2, [r2], #-112	; 0xffffff90
    da04:	3f6918c0 	svccc	0x006918c0
    da08:	22c10164 	sbccs	r0, r1, #100, 2
    da0c:	016442c1 	cmneq	r4, r1, asr #5
    da10:	42c0c2c1 	sbcmi	ip, r0, #268435468	; 0x1000000c
    da14:	3c1a1564 	cfldr32cc	mvfx1, [sl], {100}	; 0x64
    da18:	10913564 	addsne	r3, r1, r4, ror #10
    da1c:	858253b1 	strhi	r5, [r2, #945]	; 0x3b1
    da20:	b012c064 	andslt	ip, r2, r4, rrx
    da24:	00b03290 	umlalseq	r3, r0, r0, r2
    da28:	72643f70 	rsbvc	r3, r4, #112, 30	; 0x1c0
    da2c:	42c081c2 	sbcmi	r8, r0, #-2147483600	; 0x80000030
    da30:	11c12264 	bicne	r2, r1, r4, ror #4
    da34:	026442c1 	rsbeq	r4, r4, #268435468	; 0x1000000c
    da38:	42c111c0 	sbcmi	r1, r1, #192, 2	; 0x30
    da3c:	31c06264 	biccc	r6, r0, r4, ror #4
    da40:	626442c3 	rsbvs	r4, r4, #805306380	; 0x3000000c
    da44:	42c111c3 	sbcmi	r1, r1, #-1073741776	; 0xc0000030
    da48:	11c30264 	bicne	r0, r3, r4, ror #4
    da4c:	536442c1 	cmnpl	r4, #268435468	; 0x1000000c
    da50:	85395382 	ldrhi	r5, [r9, #-898]!	; 0xfffffc7e
    da54:	47c3e264 	strbmi	lr, [r3, r4, ror #4]
    da58:	40221164 	eormi	r1, r2, r4, ror #2
    da5c:	81c24241 	bichi	r4, r2, r1, asr #4
    da60:	526442c8 	rsbpl	r4, r4, #200, 4	; 0x8000000c
    da64:	42c111c2 	sbcmi	r1, r1, #-2147483600	; 0x80000030
    da68:	e1c27264 	bic	r7, r2, r4, ror #4
    da6c:	026442ce 	rsbeq	r4, r4, #-536870900	; 0xe000000c
    da70:	42c881c2 	sbcmi	r8, r8, #-2147483600	; 0x80000030
    da74:	01c20264 	biceq	r0, r2, r4, ror #4
    da78:	b06442c8 	rsblt	r4, r4, r8, asr #5
    da7c:	006954c0 	rsbeq	r5, r9, r0, asr #9
    da80:	42643f70 	rsbmi	r3, r4, #112, 30	; 0x1c0
    da84:	42c801c2 	sbcmi	r0, r8, #-2147483600	; 0x80000030
    da88:	11c25264 	bicne	r5, r2, r4, ror #4
    da8c:	726442c0 	rsbvc	r4, r4, #192, 4
    da90:	42c0e1c2 	sbcmi	lr, r0, #-2147483600	; 0x80000030
    da94:	01c00264 	biceq	r0, r0, r4, ror #4
    da98:	626442c1 	rsbvs	r4, r4, #268435468	; 0x1000000c
    da9c:	42c301c0 	sbcmi	r0, r3, #192, 2	; 0x30
    daa0:	01c12264 	biceq	r2, r1, r4, ror #4
    daa4:	626442c1 	rsbvs	r4, r4, #268435468	; 0x1000000c
    daa8:	42c101c3 	sbcmi	r0, r1, #-1073741776	; 0xc0000030
    daac:	01c30264 	biceq	r0, r3, r4, ror #4
    dab0:	536442c1 	cmnpl	r4, #268435468	; 0x1000000c
    dab4:	00648582 	rsbeq	r8, r4, r2, lsl #11
    dab8:	00b06170 	adcseq	r6, r0, r0, ror r1
    dabc:	23141271 	tstcs	r4, #268435463	; 0x10000007
    dac0:	334d7a1c 	movtcc	r7, #55836	; 0xda1c
    dac4:	00b11091 	umlalseq	r1, r1, r1, r0	; <UNPREDICTABLE>
    dac8:	10913270 	addsne	r3, r1, r0, ror r2
    dacc:	006972b1 	strhteq	r7, [r9], #-33	; 0xffffffdf
    dad0:	00b06170 	adcseq	r6, r0, r0, ror r1
    dad4:	32181371 	andscc	r1, r8, #-1006632959	; 0xc4000001
    dad8:	3249861c 	subcc	r8, r9, #28, 12	; 0x1c00000
    dadc:	00b11091 	umlalseq	r1, r1, r1, r0	; <UNPREDICTABLE>
    dae0:	10913370 	addsne	r3, r1, r0, ror r3
    dae4:	00697eb1 	strhteq	r7, [r9], #-225	; 0xffffff1f
    dae8:	47c0c270 			; <UNDEFINED> instruction: 0x47c0c270
    daec:	c2101564 	andsgt	r1, r0, #100, 10	; 0x19000000
    daf0:	471612c0 	ldrmi	r1, [r6, -r0, asr #5]
    daf4:	15314164 	ldrne	r4, [r1, #-356]!	; 0xfffffe9c
    daf8:	80c0c014 	sbchi	ip, r0, r4, lsl r0
    dafc:	54140531 	ldrpl	r0, [r4], #-1329	; 0xfffffacf
    db00:	0478a010 	ldrbteq	sl, [r8], #-16
    db04:	e6700004 	ldrbt	r0, [r0], -r4
    db08:	013186c0 	teqeq	r1, r0, asr #13
    db0c:	671416cc 	ldrvs	r1, [r4, -ip, asr #13]
    db10:	f0826110 			; <UNDEFINED> instruction: 0xf0826110
    db14:	170401c3 	strne	r0, [r4, -r3, asr #3]
    db18:	06700014 			; <UNDEFINED> instruction: 0x06700014
    db1c:	0b720573 	bleq	1c8f0f0 <__ccfg+0x1c6f148>
    db20:	50720e72 	rsbspl	r0, r2, r2, ror lr
    db24:	817100b0 	ldrhhi	r0, [r1, #-0]!
    db28:	50b06080 	adcspl	r6, r0, r0, lsl #1
    db2c:	418092a0 	orrmi	r9, r0, r0, lsr #5
    db30:	8045c322 	subhi	ip, r5, r2, lsr #6
    db34:	10c1f180 	sbcne	pc, r1, r0, lsl #3
    db38:	01163004 	tsteq	r6, r4
    db3c:	01140111 	tsteq	r4, r1, lsl r1
    db40:	d761d66c 	strble	sp, [r1, -ip, ror #12]!
    db44:	d961d861 	stmdble	r1!, {r0, r5, r6, fp, ip, lr, pc}^
    db48:	db61da61 	blle	18844d4 <__ccfg+0x186452c>
    db4c:	de61dc61 	cdple	12, 6, cr13, cr1, cr1, {3}
    db50:	e261e061 	rsb	lr, r1, #97	; 0x61
    db54:	3661e461 	strbtcc	lr, [r1], -r1, ror #8
    db58:	91633963 	cmnls	r3, r3, ror #18
    db5c:	21c0f280 	biccs	pc, r0, r0, lsl #5
    db60:	82312104 	eorshi	r2, r1, #4, 2
    db64:	122a4280 	eorne	r4, sl, #128, 4
    db68:	01163214 	tsteq	r6, r4, lsl r2
    db6c:	01142111 	tsteq	r4, r1, lsl r1
    db70:	0b61ee6c 	bleq	1889528 <__ccfg+0x1869580>
    db74:	3961f462 	stmdbcc	r1!, {r1, r5, r6, sl, ip, sp, lr, pc}^
    db78:	0b61ee63 	bleq	188950c <__ccfg+0x1869564>
    db7c:	3961f462 	stmdbcc	r1!, {r1, r5, r6, sl, ip, sp, lr, pc}^
    db80:	e661e663 	strbt	lr, [r1], -r3, ror #12
    db84:	e661e661 	strbt	lr, [r1], -r1, ror #12
    db88:	e661e661 	strbt	lr, [r1], -r1, ror #12
    db8c:	e6649461 	strbt	r9, [r4], -r1, ror #8
    db90:	e664f961 	strbt	pc, [r4], -r1, ror #18	; <UNPREDICTABLE>
    db94:	e6652a61 	strbt	r2, [r5], -r1, ror #20
    db98:	e6655661 	strbt	r5, [r5], -r1, ror #12
    db9c:	e6674661 	strbt	r4, [r7], -r1, ror #12
    dba0:	b0121061 	andslt	r1, r2, r1, rrx
    dba4:	06720e90 			; <UNDEFINED> instruction: 0x06720e90
    dba8:	10720573 	rsbsne	r0, r2, r3, ror r5
    dbac:	a7903012 			; <UNDEFINED> instruction: 0xa7903012
    dbb0:	3ccff061 	stclcc	0, cr15, [pc], {97}	; 0x61
    dbb4:	03c1d467 	biceq	sp, r1, #1728053248	; 0x67000000
    dbb8:	54c3c0c0 	strbpl	ip, [r3], #192	; 0xc0
    dbbc:	50784064 	rsbspl	r4, r8, r4, rrx
    dbc0:	10785091 			; <UNDEFINED> instruction: 0x10785091
    dbc4:	20786092 			; <UNDEFINED> instruction: 0x20786092
    dbc8:	30787092 			; <UNDEFINED> instruction: 0x30787092
    dbcc:	40788092 			; <UNDEFINED> instruction: 0x40788092
    dbd0:	60789092 			; <UNDEFINED> instruction: 0x60789092
    dbd4:	90783092 			; <UNDEFINED> instruction: 0x90783092
    dbd8:	40821091 	umullmi	r1, r2, r1, r0
    dbdc:	0106f039 	tsteq	r6, r9, lsr r0	; <UNPREDICTABLE>
    dbe0:	10311010 	eorsne	r1, r1, r0, lsl r0
    dbe4:	42920014 	addsmi	r0, r2, #20
    dbe8:	bc61e667 	stcllt	6, cr14, [r1], #-412	; 0xfffffe64
    dbec:	54a0e2a0 	strtpl	lr, [r0], #672	; 0x2a0
    dbf0:	5080f0a0 	addpl	pc, r0, r0, lsr #1
    dbf4:	40461522 	submi	r1, r6, r2, lsr #10
    dbf8:	2b220080 	blcs	88de00 <__ccfg+0x86de58>
    dbfc:	40620d47 	rsbmi	r0, r2, r7, asr #26
    dc00:	8d822da0 	stchi	13, cr2, [r2, #640]	; 0x280
    dc04:	10398d31 	eorsne	r8, r9, r1, lsr sp
    dc08:	10c0f182 	sbcne	pc, r0, r2, lsl #3
    dc0c:	1a100904 	bne	410024 <__ccfg+0x3f007c>
    dc10:	1a394a82 	bne	e60620 <__ccfg+0xe40678>
    dc14:	80821004 	addhi	r1, r2, r4
    dc18:	0e041039 	mcreq	0, 0, r1, cr4, cr9, {1}
    dc1c:	bc10ab10 			; <UNDEFINED> instruction: 0xbc10ab10
    dc20:	6310c210 	tstvs	r0, #16, 4
    dc24:	e0722964 	rsbs	r2, r2, r4, ror #18
    dc28:	13673ccf 	cmnne	r7, #52992	; 0xcf00
    dc2c:	c8b003b0 	ldmgt	r0!, {r4, r5, r7, r8, r9}
    dc30:	50b05366 	adcspl	r5, r0, r6, ror #6
    dc34:	64b054b0 	ldrtvs	r5, [r0], #1200	; 0x4b0
    dc38:	a5b013b0 	ldrge	r1, [r0, #944]!	; 0x3b0
    dc3c:	e0821066 	add	r1, r2, r6, rrx
    dc40:	ae463822 	cdpge	8, 4, cr3, cr6, cr2, {1}
    dc44:	41710066 	cmnmi	r1, r6, rrx
    dc48:	2b220180 	blcs	88e250 <__ccfg+0x86e2a8>
    dc4c:	1080f047 	addne	pc, r0, r7, asr #32
    dc50:	f0464b22 			; <UNDEFINED> instruction: 0xf0464b22
    dc54:	64471822 	strbvs	r1, [r7], #-2082	; 0xfffff7de
    dc58:	382231b0 	stmdacc	r2!, {r4, r5, r7, r8, ip, sp}
    dc5c:	ceb06342 	cdpgt	3, 11, cr6, cr0, cr2, {2}
    dc60:	e0821066 	add	r1, r2, r6, rrx
    dc64:	70463822 	subvc	r3, r6, r2, lsr #16
    dc68:	64623866 	strbtvs	r3, [r2], #-2150	; 0xfffff79a
    dc6c:	8f816fb0 	svchi	0x00816fb0
    dc70:	d03d8f31 	eorsle	r8, sp, r1, lsr pc
    dc74:	3c92ffdf 	ldccc	15, cr15, [r2], {223}	; 0xdf
    dc78:	41710067 	cmnmi	r1, r7, rrx
    dc7c:	2b220180 	blcs	88e284 <__ccfg+0x86e2dc>
    dc80:	f0b06447 			; <UNDEFINED> instruction: 0xf0b06447
    dc84:	65225080 	strvs	r5, [r2, #-128]!	; 0xffffff80
    dc88:	11b06342 	asrsne	r6, r2, #6
    dc8c:	6022c182 	eorvs	ip, r2, r2, lsl #3
    dc90:	0566ce46 	strbeq	ip, [r6, #-3654]!	; 0xfffff1ba
    dc94:	d1821167 	orrle	r1, r2, r7, ror #2
    dc98:	70465222 	subvc	r5, r6, r2, lsr #4
    dc9c:	61625266 	cmnvs	r2, r6, ror #4
    dca0:	81817281 	orrhi	r7, r1, r1, lsl #5
    dca4:	823d8131 	eorshi	r8, sp, #1073741836	; 0x4000000c
    dca8:	c03d8231 	eorsgt	r8, sp, r1, lsr r2
    dcac:	0292f1ef 	addseq	pc, r2, #-1073741765	; 0xc000003b
    dcb0:	0b673c93 	bleq	19dcf04 <__ccfg+0x19bcf5c>
    dcb4:	c081b062 	addgt	fp, r1, r2, rrx
    dcb8:	9781d391 			; <UNDEFINED> instruction: 0x9781d391
    dcbc:	d3a29082 			; <UNDEFINED> instruction: 0xd3a29082
    dcc0:	f34e7f18 	vmaxnm.f32	d23, d14, d8
    dcc4:	e316130b 	tst	r6, #738197504	; 0x2c000000
    dcc8:	c34aa41c 	movtgt	sl, #42012	; 0xa41c
    dccc:	3b81e391 	blcc	fe086b18 <_estack+0xde081b18>
    dcd0:	ba629014 	blt	18b1d28 <__ccfg+0x1891d80>
    dcd4:	23468b1c 	movtcs	r8, #27420	; 0x6b1c
    dcd8:	e34a8b1e 	movt	r8, #43806	; 0xab1e
    dcdc:	904e8b1c 	subls	r8, lr, ip, lsl fp
    dce0:	8b2207b2 	blhi	88fbb0 <__ccfg+0x86fc08>
    dce4:	1ba29042 	blne	fe8b1df4 <_estack+0xde8acdf4>
    dce8:	e362961a 	cmn	r2, #27262976	; 0x1a00000
    dcec:	c34aa41c 	movtgt	sl, #42012	; 0xa41c
    dcf0:	3b81e391 	blcc	fe086b3c <_estack+0xde081b3c>
    dcf4:	a01cab18 	andsge	sl, ip, r8, lsl fp
    dcf8:	a21c9b4e 	andsge	r9, ip, #79872	; 0x13800
    dcfc:	a41cbc4a 	ldrge	fp, [ip], #-3146	; 0xfffff3b6
    dd00:	1010b242 	andsne	fp, r0, r2, asr #4
    dd04:	9d22d082 	stcls	0, cr13, [r2, #-520]!	; 0xfffffdf8
    dd08:	1080f042 	addne	pc, r0, r2, asr #32
    dd0c:	6346a422 	movtvs	sl, #25634	; 0x6422
    dd10:	a466a564 	strbtge	sl, [r6], #-1380	; 0xfffffa9c
    dd14:	9410ab62 	ldrls	sl, [r0], #-2914	; 0xfffff49e
    dd18:	94109b62 	ldrls	r9, [r0], #-2914	; 0xfffff49e
    dd1c:	30700062 	rsbscc	r0, r0, r2, rrx
    dd20:	10c0f182 	sbcne	pc, r0, r2, lsl #3
    dd24:	00b06304 	adcseq	r6, r0, r4, lsl #6
    dd28:	bc6aa871 	stcllt	8, cr10, [sl], #-452	; 0xfffffe3c
    dd2c:	00b0e010 	adcseq	lr, r0, r0, lsl r0
    dd30:	c281b270 	addgt	fp, r1, #112, 4
    dd34:	0181d291 			; <UNDEFINED> instruction: 0x0181d291
    dd38:	51181282 	tstpl	r8, r2, lsl #5
    dd3c:	41181281 	tstmi	r8, r1, lsl #5
    dd40:	81318182 	teqhi	r1, r2, lsl #3
    dd44:	bf1c123d 	svclt	0x001c123d
    dd48:	32b0e24a 	adcscc	lr, r0, #-1610612732	; 0xa0000004
    dd4c:	f2dfb0b0 	vshr.s64	d27, d16, #33
    dd50:	f1673c92 			; <UNDEFINED> instruction: 0xf1673c92
    dd54:	c31421c7 	tstgt	r4, #-1073741775	; 0xc0000031
    dd58:	62c8124e 	sbcvs	r1, r8, #-536870908	; 0xe0000004
    dd5c:	31917291 			; <UNDEFINED> instruction: 0x31917291
    dd60:	00b0e1b0 	ldrhteq	lr, [r0], r0
    dd64:	06c00870 	uxtab16eq	r0, r0, r0, ror #16
    dd68:	60c800c0 	sbcvs	r0, r8, r0, asr #1
    dd6c:	00917091 	umullseq	r7, r1, r1, r0
    dd70:	b0820170 	addlt	r0, r2, r0, ror r1
    dd74:	d091c081 	addsle	ip, r1, r1, lsl #1
    dd78:	51181081 	tstpl	r8, r1, lsl #1
    dd7c:	06181081 	ldreq	r1, [r8], -r1, lsl #1
    dd80:	4280e114 	addmi	lr, r0, #20, 2
    dd84:	82318282 	eorshi	r8, r1, #536870920	; 0x20000008
    dd88:	e41c203d 	ldr	r2, [ip], #-61	; 0xffffffc3
    dd8c:	21b0e24a 	asrscs	lr, sl, #4
    dd90:	3246e822 	subcc	lr, r6, #2228224	; 0x220000
    dd94:	a01005b0 			; <UNDEFINED> instruction: 0xa01005b0
    dd98:	3c92f5df 	cfldr32cc	mvfx15, [r2], {223}	; 0xdf
    dd9c:	e8222167 	stmda	r2!, {r0, r1, r2, r5, r6, r8, sp}
    dda0:	32a0e242 	adccc	lr, r0, #536870916	; 0x20000004
    dda4:	418231b0 			; <UNDEFINED> instruction: 0x418231b0
    dda8:	01c0f039 	biceq	pc, r0, r9, lsr r0	; <UNPREDICTABLE>
    ddac:	f61e0104 			; <UNDEFINED> instruction: 0xf61e0104
    ddb0:	10161842 	andsne	r1, r6, r2, asr #16
    ddb4:	083010c0 	ldmdaeq	r0!, {r6, r7, ip}
    ddb8:	6047041c 	subvs	r0, r7, ip, lsl r4
    ddbc:	063c1010 			; <UNDEFINED> instruction: 0x063c1010
    ddc0:	61c7f110 	bicvs	pc, r7, r0, lsl r1	; <UNPREDICTABLE>
    ddc4:	164efa14 			; <UNDEFINED> instruction: 0x164efa14
    ddc8:	719166c8 	orrsvc	r6, r1, r8, asr #13
    ddcc:	81318181 	teqhi	r1, r1, lsl #3
    ddd0:	011c163d 	tsteq	ip, sp, lsr r6
    ddd4:	3191764b 	orrscc	r7, r1, fp, asr #12
    ddd8:	08c006b0 	stmiaeq	r0, {r4, r5, r7, r9, sl}^
    dddc:	617000c0 	cmnvs	r0, r0, asr #1
    dde0:	81318181 	teqhi	r1, r1, lsl #3
    dde4:	8082403d 	addhi	r4, r2, sp, lsr r0
    dde8:	f1180139 			; <UNDEFINED> instruction: 0xf1180139
    ddec:	014b171c 	cmpeq	fp, ip, lsl r7
    ddf0:	c080b014 	addgt	fp, r0, r4, lsl r0
    ddf4:	bc471722 	mcrrlt	7, 2, r1, r7, cr2
    ddf8:	90b033b0 	ldrhtls	r3, [r0], r0
    ddfc:	0f92f1ef 	svceq	0x0092f1ef
    de00:	00673c93 	mlseq	r7, r3, ip, r3
    de04:	63a00370 	movvs	r0, #112, 6	; 0xc0000001
    de08:	efb064b0 	svc	0x00b064b0
    de0c:	006556b0 	strhteq	r5, [r5], #-96	; 0xffffffa0
    de10:	00804071 	addeq	r4, r0, r1, ror r0
    de14:	64472b22 	strbvs	r2, [r7], #-2850	; 0xfffff4de
    de18:	ef652ab0 	svc	0x00652ab0
    de1c:	407100a0 	rsbsmi	r0, r1, r0, lsr #1
    de20:	2b220080 	blcs	88e028 <__ccfg+0x86e080>
    de24:	03b06447 	movseq	r6, #1191182336	; 0x47000000
    de28:	016238b0 	strheq	r3, [r2, #-128]!	; 0xffffff80
    de2c:	82816282 	addhi	r6, r1, #536870920	; 0x20000008
    de30:	803d8231 	eorshi	r8, sp, r1, lsr r2
    de34:	0292f1ef 	addseq	pc, r2, #-1073741765	; 0xc000003b
    de38:	03673c93 	cmneq	r7, #37632	; 0x9300
    de3c:	e66556a0 	strbt	r5, [r5], -r0, lsr #13
    de40:	6380a261 	orrvs	sl, r0, #268435462	; 0x10000006
    de44:	5061e664 	rsbpl	lr, r1, r4, ror #12
    de48:	e67100b0 			; <UNDEFINED> instruction: 0xe67100b0
    de4c:	d092e061 	addsle	lr, r2, r1, rrx
    de50:	3d220082 	stccc	0, cr0, [r2, #-520]!	; 0xfffffdf8
    de54:	00b2c047 	adcseq	ip, r2, r7, asr #32
    de58:	f080a070 			; <UNDEFINED> instruction: 0xf080a070
    de5c:	30435922 	subcc	r5, r3, r2, lsr #18
    de60:	62c102b0 	sbcvs	r0, r1, #176, 4
    de64:	a0c00131 	sbcge	r0, r0, r1, lsr r1
    de68:	521e0080 	andspl	r0, lr, #128	; 0x80
    de6c:	5322f043 	msrpl	CPSR_x, #67	; 0x43
    de70:	60f5a043 	rscsvs	sl, r5, r3, asr #32
    de74:	53396031 	teqpl	r9, #49	; 0x31
    de78:	10102063 	andsne	r2, r0, r3, rrx
    de7c:	236f131a 	cmncs	pc, #1744830464	; 0x68000000
    de80:	1216116e 	andsne	r1, r6, #-2147483621	; 0x8000001b
    de84:	006b5416 	rsbeq	r5, fp, r6, lsl r4
    de88:	28e80370 	stmiacs	r8!, {r4, r5, r6, r8, r9}^
    de8c:	270b0000 	strcs	r0, [fp, -r0]
    de90:	00005812 	andeq	r5, r0, r2, lsl r8
    de94:	1c100400 	cfldrsne	mvf0, [r0], {-0}
    de98:	10240000 	eorne	r0, r4, r0
    de9c:	0300001c 	movweq	r0, #28
    dea0:	00001daf 	andeq	r1, r0, pc, lsr #27
    dea4:	45122b0b 	ldrmi	r2, [r2, #-2827]	; 0xfffff4f5
    dea8:	24000000 	strcs	r0, [r0], #-0
    deac:	00001c26 	andeq	r1, r0, r6, lsr #24
    deb0:	00293a03 	eoreq	r3, r9, r3, lsl #20
    deb4:	122c0b00 	eorne	r0, ip, #0, 22
    deb8:	0000006b 	andeq	r0, r0, fp, rrx
    debc:	001c3704 	andseq	r3, ip, r4, lsl #14
    dec0:	06410300 	strbeq	r0, [r1], -r0, lsl #6
    dec4:	2d0b0000 	stccs	0, cr0, [fp, #-0]
    dec8:	00006b12 	andeq	r6, r0, r2, lsl fp
    decc:	0b080b00 	bleq	210ad4 <__ccfg+0x1f0b2c>
    ded0:	1ce20932 			; <UNDEFINED> instruction: 0x1ce20932
    ded4:	2b200000 	blcs	80dedc <__ccfg+0x7edf34>
    ded8:	0b000000 	bleq	dee0 <__exidx_end+0x84bc>
    dedc:	1c260734 	stcne	7, cr0, [r6], #-208	; 0xffffff30
    dee0:	01010000 	mrseq	r0, (UNDEF: 1)
    dee4:	47200007 	strmi	r0, [r0, -r7]!
    dee8:	0b000006 	bleq	df08 <__exidx_end+0x84e4>
    deec:	1c260335 	stcne	3, cr0, [r6], #-212	; 0xffffff2c
    def0:	01010000 	mrseq	r0, (UNDEF: 1)
    def4:	de200006 	cdple	0, 2, cr0, cr0, cr6, {0}
    def8:	0b000002 	bleq	df08 <__exidx_end+0x84e4>
    defc:	1c260336 	stcne	3, cr0, [r6], #-216	; 0xffffff28
    df00:	01010000 	mrseq	r0, (UNDEF: 1)
    df04:	b2200005 	eorlt	r0, r0, #5
    df08:	0b000006 	bleq	df28 <__exidx_end+0x8504>
    df0c:	1c260337 	stcne	3, cr0, [r6], #-220	; 0xffffff24
    df10:	01010000 	mrseq	r0, (UNDEF: 1)
    df14:	9a200004 	bls	80df2c <__ccfg+0x7edf84>
    df18:	0b00000a 	bleq	df48 <__exidx_end+0x8524>
    df1c:	1c260338 	stcne	3, cr0, [r6], #-224	; 0xffffff20
    df20:	04010000 	streq	r0, [r1], #-0
    df24:	560c0000 	strpl	r0, [ip], -r0
    df28:	0b000006 	bleq	df48 <__exidx_end+0x8524>
    df2c:	1c26073a 	stcne	7, cr0, [r6], #-232	; 0xffffff18
    df30:	0c010000 	stceq	0, cr0, [r1], {-0}
    df34:	000008f6 	strdeq	r0, [r0], -r6
    df38:	26033c0b 	strcs	r3, [r3], -fp, lsl #24
    df3c:	0200001c 	andeq	r0, r0, #28
    df40:	000f270c 	andeq	r2, pc, ip, lsl #14
    df44:	033d0b00 	teqeq	sp, #0, 22
    df48:	00001c26 	andeq	r1, r0, r6, lsr #24
    df4c:	090e0c03 	stmdbeq	lr, {r0, r1, sl, fp}
    df50:	3f0b0000 	svccc	0x000b0000
    df54:	001c3708 	andseq	r3, ip, r8, lsl #14
    df58:	03000400 	movweq	r0, #1024	; 0x400
    df5c:	00000314 	andeq	r0, r0, r4, lsl r3
    df60:	5403410b 	strpl	r4, [r3], #-267	; 0xfffffef5
    df64:	2400001c 	strcs	r0, [r0], #-28	; 0xffffffe4
    df68:	00001ce2 	andeq	r1, r0, r2, ror #25
    df6c:	0006b925 	andeq	fp, r6, r5, lsr #18
    df70:	1a430b00 	bne	10d0b78 <__ccfg+0x10b0bd0>
    df74:	00001cee 	andeq	r1, r0, lr, ror #25
    df78:	97250101 	strls	r0, [r5, -r1, lsl #2]!
    df7c:	0b000001 	bleq	df88 <__exidx_end+0x8564>
    df80:	05de0e45 	ldrbeq	r0, [lr, #3653]	; 0xe45
    df84:	01010000 	mrseq	r0, (UNDEF: 1)
    df88:	00031d25 	andeq	r1, r3, r5, lsr #26
    df8c:	1e450b00 	vmlane.f64	d16, d5, d0
    df90:	000005de 	ldrdeq	r0, [r0], -lr
    df94:	080b0101 	stmdaeq	fp, {r0, r8}
    df98:	4e098f0c 	cdpmi	15, 0, cr8, cr9, cr12, {0}
    df9c:	0c00001d 	stceq	0, cr0, [r0], {29}
    dfa0:	00000cc5 	andeq	r0, r0, r5, asr #25
    dfa4:	6b0b900c 	blvs	2f1fdc <__ccfg+0x2d2034>
    dfa8:	00000000 	andeq	r0, r0, r0
    dfac:	0010620c 	andseq	r6, r0, ip, lsl #4
    dfb0:	08910c00 	ldmeq	r1, {sl, fp}
    dfb4:	00001c10 	andeq	r1, r0, r0, lsl ip
    dfb8:	01bc0c04 			; <UNDEFINED> instruction: 0x01bc0c04
    dfbc:	920c0000 	andls	r0, ip, #0
    dfc0:	001c3210 	andseq	r3, ip, r0, lsl r2
    dfc4:	03000600 	movweq	r0, #1536	; 0x600
    dfc8:	00000cb9 			; <UNDEFINED> instruction: 0x00000cb9
    dfcc:	1d03930c 	stcne	3, cr9, [r3, #-48]	; 0xffffffd0
    dfd0:	0900001d 	stmdbeq	r0, {r0, r2, r3, r4}
    dfd4:	00001d4e 	andeq	r1, r0, lr, asr #26
    dfd8:	00001d65 	andeq	r1, r0, r5, ror #26
    dfdc:	38250026 	stmdacc	r5!, {r1, r2, r5}
    dfe0:	0c000009 	stceq	0, cr0, [r0], {9}
    dfe4:	1d5a0f99 	ldclne	15, cr0, [sl, #-612]	; 0xfffffd9c
    dfe8:	01010000 	mrseq	r0, (UNDEF: 1)
    dfec:	910d010b 	tstls	sp, fp, lsl #2
    dff0:	001d9d09 	andseq	r9, sp, r9, lsl #26
    dff4:	09152000 	ldmdbeq	r5, {sp}
    dff8:	930d0000 	movwls	r0, #53248	; 0xd000
    dffc:	001c2607 	andseq	r2, ip, r7, lsl #12
    e000:	01070100 	mrseq	r0, (UNDEF: 23)
    e004:	05c72000 	strbeq	r2, [r7]
    e008:	940d0000 	strls	r0, [sp], #-0
    e00c:	001c2603 	andseq	r2, ip, r3, lsl #12
    e010:	00010100 	andeq	r0, r1, r0, lsl #2
    e014:	a6030000 	strge	r0, [r3], -r0
    e018:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
    e01c:	1d730396 	ldclne	3, cr0, [r3, #-600]!	; 0xfffffda8
    e020:	9d040000 	stcls	0, cr0, [r4, #-0]
    e024:	0900001d 	stmdbeq	r0, {r0, r2, r3, r4}
    e028:	00001da9 	andeq	r1, r0, r9, lsr #27
    e02c:	00001db9 			; <UNDEFINED> instruction: 0x00001db9
    e030:	ae040026 	cdpge	0, 0, cr0, cr4, cr6, {1}
    e034:	2500001d 	strcs	r0, [r0, #-29]	; 0xffffffe3
    e038:	000003ac 	andeq	r0, r0, ip, lsr #7
    e03c:	b9179c0d 	ldmdblt	r7, {r0, r2, r3, sl, fp, ip, pc}
    e040:	0100001d 	tsteq	r0, sp, lsl r0
    e044:	1c1c0901 			; <UNDEFINED> instruction: 0x1c1c0901
    e048:	1dd70000 	ldclne	0, cr0, [r7]
    e04c:	00260000 	eoreq	r0, r6, r0
    e050:	001dcc04 	andseq	ip, sp, r4, lsl #24
    e054:	06092500 	streq	r2, [r9], -r0, lsl #10
    e058:	060e0000 	streq	r0, [lr], -r0
    e05c:	001dd713 	andseq	sp, sp, r3, lsl r7
    e060:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    e064:	000008d8 	ldrdeq	r0, [r0], -r8
    e068:	370ec30c 	strcc	ip, [lr, -ip, lsl #6]
    e06c:	0100001c 	tsteq	r0, ip, lsl r0
    e070:	0c6d0601 	stcleq	6, cr0, [sp], #-4
    e074:	6e0f0000 	cdpvs	0, 0, cr0, cr15, cr0, {0}
    e078:	1e051001 	cdpne	0, 0, cr1, cr5, cr1, {0}
    e07c:	04100000 	ldreq	r0, [r0], #-0
    e080:	00001e0b 	andeq	r1, r0, fp, lsl #28
    e084:	1e17011e 	mrcne	1, 0, r0, cr7, cr14, {0}
    e088:	10150000 	andsne	r0, r5, r0
    e08c:	0000001c 	andeq	r0, r0, ip, lsl r0
    e090:	0005eb09 	andeq	lr, r5, r9, lsl #22
    e094:	001e2200 	andseq	r2, lr, r0, lsl #4
    e098:	04002600 	streq	r2, [r0], #-1536	; 0xfffffa00
    e09c:	00001e17 	andeq	r1, r0, r7, lsl lr
    e0a0:	0009e11f 	andeq	lr, r9, pc, lsl r1
    e0a4:	017f0f00 	cmneq	pc, r0, lsl #30
    e0a8:	001e2216 	andseq	r2, lr, r6, lsl r2
    e0ac:	1f010100 	svcne	0x00010100
    e0b0:	00000398 	muleq	r0, r8, r3
    e0b4:	1401820f 	strne	r8, [r1], #-527	; 0xfffffdf1
    e0b8:	00001c43 	andeq	r1, r0, r3, asr #24
    e0bc:	701f0101 	andsvc	r0, pc, r1, lsl #2
    e0c0:	0f000003 	svceq	0x00000003
    e0c4:	370e02d8 			; <UNDEFINED> instruction: 0x370e02d8
    e0c8:	0100001c 	tsteq	r0, ip, lsl r0
    e0cc:	0f081a01 	svceq	0x00081a01
    e0d0:	7b090303 	blvc	24ece4 <__ccfg+0x22ed3c>
    e0d4:	1700001e 	smladne	r0, lr, r0, r0
    e0d8:	00003c8e 	andeq	r3, r0, lr, lsl #25
    e0dc:	0703070f 	streq	r0, [r3, -pc, lsl #14]
    e0e0:	00001c10 	andeq	r1, r0, r0, lsl ip
    e0e4:	0fba1700 	svceq	0x00ba1700
    e0e8:	080f0000 	stmdaeq	pc, {}	; <UNPREDICTABLE>
    e0ec:	1c480803 	mcrrne	8, 0, r0, r8, cr3
    e0f0:	00040000 	andeq	r0, r4, r0
    e0f4:	000a0406 	andeq	r0, sl, r6, lsl #8
    e0f8:	03090f00 	movweq	r0, #40704	; 0x9f00
    e0fc:	001e5403 	andseq	r5, lr, r3, lsl #8
    e100:	00201900 	eoreq	r1, r0, r0, lsl #18
    e104:	0f300000 	svceq	0x00300000
    e108:	eb08030b 	bl	20ed3c <__ccfg+0x1eed94>
    e10c:	1700001e 	smladne	r0, lr, r0, r0
    e110:	00001f11 	andeq	r1, r0, r1, lsl pc
    e114:	0803140f 	stmdaeq	r3, {r0, r1, r2, r3, sl, ip}
    e118:	00001c10 	andeq	r1, r0, r0, lsl ip
    e11c:	0be21700 	bleq	ff893d24 <_estack+0xdf88ed24>
    e120:	150f0000 	strne	r0, [pc, #-0]	; e128 <__exidx_end+0x8704>
    e124:	1c100803 	ldcne	8, cr0, [r0], {3}
    e128:	17020000 	strne	r0, [r2, -r0]
    e12c:	00004c7b 	andeq	r4, r0, fp, ror ip
    e130:	0b03160f 	bleq	d3974 <__ccfg+0xb39cc>
    e134:	00001df8 	strdeq	r1, [r0], -r8
    e138:	47411704 	strbmi	r1, [r1, -r4, lsl #14]
    e13c:	170f0000 	strne	r0, [pc, -r0]
    e140:	1c480903 	mcrrne	9, 0, r0, r8, cr3	; <UNPREDICTABLE>
    e144:	17080000 	strne	r0, [r8, -r0]
    e148:	0000000f 	andeq	r0, r0, pc
    e14c:	0f03180f 	svceq	0x0003180f
    e150:	00001eeb 	andeq	r1, r0, fp, ror #29
    e154:	0958170c 	ldmdbeq	r8, {r2, r3, r8, r9, sl, ip}^
    e158:	190f0000 	stmdbne	pc, {}	; <UNPREDICTABLE>
    e15c:	1efb1503 	cdpne	5, 15, cr1, cr11, cr3, {0}
    e160:	002c0000 	eoreq	r0, ip, r0
    e164:	001e7b09 	andseq	r7, lr, r9, lsl #22
    e168:	001efb00 	andseq	pc, lr, r0, lsl #22
    e16c:	00910a00 	addseq	r0, r1, r0, lsl #20
    e170:	00030000 	andeq	r0, r3, r0
    e174:	1e880410 	mcrne	4, 4, r0, cr8, cr0, {0}
    e178:	d7060000 	strle	r0, [r6, -r0]
    e17c:	0f00000b 	svceq	0x0000000b
    e180:	881b031c 	ldmdahi	fp, {r2, r3, r4, r8, r9}
    e184:	1f00001e 	svcne	0x0000001e
    e188:	00000bb7 			; <UNDEFINED> instruction: 0x00000bb7
    e18c:	14031e0f 	strne	r1, [r3], #-3599	; 0xfffff1f1
    e190:	00001f1d 	andeq	r1, r0, sp, lsl pc
    e194:	04100101 	ldreq	r0, [r0], #-257	; 0xfffffeff
    e198:	00001f01 	andeq	r1, r0, r1, lsl #30
    e19c:	00070a25 	andeq	r0, r7, r5, lsr #20
    e1a0:	131d1000 	tstne	sp, #0
    e1a4:	00001c10 	andeq	r1, r0, r0, lsl ip
    e1a8:	e5250101 	str	r0, [r5, #-257]!	; 0xfffffeff
    e1ac:	10000002 	andne	r0, r0, r2
    e1b0:	1c211a1e 			; <UNDEFINED> instruction: 0x1c211a1e
    e1b4:	01010000 	mrseq	r0, (UNDEF: 1)
    e1b8:	000c6425 	andeq	r6, ip, r5, lsr #8
    e1bc:	241e1000 	ldrcs	r1, [lr], #-0
    e1c0:	00001c21 	andeq	r1, r0, r1, lsr #24
    e1c4:	82250101 	eorhi	r0, r5, #1073741824	; 0x40000000
    e1c8:	1000000c 	andne	r0, r0, ip
    e1cc:	1f1d1422 	svcne	0x001d1422
    e1d0:	01010000 	mrseq	r0, (UNDEF: 1)
    e1d4:	00202825 	eoreq	r2, r0, r5, lsr #16
    e1d8:	27391100 	ldrcs	r1, [r9, -r0, lsl #2]!
    e1dc:	00000d5e 	andeq	r0, r0, lr, asr sp
    e1e0:	16250101 	strtne	r0, [r5], -r1, lsl #2
    e1e4:	11000023 	tstne	r0, r3, lsr #32
    e1e8:	09f1153a 	ldmibeq	r1!, {r1, r3, r4, r5, r8, sl, ip}^
    e1ec:	01010000 	mrseq	r0, (UNDEF: 1)
    e1f0:	00273225 	eoreq	r3, r7, r5, lsr #4
    e1f4:	1a3b1100 	bne	ed25fc <__ccfg+0xeb2654>
    e1f8:	00000bd8 	ldrdeq	r0, [r0], -r8
    e1fc:	d6250101 	strtle	r0, [r5], -r1, lsl #2
    e200:	11000025 	tstne	r0, r5, lsr #32
    e204:	0c741a3c 			; <UNDEFINED> instruction: 0x0c741a3c
    e208:	01010000 	mrseq	r0, (UNDEF: 1)
    e20c:	00006b09 	andeq	r6, r0, r9, lsl #22
    e210:	001fa300 	andseq	sl, pc, r0, lsl #6
    e214:	00910a00 	addseq	r0, r1, r0, lsl #20
    e218:	00140000 	andseq	r0, r4, r0
    e21c:	00299427 	eoreq	r9, r9, r7, lsr #8
    e220:	113d1200 	teqne	sp, r0, lsl #4
    e224:	00001f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    e228:	00b80305 	adcseq	r0, r8, r5, lsl #6
    e22c:	5b282000 	blpl	a16234 <__ccfg+0x9f628c>
    e230:	1200001f 	andne	r0, r0, #31
    e234:	03052072 	movweq	r2, #20594	; 0x5072
    e238:	20000054 	andcs	r0, r0, r4, asr r0
    e23c:	001f6928 	andseq	r6, pc, r8, lsr #18
    e240:	0e961200 	cdpeq	2, 9, cr1, cr6, cr0, {0}
    e244:	003c0305 	eorseq	r0, ip, r5, lsl #6
    e248:	77282000 	strvc	r2, [r8, -r0]!
    e24c:	1200001f 	andne	r0, r0, #31
    e250:	030513ad 	movweq	r1, #21421	; 0x53ad
    e254:	200000a0 	andcs	r0, r0, r0, lsr #1
    e258:	001f8528 	andseq	r8, pc, r8, lsr #10
    e25c:	13c21200 	bicne	r1, r2, #0, 4
    e260:	007c0305 	rsbseq	r0, ip, r5, lsl #6
    e264:	8a002000 	bhi	1626c <__exidx_end+0x10848>
    e268:	04000001 	streq	r0, [r0], #-1
    e26c:	0030ec00 	eorseq	lr, r0, r0, lsl #24
    e270:	2c010400 	cfstrscs	mvf0, [r1], {-0}
    e274:	0100002a 	tsteq	r0, sl, lsr #32
    e278:	00002a11 	andeq	r2, r0, r1, lsl sl
    e27c:	00002af3 	strdeq	r2, [r0], -r3
    e280:	00001108 	andeq	r1, r0, r8, lsl #2
    e284:	00000000 	andeq	r0, r0, r0
    e288:	000072fd 	strdeq	r7, [r0], -sp
    e28c:	58060102 	stmdapl	r6, {r1, r8}
    e290:	0300000c 	movweq	r0, #12
    e294:	00002a07 	andeq	r2, r0, r7, lsl #20
    e298:	00371d02 	eorseq	r1, r7, r2, lsl #26
    e29c:	01020000 	mrseq	r0, (UNDEF: 2)
    e2a0:	000c5608 	andeq	r5, ip, r8, lsl #12
    e2a4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    e2a8:	00000a66 	andeq	r0, r0, r6, ror #20
    e2ac:	53070202 	movwpl	r0, #29186	; 0x7202
    e2b0:	0200000d 	andeq	r0, r0, #13
    e2b4:	07f80504 	ldrbeq	r0, [r8, r4, lsl #10]!
    e2b8:	9f030000 	svcls	0x00030000
    e2bc:	02000029 	andeq	r0, r0, #41	; 0x29
    e2c0:	00005e41 	andeq	r5, r0, r1, asr #28
    e2c4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e2c8:	00000428 	andeq	r0, r0, r8, lsr #8
    e2cc:	f3050802 	vsub.i8	d0, d5, d2
    e2d0:	02000007 	andeq	r0, r0, #7
    e2d4:	04230708 	strteq	r0, [r3], #-1800	; 0xfffff8f8
    e2d8:	04040000 	streq	r0, [r4], #-0
    e2dc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    e2e0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e2e4:	0000042d 	andeq	r0, r0, sp, lsr #8
    e2e8:	002a0903 	eoreq	r0, sl, r3, lsl #18
    e2ec:	2c140300 	ldccs	3, cr0, [r4], {-0}
    e2f0:	03000000 	movweq	r0, #0
    e2f4:	000029a1 	andeq	r2, r0, r1, lsr #19
    e2f8:	00532003 	subseq	r2, r3, r3
    e2fc:	cb030000 	blgt	ce304 <__ccfg+0xae35c>
    e300:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    e304:	0000a233 	andeq	sl, r0, r3, lsr r2
    e308:	a8040500 	stmdage	r4, {r8, sl}
    e30c:	06000000 	streq	r0, [r0], -r0
    e310:	002ae103 	eoreq	lr, sl, r3, lsl #2
    e314:	b4340400 	ldrtlt	r0, [r4], #-1024	; 0xfffffc00
    e318:	05000000 	streq	r0, [r0, #-0]
    e31c:	0000ba04 	andeq	fp, r0, r4, lsl #20
    e320:	00c50700 	sbceq	r0, r5, r0, lsl #14
    e324:	81080000 	mrshi	r0, (UNDEF: 8)
    e328:	00000000 	andeq	r0, r0, r0
    e32c:	0029fa09 	eoreq	pc, r9, r9, lsl #20
    e330:	38990500 	ldmcc	r9, {r8, sl}
    e334:	28000038 	stmdacs	r0, {r3, r4, r5}
    e338:	01000000 	mrseq	r0, (UNDEF: 0)
    e33c:	00010b9c 	muleq	r1, ip, fp
    e340:	2adc0a00 	bcs	ff710b48 <_estack+0xdf70bb48>
    e344:	35010000 	strcc	r0, [r1, #-0]
    e348:	00000097 	muleq	r0, r7, r0
    e34c:	00003655 	andeq	r3, r0, r5, asr r6
    e350:	0029aa0b 	eoreq	sl, r9, fp, lsl #20
    e354:	0b370100 	bleq	dce75c <__ccfg+0xdae7b4>
    e358:	9a000001 	bls	e364 <__exidx_end+0x8940>
    e35c:	0c000036 	stceq	0, cr0, [r0], {54}	; 0x36
    e360:	00003840 	andeq	r3, r0, r0, asr #16
    e364:	00000177 	andeq	r0, r0, r7, ror r1
    e368:	00385a0d 	eorseq	r5, r8, sp, lsl #20
    e36c:	00018200 	andeq	r8, r1, r0, lsl #4
    e370:	01020000 	mrseq	r0, (UNDEF: 2)
    e374:	000ca202 	andeq	sl, ip, r2, lsl #4
    e378:	29b60e00 	ldmibcs	r6!, {r9, sl, fp}
    e37c:	9a050000 	bls	14e384 <__ccfg+0x12e3dc>
    e380:	00000000 	andeq	r0, r0, r0
    e384:	0000002c 	andeq	r0, r0, ip, lsr #32
    e388:	01779c01 	cmneq	r7, r1, lsl #24
    e38c:	dc0a0000 	stcle	0, cr0, [sl], {-0}
    e390:	0100002a 	tsteq	r0, sl, lsr #32
    e394:	0000a940 	andeq	sl, r0, r0, asr #18
    e398:	0036cf00 	eorseq	ip, r6, r0, lsl #30
    e39c:	2b530a00 	blcs	14d0ba4 <__ccfg+0x14b0bfc>
    e3a0:	40010000 	andmi	r0, r1, r0
    e3a4:	00000081 	andeq	r0, r0, r1, lsl #1
    e3a8:	00003714 	andeq	r3, r0, r4, lsl r7
    e3ac:	0029aa0b 	eoreq	sl, r9, fp, lsl #20
    e3b0:	0b420100 	bleq	108e7b8 <__ccfg+0x106e810>
    e3b4:	35000001 	strcc	r0, [r0, #-1]
    e3b8:	0c000037 	stceq	0, cr0, [r0], {55}	; 0x37
    e3bc:	00000000 	andeq	r0, r0, r0
    e3c0:	00000177 	andeq	r0, r0, r7, ror r1
    e3c4:	0000000f 	andeq	r0, r0, pc
    e3c8:	00016d00 	andeq	r6, r1, r0, lsl #26
    e3cc:	50011000 	andpl	r1, r1, r0
    e3d0:	00007702 	andeq	r7, r0, r2, lsl #14
    e3d4:	0000000d 	andeq	r0, r0, sp
    e3d8:	00018200 	andeq	r8, r1, r0, lsl #4
    e3dc:	dc110000 	ldcle	0, cr0, [r1], {-0}
    e3e0:	06000029 	streq	r0, [r0], -r9, lsr #32
    e3e4:	00008c6a 	andeq	r8, r0, sl, ror #24
    e3e8:	29eb1100 	stmibcs	fp!, {r8, ip}^
    e3ec:	84060000 	strhi	r0, [r6], #-0
    e3f0:	0000008c 	andeq	r0, r0, ip, lsl #1
    e3f4:	0000d500 	andeq	sp, r0, r0, lsl #10
    e3f8:	d8000400 	stmdale	r0, {sl}
    e3fc:	04000031 	streq	r0, [r0], #-49	; 0xffffffcf
    e400:	002a2c01 	eoreq	r2, sl, r1, lsl #24
    e404:	2b9f0100 	blcs	fe7ce80c <_estack+0xde7c980c>
    e408:	2af30000 	bcs	ffcce410 <_estack+0xdfcc9410>
    e40c:	11200000 			; <UNDEFINED> instruction: 0x11200000
    e410:	00000000 	andeq	r0, r0, r0
    e414:	749d0000 	ldrvc	r0, [sp], #0
    e418:	96020000 	strls	r0, [r2], -r0
    e41c:	0200002b 	andeq	r0, r0, #43	; 0x2b
    e420:	0000301b 	andeq	r3, r0, fp, lsl r0
    e424:	06010300 	streq	r0, [r1], -r0, lsl #6
    e428:	00000c58 	andeq	r0, r0, r8, asr ip
    e42c:	56080103 	strpl	r0, [r8], -r3, lsl #2
    e430:	0300000c 	movweq	r0, #12
    e434:	0a660502 	beq	198f844 <__ccfg+0x196f89c>
    e438:	02030000 	andeq	r0, r3, #0
    e43c:	000d5307 	andeq	r5, sp, r7, lsl #6
    e440:	2b8c0200 	blcs	fe30ec48 <_estack+0xde309c48>
    e444:	3f020000 	svccc	0x00020000
    e448:	00000057 	andeq	r0, r0, r7, asr r0
    e44c:	f8050403 			; <UNDEFINED> instruction: 0xf8050403
    e450:	03000007 	movweq	r0, #7
    e454:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
    e458:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    e45c:	0007f305 	andeq	pc, r7, r5, lsl #6
    e460:	07080300 	streq	r0, [r8, -r0, lsl #6]
    e464:	00000423 	andeq	r0, r0, r3, lsr #8
    e468:	69050404 	stmdbvs	r5, {r2, sl}
    e46c:	0300746e 	movweq	r7, #1134	; 0x46e
    e470:	042d0704 	strteq	r0, [sp], #-1796	; 0xfffff8fc
    e474:	98020000 	stmdals	r2, {}	; <UNPREDICTABLE>
    e478:	0300002b 	movweq	r0, #43	; 0x2b
    e47c:	00002513 	andeq	r2, r0, r3, lsl r5
    e480:	2b8e0200 	blcs	fe38ec88 <_estack+0xde389c88>
    e484:	1f030000 	svcne	0x00030000
    e488:	0000004c 	andeq	r0, r0, ip, asr #32
    e48c:	002b5d05 	eoreq	r5, fp, r5, lsl #26
    e490:	8caa0400 	cfstrshi	mvf0, [sl]
    e494:	60000000 	andvs	r0, r0, r0
    e498:	30000038 	andcc	r0, r0, r8, lsr r0
    e49c:	01000000 	mrseq	r0, (UNDEF: 0)
    e4a0:	2bd0069c 	blcs	ff40ff18 <_estack+0xdf40af18>
    e4a4:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    e4a8:	0000008c 	andeq	r0, r0, ip, lsl #1
    e4ac:	0000376a 	andeq	r3, r0, sl, ror #14
    e4b0:	002bc106 	eoreq	ip, fp, r6, lsl #2
    e4b4:	8c3f0100 	ldfhis	f0, [pc], #-0	; e4bc <__exidx_end+0x8a98>
    e4b8:	83000000 	movwhi	r0, #0
    e4bc:	07000037 	smladxeq	r0, r7, r0, r0
    e4c0:	00002b7f 	andeq	r2, r0, pc, ror fp
    e4c4:	00814001 	addeq	r4, r1, r1
    e4c8:	51010000 	mrspl	r0, (UNDEF: 1)
    e4cc:	01430000 	mrseq	r0, (UNDEF: 67)
    e4d0:	00040000 	andeq	r0, r4, r0
    e4d4:	00003247 	andeq	r3, r0, r7, asr #4
    e4d8:	2a2c0104 	bcs	b0e8f0 <__ccfg+0xaee948>
    e4dc:	81010000 	mrshi	r0, (UNDEF: 1)
    e4e0:	f300002c 	vhadd.u8	d0, d0, d28
    e4e4:	3000002a 	andcc	r0, r0, sl, lsr #32
    e4e8:	00000011 	andeq	r0, r0, r1, lsl r0
    e4ec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e4f0:	02000076 	andeq	r0, r0, #118	; 0x76
    e4f4:	0c580601 	mrrceq	6, 0, r0, r8, cr1
    e4f8:	01020000 	mrseq	r0, (UNDEF: 2)
    e4fc:	000c5608 	andeq	r5, ip, r8, lsl #12
    e500:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    e504:	00000a66 	andeq	r0, r0, r6, ror #20
    e508:	53070202 	movwpl	r0, #29186	; 0x7202
    e50c:	0200000d 	andeq	r0, r0, #13
    e510:	07f80504 	ldrbeq	r0, [r8, r4, lsl #10]!
    e514:	9f030000 	svcls	0x00030000
    e518:	02000029 	andeq	r0, r0, #41	; 0x29
    e51c:	00005341 	andeq	r5, r0, r1, asr #6
    e520:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e524:	00000428 	andeq	r0, r0, r8, lsr #8
    e528:	f3050802 	vsub.i8	d0, d5, d2
    e52c:	03000007 	movweq	r0, #7
    e530:	00002c2b 	andeq	r2, r0, fp, lsr #24
    e534:	006c5b02 	rsbeq	r5, ip, r2, lsl #22
    e538:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    e53c:	00042307 	andeq	r2, r4, r7, lsl #6
    e540:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    e544:	00746e69 	rsbseq	r6, r4, r9, ror #28
    e548:	2d070402 	cfstrscs	mvf0, [r7, #-8]
    e54c:	03000004 	movweq	r0, #4
    e550:	000029a1 	andeq	r2, r0, r1, lsr #19
    e554:	00482003 	subeq	r2, r8, r3
    e558:	2d030000 	stccs	0, cr0, [r3, #-0]
    e55c:	0300002c 	movweq	r0, #44	; 0x2c
    e560:	00006126 	andeq	r6, r0, r6, lsr #2
    e564:	2bf60500 	blcs	ffd8f96c <_estack+0xdfd8a96c>
    e568:	45040000 	strmi	r0, [r4, #-0]
    e56c:	00008103 	andeq	r8, r0, r3, lsl #2
    e570:	00389000 	eorseq	r9, r8, r0
    e574:	00002000 	andeq	r2, r0, r0
    e578:	dd9c0100 	ldfles	f0, [ip]
    e57c:	06000000 	streq	r0, [r0], -r0
    e580:	00002be7 	andeq	r2, r0, r7, ror #23
    e584:	00814001 	addeq	r4, r1, r1
    e588:	37b80000 	ldrcc	r0, [r8, r0]!
    e58c:	36060000 	strcc	r0, [r6], -r0
    e590:	0100002c 	tsteq	r0, ip, lsr #32
    e594:	00008141 	andeq	r8, r0, r1, asr #2
    e598:	0037cb00 	eorseq	ip, r7, r0, lsl #22
    e59c:	2c190700 	ldccs	7, cr0, [r9], {-0}
    e5a0:	42010000 	andmi	r0, r1, #0
    e5a4:	00000081 	andeq	r0, r0, r1, lsl #1
    e5a8:	05005201 	streq	r5, [r0, #-513]	; 0xfffffdff
    e5ac:	00002c48 	andeq	r2, r0, r8, asr #24
    e5b0:	8c035304 	stchi	3, cr5, [r3], {4}
    e5b4:	b0000000 	andlt	r0, r0, r0
    e5b8:	18000038 	stmdane	r0, {r3, r4, r5}
    e5bc:	01000000 	mrseq	r0, (UNDEF: 0)
    e5c0:	00012f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
    e5c4:	01080800 	tsteq	r8, r0, lsl #16
    e5c8:	00011659 	andeq	r1, r1, r9, asr r6
    e5cc:	2bdb0900 	blcs	ff6d09d4 <_estack+0xdf6cb9d4>
    e5d0:	5a010000 	bpl	4e5d8 <__ccfg+0x2e630>
    e5d4:	0000008c 	andeq	r0, r0, ip, lsl #1
    e5d8:	002c7409 	eoreq	r7, ip, r9, lsl #8
    e5dc:	2f5b0100 	svccs	0x005b0100
    e5e0:	00000001 	andeq	r0, r0, r1
    e5e4:	002c690a 	eoreq	r6, ip, sl, lsl #18
    e5e8:	f75c0100 			; <UNDEFINED> instruction: 0xf75c0100
    e5ec:	07000000 	streq	r0, [r0, -r0]
    e5f0:	00002c19 	andeq	r2, r0, r9, lsl ip
    e5f4:	00815d01 	addeq	r5, r1, r1, lsl #26
    e5f8:	51010000 	mrspl	r0, (UNDEF: 1)
    e5fc:	00810b00 	addeq	r0, r1, r0, lsl #22
    e600:	013f0000 	teqeq	pc, r0
    e604:	3f0c0000 	svccc	0x000c0000
    e608:	01000001 	tsteq	r0, r1
    e60c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e610:	00002ca0 	andeq	r2, r0, r0, lsr #25
    e614:	00013600 	andeq	r3, r1, r0, lsl #12
    e618:	f1000400 			; <UNDEFINED> instruction: 0xf1000400
    e61c:	04000032 	streq	r0, [r0], #-50	; 0xffffffce
    e620:	002a2c01 	eoreq	r2, sl, r1, lsl #24
    e624:	2cde0100 	ldfcse	f0, [lr], {0}
    e628:	2af30000 	bcs	ffcce630 <_estack+0xdfcc9630>
    e62c:	11480000 	mrsne	r0, (UNDEF: 72)
    e630:	00000000 	andeq	r0, r0, r0
    e634:	77b50000 	ldrvc	r0, [r5, r0]!
    e638:	01020000 	mrseq	r0, (UNDEF: 2)
    e63c:	000c5806 	andeq	r5, ip, r6, lsl #16
    e640:	08010200 	stmdaeq	r1, {r9}
    e644:	00000c56 	andeq	r0, r0, r6, asr ip
    e648:	66050202 	strvs	r0, [r5], -r2, lsl #4
    e64c:	0200000a 	andeq	r0, r0, #10
    e650:	0d530702 	ldcleq	7, cr0, [r3, #-8]
    e654:	04020000 	streq	r0, [r2], #-0
    e658:	0007f805 	andeq	pc, r7, r5, lsl #16
    e65c:	299f0300 	ldmibcs	pc, {r8, r9}	; <UNPREDICTABLE>
    e660:	41020000 	mrsmi	r0, (UNDEF: 2)
    e664:	00000053 	andeq	r0, r0, r3, asr r0
    e668:	28070402 	stmdacs	r7, {r1, sl}
    e66c:	02000004 	andeq	r0, r0, #4
    e670:	07f30508 	ldrbeq	r0, [r3, r8, lsl #10]!
    e674:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    e678:	00042307 	andeq	r2, r4, r7, lsl #6
    e67c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    e680:	00746e69 	rsbseq	r6, r4, r9, ror #28
    e684:	2d070402 	cfstrscs	mvf0, [r7, #-8]
    e688:	03000004 	movweq	r0, #4
    e68c:	000029a1 	andeq	r2, r0, r1, lsr #19
    e690:	00482003 	subeq	r2, r8, r3
    e694:	dc050000 	stcle	0, cr0, [r5], {-0}
    e698:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    e69c:	0000766a 	andeq	r7, r0, sl, ror #12
    e6a0:	0038c800 	eorseq	ip, r8, r0, lsl #16
    e6a4:	00000800 	andeq	r0, r0, r0, lsl #16
    e6a8:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    e6ac:	06000000 	streq	r0, [r0], -r0
    e6b0:	00002ccc 	andeq	r2, r0, ip, asr #25
    e6b4:	00767701 	rsbseq	r7, r6, r1, lsl #14
    e6b8:	05000000 	streq	r0, [r0, #-0]
    e6bc:	00002cf9 	strdeq	r2, [r0], -r9
    e6c0:	00767804 	rsbseq	r7, r6, r4, lsl #16
    e6c4:	00000000 	andeq	r0, r0, r0
    e6c8:	00060000 	andeq	r0, r6, r0
    e6cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    e6d0:	000000cb 	andeq	r0, r0, fp, asr #1
    e6d4:	002ccc06 	eoreq	ip, ip, r6, lsl #24
    e6d8:	76c20100 	strbvc	r0, [r2], r0, lsl #2
    e6dc:	00000000 	andeq	r0, r0, r0
    e6e0:	0029eb05 	eoreq	lr, r9, r5, lsl #22
    e6e4:	76840400 	strvc	r0, [r4], r0, lsl #8
    e6e8:	d0000000 	andle	r0, r0, r0
    e6ec:	08000038 	stmdaeq	r0, {r3, r4, r5}
    e6f0:	01000000 	mrseq	r0, (UNDEF: 0)
    e6f4:	0000f19c 	muleq	r0, ip, r1
    e6f8:	2ccc0700 	stclcs	7, cr0, [ip], {0}
    e6fc:	0f010000 	svceq	0x00010000
    e700:	00007601 	andeq	r7, r0, r1, lsl #12
    e704:	a9080000 	stmdbge	r8, {}	; <UNPREDICTABLE>
    e708:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    e70c:	0076015b 	rsbseq	r0, r6, fp, asr r1
    e710:	00000000 	andeq	r0, r0, r0
    e714:	00060000 	andeq	r0, r6, r0
    e718:	9c010000 	stcls	0, cr0, [r1], {-0}
    e71c:	00000118 	andeq	r0, r0, r8, lsl r1
    e720:	002ccc07 	eoreq	ip, ip, r7, lsl #24
    e724:	015a0100 	cmpeq	sl, r0, lsl #2
    e728:	00000076 	andeq	r0, r0, r6, ror r0
    e72c:	2cbd0900 			; <UNDEFINED> instruction: 0x2cbd0900
    e730:	6c040000 	stcvs	0, cr0, [r4], {-0}
    e734:	00000001 	andeq	r0, r0, r1
    e738:	00000800 	andeq	r0, r0, r0, lsl #16
    e73c:	0a9c0100 	beq	fe70eb44 <_estack+0xde709b44>
    e740:	00002cd4 	ldrdeq	r2, [r0], -r4
    e744:	76019e01 	strvc	r9, [r1], -r1, lsl #28
    e748:	01000000 	mrseq	r0, (UNDEF: 0)
    e74c:	bf000050 	svclt	0x00000050
    e750:	04000008 	streq	r0, [r0], #-8
    e754:	0033a100 	eorseq	sl, r3, r0, lsl #2
    e758:	2c010400 	cfstrscs	mvf0, [r1], {-0}
    e75c:	0100002a 	tsteq	r0, sl, lsr #32
    e760:	00002e31 	andeq	r2, r0, r1, lsr lr
    e764:	00002af3 	strdeq	r2, [r0], -r3
    e768:	00001190 	muleq	r0, r0, r1
    e76c:	00000000 	andeq	r0, r0, r0
    e770:	00007955 	andeq	r7, r0, r5, asr r9
    e774:	58060102 	stmdapl	r6, {r1, r8}
    e778:	0300000c 	movweq	r0, #12
    e77c:	00002a07 	andeq	r2, r0, r7, lsl #20
    e780:	00371d03 	eorseq	r1, r7, r3, lsl #26
    e784:	01020000 	mrseq	r0, (UNDEF: 2)
    e788:	000c5608 	andeq	r5, ip, r8, lsl #12
    e78c:	31d80300 	bicscc	r0, r8, r0, lsl #6
    e790:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    e794:	00000049 	andeq	r0, r0, r9, asr #32
    e798:	66050202 	strvs	r0, [r5], -r2, lsl #4
    e79c:	0300000a 	movweq	r0, #10
    e7a0:	00002dfd 	strdeq	r2, [r0], -sp
    e7a4:	005b2b03 	subseq	r2, fp, r3, lsl #22
    e7a8:	02020000 	andeq	r0, r2, #0
    e7ac:	000d5307 	andeq	r5, sp, r7, lsl #6
    e7b0:	2b8c0300 	blcs	fe30f3b8 <_estack+0xde30a3b8>
    e7b4:	3f030000 	svccc	0x00030000
    e7b8:	0000006d 	andeq	r0, r0, sp, rrx
    e7bc:	f8050402 			; <UNDEFINED> instruction: 0xf8050402
    e7c0:	03000007 	movweq	r0, #7
    e7c4:	0000299f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
    e7c8:	007f4103 	rsbseq	r4, pc, r3, lsl #2
    e7cc:	04020000 	streq	r0, [r2], #-0
    e7d0:	00042807 	andeq	r2, r4, r7, lsl #16
    e7d4:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    e7d8:	000007f3 	strdeq	r0, [r0], -r3
    e7dc:	23070802 	movwcs	r0, #30722	; 0x7802
    e7e0:	04000004 	streq	r0, [r0], #-4
    e7e4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    e7e8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    e7ec:	00042d07 	andeq	r2, r4, r7, lsl #26
    e7f0:	2a090300 	bcs	24f3f8 <__ccfg+0x22f450>
    e7f4:	14040000 	strne	r0, [r4], #-0
    e7f8:	0000002c 	andeq	r0, r0, ip, lsr #32
    e7fc:	0031da03 	eorseq	sp, r1, r3, lsl #20
    e800:	3e190400 	cfmulscc	mvf0, mvf9, mvf0
    e804:	03000000 	movweq	r0, #0
    e808:	00002dff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    e80c:	00501a04 	subseq	r1, r0, r4, lsl #20
    e810:	8e030000 	cdphi	0, 0, cr0, cr3, cr0, {0}
    e814:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    e818:	0000621f 	andeq	r6, r0, pc, lsl r2
    e81c:	29a10300 	stmibcs	r1!, {r8, r9}
    e820:	20040000 	andcs	r0, r4, r0
    e824:	00000074 	andeq	r0, r0, r4, ror r0
    e828:	0029cb03 	eoreq	ip, r9, r3, lsl #22
    e82c:	e4330500 	ldrt	r0, [r3], #-1280	; 0xfffffb00
    e830:	05000000 	streq	r0, [r0, #-0]
    e834:	0000ea04 	andeq	lr, r0, r4, lsl #20
    e838:	04050600 	streq	r0, [r5], #-1536	; 0xfffffa00
    e83c:	000000f1 	strdeq	r0, [r0], -r1
    e840:	0000fc07 	andeq	pc, r0, r7, lsl #24
    e844:	00a20800 	adceq	r0, r2, r0, lsl #16
    e848:	03000000 	movweq	r0, #0
    e84c:	00003101 	andeq	r3, r0, r1, lsl #2
    e850:	01074206 	tsteq	r7, r6, lsl #4
    e854:	04050000 	streq	r0, [r5], #-0
    e858:	0000010d 	andeq	r0, r0, sp, lsl #2
    e85c:	0000ce09 	andeq	ip, r0, r9, lsl #28
    e860:	00012600 	andeq	r2, r1, r0, lsl #12
    e864:	01260800 			; <UNDEFINED> instruction: 0x01260800
    e868:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    e86c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e870:	000000ce 	andeq	r0, r0, lr, asr #1
    e874:	a2040500 	andge	r0, r4, #0, 10
    e878:	03000000 	movweq	r0, #0
    e87c:	00003269 	andeq	r3, r0, r9, ror #4
    e880:	01374606 	teqeq	r7, r6, lsl #12
    e884:	04050000 	streq	r0, [r5], #-0
    e888:	0000013d 	andeq	r0, r0, sp, lsr r1
    e88c:	0000ce0a 	andeq	ip, r0, sl, lsl #28
    e890:	32b20300 	adcscc	r0, r2, #0, 6
    e894:	48060000 	stmdami	r6, {}	; <UNPREDICTABLE>
    e898:	00000137 	andeq	r0, r0, r7, lsr r1
    e89c:	002f9903 	eoreq	r9, pc, r3, lsl #18
    e8a0:	584a0600 	stmdapl	sl, {r9, sl}^
    e8a4:	05000001 	streq	r0, [r0, #-1]
    e8a8:	00015e04 	andeq	r5, r1, r4, lsl #28
    e8ac:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    e8b0:	016d0000 	cmneq	sp, r0
    e8b4:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    e8b8:	00000000 	andeq	r0, r0, r0
    e8bc:	002ea803 	eoreq	sl, lr, r3, lsl #16
    e8c0:	374c0600 	strbcc	r0, [ip, -r0, lsl #12]
    e8c4:	03000001 	movweq	r0, #1
    e8c8:	00002e08 	andeq	r2, r0, r8, lsl #28
    e8cc:	01074e06 	tsteq	r7, r6, lsl #28
    e8d0:	98030000 	stmdals	r3, {}	; <UNPREDICTABLE>
    e8d4:	0600002e 	streq	r0, [r0], -lr, lsr #32
    e8d8:	0000e451 	andeq	lr, r0, r1, asr r4
    e8dc:	2d220300 	stccs	3, cr0, [r2, #-0]
    e8e0:	53060000 	movwpl	r0, #24576	; 0x6000
    e8e4:	00000199 	muleq	r0, r9, r1
    e8e8:	019f0405 	orrseq	r0, pc, r5, lsl #8
    e8ec:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    e8f0:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    e8f4:	08000001 	stmdaeq	r0, {r0}
    e8f8:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    e8fc:	0000b808 	andeq	fp, r0, r8, lsl #16
    e900:	00b80800 	adcseq	r0, r8, r0, lsl #16
    e904:	05000000 	streq	r0, [r0, #-0]
    e908:	0000b804 	andeq	fp, r0, r4, lsl #16
    e90c:	31170300 	tstcc	r7, r0, lsl #6
    e910:	57060000 	strpl	r0, [r6, -r0]
    e914:	000001c9 	andeq	r0, r0, r9, asr #3
    e918:	01cf0405 	biceq	r0, pc, r5, lsl #8
    e91c:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    e920:	e3000000 	movw	r0, #0
    e924:	08000001 	stmdaeq	r0, {r0}
    e928:	000001e3 	andeq	r0, r0, r3, ror #3
    e92c:	0000ce08 	andeq	ip, r0, r8, lsl #28
    e930:	04050000 	streq	r0, [r5], #-0
    e934:	000000ce 	andeq	r0, r0, lr, asr #1
    e938:	002f0b03 	eoreq	r0, pc, r3, lsl #22
    e93c:	c95a0600 	ldmdbgt	sl, {r9, sl}^
    e940:	03000001 	movweq	r0, #1
    e944:	00002fc5 	andeq	r2, r0, r5, asr #31
    e948:	01c95d06 	biceq	r5, r9, r6, lsl #26
    e94c:	34030000 	strcc	r0, [r3], #-0
    e950:	0600002d 	streq	r0, [r0], -sp, lsr #32
    e954:	0001c960 	andeq	ip, r1, r0, ror #18
    e958:	31250300 			; <UNDEFINED> instruction: 0x31250300
    e95c:	63060000 	movwvs	r0, #24576	; 0x6000
    e960:	000000e4 	andeq	r0, r0, r4, ror #1
    e964:	002d7203 	eoreq	r7, sp, r3, lsl #4
    e968:	20650600 	rsbcs	r0, r5, r0, lsl #12
    e96c:	05000002 	streq	r0, [r0, #-2]
    e970:	00022604 	andeq	r2, r2, r4, lsl #12
    e974:	02310700 	eorseq	r0, r1, #0, 14
    e978:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    e97c:	00000000 	andeq	r0, r0, r0
    e980:	0032c303 	eorseq	ip, r2, r3, lsl #6
    e984:	20670600 	rsbcs	r0, r7, r0, lsl #12
    e988:	03000002 	movweq	r0, #2
    e98c:	00003007 	andeq	r3, r0, r7
    e990:	00eb6906 	rsceq	r6, fp, r6, lsl #18
    e994:	a2030000 	andge	r0, r3, #0
    e998:	06000032 			; <UNDEFINED> instruction: 0x06000032
    e99c:	0000eb6b 	andeq	lr, r0, fp, ror #22
    e9a0:	2fd40300 	svccs	0x00d40300
    e9a4:	6d060000 	stcvs	0, cr0, [r6, #-0]
    e9a8:	000000eb 	andeq	r0, r0, fp, ror #1
    e9ac:	002fe603 	eoreq	lr, pc, r3, lsl #12
    e9b0:	eb6f0600 	bl	1bd01b8 <__ccfg+0x1bb0210>
    e9b4:	0b000000 	bleq	e9bc <__exidx_end+0x8f98>
    e9b8:	557a064c 	ldrbpl	r0, [sl, #-1612]!	; 0xfffff9b4
    e9bc:	0c000003 	stceq	0, cr0, [r0], {3}
    e9c0:	00002faa 	andeq	r2, r0, sl, lsr #31
    e9c4:	00fc7c06 	rscseq	r7, ip, r6, lsl #24
    e9c8:	0c000000 	stceq	0, cr0, [r0], {-0}
    e9cc:	00003295 	muleq	r0, r5, r2
    e9d0:	012c7d06 			; <UNDEFINED> instruction: 0x012c7d06
    e9d4:	0c040000 	stceq	0, cr0, [r4], {-0}
    e9d8:	00002fbb 			; <UNDEFINED> instruction: 0x00002fbb
    e9dc:	01427e06 	cmpeq	r2, r6, lsl #28
    e9e0:	0c080000 	stceq	0, cr0, [r8], {-0}
    e9e4:	000031b4 			; <UNDEFINED> instruction: 0x000031b4
    e9e8:	014d7f06 	cmpeq	sp, r6, lsl #30
    e9ec:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    e9f0:	000031c6 	andeq	r3, r0, r6, asr #3
    e9f4:	016d8006 	cmneq	sp, r6
    e9f8:	0c100000 	ldceq	0, cr0, [r0], {-0}
    e9fc:	00002eb9 			; <UNDEFINED> instruction: 0x00002eb9
    ea00:	01788106 	cmneq	r8, r6, lsl #2
    ea04:	0c140000 	ldceq	0, cr0, [r4], {-0}
    ea08:	00002e75 	andeq	r2, r0, r5, ror lr
    ea0c:	01838206 	orreq	r8, r3, r6, lsl #4
    ea10:	0c180000 	ldceq	0, cr0, [r8], {-0}
    ea14:	00002fb0 			; <UNDEFINED> instruction: 0x00002fb0
    ea18:	018e8306 	orreq	r8, lr, r6, lsl #6
    ea1c:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    ea20:	0000313f 	andeq	r3, r0, pc, lsr r1
    ea24:	01be8406 			; <UNDEFINED> instruction: 0x01be8406
    ea28:	0c200000 	stceq	0, cr0, [r0], #-0
    ea2c:	00002f37 	andeq	r2, r0, r7, lsr pc
    ea30:	01e98506 	mvneq	r8, r6, lsl #10
    ea34:	0c240000 	stceq	0, cr0, [r4], #-0
    ea38:	00002f8f 	andeq	r2, r0, pc, lsl #31
    ea3c:	01f48606 	mvnseq	r8, r6, lsl #12
    ea40:	0c280000 	stceq	0, cr0, [r8], #-0
    ea44:	000031f4 	strdeq	r3, [r0], -r4
    ea48:	01ff8706 	mvnseq	r8, r6, lsl #14
    ea4c:	0c2c0000 	stceq	0, cr0, [ip], #-0
    ea50:	00002ed4 	ldrdeq	r2, [r0], -r4
    ea54:	02158806 	andseq	r8, r5, #393216	; 0x60000
    ea58:	0c300000 	ldceq	0, cr0, [r0], #-0
    ea5c:	000031e2 	andeq	r3, r0, r2, ror #3
    ea60:	02318906 	eorseq	r8, r1, #98304	; 0x18000
    ea64:	0c340000 	ldceq	0, cr0, [r4], #-0
    ea68:	00002db3 			; <UNDEFINED> instruction: 0x00002db3
    ea6c:	020a8a06 	andeq	r8, sl, #24576	; 0x6000
    ea70:	0c380000 	ldceq	0, cr0, [r8], #-0
    ea74:	00002ff6 	strdeq	r2, [r0], -r6
    ea78:	023c8b06 	eorseq	r8, ip, #6144	; 0x1800
    ea7c:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    ea80:	00003195 	muleq	r0, r5, r1
    ea84:	02478c06 	subeq	r8, r7, #1536	; 0x600
    ea88:	0c400000 	mareq	acc0, r0, r0
    ea8c:	00002f19 	andeq	r2, r0, r9, lsl pc
    ea90:	02528d06 	subseq	r8, r2, #384	; 0x180
    ea94:	0c440000 	mareq	acc0, r0, r4
    ea98:	00002d63 	andeq	r2, r0, r3, ror #26
    ea9c:	025d8e06 	subseq	r8, sp, #6, 28	; 0x60
    eaa0:	00480000 	subeq	r0, r8, r0
    eaa4:	0030c503 	eorseq	ip, r0, r3, lsl #10
    eaa8:	688f0600 	stmvs	pc, {r9, sl}	; <UNPREDICTABLE>
    eaac:	0b000002 	bleq	eabc <__exidx_end+0x9098>
    eab0:	a5540114 	ldrbge	r0, [r4, #-276]	; 0xfffffeec
    eab4:	0c000003 	stceq	0, cr0, [r0], {3}
    eab8:	00002e19 	andeq	r2, r0, r9, lsl lr
    eabc:	00ce5501 	sbceq	r5, lr, r1, lsl #10
    eac0:	0c000000 	stceq	0, cr0, [r0], {-0}
    eac4:	0000308b 	andeq	r3, r0, fp, lsl #1
    eac8:	00ce5601 	sbceq	r5, lr, r1, lsl #12
    eacc:	0c040000 	stceq	0, cr0, [r4], {-0}
    ead0:	00002d83 	andeq	r2, r0, r3, lsl #27
    ead4:	00ce5701 	sbceq	r5, lr, r1, lsl #14
    ead8:	0c080000 	stceq	0, cr0, [r8], {-0}
    eadc:	00002e4c 	andeq	r2, r0, ip, asr #28
    eae0:	00ce5801 	sbceq	r5, lr, r1, lsl #16
    eae4:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    eae8:	00002dc6 	andeq	r2, r0, r6, asr #27
    eaec:	00c35901 	sbceq	r5, r3, r1, lsl #18
    eaf0:	00100000 	andseq	r0, r0, r0
    eaf4:	0030b603 	eorseq	fp, r0, r3, lsl #12
    eaf8:	605a0100 	subsvs	r0, sl, r0, lsl #2
    eafc:	0d000003 	stceq	0, cr0, [r0, #-12]
    eb00:	00002d0a 	andeq	r2, r0, sl, lsl #26
    eb04:	d301f902 	movwle	pc, #6402	; 0x1902	; <UNPREDICTABLE>
    eb08:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    eb0c:	000030e4 	andeq	r3, r0, r4, ror #1
    eb10:	00ce6501 	sbceq	r6, lr, r1, lsl #10
    eb14:	5b0e0000 	blpl	38eb1c <__ccfg+0x36eb74>
    eb18:	0100002d 	tsteq	r0, sp, lsr #32
    eb1c:	0000ce65 	andeq	ip, r0, r5, ror #28
    eb20:	430f0000 	movwmi	r0, #61440	; 0xf000
    eb24:	0200002d 	andeq	r0, r0, #45	; 0x2d
    eb28:	00ce0110 	sbceq	r0, lr, r0, lsl r1
    eb2c:	fb010000 	blx	4eb36 <__ccfg+0x2eb8e>
    eb30:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    eb34:	000030e4 	andeq	r3, r0, r4, ror #1
    eb38:	00cea001 	sbceq	sl, lr, r1
    eb3c:	a4100000 	ldrge	r0, [r0], #-0
    eb40:	01000031 	tsteq	r0, r1, lsr r0
    eb44:	0000cea2 	andeq	ip, r0, r2, lsr #29
    eb48:	b0110000 	andslt	r0, r1, r0
    eb4c:	d8000003 	stmdale	r0, {r0, r1}
    eb50:	5c000038 	stcpl	0, cr0, [r0], {56}	; 0x38
    eb54:	01000000 	mrseq	r0, (UNDEF: 0)
    eb58:	0004b69c 	muleq	r4, ip, r6
    eb5c:	03bc1200 			; <UNDEFINED> instruction: 0x03bc1200
    eb60:	37de0000 	ldrbcc	r0, [lr, r0]
    eb64:	c7120000 	ldrgt	r0, [r2, -r0]
    eb68:	0a000003 	beq	eb7c <__exidx_end+0x9158>
    eb6c:	13000038 	movwne	r0, #56	; 0x38
    eb70:	00003912 	andeq	r3, r0, r2, lsl r9
    eb74:	00000014 	andeq	r0, r0, r4, lsl r0
    eb78:	00000461 	andeq	r0, r0, r1, ror #8
    eb7c:	0003bc12 	andeq	fp, r3, r2, lsl ip
    eb80:	00383600 	eorseq	r3, r8, r0, lsl #12
    eb84:	03c71200 	biceq	r1, r7, #0, 4
    eb88:	38490000 	stmdacc	r9, {}^	; <UNPREDICTABLE>
    eb8c:	26140000 	ldrcs	r0, [r4], -r0
    eb90:	02000039 	andeq	r0, r0, #57	; 0x39
    eb94:	01150074 	tsteq	r5, r4, ror r0
    eb98:	15320153 	ldrne	r0, [r2, #-339]!	; 0xfffffead
    eb9c:	3c015201 	sfmcc	f5, 4, [r1], {1}
    eba0:	01510115 	cmpeq	r1, r5, lsl r1
    eba4:	50011530 	andpl	r1, r1, r0, lsr r5
    eba8:	a0000c05 	andge	r0, r0, r5, lsl #24
    ebac:	0000400c 	andeq	r4, r0, ip
    ebb0:	0038f616 	eorseq	pc, r8, r6, lsl r6	; <UNPREDICTABLE>
    ebb4:	00760200 	rsbseq	r0, r6, r0, lsl #4
    ebb8:	0000048d 	andeq	r0, r0, sp, lsl #9
    ebbc:	01530115 	cmpeq	r3, r5, lsl r1
    ebc0:	52011530 	andpl	r1, r1, #48, 10	; 0xc000000
    ebc4:	01153101 	tsteq	r5, r1, lsl #2
    ebc8:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    ebcc:	0c055001 	stceq	0, cr5, [r5], {1}
    ebd0:	400ca000 	andmi	sl, ip, r0
    ebd4:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    ebd8:	00007402 	andeq	r7, r0, r2, lsl #8
    ebdc:	00390e14 	eorseq	r0, r9, r4, lsl lr
    ebe0:	00760200 	rsbseq	r0, r6, r0, lsl #4
    ebe4:	01530115 	cmpeq	r3, r5, lsl r1
    ebe8:	52011531 	andpl	r1, r1, #205520896	; 0xc400000
    ebec:	01153201 	tsteq	r5, r1, lsl #4
    ebf0:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    ebf4:	0c055001 	stceq	0, cr5, [r5], {1}
    ebf8:	400ca000 	andmi	sl, ip, r0
    ebfc:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    ec00:	00007402 	andeq	r7, r0, r2, lsl #8
    ec04:	03d31100 	bicseq	r1, r3, #0, 2
    ec08:	39340000 	ldmdbcc	r4!, {}	; <UNPREDICTABLE>
    ec0c:	002c0000 	eoreq	r0, ip, r0
    ec10:	9c010000 	stcls	0, cr0, [r1], {-0}
    ec14:	0000050d 	andeq	r0, r0, sp, lsl #10
    ec18:	0003e412 	andeq	lr, r3, r2, lsl r4
    ec1c:	00386a00 	eorseq	r6, r8, r0, lsl #20
    ec20:	03ef1700 	mvneq	r1, #0, 14
    ec24:	50010000 	andpl	r0, r1, r0
    ec28:	00117818 	andseq	r7, r1, r8, lsl r8
    ec2c:	0004f400 	andeq	pc, r4, r0, lsl #8
    ec30:	03e41900 	mvneq	r1, #0, 18
    ec34:	1a040000 	bne	10ec3c <__ccfg+0xeec94>
    ec38:	00001178 	andeq	r1, r0, r8, ror r1
    ec3c:	0003ef1b 	andeq	lr, r3, fp, lsl pc
    ec40:	14000000 	strne	r0, [r0], #-0
    ec44:	00003954 	andeq	r3, r0, r4, asr r9
    ec48:	15007402 	strne	r7, [r0, #-1026]	; 0xfffffbfe
    ec4c:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    ec50:	50011534 	andpl	r1, r1, r4, lsr r5
    ec54:	a0000c05 	andge	r0, r0, r5, lsl #24
    ec58:	0000400c 	andeq	r4, r0, ip
    ec5c:	00327a1c 	eorseq	r7, r2, ip, lsl sl
    ec60:	01840200 	orreq	r0, r4, r0, lsl #4
    ec64:	000000ce 	andeq	r0, r0, lr, asr #1
    ec68:	00000000 	andeq	r0, r0, r0
    ec6c:	00000090 	muleq	r0, r0, r0
    ec70:	05769c01 	ldrbeq	r9, [r6, #-3073]!	; 0xfffff3ff
    ec74:	d01d0000 	andsle	r0, sp, r0
    ec78:	01000030 	tsteq	r0, r0, lsr r0
    ec7c:	0000cec2 	andeq	ip, r0, r2, asr #29
    ec80:	00388b00 	eorseq	r8, r8, r0, lsl #22
    ec84:	30431e00 	subcc	r1, r3, r0, lsl #28
    ec88:	c4010000 	strgt	r0, [r1], #-0
    ec8c:	000000ce 	andeq	r0, r0, lr, asr #1
    ec90:	000038b7 			; <UNDEFINED> instruction: 0x000038b7
    ec94:	00305c1e 	eorseq	r5, r0, lr, lsl ip
    ec98:	c3c50100 	bicgt	r0, r5, #0, 2
    ec9c:	ca000000 	bgt	eca4 <__exidx_end+0x9280>
    eca0:	1e000038 	mcrne	0, 0, r0, cr0, cr8, {1}
    eca4:	00002dd2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    eca8:	00cec601 	sbceq	ip, lr, r1, lsl #12
    ecac:	38f10000 	ldmcc	r1!, {}^	; <UNPREDICTABLE>
    ecb0:	001f0000 	andseq	r0, pc, r0
    ecb4:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    ecb8:	1f000008 	svcne	0x00000008
    ecbc:	00000000 	andeq	r0, r0, r0
    ecc0:	000008aa 	andeq	r0, r0, sl, lsr #17
    ecc4:	2e812000 	cdpcs	0, 8, cr2, cr1, cr0, {0}
    ecc8:	91020000 	mrsls	r0, (UNDEF: 2)
    eccc:	00396001 	eorseq	r6, r9, r1
    ecd0:	00001800 	andeq	r1, r0, r0, lsl #16
    ecd4:	ae9c0100 	fmlgee	f0, f4, f0
    ecd8:	21000005 	tstcs	r0, r5
    ecdc:	0000396a 	andeq	r3, r0, sl, ror #18
    ece0:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    ece4:	000005a4 	andeq	r0, r0, r4, lsr #11
    ece8:	01510115 	cmpeq	r1, r5, lsl r1
    ecec:	50011531 	andpl	r1, r1, r1, lsr r5
    ecf0:	1f003301 	svcne	0x00003301
    ecf4:	0000396e 	andeq	r3, r0, lr, ror #18
    ecf8:	0000089e 	muleq	r0, lr, r8
    ecfc:	309a2200 	addscc	r2, sl, r0, lsl #4
    ed00:	22020000 	andcs	r0, r2, #0
    ed04:	0005bb01 	andeq	fp, r5, r1, lsl #22
    ed08:	01020300 	mrseq	r0, LR_svc
    ed0c:	000ca202 	andeq	sl, ip, r2, lsl #4
    ed10:	30ef2300 	rsccc	r2, pc, r0, lsl #6
    ed14:	40020000 	andmi	r0, r2, r0
    ed18:	911c0301 	tstls	ip, r1, lsl #6
    ed1c:	0200002d 	andeq	r0, r0, #45	; 0x2d
    ed20:	05bb01a1 	ldreq	r0, [fp, #417]!	; 0x1a1
    ed24:	39780000 	ldmdbcc	r8!, {}^	; <UNPREDICTABLE>
    ed28:	00600000 	rsbeq	r0, r0, r0
    ed2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    ed30:	00000677 	andeq	r0, r0, r7, ror r6
    ed34:	00307b24 	eorseq	r7, r0, r4, lsr #22
    ed38:	01020100 	mrseq	r0, (UNDEF: 18)
    ed3c:	000000ce 	andeq	r0, r0, lr, asr #1
    ed40:	00003945 	andeq	r3, r0, r5, asr #18
    ed44:	00314824 	eorseq	r4, r1, r4, lsr #16
    ed48:	01030100 	mrseq	r0, (UNDEF: 19)
    ed4c:	000000ce 	andeq	r0, r0, lr, asr #1
    ed50:	00003958 	andeq	r3, r0, r8, asr r9
    ed54:	0005ae25 	andeq	sl, r5, r5, lsr #28
    ed58:	00398400 	eorseq	r8, r9, r0, lsl #8
    ed5c:	00001000 	andeq	r1, r0, r0
    ed60:	01090100 	mrseq	r0, (UNDEF: 25)
    ed64:	0000063c 	andeq	r0, r0, ip, lsr r6
    ed68:	00399414 	eorseq	r9, r9, r4, lsl r4
    ed6c:	00740200 	rsbseq	r0, r4, r0, lsl #4
    ed70:	01530115 	cmpeq	r3, r5, lsl r1
    ed74:	52011530 	andpl	r1, r1, #48, 10	; 0xc000000
    ed78:	01153101 	tsteq	r5, r1, lsl #2
    ed7c:	34080251 	strcc	r0, [r8], #-593	; 0xfffffdaf
    ed80:	05500115 	ldrbeq	r0, [r0, #-277]	; 0xfffffeeb
    ed84:	0ca0000c 	stceq	0, cr0, [r0], #48	; 0x30
    ed88:	25000040 	strcs	r0, [r0, #-64]	; 0xffffffc0
    ed8c:	000005c2 	andeq	r0, r0, r2, asr #11
    ed90:	00003996 	muleq	r0, r6, r9
    ed94:	00000008 	andeq	r0, r0, r8
    ed98:	5a010a01 	bpl	515a4 <__ccfg+0x315fc>
    ed9c:	1f000006 	svcne	0x00000006
    eda0:	0000399e 	muleq	r0, lr, r9
    eda4:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    eda8:	39802100 	stmibcc	r0, {r8, sp}
    edac:	03d30000 	bicseq	r0, r3, #0
    edb0:	066d0000 	strbteq	r0, [sp], -r0
    edb4:	01150000 	tsteq	r5, r0
    edb8:	00310150 	eorseq	r0, r1, r0, asr r1
    edbc:	0039a21f 	eorseq	sl, r9, pc, lsl r2
    edc0:	00089e00 	andeq	r9, r8, r0, lsl #28
    edc4:	e6200000 	strt	r0, [r0], -r0
    edc8:	0200002e 	andeq	r0, r0, #46	; 0x2e
    edcc:	39d801ae 	ldmibcc	r8, {r1, r2, r3, r5, r7, r8}^
    edd0:	00340000 	eorseq	r0, r4, r0
    edd4:	9c010000 	stcls	0, cr0, [r1], {-0}
    edd8:	000006e9 	andeq	r0, r0, r9, ror #13
    eddc:	0005c225 	andeq	ip, r5, r5, lsr #4
    ede0:	0039ea00 	eorseq	lr, r9, r0, lsl #20
    ede4:	00000800 	andeq	r0, r0, r0, lsl #16
    ede8:	012f0100 			; <UNDEFINED> instruction: 0x012f0100
    edec:	000006ab 	andeq	r0, r0, fp, lsr #13
    edf0:	0039f21f 	eorseq	pc, r9, pc, lsl r2	; <UNPREDICTABLE>
    edf4:	0008b500 	andeq	fp, r8, r0, lsl #10
    edf8:	e2210000 	eor	r0, r1, #0
    edfc:	b0000039 	andlt	r0, r0, r9, lsr r0
    ee00:	c3000003 	movwgt	r0, #3
    ee04:	15000006 	strne	r0, [r0, #-6]
    ee08:	30015101 	andcc	r5, r1, r1, lsl #2
    ee0c:	01500115 	cmpeq	r0, r5, lsl r1
    ee10:	e8210033 	stmda	r1!, {r0, r1, r4, r5}
    ee14:	d3000039 	movwle	r0, #57	; 0x39
    ee18:	d6000003 	strle	r0, [r0], -r3
    ee1c:	15000006 	strne	r0, [r0, #-6]
    ee20:	31015001 	tstcc	r1, r1
    ee24:	39f61f00 	ldmibcc	r6!, {r8, r9, sl, fp, ip}^
    ee28:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    ee2c:	fe1f0000 	cdp2	0, 1, cr0, cr15, cr0, {0}
    ee30:	aa000039 	bge	ef1c <__exidx_end+0x94f8>
    ee34:	00000008 	andeq	r0, r0, r8
    ee38:	002f401c 	eoreq	r4, pc, ip, lsl r0	; <UNPREDICTABLE>
    ee3c:	01f20200 	mvnseq	r0, r0, lsl #4
    ee40:	000000c3 	andeq	r0, r0, r3, asr #1
    ee44:	00000000 	andeq	r0, r0, r0
    ee48:	00000038 	andeq	r0, r0, r8, lsr r0
    ee4c:	079a9c01 	ldreq	r9, [sl, r1, lsl #24]
    ee50:	0e260000 	cdpeq	0, 2, cr0, cr6, cr0, {0}
    ee54:	01000031 	tsteq	r0, r1, lsr r0
    ee58:	00c3013c 	sbceq	r0, r3, ip, lsr r1
    ee5c:	396b0000 	stmdbcc	fp!, {}^	; <UNPREDICTABLE>
    ee60:	71270000 			; <UNDEFINED> instruction: 0x71270000
    ee64:	01000030 	tsteq	r0, r0, lsr r0
    ee68:	00ce013f 	sbceq	r0, lr, pc, lsr r1
    ee6c:	51010000 	mrspl	r0, (UNDEF: 1)
    ee70:	0032d427 	eorseq	sp, r2, r7, lsr #8
    ee74:	01410100 	mrseq	r0, (UNDEF: 81)
    ee78:	000000c3 	andeq	r0, r0, r3, asr #1
    ee7c:	40007105 	andmi	r7, r0, r5, lsl #2
    ee80:	e5279f26 	str	r9, [r7, #-3878]!	; 0xfffff0da
    ee84:	0100002d 	tsteq	r0, sp, lsr #32
    ee88:	00c30143 	sbceq	r0, r3, r3, asr #2
    ee8c:	71070000 	mrsvc	r0, (UNDEF: 7)
    ee90:	48244000 	stmdami	r4!, {lr}
    ee94:	ed279f26 	stc	15, cr9, [r7, #-152]!	; 0xffffff68
    ee98:	0100002d 	tsteq	r0, sp, lsr #32
    ee9c:	00c30145 	sbceq	r0, r3, r5, asr #2
    eea0:	71070000 	mrsvc	r0, (UNDEF: 7)
    eea4:	48244800 	stmdami	r4!, {fp, lr}
    eea8:	f5249f26 			; <UNDEFINED> instruction: 0xf5249f26
    eeac:	0100002d 	tsteq	r0, sp, lsr #32
    eeb0:	00c30147 	sbceq	r0, r3, r7, asr #2
    eeb4:	39990000 	ldmibcc	r9, {}	; <UNPREDICTABLE>
    eeb8:	5e240000 	cdppl	0, 2, cr0, cr4, cr0, {0}
    eebc:	0100002e 	tsteq	r0, lr, lsr #32
    eec0:	00c30156 	sbceq	r0, r3, r6, asr r1
    eec4:	39b20000 	ldmibcc	r2!, {}	; <UNPREDICTABLE>
    eec8:	16240000 	strtne	r0, [r4], -r0
    eecc:	01000030 	tsteq	r0, r0, lsr r0
    eed0:	00c30157 	sbceq	r0, r3, r7, asr r1
    eed4:	39d50000 	ldmibcc	r5, {}^	; <UNPREDICTABLE>
    eed8:	64280000 	strtvs	r0, [r8], #-0
    eedc:	01580100 	cmpeq	r8, r0, lsl #2
    eee0:	000000c3 	andeq	r0, r0, r3, asr #1
    eee4:	000039fe 	strdeq	r3, [r0], -lr
    eee8:	31591c00 	cmpcc	r9, r0, lsl #24
    eeec:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    eef0:	0000ad02 	andeq	sl, r0, r2, lsl #26
    eef4:	00000000 	andeq	r0, r0, r0
    eef8:	00000c00 	andeq	r0, r0, r0, lsl #24
    eefc:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    ef00:	26000007 	strcs	r0, [r0], -r7
    ef04:	0000302f 	andeq	r3, r0, pc, lsr #32
    ef08:	c3016301 	movwgt	r6, #4865	; 0x1301
    ef0c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    ef10:	2400003a 	strcs	r0, [r0], #-58	; 0xffffffc6
    ef14:	00003208 	andeq	r3, r0, r8, lsl #4
    ef18:	c3018501 	movwgt	r8, #5377	; 0x1501
    ef1c:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    ef20:	0000003a 	andeq	r0, r0, sl, lsr r0
    ef24:	002f6a1c 	eoreq	r6, pc, ip, lsl sl	; <UNPREDICTABLE>
    ef28:	01c20200 	biceq	r0, r2, r0, lsl #4
    ef2c:	000000ce 	andeq	r0, r0, lr, asr #1
    ef30:	00000000 	andeq	r0, r0, r0
    ef34:	00000034 	andeq	r0, r0, r4, lsr r0
    ef38:	08429c01 	stmdaeq	r2, {r0, sl, fp, ip, pc}^
    ef3c:	5b240000 	blpl	90ef44 <__ccfg+0x8eef9c>
    ef40:	01000032 	tsteq	r0, r2, lsr r0
    ef44:	00ce0192 	smulleq	r0, lr, r2, r1
    ef48:	3ad90000 	bcc	ff64ef50 <_estack+0xdf649f50>
    ef4c:	02240000 	eoreq	r0, r4, #0
    ef50:	01000020 	tsteq	r0, r0, lsr #32
    ef54:	00ce0193 	smulleq	r0, lr, r3, r1
    ef58:	3afb0000 	bcc	ffecef60 <_estack+0xdfec9f60>
    ef5c:	2d240000 	stccs	0, cr0, [r4, #-0]
    ef60:	0100002f 	tsteq	r0, pc, lsr #32
    ef64:	00ce0194 	smulleq	r0, lr, r4, r1
    ef68:	3b0e0000 	blcc	38ef70 <__ccfg+0x36efc8>
    ef6c:	cb240000 	blgt	90ef74 <__ccfg+0x8eefcc>
    ef70:	0100002e 	tsteq	r0, lr, lsr #32
    ef74:	00ce0195 	smulleq	r0, lr, r5, r1
    ef78:	3b310000 	blcc	c4ef80 <__ccfg+0xc2efd8>
    ef7c:	001f0000 	andseq	r0, pc, r0
    ef80:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    ef84:	1f000008 	svcne	0x00000008
    ef88:	00000000 	andeq	r0, r0, r0
    ef8c:	0000089e 	muleq	r0, lr, r8
    ef90:	32271c00 	eorcc	r1, r7, #0, 24
    ef94:	d3020000 	movwle	r0, #8192	; 0x2000
    ef98:	0000ce01 	andeq	ip, r0, r1, lsl #28
    ef9c:	00000000 	andeq	r0, r0, r0
    efa0:	00001c00 	andeq	r1, r0, r0, lsl #24
    efa4:	8d9c0100 	ldfhis	f0, [ip]
    efa8:	24000008 	strcs	r0, [r0], #-8
    efac:	000030ab 	andeq	r3, r0, fp, lsr #1
    efb0:	ce01b701 	cdpgt	7, 0, cr11, cr1, cr1, {0}
    efb4:	4d000000 	stcmi	0, cr0, [r0, #-0]
    efb8:	2400003b 	strcs	r0, [r0], #-59	; 0xffffffc5
    efbc:	00003219 	andeq	r3, r0, r9, lsl r2
    efc0:	ce01b801 	cdpgt	8, 0, cr11, cr1, cr1, {0}
    efc4:	60000000 	andvs	r0, r0, r0
    efc8:	2400003b 	strcs	r0, [r0], #-59	; 0xffffffc5
    efcc:	00002e68 	andeq	r2, r0, r8, ror #28
    efd0:	ce01b901 	vmlagt.f16	s22, s2, s2	; <UNPREDICTABLE>
    efd4:	7b000000 	blvc	efdc <__exidx_end+0x95b8>
    efd8:	0000003b 	andeq	r0, r0, fp, lsr r0
    efdc:	00302229 	eorseq	r2, r0, r9, lsr #4
    efe0:	a55c0100 	ldrbge	r0, [ip, #-256]	; 0xffffff00
    efe4:	05000003 	streq	r0, [r0, #-3]
    efe8:	00064403 	andeq	r4, r6, r3, lsl #8
    efec:	2bf62a20 	blcs	ffd99874 <_estack+0xdfd94874>
    eff0:	45070000 	strmi	r0, [r7, #-0]
    eff4:	0000ce03 	andeq	ip, r0, r3, lsl #28
    eff8:	2b5d2b00 	blcs	1759c00 <__ccfg+0x1739c58>
    effc:	aa080000 	bge	20f004 <__ccfg+0x1ef05c>
    f000:	000000c3 	andeq	r0, r0, r3, asr #1
    f004:	0029fa2c 	eoreq	pc, r9, ip, lsr #20
    f008:	08990600 	ldmeq	r9, {r9, sl}
    f00c:	000000d9 	ldrdeq	r0, [r0], -r9
    f010:	0ab40000 	beq	fed0f018 <_estack+0xded0a018>
    f014:	00040000 	andeq	r0, r4, r0
    f018:	000035fe 	strdeq	r3, [r0], -lr
    f01c:	2a2c0104 	bcs	b0f434 <__ccfg+0xaef48c>
    f020:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    f024:	f3000033 	vqadd.u8	d0, d0, d19
    f028:	e800002a 	stmda	r0, {r1, r3, r5}
    f02c:	00000011 	andeq	r0, r0, r1, lsl r0
    f030:	2f000000 	svccs	0x00000000
    f034:	0200007c 	andeq	r0, r0, #124	; 0x7c
    f038:	0c580601 	mrrceq	6, 0, r0, r8, cr1
    f03c:	07030000 	streq	r0, [r3, -r0]
    f040:	0300002a 	movweq	r0, #42	; 0x2a
    f044:	0000371d 	andeq	r3, r0, sp, lsl r7
    f048:	08010200 	stmdaeq	r1, {r9}
    f04c:	00000c56 	andeq	r0, r0, r6, asr ip
    f050:	0031d803 	eorseq	sp, r1, r3, lsl #16
    f054:	49290300 	stmdbmi	r9!, {r8, r9}
    f058:	02000000 	andeq	r0, r0, #0
    f05c:	0a660502 	beq	199046c <__ccfg+0x19704c4>
    f060:	fd030000 	stc2	0, cr0, [r3, #-0]
    f064:	0300002d 	movweq	r0, #45	; 0x2d
    f068:	00005b2b 	andeq	r5, r0, fp, lsr #22
    f06c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    f070:	00000d53 	andeq	r0, r0, r3, asr sp
    f074:	002b8c03 	eoreq	r8, fp, r3, lsl #24
    f078:	6d3f0300 	ldcvs	3, cr0, [pc, #-0]	; f080 <__exidx_end+0x965c>
    f07c:	02000000 	andeq	r0, r0, #0
    f080:	07f80504 	ldrbeq	r0, [r8, r4, lsl #10]!
    f084:	9f030000 	svcls	0x00030000
    f088:	03000029 	movweq	r0, #41	; 0x29
    f08c:	00007f41 	andeq	r7, r0, r1, asr #30
    f090:	07040200 	streq	r0, [r4, -r0, lsl #4]
    f094:	00000428 	andeq	r0, r0, r8, lsr #8
    f098:	f3050802 	vsub.i8	d0, d5, d2
    f09c:	02000007 	andeq	r0, r0, #7
    f0a0:	04230708 	strteq	r0, [r3], #-1800	; 0xfffff8f8
    f0a4:	04040000 	streq	r0, [r4], #-0
    f0a8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    f0ac:	07040200 	streq	r0, [r4, -r0, lsl #4]
    f0b0:	0000042d 	andeq	r0, r0, sp, lsr #8
    f0b4:	002a0903 	eoreq	r0, sl, r3, lsl #18
    f0b8:	2c140400 	cfldrscs	mvf0, [r4], {-0}
    f0bc:	03000000 	movweq	r0, #0
    f0c0:	000031da 	ldrdeq	r3, [r0], -sl
    f0c4:	003e1904 	eorseq	r1, lr, r4, lsl #18
    f0c8:	ff030000 			; <UNDEFINED> instruction: 0xff030000
    f0cc:	0400002d 	streq	r0, [r0], #-45	; 0xffffffd3
    f0d0:	0000501a 	andeq	r5, r0, sl, lsl r0
    f0d4:	2b8e0300 	blcs	fe38fcdc <_estack+0xde38acdc>
    f0d8:	1f040000 	svcne	0x00040000
    f0dc:	00000062 	andeq	r0, r0, r2, rrx
    f0e0:	0029a103 	eoreq	sl, r9, r3, lsl #2
    f0e4:	74200400 	strtvc	r0, [r0], #-1024	; 0xfffffc00
    f0e8:	03000000 	movweq	r0, #0
    f0ec:	00003301 	andeq	r3, r0, r1, lsl #6
    f0f0:	009bd405 	addseq	sp, fp, r5, lsl #8
    f0f4:	04020000 	streq	r0, [r2], #-0
    f0f8:	002ca007 	eoreq	sl, ip, r7
    f0fc:	02040500 	andeq	r0, r4, #0, 10
    f100:	0c5f0801 	mrrceq	8, 0, r0, pc, cr1	; <UNPREDICTABLE>
    f104:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    f108:	06000024 	streq	r0, [r0], -r4, lsr #32
    f10c:	0000ce3b 	andeq	ip, r0, fp, lsr lr
    f110:	a2040600 	andge	r0, r4, #0, 12
    f114:	03000000 	movweq	r0, #0
    f118:	00002295 	muleq	r0, r5, r2
    f11c:	01103c07 	tsteq	r0, r7, lsl #24
    f120:	34070000 	strcc	r0, [r7], #-0
    f124:	10000025 	andne	r0, r0, r5, lsr #32
    f128:	01656f07 	cmneq	r5, r7, lsl #30
    f12c:	00080000 	andeq	r0, r8, r0
    f130:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    f134:	0000b870 	andeq	fp, r0, r0, ror r8
    f138:	73080000 	movwvc	r0, #32768	; 0x8000
    f13c:	07000007 	streq	r0, [r0, -r7]
    f140:	0000b871 	andeq	fp, r0, r1, ror r8
    f144:	73080200 	movwvc	r0, #33280	; 0x8200
    f148:	07000022 	streq	r0, [r0, -r2, lsr #32]
    f14c:	00026d74 	andeq	r6, r2, r4, ror sp
    f150:	02080400 	andeq	r0, r8, #0, 8
    f154:	07000020 	streq	r0, [r0, -r0, lsr #32]
    f158:	0000f475 	andeq	pc, r0, r5, ror r4	; <UNPREDICTABLE>
    f15c:	a3080800 	movwge	r0, #34816	; 0x8800
    f160:	07000022 	streq	r0, [r0, -r2, lsr #32]
    f164:	0002017d 	andeq	r0, r2, sp, ror r1
    f168:	ed080c00 	stc	12, cr0, [r8, #-0]
    f16c:	07000021 	streq	r0, [r0, -r1, lsr #32]
    f170:	00024681 	andeq	r4, r2, r1, lsl #13
    f174:	03000d00 	movweq	r0, #3328	; 0xd00
    f178:	00003429 	andeq	r3, r0, r9, lsr #8
    f17c:	01703e07 	cmneq	r0, r7, lsl #28
    f180:	13070000 	movwne	r0, #28672	; 0x7000
    f184:	18000034 	stmdane	r0, {r2, r4, r5}
    f188:	0201a507 	andeq	sl, r1, #29360128	; 0x1c00000
    f18c:	00080000 	andeq	r0, r8, r0
    f190:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    f194:	0000b8a6 	andeq	fp, r0, r6, lsr #17
    f198:	73080000 	movwvc	r0, #32768	; 0x8000
    f19c:	07000007 	streq	r0, [r0, -r7]
    f1a0:	0000b8a7 	andeq	fp, r0, r7, lsr #17
    f1a4:	73080200 	movwvc	r0, #33280	; 0x8200
    f1a8:	07000022 	streq	r0, [r0, -r2, lsr #32]
    f1ac:	00026daa 	andeq	r6, r2, sl, lsr #27
    f1b0:	02080400 	andeq	r0, r8, #0, 8
    f1b4:	07000020 	streq	r0, [r0, -r0, lsr #32]
    f1b8:	0000f4ab 	andeq	pc, r0, fp, lsr #9
    f1bc:	a3080800 	movwge	r0, #34816	; 0x8800
    f1c0:	07000022 	streq	r0, [r0, -r2, lsr #32]
    f1c4:	000273b3 			; <UNDEFINED> instruction: 0x000273b3
    f1c8:	ed080c00 	stc	12, cr0, [r8, #-0]
    f1cc:	07000021 	streq	r0, [r0, -r1, lsr #32]
    f1d0:	0002b8b7 			; <UNDEFINED> instruction: 0x0002b8b7
    f1d4:	2d080d00 	stccs	13, cr0, [r8, #-0]
    f1d8:	07000000 	streq	r0, [r0, -r0]
    f1dc:	0000a2b8 			; <UNDEFINED> instruction: 0x0000a2b8
    f1e0:	b9080e00 	stmdblt	r8, {r9, sl, fp}
    f1e4:	07000023 	streq	r0, [r0, -r3, lsr #32]
    f1e8:	0000a2bf 			; <UNDEFINED> instruction: 0x0000a2bf
    f1ec:	6a080f00 	bvs	212df4 <__ccfg+0x1f2e4c>
    f1f0:	07000014 	smladeq	r0, r4, r0, r0
    f1f4:	0002dfd4 	ldrdeq	sp, [r2], -r4
    f1f8:	83081000 	movwhi	r1, #32768	; 0x8000
    f1fc:	07000020 	streq	r0, [r0, -r0, lsr #32]
    f200:	0000b8d5 	ldrdeq	fp, [r0], -r5
    f204:	c1081200 	mrsgt	r1, R8_fiq
    f208:	07000024 	streq	r0, [r0, -r4, lsr #32]
    f20c:	000324d6 	ldrdeq	r2, [r3], -r6
    f210:	09001400 	stmdbeq	r0, {sl, ip}
    f214:	46760701 	ldrbtmi	r0, [r6], -r1, lsl #14
    f218:	0a000002 	beq	f228 <__exidx_end+0x9804>
    f21c:	00002756 	andeq	r2, r0, r6, asr r7
    f220:	00a27707 	adceq	r7, r2, r7, lsl #14
    f224:	04010000 	streq	r0, [r1], #-0
    f228:	f40a0004 	vst4.8	{d0-d3}, [sl], r4
    f22c:	07000020 	streq	r0, [r0, -r0, lsr #32]
    f230:	0000a278 	andeq	sl, r0, r8, ror r2
    f234:	03010100 	movweq	r0, #4352	; 0x1100
    f238:	21b40a00 			; <UNDEFINED> instruction: 0x21b40a00
    f23c:	7a070000 	bvc	1cf244 <__ccfg+0x1af29c>
    f240:	000000a2 	andeq	r0, r0, r2, lsr #1
    f244:	00010201 	andeq	r0, r1, r1, lsl #4
    f248:	001f6f0a 	andseq	r6, pc, sl, lsl #30
    f24c:	a27b0700 	rsbsge	r0, fp, #0, 14
    f250:	01000000 	mrseq	r0, (UNDEF: 0)
    f254:	00000001 	andeq	r0, r0, r1
    f258:	7e070109 	adfvcs	f0, f7, #1.0
    f25c:	0000026d 	andeq	r0, r0, sp, ror #4
    f260:	0025d10a 	eoreq	sp, r5, sl, lsl #2
    f264:	a27f0700 	rsbsge	r0, pc, #0, 14
    f268:	01000000 	mrseq	r0, (UNDEF: 0)
    f26c:	0a000404 	beq	10284 <__exidx_end+0xa860>
    f270:	00002725 	andeq	r2, r0, r5, lsr #14
    f274:	00a28007 	adceq	r8, r2, r7
    f278:	04010000 	streq	r0, [r1], #-0
    f27c:	06000000 	streq	r0, [r0], -r0
    f280:	00010504 	andeq	r0, r1, r4, lsl #10
    f284:	07010900 	streq	r0, [r1, -r0, lsl #18]
    f288:	0002b8ac 	andeq	fp, r2, ip, lsr #17
    f28c:	27560a00 	ldrbcs	r0, [r6, -r0, lsl #20]
    f290:	ad070000 	stcge	0, cr0, [r7, #-0]
    f294:	000000a2 	andeq	r0, r0, r2, lsr #1
    f298:	00040401 	andeq	r0, r4, r1, lsl #8
    f29c:	0020f40a 	eoreq	pc, r0, sl, lsl #8
    f2a0:	a2ae0700 	adcge	r0, lr, #0, 14
    f2a4:	01000000 	mrseq	r0, (UNDEF: 0)
    f2a8:	0a000301 	beq	feb4 <__exidx_end+0xa490>
    f2ac:	000021b4 			; <UNDEFINED> instruction: 0x000021b4
    f2b0:	00a2b007 	adceq	fp, r2, r7
    f2b4:	02010000 	andeq	r0, r1, #0
    f2b8:	6f0a0001 	svcvs	0x000a0001
    f2bc:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    f2c0:	0000a2b1 			; <UNDEFINED> instruction: 0x0000a2b1
    f2c4:	00010100 	andeq	r0, r1, r0, lsl #2
    f2c8:	01090000 	mrseq	r0, (UNDEF: 9)
    f2cc:	02dfb407 	sbcseq	fp, pc, #117440512	; 0x7000000
    f2d0:	d10a0000 	mrsle	r0, (UNDEF: 10)
    f2d4:	07000025 	streq	r0, [r0, -r5, lsr #32]
    f2d8:	0000a2b5 			; <UNDEFINED> instruction: 0x0000a2b5
    f2dc:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    f2e0:	27250a00 	strcs	r0, [r5, -r0, lsl #20]!
    f2e4:	b6070000 	strlt	r0, [r7], -r0
    f2e8:	000000a2 	andeq	r0, r0, r2, lsr #1
    f2ec:	00000401 	andeq	r0, r0, r1, lsl #8
    f2f0:	07020900 	streq	r0, [r2, -r0, lsl #18]
    f2f4:	000324c2 	andeq	r2, r3, r2, asr #9
    f2f8:	21a70a00 			; <UNDEFINED> instruction: 0x21a70a00
    f2fc:	c3070000 	movwgt	r0, #28672	; 0x7000
    f300:	000000b8 	strheq	r0, [r0], -r8
    f304:	000d0302 	andeq	r0, sp, r2, lsl #6
    f308:	0021460a 	eoreq	r4, r1, sl, lsl #12
    f30c:	b8c90700 	stmialt	r9, {r8, r9, sl}^
    f310:	02000000 	andeq	r0, r0, #0
    f314:	0a000c01 	beq	12320 <__exidx_end+0xc8fc>
    f318:	000020e6 	andeq	r2, r0, r6, ror #1
    f31c:	00b8cb07 	adcseq	ip, r8, r7, lsl #22
    f320:	06020000 	streq	r0, [r2], -r0
    f324:	e50a0006 	str	r0, [sl, #-6]
    f328:	07000023 	streq	r0, [r0, -r3, lsr #32]
    f32c:	0000b8d2 	ldrdeq	fp, [r0], -r2
    f330:	05010200 	streq	r0, [r1, #-512]	; 0xfffffe00
    f334:	04060000 	streq	r0, [r6], #-0
    f338:	000000ce 	andeq	r0, r0, lr, asr #1
    f33c:	00333603 	eorseq	r3, r3, r3, lsl #12
    f340:	35420800 	strbcc	r0, [r2, #-2048]	; 0xfffff800
    f344:	0b000003 	bleq	f358 <__exidx_end+0x9934>
    f348:	000033c6 	andeq	r3, r0, r6, asr #7
    f34c:	01c10820 	biceq	r0, r1, r0, lsr #16
    f350:	000003f9 	strdeq	r0, [r0], -r9
    f354:	001f000c 	andseq	r0, pc, ip
    f358:	01c20800 	biceq	r0, r2, r0, lsl #16
    f35c:	000000b8 	strheq	r0, [r0], -r8
    f360:	07730c00 	ldrbeq	r0, [r3, -r0, lsl #24]!
    f364:	c3080000 	movwgt	r0, #32768	; 0x8000
    f368:	0000b801 	andeq	fp, r0, r1, lsl #16
    f36c:	730c0200 	movwvc	r0, #49664	; 0xc200
    f370:	08000022 	stmdaeq	r0, {r1, r5}
    f374:	026d01c6 	rsbeq	r0, sp, #-2147483599	; 0x80000031
    f378:	0c040000 	stceq	0, cr0, [r4], {-0}
    f37c:	00002002 	andeq	r2, r0, r2
    f380:	f401c708 	vst1.8	{d12}, [r1], r8
    f384:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f388:	0022a30c 	eoreq	sl, r2, ip, lsl #6
    f38c:	01cf0800 	biceq	r0, pc, r0, lsl #16
    f390:	000004ef 	andeq	r0, r0, pc, ror #9
    f394:	21ed0c0c 	mvncs	r0, ip, lsl #24
    f398:	d3080000 	movwle	r0, #32768	; 0x8000
    f39c:	00053901 	andeq	r3, r5, r1, lsl #18
    f3a0:	f50c0d00 			; <UNDEFINED> instruction: 0xf50c0d00
    f3a4:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    f3a8:	056301d9 	strbeq	r0, [r3, #-473]!	; 0xfffffe27
    f3ac:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    f3b0:	0000225c 	andeq	r2, r0, ip, asr r2
    f3b4:	8d01de08 	stchi	14, cr13, [r1, #-32]	; 0xffffffe0
    f3b8:	10000005 	andne	r0, r0, r5
    f3bc:	00208b0c 	eoreq	r8, r0, ip, lsl #22
    f3c0:	01df0800 	bicseq	r0, pc, r0, lsl #16
    f3c4:	000000a2 	andeq	r0, r0, r2, lsr #1
    f3c8:	231f0c14 	tstcs	pc, #20, 24	; 0x1400
    f3cc:	e7080000 	str	r0, [r8, -r0]
    f3d0:	0005b701 	andeq	fp, r5, r1, lsl #14
    f3d4:	f70c1500 			; <UNDEFINED> instruction: 0xf70c1500
    f3d8:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f3dc:	05e101fb 	strbeq	r0, [r1, #507]!	; 0x1fb
    f3e0:	0c160000 	ldceq	0, cr0, [r6], {-0}
    f3e4:	0000146a 	andeq	r1, r0, sl, ror #8
    f3e8:	3b020e08 	blcc	92c10 <__ccfg+0x72c68>
    f3ec:	18000006 	stmdane	r0, {r1, r2}
    f3f0:	0020830c 	eoreq	r8, r0, ip, lsl #6
    f3f4:	020f0800 	andeq	r0, pc, #0, 16
    f3f8:	000000b8 	strheq	r0, [r0], -r8
    f3fc:	24c10c1a 	strbcs	r0, [r1], #3098	; 0xc1a
    f400:	10080000 	andne	r0, r8, r0
    f404:	00032402 	andeq	r2, r3, r2, lsl #8
    f408:	03001c00 	movweq	r1, #3072	; 0xc00
    f40c:	00002461 	andeq	r2, r0, r1, ror #8
    f410:	04044308 	streq	r4, [r4], #-776	; 0xfffffcf8
    f414:	420b0000 	andmi	r0, fp, #0
    f418:	28000024 	stmdacs	r0, {r2, r5}
    f41c:	ef021a08 	svc	0x00021a08
    f420:	0c000004 	stceq	0, cr0, [r0], {4}
    f424:	00001f00 	andeq	r1, r0, r0, lsl #30
    f428:	b8021b08 	stmdalt	r2, {r3, r8, r9, fp, ip}
    f42c:	00000000 	andeq	r0, r0, r0
    f430:	0007730c 	andeq	r7, r7, ip, lsl #6
    f434:	021d0800 	andseq	r0, sp, #0, 16
    f438:	000000b8 	strheq	r0, [r0], -r8
    f43c:	22730c02 	rsbscs	r0, r3, #512	; 0x200
    f440:	20080000 	andcs	r0, r8, r0
    f444:	00026d02 	andeq	r6, r2, r2, lsl #26
    f448:	020c0400 	andeq	r0, ip, #0, 8
    f44c:	08000020 	stmdaeq	r0, {r5}
    f450:	00f40221 	rscseq	r0, r4, r1, lsr #4
    f454:	0c080000 	stceq	0, cr0, [r8], {-0}
    f458:	000022a3 	andeq	r2, r0, r3, lsr #5
    f45c:	85022908 	strhi	r2, [r2, #-2312]	; 0xfffff6f8
    f460:	0c000006 	stceq	0, cr0, [r0], {6}
    f464:	0021ed0c 	eoreq	lr, r1, ip, lsl #26
    f468:	022d0800 	eoreq	r0, sp, #0, 16
    f46c:	000006cf 	andeq	r0, r0, pc, asr #13
    f470:	1ef50c0d 	cdpne	12, 15, cr0, cr5, cr13, {0}
    f474:	33080000 	movwcc	r0, #32768	; 0x8000
    f478:	0006f902 	andeq	pc, r6, r2, lsl #18
    f47c:	5c0c0e00 	stcpl	14, cr0, [ip], {-0}
    f480:	08000022 	stmdaeq	r0, {r1, r5}
    f484:	07230238 			; <UNDEFINED> instruction: 0x07230238
    f488:	0c100000 	ldceq	0, cr0, [r0], {-0}
    f48c:	0000208b 	andeq	r2, r0, fp, lsl #1
    f490:	a2023908 	andge	r3, r2, #8, 18	; 0x20000
    f494:	14000000 	strne	r0, [r0], #-0
    f498:	00231f0c 	eoreq	r1, r3, ip, lsl #30
    f49c:	02410800 	subeq	r0, r1, #0, 16
    f4a0:	0000074d 	andeq	r0, r0, sp, asr #14
    f4a4:	1ff70c15 	svcne	0x00f70c15
    f4a8:	55080000 	strpl	r0, [r8, #-0]
    f4ac:	00077702 	andeq	r7, r7, r2, lsl #14
    f4b0:	6a0c1600 	bvs	314cb8 <__ccfg+0x2f4d10>
    f4b4:	08000014 	stmdaeq	r0, {r2, r4}
    f4b8:	07d10268 	ldrbeq	r0, [r1, r8, ror #4]
    f4bc:	0c180000 	ldceq	0, cr0, [r8], {-0}
    f4c0:	00002083 	andeq	r2, r0, r3, lsl #1
    f4c4:	b8026908 	stmdalt	r2, {r3, r8, fp, sp, lr}
    f4c8:	1a000000 	bne	f4d0 <__exidx_end+0x9aac>
    f4cc:	0024c10c 	eoreq	ip, r4, ip, lsl #2
    f4d0:	026a0800 	rsbeq	r0, sl, #0, 16
    f4d4:	00000324 	andeq	r0, r0, r4, lsr #6
    f4d8:	1f320c1c 	svcne	0x00320c1c
    f4dc:	6c080000 	stcvs	0, cr0, [r8], {-0}
    f4e0:	0000b802 	andeq	fp, r0, r2, lsl #16
    f4e4:	7b0c2000 	blvc	3174ec <__ccfg+0x2f7544>
    f4e8:	08000022 	stmdaeq	r0, {r1, r5}
    f4ec:	00ad0270 	adceq	r0, sp, r0, ror r2
    f4f0:	0c220000 	stceq	0, cr0, [r2], #-0
    f4f4:	000023b9 			; <UNDEFINED> instruction: 0x000023b9
    f4f8:	a2027308 	andge	r7, r2, #8, 6	; 0x20000000
    f4fc:	24000000 	strcs	r0, [r0], #-0
    f500:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    f504:	053901c8 	ldreq	r0, [r9, #-456]!	; 0xfffffe38
    f508:	560e0000 	strpl	r0, [lr], -r0
    f50c:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    f510:	00a201c9 	adceq	r0, r2, r9, asr #3
    f514:	04010000 	streq	r0, [r1], #-0
    f518:	f40e0004 	vst4.8	{d0-d3}, [lr], r4
    f51c:	08000020 	stmdaeq	r0, {r5}
    f520:	00a201ca 	adceq	r0, r2, sl, asr #3
    f524:	01010000 	mrseq	r0, (UNDEF: 1)
    f528:	b40e0003 	strlt	r0, [lr], #-3
    f52c:	08000021 	stmdaeq	r0, {r0, r5}
    f530:	00a201cc 	adceq	r0, r2, ip, asr #3
    f534:	02010000 	andeq	r0, r1, #0
    f538:	6f0e0001 	svcvs	0x000e0001
    f53c:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f540:	00a201cd 	adceq	r0, r2, sp, asr #3
    f544:	01010000 	mrseq	r0, (UNDEF: 1)
    f548:	0d000000 	stceq	0, cr0, [r0, #-0]
    f54c:	01d00801 	bicseq	r0, r0, r1, lsl #16
    f550:	00000563 	andeq	r0, r0, r3, ror #10
    f554:	0025d10e 	eoreq	sp, r5, lr, lsl #2
    f558:	01d10800 	bicseq	r0, r1, r0, lsl #16
    f55c:	000000a2 	andeq	r0, r0, r2, lsr #1
    f560:	00040401 	andeq	r0, r4, r1, lsl #8
    f564:	0027250e 	eoreq	r2, r7, lr, lsl #10
    f568:	01d20800 	bicseq	r0, r2, r0, lsl #16
    f56c:	000000a2 	andeq	r0, r0, r2, lsr #1
    f570:	00000401 	andeq	r0, r0, r1, lsl #8
    f574:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    f578:	058d01d4 	streq	r0, [sp, #468]	; 0x1d4
    f57c:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    f580:	08000022 	stmdaeq	r0, {r1, r5}
    f584:	00b801d5 	ldrsbteq	r0, [r8], r5
    f588:	03020000 	movweq	r0, #8192	; 0x2000
    f58c:	080e000d 	stmdaeq	lr, {r0, r2, r3}
    f590:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    f594:	00b801d8 	ldrsbteq	r0, [r8], r8
    f598:	0d020000 	stceq	0, cr0, [r2, #-0]
    f59c:	0d000000 	stceq	0, cr0, [r0, #-0]
    f5a0:	01da0804 	bicseq	r0, sl, r4, lsl #16
    f5a4:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    f5a8:	0023a10e 	eoreq	sl, r3, lr, lsl #2
    f5ac:	01db0800 	bicseq	r0, fp, r0, lsl #16
    f5b0:	000000ce 	andeq	r0, r0, lr, asr #1
    f5b4:	001c0404 	andseq	r0, ip, r4, lsl #8
    f5b8:	0024b10e 	eoreq	fp, r4, lr, lsl #2
    f5bc:	01dd0800 	bicseq	r0, sp, r0, lsl #16
    f5c0:	000000ce 	andeq	r0, r0, lr, asr #1
    f5c4:	00031504 	andeq	r1, r3, r4, lsl #10
    f5c8:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    f5cc:	05e101e0 	strbeq	r0, [r1, #480]!	; 0x1e0
    f5d0:	fd0e0000 	stc2	0, cr0, [lr, #-0]
    f5d4:	08000025 	stmdaeq	r0, {r0, r2, r5}
    f5d8:	00a201e1 	adceq	r0, r2, r1, ror #3
    f5dc:	06010000 	streq	r0, [r1], -r0
    f5e0:	c70e0002 	strgt	r0, [lr, -r2]
    f5e4:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f5e8:	00a201e3 	adceq	r0, r2, r3, ror #3
    f5ec:	02010000 	andeq	r0, r1, #0
    f5f0:	0d000000 	stceq	0, cr0, [r0, #-0]
    f5f4:	01e80802 	mvneq	r0, r2, lsl #16
    f5f8:	0000063b 	andeq	r0, r0, fp, lsr r6
    f5fc:	0023aa0e 	eoreq	sl, r3, lr, lsl #20
    f600:	01e90800 	mvneq	r0, r0, lsl #16
    f604:	000000b8 	strheq	r0, [r0], -r8
    f608:	000a0602 	andeq	r0, sl, r2, lsl #12
    f60c:	0022460e 	eoreq	r4, r2, lr, lsl #12
    f610:	01ea0800 	mvneq	r0, r0, lsl #16
    f614:	000000b8 	strheq	r0, [r0], -r8
    f618:	00090102 	andeq	r0, r9, r2, lsl #2
    f61c:	0024120e 	eoreq	r1, r4, lr, lsl #4
    f620:	01ec0800 	mvneq	r0, r0, lsl #16
    f624:	000000b8 	strheq	r0, [r0], -r8
    f628:	00080102 	andeq	r0, r8, r2, lsl #2
    f62c:	001faf0e 	andseq	sl, pc, lr, lsl #30
    f630:	01ee0800 	mvneq	r0, r0, lsl #16
    f634:	000000b8 	strheq	r0, [r0], -r8
    f638:	00040402 	andeq	r0, r4, r2, lsl #8
    f63c:	001f520e 	andseq	r5, pc, lr, lsl #4
    f640:	01f30800 	mvnseq	r0, r0, lsl #16
    f644:	000000b8 	strheq	r0, [r0], -r8
    f648:	00000302 	andeq	r0, r0, r2, lsl #6
    f64c:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    f650:	068501fc 			; <UNDEFINED> instruction: 0x068501fc
    f654:	a70e0000 	strge	r0, [lr, -r0]
    f658:	08000021 	stmdaeq	r0, {r0, r5}
    f65c:	00b801fd 	ldrshteq	r0, [r8], sp
    f660:	03020000 	movweq	r0, #8192	; 0x2000
    f664:	460e000d 	strmi	r0, [lr], -sp
    f668:	08000021 	stmdaeq	r0, {r0, r5}
    f66c:	00b80203 	adcseq	r0, r8, r3, lsl #4
    f670:	01020000 	mrseq	r0, (UNDEF: 2)
    f674:	e60e000c 	str	r0, [lr], -ip
    f678:	08000020 	stmdaeq	r0, {r5}
    f67c:	00b80205 	adcseq	r0, r8, r5, lsl #4
    f680:	06020000 	streq	r0, [r2], -r0
    f684:	e50e0006 	str	r0, [lr, #-6]
    f688:	08000023 	stmdaeq	r0, {r0, r1, r5}
    f68c:	00b8020c 	adcseq	r0, r8, ip, lsl #4
    f690:	01020000 	mrseq	r0, (UNDEF: 2)
    f694:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    f698:	02220801 	eoreq	r0, r2, #65536	; 0x10000
    f69c:	000006cf 	andeq	r0, r0, pc, asr #13
    f6a0:	0027560e 	eoreq	r5, r7, lr, lsl #12
    f6a4:	02230800 	eoreq	r0, r3, #0, 16
    f6a8:	000000a2 	andeq	r0, r0, r2, lsr #1
    f6ac:	00040401 	andeq	r0, r4, r1, lsl #8
    f6b0:	0020f40e 	eoreq	pc, r0, lr, lsl #8
    f6b4:	02240800 	eoreq	r0, r4, #0, 16
    f6b8:	000000a2 	andeq	r0, r0, r2, lsr #1
    f6bc:	00030101 	andeq	r0, r3, r1, lsl #2
    f6c0:	0021b40e 	eoreq	fp, r1, lr, lsl #8
    f6c4:	02260800 	eoreq	r0, r6, #0, 16
    f6c8:	000000a2 	andeq	r0, r0, r2, lsr #1
    f6cc:	00010201 	andeq	r0, r1, r1, lsl #4
    f6d0:	001f6f0e 	andseq	r6, pc, lr, lsl #30
    f6d4:	02270800 	eoreq	r0, r7, #0, 16
    f6d8:	000000a2 	andeq	r0, r0, r2, lsr #1
    f6dc:	00000101 	andeq	r0, r0, r1, lsl #2
    f6e0:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    f6e4:	06f9022a 	ldrbteq	r0, [r9], sl, lsr #4
    f6e8:	d10e0000 	mrsle	r0, (UNDEF: 14)
    f6ec:	08000025 	stmdaeq	r0, {r0, r2, r5}
    f6f0:	00a2022b 	adceq	r0, r2, fp, lsr #4
    f6f4:	04010000 	streq	r0, [r1], #-0
    f6f8:	250e0004 	strcs	r0, [lr, #-4]
    f6fc:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    f700:	00a2022c 	adceq	r0, r2, ip, lsr #4
    f704:	04010000 	streq	r0, [r1], #-0
    f708:	0d000000 	stceq	0, cr0, [r0, #-0]
    f70c:	022e0802 	eoreq	r0, lr, #131072	; 0x20000
    f710:	00000723 	andeq	r0, r0, r3, lsr #14
    f714:	00220c0e 	eoreq	r0, r2, lr, lsl #24
    f718:	022f0800 	eoreq	r0, pc, #0, 16
    f71c:	000000b8 	strheq	r0, [r0], -r8
    f720:	000d0302 	andeq	r0, sp, r2, lsl #6
    f724:	0027080e 	eoreq	r0, r7, lr, lsl #16
    f728:	02320800 	eorseq	r0, r2, #0, 16
    f72c:	000000b8 	strheq	r0, [r0], -r8
    f730:	00000d02 	andeq	r0, r0, r2, lsl #26
    f734:	08040d00 	stmdaeq	r4, {r8, sl, fp}
    f738:	074d0234 	smlaldxeq	r0, sp, r4, r2
    f73c:	a10e0000 	mrsge	r0, (UNDEF: 14)
    f740:	08000023 	stmdaeq	r0, {r0, r1, r5}
    f744:	00ce0235 	sbceq	r0, lr, r5, lsr r2
    f748:	04040000 	streq	r0, [r4], #-0
    f74c:	b10e001c 	tstlt	lr, ip, lsl r0
    f750:	08000024 	stmdaeq	r0, {r2, r5}
    f754:	00ce0237 	sbceq	r0, lr, r7, lsr r2
    f758:	15040000 	strne	r0, [r4, #-0]
    f75c:	0d000003 	stceq	0, cr0, [r0, #-12]
    f760:	023a0801 	eorseq	r0, sl, #65536	; 0x10000
    f764:	00000777 	andeq	r0, r0, r7, ror r7
    f768:	0025fd0e 	eoreq	pc, r5, lr, lsl #26
    f76c:	023b0800 	eorseq	r0, fp, #0, 16
    f770:	000000a2 	andeq	r0, r0, r2, lsr #1
    f774:	00020601 	andeq	r0, r2, r1, lsl #12
    f778:	001fc70e 	andseq	ip, pc, lr, lsl #14
    f77c:	023d0800 	eorseq	r0, sp, #0, 16
    f780:	000000a2 	andeq	r0, r0, r2, lsr #1
    f784:	00000201 	andeq	r0, r0, r1, lsl #4
    f788:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    f78c:	07d10242 	ldrbeq	r0, [r1, r2, asr #4]
    f790:	aa0e0000 	bge	38f798 <__ccfg+0x36f7f0>
    f794:	08000023 	stmdaeq	r0, {r0, r1, r5}
    f798:	00b80243 	adcseq	r0, r8, r3, asr #4
    f79c:	06020000 	streq	r0, [r2], -r0
    f7a0:	460e000a 	strmi	r0, [lr], -sl
    f7a4:	08000022 	stmdaeq	r0, {r1, r5}
    f7a8:	00b80244 	adcseq	r0, r8, r4, asr #4
    f7ac:	01020000 	mrseq	r0, (UNDEF: 2)
    f7b0:	120e0009 	andne	r0, lr, #9
    f7b4:	08000024 	stmdaeq	r0, {r2, r5}
    f7b8:	00b80246 	adcseq	r0, r8, r6, asr #4
    f7bc:	01020000 	mrseq	r0, (UNDEF: 2)
    f7c0:	af0e0008 	svcge	0x000e0008
    f7c4:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f7c8:	00b80248 	adcseq	r0, r8, r8, asr #4
    f7cc:	04020000 	streq	r0, [r2], #-0
    f7d0:	520e0004 	andpl	r0, lr, #4
    f7d4:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f7d8:	00b8024d 	adcseq	r0, r8, sp, asr #4
    f7dc:	03020000 	movweq	r0, #8192	; 0x2000
    f7e0:	0d000000 	stceq	0, cr0, [r0, #-0]
    f7e4:	02560802 	subseq	r0, r6, #131072	; 0x20000
    f7e8:	0000081b 	andeq	r0, r0, fp, lsl r8
    f7ec:	0021a70e 	eoreq	sl, r1, lr, lsl #14
    f7f0:	02570800 	subseq	r0, r7, #0, 16
    f7f4:	000000b8 	strheq	r0, [r0], -r8
    f7f8:	000d0302 	andeq	r0, sp, r2, lsl #6
    f7fc:	0021460e 	eoreq	r4, r1, lr, lsl #12
    f800:	025d0800 	subseq	r0, sp, #0, 16
    f804:	000000b8 	strheq	r0, [r0], -r8
    f808:	000c0102 	andeq	r0, ip, r2, lsl #2
    f80c:	0020e60e 	eoreq	lr, r0, lr, lsl #12
    f810:	025f0800 	subseq	r0, pc, #0, 16
    f814:	000000b8 	strheq	r0, [r0], -r8
    f818:	00060602 	andeq	r0, r6, r2, lsl #12
    f81c:	0023e50e 	eoreq	lr, r3, lr, lsl #10
    f820:	02660800 	rsbeq	r0, r6, #0, 16
    f824:	000000b8 	strheq	r0, [r0], -r8
    f828:	00050102 	andeq	r0, r5, r2, lsl #2
    f82c:	02100900 	andseq	r0, r0, #0, 18
    f830:	00085448 	andeq	r5, r8, r8, asr #8
    f834:	216c0800 	cmncs	ip, r0, lsl #16
    f838:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    f83c:	000000ce 	andeq	r0, r0, lr, asr #1
    f840:	20cd0800 	sbccs	r0, sp, r0, lsl #16
    f844:	4a020000 	bmi	8f84c <__ccfg+0x6f8a4>
    f848:	000000ce 	andeq	r0, r0, lr, asr #1
    f84c:	25180804 	ldrcs	r0, [r8, #-2052]	; 0xfffff7fc
    f850:	4b020000 	blmi	8f858 <__ccfg+0x6f8b0>
    f854:	000000ce 	andeq	r0, r0, lr, asr #1
    f858:	266b0808 	strbtcs	r0, [fp], -r8, lsl #16
    f85c:	4c020000 	stcmi	0, cr0, [r2], {-0}
    f860:	000000ce 	andeq	r0, r0, lr, asr #1
    f864:	7803000c 	stmdavc	r3, {r2, r3}
    f868:	0200001f 	andeq	r0, r0, #31
    f86c:	00081b4d 	andeq	r1, r8, sp, asr #22
    f870:	347a0f00 	ldrbtcc	r0, [sl], #-3840	; 0xfffff100
    f874:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
    f878:	dc100301 	ldcle	3, cr0, [r0], {1}
    f87c:	02000032 	andeq	r0, r0, #50	; 0x32
    f880:	00ce0114 	sbceq	r0, lr, r4, lsl r1
    f884:	00000000 	andeq	r0, r0, r0
    f888:	00140000 	andseq	r0, r4, r0
    f88c:	9c010000 	stcls	0, cr0, [r1], {-0}
    f890:	00000890 	muleq	r0, r0, r8
    f894:	00339411 	eorseq	r9, r3, r1, lsl r4
    f898:	ce6a0100 	powgte	f0, f2, f0
    f89c:	01000000 	mrseq	r0, (UNDEF: 0)
    f8a0:	62100050 	andsvs	r0, r0, #80	; 0x50
    f8a4:	02000034 	andeq	r0, r0, #52	; 0x34
    f8a8:	00ce014c 	sbceq	r0, lr, ip, asr #2
    f8ac:	3a0c0000 	bcc	30f8b4 <__ccfg+0x2ef90c>
    f8b0:	00280000 	eoreq	r0, r8, r0
    f8b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    f8b8:	000008d8 	ldrdeq	r0, [r0], -r8
    f8bc:	704f7012 	subvc	r7, pc, r2, lsl r0	; <UNPREDICTABLE>
    f8c0:	ce7a0100 	rpwgte	f0, f2, f0
    f8c4:	97000000 	strls	r0, [r0, -r0]
    f8c8:	1300003b 	movwne	r0, #59	; 0x3b
    f8cc:	0000085f 	andeq	r0, r0, pc, asr r8
    f8d0:	00003a14 	andeq	r3, r0, r4, lsl sl
    f8d4:	00000004 	andeq	r0, r0, r4
    f8d8:	5f137e01 	svcpl	0x00137e01
    f8dc:	20000008 	andcs	r0, r0, r8
    f8e0:	0600003a 			; <UNDEFINED> instruction: 0x0600003a
    f8e4:	01000000 	mrseq	r0, (UNDEF: 0)
    f8e8:	64140083 	ldrvs	r0, [r4], #-131	; 0xffffff7d
    f8ec:	02000033 	andeq	r0, r0, #51	; 0x33
    f8f0:	3a340154 	bcc	d0fe48 <__ccfg+0xcefea0>
    f8f4:	004c0000 	subeq	r0, ip, r0
    f8f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    f8fc:	00349115 	eorseq	r9, r4, r5, lsl r1
    f900:	015c0200 	cmpeq	ip, r0, lsl #4
    f904:	00003a80 	andeq	r3, r0, r0, lsl #21
    f908:	00000150 	andeq	r0, r0, r0, asr r1
    f90c:	092a9c01 	stmdbeq	sl!, {r0, sl, fp, ip, pc}
    f910:	8b160000 	blhi	58f918 <__ccfg+0x56f970>
    f914:	01000033 	tsteq	r0, r3, lsr r0
    f918:	00026da4 	andeq	r6, r2, r4, lsr #27
    f91c:	16500100 	ldrbne	r0, [r0], -r0, lsl #2
    f920:	000033e1 	andeq	r3, r0, r1, ror #7
    f924:	092aa401 	stmdbeq	sl!, {r0, sl, sp, pc}
    f928:	51010000 	mrspl	r0, (UNDEF: 1)
    f92c:	00348917 	eorseq	r8, r4, r7, lsl r9
    f930:	94a60100 	strtls	r0, [r6], #256	; 0x100
    f934:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    f938:	0000003b 	andeq	r0, r0, fp, lsr r0
    f93c:	08540406 	ldmdaeq	r4, {r1, r2, sl}^
    f940:	53150000 	tstpl	r5, #0
    f944:	02000034 	andeq	r0, r0, #52	; 0x34
    f948:	3bd0016c 	blcc	ff40ff00 <_estack+0xdf40af00>
    f94c:	01180000 	tsteq	r8, r0
    f950:	9c010000 	stcls	0, cr0, [r1], {-0}
    f954:	000009ac 	andeq	r0, r0, ip, lsr #19
    f958:	00338b18 	eorseq	r8, r3, r8, lsl fp
    f95c:	6df30100 	ldfvse	f0, [r3]
    f960:	d6000002 	strle	r0, [r0], -r2
    f964:	1700003b 	smladxne	r0, fp, r0, r0
    f968:	00003489 	andeq	r3, r0, r9, lsl #9
    f96c:	00c3f501 	sbceq	pc, r3, r1, lsl #10
    f970:	3bf70000 	blcc	ffdcf978 <_estack+0xdfdca978>
    f974:	47170000 	ldrmi	r0, [r7, -r0]
    f978:	01000034 	tsteq	r0, r4, lsr r0
    f97c:	0000cef6 	strdeq	ip, [r0], -r6
    f980:	003c4600 	eorseq	r4, ip, r0, lsl #12
    f984:	32f71700 	rscscc	r1, r7, #0, 14
    f988:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    f98c:	00000324 	andeq	r0, r0, r4, lsr #6
    f990:	00003c90 	muleq	r0, r0, ip
    f994:	00330819 	eorseq	r0, r3, r9, lsl r8
    f998:	c3f80100 	mvnsgt	r0, #0, 2
    f99c:	17000000 	strne	r0, [r0, -r0]
    f9a0:	000033e9 	andeq	r3, r0, r9, ror #7
    f9a4:	00cef901 	sbceq	pc, lr, r1, lsl #18
    f9a8:	3cd30000 	ldclcc	0, cr0, [r3], {0}
    f9ac:	7c170000 	ldcvc	0, cr0, [r7], {-0}
    f9b0:	01000033 	tsteq	r0, r3, lsr r0
    f9b4:	0000cefa 	strdeq	ip, [r0], -sl
    f9b8:	003d2b00 	eorseq	r2, sp, r0, lsl #22
    f9bc:	51150000 	tstpl	r5, r0
    f9c0:	02000033 	andeq	r0, r0, #51	; 0x33
    f9c4:	3ce80164 	stfcce	f0, [r8], #400	; 0x190
    f9c8:	00200000 	eoreq	r0, r0, r0
    f9cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    f9d0:	000009d3 	ldrdeq	r0, [r0], -r3
    f9d4:	0033e11a 	eorseq	lr, r3, sl, lsl r1
    f9d8:	01770100 	cmneq	r7, r0, lsl #2
    f9dc:	0000092a 	andeq	r0, r0, sl, lsr #18
    f9e0:	00003d61 	andeq	r3, r0, r1, ror #26
    f9e4:	33af1500 			; <UNDEFINED> instruction: 0x33af1500
    f9e8:	74020000 	strvc	r0, [r2], #-0
    f9ec:	00000001 	andeq	r0, r0, r1
    f9f0:	00006000 	andeq	r6, r0, r0
    f9f4:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
    f9f8:	1b00000a 	blne	fa28 <__exidx_end+0xa004>
    f9fc:	00002649 	andeq	r2, r0, r9, asr #12
    fa00:	ff018401 			; <UNDEFINED> instruction: 0xff018401
    fa04:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    fa08:	1b210003 	blne	84fa1c <__ccfg+0x82fa74>
    fa0c:	00002107 	andeq	r2, r0, r7, lsl #2
    fa10:	24018501 	strcs	r8, [r1], #-1281	; 0xfffffaff
    fa14:	bc000003 	stclt	0, cr0, [r0], {3}
    fa18:	1c210003 	stcne	0, cr0, [r1], #-12
    fa1c:	89010069 	stmdbhi	r1, {r0, r3, r5, r6}
    fa20:	00009401 	andeq	r9, r0, r1, lsl #8
    fa24:	003d8f00 	eorseq	r8, sp, r0, lsl #30
    fa28:	00001d00 	andeq	r1, r0, r0, lsl #26
    fa2c:	0a9c0000 	beq	fe70fa34 <_estack+0xde70aa34>
    fa30:	011e0000 	tsteq	lr, r0
    fa34:	84080252 	strhi	r0, [r8], #-594	; 0xfffffdae
    fa38:	0251011e 	subseq	r0, r1, #-2147483641	; 0x80000007
    fa3c:	011eff08 	tsteq	lr, r8, lsl #30	; <UNPREDICTABLE>
    fa40:	380c0550 	stmdacc	ip, {r4, r6, r8, sl}
    fa44:	00210003 	eoreq	r0, r1, r3
    fa48:	33171500 	tstcc	r7, #0, 10
    fa4c:	7c020000 	stcvc	0, cr0, [r2], {-0}
    fa50:	003d0801 	eorseq	r0, sp, r1, lsl #16
    fa54:	00001c00 	andeq	r1, r0, r0, lsl #24
    fa58:	5c9c0100 	ldfpls	f0, [ip], {0}
    fa5c:	1f00000a 	svcne	0x0000000a
    fa60:	0000343f 	andeq	r3, r0, pc, lsr r4
    fa64:	5c019601 	stcpl	6, cr9, [r1], {1}
    fa68:	0100000a 	tsteq	r0, sl
    fa6c:	01020050 	qaddeq	r0, r0, r2
    fa70:	000ca202 	andeq	sl, ip, r2, lsl #4
    fa74:	00b82000 	adcseq	r2, r8, r0
    fa78:	0a730000 	beq	1ccfa80 <__ccfg+0x1cafad8>
    fa7c:	e4210000 	strt	r0, [r1], #-0
    fa80:	0b000000 	bleq	fa88 <__exidx_end+0xa064>
    fa84:	339c2200 	orrscc	r2, ip, #0, 4
    fa88:	52010000 	andpl	r0, r1, #0
    fa8c:	00000a97 	muleq	r0, r7, sl
    fa90:	3d3bc318 	ldccc	3, cr12, [fp, #-96]!	; 0xffffffa0
    fa94:	713a5d3a 	teqvc	sl, sl, lsr sp
    fa98:	8f0aa13a 	svchi	0x000aa13a
    fa9c:	b33b0f3a 	teqlt	fp, #58, 30	; 0xe8
    faa0:	855e4909 	ldrbhi	r4, [lr, #-2313]	; 0xfffff6f7
    faa4:	853b2f0a 	ldrhi	r2, [fp, #-3850]!	; 0xfffff0f6
    faa8:	0a63233b 	beq	18d879c <__ccfg+0x18b87f4>
    faac:	8f240000 	svchi	0x00240000
    fab0:	09000016 	stmdbeq	r0, {r1, r2, r4}
    fab4:	0000eb19 	andeq	lr, r0, r9, lsl fp
    fab8:	00eb2500 	rsceq	r2, fp, r0, lsl #10
    fabc:	94250000 	strtls	r0, [r5], #-0
    fac0:	25000000 	strcs	r0, [r0, #-0]
    fac4:	000000d9 	ldrdeq	r0, [r0], -r9
    fac8:	02070000 	andeq	r0, r7, #0
    facc:	00040000 	andeq	r0, r4, r0
    fad0:	0000381e 	andeq	r3, r0, lr, lsl r8
    fad4:	2a2c0104 	bcs	b0feec <__ccfg+0xaeff44>
    fad8:	61010000 	mrsvs	r0, (UNDEF: 1)
    fadc:	f3000035 	vqadd.u8	d0, d0, d21
    fae0:	3000002a 	andcc	r0, r0, sl, lsr #32
    fae4:	00000012 	andeq	r0, r0, r2, lsl r0
    fae8:	da000000 	ble	faf0 <__exidx_end+0xa0cc>
    faec:	0200007f 	andeq	r0, r0, #127	; 0x7f
    faf0:	0c580601 	mrrceq	6, 0, r0, r8, cr1
    faf4:	01020000 	mrseq	r0, (UNDEF: 2)
    faf8:	000c5608 	andeq	r5, ip, r8, lsl #12
    fafc:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    fb00:	00000a66 	andeq	r0, r0, r6, ror #20
    fb04:	53070202 	movwpl	r0, #29186	; 0x7202
    fb08:	0200000d 	andeq	r0, r0, #13
    fb0c:	07f80504 	ldrbeq	r0, [r8, r4, lsl #10]!
    fb10:	9f030000 	svcls	0x00030000
    fb14:	03000029 	movweq	r0, #41	; 0x29
    fb18:	00005341 	andeq	r5, r0, r1, asr #6
    fb1c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    fb20:	00000428 	andeq	r0, r0, r8, lsr #8
    fb24:	f3050802 	vsub.i8	d0, d5, d2
    fb28:	02000007 	andeq	r0, r0, #7
    fb2c:	04230708 	strteq	r0, [r3], #-1800	; 0xfffff8f8
    fb30:	04040000 	streq	r0, [r4], #-0
    fb34:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    fb38:	07040200 	streq	r0, [r4, -r0, lsl #4]
    fb3c:	0000042d 	andeq	r0, r0, sp, lsr #8
    fb40:	0029a103 	eoreq	sl, r9, r3, lsl #2
    fb44:	48200400 	stmdami	r0!, {sl}
    fb48:	05000000 	streq	r0, [r0, #-0]
    fb4c:	000035be 			; <UNDEFINED> instruction: 0x000035be
    fb50:	03033002 	movweq	r3, #12290	; 0x3002
    fb54:	00362906 	eorseq	r2, r6, r6, lsl #18
    fb58:	01fd0100 	mvnseq	r0, r0, lsl #2
    fb5c:	0035d105 	eorseq	sp, r5, r5, lsl #2
    fb60:	01820100 	orreq	r0, r2, r0, lsl #2
    fb64:	34ac0701 	strtcc	r0, [ip], #1793	; 0x701
    fb68:	0d010000 	stceq	0, cr0, [r1, #-0]
    fb6c:	003d2401 	eorseq	r2, sp, r1, lsl #8
    fb70:	0000d400 	andeq	sp, r0, r0, lsl #8
    fb74:	6d9c0100 	ldfvss	f0, [ip]
    fb78:	08000001 	stmdaeq	r0, {r0}
    fb7c:	000035ac 	andeq	r3, r0, ip, lsr #11
    fb80:	76010d01 	strvc	r0, [r1], -r1, lsl #26
    fb84:	33000000 	movwcc	r0, #0
    fb88:	0900003e 	stmdbeq	r0, {r1, r2, r3, r4, r5}
    fb8c:	00003618 	andeq	r3, r0, r8, lsl r6
    fb90:	76010f01 	strvc	r0, [r1], -r1, lsl #30
    fb94:	5f000000 	svcpl	0x00000000
    fb98:	0900003e 	stmdbeq	r0, {r1, r2, r3, r4, r5}
    fb9c:	000034a5 	andeq	r3, r0, r5, lsr #9
    fba0:	76011001 	strvc	r1, [r1], -r1
    fba4:	72000000 	andvc	r0, r0, #0
    fba8:	0a00003e 	beq	fca8 <__exidx_end+0xa284>
    fbac:	00000081 	andeq	r0, r0, r1, lsl #1
    fbb0:	00003d56 	andeq	r3, r0, r6, asr sp
    fbb4:	00000006 	andeq	r0, r0, r6
    fbb8:	0b013601 	bleq	5d3c4 <__ccfg+0x3d41c>
    fbbc:	00003d7c 	andeq	r3, r0, ip, ror sp
    fbc0:	0000002a 	andeq	r0, r0, sl, lsr #32
    fbc4:	0000011f 	andeq	r0, r0, pc, lsl r1
    fbc8:	00369e09 	eorseq	r9, r6, r9, lsl #28
    fbcc:	01530100 	cmpeq	r3, r0, lsl #2
    fbd0:	00000076 	andeq	r0, r0, r6, ror r0
    fbd4:	00003e8b 	andeq	r3, r0, fp, lsl #29
    fbd8:	0035fa09 	eorseq	pc, r5, r9, lsl #20
    fbdc:	01540100 	cmpeq	r4, r0, lsl #2
    fbe0:	00000076 	andeq	r0, r0, r6, ror r0
    fbe4:	00003e9e 	muleq	r0, lr, lr
    fbe8:	3d660c00 	stclcc	12, cr0, [r6, #-0]
    fbec:	01c30000 	biceq	r0, r3, r0
    fbf0:	01330000 	teqeq	r3, r0
    fbf4:	010d0000 	mrseq	r0, (UNDEF: 13)
    fbf8:	00740250 	rsbseq	r0, r4, r0, asr r2
    fbfc:	3d6e0c00 	stclcc	12, cr0, [lr, #-0]
    fc00:	01d40000 	bicseq	r0, r4, r0
    fc04:	014d0000 	mrseq	r0, (UNDEF: 77)
    fc08:	010d0000 	mrseq	r0, (UNDEF: 13)
    fc0c:	00740251 	rsbseq	r0, r4, r1, asr r2
    fc10:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    fc14:	0c000075 	stceq	0, cr0, [r0], {117}	; 0x75
    fc18:	00003dac 	andeq	r3, r0, ip, lsr #27
    fc1c:	000001ea 	andeq	r0, r0, sl, ror #3
    fc20:	00000161 	andeq	r0, r0, r1, ror #2
    fc24:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    fc28:	0e000074 	mcreq	0, 0, r0, cr0, cr4, {3}
    fc2c:	00003db6 			; <UNDEFINED> instruction: 0x00003db6
    fc30:	0150010d 	cmpeq	r0, sp, lsl #2
    fc34:	0f000032 	svceq	0x00000032
    fc38:	000035e4 	andeq	r3, r0, r4, ror #11
    fc3c:	3df85f07 	ldclcc	15, cr5, [r8, #28]!
    fc40:	00a40000 	adceq	r0, r4, r0
    fc44:	9c010000 	stcls	0, cr0, [r1], {-0}
    fc48:	000001c3 	andeq	r0, r0, r3, asr #3
    fc4c:	0035ac10 	eorseq	sl, r5, r0, lsl ip
    fc50:	76720100 	ldrbtvc	r0, [r2], -r0, lsl #2
    fc54:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    fc58:	1000003e 	andne	r0, r0, lr, lsr r0
    fc5c:	00003605 	andeq	r3, r0, r5, lsl #12
    fc60:	00767301 	rsbseq	r7, r6, r1, lsl #6
    fc64:	3edc0000 	cdpcc	0, 13, cr0, cr12, cr0, {0}
    fc68:	08110000 	ldmdaeq	r1, {}	; <UNPREDICTABLE>
    fc6c:	fb00003e 	blx	fd6e <__exidx_end+0xa34a>
    fc70:	11000001 	tstne	r0, r1
    fc74:	00003e1c 	andeq	r3, r0, ip, lsl lr
    fc78:	00000203 	andeq	r0, r0, r3, lsl #4
    fc7c:	003e2c12 	eorseq	r2, lr, r2, lsl ip
    fc80:	00009b00 	andeq	r9, r0, r0, lsl #22
    fc84:	50010d00 	andpl	r0, r1, r0, lsl #26
    fc88:	00007402 	andeq	r7, r0, r2, lsl #8
    fc8c:	34d11300 	ldrbcc	r1, [r1], #768	; 0x300
    fc90:	6c050000 	stcvs	0, cr0, [r5], {-0}
    fc94:	000001d4 	ldrdeq	r0, [r0], -r4
    fc98:	00007614 	andeq	r7, r0, r4, lsl r6
    fc9c:	01130000 	tsteq	r3, r0
    fca0:	05000035 	streq	r0, [r0, #-53]	; 0xffffffcb
    fca4:	0001ea73 	andeq	lr, r1, r3, ror sl
    fca8:	00761400 	rsbseq	r1, r6, r0, lsl #8
    fcac:	76140000 	ldrvc	r0, [r4], -r0
    fcb0:	00000000 	andeq	r0, r0, r0
    fcb4:	00353113 	eorseq	r3, r5, r3, lsl r1
    fcb8:	fb7a0500 	blx	1e910c2 <__ccfg+0x1e7111a>
    fcbc:	14000001 	strne	r0, [r0], #-1
    fcc0:	00000076 	andeq	r0, r0, r6, ror r0
    fcc4:	36611500 	strbtcc	r1, [r1], -r0, lsl #10
    fcc8:	43060000 	movwmi	r0, #24576	; 0x6000
    fccc:	357e1602 	ldrbcc	r1, [lr, #-1538]!	; 0xfffff9fe
    fcd0:	fd050000 	stc2	0, cr0, [r5, #-0]
    fcd4:	000b1700 	andeq	r1, fp, r0, lsl #14
    fcd8:	60000400 	andvs	r0, r0, r0, lsl #8
    fcdc:	04000039 	streq	r0, [r0], #-57	; 0xffffffc7
    fce0:	002a2c01 	eoreq	r2, sl, r1, lsl #24
    fce4:	38e10100 	stmiacc	r1!, {r8}^
    fce8:	2af30000 	bcs	ffccfcf0 <_estack+0xdfccacf0>
    fcec:	12780000 	rsbsne	r0, r8, #0
    fcf0:	00000000 	andeq	r0, r0, r0
    fcf4:	81c70000 	bichi	r0, r7, r0
    fcf8:	01020000 	mrseq	r0, (UNDEF: 2)
    fcfc:	000c5806 	andeq	r5, ip, r6, lsl #16
    fd00:	08010200 	stmdaeq	r1, {r9}
    fd04:	00000c56 	andeq	r0, r0, r6, asr ip
    fd08:	66050202 	strvs	r0, [r5], -r2, lsl #4
    fd0c:	0200000a 	andeq	r0, r0, #10
    fd10:	0d530702 	ldcleq	7, cr0, [r3, #-8]
    fd14:	8c030000 	stchi	0, cr0, [r3], {-0}
    fd18:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    fd1c:	00004c3f 	andeq	r4, r0, pc, lsr ip
    fd20:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    fd24:	000007f8 	strdeq	r0, [r0], -r8
    fd28:	00299f03 	eoreq	r9, r9, r3, lsl #30
    fd2c:	5e410400 	cdppl	4, 4, cr0, cr1, cr0, {0}
    fd30:	02000000 	andeq	r0, r0, #0
    fd34:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
    fd38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    fd3c:	0007f305 	andeq	pc, r7, r5, lsl #6
    fd40:	07080200 	streq	r0, [r8, -r0, lsl #4]
    fd44:	00000423 	andeq	r0, r0, r3, lsr #8
    fd48:	69050404 	stmdbvs	r5, {r2, sl}
    fd4c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    fd50:	042d0704 	strteq	r0, [sp], #-1796	; 0xfffff8fc
    fd54:	8e030000 	cdphi	0, 0, cr0, cr3, cr0, {0}
    fd58:	0500002b 	streq	r0, [r0, #-43]	; 0xffffffd5
    fd5c:	0000411f 	andeq	r4, r0, pc, lsl r1
    fd60:	29a10300 	stmibcs	r1!, {r8, r9}
    fd64:	20050000 	andcs	r0, r5, r0
    fd68:	00000053 	andeq	r0, r0, r3, asr r0
    fd6c:	00397405 	eorseq	r7, r9, r5, lsl #8
    fd70:	81e90200 	mvnhi	r0, r0, lsl #4
    fd74:	03000000 	movweq	r0, #0
    fd78:	000000be 	strheq	r0, [r0], -lr
    fd7c:	0036c406 	eorseq	ip, r6, r6, lsl #8
    fd80:	8ce90200 	sfmhi	f0, 2, [r9]
    fd84:	07000000 	streq	r0, [r0, -r0]
    fd88:	000039cd 	andeq	r3, r0, sp, asr #19
    fd8c:	0081ef02 	addeq	lr, r1, r2, lsl #30
    fd90:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    fd94:	000036f9 	strdeq	r3, [r0], -r9
    fd98:	008cab02 	addeq	sl, ip, r2, lsl #22
    fd9c:	e7010000 	str	r0, [r1, -r0]
    fda0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    fda4:	000035ac 	andeq	r3, r0, ip, lsr #11
    fda8:	8c032901 			; <UNDEFINED> instruction: 0x8c032901
    fdac:	0a000000 	beq	fdb4 <__exidx_end+0xa390>
    fdb0:	00003a56 	andeq	r3, r0, r6, asr sl
    fdb4:	8c032b01 			; <UNDEFINED> instruction: 0x8c032b01
    fdb8:	00000000 	andeq	r0, r0, r0
    fdbc:	0039ac08 	eorseq	sl, r9, r8, lsl #24
    fdc0:	8c810200 	sfmhi	f0, 4, [r1], {0}
    fdc4:	01000000 	mrseq	r0, (UNDEF: 0)
    fdc8:	00000110 	andeq	r0, r0, r0, lsl r1
    fdcc:	0035ac09 	eorseq	sl, r5, r9, lsl #24
    fdd0:	033c0100 	teqeq	ip, #0, 2
    fdd4:	0000008c 	andeq	r0, r0, ip, lsl #1
    fdd8:	003a1d0a 	eorseq	r1, sl, sl, lsl #26
    fddc:	033e0100 	teqeq	lr, #0, 2
    fde0:	0000008c 	andeq	r0, r0, ip, lsl #1
    fde4:	385a0800 	ldmdacc	sl, {fp}^
    fde8:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    fdec:	0000008c 	andeq	r0, r0, ip, lsl #1
    fdf0:	00013901 	andeq	r3, r1, r1, lsl #18
    fdf4:	35ac0900 	strcc	r0, [ip, #2304]!	; 0x900
    fdf8:	4f010000 	svcmi	0x00010000
    fdfc:	00008c03 	andeq	r8, r0, r3, lsl #24
    fe00:	39910a00 	ldmibcc	r1, {r9, fp}
    fe04:	51010000 	mrspl	r0, (UNDEF: 1)
    fe08:	00008c03 	andeq	r8, r0, r3, lsl #24
    fe0c:	be080000 	cdplt	0, 0, cr0, cr8, cr0, {0}
    fe10:	02000037 	andeq	r0, r0, #55	; 0x37
    fe14:	00008cc8 	andeq	r8, r0, r8, asr #25
    fe18:	016e0100 	cmneq	lr, r0, lsl #2
    fe1c:	ac090000 	stcge	0, cr0, [r9], {-0}
    fe20:	01000035 	tsteq	r0, r5, lsr r0
    fe24:	008c0362 	addeq	r0, ip, r2, ror #6
    fe28:	4e0a0000 	cdpmi	0, 0, cr0, cr10, cr0, {0}
    fe2c:	01000037 	tsteq	r0, r7, lsr r0
    fe30:	008c0364 	addeq	r0, ip, r4, ror #6
    fe34:	8f0a0000 	svchi	0x000a0000
    fe38:	01000038 	tsteq	r0, r8, lsr r0
    fe3c:	008c0365 	addeq	r0, ip, r5, ror #6
    fe40:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    fe44:	000038c1 	andeq	r3, r0, r1, asr #17
    fe48:	008cb202 	addeq	fp, ip, r2, lsl #4
    fe4c:	a3010000 	movwge	r0, #4096	; 0x1000
    fe50:	09000001 	stmdbeq	r0, {r0}
    fe54:	000035ac 	andeq	r3, r0, ip, lsr #11
    fe58:	8c039401 	cfstrshi	mvf9, [r3], {1}
    fe5c:	0a000000 	beq	fe64 <__exidx_end+0xa440>
    fe60:	000037dd 	ldrdeq	r3, [r0], -sp
    fe64:	8c039601 	stchi	6, cr9, [r3], {1}
    fe68:	0a000000 	beq	fe70 <__exidx_end+0xa44c>
    fe6c:	0000388f 	andeq	r3, r0, pc, lsl #17
    fe70:	8c039701 	stchi	7, cr9, [r3], {1}
    fe74:	00000000 	andeq	r0, r0, r0
    fe78:	00378c08 	eorseq	r8, r7, r8, lsl #24
    fe7c:	8cb90200 	lfmhi	f0, 4, [r9]
    fe80:	01000000 	mrseq	r0, (UNDEF: 0)
    fe84:	000001cc 	andeq	r0, r0, ip, asr #3
    fe88:	0035ac09 	eorseq	sl, r5, r9, lsl #24
    fe8c:	03b40100 			; <UNDEFINED> instruction: 0x03b40100
    fe90:	0000008c 	andeq	r0, r0, ip, lsl #1
    fe94:	0038990a 	eorseq	r9, r8, sl, lsl #18
    fe98:	03b60100 			; <UNDEFINED> instruction: 0x03b60100
    fe9c:	0000008c 	andeq	r0, r0, ip, lsl #1
    fea0:	39370800 	ldmdbcc	r7!, {fp}
    fea4:	df020000 	svcle	0x00020000
    fea8:	0000008c 	andeq	r0, r0, ip, lsl #1
    feac:	0001f501 	andeq	pc, r1, r1, lsl #10
    feb0:	35ac0900 	strcc	r0, [ip, #2304]!	; 0x900
    feb4:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    feb8:	00008c03 	andeq	r8, r0, r3, lsl #24
    febc:	3a760a00 	bcc	1d926c4 <__ccfg+0x1d7271c>
    fec0:	ca010000 	bgt	4fec8 <__ccfg+0x2ff20>
    fec4:	00008c03 	andeq	r8, r0, r3, lsl #24
    fec8:	f7080000 			; <UNDEFINED> instruction: 0xf7080000
    fecc:	02000039 	andeq	r0, r0, #57	; 0x39
    fed0:	00008cd7 	ldrdeq	r8, [r0], -r7
    fed4:	02120100 	andseq	r0, r2, #0, 2
    fed8:	290a0000 	stmdbcs	sl, {}	; <UNPREDICTABLE>
    fedc:	0100003b 	tsteq	r0, fp, lsr r0
    fee0:	008c0283 	addeq	r0, ip, r3, lsl #5
    fee4:	0b000000 	bleq	feec <__exidx_end+0xa4c8>
    fee8:	000012bf 			; <UNDEFINED> instruction: 0x000012bf
    feec:	0c03c403 	cfstrseq	mvf12, [r3], {3}
    fef0:	00003b06 	andeq	r3, r0, r6, lsl #22
    fef4:	9c010f02 	stcls	15, cr0, [r1], {2}
    fef8:	7c00003e 	stcvc	0, cr0, [r0], {62}	; 0x3e
    fefc:	01000000 	mrseq	r0, (UNDEF: 0)
    ff00:	0002c49c 	muleq	r2, ip, r4
    ff04:	36180d00 	ldrcc	r0, [r8], -r0, lsl #26
    ff08:	7f010000 	svcvc	0x00010000
    ff0c:	0000008c 	andeq	r0, r0, ip, lsl #1
    ff10:	00003eef 	andeq	r3, r0, pc, ror #29
    ff14:	003b1e07 	eorseq	r1, fp, r7, lsl #28
    ff18:	8c810100 	stfhis	f0, [r1], {0}
    ff1c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    ff20:	000038b6 			; <UNDEFINED> instruction: 0x000038b6
    ff24:	00818201 	addeq	r8, r1, r1, lsl #4
    ff28:	52010000 	andpl	r0, r1, #0
    ff2c:	0037290f 	eorseq	r2, r7, pc, lsl #18
    ff30:	81830100 	orrhi	r0, r3, r0, lsl #2
    ff34:	10000000 	andne	r0, r0, r0
    ff38:	0f00003f 	svceq	0x0000003f
    ff3c:	000037f7 	strdeq	r3, [r0], -r7
    ff40:	00818401 	addeq	r8, r1, r1, lsl #8
    ff44:	3f230000 	svccc	0x00230000
    ff48:	97100000 	ldrls	r0, [r0, -r0]
    ff4c:	aa000000 	bge	ff54 <__exidx_end+0xa530>
    ff50:	4800003e 	stmdami	r0, {r1, r2, r3, r4, r5}
    ff54:	01000012 	tsteq	r0, r2, lsl r0
    ff58:	00029b97 	muleq	r2, r7, fp
    ff5c:	00a71100 	adceq	r1, r7, r0, lsl #2
    ff60:	48120000 	ldmdami	r2, {}	; <UNPREDICTABLE>
    ff64:	13000012 	movwne	r0, #18
    ff68:	000000b2 	strheq	r0, [r0], -r2
    ff6c:	00005201 	andeq	r5, r0, r1, lsl #4
    ff70:	00009714 	andeq	r9, r0, r4, lsl r7
    ff74:	003eb400 	eorseq	fp, lr, r0, lsl #8
    ff78:	00000600 	andeq	r0, r0, r0, lsl #12
    ff7c:	11980100 	orrsne	r0, r8, r0, lsl #2
    ff80:	000000a7 	andeq	r0, r0, r7, lsr #1
    ff84:	003eb415 	eorseq	fp, lr, r5, lsl r4
    ff88:	00000600 	andeq	r0, r0, r0, lsl #12
    ff8c:	00b21600 	adcseq	r1, r2, r0, lsl #12
    ff90:	3f510000 	svccc	0x00510000
    ff94:	00000000 	andeq	r0, r0, r0
    ff98:	34d11700 	ldrbcc	r1, [r1], #1792	; 0x700
    ff9c:	6c020000 	stcvs	0, cr0, [r2], {-0}
    ffa0:	00003f18 	andeq	r3, r0, r8, lsl pc
    ffa4:	000000ac 	andeq	r0, r0, ip, lsr #1
    ffa8:	03439c01 	movteq	r9, #15361	; 0x3c01
    ffac:	180d0000 	stmdane	sp, {}	; <UNPREDICTABLE>
    ffb0:	01000036 	tsteq	r0, r6, lsr r0
    ffb4:	00008cbf 			; <UNDEFINED> instruction: 0x00008cbf
    ffb8:	003f6400 	eorseq	r6, pc, r0, lsl #8
    ffbc:	3a380f00 	bcc	e13bc4 <__ccfg+0xdf3c1c>
    ffc0:	c1010000 	mrsgt	r0, (UNDEF: 1)
    ffc4:	00000081 	andeq	r0, r0, r1, lsl #1
    ffc8:	00003f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    ffcc:	003b4e0f 	eorseq	r4, fp, pc, lsl #28
    ffd0:	81c20100 	bichi	r0, r2, r0, lsl #2
    ffd4:	c1000000 	mrsgt	r0, (UNDEF: 0)
    ffd8:	1800003f 	stmdane	r0, {r0, r1, r2, r3, r4, r5}
    ffdc:	00000097 	muleq	r0, r7, r0
    ffe0:	00003f4e 	andeq	r3, r0, lr, asr #30
    ffe4:	00000006 	andeq	r0, r0, r6
    ffe8:	0332ee01 	teqeq	r2, #1, 28
    ffec:	a7110000 	ldrge	r0, [r1, -r0]
    fff0:	15000000 	strne	r0, [r0, #-0]
    fff4:	00003f4e 	andeq	r3, r0, lr, asr #30
    fff8:	00000006 	andeq	r0, r0, r6
    fffc:	0000b216 	andeq	fp, r0, r6, lsl r2
   10000:	003fe800 	eorseq	lr, pc, r0, lsl #16
   10004:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
   10008:	00003f3c 	andeq	r3, r0, ip, lsr pc
   1000c:	0000021a 	andeq	r0, r0, sl, lsl r2
   10010:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   10014:	00000074 	andeq	r0, r0, r4, ror r0
   10018:	0036d41b 	eorseq	sp, r6, fp, lsl r4
   1001c:	8ca40200 	sfmhi	f0, 4, [r4]
   10020:	c4000000 	strgt	r0, [r0], #-0
   10024:	5c00003f 	stcpl	0, cr0, [r0], {63}	; 0x3f
   10028:	01000000 	mrseq	r0, (UNDEF: 0)
   1002c:	0003bd9c 	muleq	r3, ip, sp
   10030:	36181c00 	ldrcc	r1, [r8], -r0, lsl #24
   10034:	1f010000 	svcne	0x00010000
   10038:	00008c02 	andeq	r8, r0, r2, lsl #24
   1003c:	003ffb00 	eorseq	pc, pc, r0, lsl #22
   10040:	39e81d00 	stmibcc	r8!, {r8, sl, fp, ip}^
   10044:	21010000 	mrscs	r0, (UNDEF: 1)
   10048:	00008c02 	andeq	r8, r0, r2, lsl #24
   1004c:	00401c00 	subeq	r1, r0, r0, lsl #24
   10050:	3aea1d00 	bcc	ffa97458 <_estack+0xdfa92458>
   10054:	22010000 	andcs	r0, r1, #0
   10058:	00008c02 	andeq	r8, r0, r2, lsl #24
   1005c:	00402f00 	subeq	r2, r0, r0, lsl #30
   10060:	3af81d00 	bcc	ffe17468 <_estack+0xdfe12468>
   10064:	23010000 	movwcs	r0, #4096	; 0x1000
   10068:	00008c02 	andeq	r8, r0, r2, lsl #24
   1006c:	00407d00 	subeq	r7, r0, r0, lsl #26
   10070:	3b371d00 	blcc	dd7478 <__ccfg+0xdb74d0>
   10074:	24010000 	strcs	r0, [r1], #-0
   10078:	00008102 	andeq	r8, r0, r2, lsl #2
   1007c:	0040e500 	subeq	lr, r0, r0, lsl #10
   10080:	3b291d00 	blcc	a57488 <__ccfg+0xa374e0>
   10084:	25010000 	strcs	r0, [r1, #-0]
   10088:	00008c02 	andeq	r8, r0, r2, lsl #24
   1008c:	00410400 	subeq	r0, r1, r0, lsl #8
   10090:	0c1b0000 	ldceq	0, cr0, [fp], {-0}
   10094:	02000039 	andeq	r0, r0, #57	; 0x39
   10098:	00008cc1 	andeq	r8, r0, r1, asr #25
   1009c:	00402000 	subeq	r2, r0, r0
   100a0:	00001800 	andeq	r1, r0, r0, lsl #16
   100a4:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
   100a8:	1d000003 	stcne	0, cr0, [r0, #-12]
   100ac:	00003b29 	andeq	r3, r0, r9, lsr #22
   100b0:	8c026701 	stchi	7, cr6, [r2], {1}
   100b4:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
   100b8:	00000041 	andeq	r0, r0, r1, asr #32
   100bc:	0001f51e 	andeq	pc, r1, lr, lsl r5	; <UNPREDICTABLE>
   100c0:	00000000 	andeq	r0, r0, r0
   100c4:	00001000 	andeq	r1, r0, r0
   100c8:	049c0100 	ldreq	r0, [ip], #256	; 0x100
   100cc:	16000004 	strne	r0, [r0], -r4
   100d0:	00000205 	andeq	r0, r0, r5, lsl #4
   100d4:	00004150 	andeq	r4, r0, r0, asr r1
   100d8:	383a1b00 	ldmdacc	sl!, {r8, r9, fp, ip}
   100dc:	9d020000 	stcls	0, cr0, [r2, #-0]
   100e0:	0000008c 	andeq	r0, r0, ip, lsl #1
   100e4:	00004038 	andeq	r4, r0, r8, lsr r0
   100e8:	00000010 	andeq	r0, r0, r0, lsl r0
   100ec:	043e9c01 	ldrteq	r9, [lr], #-3073	; 0xfffff3ff
   100f0:	291d0000 	ldmdbcs	sp, {}	; <UNPREDICTABLE>
   100f4:	0100003b 	tsteq	r0, fp, lsr r0
   100f8:	008c0297 	umulleq	r0, ip, r7, r2
   100fc:	41690000 	cmnmi	r9, r0
   10100:	e81d0000 	ldmda	sp, {}	; <UNPREDICTABLE>
   10104:	01000039 	tsteq	r0, r9, lsr r0
   10108:	008c0298 	umulleq	r0, ip, r8, r2
   1010c:	418a0000 	orrmi	r0, sl, r0
   10110:	1b000000 	blne	10118 <__exidx_end+0xa6f4>
   10114:	0000381a 	andeq	r3, r0, sl, lsl r8
   10118:	008c9602 	addeq	r9, ip, r2, lsl #12
   1011c:	40480000 	submi	r0, r8, r0
   10120:	00140000 	andseq	r0, r4, r0
   10124:	9c010000 	stcls	0, cr0, [r1], {-0}
   10128:	00000478 	andeq	r0, r0, r8, ror r4
   1012c:	003b291d 	eorseq	r2, fp, sp, lsl r9
   10130:	02ba0100 	adcseq	r0, sl, #0, 2
   10134:	0000008c 	andeq	r0, r0, ip, lsl #1
   10138:	0000419d 	muleq	r0, sp, r1
   1013c:	0039e81d 	eorseq	lr, r9, sp, lsl r8
   10140:	02bb0100 	adcseq	r0, fp, #0, 2
   10144:	0000008c 	andeq	r0, r0, ip, lsl #1
   10148:	000041be 			; <UNDEFINED> instruction: 0x000041be
   1014c:	3ac91b00 	bcc	ff256d54 <_estack+0xdf251d54>
   10150:	8f020000 	svchi	0x00020000
   10154:	0000008c 	andeq	r0, r0, ip, lsl #1
   10158:	0000405c 	andeq	r4, r0, ip, asr r0
   1015c:	00000064 	andeq	r0, r0, r4, rrx
   10160:	04fe9c01 	ldrbteq	r9, [lr], #3073	; 0xc01
   10164:	ac1c0000 	ldcge	0, cr0, [ip], {-0}
   10168:	01000035 	tsteq	r0, r5, lsr r0
   1016c:	008c02db 	ldrdeq	r0, [ip], fp
   10170:	41d10000 	bicsmi	r0, r1, r0
   10174:	291d0000 	ldmdbcs	sp, {}	; <UNPREDICTABLE>
   10178:	0100003b 	tsteq	r0, fp, lsr r0
   1017c:	008c02dd 	ldrdeq	r0, [ip], sp
   10180:	41f20000 	mvnsmi	r0, r0
   10184:	e81d0000 	ldmda	sp, {}	; <UNPREDICTABLE>
   10188:	01000039 	tsteq	r0, r9, lsr r0
   1018c:	008c02de 	ldrdeq	r0, [ip], lr
   10190:	42260000 	eormi	r0, r6, #0
   10194:	421d0000 	andsmi	r0, sp, #0
   10198:	01000037 	tsteq	r0, r7, lsr r0
   1019c:	008c02df 	ldrdeq	r0, [ip], pc	; <UNPREDICTABLE>
   101a0:	42390000 	eorsmi	r0, r9, #0
   101a4:	a11d0000 	tstge	sp, r0
   101a8:	0100003a 	tsteq	r0, sl, lsr r0
   101ac:	008c02e0 	addeq	r0, ip, r0, ror #5
   101b0:	42670000 	rsbmi	r0, r7, #0
   101b4:	de0a0000 	cdple	0, 0, cr0, cr10, cr0, {0}
   101b8:	01000039 	tsteq	r0, r9, lsr r0
   101bc:	008c02e1 	addeq	r0, ip, r1, ror #5
   101c0:	b21d0000 	andslt	r0, sp, #0
   101c4:	01000037 	tsteq	r0, r7, lsr r0
   101c8:	008102e2 	addeq	r0, r1, r2, ror #5
   101cc:	42950000 	addsmi	r0, r5, #0
   101d0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   101d4:	000000be 	strheq	r0, [r0], -lr
   101d8:	000040c0 	andeq	r4, r0, r0, asr #1
   101dc:	00000014 	andeq	r0, r0, r4, lsl r0
   101e0:	054a9c01 	strbeq	r9, [sl, #-3073]	; 0xfffff3ff
   101e4:	ce1f0000 	cdpgt	0, 1, cr0, cr15, cr0, {0}
   101e8:	10000000 	andne	r0, r0, r0
   101ec:	16000043 	strne	r0, [r0], -r3, asr #32
   101f0:	000000da 	ldrdeq	r0, [r0], -sl
   101f4:	00004331 	andeq	r4, r0, r1, lsr r3
   101f8:	0040c215 	subeq	ip, r0, r5, lsl r2
   101fc:	00000a00 	andeq	r0, r0, r0, lsl #20
   10200:	00ce1f00 	sbceq	r1, lr, r0, lsl #30
   10204:	43500000 	cmpmi	r0, #0
   10208:	c2150000 	andsgt	r0, r5, #0
   1020c:	0a000040 	beq	10314 <__exidx_end+0xa8f0>
   10210:	16000000 	strne	r0, [r0], -r0
   10214:	000000da 	ldrdeq	r0, [r0], -sl
   10218:	00004371 	andeq	r4, r0, r1, ror r3
   1021c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   10220:	000000e7 	andeq	r0, r0, r7, ror #1
   10224:	000040d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   10228:	00000014 	andeq	r0, r0, r4, lsl r0
   1022c:	05969c01 	ldreq	r9, [r6, #3073]	; 0xc01
   10230:	f71f0000 			; <UNDEFINED> instruction: 0xf71f0000
   10234:	84000000 	strhi	r0, [r0], #-0
   10238:	16000043 	strne	r0, [r0], -r3, asr #32
   1023c:	00000103 	andeq	r0, r0, r3, lsl #2
   10240:	000043a5 	andeq	r4, r0, r5, lsr #7
   10244:	0040d615 	subeq	sp, r0, r5, lsl r6
   10248:	00000a00 	andeq	r0, r0, r0, lsl #20
   1024c:	00f71f00 	rscseq	r1, r7, r0, lsl #30
   10250:	43c40000 	bicmi	r0, r4, #0
   10254:	d6150000 	ldrle	r0, [r5], -r0
   10258:	0a000040 	beq	10360 <__exidx_end+0xa93c>
   1025c:	16000000 	strne	r0, [r0], -r0
   10260:	00000103 	andeq	r0, r0, r3, lsl #2
   10264:	000043e5 	andeq	r4, r0, r5, ror #7
   10268:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   1026c:	00000110 	andeq	r0, r0, r0, lsl r1
   10270:	000040e8 	andeq	r4, r0, r8, ror #1
   10274:	00000014 	andeq	r0, r0, r4, lsl r0
   10278:	05e29c01 	strbeq	r9, [r2, #3073]!	; 0xc01
   1027c:	201f0000 	andscs	r0, pc, r0
   10280:	f8000001 			; <UNDEFINED> instruction: 0xf8000001
   10284:	16000043 	strne	r0, [r0], -r3, asr #32
   10288:	0000012c 	andeq	r0, r0, ip, lsr #2
   1028c:	00004419 	andeq	r4, r0, r9, lsl r4
   10290:	0040ea15 	subeq	lr, r0, r5, lsl sl
   10294:	00000a00 	andeq	r0, r0, r0, lsl #20
   10298:	01201f00 			; <UNDEFINED> instruction: 0x01201f00
   1029c:	44380000 	ldrtmi	r0, [r8], #-0
   102a0:	ea150000 	b	5502a8 <__ccfg+0x530300>
   102a4:	0a000040 	beq	103ac <__exidx_end+0xa988>
   102a8:	16000000 	strne	r0, [r0], -r0
   102ac:	0000012c 	andeq	r0, r0, ip, lsr #2
   102b0:	00004459 	andeq	r4, r0, r9, asr r4
   102b4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   102b8:	00000139 	andeq	r0, r0, r9, lsr r1
   102bc:	000040fc 	strdeq	r4, [r0], -ip
   102c0:	00000028 	andeq	r0, r0, r8, lsr #32
   102c4:	063c9c01 	ldrteq	r9, [ip], -r1, lsl #24
   102c8:	491f0000 	ldmdbmi	pc, {}	; <UNPREDICTABLE>
   102cc:	6c000001 	stcvs	0, cr0, [r0], {1}
   102d0:	16000044 	strne	r0, [r0], -r4, asr #32
   102d4:	00000155 	andeq	r0, r0, r5, asr r1
   102d8:	0000448d 	andeq	r4, r0, sp, lsl #9
   102dc:	00016120 	andeq	r6, r1, r0, lsr #2
   102e0:	40fe1500 	rscsmi	r1, lr, r0, lsl #10
   102e4:	001c0000 	andseq	r0, ip, r0
   102e8:	491f0000 	ldmdbmi	pc, {}	; <UNPREDICTABLE>
   102ec:	ac000001 	stcge	0, cr0, [r0], {1}
   102f0:	15000044 	strne	r0, [r0, #-68]	; 0xffffffbc
   102f4:	000040fe 	strdeq	r4, [r0], -lr
   102f8:	0000001c 	andeq	r0, r0, ip, lsl r0
   102fc:	00015516 	andeq	r5, r1, r6, lsl r5
   10300:	0044cd00 	subeq	ip, r4, r0, lsl #26
   10304:	01611600 	cmneq	r1, r0, lsl #12
   10308:	44fa0000 	ldrbtmi	r0, [sl], #0
   1030c:	00000000 	andeq	r0, r0, r0
   10310:	37671b00 	strbcc	r1, [r7, -r0, lsl #22]!
   10314:	cf020000 	svcgt	0x00020000
   10318:	0000008c 	andeq	r0, r0, ip, lsl #1
   1031c:	00004124 	andeq	r4, r0, r4, lsr #2
   10320:	00000010 	andeq	r0, r0, r0, lsl r0
   10324:	06669c01 	strbteq	r9, [r6], -r1, lsl #24
   10328:	011d0000 	tsteq	sp, r0
   1032c:	01000038 	tsteq	r0, r8, lsr r0
   10330:	008c0384 	addeq	r0, ip, r4, lsl #7
   10334:	450d0000 	strmi	r0, [sp, #-0]
   10338:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   1033c:	0000016e 	andeq	r0, r0, lr, ror #2
   10340:	00004134 	andeq	r4, r0, r4, lsr r1
   10344:	0000002c 	andeq	r0, r0, ip, lsr #32
   10348:	06c09c01 	strbeq	r9, [r0], r1, lsl #24
   1034c:	7e1f0000 	cdpvc	0, 1, cr0, cr15, cr0, {0}
   10350:	28000001 	stmdacs	r0, {r0}
   10354:	16000045 	strne	r0, [r0], -r5, asr #32
   10358:	0000018a 	andeq	r0, r0, sl, lsl #3
   1035c:	00004549 	andeq	r4, r0, r9, asr #10
   10360:	00019620 	andeq	r9, r1, r0, lsr #12
   10364:	41361500 	teqmi	r6, r0, lsl #10
   10368:	001e0000 	andseq	r0, lr, r0
   1036c:	7e1f0000 	cdpvc	0, 1, cr0, cr15, cr0, {0}
   10370:	6c000001 	stcvs	0, cr0, [r0], {1}
   10374:	15000045 	strne	r0, [r0, #-69]	; 0xffffffbb
   10378:	00004136 	andeq	r4, r0, r6, lsr r1
   1037c:	0000001e 	andeq	r0, r0, lr, lsl r0
   10380:	00018a16 	andeq	r8, r1, r6, lsl sl
   10384:	00458d00 	subeq	r8, r5, r0, lsl #26
   10388:	01961600 	orrseq	r1, r6, r0, lsl #12
   1038c:	45ba0000 	ldrmi	r0, [sl, #0]!
   10390:	00000000 	andeq	r0, r0, r0
   10394:	01a31e00 			; <UNDEFINED> instruction: 0x01a31e00
   10398:	41600000 	cmnmi	r0, r0
   1039c:	00140000 	andseq	r0, r4, r0
   103a0:	9c010000 	stcls	0, cr0, [r1], {-0}
   103a4:	0000070c 	andeq	r0, r0, ip, lsl #14
   103a8:	0001b31f 	andeq	fp, r1, pc, lsl r3
   103ac:	0045cd00 	subeq	ip, r5, r0, lsl #26
   103b0:	01bf1600 			; <UNDEFINED> instruction: 0x01bf1600
   103b4:	45ee0000 	strbmi	r0, [lr, #0]!
   103b8:	62150000 	andsvs	r0, r5, #0
   103bc:	0a000041 	beq	104c8 <__exidx_end+0xaaa4>
   103c0:	1f000000 	svcne	0x00000000
   103c4:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
   103c8:	0000460d 	andeq	r4, r0, sp, lsl #12
   103cc:	00416215 	subeq	r6, r1, r5, lsl r2
   103d0:	00000a00 	andeq	r0, r0, r0, lsl #20
   103d4:	01bf1600 			; <UNDEFINED> instruction: 0x01bf1600
   103d8:	462e0000 	strtmi	r0, [lr], -r0
   103dc:	00000000 	andeq	r0, r0, r0
   103e0:	01cc1e00 	biceq	r1, ip, r0, lsl #28
   103e4:	41740000 	cmnmi	r4, r0
   103e8:	00140000 	andseq	r0, r4, r0
   103ec:	9c010000 	stcls	0, cr0, [r1], {-0}
   103f0:	00000758 	andeq	r0, r0, r8, asr r7
   103f4:	0001dc1f 	andeq	sp, r1, pc, lsl ip
   103f8:	00464100 	subeq	r4, r6, r0, lsl #2
   103fc:	01e81600 	mvneq	r1, r0, lsl #12
   10400:	46620000 	strbtmi	r0, [r2], -r0
   10404:	76150000 	ldrvc	r0, [r5], -r0
   10408:	0a000041 	beq	10514 <__exidx_end+0xaaf0>
   1040c:	1f000000 	svcne	0x00000000
   10410:	000001dc 	ldrdeq	r0, [r0], -ip
   10414:	00004681 	andeq	r4, r0, r1, lsl #13
   10418:	00417615 	subeq	r7, r1, r5, lsl r6
   1041c:	00000a00 	andeq	r0, r0, r0, lsl #20
   10420:	01e81600 	mvneq	r1, r0, lsl #12
   10424:	46a20000 	strtmi	r0, [r2], r0
   10428:	00000000 	andeq	r0, r0, r0
   1042c:	35011700 	strcc	r1, [r1, #-1792]	; 0xfffff900
   10430:	73020000 	movwvc	r0, #8192	; 0x2000
   10434:	00004188 	andeq	r4, r0, r8, lsl #3
   10438:	00000110 	andeq	r0, r0, r0, lsl r1
   1043c:	09639c01 	stmdbeq	r3!, {r0, sl, fp, ip, pc}^
   10440:	ac1c0000 	ldcge	0, cr0, [ip], {-0}
   10444:	01000035 	tsteq	r0, r5, lsr r0
   10448:	008c0127 	addeq	r0, ip, r7, lsr #2
   1044c:	46b50000 	ldrtmi	r0, [r5], r0
   10450:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
   10454:	01000036 	tsteq	r0, r6, lsr r0
   10458:	008c0127 	addeq	r0, ip, r7, lsr #2
   1045c:	46e10000 	strbtmi	r0, [r1], r0
   10460:	6b1d0000 	blvs	750468 <__ccfg+0x7304c0>
   10464:	01000039 	tsteq	r0, r9, lsr r0
   10468:	008c0129 	addeq	r0, ip, r9, lsr #2
   1046c:	47020000 	strmi	r0, [r2, -r0]
   10470:	f5210000 			; <UNDEFINED> instruction: 0xf5210000
   10474:	b8000001 	stmdalt	r0, {r0}
   10478:	60000041 	andvs	r0, r0, r1, asr #32
   1047c:	01000012 	tsteq	r0, r2, lsl r0
   10480:	07c10140 	strbeq	r0, [r1, r0, asr #2]
   10484:	60120000 	andsvs	r0, r2, r0
   10488:	16000012 			; <UNDEFINED> instruction: 0x16000012
   1048c:	00000205 	andeq	r0, r0, r5, lsl #4
   10490:	000047d0 	ldrdeq	r4, [r0], -r0
   10494:	92220000 	eorls	r0, r2, #0
   10498:	43000041 	movwmi	r0, #65	; 0x41
   1049c:	d6000003 	strle	r0, [r0], -r3
   104a0:	1a000007 	bne	104c4 <__exidx_end+0xaaa0>
   104a4:	f3035001 	vhadd.u8	d5, d3, d1
   104a8:	22005101 	andcs	r5, r0, #1073741824	; 0x40000000
   104ac:	0000419e 	muleq	r0, lr, r1
   104b0:	00000ad6 	ldrdeq	r0, [r0], -r6
   104b4:	000007ef 	andeq	r0, r0, pc, ror #15
   104b8:	0151011a 	cmpeq	r1, sl, lsl r1
   104bc:	50011a48 	andpl	r1, r1, r8, asr #20
   104c0:	00007402 	andeq	r7, r0, r2, lsl #8
   104c4:	0041a223 	subeq	sl, r1, r3, lsr #4
   104c8:	0003bd00 	andeq	fp, r3, r0, lsl #26
   104cc:	41b82400 			; <UNDEFINED> instruction: 0x41b82400
   104d0:	76020000 	strvc	r0, [r2], -r0
   104d4:	00081d00 	andeq	r1, r8, r0, lsl #26
   104d8:	53011a00 	movwpl	r1, #6656	; 0x1a00
   104dc:	011a3001 	tsteq	sl, r1
   104e0:	ff0a0352 			; <UNDEFINED> instruction: 0xff0a0352
   104e4:	51011a03 	tstpl	r1, r3, lsl #20
   104e8:	1a2c0802 	bne	b124f8 <__ccfg+0xaf2550>
   104ec:	74025001 	strvc	r5, [r2], #-1
   104f0:	c8220000 	stmdagt	r2!, {}	; <UNPREDICTABLE>
   104f4:	d6000041 	strle	r0, [r0], -r1, asr #32
   104f8:	3600000a 	strcc	r0, [r0], -sl
   104fc:	1a000008 	bne	10524 <__exidx_end+0xab00>
   10500:	4c015101 	stfmis	f5, [r1], {1}
   10504:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   10508:	23000074 	movwcs	r0, #116	; 0x74
   1050c:	000041cc 	andeq	r4, r0, ip, asr #3
   10510:	00000404 	andeq	r0, r0, r4, lsl #8
   10514:	0041d622 	subeq	sp, r1, r2, lsr #12
   10518:	000ad600 	andeq	sp, sl, r0, lsl #12
   1051c:	00085800 	andeq	r5, r8, r0, lsl #16
   10520:	51011a00 	tstpl	r1, r0, lsl #20
   10524:	011a4401 	tsteq	sl, r1, lsl #8
   10528:	00740250 	rsbseq	r0, r4, r0, asr r2
   1052c:	41da2300 	bicsmi	r2, sl, r0, lsl #6
   10530:	043e0000 	ldrteq	r0, [lr], #-0
   10534:	e4220000 	strt	r0, [r2], #-0
   10538:	d6000041 	strle	r0, [r0], -r1, asr #32
   1053c:	7a00000a 	bvc	1056c <__exidx_end+0xab48>
   10540:	1a000008 	bne	10568 <__exidx_end+0xab44>
   10544:	40015101 	andmi	r5, r1, r1, lsl #2
   10548:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   1054c:	22000074 	andcs	r0, r0, #116	; 0x74
   10550:	000041ea 	andeq	r4, r0, sl, ror #3
   10554:	00000478 	andeq	r0, r0, r8, ror r4
   10558:	0000088e 	andeq	r0, r0, lr, lsl #17
   1055c:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   10560:	22000075 	andcs	r0, r0, #117	; 0x75
   10564:	000041f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   10568:	00000ad6 	ldrdeq	r0, [r0], -r6
   1056c:	000008a7 	andeq	r0, r0, r7, lsr #17
   10570:	0151011a 	cmpeq	r1, sl, lsl r1
   10574:	50011a3c 	andpl	r1, r1, ip, lsr sl
   10578:	00007402 	andeq	r7, r0, r2, lsl #8
   1057c:	0041fa22 	subeq	pc, r1, r2, lsr #20
   10580:	0000e700 	andeq	lr, r0, r0, lsl #14
   10584:	0008bb00 	andeq	fp, r8, r0, lsl #22
   10588:	50011a00 	andpl	r1, r1, r0, lsl #20
   1058c:	00007502 	andeq	r7, r0, r2, lsl #10
   10590:	00420c22 	subeq	r0, r2, r2, lsr #24
   10594:	00011000 	andeq	r1, r1, r0
   10598:	0008cf00 	andeq	ip, r8, r0, lsl #30
   1059c:	50011a00 	andpl	r1, r1, r0, lsl #20
   105a0:	00007502 	andeq	r7, r0, r2, lsl #10
   105a4:	00421a22 	subeq	r1, r2, r2, lsr #20
   105a8:	00013900 	andeq	r3, r1, r0, lsl #18
   105ac:	0008e300 	andeq	lr, r8, r0, lsl #6
   105b0:	50011a00 	andpl	r1, r1, r0, lsl #20
   105b4:	00007502 	andeq	r7, r0, r2, lsl #10
   105b8:	00422422 	subeq	r2, r2, r2, lsr #8
   105bc:	000ad600 	andeq	sp, sl, r0, lsl #12
   105c0:	0008fd00 	andeq	pc, r8, r0, lsl #26
   105c4:	51011a00 	tstpl	r1, r0, lsl #20
   105c8:	1a280802 	bne	a125d8 <__ccfg+0x9f2630>
   105cc:	74025001 	strvc	r5, [r2], #-1
   105d0:	2a220000 	bcs	8905d8 <__ccfg+0x870630>
   105d4:	be000042 	cdplt	0, 0, cr0, cr0, cr2, {2}
   105d8:	11000000 	mrsne	r0, (UNDEF: 0)
   105dc:	1a000009 	bne	10608 <__exidx_end+0xabe4>
   105e0:	75025001 	strvc	r5, [r2, #-1]
   105e4:	3c220000 	stccc	0, cr0, [r2], #-0
   105e8:	a3000042 	movwge	r0, #66	; 0x42
   105ec:	25000001 	strcs	r0, [r0, #-1]
   105f0:	1a000009 	bne	1061c <__exidx_end+0xabf8>
   105f4:	75025001 	strvc	r5, [r2, #-1]
   105f8:	4e220000 	cdpmi	0, 2, cr0, cr2, cr0, {0}
   105fc:	cc000042 	stcgt	0, cr0, [r0], {66}	; 0x42
   10600:	39000001 	stmdbcc	r0, {r0}
   10604:	1a000009 	bne	10630 <__exidx_end+0xac0c>
   10608:	75025001 	strvc	r5, [r2, #-1]
   1060c:	62220000 	eorvs	r0, r2, #0
   10610:	6e000042 	cdpvs	0, 0, cr0, cr0, cr2, {2}
   10614:	4d000001 	stcmi	0, cr0, [r0, #-4]
   10618:	1a000009 	bne	10644 <__exidx_end+0xac20>
   1061c:	75025001 	strvc	r5, [r2, #-1]
   10620:	6c190000 	ldcvs	0, cr0, [r9], {-0}
   10624:	d6000042 	strle	r0, [r0], -r2, asr #32
   10628:	1a00000a 	bne	10658 <__exidx_end+0xac34>
   1062c:	38015101 	stmdacc	r1, {r0, r8, ip, lr}
   10630:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   10634:	00000074 	andeq	r0, r0, r4, ror r0
   10638:	00357e17 	eorseq	r7, r5, r7, lsl lr
   1063c:	98fd0200 	ldmls	sp!, {r9}^
   10640:	64000042 	strvs	r0, [r0], #-66	; 0xffffffbe
   10644:	01000000 	mrseq	r0, (UNDEF: 0)
   10648:	0009899c 	muleq	r9, ip, r9
   1064c:	37351d00 	ldrcc	r1, [r5, -r0, lsl #26]!
   10650:	eb010000 	bl	50658 <__ccfg+0x306b0>
   10654:	00008c03 	andeq	r8, r0, r3, lsl #24
   10658:	0047e900 	subeq	lr, r7, r0, lsl #18
   1065c:	ab0c0000 	blge	310664 <__ccfg+0x2f06bc>
   10660:	0200003a 	andeq	r0, r0, #58	; 0x3a
   10664:	42fc0106 	rscsmi	r0, ip, #-2147483647	; 0x80000001
   10668:	00280000 	eoreq	r0, r8, r0
   1066c:	9c010000 	stcls	0, cr0, [r1], {-0}
   10670:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
   10674:	0039021c 	eorseq	r0, r9, ip, lsl r2
   10678:	04130100 	ldreq	r0, [r3], #-256	; 0xffffff00
   1067c:	0000008c 	andeq	r0, r0, ip, lsl #1
   10680:	00004804 	andeq	r4, r0, r4, lsl #16
   10684:	35311700 	ldrcc	r1, [r1, #-1792]!	; 0xfffff900
   10688:	7a020000 	bvc	90690 <__ccfg+0x706e8>
   1068c:	00004324 	andeq	r4, r0, r4, lsr #6
   10690:	00000150 	andeq	r0, r0, r0, asr r1
   10694:	0ad69c01 	beq	ff5b76a0 <_estack+0xdf5b26a0>
   10698:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
   1069c:	01000036 	tsteq	r0, r6, lsr r0
   106a0:	008c019b 	umulleq	r0, ip, fp, r1
   106a4:	48250000 	stmdami	r5!, {}	; <UNPREDICTABLE>
   106a8:	491d0000 	ldmdbmi	sp, {}	; <UNPREDICTABLE>
   106ac:	0100003a 	tsteq	r0, sl, lsr r0
   106b0:	008c019d 	umulleq	r0, ip, sp, r1
   106b4:	48800000 	stmmi	r0, {}	; <UNPREDICTABLE>
   106b8:	6b1d0000 	blvs	7506c0 <__ccfg+0x730718>
   106bc:	01000039 	tsteq	r0, r9, lsr r0
   106c0:	008c019e 	umulleq	r0, ip, lr, r1
   106c4:	48930000 	ldmmi	r3, {}	; <UNPREDICTABLE>
   106c8:	b51d0000 	ldrlt	r0, [sp, #-0]
   106cc:	01000036 	tsteq	r0, r6, lsr r0
   106d0:	008c019f 	umulleq	r0, ip, pc, r1	; <UNPREDICTABLE>
   106d4:	48a60000 	stmiami	r6!, {}	; <UNPREDICTABLE>
   106d8:	a81d0000 	ldmdage	sp, {}	; <UNPREDICTABLE>
   106dc:	01000036 	tsteq	r0, r6, lsr r0
   106e0:	008c01a0 	addeq	r0, ip, r0, lsr #3
   106e4:	48c40000 	stmiami	r4, {}^	; <UNPREDICTABLE>
   106e8:	12250000 	eorne	r0, r5, #0
   106ec:	36000002 	strcc	r0, [r0], -r2
   106f0:	3e000044 	cdpcc	0, 0, cr0, cr0, cr4, {2}
   106f4:	01000000 	mrseq	r0, (UNDEF: 0)
   106f8:	ae230216 	mcrge	2, 1, r0, cr3, cr6, {0}
   106fc:	3c000043 	stccc	0, cr0, [r0], {67}	; 0x43
   10700:	22000006 	andcs	r0, r0, #6
   10704:	000043d0 	ldrdeq	r4, [r0], -r0
   10708:	00000af2 	strdeq	r0, [r0], -r2
   1070c:	00000a46 	andeq	r0, r0, r6, asr #20
   10710:	0151011a 	cmpeq	r1, sl, lsl r1
   10714:	50011a31 	andpl	r1, r1, r1, lsr sl
   10718:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
   1071c:	000043d6 	ldrdeq	r4, [r0], -r6
   10720:	00000989 	andeq	r0, r0, r9, lsl #19
   10724:	00000a5d 	andeq	r0, r0, sp, asr sl
   10728:	0550011a 	ldrbeq	r0, [r0, #-282]	; 0xfffffee6
   1072c:	8637bd0c 	ldrthi	fp, [r7], -ip, lsl #26
   10730:	dc230000 	stcle	0, cr0, [r3], #-0
   10734:	08000043 	stmdaeq	r0, {r0, r1, r6}
   10738:	2200000b 	andcs	r0, r0, #11
   1073c:	000043e6 	andeq	r4, r0, r6, ror #7
   10740:	00000af2 	strdeq	r0, [r0], -r2
   10744:	00000a7f 	andeq	r0, r0, pc, ror sl
   10748:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
   1074c:	011a0074 	tsteq	sl, r4, ror r0
   10750:	00340150 	eorseq	r0, r4, r0, asr r1
   10754:	0043ec22 	subeq	lr, r3, r2, lsr #24
   10758:	000b0800 	andeq	r0, fp, r0, lsl #16
   1075c:	000a9200 	andeq	r9, sl, r0, lsl #4
   10760:	50011a00 	andpl	r1, r1, r0, lsl #20
   10764:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
   10768:	000043fc 	strdeq	r4, [r0], -ip
   1076c:	00000989 	andeq	r0, r0, r9, lsl #19
   10770:	00000aac 	andeq	r0, r0, ip, lsr #21
   10774:	0850011a 	ldmdaeq	r0, {r1, r3, r4, r8}^
   10778:	ff0c0074 			; <UNDEFINED> instruction: 0xff0c0074
   1077c:	1a00ffff 	bne	50780 <__ccfg+0x307d8>
   10780:	440c2600 	strmi	r2, [ip], #-1536	; 0xfffffa00
   10784:	0acc0000 	beq	ff31078c <_estack+0xdf30b78c>
   10788:	011a0000 	tsteq	sl, r0
   1078c:	000c0552 	andeq	r0, ip, r2, asr r5
   10790:	1a600060 	bne	1810918 <__ccfg+0x17f0970>
   10794:	37015101 	strcc	r5, [r1, -r1, lsl #2]
   10798:	0450011a 	ldrbeq	r0, [r0], #-282	; 0xfffffee6
   1079c:	25480074 	strbcs	r0, [r8, #-116]	; 0xffffff8c
   107a0:	44222300 	strtmi	r2, [r2], #-768	; 0xfffffd00
   107a4:	0af20000 	beq	ffc907ac <_estack+0xdfc8b7ac>
   107a8:	27000000 	strcs	r0, [r0, -r0]
   107ac:	0000387b 	andeq	r3, r0, fp, ror r8
   107b0:	f201ca06 	vpmax.s8	d12, d1, d6
   107b4:	2800000a 	stmdacs	r0, {r1, r3}
   107b8:	0000008c 	andeq	r0, r0, ip, lsl #1
   107bc:	00008c28 	andeq	r8, r0, r8, lsr #24
   107c0:	008c2800 	addeq	r2, ip, r0, lsl #16
   107c4:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
   107c8:	00002d0a 	andeq	r2, r0, sl, lsl #26
   107cc:	0b08f907 	bleq	24ebf0 <__ccfg+0x22ec48>
   107d0:	8c280000 	stchi	0, cr0, [r8], #-0
   107d4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
   107d8:	0000008c 	andeq	r0, r0, ip, lsl #1
   107dc:	2d432a00 	vstrcs	s5, [r3, #-0]
   107e0:	10070000 	andne	r0, r7, r0
   107e4:	00008c01 	andeq	r8, r0, r1, lsl #24
   107e8:	008c2800 	addeq	r2, ip, r0, lsl #16
   107ec:	00000000 	andeq	r0, r0, r0
   107f0:	00000923 	andeq	r0, r0, r3, lsr #18
   107f4:	3bc10004 	blcc	ff05080c <_estack+0xdf04b80c>
   107f8:	01040000 	mrseq	r0, (UNDEF: 4)
   107fc:	00002a2c 	andeq	r2, r0, ip, lsr #20
   10800:	003bf201 	eorseq	pc, fp, r1, lsl #4
   10804:	002af300 	eoreq	pc, sl, r0, lsl #6
   10808:	00135000 	andseq	r5, r3, r0
   1080c:	00000000 	andeq	r0, r0, r0
   10810:	00862200 	addeq	r2, r6, r0, lsl #4
   10814:	2b960200 	blcs	fe59101c <_estack+0xde58c01c>
   10818:	1b060000 	blne	190820 <__ccfg+0x170878>
   1081c:	00000030 	andeq	r0, r0, r0, lsr r0
   10820:	58060103 	stmdapl	r6, {r0, r1, r8}
   10824:	0200000c 	andeq	r0, r0, #12
   10828:	00002a07 	andeq	r2, r0, r7, lsl #20
   1082c:	00421d06 	subeq	r1, r2, r6, lsl #26
   10830:	01030000 	mrseq	r0, (UNDEF: 3)
   10834:	000c5608 	andeq	r5, ip, r8, lsl #12
   10838:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
   1083c:	00000a66 	andeq	r0, r0, r6, ror #20
   10840:	002dfd02 	eoreq	pc, sp, r2, lsl #26
   10844:	5b2b0600 	blpl	ad204c <__ccfg+0xab20a4>
   10848:	03000000 	movweq	r0, #0
   1084c:	0d530702 	ldcleq	7, cr0, [r3, #-8]
   10850:	8c020000 	stchi	0, cr0, [r2], {-0}
   10854:	0600002b 	streq	r0, [r0], -fp, lsr #32
   10858:	00006d3f 	andeq	r6, r0, pc, lsr sp
   1085c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
   10860:	000007f8 	strdeq	r0, [r0], -r8
   10864:	00299f02 	eoreq	r9, r9, r2, lsl #30
   10868:	7f410600 	svcvc	0x00410600
   1086c:	03000000 	movweq	r0, #0
   10870:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
   10874:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
   10878:	0007f305 	andeq	pc, r7, r5, lsl #6
   1087c:	07080300 	streq	r0, [r8, -r0, lsl #6]
   10880:	00000423 	andeq	r0, r0, r3, lsr #8
   10884:	69050404 	stmdbvs	r5, {r2, sl}
   10888:	0300746e 	movweq	r7, #1134	; 0x46e
   1088c:	042d0704 	strteq	r0, [sp], #-1796	; 0xfffff8fc
   10890:	98020000 	stmdals	r2, {}	; <UNPREDICTABLE>
   10894:	0700002b 	streq	r0, [r0, -fp, lsr #32]
   10898:	00002513 	andeq	r2, r0, r3, lsl r5
   1089c:	2a090200 	bcs	2510a4 <__ccfg+0x2310fc>
   108a0:	14070000 	strne	r0, [r7], #-0
   108a4:	00000037 	andeq	r0, r0, r7, lsr r0
   108a8:	002dff02 	eoreq	pc, sp, r2, lsl #30
   108ac:	501a0700 	andspl	r0, sl, r0, lsl #14
   108b0:	02000000 	andeq	r0, r0, #0
   108b4:	00002b8e 	andeq	r2, r0, lr, lsl #23
   108b8:	00621f07 	rsbeq	r1, r2, r7, lsl #30
   108bc:	a1020000 	mrsge	r0, (UNDEF: 2)
   108c0:	07000029 	streq	r0, [r0, -r9, lsr #32]
   108c4:	00007420 	andeq	r7, r0, r0, lsr #8
   108c8:	29cb0200 	stmibcs	fp, {r9}^
   108cc:	33080000 	movwcc	r0, #32768	; 0x8000
   108d0:	000000e4 	andeq	r0, r0, r4, ror #1
   108d4:	00ea0405 	rsceq	r0, sl, r5, lsl #8
   108d8:	05060000 	streq	r0, [r6, #-0]
   108dc:	0000f104 	andeq	pc, r0, r4, lsl #2
   108e0:	00fc0700 	rscseq	r0, ip, r0, lsl #14
   108e4:	ad080000 	stcge	0, cr0, [r8, #-0]
   108e8:	00000000 	andeq	r0, r0, r0
   108ec:	00310102 	eorseq	r0, r1, r2, lsl #2
   108f0:	07420900 	strbeq	r0, [r2, -r0, lsl #18]
   108f4:	05000001 	streq	r0, [r0, #-1]
   108f8:	00010d04 	andeq	r0, r1, r4, lsl #26
   108fc:	00ce0900 	sbceq	r0, lr, r0, lsl #18
   10900:	01260000 			; <UNDEFINED> instruction: 0x01260000
   10904:	26080000 	strcs	r0, [r8], -r0
   10908:	08000001 	stmdaeq	r0, {r0}
   1090c:	000000ce 	andeq	r0, r0, lr, asr #1
   10910:	0000ce08 	andeq	ip, r0, r8, lsl #28
   10914:	04050000 	streq	r0, [r5], #-0
   10918:	000000ad 	andeq	r0, r0, sp, lsr #1
   1091c:	00326902 	eorseq	r6, r2, r2, lsl #18
   10920:	37460900 	strbcc	r0, [r6, -r0, lsl #18]
   10924:	05000001 	streq	r0, [r0, #-1]
   10928:	00013d04 	andeq	r3, r1, r4, lsl #26
   1092c:	00ce0a00 	sbceq	r0, lr, r0, lsl #20
   10930:	b2020000 	andlt	r0, r2, #0
   10934:	09000032 	stmdbeq	r0, {r1, r4, r5}
   10938:	00013748 	andeq	r3, r1, r8, asr #14
   1093c:	2f990200 	svccs	0x00990200
   10940:	4a090000 	bmi	250948 <__ccfg+0x2309a0>
   10944:	00000158 	andeq	r0, r0, r8, asr r1
   10948:	015e0405 	cmpeq	lr, r5, lsl #8
   1094c:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
   10950:	6d000000 	stcvs	0, cr0, [r0, #-0]
   10954:	08000001 	stmdaeq	r0, {r0}
   10958:	000000ce 	andeq	r0, r0, lr, asr #1
   1095c:	2ea80200 	cdpcs	2, 10, cr0, cr8, cr0, {0}
   10960:	4c090000 	stcmi	0, cr0, [r9], {-0}
   10964:	00000137 	andeq	r0, r0, r7, lsr r1
   10968:	002e0802 	eoreq	r0, lr, r2, lsl #16
   1096c:	074e0900 	strbeq	r0, [lr, -r0, lsl #18]
   10970:	02000001 	andeq	r0, r0, #1
   10974:	00002e98 	muleq	r0, r8, lr
   10978:	00e45109 	rsceq	r5, r4, r9, lsl #2
   1097c:	22020000 	andcs	r0, r2, #0
   10980:	0900002d 	stmdbeq	r0, {r0, r2, r3, r5}
   10984:	00019953 	andeq	r9, r1, r3, asr r9
   10988:	9f040500 	svcls	0x00040500
   1098c:	09000001 	stmdbeq	r0, {r0}
   10990:	000000ce 	andeq	r0, r0, lr, asr #1
   10994:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
   10998:	0001b808 	andeq	fp, r1, r8, lsl #16
   1099c:	00b80800 	adcseq	r0, r8, r0, lsl #16
   109a0:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
   109a4:	00000000 	andeq	r0, r0, r0
   109a8:	00b80405 	adcseq	r0, r8, r5, lsl #8
   109ac:	17020000 	strne	r0, [r2, -r0]
   109b0:	09000031 	stmdbeq	r0, {r0, r4, r5}
   109b4:	0001c957 	andeq	ip, r1, r7, asr r9
   109b8:	cf040500 	svcgt	0x00040500
   109bc:	09000001 	stmdbeq	r0, {r0}
   109c0:	000000ce 	andeq	r0, r0, lr, asr #1
   109c4:	000001e3 	andeq	r0, r0, r3, ror #3
   109c8:	0001e308 	andeq	lr, r1, r8, lsl #6
   109cc:	00ce0800 	sbceq	r0, lr, r0, lsl #16
   109d0:	05000000 	streq	r0, [r0, #-0]
   109d4:	0000ce04 	andeq	ip, r0, r4, lsl #28
   109d8:	2f0b0200 	svccs	0x000b0200
   109dc:	5a090000 	bpl	2509e4 <__ccfg+0x230a3c>
   109e0:	000001c9 	andeq	r0, r0, r9, asr #3
   109e4:	002fc502 	eoreq	ip, pc, r2, lsl #10
   109e8:	c95d0900 	ldmdbgt	sp, {r8, fp}^
   109ec:	02000001 	andeq	r0, r0, #1
   109f0:	00002d34 	andeq	r2, r0, r4, lsr sp
   109f4:	01c96009 	biceq	r6, r9, r9
   109f8:	25020000 	strcs	r0, [r2, #-0]
   109fc:	09000031 	stmdbeq	r0, {r0, r4, r5}
   10a00:	0000e463 	andeq	lr, r0, r3, ror #8
   10a04:	2d720200 	lfmcs	f0, 2, [r2, #-0]
   10a08:	65090000 	strvs	r0, [r9, #-0]
   10a0c:	00000220 	andeq	r0, r0, r0, lsr #4
   10a10:	02260405 	eoreq	r0, r6, #83886080	; 0x5000000
   10a14:	31070000 	mrscc	r0, (UNDEF: 7)
   10a18:	08000002 	stmdaeq	r0, {r1}
   10a1c:	000000ce 	andeq	r0, r0, lr, asr #1
   10a20:	32c30200 	sbccc	r0, r3, #0, 4
   10a24:	67090000 	strvs	r0, [r9, -r0]
   10a28:	00000220 	andeq	r0, r0, r0, lsr #4
   10a2c:	00300702 	eorseq	r0, r0, r2, lsl #14
   10a30:	eb690900 	bl	1a52e38 <__ccfg+0x1a32e90>
   10a34:	02000000 	andeq	r0, r0, #0
   10a38:	000032a2 	andeq	r3, r0, r2, lsr #5
   10a3c:	00eb6b09 	rsceq	r6, fp, r9, lsl #22
   10a40:	d4020000 	strle	r0, [r2], #-0
   10a44:	0900002f 	stmdbeq	r0, {r0, r1, r2, r3, r5}
   10a48:	0000eb6d 	andeq	lr, r0, sp, ror #22
   10a4c:	2fe60200 	svccs	0x00e60200
   10a50:	6f090000 	svcvs	0x00090000
   10a54:	000000eb 	andeq	r0, r0, fp, ror #1
   10a58:	7a094c0b 	bvc	263a8c <__ccfg+0x243ae4>
   10a5c:	00000355 	andeq	r0, r0, r5, asr r3
   10a60:	002faa0c 	eoreq	sl, pc, ip, lsl #20
   10a64:	fc7c0900 	ldc2l	9, cr0, [ip], #-0	; <UNPREDICTABLE>
   10a68:	00000000 	andeq	r0, r0, r0
   10a6c:	0032950c 	eorseq	r9, r2, ip, lsl #10
   10a70:	2c7d0900 			; <UNDEFINED> instruction: 0x2c7d0900
   10a74:	04000001 	streq	r0, [r0], #-1
   10a78:	002fbb0c 	eoreq	fp, pc, ip, lsl #22
   10a7c:	427e0900 	rsbsmi	r0, lr, #0, 18
   10a80:	08000001 	stmdaeq	r0, {r0}
   10a84:	0031b40c 	eorseq	fp, r1, ip, lsl #8
   10a88:	4d7f0900 			; <UNDEFINED> instruction: 0x4d7f0900
   10a8c:	0c000001 	stceq	0, cr0, [r0], {1}
   10a90:	0031c60c 	eorseq	ip, r1, ip, lsl #12
   10a94:	6d800900 	vstrvs.16	s0, [r0]	; <UNPREDICTABLE>
   10a98:	10000001 	andne	r0, r0, r1
   10a9c:	002eb90c 	eoreq	fp, lr, ip, lsl #18
   10aa0:	78810900 	stmvc	r1, {r8, fp}
   10aa4:	14000001 	strne	r0, [r0], #-1
   10aa8:	002e750c 	eoreq	r7, lr, ip, lsl #10
   10aac:	83820900 	orrhi	r0, r2, #0, 18
   10ab0:	18000001 	stmdane	r0, {r0}
   10ab4:	002fb00c 	eoreq	fp, pc, ip
   10ab8:	8e830900 	vdivhi.f16	s0, s6, s0	; <UNPREDICTABLE>
   10abc:	1c000001 	stcne	0, cr0, [r0], {1}
   10ac0:	00313f0c 	eorseq	r3, r1, ip, lsl #30
   10ac4:	be840900 	vdivlt.f16	s0, s8, s0	; <UNPREDICTABLE>
   10ac8:	20000001 	andcs	r0, r0, r1
   10acc:	002f370c 	eoreq	r3, pc, ip, lsl #14
   10ad0:	e9850900 	stmib	r5, {r8, fp}
   10ad4:	24000001 	strcs	r0, [r0], #-1
   10ad8:	002f8f0c 	eoreq	r8, pc, ip, lsl #30
   10adc:	f4860900 	vst2.32	{d0[0],d1[0]}, [r6], r0
   10ae0:	28000001 	stmdacs	r0, {r0}
   10ae4:	0031f40c 	eorseq	pc, r1, ip, lsl #8
   10ae8:	ff870900 			; <UNDEFINED> instruction: 0xff870900
   10aec:	2c000001 	stccs	0, cr0, [r0], {1}
   10af0:	002ed40c 	eoreq	sp, lr, ip, lsl #8
   10af4:	15880900 	strne	r0, [r8, #2304]	; 0x900
   10af8:	30000002 	andcc	r0, r0, r2
   10afc:	0031e20c 	eorseq	lr, r1, ip, lsl #4
   10b00:	31890900 	orrcc	r0, r9, r0, lsl #18
   10b04:	34000002 	strcc	r0, [r0], #-2
   10b08:	002db30c 	eoreq	fp, sp, ip, lsl #6
   10b0c:	0a8a0900 	beq	fe292f14 <_estack+0xde28df14>
   10b10:	38000002 	stmdacc	r0, {r1}
   10b14:	002ff60c 	eoreq	pc, pc, ip, lsl #12
   10b18:	3c8b0900 			; <UNDEFINED> instruction: 0x3c8b0900
   10b1c:	3c000002 	stccc	0, cr0, [r0], {2}
   10b20:	0031950c 	eorseq	r9, r1, ip, lsl #10
   10b24:	478c0900 	strmi	r0, [ip, r0, lsl #18]
   10b28:	40000002 	andmi	r0, r0, r2
   10b2c:	002f190c 	eoreq	r1, pc, ip, lsl #18
   10b30:	528d0900 	addpl	r0, sp, #0, 18
   10b34:	44000002 	strmi	r0, [r0], #-2
   10b38:	002d630c 	eoreq	r6, sp, ip, lsl #6
   10b3c:	5d8e0900 	vstrpl.16	s0, [lr]	; <UNPREDICTABLE>
   10b40:	48000002 	stmdami	r0, {r1}
   10b44:	30c50200 	sbccc	r0, r5, r0, lsl #4
   10b48:	8f090000 	svchi	0x00090000
   10b4c:	00000268 	andeq	r0, r0, r8, ror #4
   10b50:	4e01080b 	cdpmi	8, 0, cr0, cr1, cr11, {0}
   10b54:	00000399 	muleq	r0, r9, r3
   10b58:	003d210c 	eorseq	r2, sp, ip, lsl #2
   10b5c:	ce4f0100 	dvfgte	f0, f7, f0
   10b60:	00000000 	andeq	r0, r0, r0
   10b64:	003d520c 	eorseq	r5, sp, ip, lsl #4
   10b68:	b8500100 	ldmdalt	r0, {r8}^
   10b6c:	04000000 	streq	r0, [r0], #-0
   10b70:	003c8c0c 	eorseq	r8, ip, ip, lsl #24
   10b74:	ad510100 	ldfgee	f0, [r1, #-0]
   10b78:	06000000 	streq	r0, [r0], -r0
   10b7c:	003c3f0c 	eorseq	r3, ip, ip, lsl #30
   10b80:	a2520100 	subsge	r0, r2, #0, 2
   10b84:	07000000 	streq	r0, [r0, -r0]
   10b88:	3d7e0200 	lfmcc	f0, 2, [lr, #-0]
   10b8c:	53010000 	movwpl	r0, #4096	; 0x1000
   10b90:	00000360 	andeq	r0, r0, r0, ror #6
   10b94:	000fab0d 	andeq	sl, pc, sp, lsl #22
   10b98:	01dc0200 	bicseq	r0, ip, r0, lsl #4
   10b9c:	0003be03 	andeq	fp, r3, r3, lsl #28
   10ba0:	0f650e00 	svceq	0x00650e00
   10ba4:	dc020000 	stcle	0, cr0, [r2], {-0}
   10ba8:	0000ce01 	andeq	ip, r0, r1, lsl #28
   10bac:	c00f0000 	andgt	r0, pc, r0
   10bb0:	0200000f 	andeq	r0, r0, #15
   10bb4:	00ce022c 	sbceq	r0, lr, ip, lsr #4
   10bb8:	10030000 	andne	r0, r3, r0
   10bbc:	000010c4 	andeq	r1, r0, r4, asr #1
   10bc0:	03022a04 	movweq	r2, #10756	; 0x2a04
   10bc4:	00397411 	eorseq	r7, r9, r1, lsl r4
   10bc8:	c3e90500 	mvngt	r0, #0, 10
   10bcc:	03000000 	movweq	r0, #0
   10bd0:	000003fb 	strdeq	r0, [r0], -fp
   10bd4:	0036c412 	eorseq	ip, r6, r2, lsl r4
   10bd8:	cee90500 	cdpgt	5, 14, cr0, cr9, cr0, {0}
   10bdc:	13000000 	movwne	r0, #0
   10be0:	000039cd 	andeq	r3, r0, sp, asr #19
   10be4:	00c3ef05 	sbceq	lr, r3, r5, lsl #30
   10be8:	0d000000 	stceq	0, cr0, [r0, #-0]
   10bec:	00003c54 	andeq	r3, r0, r4, asr ip
   10bf0:	03025c04 	movweq	r5, #11268	; 0x2c04
   10bf4:	00000415 	andeq	r0, r0, r5, lsl r4
   10bf8:	003c2e0e 	eorseq	r2, ip, lr, lsl #28
   10bfc:	025c0400 	subseq	r0, ip, #0, 8
   10c00:	000000ce 	andeq	r0, r0, lr, asr #1
   10c04:	30ef1000 	rsccc	r1, pc, r0
   10c08:	40030000 	andmi	r0, r3, r0
   10c0c:	d80f0301 	stmdale	pc, {r0, r8, r9}	; <UNPREDICTABLE>
   10c10:	0400003c 	streq	r0, [r0], #-60	; 0xffffffc4
   10c14:	042b023e 	strteq	r0, [fp], #-574	; 0xfffffdc2
   10c18:	03030000 	movweq	r0, #12288	; 0x3000
   10c1c:	0ca20201 	sfmeq	f0, 4, [r2], #4
   10c20:	28140000 	ldmdacs	r4, {}	; <UNPREDICTABLE>
   10c24:	0a00003d 	beq	10d20 <__exidx_end+0xb2fc>
   10c28:	0000009e 	muleq	r0, lr, r0
   10c2c:	0000f400 	andeq	pc, r0, r0, lsl #8
   10c30:	cd9c0100 	ldfgts	f0, [ip]
   10c34:	15000005 	strne	r0, [r0, #-5]
   10c38:	00003c84 	andeq	r3, r0, r4, lsl #25
   10c3c:	00ce7b01 	sbceq	r7, lr, r1, lsl #22
   10c40:	48d70000 	ldmmi	r7, {}^	; <UNPREDICTABLE>
   10c44:	46160000 	ldrmi	r0, [r6], -r0
   10c48:	0100003c 	tsteq	r0, ip, lsr r0
   10c4c:	0000ce7c 	andeq	ip, r0, ip, ror lr
   10c50:	1707ff00 	strne	pc, [r7, -r0, lsl #30]
   10c54:	000003a4 	andeq	r0, r0, r4, lsr #7
   10c58:	00000000 	andeq	r0, r0, r0
   10c5c:	00001320 	andeq	r1, r0, r0, lsr #6
   10c60:	047d8101 	ldrbteq	r8, [sp], #-257	; 0xfffffeff
   10c64:	b1180000 	tstlt	r8, r0
   10c68:	01000003 	tsteq	r0, r3
   10c6c:	03be1900 			; <UNDEFINED> instruction: 0x03be1900
   10c70:	00000000 	andeq	r0, r0, r0
   10c74:	00040000 	andeq	r0, r4, r0
   10c78:	82010000 	andhi	r0, r1, #0
   10c7c:	0004151a 	andeq	r1, r4, sl, lsl r5
   10c80:	00000000 	andeq	r0, r0, r0
   10c84:	00000800 	andeq	r0, r0, r0, lsl #16
   10c88:	a9a10100 	stmibge	r1!, {r8}
   10c8c:	1b000004 	blne	10ca4 <__exidx_end+0xb280>
   10c90:	00000000 	andeq	r0, r0, r0
   10c94:	000008de 	ldrdeq	r0, [r0], -lr
   10c98:	03cb1900 	biceq	r1, fp, #0, 18
   10c9c:	00000000 	andeq	r0, r0, r0
   10ca0:	00060000 	andeq	r0, r6, r0
   10ca4:	b1010000 	mrslt	r0, (UNDEF: 1)
   10ca8:	00041e19 	andeq	r1, r4, r9, lsl lr
   10cac:	00000000 	andeq	r0, r0, r0
   10cb0:	00000400 	andeq	r0, r0, r0, lsl #8
   10cb4:	1ab20100 	bne	fec910bc <_estack+0xdec8c0bc>
   10cb8:	000003fb 	strdeq	r0, [r0], -fp
   10cbc:	00000000 	andeq	r0, r0, r0
   10cc0:	0000000a 	andeq	r0, r0, sl
   10cc4:	04e1b801 	strbteq	fp, [r1], #2049	; 0x801
   10cc8:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
   10ccc:	11000004 	tstne	r0, r4
   10cd0:	03cb1900 	biceq	r1, fp, #0, 18
   10cd4:	00000000 	andeq	r0, r0, r0
   10cd8:	00040000 	andeq	r0, r4, r0
   10cdc:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
   10ce0:	00041e19 	andeq	r1, r4, r9, lsl lr
   10ce4:	00000000 	andeq	r0, r0, r0
   10ce8:	00000200 	andeq	r0, r0, r0, lsl #4
   10cec:	19ba0100 	ldmibne	sl!, {r8}
   10cf0:	000003cb 	andeq	r0, r0, fp, asr #7
   10cf4:	00000000 	andeq	r0, r0, r0
   10cf8:	00000006 	andeq	r0, r0, r6
   10cfc:	1e19cf01 	cdpne	15, 1, cr12, cr9, cr1, {0}
   10d00:	00000004 	andeq	r0, r0, r4
   10d04:	02000000 	andeq	r0, r0, #0
   10d08:	01000000 	mrseq	r0, (UNDEF: 0)
   10d0c:	00001cd0 	ldrdeq	r1, [r0], -r0
   10d10:	052e0000 	streq	r0, [lr, #-0]!
   10d14:	011d0000 	tsteq	sp, r0
   10d18:	ff0a0350 			; <UNDEFINED> instruction: 0xff0a0350
   10d1c:	001c0007 	andseq	r0, ip, r7
   10d20:	3f000000 	svccc	0x00000000
   10d24:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
   10d28:	0a035001 	beq	e4d34 <__ccfg+0xc4d8c>
   10d2c:	1e0007ff 	mcrne	7, 0, r0, cr0, cr15, {7}
   10d30:	00000000 	andeq	r0, r0, r0
   10d34:	000008ef 	andeq	r0, r0, pc, ror #17
   10d38:	00000557 	andeq	r0, r0, r7, asr r5
   10d3c:	0151011d 	cmpeq	r1, sp, lsl r1
   10d40:	50011d31 	andpl	r1, r1, r1, lsr sp
   10d44:	1e003301 	cdpne	3, 0, cr3, cr0, cr1, {0}
   10d48:	00000000 	andeq	r0, r0, r0
   10d4c:	000008ef 	andeq	r0, r0, pc, ror #17
   10d50:	0000056f 	andeq	r0, r0, pc, ror #10
   10d54:	0151011d 	cmpeq	r1, sp, lsl r1
   10d58:	50011d33 	andpl	r1, r1, r3, lsr sp
   10d5c:	1e003401 	cdpne	4, 0, cr3, cr0, cr1, {0}
   10d60:	00000000 	andeq	r0, r0, r0
   10d64:	00000905 	andeq	r0, r0, r5, lsl #18
   10d68:	00000582 	andeq	r0, r0, r2, lsl #11
   10d6c:	0150011d 	cmpeq	r0, sp, lsl r1
   10d70:	001c0031 	andseq	r0, ip, r1, lsr r0
   10d74:	91000000 	mrsls	r0, (UNDEF: 0)
   10d78:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
   10d7c:	37015001 	strcc	r5, [r1, -r1]
   10d80:	00001c00 	andeq	r1, r0, r0, lsl #24
   10d84:	05a00000 	streq	r0, [r0, #0]!
   10d88:	011d0000 	tsteq	sp, r0
   10d8c:	00370150 	eorseq	r0, r7, r0, asr r1
   10d90:	0000001c 	andeq	r0, r0, ip, lsl r0
   10d94:	0005b000 	andeq	fp, r5, r0
   10d98:	50011d00 	andpl	r1, r1, r0, lsl #26
   10d9c:	00007602 	andeq	r7, r0, r2, lsl #12
   10da0:	0000001c 	andeq	r0, r0, ip, lsl r0
   10da4:	0005c000 	andeq	ip, r5, r0
   10da8:	50011d00 	andpl	r1, r1, r0, lsl #26
   10dac:	00007602 	andeq	r7, r0, r2, lsl #12
   10db0:	0000001f 	andeq	r0, r0, pc, lsl r0
   10db4:	50011d00 	andpl	r1, r1, r0, lsl #26
   10db8:	00007602 	andeq	r7, r0, r2, lsl #12
   10dbc:	3bca2000 	blcc	ff298dc4 <_estack+0xdf293dc4>
   10dc0:	010a0000 	mrseq	r0, (UNDEF: 10)
   10dc4:	00447401 	subeq	r7, r4, r1, lsl #8
   10dc8:	00022000 	andeq	r2, r2, r0
   10dcc:	c89c0100 	ldmgt	ip, {r8}
   10dd0:	21000007 	tstcs	r0, r7
   10dd4:	00003cca 	andeq	r3, r0, sl, asr #25
   10dd8:	00ceda01 	sbceq	sp, lr, r1, lsl #20
   10ddc:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
   10de0:	6e150000 	cdpvs	0, 1, cr0, cr5, cr0, {0}
   10de4:	0100003b 	tsteq	r0, fp, lsr r0
   10de8:	0000c3dc 	ldrdeq	ip, [r0], -ip	; <UNPREDICTABLE>
   10dec:	00492e00 	subeq	r2, r9, r0, lsl #28
   10df0:	3ce41500 	cfstr64cc	mvdx1, [r4]
   10df4:	dd010000 	stcle	0, cr0, [r1, #-0]
   10df8:	000000c3 	andeq	r0, r0, r3, asr #1
   10dfc:	0000494c 	andeq	r4, r0, ip, asr #18
   10e00:	003caa15 	eorseq	sl, ip, r5, lsl sl
   10e04:	c3de0100 	bicsgt	r0, lr, #0, 2
   10e08:	a6000000 	strge	r0, [r0], -r0
   10e0c:	15000049 	strne	r0, [r0, #-73]	; 0xffffffb7
   10e10:	00003d70 	andeq	r3, r0, r0, ror sp
   10e14:	00c3df01 	sbceq	sp, r3, r1, lsl #30
   10e18:	49c40000 	stmibmi	r4, {}^	; <UNPREDICTABLE>
   10e1c:	60150000 	andsvs	r0, r5, r0
   10e20:	0100003b 	tsteq	r0, fp, lsr r0
   10e24:	0000c3e0 	andeq	ip, r0, r0, ror #7
   10e28:	0049e200 	subeq	lr, r9, r0, lsl #4
   10e2c:	3b762200 	blcc	1d99634 <__ccfg+0x1d7968c>
   10e30:	e1010000 	mrs	r0, (UNDEF: 1)
   10e34:	000000c3 	andeq	r0, r0, r3, asr #1
   10e38:	18155301 	ldmdane	r5, {r0, r8, r9, ip, lr}
   10e3c:	01000036 	tsteq	r0, r6, lsr r0
   10e40:	0000cee2 	andeq	ip, r0, r2, ror #29
   10e44:	0049f500 	subeq	pc, r9, r0, lsl #10
   10e48:	3d081500 	cfstr32cc	mvfx1, [r8, #-0]
   10e4c:	e3010000 	movw	r0, #4096	; 0x1000
   10e50:	000000ce 	andeq	r0, r0, lr, asr #1
   10e54:	00004a08 	andeq	r4, r0, r8, lsl #20
   10e58:	003b8a15 	eorseq	r8, fp, r5, lsl sl
   10e5c:	cee40100 	cdpgt	1, 14, cr0, cr4, cr0, {0}
   10e60:	27000000 	strcs	r0, [r0, -r0]
   10e64:	2300004a 	movwcs	r0, #74	; 0x4a
   10e68:	01006964 	tsteq	r0, r4, ror #18
   10e6c:	0000cee5 	andeq	ip, r0, r5, ror #29
   10e70:	004a3a00 	subeq	r3, sl, r0, lsl #20
   10e74:	69642300 	stmdbvs	r4!, {r8, r9, sp}^
   10e78:	e6010069 	str	r0, [r1], -r9, rrx
   10e7c:	000000ce 	andeq	r0, r0, lr, asr #1
   10e80:	00004a70 	andeq	r4, r0, r0, ror sl
   10e84:	00697423 	rsbeq	r7, r9, r3, lsr #8
   10e88:	00cee701 	sbceq	lr, lr, r1, lsl #14
   10e8c:	4aa60000 	bmi	fe990e94 <_estack+0xde98be94>
   10e90:	63230000 			; <UNDEFINED> instruction: 0x63230000
   10e94:	e8010064 	stmda	r1, {r2, r5, r6}
   10e98:	000000ce 	andeq	r0, r0, lr, asr #1
   10e9c:	00004b16 	andeq	r4, r0, r6, lsl fp
   10ea0:	006c6323 	rsbeq	r6, ip, r3, lsr #6
   10ea4:	00cee901 	sbceq	lr, lr, r1, lsl #18
   10ea8:	4b290000 	blmi	a50eb0 <__ccfg+0xa30f08>
   10eac:	9b150000 	blls	550eb4 <__ccfg+0x530f0c>
   10eb0:	0100003b 	tsteq	r0, fp, lsr r0
   10eb4:	0000ceea 	andeq	ip, r0, sl, ror #29
   10eb8:	004b3c00 	subeq	r3, fp, r0, lsl #24
   10ebc:	006b2400 	rsbeq	r2, fp, r0, lsl #8
   10ec0:	00ceeb01 	sbceq	lr, lr, r1, lsl #22
   10ec4:	7c130000 	ldcvc	0, cr0, [r3], {-0}
   10ec8:	0100003c 	tsteq	r0, ip, lsr r0
   10ecc:	0000ceec 	andeq	ip, r0, ip, ror #29
   10ed0:	3c6a1500 	cfstr64cc	mvdx1, [sl], #-0
   10ed4:	ed010000 	stc	0, cr0, [r1, #-0]
   10ed8:	000000ce 	andeq	r0, r0, lr, asr #1
   10edc:	00004b5a 	andeq	r4, r0, sl, asr fp
   10ee0:	003c3a15 	eorseq	r3, ip, r5, lsl sl
   10ee4:	ceee0100 	cdpgt	1, 14, cr0, cr14, cr0, {0}
   10ee8:	83000000 	movwhi	r0, #0
   10eec:	1500004b 	strne	r0, [r0, #-75]	; 0xffffffb5
   10ef0:	00003c65 	andeq	r3, r0, r5, ror #24
   10ef4:	00ceef01 	sbceq	lr, lr, r1, lsl #30
   10ef8:	4ba20000 	blmi	fe890f00 <_estack+0xde88bf00>
   10efc:	45150000 	ldrmi	r0, [r5, #-0]
   10f00:	0100003d 	tsteq	r0, sp, lsr r0
   10f04:	0007c8f0 	strdeq	ip, [r7], -r0
   10f08:	004be600 	subeq	lr, fp, r0, lsl #12
   10f0c:	44a22500 	strtmi	r2, [r2], #1280	; 0x500
   10f10:	00120000 	andseq	r0, r2, r0
   10f14:	073b0000 	ldreq	r0, [fp, -r0]!
   10f18:	f0260000 			; <UNDEFINED> instruction: 0xf0260000
   10f1c:	0100003c 	tsteq	r0, ip, lsr r0
   10f20:	00c3010a 	sbceq	r0, r3, sl, lsl #2
   10f24:	4bfe0000 	blmi	fff90f2c <_estack+0xdff8bf2c>
   10f28:	27000000 	strcs	r0, [r0, -r0]
   10f2c:	000003d4 	ldrdeq	r0, [r0], -r4
   10f30:	000044c8 	andeq	r4, r0, r8, asr #9
   10f34:	00000006 	andeq	r0, r0, r6
   10f38:	68011101 	stmdavs	r1, {r0, r8, ip}
   10f3c:	28000007 	stmdacs	r0, {r0, r1, r2}
   10f40:	000003e4 	andeq	r0, r0, r4, ror #7
   10f44:	0044c829 	subeq	ip, r4, r9, lsr #16
   10f48:	00000600 	andeq	r0, r0, r0, lsl #12
   10f4c:	03ef2a00 	mvneq	r2, #0, 20
   10f50:	4c110000 	ldcmi	0, cr0, [r1], {-0}
   10f54:	00000000 	andeq	r0, r0, r0
   10f58:	0003d427 	andeq	sp, r3, r7, lsr #8
   10f5c:	0044e000 	subeq	lr, r4, r0
   10f60:	00000600 	andeq	r0, r0, r0, lsl #12
   10f64:	011b0100 	tsteq	fp, r0, lsl #2
   10f68:	00000795 	muleq	r0, r5, r7
   10f6c:	0003e428 	andeq	lr, r3, r8, lsr #8
   10f70:	44e02900 	strbtmi	r2, [r0], #2304	; 0x900
   10f74:	00060000 	andeq	r0, r6, r0
   10f78:	ef2a0000 	svc	0x002a0000
   10f7c:	24000003 	strcs	r0, [r0], #-3
   10f80:	0000004c 	andeq	r0, r0, ip, asr #32
   10f84:	03d42b00 	bicseq	r2, r4, #0, 22
   10f88:	44ea0000 	strbtmi	r0, [sl], #0
   10f8c:	13380000 	teqne	r8, #0
   10f90:	1f010000 	svcne	0x00010000
   10f94:	0007be01 	andeq	fp, r7, r1, lsl #28
   10f98:	03e42800 	mvneq	r2, #0, 16
   10f9c:	382c0000 	stmdacc	ip!, {}	; <UNPREDICTABLE>
   10fa0:	2a000013 	bcs	10ff4 <__exidx_end+0xb5d0>
   10fa4:	000003ef 	andeq	r0, r0, pc, ror #7
   10fa8:	00004c37 	andeq	r4, r0, r7, lsr ip
   10fac:	941b0000 	ldrls	r0, [fp], #-0
   10fb0:	1b000044 	blne	110c8 <__exidx_end+0xb6a4>
   10fb4:	00000009 	andeq	r0, r0, r9
   10fb8:	07ce0405 	strbeq	r0, [lr, r5, lsl #8]
   10fbc:	ce2d0000 	cdpgt	0, 2, cr0, cr13, cr0, {0}
   10fc0:	20000000 	andcs	r0, r0, r0
   10fc4:	00003ba0 	andeq	r3, r0, r0, lsr #23
   10fc8:	9401170a 	strls	r1, [r1], #-1802	; 0xfffff8f6
   10fcc:	60000046 	andvs	r0, r0, r6, asr #32
   10fd0:	01000000 	mrseq	r0, (UNDEF: 0)
   10fd4:	0008339c 	muleq	r8, ip, r3
   10fd8:	3b6e2600 	blcc	1b9a7e0 <__ccfg+0x1b7a838>
   10fdc:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
   10fe0:	0000c301 	andeq	ip, r0, r1, lsl #6
   10fe4:	004c4a00 	subeq	r4, ip, r0, lsl #20
   10fe8:	3c942600 	ldccc	6, cr2, [r4], {0}
   10fec:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
   10ff0:	0000ce01 	andeq	ip, r0, r1, lsl #28
   10ff4:	004c7500 	subeq	r7, ip, r0, lsl #10
   10ff8:	2f2d2600 	svccs	0x002d2600
   10ffc:	ba010000 	blt	51004 <__ccfg+0x3105c>
   11000:	0000ce01 	andeq	ip, r0, r1, lsl #28
   11004:	004c8800 	subeq	r8, ip, r0, lsl #16
   11008:	3c6a2600 	stclcc	6, cr2, [sl], #-0
   1100c:	bb010000 	bllt	51014 <__ccfg+0x3106c>
   11010:	0000ce01 	andeq	ip, r0, r1, lsl #28
   11014:	004caf00 	subeq	sl, ip, r0, lsl #30
   11018:	46a21b00 	strtmi	r1, [r2], r0, lsl #22
   1101c:	091b0000 	ldmdbeq	fp, {}	; <UNPREDICTABLE>
   11020:	20000000 	andcs	r0, r0, r0
   11024:	00003d91 	muleq	r0, r1, sp
   11028:	0001290a 	andeq	r2, r1, sl, lsl #18
   1102c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
   11030:	01000000 	mrseq	r0, (UNDEF: 0)
   11034:	00088a9c 	muleq	r8, ip, sl
   11038:	3cbd2600 	ldccc	6, cr2, [sp]
   1103c:	e7010000 	str	r0, [r1, -r0]
   11040:	0000ce01 	andeq	ip, r0, r1, lsl #28
   11044:	004cd800 	subeq	sp, ip, r0, lsl #16
   11048:	3d632600 	stclcc	6, cr2, [r3, #-0]
   1104c:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
   11050:	0000ce01 	andeq	ip, r0, r1, lsl #28
   11054:	004ceb00 	subeq	lr, ip, r0, lsl #22
   11058:	36182600 	ldrcc	r2, [r8], -r0, lsl #12
   1105c:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
   11060:	0000ce01 	andeq	ip, r0, r1, lsl #28
   11064:	004cfe00 	subeq	pc, ip, r0, lsl #28
   11068:	3d112600 	ldccc	6, cr2, [r1, #-0]
   1106c:	ea010000 	b	51074 <__ccfg+0x310cc>
   11070:	0000ce01 	andeq	ip, r0, r1, lsl #28
   11074:	004d1100 	subeq	r1, sp, r0, lsl #2
   11078:	122e0000 	eorne	r0, lr, #0
   1107c:	0a00003c 	beq	11174 <__exidx_end+0xb750>
   11080:	00ce0142 	sbceq	r0, lr, r2, asr #2
   11084:	46f40000 	ldrbtmi	r0, [r4], r0
   11088:	00180000 	andseq	r0, r8, r0
   1108c:	9c010000 	stcls	0, cr0, [r1], {-0}
   11090:	003dbe22 	eorseq	fp, sp, r2, lsr #28
   11094:	99550100 	ldmdbls	r5, {r8}^
   11098:	05000003 	streq	r0, [r0, #-3]
   1109c:	00065803 	andeq	r5, r6, r3, lsl #16
   110a0:	00ce2f20 	sbceq	r2, lr, r0, lsr #30
   110a4:	08c10000 	stmiaeq	r1, {}^	; <UNPREDICTABLE>
   110a8:	c1300000 	teqgt	r0, r0
   110ac:	0c000008 	stceq	0, cr0, [r0], {8}
   110b0:	07040300 	streq	r0, [r4, -r0, lsl #6]
   110b4:	00002ca0 	andeq	r2, r0, r0, lsr #25
   110b8:	003cf822 	eorseq	pc, ip, r2, lsr #16
   110bc:	d9610100 	stmdble	r1!, {r8}^
   110c0:	05000008 	streq	r0, [r0, #-8]
   110c4:	00000003 	andeq	r0, r0, r3
   110c8:	08b12d00 	ldmeq	r1!, {r8, sl, fp, sp}
   110cc:	fa310000 	blx	c510d4 <__ccfg+0xc3112c>
   110d0:	09000029 	stmdbeq	r0, {r0, r3, r5}
   110d4:	0008ef99 	muleq	r8, r9, pc	; <UNPREDICTABLE>
   110d8:	00d90800 	sbcseq	r0, r9, r0, lsl #16
   110dc:	31000000 	mrscc	r0, (UNDEF: 0)
   110e0:	00002d0a 	andeq	r2, r0, sl, lsl #26
   110e4:	0905f903 	stmdbeq	r5, {r0, r1, r8, fp, ip, sp, lr, pc}
   110e8:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
   110ec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   110f0:	000000ce 	andeq	r0, r0, lr, asr #1
   110f4:	2d433200 	sfmcs	f3, 2, [r3, #-0]
   110f8:	10030000 	andne	r0, r3, r0
   110fc:	0000ce01 	andeq	ip, r0, r1, lsl #28
   11100:	00091b00 	andeq	r1, r9, r0, lsl #22
   11104:	00ce0800 	sbceq	r0, lr, r0, lsl #16
   11108:	33000000 	movwcc	r0, #0
   1110c:	00002b5d 	andeq	r2, r0, sp, asr fp
   11110:	00c3aa0b 	sbceq	sl, r3, fp, lsl #20
   11114:	cc000000 	stcgt	0, cr0, [r0], {-0}
   11118:	04000003 	streq	r0, [r0], #-3
   1111c:	003e7b00 	eorseq	r7, lr, r0, lsl #22
   11120:	2c010400 	cfstrscs	mvf0, [r1], {-0}
   11124:	0100002a 	tsteq	r0, sl, lsr #32
   11128:	000040a5 	andeq	r4, r0, r5, lsr #1
   1112c:	00002af3 	strdeq	r2, [r0], -r3
   11130:	000013b0 			; <UNDEFINED> instruction: 0x000013b0
   11134:	00000000 	andeq	r0, r0, r0
   11138:	0000898b 	andeq	r8, r0, fp, lsl #19
   1113c:	58060102 	stmdapl	r6, {r1, r8}
   11140:	0200000c 	andeq	r0, r0, #12
   11144:	0c560801 	mrrceq	8, 0, r0, r6, cr1
   11148:	02020000 	andeq	r0, r2, #0
   1114c:	000a6605 	andeq	r6, sl, r5, lsl #12
   11150:	07020200 	streq	r0, [r2, -r0, lsl #4]
   11154:	00000d53 	andeq	r0, r0, r3, asr sp
   11158:	f8050402 			; <UNDEFINED> instruction: 0xf8050402
   1115c:	03000007 	movweq	r0, #7
   11160:	0000299f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
   11164:	00534103 	subseq	r4, r3, r3, lsl #2
   11168:	04020000 	streq	r0, [r2], #-0
   1116c:	00042807 	andeq	r2, r4, r7, lsl #16
   11170:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
   11174:	000007f3 	strdeq	r0, [r0], -r3
   11178:	23070802 	movwcs	r0, #30722	; 0x7802
   1117c:	04000004 	streq	r0, [r0], #-4
   11180:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   11184:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
   11188:	00042d07 	andeq	r2, r4, r7, lsl #26
   1118c:	29a10300 	stmibcs	r1!, {r8, r9}
   11190:	20040000 	andcs	r0, r4, r0
   11194:	00000048 	andeq	r0, r0, r8, asr #32
   11198:	63020105 	movwvs	r0, #8453	; 0x2105
   1119c:	000000a2 	andeq	r0, r0, r2, lsr #1
   111a0:	003fdf06 	eorseq	sp, pc, r6, lsl #30
   111a4:	1f060000 	svcne	0x00060000
   111a8:	02000040 	andeq	r0, r0, #64	; 0x40
   111ac:	003f8f06 	eorseq	r8, pc, r6, lsl #30
   111b0:	cf060400 	svcgt	0x00060400
   111b4:	0800003d 	stmdaeq	r0, {r0, r2, r3, r4, r5}
   111b8:	3f7b0300 	svccc	0x007b0300
   111bc:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
   111c0:	00000081 	andeq	r0, r0, r1, lsl #1
   111c4:	a5020105 	strge	r0, [r2, #-261]	; 0xfffffefb
   111c8:	000000da 	ldrdeq	r0, [r0], -sl
   111cc:	00409506 	subeq	r9, r0, r6, lsl #10
   111d0:	e7067f00 	str	r7, [r6, -r0, lsl #30]
   111d4:	0000003d 	andeq	r0, r0, sp, lsr r0
   111d8:	00414606 	subeq	r4, r1, r6, lsl #12
   111dc:	d3060100 	movwle	r0, #24832	; 0x6100
   111e0:	0200003f 	andeq	r0, r0, #63	; 0x3f
   111e4:	00413806 	subeq	r3, r1, r6, lsl #16
   111e8:	cc060300 	stcgt	3, cr0, [r6], {-0}
   111ec:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
   111f0:	41520300 	cmpmi	r2, r0, lsl #6
   111f4:	ac020000 	stcge	0, cr0, [r2], {-0}
   111f8:	000000ad 	andeq	r0, r0, sp, lsr #1
   111fc:	3d020107 	stfccs	f0, [r2, #-28]	; 0xffffffe4
   11200:	00012501 	andeq	r2, r1, r1, lsl #10
   11204:	3fa90600 	svccc	0x00a90600
   11208:	067f0000 	ldrbteq	r0, [pc], -r0
   1120c:	00003e97 	muleq	r0, r7, lr
   11210:	3ef30600 	cdpcc	6, 15, cr0, cr3, cr0, {0}
   11214:	06010000 	streq	r0, [r1], -r0
   11218:	00003f2f 	andeq	r3, r0, pc, lsr #30
   1121c:	407a0602 	rsbsmi	r0, sl, r2, lsl #12
   11220:	06030000 	streq	r0, [r3], -r0
   11224:	00003df3 	strdeq	r3, [r0], -r3	; <UNPREDICTABLE>
   11228:	3ebb0604 	cdpcc	6, 11, cr0, cr11, cr4, {0}
   1122c:	06050000 	streq	r0, [r5], -r0
   11230:	00004054 	andeq	r4, r0, r4, asr r0
   11234:	40670606 	rsbmi	r0, r7, r6, lsl #12
   11238:	00070000 	andeq	r0, r7, r0
   1123c:	003e7f08 	eorseq	r7, lr, r8, lsl #30
   11240:	01470200 	mrseq	r0, (UNDEF: 103)
   11244:	000000e5 	andeq	r0, r0, r5, ror #1
   11248:	59020107 	stmdbpl	r2, {r0, r1, r2, r8}
   1124c:	00015f01 	andeq	r5, r1, r1, lsl #30
   11250:	3f200600 	svccc	0x00200600
   11254:	067f0000 	ldrbteq	r0, [pc], -r0
   11258:	00003f49 	andeq	r3, r0, r9, asr #30
   1125c:	3fc50600 	svccc	0x00c50600
   11260:	06010000 	streq	r0, [r1], -r0
   11264:	00003e0c 	andeq	r3, r0, ip, lsl #28
   11268:	402f0602 	eormi	r0, pc, r2, lsl #12
   1126c:	06030000 	streq	r0, [r3], -r0
   11270:	00003ee2 	andeq	r3, r0, r2, ror #29
   11274:	a8080004 	stmdage	r8, {r2}
   11278:	0200003e 	andeq	r0, r0, #62	; 0x3e
   1127c:	01310160 	teqeq	r1, r0, ror #2
   11280:	01070000 	mrseq	r0, (UNDEF: 7)
   11284:	9901b802 	stmdbls	r1, {r1, fp, ip, sp, pc}
   11288:	06000001 	streq	r0, [r0], -r1
   1128c:	00003f5f 	andeq	r3, r0, pc, asr pc
   11290:	408b067f 	addmi	r0, fp, pc, ror r6
   11294:	060a0000 	streq	r0, [sl], -r0
   11298:	00003ff0 	strdeq	r3, [r0], -r0
   1129c:	40150614 	andsmi	r0, r5, r4, lsl r6
   112a0:	06150000 	ldreq	r0, [r5], -r0
   112a4:	00003fbb 			; <UNDEFINED> instruction: 0x00003fbb
   112a8:	40410616 	submi	r0, r1, r6, lsl r6
   112ac:	00170000 	andseq	r0, r7, r0
   112b0:	003e8a08 	eorseq	r8, lr, r8, lsl #20
   112b4:	01bf0200 			; <UNDEFINED> instruction: 0x01bf0200
   112b8:	0000016b 	andeq	r0, r0, fp, ror #2
   112bc:	0040d109 	subeq	sp, r0, r9, lsl #2
   112c0:	01070200 	mrseq	r0, (UNDEF: 39)
   112c4:	00000076 	andeq	r0, r0, r6, ror r0
   112c8:	3e1e0a03 	vnmlscc.f32	s0, s28, s6
   112cc:	6a020000 	bvs	912d4 <__ccfg+0x7132c>
   112d0:	00015f01 	andeq	r5, r1, r1, lsl #30
   112d4:	01da0100 	bicseq	r0, sl, r0, lsl #2
   112d8:	570b0000 	strpl	r0, [fp, -r0]
   112dc:	0100003f 	tsteq	r0, pc, lsr r0
   112e0:	00015f68 	andeq	r5, r1, r8, ror #30
   112e4:	3e040b00 	vmlacc.f64	d0, d4, d0
   112e8:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
   112ec:	00000076 	andeq	r0, r0, r6, ror r0
   112f0:	417f0900 	cmnmi	pc, r0, lsl #18
   112f4:	32020000 	andcc	r0, r2, #0
   112f8:	00007601 	andeq	r7, r0, r1, lsl #12
   112fc:	110c0300 	mrsne	r0, LR_mon
   11300:	02000041 	andeq	r0, r0, #65	; 0x41
   11304:	0000a272 	andeq	sl, r0, r2, ror r2
   11308:	00000000 	andeq	r0, r0, r0
   1130c:	00001000 	andeq	r1, r0, r0
   11310:	0d9c0100 	ldfeqs	f0, [ip]
   11314:	00003e3b 	andeq	r3, r0, fp, lsr lr
   11318:	00dab602 	sbcseq	fp, sl, r2, lsl #12
   1131c:	00000000 	andeq	r0, r0, r0
   11320:	00180000 	andseq	r0, r8, r0
   11324:	9c010000 	stcls	0, cr0, [r1], {-0}
   11328:	00000225 	andeq	r0, r0, r5, lsr #4
   1132c:	003e760e 	eorseq	r7, lr, lr, lsl #12
   11330:	da520100 	ble	1491738 <__ccfg+0x1471790>
   11334:	24000000 	strcs	r0, [r0], #-0
   11338:	0000004d 	andeq	r0, r0, sp, asr #32
   1133c:	0001b20f 	andeq	fp, r1, pc, lsl #4
   11340:	00470c00 	subeq	r0, r7, r0, lsl #24
   11344:	00004c00 	andeq	r4, r0, r0, lsl #24
   11348:	6e9c0100 	fmlvse	f0, f4, f0
   1134c:	10000002 	andne	r0, r0, r2
   11350:	000001c3 	andeq	r0, r0, r3, asr #3
   11354:	00004d4c 	andeq	r4, r0, ip, asr #26
   11358:	0001ce10 	andeq	ip, r1, r0, lsl lr
   1135c:	004d6c00 	subeq	r6, sp, r0, lsl #24
   11360:	471c1100 	ldrmi	r1, [ip, -r0, lsl #2]
   11364:	000e0000 	andeq	r0, lr, r0
   11368:	c3120000 	tstgt	r2, #0
   1136c:	12000001 	andne	r0, r0, #1
   11370:	000001ce 	andeq	r0, r0, lr, asr #3
   11374:	0001a513 	andeq	sl, r1, r3, lsl r5
   11378:	00471c00 	subeq	r1, r7, r0, lsl #24
   1137c:	00000400 	andeq	r0, r0, r0, lsl #8
   11380:	00700100 	rsbseq	r0, r0, r0, lsl #2
   11384:	3ffa1400 	svccc	0x00fa1400
   11388:	51020000 	mrspl	r0, (UNDEF: 2)
   1138c:	00012501 	andeq	r2, r1, r1, lsl #10
   11390:	00000000 	andeq	r0, r0, r0
   11394:	00003000 	andeq	r3, r0, r0
   11398:	ca9c0100 	bgt	fe7117a0 <_estack+0xde70c7a0>
   1139c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
   113a0:	0000404b 	andeq	r4, r0, fp, asr #32
   113a4:	01258501 			; <UNDEFINED> instruction: 0x01258501
   113a8:	4da00000 	stcmi	0, cr0, [r0]
   113ac:	c50b0000 	strgt	r0, [fp, #-0]
   113b0:	01000040 	tsteq	r0, r0, asr #32
   113b4:	00007686 	andeq	r7, r0, r6, lsl #13
   113b8:	3f6d0e00 	svccc	0x006d0e00
   113bc:	87010000 	strhi	r0, [r1, -r0]
   113c0:	00000076 	andeq	r0, r0, r6, ror r0
   113c4:	00004dc0 	andeq	r4, r0, r0, asr #27
   113c8:	0001da13 	andeq	sp, r1, r3, lsl sl
   113cc:	00000000 	andeq	r0, r0, r0
   113d0:	00000400 	andeq	r0, r0, r0, lsl #8
   113d4:	15860100 	strne	r0, [r6, #256]	; 0x100
   113d8:	00000000 	andeq	r0, r0, r0
   113dc:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
   113e0:	40ef1600 	rscmi	r1, pc, r0, lsl #12
   113e4:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
   113e8:	00007601 	andeq	r7, r0, r1, lsl #12
   113ec:	02e80300 	rsceq	r0, r8, #0, 6
   113f0:	d9170000 	ldmdble	r7, {}	; <UNPREDICTABLE>
   113f4:	0200003e 	andeq	r0, r0, #62	; 0x3e
   113f8:	0076011b 	rsbseq	r0, r6, fp, lsl r1
   113fc:	14000000 	strne	r0, [r0], #-0
   11400:	00003e59 	andeq	r3, r0, r9, asr lr
   11404:	9901c902 	stmdbls	r1, {r1, r8, fp, lr, pc}
   11408:	58000001 	stmdapl	r0, {r0}
   1140c:	6c000047 	stcvs	0, cr0, [r0], {71}	; 0x47
   11410:	01000000 	mrseq	r0, (UNDEF: 0)
   11414:	0003659c 	muleq	r3, ip, r5
   11418:	3eb50e00 	cdpcc	14, 11, cr0, cr5, cr0, {0}
   1141c:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
   11420:	00000199 	muleq	r0, r9, r1
   11424:	00004dd3 	ldrdeq	r4, [r0], -r3
   11428:	003f400b 	eorseq	r4, pc, fp
   1142c:	76a90100 	strtvc	r0, [r9], r0, lsl #2
   11430:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   11434:	00004106 	andeq	r4, r0, r6, lsl #2
   11438:	0076aa01 	rsbseq	sl, r6, r1, lsl #20
   1143c:	54010000 	strpl	r0, [r1], #-0
   11440:	0001a519 	andeq	sl, r1, r9, lsl r5
   11444:	00475a00 	subeq	r5, r7, r0, lsl #20
   11448:	00138000 	andseq	r8, r3, r0
   1144c:	1aa90100 	bne	fea51854 <_estack+0xdea4c854>
   11450:	000002ca 	andeq	r0, r0, sl, asr #5
   11454:	0000475e 	andeq	r4, r0, lr, asr r7
   11458:	00001398 	muleq	r0, r8, r3
   1145c:	035baa01 	cmpeq	fp, #4096	; 0x1000
   11460:	981b0000 	ldmdals	fp, {}	; <UNPREDICTABLE>
   11464:	10000013 	andne	r0, r0, r3, lsl r0
   11468:	000002db 	ldrdeq	r0, [r0], -fp
   1146c:	00004e30 	andeq	r4, r0, r0, lsr lr
   11470:	72150000 	andsvc	r0, r5, #0
   11474:	b2000047 	andlt	r0, r0, #71	; 0x47
   11478:	00000001 	andeq	r0, r0, r1
   1147c:	003f0409 	eorseq	r0, pc, r9, lsl #8
   11480:	01830200 	orreq	r0, r3, r0, lsl #4
   11484:	00000372 	andeq	r0, r0, r2, ror r3
   11488:	02010203 	andeq	r0, r1, #805306368	; 0x30000000
   1148c:	00000ca2 	andeq	r0, r0, r2, lsr #25
   11490:	00416009 	subeq	r6, r1, r9
   11494:	01f00200 	mvnseq	r0, r0, lsl #4
   11498:	00000372 	andeq	r0, r0, r2, ror r3
   1149c:	36611c03 	strbtcc	r1, [r1], -r3, lsl #24
   114a0:	43020000 	movwmi	r0, #8192	; 0x2000
   114a4:	0047c402 	subeq	ip, r7, r2, lsl #8
   114a8:	00001600 	andeq	r1, r0, r0, lsl #12
   114ac:	1d9c0100 	ldfnes	f0, [ip]
   114b0:	00000365 	andeq	r0, r0, r5, ror #6
   114b4:	000047c6 	andeq	r4, r0, r6, asr #15
   114b8:	00000004 	andeq	r0, r0, r4
   114bc:	03b5e201 			; <UNDEFINED> instruction: 0x03b5e201
   114c0:	ca150000 	bgt	5514c8 <__ccfg+0x531520>
   114c4:	b2000047 	andlt	r0, r0, #71	; 0x47
   114c8:	00000001 	andeq	r0, r0, r1
   114cc:	0003791e 	andeq	r7, r3, lr, lsl r9
   114d0:	0047ce00 	subeq	ip, r7, r0, lsl #28
   114d4:	00000400 	andeq	r0, r0, r0, lsl #8
   114d8:	15e30100 	strbne	r0, [r3, #256]!	; 0x100
   114dc:	000047d2 	ldrdeq	r4, [r0], -r2
   114e0:	000002e8 	andeq	r0, r0, r8, ror #5
   114e4:	a7000000 	strge	r0, [r0, -r0]
   114e8:	04000005 	streq	r0, [r0], #-5
   114ec:	00404900 	subeq	r4, r0, r0, lsl #18
   114f0:	2c010400 	cfstrscs	mvf0, [r1], {-0}
   114f4:	0100002a 	tsteq	r0, sl, lsr #32
   114f8:	00004257 	andeq	r4, r0, r7, asr r2
   114fc:	00002af3 	strdeq	r2, [r0], -r3
   11500:	000013e8 	andeq	r1, r0, r8, ror #7
   11504:	00000000 	andeq	r0, r0, r0
   11508:	00008bba 			; <UNDEFINED> instruction: 0x00008bba
   1150c:	58060102 	stmdapl	r6, {r1, r8}
   11510:	0300000c 	movweq	r0, #12
   11514:	00002a07 	andeq	r2, r0, r7, lsl #20
   11518:	00371d03 	eorseq	r1, r7, r3, lsl #26
   1151c:	01020000 	mrseq	r0, (UNDEF: 2)
   11520:	000c5608 	andeq	r5, ip, r8, lsl #12
   11524:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
   11528:	00000a66 	andeq	r0, r0, r6, ror #20
   1152c:	002dfd03 	eoreq	pc, sp, r3, lsl #26
   11530:	502b0300 	eorpl	r0, fp, r0, lsl #6
   11534:	02000000 	andeq	r0, r0, #0
   11538:	0d530702 	ldcleq	7, cr0, [r3, #-8]
   1153c:	04020000 	streq	r0, [r2], #-0
   11540:	0007f805 	andeq	pc, r7, r5, lsl #16
   11544:	299f0300 	ldmibcs	pc, {r8, r9}	; <UNPREDICTABLE>
   11548:	41030000 	mrsmi	r0, (UNDEF: 3)
   1154c:	00000069 	andeq	r0, r0, r9, rrx
   11550:	28070402 	stmdacs	r7, {r1, sl}
   11554:	02000004 	andeq	r0, r0, #4
   11558:	07f30508 	ldrbeq	r0, [r3, r8, lsl #10]!
   1155c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   11560:	00042307 	andeq	r2, r4, r7, lsl #6
   11564:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
   11568:	00746e69 	rsbseq	r6, r4, r9, ror #28
   1156c:	2d070402 	cfstrscs	mvf0, [r7, #-8]
   11570:	03000004 	movweq	r0, #4
   11574:	00002a09 	andeq	r2, r0, r9, lsl #20
   11578:	002c1404 	eoreq	r1, ip, r4, lsl #8
   1157c:	ff030000 			; <UNDEFINED> instruction: 0xff030000
   11580:	0400002d 	streq	r0, [r0], #-45	; 0xffffffd3
   11584:	0000451a 	andeq	r4, r0, sl, lsl r5
   11588:	29a10300 	stmibcs	r1!, {r8, r9}
   1158c:	20040000 	andcs	r0, r4, r0
   11590:	0000005e 	andeq	r0, r0, lr, asr r0
   11594:	0041d005 	subeq	sp, r1, r5
   11598:	03890100 	orreq	r0, r9, #0, 2
   1159c:	000000e6 	andeq	r0, r0, r6, ror #1
   115a0:	0041b206 	subeq	fp, r1, r6, lsl #4
   115a4:	a2890100 	addge	r0, r9, #0, 2
   115a8:	06000000 	streq	r0, [r0], -r0
   115ac:	00004223 	andeq	r4, r0, r3, lsr #4
   115b0:	00a28901 	adceq	r8, r2, r1, lsl #18
   115b4:	7e060000 	cdpvc	0, 0, cr0, cr6, cr0, {0}
   115b8:	01000042 	tsteq	r0, r2, asr #32
   115bc:	0000a289 	andeq	sl, r0, r9, lsl #5
   115c0:	29aa0700 	stmibcs	sl!, {r8, r9, sl}
   115c4:	8c010000 	stchi	0, cr0, [r1], {-0}
   115c8:	000000e6 	andeq	r0, r0, r6, ror #1
   115cc:	02010200 	andeq	r0, r1, #0, 4
   115d0:	00000ca2 	andeq	r0, r0, r2, lsr #25
   115d4:	00423108 	subeq	r3, r2, r8, lsl #2
   115d8:	a2a90100 	adcge	r0, r9, #0, 2
   115dc:	03000000 	movweq	r0, #0
   115e0:	0000012a 	andeq	r0, r0, sl, lsr #2
   115e4:	0041b206 	subeq	fp, r1, r6, lsl #4
   115e8:	a2a90100 	adcge	r0, r9, #0, 2
   115ec:	06000000 	streq	r0, [r0], -r0
   115f0:	0000427e 	andeq	r4, r0, lr, ror r2
   115f4:	00a2a901 	adceq	sl, r2, r1, lsl #18
   115f8:	cb070000 	blgt	1d1600 <__ccfg+0x1b1658>
   115fc:	01000041 	tsteq	r0, r1, asr #32
   11600:	0000a2ab 	andeq	sl, r0, fp, lsr #5
   11604:	29aa0700 	stmibcs	sl!, {r8, r9, sl}
   11608:	ad010000 	stcge	0, cr0, [r1, #-0]
   1160c:	000000e6 	andeq	r0, r0, r6, ror #1
   11610:	00ad0900 	adceq	r0, sp, r0, lsl #18
   11614:	47dc0000 	ldrbmi	r0, [ip, r0]
   11618:	00280000 	eoreq	r0, r8, r0
   1161c:	9c010000 	stcls	0, cr0, [r1], {-0}
   11620:	00000171 	andeq	r0, r0, r1, ror r1
   11624:	0000b90a 	andeq	fp, r0, sl, lsl #18
   11628:	004e4300 	subeq	r4, lr, r0, lsl #6
   1162c:	00c40a00 	sbceq	r0, r4, r0, lsl #20
   11630:	4e880000 	cdpmi	0, 8, cr0, cr8, cr0, {0}
   11634:	da0b0000 	ble	2d163c <__ccfg+0x2b1694>
   11638:	cd000000 	stcgt	0, cr0, [r0, #-0]
   1163c:	0c00004e 	stceq	0, cr0, [r0], {78}	; 0x4e
   11640:	000000cf 	andeq	r0, r0, pc, asr #1
   11644:	47e60d04 	strbmi	r0, [r6, r4, lsl #26]!
   11648:	05940000 	ldreq	r0, [r4]
   1164c:	fe0e0000 	cdp2	0, 0, cr0, cr14, cr0, {0}
   11650:	9f000047 	svcls	0x00000047
   11654:	00000005 	andeq	r0, r0, r5
   11658:	00387b0f 	eorseq	r7, r8, pc, lsl #22
   1165c:	01ca0100 	biceq	r0, sl, r0, lsl #2
   11660:	00004804 	andeq	r4, r0, r4, lsl #16
   11664:	00000008 	andeq	r0, r0, r8
   11668:	01d19c01 	bicseq	r9, r1, r1, lsl #24
   1166c:	a7100000 	ldrge	r0, [r0, -r0]
   11670:	02000011 	andeq	r0, r0, #17
   11674:	0000a242 	andeq	sl, r0, r2, asr #4
   11678:	004ef300 	subeq	pc, lr, r0, lsl #6
   1167c:	41921000 	orrsmi	r1, r2, r0
   11680:	42020000 	andmi	r0, r2, #0
   11684:	000000a2 	andeq	r0, r0, r2, lsr #1
   11688:	00004f14 	andeq	r4, r0, r4, lsl pc
   1168c:	00422910 	subeq	r2, r2, r0, lsl r9
   11690:	a2430200 	subge	r0, r3, #0, 4
   11694:	35000000 	strcc	r0, [r0, #-0]
   11698:	1100004f 	tstne	r0, pc, asr #32
   1169c:	0000480c 	andeq	r4, r0, ip, lsl #16
   116a0:	0000012a 	andeq	r0, r0, sl, lsr #2
   116a4:	03510112 	cmpeq	r1, #-2147483644	; 0x80000004
   116a8:	125201f3 	subsne	r0, r2, #-1073741764	; 0xc000003c
   116ac:	f3075001 	vhadd.u8	d5, d7, d1
   116b0:	01f35001 	mvnseq	r5, r1
   116b4:	00002251 	andeq	r2, r0, r1, asr r2
   116b8:	0042430f 	subeq	r4, r2, pc, lsl #6
   116bc:	01df0100 	bicseq	r0, pc, r0, lsl #2
   116c0:	00000000 	andeq	r0, r0, r0
   116c4:	00000022 	andeq	r0, r0, r2, lsr #32
   116c8:	02ea9c01 	rsceq	r9, sl, #256	; 0x100
   116cc:	a7100000 	ldrge	r0, [r0, -r0]
   116d0:	02000011 	andeq	r0, r0, #17
   116d4:	0000a257 	andeq	sl, r0, r7, asr r2
   116d8:	004f5600 	subeq	r5, pc, r0, lsl #12
   116dc:	41921000 	orrsmi	r1, r2, r0
   116e0:	57020000 	strpl	r0, [r2, -r0]
   116e4:	000000a2 	andeq	r0, r0, r2, lsr #1
   116e8:	00004f77 	andeq	r4, r0, r7, ror pc
   116ec:	00223010 	eoreq	r3, r2, r0, lsl r0
   116f0:	a2580200 	subsge	r0, r8, #0, 4
   116f4:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
   116f8:	1000004f 	andne	r0, r0, pc, asr #32
   116fc:	000041ec 	andeq	r4, r0, ip, ror #3
   11700:	00a25802 	adceq	r5, r2, r2, lsl #16
   11704:	4fe30000 	svcmi	0x00e30000
   11708:	72130000 	andsvc	r0, r3, #0
   1170c:	02000042 	andeq	r0, r0, #66	; 0x42
   11710:	0000a25a 	andeq	sl, r0, sl, asr r2
   11714:	00500400 	subseq	r0, r0, r0, lsl #8
   11718:	41f71300 	mvnsmi	r1, r0, lsl #6
   1171c:	5b020000 	blpl	91724 <__ccfg+0x7177c>
   11720:	000000a2 	andeq	r0, r0, r2, lsr #1
   11724:	00005098 	muleq	r0, r8, r0
   11728:	00000011 	andeq	r0, r0, r1, lsl r0
   1172c:	00012a00 	andeq	r2, r1, r0, lsl #20
   11730:	51011200 	mrspl	r1, R9_usr
   11734:	5201f345 	andpl	pc, r1, #335544321	; 0x14000001
   11738:	01f32540 	mvnseq	r2, r0, asr #10
   1173c:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
   11740:	2e302540 	cfneg32cs	mvfx2, mvfx0
   11744:	16000128 	strne	r0, [r0], -r8, lsr #2
   11748:	30244013 	eorcc	r4, r4, r3, lsl r0
   1174c:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   11750:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
   11754:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   11758:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
   1175c:	13160001 	tstne	r6, #1
   11760:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   11764:	5301f325 	movwpl	pc, #4901	; 0x1325	; <UNPREDICTABLE>
   11768:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
   1176c:	f3131600 	vmax.u16	d1, d3, d0
   11770:	29305301 	ldmdbcs	r0!, {r0, r8, r9, ip, lr}
   11774:	16000128 	strne	r0, [r0], -r8, lsr #2
   11778:	01122113 	tsteq	r2, r3, lsl r1
   1177c:	01f35150 	mvnseq	r5, r0, asr r1
   11780:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   11784:	23225001 			; <UNDEFINED> instruction: 0x23225001
   11788:	01f30480 	mvnseq	r0, r0, lsl #9
   1178c:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   11790:	f3225001 	vhadd.u32	d5, d2, d1
   11794:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   11798:	01282930 			; <UNDEFINED> instruction: 0x01282930
   1179c:	23131600 	tstcs	r3, #0, 12
   117a0:	01f30484 	mvnseq	r0, r4, lsl #9
   117a4:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   117a8:	23225001 			; <UNDEFINED> instruction: 0x23225001
   117ac:	01f30480 	mvnseq	r0, r0, lsl #9
   117b0:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   117b4:	f3225001 	vhadd.u32	d5, d2, d1
   117b8:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   117bc:	01282930 			; <UNDEFINED> instruction: 0x01282930
   117c0:	f3131600 	vmax.u16	d1, d3, d0
   117c4:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   117c8:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
   117cc:	00131600 	andseq	r1, r3, r0, lsl #12
   117d0:	420a0f00 	andmi	r0, sl, #0, 30
   117d4:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
   117d8:	00000001 	andeq	r0, r0, r1
   117dc:	00002e00 	andeq	r2, r0, r0, lsl #28
   117e0:	1f9c0100 	svcne	0x009c0100
   117e4:	10000004 	andne	r0, r0, r4
   117e8:	000011a7 	andeq	r1, r0, r7, lsr #3
   117ec:	00a28302 	adceq	r8, r2, r2, lsl #6
   117f0:	50e40000 	rscpl	r0, r4, r0
   117f4:	92100000 	andsls	r0, r0, #0
   117f8:	02000041 	andeq	r0, r0, #65	; 0x41
   117fc:	0000a283 	andeq	sl, r0, r3, lsl #5
   11800:	00510500 	subseq	r0, r1, r0, lsl #10
   11804:	22301000 	eorscs	r1, r0, #0
   11808:	84020000 	strhi	r0, [r2], #-0
   1180c:	000000a2 	andeq	r0, r0, r2, lsr #1
   11810:	00005126 	andeq	r5, r0, r6, lsr #2
   11814:	00420010 	subeq	r0, r2, r0, lsl r0
   11818:	a2840200 	addge	r0, r4, #0, 4
   1181c:	77000000 	strvc	r0, [r0, -r0]
   11820:	10000051 	andne	r0, r0, r1, asr r0
   11824:	000041f7 	strdeq	r4, [r0], -r7
   11828:	00978502 	addseq	r8, r7, r2, lsl #10
   1182c:	51c80000 	bicpl	r0, r8, r0
   11830:	72130000 	andsvc	r0, r3, #0
   11834:	02000042 	andeq	r0, r0, #66	; 0x42
   11838:	0000a287 	andeq	sl, r0, r7, lsl #5
   1183c:	0051e800 	subseq	lr, r1, r0, lsl #16
   11840:	41ec1300 	mvnmi	r1, r0, lsl #6
   11844:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
   11848:	000000a2 	andeq	r0, r0, r2, lsr #1
   1184c:	0000528e 	andeq	r5, r0, lr, lsl #5
   11850:	00000011 	andeq	r0, r0, r1, lsl r0
   11854:	00012a00 	andeq	r2, r1, r0, lsl #20
   11858:	51011200 	mrspl	r1, R9_usr
   1185c:	5201f340 	andpl	pc, r1, #64, 6
   11860:	01f32540 	mvnseq	r2, r0, asr #10
   11864:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
   11868:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
   1186c:	00000f0c 	andeq	r0, r0, ip, lsl #30
   11870:	01282b80 	smlawbeq	r8, r0, fp, r2
   11874:	40131600 	andsmi	r1, r3, r0, lsl #12
   11878:	94007d24 	strls	r7, [r0], #-3364	; 0xfffff2dc
   1187c:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
   11880:	5301f31a 	movwpl	pc, #4890	; 0x131a	; <UNPREDICTABLE>
   11884:	01f31c40 	mvnseq	r1, r0, asr #24
   11888:	5301f353 	movwpl	pc, #4947	; 0x1353	; <UNPREDICTABLE>
   1188c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
   11890:	00000f0c 	andeq	r0, r0, ip, lsl #30
   11894:	01282b80 	smlawbeq	r8, r0, fp, r2
   11898:	24131600 	ldrcs	r1, [r3], #-1536	; 0xfffffa00
   1189c:	50011221 	andpl	r1, r1, r1, lsr #4
   118a0:	5101f363 	tstpl	r1, r3, ror #6	; <UNPREDICTABLE>
   118a4:	01f32431 	mvnseq	r2, r1, lsr r4
   118a8:	80232250 	eorhi	r2, r3, r0, asr r2
   118ac:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
   118b0:	01f32431 	mvnseq	r2, r1, lsr r4
   118b4:	01f32250 	mvnseq	r2, r0, asr r2
   118b8:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
   118bc:	000f0c22 	andeq	r0, pc, r2, lsr #24
   118c0:	282c8000 	stmdacs	ip!, {pc}
   118c4:	13160001 	tstne	r6, #1
   118c8:	f3048423 	vshl.u8	d8, d19, d4
   118cc:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
   118d0:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
   118d4:	f3048023 	vhadd.u8	d8, d4, d19
   118d8:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
   118dc:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
   118e0:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
   118e4:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
   118e8:	8000000f 	andhi	r0, r0, pc
   118ec:	0001282c 	andeq	r2, r1, ip, lsr #16
   118f0:	01f31316 	mvnseq	r1, r6, lsl r3
   118f4:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
   118f8:	000f0c22 	andeq	r0, pc, r2, lsr #24
   118fc:	282b8000 	stmdacs	fp!, {pc}
   11900:	13160001 	tstne	r6, #1
   11904:	b8140000 	ldmdalt	r4, {}	; <UNPREDICTABLE>
   11908:	01000041 	tsteq	r0, r1, asr #32
   1190c:	00970208 	addseq	r0, r7, r8, lsl #4
   11910:	00000000 	andeq	r0, r0, r0
   11914:	00340000 	eorseq	r0, r4, r0
   11918:	9c010000 	stcls	0, cr0, [r1], {-0}
   1191c:	000004d2 	ldrdeq	r0, [r0], -r2
   11920:	0011a710 	andseq	sl, r1, r0, lsl r7
   11924:	a2af0200 	adcge	r0, pc, #0, 4
   11928:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
   1192c:	10000052 	andne	r0, r0, r2, asr r0
   11930:	00004192 	muleq	r0, r2, r1
   11934:	00a2af02 	adceq	sl, r2, r2, lsl #30
   11938:	530f0000 	movwpl	r0, #61440	; 0xf000
   1193c:	30100000 	andscc	r0, r0, r0
   11940:	02000022 	andeq	r0, r0, #34	; 0x22
   11944:	0000a2af 	andeq	sl, r0, pc, lsr #5
   11948:	00533000 	subseq	r3, r3, r0
   1194c:	42721300 	rsbsmi	r1, r2, #0, 6
   11950:	b1020000 	mrslt	r0, (UNDEF: 2)
   11954:	000000a2 	andeq	r0, r0, r2, lsr #1
   11958:	0000536d 	andeq	r5, r0, sp, ror #6
   1195c:	0041e313 	subeq	lr, r1, r3, lsl r3
   11960:	97b20200 	ldrls	r0, [r2, r0, lsl #4]!
   11964:	a7000000 	strge	r0, [r0, -r0]
   11968:	15000053 	strne	r0, [r0, #-83]	; 0xffffffad
   1196c:	000000ed 	andeq	r0, r0, sp, ror #1
   11970:	00000000 	andeq	r0, r0, r0
   11974:	0000001a 	andeq	r0, r0, sl, lsl r0
   11978:	080cca02 	stmdaeq	ip, {r1, r9, fp, lr, pc}
   1197c:	02000001 	andeq	r0, r0, #1
   11980:	0000fd0a 	andeq	pc, r0, sl, lsl #26
   11984:	0053bf00 	subseq	fp, r3, r0, lsl #30
   11988:	00001600 	andeq	r1, r0, r0, lsl #12
   1198c:	001a0000 	andseq	r0, sl, r0
   11990:	130b0000 	movwne	r0, #45056	; 0xb000
   11994:	f9000001 			; <UNDEFINED> instruction: 0xf9000001
   11998:	0b000053 	bleq	11aec <__exidx_end+0xc0c8>
   1199c:	0000011e 	andeq	r0, r0, lr, lsl r1
   119a0:	00005412 	andeq	r5, r0, r2, lsl r4
   119a4:	0000000d 	andeq	r0, r0, sp
   119a8:	00059400 	andeq	r9, r5, r0, lsl #8
   119ac:	00000d00 	andeq	r0, r0, r0, lsl #26
   119b0:	059f0000 	ldreq	r0, [pc]	; 119b8 <__exidx_end+0xbf94>
   119b4:	00000000 	andeq	r0, r0, r0
   119b8:	419a1400 	orrsmi	r1, sl, r0, lsl #8
   119bc:	1d010000 	stcne	0, cr0, [r1, #-0]
   119c0:	00009702 	andeq	r9, r0, r2, lsl #14
   119c4:	00000000 	andeq	r0, r0, r0
   119c8:	00004000 	andeq	r4, r0, r0
   119cc:	949c0100 	ldrls	r0, [ip], #256	; 0x100
   119d0:	10000005 	andne	r0, r0, r5
   119d4:	000011a7 	andeq	r1, r0, r7, lsr #3
   119d8:	00a2dd02 	adceq	sp, r2, r2, lsl #26
   119dc:	54290000 	strtpl	r0, [r9], #-0
   119e0:	92100000 	andsls	r0, r0, #0
   119e4:	02000041 	andeq	r0, r0, #65	; 0x41
   119e8:	0000a2dd 	ldrdeq	sl, [r0], -sp
   119ec:	00544a00 	subseq	r4, r4, r0, lsl #20
   119f0:	22301000 	eorscs	r1, r0, #0
   119f4:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
   119f8:	000000a2 	andeq	r0, r0, r2, lsr #1
   119fc:	0000546b 	andeq	r5, r0, fp, ror #8
   11a00:	00420010 	subeq	r0, r2, r0, lsl r0
   11a04:	a2de0200 	sbcsge	r0, lr, #0, 4
   11a08:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
   11a0c:	13000054 	movwne	r0, #84	; 0x54
   11a10:	00004272 	andeq	r4, r0, r2, ror r2
   11a14:	00a2e002 	adceq	lr, r2, r2
   11a18:	54f10000 	ldrbtpl	r0, [r1], #0
   11a1c:	e3130000 	tst	r3, #0
   11a20:	02000041 	andeq	r0, r0, #65	; 0x41
   11a24:	000097e1 	andeq	r9, r0, r1, ror #15
   11a28:	00554c00 	subseq	r4, r5, r0, lsl #24
   11a2c:	00ed1500 	rsceq	r1, sp, r0, lsl #10
   11a30:	00000000 	andeq	r0, r0, r0
   11a34:	001a0000 	andseq	r0, sl, r0
   11a38:	fa020000 	blx	91a40 <__ccfg+0x71a98>
   11a3c:	0001080c 	andeq	r0, r1, ip, lsl #16
   11a40:	fd0a0200 	stc2	2, cr0, [sl, #-0]
   11a44:	6f000000 	svcvs	0x00000000
   11a48:	16000055 			; <UNDEFINED> instruction: 0x16000055
   11a4c:	00000000 	andeq	r0, r0, r0
   11a50:	0000001a 	andeq	r0, r0, sl, lsl r0
   11a54:	0001130b 	andeq	r1, r1, fp, lsl #6
   11a58:	0055af00 	subseq	sl, r5, r0, lsl #30
   11a5c:	011e0b00 	tsteq	lr, r0, lsl #22
   11a60:	55c80000 	strbpl	r0, [r8]
   11a64:	000d0000 	andeq	r0, sp, r0
   11a68:	94000000 	strls	r0, [r0], #-0
   11a6c:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
   11a70:	00000000 	andeq	r0, r0, r0
   11a74:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
   11a78:	17000000 	strne	r0, [r0, -r0]
   11a7c:	000029dc 	ldrdeq	r2, [r0], -ip
   11a80:	00a26a05 	adceq	r6, r2, r5, lsl #20
   11a84:	eb170000 	bl	5d1a8c <__ccfg+0x5b1ae4>
   11a88:	05000029 	streq	r0, [r0, #-41]	; 0xffffffd7
   11a8c:	0000a284 	andeq	sl, r0, r4, lsl #5
   11a90:	0f310000 	svceq	0x00310000
   11a94:	00040000 	andeq	r0, r4, r0
   11a98:	0000419d 	muleq	r0, sp, r1
   11a9c:	45460104 	strbmi	r0, [r6, #-260]	; 0xfffffefc
   11aa0:	5f0c0000 	svcpl	0x000c0000
   11aa4:	e1000044 	crc32b	r0, r0, r4
   11aa8:	0c000045 	stceq	0, cr0, [r0], {69}	; 0x45
   11aac:	aa000048 	bge	11bd4 <__exidx_end+0xc1b0>
   11ab0:	dc000000 	stcle	0, cr0, [r0], {-0}
   11ab4:	0200008d 	andeq	r0, r0, #141	; 0x8d
   11ab8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   11abc:	01030074 	tsteq	r3, r4, ror r0
   11ac0:	02000033 	andeq	r0, r0, #51	; 0x33
   11ac4:	003817d8 	ldrsbteq	r1, [r8], -r8
   11ac8:	04040000 	streq	r0, [r4], #-0
   11acc:	00042d07 	andeq	r2, r4, r7, lsl #26
   11ad0:	43f30500 	mvnsmi	r0, #0, 10
   11ad4:	48020000 	stmdami	r2, {}	; <UNPREDICTABLE>
   11ad8:	00381801 	eorseq	r1, r8, r1, lsl #16
   11adc:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
   11ae0:	0007f305 	andeq	pc, r7, r5, lsl #6
   11ae4:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
   11ae8:	00004417 	andeq	r4, r0, r7, lsl r4
   11aec:	000bd005 	andeq	sp, fp, r5
   11af0:	01650200 	cmneq	r5, r0, lsl #4
   11af4:	00003817 	andeq	r3, r0, r7, lsl r8
   11af8:	06010400 	streq	r0, [r1], -r0, lsl #8
   11afc:	00000c58 	andeq	r0, r0, r8, asr ip
   11b00:	56080104 	strpl	r0, [r8], -r4, lsl #2
   11b04:	0400000c 	streq	r0, [r0], #-12
   11b08:	0a660502 	beq	1992f18 <__ccfg+0x1972f70>
   11b0c:	02040000 	andeq	r0, r4, #0
   11b10:	000d5307 	andeq	r5, sp, r7, lsl #6
   11b14:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
   11b18:	000007f8 	strdeq	r0, [r0], -r8
   11b1c:	00008306 	andeq	r8, r0, r6, lsl #6
   11b20:	07040400 	streq	r0, [r4, -r0, lsl #8]
   11b24:	00000428 	andeq	r0, r0, r8, lsr #8
   11b28:	23070804 	movwcs	r0, #30724	; 0x7804
   11b2c:	03000004 	movweq	r0, #4
   11b30:	00000e36 	andeq	r0, r0, r6, lsr lr
   11b34:	830e2e03 	movwhi	r2, #60931	; 0xee03
   11b38:	03000000 	movweq	r0, #0
   11b3c:	000002f6 	strdeq	r0, [r0], -r6
   11b40:	830e7403 	movwhi	r7, #58371	; 0xe403
   11b44:	07000000 	streq	r0, [r0, -r0]
   11b48:	03a50304 			; <UNDEFINED> instruction: 0x03a50304
   11b4c:	000000d7 	ldrdeq	r0, [r0], -r7
   11b50:	00076708 	andeq	r6, r7, r8, lsl #14
   11b54:	0ca70300 	stceq	3, cr0, [r7]
   11b58:	0000005a 	andeq	r0, r0, sl, asr r0
   11b5c:	000aaf08 	andeq	sl, sl, r8, lsl #30
   11b60:	13a80300 			; <UNDEFINED> instruction: 0x13a80300
   11b64:	000000d7 	ldrdeq	r0, [r0], -r7
   11b68:	006e0900 	rsbeq	r0, lr, r0, lsl #18
   11b6c:	00e70000 	rsceq	r0, r7, r0
   11b70:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   11b74:	03000000 	movweq	r0, #0
   11b78:	03080b00 	movweq	r0, #35584	; 0x8b00
   11b7c:	010b09a2 	smlatbeq	fp, r2, r9, r0
   11b80:	900c0000 	andls	r0, ip, r0
   11b84:	03000003 	movweq	r0, #3
   11b88:	002507a4 	eoreq	r0, r5, r4, lsr #15
   11b8c:	0c000000 	stceq	0, cr0, [r0], {-0}
   11b90:	000005fc 	strdeq	r0, [r0], -ip
   11b94:	b505a903 	strlt	sl, [r5, #-2307]	; 0xfffff6fd
   11b98:	04000000 	streq	r0, [r0], #-0
   11b9c:	08b00300 	ldmeq	r0!, {r8, r9}
   11ba0:	aa030000 	bge	d1ba8 <__ccfg+0xb1c00>
   11ba4:	0000e703 	andeq	lr, r0, r3, lsl #14
   11ba8:	0e040d00 	cdpeq	13, 0, cr0, cr4, cr0, {0}
   11bac:	00000117 	andeq	r0, r0, r7, lsl r1
   11bb0:	00083d03 	andeq	r3, r8, r3, lsl #26
   11bb4:	19160400 	ldmdbne	r6, {sl}
   11bb8:	0000008f 	andeq	r0, r0, pc, lsl #1
   11bbc:	00024a03 	andeq	r4, r2, r3, lsl #20
   11bc0:	0d0c0500 	cfstr32eq	mvfx0, [ip, #-0]
   11bc4:	00000025 	andeq	r0, r0, r5, lsr #32
   11bc8:	00072503 	andeq	r2, r7, r3, lsl #10
   11bcc:	1b230400 	blne	8d2bd4 <__ccfg+0x8b2c2c>
   11bd0:	0000012a 	andeq	r0, r0, sl, lsr #2
   11bd4:	0003290f 	andeq	r2, r3, pc, lsl #18
   11bd8:	34041800 	strcc	r1, [r4], #-2048	; 0xfffff800
   11bdc:	00019c08 	andeq	r9, r1, r8, lsl #24
   11be0:	0eb10c00 	cdpeq	12, 11, cr0, cr1, cr0, {0}
   11be4:	36040000 	strcc	r0, [r4], -r0
   11be8:	00019c13 	andeq	r9, r1, r3, lsl ip
   11bec:	5f100000 	svcpl	0x00100000
   11bf0:	3704006b 	strcc	r0, [r4, -fp, rrx]
   11bf4:	00002507 	andeq	r2, r0, r7, lsl #10
   11bf8:	5d0c0400 	cfstrspl	mvf0, [ip, #-0]
   11bfc:	0400000b 	streq	r0, [r0], #-11
   11c00:	00250b37 	eoreq	r0, r5, r7, lsr fp
   11c04:	0c080000 	stceq	0, cr0, [r8], {-0}
   11c08:	000043e2 	andeq	r4, r0, r2, ror #7
   11c0c:	25143704 	ldrcs	r3, [r4, #-1796]	; 0xfffff8fc
   11c10:	0c000000 	stceq	0, cr0, [r0], {-0}
   11c14:	0004570c 	andeq	r5, r4, ip, lsl #14
   11c18:	1b370400 	blne	dd2c20 <__ccfg+0xdb2c78>
   11c1c:	00000025 	andeq	r0, r0, r5, lsr #32
   11c20:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
   11c24:	0b380400 	bleq	e12c2c <__ccfg+0xdf2c84>
   11c28:	000001a2 	andeq	r0, r0, r2, lsr #3
   11c2c:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
   11c30:	00000142 	andeq	r0, r0, r2, asr #2
   11c34:	00011e09 	andeq	r1, r1, r9, lsl #28
   11c38:	0001b200 	andeq	fp, r1, r0, lsl #4
   11c3c:	00380a00 	eorseq	r0, r8, r0, lsl #20
   11c40:	00000000 	andeq	r0, r0, r0
   11c44:	000b780f 	andeq	r7, fp, pc, lsl #16
   11c48:	3c042400 	cfstrscc	mvf2, [r4], {-0}
   11c4c:	00023508 	andeq	r3, r2, r8, lsl #10
   11c50:	05670c00 	strbeq	r0, [r7, #-3072]!	; 0xfffff400
   11c54:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
   11c58:	00002509 	andeq	r2, r0, r9, lsl #10
   11c5c:	b90c0000 	stmdblt	ip, {}	; <UNPREDICTABLE>
   11c60:	04000003 	streq	r0, [r0], #-3
   11c64:	0025093f 	eoreq	r0, r5, pc, lsr r9
   11c68:	0c040000 	stceq	0, cr0, [r4], {-0}
   11c6c:	0000035a 	andeq	r0, r0, sl, asr r3
   11c70:	25094004 	strcs	r4, [r9, #-4]
   11c74:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   11c78:	00066f0c 	andeq	r6, r6, ip, lsl #30
   11c7c:	09410400 	stmdbeq	r1, {sl}^
   11c80:	00000025 	andeq	r0, r0, r5, lsr #32
   11c84:	094f0c0c 	stmdbeq	pc, {r2, r3, sl, fp}^	; <UNPREDICTABLE>
   11c88:	42040000 	andmi	r0, r4, #0
   11c8c:	00002509 	andeq	r2, r0, r9, lsl #10
   11c90:	c90c1000 	stmdbgt	ip, {ip}
   11c94:	0400000a 	streq	r0, [r0], #-10
   11c98:	00250943 	eoreq	r0, r5, r3, asr #18
   11c9c:	0c140000 	ldceq	0, cr0, [r4], {-0}
   11ca0:	0000033d 	andeq	r0, r0, sp, lsr r3
   11ca4:	25094404 	strcs	r4, [r9, #-1028]	; 0xfffffbfc
   11ca8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   11cac:	0005700c 	andeq	r7, r5, ip
   11cb0:	09450400 	stmdbeq	r5, {sl}^
   11cb4:	00000025 	andeq	r0, r0, r5, lsr #32
   11cb8:	08eb0c1c 	stmiaeq	fp!, {r2, r3, r4, sl, fp}^
   11cbc:	46040000 	strmi	r0, [r4], -r0
   11cc0:	00002509 	andeq	r2, r0, r9, lsl #10
   11cc4:	12002000 	andne	r2, r0, #0
   11cc8:	00000032 	andeq	r0, r0, r2, lsr r0
   11ccc:	4f040108 	svcmi	0x00040108
   11cd0:	00027a08 	andeq	r7, r2, r8, lsl #20
   11cd4:	0d1a0c00 	ldceq	12, cr0, [sl, #-0]
   11cd8:	50040000 	andpl	r0, r4, r0
   11cdc:	00027a0a 	andeq	r7, r2, sl, lsl #20
   11ce0:	120c0000 	andne	r0, ip, #0
   11ce4:	0400000c 	streq	r0, [r0], #-12
   11ce8:	027a0951 	rsbseq	r0, sl, #1327104	; 0x144000
   11cec:	13800000 	orrne	r0, r0, #0
   11cf0:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
   11cf4:	1e0a5304 	cdpne	3, 0, cr5, cr10, cr4, {0}
   11cf8:	00000001 	andeq	r0, r0, r1
   11cfc:	0ea41301 	cdpeq	3, 10, cr1, cr4, cr1, {0}
   11d00:	56040000 	strpl	r0, [r4], -r0
   11d04:	00011e0a 	andeq	r1, r1, sl, lsl #28
   11d08:	00010400 	andeq	r0, r1, r0, lsl #8
   11d0c:	00011709 	andeq	r1, r1, r9, lsl #14
   11d10:	00028a00 	andeq	r8, r2, r0, lsl #20
   11d14:	00380a00 	eorseq	r0, r8, r0, lsl #20
   11d18:	001f0000 	andseq	r0, pc, r0
   11d1c:	000a1112 	andeq	r1, sl, r2, lsl r1
   11d20:	04019000 	streq	r9, [r1], #-0
   11d24:	02cd0862 	sbceq	r0, sp, #6422528	; 0x620000
   11d28:	b10c0000 	mrslt	r0, (UNDEF: 12)
   11d2c:	0400000e 	streq	r0, [r0], #-14
   11d30:	02cd1263 	sbceq	r1, sp, #805306374	; 0x30000006
   11d34:	0c000000 	stceq	0, cr0, [r0], {-0}
   11d38:	0000057f 	andeq	r0, r0, pc, ror r5
   11d3c:	25066404 	strcs	r6, [r6, #-1028]	; 0xfffffbfc
   11d40:	04000000 	streq	r0, [r0], #-0
   11d44:	0002fe0c 	andeq	pc, r2, ip, lsl #28
   11d48:	09660400 	stmdbeq	r6!, {sl}^
   11d4c:	000002d3 	ldrdeq	r0, [r0], -r3
   11d50:	00320c08 	eorseq	r0, r2, r8, lsl #24
   11d54:	67040000 	strvs	r0, [r4, -r0]
   11d58:	0002351e 	andeq	r3, r2, lr, lsl r5
   11d5c:	11008800 	tstne	r0, r0, lsl #16
   11d60:	00028a04 	andeq	r8, r2, r4, lsl #20
   11d64:	02e30900 	rsceq	r0, r3, #0, 18
   11d68:	02e30000 	rsceq	r0, r3, #0
   11d6c:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   11d70:	1f000000 	svcne	0x00000000
   11d74:	e9041100 	stmdb	r4, {r8, ip}
   11d78:	14000002 	strne	r0, [r0], #-2
   11d7c:	000cb20f 	andeq	fp, ip, pc, lsl #4
   11d80:	7a040800 	bvc	113d88 <__ccfg+0xf3de0>
   11d84:	00031208 	andeq	r1, r3, r8, lsl #4
   11d88:	0cc40c00 	stcleq	12, cr0, [r4], {0}
   11d8c:	7b040000 	blvc	111d94 <__ccfg+0xf1dec>
   11d90:	00031211 	andeq	r1, r3, r1, lsl r2
   11d94:	8d0c0000 	stchi	0, cr0, [ip, #-0]
   11d98:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
   11d9c:	0025067c 	eoreq	r0, r5, ip, ror r6
   11da0:	00040000 	andeq	r0, r4, r0
   11da4:	006e0411 	rsbeq	r0, lr, r1, lsl r4
   11da8:	4f0f0000 	svcmi	0x000f0000
   11dac:	68000004 	stmdavs	r0, {r2}
   11db0:	5b08ba04 	blpl	2405c8 <__ccfg+0x220620>
   11db4:	10000004 	andne	r0, r0, r4
   11db8:	0400705f 	streq	r7, [r0], #-95	; 0xffffffa1
   11dbc:	031212bb 	tsteq	r2, #-1342177269	; 0xb000000b
   11dc0:	10000000 	andne	r0, r0, r0
   11dc4:	0400725f 	streq	r7, [r0], #-607	; 0xfffffda1
   11dc8:	002507bc 	strhteq	r0, [r5], -ip
   11dcc:	10040000 	andne	r0, r4, r0
   11dd0:	0400775f 	streq	r7, [r0], #-1887	; 0xfffff8a1
   11dd4:	002507bd 	strhteq	r0, [r5], -sp
   11dd8:	0c080000 	stceq	0, cr0, [r8], {-0}
   11ddc:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
   11de0:	7509be04 	strvc	fp, [r9, #-3588]	; 0xfffff1fc
   11de4:	0c000000 	stceq	0, cr0, [r0], {-0}
   11de8:	0008540c 	andeq	r5, r8, ip, lsl #8
   11dec:	09bf0400 	ldmibeq	pc!, {sl}	; <UNPREDICTABLE>
   11df0:	00000075 	andeq	r0, r0, r5, ror r0
   11df4:	625f100e 	subsvs	r1, pc, #14
   11df8:	c0040066 	andgt	r0, r4, r6, rrx
   11dfc:	0002ea11 	andeq	lr, r2, r1, lsl sl
   11e00:	b20c1000 	andlt	r1, ip, #0
   11e04:	04000001 	streq	r0, [r0], #-1
   11e08:	002507c1 	eoreq	r0, r5, r1, asr #15
   11e0c:	0c180000 	ldceq	0, cr0, [r8], {-0}
   11e10:	00000303 	andeq	r0, r0, r3, lsl #6
   11e14:	170ac804 	strne	ip, [sl, -r4, lsl #16]
   11e18:	1c000001 	stcne	0, cr0, [r0], {1}
   11e1c:	001d1c0c 	andseq	r1, sp, ip, lsl #24
   11e20:	1dca0400 	cfstrdne	mvd0, [sl]
   11e24:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   11e28:	1ce30c20 	stclne	12, cr0, [r3], #128	; 0x80
   11e2c:	cc040000 	stcgt	0, cr0, [r4], {-0}
   11e30:	0006091d 	andeq	r0, r6, sp, lsl r9
   11e34:	d10c2400 	tstle	ip, r0, lsl #8
   11e38:	0400000e 	streq	r0, [r0], #-14
   11e3c:	062d0dcf 	strteq	r0, [sp], -pc, asr #27
   11e40:	0c280000 	stceq	0, cr0, [r8], #-0
   11e44:	00001cd1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
   11e48:	4709d004 	strmi	sp, [r9, -r4]
   11e4c:	2c000006 	stccs	0, cr0, [r0], {6}
   11e50:	62755f10 	rsbsvs	r5, r5, #16, 30	; 0x40
   11e54:	11d30400 	bicsne	r0, r3, r0, lsl #8
   11e58:	000002ea 	andeq	r0, r0, sl, ror #5
   11e5c:	755f1030 	ldrbvc	r1, [pc, #-48]	; 11e34 <__exidx_end+0xc410>
   11e60:	d4040070 	strle	r0, [r4], #-112	; 0xffffff90
   11e64:	00031212 	andeq	r1, r3, r2, lsl r2
   11e68:	5f103800 	svcpl	0x00103800
   11e6c:	04007275 	streq	r7, [r0], #-629	; 0xfffffd8b
   11e70:	002507d5 	ldrdeq	r0, [r5], -r5	; <UNPREDICTABLE>
   11e74:	0c3c0000 	ldceq	0, cr0, [ip], #-0
   11e78:	00000f08 	andeq	r0, r0, r8, lsl #30
   11e7c:	4d11d804 	ldcmi	8, cr13, [r1, #-16]
   11e80:	40000006 	andmi	r0, r0, r6
   11e84:	000e510c 	andeq	r5, lr, ip, lsl #2
   11e88:	11d90400 	bicsne	r0, r9, r0, lsl #8
   11e8c:	0000065d 	andeq	r0, r0, sp, asr r6
   11e90:	6c5f1043 	mrrcvs	0, 4, r1, pc, cr3	; <UNPREDICTABLE>
   11e94:	dc040062 	stcle	0, cr0, [r4], {98}	; 0x62
   11e98:	0002ea11 	andeq	lr, r2, r1, lsl sl
   11e9c:	6f0c4400 	svcvs	0x000c4400
   11ea0:	0400000b 	streq	r0, [r0], #-11
   11ea4:	002507df 	ldrdeq	r0, [r5], -pc	; <UNPREDICTABLE>
   11ea8:	0c4c0000 	mareq	acc0, r0, ip
   11eac:	00000483 	andeq	r0, r0, r3, lsl #9
   11eb0:	9d0ae004 	stcls	0, cr14, [sl, #-16]
   11eb4:	50000000 	andpl	r0, r0, r0
   11eb8:	0047400c 	subeq	r4, r7, ip
   11ebc:	12e30400 	rscne	r0, r3, #0, 8
   11ec0:	00000479 	andeq	r0, r0, r9, ror r4
   11ec4:	0b950c54 	bleq	fe55501c <_estack+0xde55001c>
   11ec8:	e7040000 	str	r0, [r4, -r0]
   11ecc:	0001360c 	andeq	r3, r1, ip, lsl #12
   11ed0:	190c5800 	stmdbne	ip, {fp, ip, lr}
   11ed4:	0400000a 	streq	r0, [r0], #-10
   11ed8:	010b0ee9 	smlatteq	fp, r9, lr, r0
   11edc:	0c5c0000 	mraeq	r0, ip, acc0
   11ee0:	00000e84 	andeq	r0, r0, r4, lsl #29
   11ee4:	2509ea04 	strcs	lr, [r9, #-2564]	; 0xfffff5fc
   11ee8:	64000000 	strvs	r0, [r0], #-0
   11eec:	00251500 	eoreq	r1, r5, r0, lsl #10
   11ef0:	04790000 	ldrbteq	r0, [r9], #-0
   11ef4:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   11ef8:	16000004 	strne	r0, [r0], -r4
   11efc:	00000117 	andeq	r0, r0, r7, lsl r1
   11f00:	0005cd16 	andeq	ip, r5, r6, lsl sp
   11f04:	00251600 	eoreq	r1, r5, r0, lsl #12
   11f08:	11000000 	mrsne	r0, (UNDEF: 0)
   11f0c:	00048404 	andeq	r8, r4, r4, lsl #8
   11f10:	04790600 	ldrbteq	r0, [r9], #-1536	; 0xfffffa00
   11f14:	4c170000 	ldcmi	0, cr0, [r7], {-0}
   11f18:	2800000d 	stmdacs	r0, {r0, r2, r3}
   11f1c:	02650404 	rsbeq	r0, r5, #4, 8	; 0x4000000
   11f20:	0005cd08 	andeq	ip, r5, r8, lsl #26
   11f24:	08ff1800 	ldmeq	pc!, {fp, ip}^	; <UNPREDICTABLE>
   11f28:	67040000 	strvs	r0, [r4, -r0]
   11f2c:	00250702 	eoreq	r0, r5, r2, lsl #14
   11f30:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   11f34:	000007dd 	ldrdeq	r0, [r0], -sp
   11f38:	0b026c04 	bleq	acf50 <__ccfg+0x8cfa8>
   11f3c:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
   11f40:	02ee1804 	rsceq	r1, lr, #4, 16	; 0x40000
   11f44:	6c040000 	stcvs	0, cr0, [r4], {-0}
   11f48:	06b91402 	ldrteq	r1, [r9], r2, lsl #8
   11f4c:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
   11f50:	00000ef7 	strdeq	r0, [r0], -r7
   11f54:	1e026c04 	cdpne	12, 0, cr6, cr2, cr4, {0}
   11f58:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
   11f5c:	057a180c 	ldrbeq	r1, [sl, #-2060]!	; 0xfffff7f4
   11f60:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
   11f64:	00250802 	eoreq	r0, r5, r2, lsl #16
   11f68:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
   11f6c:	000004cf 	andeq	r0, r0, pc, asr #9
   11f70:	08026f04 	stmdaeq	r2, {r2, r8, r9, sl, fp, sp, lr}
   11f74:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
   11f78:	0e641814 	mcreq	8, 3, r1, cr4, cr4, {0}
   11f7c:	72040000 	andvc	r0, r4, #0
   11f80:	00250702 	eoreq	r0, r5, r2, lsl #14
   11f84:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
   11f88:	0000428e 	andeq	r4, r0, lr, lsl #5
   11f8c:	16027304 	strne	r7, [r2], -r4, lsl #6
   11f90:	00000950 	andeq	r0, r0, r0, asr r9
   11f94:	07851834 			; <UNDEFINED> instruction: 0x07851834
   11f98:	75040000 	strvc	r0, [r4, #-0]
   11f9c:	00250702 	eoreq	r0, r5, r2, lsl #14
   11fa0:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
   11fa4:	0000087f 	andeq	r0, r0, pc, ror r8
   11fa8:	0a027704 	beq	afbc0 <__ccfg+0x8fc18>
   11fac:	00000961 	andeq	r0, r0, r1, ror #18
   11fb0:	0352183c 	cmpeq	r2, #60, 16	; 0x3c0000
   11fb4:	7a040000 	bvc	111fbc <__ccfg+0xf2014>
   11fb8:	019c1302 	orrseq	r1, ip, r2, lsl #6
   11fbc:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
   11fc0:	0000040d 	andeq	r0, r0, sp, lsl #8
   11fc4:	07027b04 	streq	r7, [r2, -r4, lsl #22]
   11fc8:	00000025 	andeq	r0, r0, r5, lsr #32
   11fcc:	06041844 	streq	r1, [r4], -r4, asr #16
   11fd0:	7c040000 	stcvc	0, cr0, [r4], {-0}
   11fd4:	019c1302 	orrseq	r1, ip, r2, lsl #6
   11fd8:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
   11fdc:	0000081a 	andeq	r0, r0, sl, lsl r8
   11fe0:	14027d04 	strne	r7, [r2], #-3332	; 0xfffff2fc
   11fe4:	00000967 	andeq	r0, r0, r7, ror #18
   11fe8:	0b55184c 	bleq	1558120 <__ccfg+0x1538178>
   11fec:	80040000 	andhi	r0, r4, r0
   11ff0:	00250702 	eoreq	r0, r5, r2, lsl #14
   11ff4:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
   11ff8:	00000c4e 	andeq	r0, r0, lr, asr #24
   11ffc:	09028104 	stmdbeq	r2, {r2, r8, pc}
   12000:	000005cd 	andeq	r0, r0, sp, asr #11
   12004:	0c681854 	stcleq	8, cr1, [r8], #-336	; 0xfffffeb0
   12008:	a4040000 	strge	r0, [r4], #-0
   1200c:	08940702 	ldmeq	r4, {r1, r8, r9, sl}
   12010:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
   12014:	00000a11 	andeq	r0, r0, r1, lsl sl
   12018:	1302a804 	movwne	sl, #10244	; 0x2804
   1201c:	000002cd 	andeq	r0, r0, sp, asr #5
   12020:	a9190148 	ldmdbge	r9, {r3, r6, r8}
   12024:	04000006 	streq	r0, [r0], #-6
   12028:	8a1202a9 	bhi	492ad4 <__ccfg+0x472b2c>
   1202c:	4c000002 	stcmi	0, cr0, [r0], {2}
   12030:	06901901 	ldreq	r1, [r0], r1, lsl #18
   12034:	ad040000 	stcge	0, cr0, [r4, #-0]
   12038:	09780c02 	ldmdbeq	r8!, {r1, sl, fp}^
   1203c:	02dc0000 	sbcseq	r0, ip, #0
   12040:	000cd019 	andeq	sp, ip, r9, lsl r0
   12044:	02b20400 	adcseq	r0, r2, #0, 8
   12048:	00067a10 	andeq	r7, r6, r0, lsl sl
   1204c:	1902e000 	stmdbne	r2, {sp, lr, pc}
   12050:	00000aa1 	andeq	r0, r0, r1, lsr #21
   12054:	0a02b404 	beq	bf06c <__ccfg+0x9f0c4>
   12058:	00000984 	andeq	r0, r0, r4, lsl #19
   1205c:	110002ec 	smlattne	r0, ip, r2, r0
   12060:	0005d304 	andeq	sp, r5, r4, lsl #6
   12064:	08010400 	stmdaeq	r1, {sl}
   12068:	00000c5f 	andeq	r0, r0, pc, asr ip
   1206c:	0005d306 	andeq	sp, r5, r6, lsl #6
   12070:	5b041100 	blpl	116478 <__ccfg+0xf64d0>
   12074:	15000004 	strne	r0, [r0, #-4]
   12078:	00000025 	andeq	r0, r0, r5, lsr #32
   1207c:	00000603 	andeq	r0, r0, r3, lsl #12
   12080:	00047916 	andeq	r7, r4, r6, lsl r9
   12084:	01171600 	tsteq	r7, r0, lsl #12
   12088:	03160000 	tsteq	r6, #0
   1208c:	16000006 	strne	r0, [r0], -r6
   12090:	00000025 	andeq	r0, r0, r5, lsr #32
   12094:	da041100 	ble	11649c <__ccfg+0xf64f4>
   12098:	11000005 	tstne	r0, r5
   1209c:	0005e504 	andeq	lr, r5, r4, lsl #10
   120a0:	00a91500 	adceq	r1, r9, r0, lsl #10
   120a4:	062d0000 	strteq	r0, [sp], -r0
   120a8:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   120ac:	16000004 	strne	r0, [r0], -r4
   120b0:	00000117 	andeq	r0, r0, r7, lsl r1
   120b4:	0000a916 	andeq	sl, r0, r6, lsl r9
   120b8:	00251600 	eoreq	r1, r5, r0, lsl #12
   120bc:	11000000 	mrsne	r0, (UNDEF: 0)
   120c0:	00060f04 	andeq	r0, r6, r4, lsl #30
   120c4:	00251500 	eoreq	r1, r5, r0, lsl #10
   120c8:	06470000 	strbeq	r0, [r7], -r0
   120cc:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   120d0:	16000004 	strne	r0, [r0], -r4
   120d4:	00000117 	andeq	r0, r0, r7, lsl r1
   120d8:	33041100 	movwcc	r1, #16640	; 0x4100
   120dc:	09000006 	stmdbeq	r0, {r1, r2}
   120e0:	0000006e 	andeq	r0, r0, lr, rrx
   120e4:	0000065d 	andeq	r0, r0, sp, asr r6
   120e8:	0000380a 	andeq	r3, r0, sl, lsl #16
   120ec:	09000200 	stmdbeq	r0, {r9}
   120f0:	0000006e 	andeq	r0, r0, lr, rrx
   120f4:	0000066d 	andeq	r0, r0, sp, ror #12
   120f8:	0000380a 	andeq	r3, r0, sl, lsl #16
   120fc:	05000000 	streq	r0, [r0, #-0]
   12100:	00000470 	andeq	r0, r0, r0, ror r4
   12104:	1a012404 	bne	5b11c <__ccfg+0x3b174>
   12108:	00000318 	andeq	r0, r0, r8, lsl r3
   1210c:	000cca1a 	andeq	ip, ip, sl, lsl sl
   12110:	28040c00 	stmdacs	r4, {sl, fp}
   12114:	06b30801 	ldrteq	r0, [r3], r1, lsl #16
   12118:	b1180000 	tstlt	r8, r0
   1211c:	0400000e 	streq	r0, [r0], #-14
   12120:	b311012a 	tstlt	r1, #-2147483638	; 0x8000000a
   12124:	00000006 	andeq	r0, r0, r6
   12128:	000bc918 	andeq	ip, fp, r8, lsl r9
   1212c:	012b0400 			; <UNDEFINED> instruction: 0x012b0400
   12130:	00002507 	andeq	r2, r0, r7, lsl #10
   12134:	6d180400 	cfldrsvs	mvf0, [r8, #-0]
   12138:	04000007 	streq	r0, [r0], #-7
   1213c:	b90b012c 	stmdblt	fp, {r2, r3, r5, r8}
   12140:	08000006 	stmdaeq	r0, {r1, r2}
   12144:	7a041100 	bvc	11654c <__ccfg+0xf65a4>
   12148:	11000006 	tstne	r0, r6
   1214c:	00066d04 	andeq	r6, r6, r4, lsl #26
   12150:	03dc1a00 	bicseq	r1, ip, #0, 20
   12154:	040e0000 	streq	r0, [lr], #-0
   12158:	f8080144 			; <UNDEFINED> instruction: 0xf8080144
   1215c:	18000006 	stmdane	r0, {r1, r2}
   12160:	00001638 	andeq	r1, r0, r8, lsr r6
   12164:	12014504 	andne	r4, r1, #4, 10	; 0x1000000
   12168:	000006f8 	strdeq	r0, [r0], -r8
   1216c:	082c1800 	stmdaeq	ip!, {fp, ip}
   12170:	46040000 	strmi	r0, [r4], -r0
   12174:	06f81201 	ldrbteq	r1, [r8], r1, lsl #4
   12178:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
   1217c:	000014ea 	andeq	r1, r0, sl, ror #9
   12180:	12014704 	andne	r4, r1, #4, 14	; 0x100000
   12184:	0000007c 	andeq	r0, r0, ip, ror r0
   12188:	7c09000c 	stcvc	0, cr0, [r9], {12}
   1218c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   12190:	0a000007 	beq	121b4 <__exidx_end+0xc790>
   12194:	00000038 	andeq	r0, r0, r8, lsr r0
   12198:	d01b0002 	andsle	r0, fp, r2
   1219c:	07028504 	streq	r8, [r2, -r4, lsl #10]
   121a0:	0000081d 	andeq	r0, r0, sp, lsl r8
   121a4:	000e5718 	andeq	r5, lr, r8, lsl r7
   121a8:	02870400 	addeq	r0, r7, #0, 8
   121ac:	00003818 	andeq	r3, r0, r8, lsl r8
   121b0:	d8180000 	ldmdale	r8, {}	; <UNPREDICTABLE>
   121b4:	0400000c 	streq	r0, [r0], #-12
   121b8:	cd120288 	lfmgt	f0, 4, [r2, #-544]	; 0xfffffde0
   121bc:	04000005 	streq	r0, [r0], #-5
   121c0:	00043a18 	andeq	r3, r4, r8, lsl sl
   121c4:	02890400 	addeq	r0, r9, #0, 8
   121c8:	00081d10 	andeq	r1, r8, r0, lsl sp
   121cc:	3e180800 	cdpcc	8, 1, cr0, cr8, cr0, {0}
   121d0:	0400000b 	streq	r0, [r0], #-11
   121d4:	b217028a 	andslt	r0, r7, #-1610612728	; 0xa0000008
   121d8:	24000001 	strcs	r0, [r0], #-1
   121dc:	0007e418 	andeq	lr, r7, r8, lsl r4
   121e0:	028b0400 	addeq	r0, fp, #0, 8
   121e4:	0000250f 	andeq	r2, r0, pc, lsl #10
   121e8:	ac184800 	ldcge	8, cr4, [r8], {-0}
   121ec:	0400000e 	streq	r0, [r0], #-14
   121f0:	962c028c 	strtls	r0, [ip], -ip, lsl #5
   121f4:	50000000 	andpl	r0, r0, r0
   121f8:	00007618 	andeq	r7, r0, r8, lsl r6
   121fc:	028d0400 	addeq	r0, sp, #0, 8
   12200:	0006bf1a 	andeq	fp, r6, sl, lsl pc
   12204:	34185800 	ldrcc	r5, [r8], #-2048	; 0xfffff800
   12208:	04000006 	streq	r0, [r0], #-6
   1220c:	0b16028e 	bleq	592c4c <__ccfg+0x572ca4>
   12210:	68000001 	stmdavs	r0, {r0}
   12214:	000ce518 	andeq	lr, ip, r8, lsl r5
   12218:	028f0400 	addeq	r0, pc, #0, 8
   1221c:	00010b16 	andeq	r0, r1, r6, lsl fp
   12220:	68187000 	ldmdavs	r8, {ip, sp, lr}
   12224:	04000000 	streq	r0, [r0], #-0
   12228:	0b160290 	bleq	592c70 <__ccfg+0x572cc8>
   1222c:	78000001 	stmdavc	r0, {r0}
   12230:	000b6518 	andeq	r6, fp, r8, lsl r5
   12234:	02910400 	addseq	r0, r1, #0, 8
   12238:	00082d10 	andeq	r2, r8, r0, lsl sp
   1223c:	17188000 	ldrne	r8, [r8, -r0]
   12240:	04000004 	streq	r0, [r0], #-4
   12244:	3d100292 	lfmcc	f0, 4, [r0, #-584]	; 0xfffffdb8
   12248:	88000008 	stmdahi	r0, {r3}
   1224c:	000c8818 	andeq	r8, ip, r8, lsl r8
   12250:	02930400 	addseq	r0, r3, #0, 8
   12254:	0000250f 	andeq	r2, r0, pc, lsl #10
   12258:	a318a000 	tstge	r8, #0
   1225c:	04000002 	streq	r0, [r0], #-2
   12260:	0b160294 	bleq	592cb8 <__ccfg+0x572d10>
   12264:	a4000001 	strge	r0, [r0], #-1
   12268:	00069a18 	andeq	r9, r6, r8, lsl sl
   1226c:	02950400 	addseq	r0, r5, #0, 8
   12270:	00010b16 	andeq	r0, r1, r6, lsl fp
   12274:	b618ac00 	ldrlt	sl, [r8], -r0, lsl #24
   12278:	04000005 	streq	r0, [r0], #-5
   1227c:	0b160296 	bleq	592cdc <__ccfg+0x572d34>
   12280:	b4000001 	strlt	r0, [r0], #-1
   12284:	00084518 	andeq	r4, r8, r8, lsl r5
   12288:	02970400 	addseq	r0, r7, #0, 8
   1228c:	00010b16 	andeq	r0, r1, r6, lsl fp
   12290:	2318bc00 	tstcs	r8, #0, 24
   12294:	04000006 	streq	r0, [r0], #-6
   12298:	0b160298 	bleq	592d00 <__ccfg+0x572d58>
   1229c:	c4000001 	strgt	r0, [r0], #-1
   122a0:	0008fd18 	andeq	pc, r8, r8, lsl sp	; <UNPREDICTABLE>
   122a4:	02990400 	addseq	r0, r9, #0, 8
   122a8:	00002508 	andeq	r2, r0, r8, lsl #10
   122ac:	0900cc00 	stmdbeq	r0, {sl, fp, lr, pc}
   122b0:	000005d3 	ldrdeq	r0, [r0], -r3
   122b4:	0000082d 	andeq	r0, r0, sp, lsr #16
   122b8:	0000380a 	andeq	r3, r0, sl, lsl #16
   122bc:	09001900 	stmdbeq	r0, {r8, fp, ip}
   122c0:	000005d3 	ldrdeq	r0, [r0], -r3
   122c4:	0000083d 	andeq	r0, r0, sp, lsr r8
   122c8:	0000380a 	andeq	r3, r0, sl, lsl #16
   122cc:	09000700 	stmdbeq	r0, {r8, r9, sl}
   122d0:	000005d3 	ldrdeq	r0, [r0], -r3
   122d4:	0000084d 	andeq	r0, r0, sp, asr #16
   122d8:	0000380a 	andeq	r3, r0, sl, lsl #16
   122dc:	1b001700 	blne	17ee4 <__exidx_end+0x124c0>
   122e0:	029e04f0 	addseq	r0, lr, #240, 8	; 0xf0000000
   122e4:	00087407 	andeq	r7, r8, r7, lsl #8
   122e8:	03c21800 	biceq	r1, r2, #0, 16
   122ec:	a1040000 	mrsge	r0, (UNDEF: 4)
   122f0:	08741b02 	ldmdaeq	r4!, {r1, r8, r9, fp, ip}^
   122f4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   122f8:	00000eff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   122fc:	1802a204 	stmdane	r2, {r2, r9, sp, pc}
   12300:	00000884 	andeq	r0, r0, r4, lsl #17
   12304:	12090078 	andne	r0, r9, #120	; 0x78
   12308:	84000003 	strhi	r0, [r0], #-3
   1230c:	0a000008 	beq	12334 <__exidx_end+0xc910>
   12310:	00000038 	andeq	r0, r0, r8, lsr r0
   12314:	3809001d 	stmdacc	r9, {r0, r2, r3, r4}
   12318:	94000000 	strls	r0, [r0], #-0
   1231c:	0a000008 	beq	12344 <__exidx_end+0xc920>
   12320:	00000038 	andeq	r0, r0, r8, lsr r0
   12324:	f01c001d 			; <UNDEFINED> instruction: 0xf01c001d
   12328:	03028304 	movweq	r8, #8964	; 0x2304
   1232c:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
   12330:	000d4c1d 	andeq	r4, sp, sp, lsl ip
   12334:	029a0400 	addseq	r0, sl, #0, 8
   12338:	0007080b 	andeq	r0, r7, fp, lsl #16
   1233c:	0b4d1d00 	bleq	1359744 <__ccfg+0x133979c>
   12340:	a3040000 	movwge	r0, #16384	; 0x4000
   12344:	084d0b02 	stmdaeq	sp, {r1, r8, r9, fp}^
   12348:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   1234c:	000005d3 	ldrdeq	r0, [r0], -r3
   12350:	000008c9 	andeq	r0, r0, r9, asr #17
   12354:	0000380a 	andeq	r3, r0, sl, lsl #16
   12358:	12001800 	andne	r1, r0, #0, 16
   1235c:	00000eb7 			; <UNDEFINED> instruction: 0x00000eb7
   12360:	b206016c 	andlt	r0, r6, #108, 2
   12364:	00095008 	andeq	r5, r9, r8
   12368:	451f0c00 	ldrmi	r0, [pc, #-3072]	; 11770 <__exidx_end+0xbd4c>
   1236c:	b4060000 	strlt	r0, [r6], #-0
   12370:	000df80b 	andeq	pc, sp, fp, lsl #16
   12374:	d40c0000 	strle	r0, [ip], #-0
   12378:	06000044 	streq	r0, [r0], -r4, asr #32
   1237c:	0e320bb5 	vmoveq.s16	r0, d18[2]
   12380:	0ce00000 	stcleq	0, cr0, [r0]
   12384:	0000436a 	andeq	r4, r0, sl, ror #6
   12388:	610bb706 	tstvs	fp, r6, lsl #14
   1238c:	e400000e 	str	r0, [r0], #-14
   12390:	0042da0c 	subeq	sp, r2, ip, lsl #20
   12394:	0ab90600 	beq	fee53b9c <_estack+0xdee4eb9c>
   12398:	00000025 	andeq	r0, r0, r5, lsr #32
   1239c:	42a60ce8 	adcmi	r0, r6, #232, 24	; 0xe800
   123a0:	ba060000 	blt	1923a8 <__ccfg+0x172400>
   123a4:	0005cd0b 	andeq	ip, r5, fp, lsl #26
   123a8:	d40cec00 	strle	lr, [ip], #-3072	; 0xfffff400
   123ac:	06000042 	streq	r0, [r0], -r2, asr #32
   123b0:	09d212bb 	ldmibeq	r2, {r0, r1, r3, r4, r5, r7, r9, ip}^
   123b4:	13f00000 	mvnsne	r0, #0
   123b8:	000043e8 	andeq	r4, r0, r8, ror #7
   123bc:	670bbd06 	strvs	fp, [fp, -r6, lsl #26]
   123c0:	2800000e 	stmdacs	r0, {r1, r2, r3}
   123c4:	44091301 	strmi	r1, [r9], #-769	; 0xfffffcff
   123c8:	be060000 	cdplt	0, 0, cr0, cr6, cr0, {0}
   123cc:	000e770b 	andeq	r7, lr, fp, lsl #14
   123d0:	13012a00 	movwne	r2, #6656	; 0x1a00
   123d4:	0000435a 	andeq	r4, r0, sl, asr r3
   123d8:	770bbf06 	strvc	fp, [fp, -r6, lsl #30]
   123dc:	4a00000e 	bmi	1241c <__exidx_end+0xc9f8>
   123e0:	04110001 	ldreq	r0, [r1], #-1
   123e4:	000008c9 	andeq	r0, r0, r9, asr #17
   123e8:	0009611e 	andeq	r6, r9, lr, lsl r1
   123ec:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
   123f0:	11000000 	mrsne	r0, (UNDEF: 0)
   123f4:	00095604 	andeq	r5, r9, r4, lsl #12
   123f8:	9c041100 	stflss	f1, [r4], {-0}
   123fc:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
   12400:	00000978 	andeq	r0, r0, r8, ror r9
   12404:	00002516 	andeq	r2, r0, r6, lsl r5
   12408:	04110000 	ldreq	r0, [r1], #-0
   1240c:	0000097e 	andeq	r0, r0, lr, ror r9
   12410:	096d0411 	stmdbeq	sp!, {r0, r4, sl}^
   12414:	6d090000 	stcvs	0, cr0, [r9, #-0]
   12418:	94000006 	strls	r0, [r0], #-6
   1241c:	0a000009 	beq	12448 <__exidx_end+0xca24>
   12420:	00000038 	andeq	r0, r0, r8, lsr r0
   12424:	bd1f0002 	ldclt	0, cr0, [pc, #-8]	; 12424 <__exidx_end+0xca00>
   12428:	0400000a 	streq	r0, [r0], #-10
   1242c:	79170333 	ldmdbvc	r7, {r0, r1, r4, r5, r8, r9}
   12430:	1f000004 	svcne	0x00000004
   12434:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
   12438:	1d033404 	cfstrsne	mvf3, [r3, #-16]
   1243c:	0000047f 	andeq	r0, r0, pc, ror r4
   12440:	09b90411 	ldmibeq	r9!, {r0, r4, sl}
   12444:	ae0e0000 	cdpge	0, 0, cr0, cr14, cr0, {0}
   12448:	20000009 	andcs	r0, r0, r9
   1244c:	00443021 	subeq	r3, r4, r1, lsr #32
   12450:	0e670700 	cdpeq	7, 6, cr0, cr7, cr0, {0}
   12454:	000005cd 	andeq	r0, r0, sp, asr #11
   12458:	0008b103 	andeq	fp, r8, r3, lsl #2
   1245c:	14560800 	ldrbne	r0, [r6], #-2048	; 0xfffff800
   12460:	0000010b 	andeq	r0, r0, fp, lsl #2
   12464:	0042d40f 	subeq	sp, r2, pc, lsl #8
   12468:	2a093800 	bcs	260470 <__ccfg+0x2404c8>
   1246c:	000b1808 	andeq	r1, fp, r8, lsl #16
   12470:	43bd0c00 			; <UNDEFINED> instruction: 0x43bd0c00
   12474:	2c090000 	stccs	0, cr0, [r9], {-0}
   12478:	0005cd09 	andeq	ip, r5, r9, lsl #26
   1247c:	df0c0000 	svcle	0x000c0000
   12480:	09000044 	stmdbeq	r0, {r2, r6}
   12484:	05cd092d 	strbeq	r0, [sp, #2349]	; 0x92d
   12488:	0c040000 	stceq	0, cr0, [r4], {-0}
   1248c:	00004398 	muleq	r0, r8, r3
   12490:	cd092e09 	stcgt	14, cr2, [r9, #-36]	; 0xffffffdc
   12494:	08000005 	stmdaeq	r0, {r0, r2}
   12498:	0042ff0c 	subeq	pc, r2, ip, lsl #30
   1249c:	092f0900 	stmdbeq	pc!, {r8, fp}	; <UNPREDICTABLE>
   124a0:	000005cd 	andeq	r0, r0, sp, asr #11
   124a4:	42960c0c 	addsmi	r0, r6, #12, 24	; 0xc00
   124a8:	30090000 	andcc	r0, r9, r0
   124ac:	0005cd09 	andeq	ip, r5, r9, lsl #26
   124b0:	b90c1000 	stmdblt	ip, {ip}
   124b4:	09000043 	stmdbeq	r0, {r0, r1, r6}
   124b8:	05cd0931 	strbeq	r0, [sp, #2353]	; 0x931
   124bc:	0c140000 	ldceq	0, cr0, [r4], {-0}
   124c0:	000044db 	ldrdeq	r4, [r0], -fp
   124c4:	cd093209 	sfmgt	f3, 4, [r9, #-36]	; 0xffffffdc
   124c8:	18000005 	stmdane	r0, {r0, r2}
   124cc:	0043940c 	subeq	r9, r3, ip, lsl #8
   124d0:	09330900 	ldmdbeq	r3!, {r8, fp}
   124d4:	000005cd 	andeq	r0, r0, sp, asr #11
   124d8:	43fb0c1c 	mvnsmi	r0, #28, 24	; 0x1c00
   124dc:	34090000 	strcc	r0, [r9], #-0
   124e0:	0005cd09 	andeq	ip, r5, r9, lsl #26
   124e4:	da0c2000 	ble	31a4ec <__ccfg+0x2fa544>
   124e8:	09000043 	stmdbeq	r0, {r0, r1, r6}
   124ec:	05cd0935 	strbeq	r0, [sp, #2357]	; 0x935
   124f0:	0c240000 	stceq	0, cr0, [r4], #-0
   124f4:	0000463f 	andeq	r4, r0, pc, lsr r6
   124f8:	d3083609 	movwle	r3, #34313	; 0x8609
   124fc:	28000005 	stmdacs	r0, {r0, r2}
   12500:	0046430c 	subeq	r4, r6, ip, lsl #6
   12504:	08370900 	ldmdaeq	r7!, {r8, fp}
   12508:	000005d3 	ldrdeq	r0, [r0], -r3
   1250c:	43ab0c29 			; <UNDEFINED> instruction: 0x43ab0c29
   12510:	38090000 	stmdacc	r9, {}	; <UNPREDICTABLE>
   12514:	0005d308 	andeq	sp, r5, r8, lsl #6
   12518:	3e0c2a00 	vmlacc.f32	s4, s24, s0
   1251c:	09000044 	stmdbeq	r0, {r2, r6}
   12520:	05d30839 	ldrbeq	r0, [r3, #2105]	; 0x839
   12524:	0c2b0000 	stceq	0, cr0, [fp], #-0
   12528:	00004451 	andeq	r4, r0, r1, asr r4
   1252c:	d3083a09 	movwle	r3, #35337	; 0x8a09
   12530:	2c000005 	stccs	0, cr0, [r0], {5}
   12534:	0042c50c 	subeq	ip, r2, ip, lsl #10
   12538:	083b0900 	ldmdaeq	fp!, {r8, fp}
   1253c:	000005d3 	ldrdeq	r0, [r0], -r3
   12540:	43880c2d 	orrmi	r0, r8, #11520	; 0x2d00
   12544:	3c090000 	stccc	0, cr0, [r9], {-0}
   12548:	0005d308 	andeq	sp, r5, r8, lsl #6
   1254c:	2e0c2e00 	cdpcs	14, 0, cr2, cr12, cr0, {0}
   12550:	09000045 	stmdbeq	r0, {r0, r2, r6}
   12554:	05d3083d 	ldrbeq	r0, [r3, #2109]	; 0x83d
   12558:	0c2f0000 	stceq	0, cr0, [pc], #-0	; 12560 <__exidx_end+0xcb3c>
   1255c:	0000444d 	andeq	r4, r0, sp, asr #8
   12560:	d3083e09 	movwle	r3, #36361	; 0x8e09
   12564:	30000005 	andcc	r0, r0, r5
   12568:	0042c10c 	subeq	ip, r2, ip, lsl #2
   1256c:	083f0900 	ldmdaeq	pc!, {r8, fp}	; <UNPREDICTABLE>
   12570:	000005d3 	ldrdeq	r0, [r0], -r3
   12574:	452a0c31 	strmi	r0, [sl, #-3121]!	; 0xfffff3cf
   12578:	40090000 	andmi	r0, r9, r0
   1257c:	0005d308 	andeq	sp, r5, r8, lsl #6
   12580:	a70c3200 	strge	r3, [ip, -r0, lsl #4]
   12584:	09000043 	stmdbeq	r0, {r0, r1, r6}
   12588:	05d30841 	ldrbeq	r0, [r3, #2113]	; 0x841
   1258c:	0c330000 	ldceq	0, cr0, [r3], #-0
   12590:	0000443a 	andeq	r4, r0, sl, lsr r4
   12594:	d3084209 	movwle	r4, #33289	; 0x8209
   12598:	34000005 	strcc	r0, [r0], #-5
   1259c:	0043840c 	subeq	r8, r3, ip, lsl #8
   125a0:	08430900 	stmdaeq	r3, {r8, fp}^
   125a4:	000005d3 	ldrdeq	r0, [r0], -r3
   125a8:	bf0f0035 	svclt	0x000f0035
   125ac:	08000044 	stmdaeq	r0, {r2, r6}
   125b0:	40083906 	andmi	r3, r8, r6, lsl #18
   125b4:	0c00000b 	stceq	0, cr0, [r0], {11}
   125b8:	00004362 	andeq	r4, r0, r2, ror #6
   125bc:	030f3b06 	movweq	r3, #64262	; 0xfb06
   125c0:	00000006 	andeq	r0, r0, r6
   125c4:	0043e80c 	subeq	lr, r3, ip, lsl #16
   125c8:	0f3c0600 	svceq	0x003c0600
   125cc:	00000603 	andeq	r0, r0, r3, lsl #12
   125d0:	18060004 	stmdane	r6, {r2}
   125d4:	2100000b 	tstcs	r0, fp
   125d8:	00004324 	andeq	r4, r0, r4, lsr #6
   125dc:	40204206 	eormi	r4, r0, r6, lsl #4
   125e0:	0f00000b 	svceq	0x0000000b
   125e4:	0000434c 	andeq	r4, r0, ip, asr #6
   125e8:	0844063c 	stmdaeq	r4, {r2, r3, r4, r5, r9, sl}^
   125ec:	00000c22 	andeq	r0, r0, r2, lsr #24
   125f0:	0042ff0c 	subeq	pc, r2, ip, lsl #30
   125f4:	0f460600 	svceq	0x00460600
   125f8:	00000603 	andeq	r0, r0, r3, lsl #12
   125fc:	42960c00 	addsmi	r0, r6, #0, 24
   12600:	47060000 	strmi	r0, [r6, -r0]
   12604:	0006030f 	andeq	r0, r6, pc, lsl #6
   12608:	b90c0400 	stmdblt	ip, {sl}
   1260c:	06000043 	streq	r0, [r0], -r3, asr #32
   12610:	06030f48 	streq	r0, [r3], -r8, asr #30
   12614:	0c080000 	stceq	0, cr0, [r8], {-0}
   12618:	000044db 	ldrdeq	r4, [r0], -fp
   1261c:	030f4906 	movweq	r4, #63750	; 0xf906
   12620:	0c000006 	stceq	0, cr0, [r0], {6}
   12624:	0043940c 	subeq	r9, r3, ip, lsl #8
   12628:	0f4a0600 	svceq	0x004a0600
   1262c:	00000603 	andeq	r0, r0, r3, lsl #12
   12630:	43fb0c10 	mvnsmi	r0, #16, 24	; 0x1000
   12634:	4b060000 	blmi	19263c <__ccfg+0x172694>
   12638:	0006030f 	andeq	r0, r6, pc, lsl #6
   1263c:	da0c1400 	ble	317644 <__ccfg+0x2f769c>
   12640:	06000043 	streq	r0, [r0], -r3, asr #32
   12644:	06030f4c 	streq	r0, [r3], -ip, asr #30
   12648:	0c180000 	ldceq	0, cr0, [r8], {-0}
   1264c:	0000463f 	andeq	r4, r0, pc, lsr r6
   12650:	030f4d06 	movweq	r4, #64774	; 0xfd06
   12654:	1c000006 	stcne	0, cr0, [r0], {6}
   12658:	0046430c 	subeq	r4, r6, ip, lsl #6
   1265c:	0f4e0600 	svceq	0x004e0600
   12660:	00000603 	andeq	r0, r0, r3, lsl #12
   12664:	43ab0c20 			; <UNDEFINED> instruction: 0x43ab0c20
   12668:	4f060000 	svcmi	0x00060000
   1266c:	0006030f 	andeq	r0, r6, pc, lsl #6
   12670:	3e0c2400 	cfcpyscc	mvf2, mvf12
   12674:	06000044 	streq	r0, [r0], -r4, asr #32
   12678:	06030f50 			; <UNDEFINED> instruction: 0x06030f50
   1267c:	0c280000 	stceq	0, cr0, [r8], #-0
   12680:	00004451 	andeq	r4, r0, r1, asr r4
   12684:	030f5106 	movweq	r5, #61702	; 0xf106
   12688:	2c000006 	stccs	0, cr0, [r0], {6}
   1268c:	0042c50c 	subeq	ip, r2, ip, lsl #10
   12690:	0f520600 	svceq	0x00520600
   12694:	00000603 	andeq	r0, r0, r3, lsl #12
   12698:	43880c30 	orrmi	r0, r8, #48, 24	; 0x3000
   1269c:	53060000 	movwpl	r0, #24576	; 0x6000
   126a0:	0006030f 	andeq	r0, r6, pc, lsl #6
   126a4:	2e0c3400 	cfcpyscs	mvf3, mvf12
   126a8:	06000045 	streq	r0, [r0], -r5, asr #32
   126ac:	06030f54 			; <UNDEFINED> instruction: 0x06030f54
   126b0:	00380000 	eorseq	r0, r8, r0
   126b4:	000b5106 	andeq	r5, fp, r6, lsl #2
   126b8:	450c2100 	strmi	r2, [ip, #-256]	; 0xffffff00
   126bc:	65060000 	strvs	r0, [r6, #-0]
   126c0:	000c2223 	andeq	r2, ip, r3, lsr #4
   126c4:	42e30f00 	rscmi	r0, r3, #0, 30
   126c8:	060c0000 	streq	r0, [ip], -r0
   126cc:	0c680867 	stcleq	8, cr0, [r8], #-412	; 0xfffffe64
   126d0:	bd0c0000 	stclt	0, cr0, [ip, #-0]
   126d4:	06000043 	streq	r0, [r0], -r3, asr #32
   126d8:	06030f69 	streq	r0, [r3], -r9, ror #30
   126dc:	0c000000 	stceq	0, cr0, [r0], {-0}
   126e0:	000044df 	ldrdeq	r4, [r0], -pc	; <UNPREDICTABLE>
   126e4:	030f6a06 	movweq	r6, #64006	; 0xfa06
   126e8:	04000006 	streq	r0, [r0], #-6
   126ec:	0043980c 	subeq	r9, r3, ip, lsl #16
   126f0:	0f6b0600 	svceq	0x006b0600
   126f4:	00000603 	andeq	r0, r0, r3, lsl #12
   126f8:	33060008 	movwcc	r0, #24584	; 0x6008
   126fc:	2100000c 	tstcs	r0, ip
   12700:	00004284 	andeq	r4, r0, r4, lsl #5
   12704:	68227206 	stmdavs	r2!, {r1, r2, r9, ip, sp, lr}
   12708:	0f00000c 	svceq	0x0000000c
   1270c:	0000430f 	andeq	r4, r0, pc, lsl #6
   12710:	087406fc 	ldmdaeq	r4!, {r2, r3, r4, r5, r6, r7, r9, sl}^
   12714:	00000d64 	andeq	r0, r0, r4, ror #26
   12718:	6e6f6d10 	mcrvs	13, 3, r6, cr15, cr0, {0}
   1271c:	0f760600 	svceq	0x00760600
   12720:	00000d69 	andeq	r0, r0, r9, ror #26
   12724:	46580c00 	ldrbmi	r0, [r8], -r0, lsl #24
   12728:	77060000 	strvc	r0, [r6, -r0]
   1272c:	000d690f 	andeq	r6, sp, pc, lsl #18
   12730:	420c3000 	andmi	r3, ip, #0
   12734:	06000003 	streq	r0, [r0], -r3
   12738:	0d790f78 	ldcleq	15, cr0, [r9, #-480]!	; 0xfffffe20
   1273c:	0c600000 	stcleq	0, cr0, [r0], #-0
   12740:	00004504 	andeq	r4, r0, r4, lsl #10
   12744:	790f7906 	stmdbvc	pc, {r1, r2, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
   12748:	7c00000d 	stcvc	0, cr0, [r0], {13}
   1274c:	0043a10c 	subeq	sl, r3, ip, lsl #2
   12750:	0f7a0600 	svceq	0x007a0600
   12754:	00000603 	andeq	r0, r0, r3, lsl #12
   12758:	442a0c98 	strtmi	r0, [sl], #-3224	; 0xfffff368
   1275c:	7b060000 	blvc	192764 <__ccfg+0x1727bc>
   12760:	0006030f 	andeq	r0, r6, pc, lsl #6
   12764:	cb0c9c00 	blgt	33976c <__ccfg+0x3197c4>
   12768:	06000043 	streq	r0, [r0], -r3, asr #32
   1276c:	06030f7c 			; <UNDEFINED> instruction: 0x06030f7c
   12770:	0ca00000 	stceq	0, cr0, [r0]
   12774:	00004334 	andeq	r4, r0, r4, lsr r3
   12778:	890f7d06 	stmdbhi	pc, {r1, r2, r8, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
   1277c:	a400000d 	strge	r0, [r0], #-13
   12780:	0043d10c 	subeq	sp, r3, ip, lsl #2
   12784:	0f7e0600 	svceq	0x007e0600
   12788:	00000603 	andeq	r0, r0, r3, lsl #12
   1278c:	46540cac 	ldrbmi	r0, [r4], -ip, lsr #25
   12790:	7f060000 	svcvc	0x00060000
   12794:	000d690f 	andeq	r6, sp, pc, lsl #18
   12798:	9d0cb000 	stcls	0, cr11, [ip, #-0]
   1279c:	06000044 	streq	r0, [r0], -r4, asr #32
   127a0:	06030f80 	streq	r0, [r3], -r0, lsl #31
   127a4:	0ce00000 	stcleq	0, cr0, [r0]
   127a8:	000044ed 	andeq	r4, r0, sp, ror #9
   127ac:	030f8106 	movweq	r8, #61702	; 0xf106
   127b0:	e4000006 	str	r0, [r0], #-6
   127b4:	61726510 	cmnvs	r2, r0, lsl r5
   127b8:	0f820600 	svceq	0x00820600
   127bc:	00000603 	andeq	r0, r0, r3, lsl #12
   127c0:	44b50ce8 	ldrtmi	r0, [r5], #3304	; 0xce8
   127c4:	83060000 	movwhi	r0, #24576	; 0x6000
   127c8:	0006030f 	andeq	r0, r6, pc, lsl #6
   127cc:	3a0cec00 	bcc	34d7d4 <__ccfg+0x32d82c>
   127d0:	06000043 	streq	r0, [r0], -r3, asr #32
   127d4:	06030f84 	streq	r0, [r3], -r4, lsl #31
   127d8:	0cf00000 	ldcleq	0, cr0, [r0]
   127dc:	000044ca 	andeq	r4, r0, sl, asr #9
   127e0:	030f8506 	movweq	r8, #62726	; 0xf506
   127e4:	f4000006 	vst4.8	{d0-d3}, [r0], r6
   127e8:	0043190c 	subeq	r1, r3, ip, lsl #18
   127ec:	0f860600 	svceq	0x00860600
   127f0:	00000603 	andeq	r0, r0, r3, lsl #12
   127f4:	790600f8 	stmdbvc	r6, {r3, r4, r5, r6, r7}
   127f8:	0900000c 	stmdbeq	r0, {r2, r3}
   127fc:	00000603 	andeq	r0, r0, r3, lsl #12
   12800:	00000d79 	andeq	r0, r0, r9, ror sp
   12804:	0000380a 	andeq	r3, r0, sl, lsl #16
   12808:	09000b00 	stmdbeq	r0, {r8, r9, fp}
   1280c:	00000603 	andeq	r0, r0, r3, lsl #12
   12810:	00000d89 	andeq	r0, r0, r9, lsl #27
   12814:	0000380a 	andeq	r3, r0, sl, lsl #16
   12818:	09000600 	stmdbeq	r0, {r9, sl}
   1281c:	00000603 	andeq	r0, r0, r3, lsl #12
   12820:	00000d99 	muleq	r0, r9, sp
   12824:	0000380a 	andeq	r3, r0, sl, lsl #16
   12828:	21000100 	mrscs	r0, (UNDEF: 16)
   1282c:	000042f0 	strdeq	r4, [r0], -r0
   12830:	641f9a06 	ldrvs	r9, [pc], #-2566	; 12838 <__exidx_end+0xce14>
   12834:	0f00000d 	svceq	0x0000000d
   12838:	000044f6 	strdeq	r4, [r0], -r6
   1283c:	089c0610 	ldmeq	ip, {r4, r9, sl}
   12840:	00000de7 	andeq	r0, r0, r7, ror #27
   12844:	0044ad0c 	subeq	sl, r4, ip, lsl #26
   12848:	0f9e0600 	svceq	0x009e0600
   1284c:	00000603 	andeq	r0, r0, r3, lsl #12
   12850:	44230c00 	strtmi	r0, [r3], #-3072	; 0xfffff400
   12854:	9f060000 	svcls	0x00060000
   12858:	0006030f 	andeq	r0, r6, pc, lsl #6
   1285c:	a60c0400 	strge	r0, [ip], -r0, lsl #8
   12860:	06000044 	streq	r0, [r0], -r4, asr #32
   12864:	06030fa0 	streq	r0, [r3], -r0, lsr #31
   12868:	0c080000 	stceq	0, cr0, [r8], {-0}
   1286c:	00004346 	andeq	r4, r0, r6, asr #6
   12870:	030fa106 	movweq	sl, #61702	; 0xf106
   12874:	0c000006 	stceq	0, cr0, [r0], {6}
   12878:	0da50600 	stceq	6, cr0, [r5]
   1287c:	71210000 			; <UNDEFINED> instruction: 0x71210000
   12880:	06000043 	streq	r0, [r0], -r3, asr #32
   12884:	0de723aa 	stcleq	3, cr2, [r7, #680]!	; 0x2a8
   12888:	d3090000 	movwle	r0, #36864	; 0x9000
   1288c:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
   12890:	0a00000e 	beq	128d0 <__exidx_end+0xceac>
   12894:	00000038 	andeq	r0, r0, r8, lsr r0
   12898:	00380a06 	eorseq	r0, r8, r6, lsl #20
   1289c:	001f0000 	andseq	r0, pc, r0
   128a0:	00002515 	andeq	r2, r0, r5, lsl r5
   128a4:	000e2c00 	andeq	r2, lr, r0, lsl #24
   128a8:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
   128ac:	cd160000 	ldcgt	0, cr0, [r6, #-0]
   128b0:	16000005 	strne	r0, [r0], -r5
   128b4:	0000003f 	andeq	r0, r0, pc, lsr r0
   128b8:	000e2c16 	andeq	r2, lr, r6, lsl ip
   128bc:	04110000 	ldreq	r0, [r1], #-0
   128c0:	000009c6 	andeq	r0, r0, r6, asr #19
   128c4:	0e0e0411 	cfmvdlreq	mvd14, r0
   128c8:	25150000 	ldrcs	r0, [r5, #-0]
   128cc:	5b000000 	blpl	128d4 <__exidx_end+0xceb0>
   128d0:	1600000e 	strne	r0, [r0], -lr
   128d4:	00000479 	andeq	r0, r0, r9, ror r4
   128d8:	000e5b16 	andeq	r5, lr, r6, lsl fp
   128dc:	06031600 	streq	r1, [r3], -r0, lsl #12
   128e0:	2c160000 	ldccs	0, cr0, [r6], {-0}
   128e4:	16000000 	strne	r0, [r0], -r0
   128e8:	00000e2c 	andeq	r0, r0, ip, lsr #28
   128ec:	3f041100 	svccc	0x00041100
   128f0:	11000000 	mrsne	r0, (UNDEF: 0)
   128f4:	000e3804 	andeq	r3, lr, r4, lsl #16
   128f8:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
   128fc:	0e770000 	cdpeq	0, 7, cr0, cr7, cr0, {0}
   12900:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   12904:	01000000 	mrseq	r0, (UNDEF: 0)
   12908:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
   1290c:	0e870000 	cdpeq	0, 8, cr0, cr7, cr0, {0}
   12910:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   12914:	1f000000 	svcne	0x00000000
   12918:	16512200 	ldrbne	r2, [r1], -r0, lsl #4
   1291c:	1f0a0000 	svcne	0x000a0000
   12920:	00011709 	andeq	r1, r1, r9, lsl #14
   12924:	00480c00 	subeq	r0, r8, r0, lsl #24
   12928:	0000aa00 	andeq	sl, r0, r0, lsl #20
   1292c:	289c0100 	ldmcs	ip, {r8}
   12930:	2300000f 	movwcs	r0, #15
   12934:	000042b0 			; <UNDEFINED> instruction: 0x000042b0
   12938:	191a3101 	ldmdbne	sl, {r0, r8, ip, sp}
   1293c:	01000001 	tsteq	r0, r1
   12940:	464f2450 			; <UNDEFINED> instruction: 0x464f2450
   12944:	32010000 	andcc	r0, r1, #0
   12948:	0009b419 	andeq	fp, r9, r9, lsl r4
   1294c:	0055eb00 	subseq	lr, r5, r0, lsl #22
   12950:	0055df00 	subseq	sp, r5, r0, lsl #30
   12954:	463a2400 	ldrtmi	r2, [sl], -r0, lsl #8
   12958:	33010000 	movwcc	r0, #4096	; 0x1000
   1295c:	00002c09 	andeq	r2, r0, r9, lsl #24
   12960:	00566600 	subseq	r6, r6, r0, lsl #12
   12964:	00563e00 	subseq	r3, r6, r0, lsl #28
   12968:	73642500 	cmnvc	r4, #0, 10
   1296c:	42010074 	andmi	r0, r1, #116	; 0x74
   12970:	0005cd09 	andeq	ip, r5, r9, lsl #26
   12974:	0057a500 	subseq	sl, r7, r0, lsl #10
   12978:	00579500 	subseq	r9, r7, r0, lsl #10
   1297c:	72732500 	rsbsvc	r2, r3, #0, 10
   12980:	43010063 	movwmi	r0, #4195	; 0x1063
   12984:	0006030f 	andeq	r0, r6, pc, lsl #6
   12988:	00582800 	subseq	r2, r8, r0, lsl #16
   1298c:	00581800 	subseq	r1, r8, r0, lsl #16
   12990:	42b52600 	adcsmi	r2, r5, #0, 12
   12994:	44010000 	strmi	r0, [r1], #-0
   12998:	000f2809 	andeq	r2, pc, r9, lsl #16
   1299c:	0058b900 	subseq	fp, r8, r0, lsl #18
   129a0:	0058a100 	subseq	sl, r8, r0, lsl #2
   129a4:	453a2600 	ldrmi	r2, [sl, #-1536]!	; 0xfffffa00
   129a8:	45010000 	strmi	r0, [r1, #-0]
   129ac:	000f2e0f 	andeq	r2, pc, pc, lsl #28
   129b0:	0059b000 	subseq	fp, r9, r0
   129b4:	00599800 	subseq	r9, r9, r0, lsl #16
   129b8:	04110000 	ldreq	r0, [r1], #-0
   129bc:	00000083 	andeq	r0, r0, r3, lsl #1
   129c0:	008a0411 	addeq	r0, sl, r1, lsl r4
   129c4:	76000000 	strvc	r0, [r0], -r0
   129c8:	04000009 	streq	r0, [r0], #-9
   129cc:	0043c000 	subeq	ip, r3, r0
   129d0:	46010400 	strmi	r0, [r1], -r0, lsl #8
   129d4:	0c000045 	stceq	0, cr0, [r0], {69}	; 0x45
   129d8:	0000465e 	andeq	r4, r0, lr, asr r6
   129dc:	00004693 	muleq	r0, r3, r6
   129e0:	000048b8 			; <UNDEFINED> instruction: 0x000048b8
   129e4:	0000004c 	andeq	r0, r0, ip, asr #32
   129e8:	00009023 	andeq	r9, r0, r3, lsr #32
   129ec:	2d070402 	cfstrscs	mvf0, [r7, #-8]
   129f0:	03000004 	movweq	r0, #4
   129f4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   129f8:	08020074 	stmdaeq	r2, {r2, r4, r5, r6}
   129fc:	0007f305 	andeq	pc, r7, r5, lsl #6
   12a00:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
   12a04:	00004417 	andeq	r4, r0, r7, lsl r4
   12a08:	000bd004 	andeq	sp, fp, r4
   12a0c:	01650200 	cmneq	r5, r0, lsl #4
   12a10:	00002517 	andeq	r2, r0, r7, lsl r5
   12a14:	06010200 	streq	r0, [r1], -r0, lsl #4
   12a18:	00000c58 	andeq	r0, r0, r8, asr ip
   12a1c:	56080102 	strpl	r0, [r8], -r2, lsl #2
   12a20:	0200000c 	andeq	r0, r0, #12
   12a24:	0a660502 	beq	1993e34 <__ccfg+0x1973e8c>
   12a28:	02020000 	andeq	r0, r2, #0
   12a2c:	000d5307 	andeq	r5, sp, r7, lsl #6
   12a30:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
   12a34:	000007f8 	strdeq	r0, [r0], -r8
   12a38:	28070402 	stmdacs	r7, {r1, sl}
   12a3c:	02000004 	andeq	r0, r0, #4
   12a40:	04230708 	strteq	r0, [r3], #-1800	; 0xfffff8f8
   12a44:	36050000 	strcc	r0, [r5], -r0
   12a48:	0300000e 	movweq	r0, #14
   12a4c:	006a0e2e 	rsbeq	r0, sl, lr, lsr #28
   12a50:	f6050000 			; <UNDEFINED> instruction: 0xf6050000
   12a54:	03000002 	movweq	r0, #2
   12a58:	006a0e74 	rsbeq	r0, sl, r4, ror lr
   12a5c:	04060000 	streq	r0, [r6], #-0
   12a60:	b903a503 	stmdblt	r3, {r0, r1, r8, sl, sp, pc}
   12a64:	07000000 	streq	r0, [r0, -r0]
   12a68:	00000767 	andeq	r0, r0, r7, ror #14
   12a6c:	410ca703 	tstmi	ip, r3, lsl #14
   12a70:	07000000 	streq	r0, [r0, -r0]
   12a74:	00000aaf 	andeq	r0, r0, pc, lsr #21
   12a78:	b913a803 	ldmdblt	r3, {r0, r1, fp, sp, pc}
   12a7c:	00000000 	andeq	r0, r0, r0
   12a80:	00005508 	andeq	r5, r0, r8, lsl #10
   12a84:	0000c900 	andeq	ip, r0, r0, lsl #18
   12a88:	00250900 	eoreq	r0, r5, r0, lsl #18
   12a8c:	00030000 	andeq	r0, r3, r0
   12a90:	a203080a 	andge	r0, r3, #655360	; 0xa0000
   12a94:	0000ed09 	andeq	lr, r0, r9, lsl #26
   12a98:	03900b00 	orrseq	r0, r0, #0, 22
   12a9c:	a4030000 	strge	r0, [r3], #-0
   12aa0:	00002c07 	andeq	r2, r0, r7, lsl #24
   12aa4:	fc0b0000 	stc2	0, cr0, [fp], {-0}
   12aa8:	03000005 	movweq	r0, #5
   12aac:	009705a9 	addseq	r0, r7, r9, lsr #11
   12ab0:	00040000 	andeq	r0, r4, r0
   12ab4:	0008b005 	andeq	fp, r8, r5
   12ab8:	03aa0300 			; <UNDEFINED> instruction: 0x03aa0300
   12abc:	000000c9 	andeq	r0, r0, r9, asr #1
   12ac0:	3d05040c 	cfstrscc	mvf0, [r5, #-48]	; 0xffffffd0
   12ac4:	04000008 	streq	r0, [r0], #-8
   12ac8:	00711916 	rsbseq	r1, r1, r6, lsl r9
   12acc:	4a050000 	bmi	152ad4 <__ccfg+0x132b2c>
   12ad0:	05000002 	streq	r0, [r0, #-2]
   12ad4:	002c0d0c 	eoreq	r0, ip, ip, lsl #26
   12ad8:	25050000 	strcs	r0, [r5, #-0]
   12adc:	04000007 	streq	r0, [r0], #-7
   12ae0:	01071b23 	tsteq	r7, r3, lsr #22
   12ae4:	290d0000 	stmdbcs	sp, {}	; <UNPREDICTABLE>
   12ae8:	18000003 	stmdane	r0, {r0, r1}
   12aec:	79083404 	stmdbvc	r8, {r2, sl, ip, sp}
   12af0:	0b000001 	bleq	12afc <__exidx_end+0xd0d8>
   12af4:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
   12af8:	79133604 	ldmdbvc	r3, {r2, r9, sl, ip, sp}
   12afc:	00000001 	andeq	r0, r0, r1
   12b00:	006b5f0e 	rsbeq	r5, fp, lr, lsl #30
   12b04:	2c073704 	stccs	7, cr3, [r7], {4}
   12b08:	04000000 	streq	r0, [r0], #-0
   12b0c:	000b5d0b 	andeq	r5, fp, fp, lsl #26
   12b10:	0b370400 	bleq	dd3b18 <__ccfg+0xdb3b70>
   12b14:	0000002c 	andeq	r0, r0, ip, lsr #32
   12b18:	43e20b08 	mvnmi	r0, #8, 22	; 0x2000
   12b1c:	37040000 	strcc	r0, [r4, -r0]
   12b20:	00002c14 	andeq	r2, r0, r4, lsl ip
   12b24:	570b0c00 	strpl	r0, [fp, -r0, lsl #24]
   12b28:	04000004 	streq	r0, [r0], #-4
   12b2c:	002c1b37 	eoreq	r1, ip, r7, lsr fp
   12b30:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
   12b34:	0400785f 	streq	r7, [r0], #-2143	; 0xfffff7a1
   12b38:	017f0b38 	cmneq	pc, r8, lsr fp	; <UNPREDICTABLE>
   12b3c:	00140000 	andseq	r0, r4, r0
   12b40:	011f040f 	tsteq	pc, pc, lsl #8
   12b44:	fb080000 	blx	212b4e <__ccfg+0x1f2ba6>
   12b48:	8f000000 	svchi	0x00000000
   12b4c:	09000001 	stmdbeq	r0, {r0}
   12b50:	00000025 	andeq	r0, r0, r5, lsr #32
   12b54:	780d0000 	stmdavc	sp, {}	; <UNPREDICTABLE>
   12b58:	2400000b 	strcs	r0, [r0], #-11
   12b5c:	12083c04 	andne	r3, r8, #4, 24	; 0x400
   12b60:	0b000002 	bleq	12b70 <__exidx_end+0xd14c>
   12b64:	00000567 	andeq	r0, r0, r7, ror #10
   12b68:	2c093e04 	stccs	14, cr3, [r9], {4}
   12b6c:	00000000 	andeq	r0, r0, r0
   12b70:	0003b90b 	andeq	fp, r3, fp, lsl #18
   12b74:	093f0400 	ldmdbeq	pc!, {sl}	; <UNPREDICTABLE>
   12b78:	0000002c 	andeq	r0, r0, ip, lsr #32
   12b7c:	035a0b04 	cmpeq	sl, #4, 22	; 0x1000
   12b80:	40040000 	andmi	r0, r4, r0
   12b84:	00002c09 	andeq	r2, r0, r9, lsl #24
   12b88:	6f0b0800 	svcvs	0x000b0800
   12b8c:	04000006 	streq	r0, [r0], #-6
   12b90:	002c0941 	eoreq	r0, ip, r1, asr #18
   12b94:	0b0c0000 	bleq	312b9c <__ccfg+0x2f2bf4>
   12b98:	0000094f 	andeq	r0, r0, pc, asr #18
   12b9c:	2c094204 	sfmcs	f4, 4, [r9], {4}
   12ba0:	10000000 	andne	r0, r0, r0
   12ba4:	000ac90b 	andeq	ip, sl, fp, lsl #18
   12ba8:	09430400 	stmdbeq	r3, {sl}^
   12bac:	0000002c 	andeq	r0, r0, ip, lsr #32
   12bb0:	033d0b14 	teqeq	sp, #20, 22	; 0x5000
   12bb4:	44040000 	strmi	r0, [r4], #-0
   12bb8:	00002c09 	andeq	r2, r0, r9, lsl #24
   12bbc:	700b1800 	andvc	r1, fp, r0, lsl #16
   12bc0:	04000005 	streq	r0, [r0], #-5
   12bc4:	002c0945 	eoreq	r0, ip, r5, asr #18
   12bc8:	0b1c0000 	bleq	712bd0 <__ccfg+0x6f2c28>
   12bcc:	000008eb 	andeq	r0, r0, fp, ror #17
   12bd0:	2c094604 	stccs	6, cr4, [r9], {4}
   12bd4:	20000000 	andcs	r0, r0, r0
   12bd8:	00321000 	eorseq	r1, r2, r0
   12bdc:	01080000 	mrseq	r0, (UNDEF: 8)
   12be0:	57084f04 	strpl	r4, [r8, -r4, lsl #30]
   12be4:	0b000002 	bleq	12bf4 <__exidx_end+0xd1d0>
   12be8:	00000d1a 	andeq	r0, r0, sl, lsl sp
   12bec:	570a5004 	strpl	r5, [sl, -r4]
   12bf0:	00000002 	andeq	r0, r0, r2
   12bf4:	000c120b 	andeq	r1, ip, fp, lsl #4
   12bf8:	09510400 	ldmdbeq	r1, {sl}^
   12bfc:	00000257 	andeq	r0, r0, r7, asr r2
   12c00:	0db31180 	ldfeqs	f1, [r3, #512]!	; 0x200
   12c04:	53040000 	movwpl	r0, #16384	; 0x4000
   12c08:	0000fb0a 	andeq	pc, r0, sl, lsl #22
   12c0c:	11010000 	mrsne	r0, (UNDEF: 1)
   12c10:	00000ea4 	andeq	r0, r0, r4, lsr #29
   12c14:	fb0a5604 	blx	2a842e <__ccfg+0x288486>
   12c18:	04000000 	streq	r0, [r0], #-0
   12c1c:	f9080001 			; <UNDEFINED> instruction: 0xf9080001
   12c20:	67000000 	strvs	r0, [r0, -r0]
   12c24:	09000002 	stmdbeq	r0, {r1}
   12c28:	00000025 	andeq	r0, r0, r5, lsr #32
   12c2c:	1110001f 	tstne	r0, pc, lsl r0
   12c30:	9000000a 	andls	r0, r0, sl
   12c34:	08620401 	stmdaeq	r2!, {r0, sl}^
   12c38:	000002aa 	andeq	r0, r0, sl, lsr #5
   12c3c:	000eb10b 	andeq	fp, lr, fp, lsl #2
   12c40:	12630400 	rsbne	r0, r3, #0, 8
   12c44:	000002aa 	andeq	r0, r0, sl, lsr #5
   12c48:	057f0b00 	ldrbeq	r0, [pc, #-2816]!	; 12150 <__exidx_end+0xc72c>
   12c4c:	64040000 	strvs	r0, [r4], #-0
   12c50:	00002c06 	andeq	r2, r0, r6, lsl #24
   12c54:	fe0b0400 	cdp2	4, 0, cr0, cr11, cr0, {0}
   12c58:	04000002 	streq	r0, [r0], #-2
   12c5c:	02b00966 	adcseq	r0, r0, #1671168	; 0x198000
   12c60:	0b080000 	bleq	212c68 <__ccfg+0x1f2cc0>
   12c64:	00000032 	andeq	r0, r0, r2, lsr r0
   12c68:	121e6704 	andsne	r6, lr, #4, 14	; 0x100000
   12c6c:	88000002 	stmdahi	r0, {r1}
   12c70:	67040f00 	strvs	r0, [r4, -r0, lsl #30]
   12c74:	08000002 	stmdaeq	r0, {r1}
   12c78:	000002c0 	andeq	r0, r0, r0, asr #5
   12c7c:	000002c0 	andeq	r0, r0, r0, asr #5
   12c80:	00002509 	andeq	r2, r0, r9, lsl #10
   12c84:	0f001f00 	svceq	0x00001f00
   12c88:	0002c604 	andeq	ip, r2, r4, lsl #12
   12c8c:	b20d1200 	andlt	r1, sp, #0, 4
   12c90:	0800000c 	stmdaeq	r0, {r2, r3}
   12c94:	ef087a04 	svc	0x00087a04
   12c98:	0b000002 	bleq	12ca8 <__exidx_end+0xd284>
   12c9c:	00000cc4 	andeq	r0, r0, r4, asr #25
   12ca0:	ef117b04 	svc	0x00117b04
   12ca4:	00000002 	andeq	r0, r0, r2
   12ca8:	001d8d0b 	andseq	r8, sp, fp, lsl #26
   12cac:	067c0400 	ldrbteq	r0, [ip], -r0, lsl #8
   12cb0:	0000002c 	andeq	r0, r0, ip, lsr #32
   12cb4:	040f0004 	streq	r0, [pc], #-4	; 12cbc <__exidx_end+0xd298>
   12cb8:	00000055 	andeq	r0, r0, r5, asr r0
   12cbc:	00044f0d 	andeq	r4, r4, sp, lsl #30
   12cc0:	ba046800 	blt	12ccc8 <__ccfg+0x10cd20>
   12cc4:	00043808 	andeq	r3, r4, r8, lsl #16
   12cc8:	705f0e00 	subsvc	r0, pc, r0, lsl #28
   12ccc:	12bb0400 	adcsne	r0, fp, #0, 8
   12cd0:	000002ef 	andeq	r0, r0, pc, ror #5
   12cd4:	725f0e00 	subsvc	r0, pc, #0, 28
   12cd8:	07bc0400 	ldreq	r0, [ip, r0, lsl #8]!
   12cdc:	0000002c 	andeq	r0, r0, ip, lsr #32
   12ce0:	775f0e04 	ldrbvc	r0, [pc, -r4, lsl #28]
   12ce4:	07bd0400 	ldreq	r0, [sp, r0, lsl #8]!
   12ce8:	0000002c 	andeq	r0, r0, ip, lsr #32
   12cec:	01bb0b08 			; <UNDEFINED> instruction: 0x01bb0b08
   12cf0:	be040000 	cdplt	0, 0, cr0, cr4, cr0, {0}
   12cf4:	00005c09 	andeq	r5, r0, r9, lsl #24
   12cf8:	540b0c00 	strpl	r0, [fp], #-3072	; 0xfffff400
   12cfc:	04000008 	streq	r0, [r0], #-8
   12d00:	005c09bf 	ldrheq	r0, [ip], #-159	; 0xffffff61
   12d04:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
   12d08:	0066625f 	rsbeq	r6, r6, pc, asr r2
   12d0c:	c711c004 	ldrgt	ip, [r1, -r4]
   12d10:	10000002 	andne	r0, r0, r2
   12d14:	0001b20b 	andeq	fp, r1, fp, lsl #4
   12d18:	07c10400 	strbeq	r0, [r1, r0, lsl #8]
   12d1c:	0000002c 	andeq	r0, r0, ip, lsr #32
   12d20:	03030b18 	movweq	r0, #15128	; 0x3b18
   12d24:	c8040000 	stmdagt	r4, {}	; <UNPREDICTABLE>
   12d28:	0000f90a 	andeq	pc, r0, sl, lsl #18
   12d2c:	1c0b1c00 	stcne	12, cr1, [fp], {-0}
   12d30:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
   12d34:	05bc1dca 	ldreq	r1, [ip, #3530]!	; 0xdca
   12d38:	0b200000 	bleq	812d40 <__ccfg+0x7f2d98>
   12d3c:	00001ce3 	andeq	r1, r0, r3, ror #25
   12d40:	e61dcc04 	ldr	ip, [sp], -r4, lsl #24
   12d44:	24000005 	strcs	r0, [r0], #-5
   12d48:	000ed10b 	andeq	sp, lr, fp, lsl #2
   12d4c:	0dcf0400 	cfstrdeq	mvd0, [pc]	; 12d54 <__exidx_end+0xd330>
   12d50:	0000060a 	andeq	r0, r0, sl, lsl #12
   12d54:	1cd10b28 	vldmiane	r1, {d16-<overflow reg d35>}
   12d58:	d0040000 	andle	r0, r4, r0
   12d5c:	00062409 	andeq	r2, r6, r9, lsl #8
   12d60:	5f0e2c00 	svcpl	0x000e2c00
   12d64:	04006275 	streq	r6, [r0], #-629	; 0xfffffd8b
   12d68:	02c711d3 	sbceq	r1, r7, #-1073741772	; 0xc0000034
   12d6c:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
   12d70:	0070755f 	rsbseq	r7, r0, pc, asr r5
   12d74:	ef12d404 	svc	0x0012d404
   12d78:	38000002 	stmdacc	r0, {r1}
   12d7c:	72755f0e 	rsbsvc	r5, r5, #14, 30	; 0x38
   12d80:	07d50400 	ldrbeq	r0, [r5, r0, lsl #8]
   12d84:	0000002c 	andeq	r0, r0, ip, lsr #32
   12d88:	0f080b3c 	svceq	0x00080b3c
   12d8c:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
   12d90:	00062a11 	andeq	r2, r6, r1, lsl sl
   12d94:	510b4000 	mrspl	r4, (UNDEF: 11)
   12d98:	0400000e 	streq	r0, [r0], #-14
   12d9c:	063a11d9 			; <UNDEFINED> instruction: 0x063a11d9
   12da0:	0e430000 	cdpeq	0, 4, cr0, cr3, cr0, {0}
   12da4:	00626c5f 	rsbeq	r6, r2, pc, asr ip
   12da8:	c711dc04 	ldrgt	sp, [r1, -r4, lsl #24]
   12dac:	44000002 	strmi	r0, [r0], #-2
   12db0:	000b6f0b 	andeq	r6, fp, fp, lsl #30
   12db4:	07df0400 	ldrbeq	r0, [pc, r0, lsl #8]
   12db8:	0000002c 	andeq	r0, r0, ip, lsr #32
   12dbc:	04830b4c 	streq	r0, [r3], #2892	; 0xb4c
   12dc0:	e0040000 	and	r0, r4, r0
   12dc4:	00007f0a 	andeq	r7, r0, sl, lsl #30
   12dc8:	400b5000 	andmi	r5, fp, r0
   12dcc:	04000047 	streq	r0, [r0], #-71	; 0xffffffb9
   12dd0:	045612e3 	ldrbeq	r1, [r6], #-739	; 0xfffffd1d
   12dd4:	0b540000 	bleq	1512ddc <__ccfg+0x14f2e34>
   12dd8:	00000b95 	muleq	r0, r5, fp
   12ddc:	130ce704 	movwne	lr, #50948	; 0xc704
   12de0:	58000001 	stmdapl	r0, {r0}
   12de4:	000a190b 	andeq	r1, sl, fp, lsl #18
   12de8:	0ee90400 	cdpeq	4, 14, cr0, cr9, cr0, {0}
   12dec:	000000ed 	andeq	r0, r0, sp, ror #1
   12df0:	0e840b5c 			; <UNDEFINED> instruction: 0x0e840b5c
   12df4:	ea040000 	b	112dfc <__ccfg+0xf2e54>
   12df8:	00002c09 	andeq	r2, r0, r9, lsl #24
   12dfc:	13006400 	movwne	r6, #1024	; 0x400
   12e00:	0000002c 	andeq	r0, r0, ip, lsr #32
   12e04:	00000456 	andeq	r0, r0, r6, asr r4
   12e08:	00045614 	andeq	r5, r4, r4, lsl r6
   12e0c:	00f91400 	rscseq	r1, r9, r0, lsl #8
   12e10:	aa140000 	bge	512e18 <__ccfg+0x4f2e70>
   12e14:	14000005 	strne	r0, [r0], #-5
   12e18:	0000002c 	andeq	r0, r0, ip, lsr #32
   12e1c:	61040f00 	tstvs	r4, r0, lsl #30
   12e20:	15000004 	strne	r0, [r0, #-4]
   12e24:	00000456 	andeq	r0, r0, r6, asr r4
   12e28:	000d4c16 	andeq	r4, sp, r6, lsl ip
   12e2c:	04042800 	streq	r2, [r4], #-2048	; 0xfffff800
   12e30:	aa080265 	bge	2137cc <__ccfg+0x1f3824>
   12e34:	17000005 	strne	r0, [r0, -r5]
   12e38:	000008ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   12e3c:	07026704 	streq	r6, [r2, -r4, lsl #14]
   12e40:	0000002c 	andeq	r0, r0, ip, lsr #32
   12e44:	07dd1700 	ldrbeq	r1, [sp, r0, lsl #14]
   12e48:	6c040000 	stcvs	0, cr0, [r4], {-0}
   12e4c:	06960b02 	ldreq	r0, [r6], r2, lsl #22
   12e50:	17040000 	strne	r0, [r4, -r0]
   12e54:	000002ee 	andeq	r0, r0, lr, ror #5
   12e58:	14026c04 	strne	r6, [r2], #-3076	; 0xfffff3fc
   12e5c:	00000696 	muleq	r0, r6, r6
   12e60:	0ef71708 	cdpeq	7, 15, cr1, cr7, cr8, {0}
   12e64:	6c040000 	stcvs	0, cr0, [r4], {-0}
   12e68:	06961e02 	ldreq	r1, [r6], r2, lsl #28
   12e6c:	170c0000 	strne	r0, [ip, -r0]
   12e70:	0000057a 	andeq	r0, r0, sl, ror r5
   12e74:	08026e04 	stmdaeq	r2, {r2, r9, sl, fp, sp, lr}
   12e78:	0000002c 	andeq	r0, r0, ip, lsr #32
   12e7c:	04cf1710 	strbeq	r1, [pc], #1808	; 12e84 <__exidx_end+0xd460>
   12e80:	6f040000 	svcvs	0x00040000
   12e84:	08960802 	ldmeq	r6, {r1, fp}
   12e88:	17140000 	ldrne	r0, [r4, -r0]
   12e8c:	00000e64 	andeq	r0, r0, r4, ror #28
   12e90:	07027204 	streq	r7, [r2, -r4, lsl #4]
   12e94:	0000002c 	andeq	r0, r0, ip, lsr #32
   12e98:	428e1730 	addmi	r1, lr, #48, 14	; 0xc00000
   12e9c:	73040000 	movwvc	r0, #16384	; 0x4000
   12ea0:	08ab1602 	stmiaeq	fp!, {r1, r9, sl, ip}
   12ea4:	17340000 	ldrne	r0, [r4, -r0]!
   12ea8:	00000785 	andeq	r0, r0, r5, lsl #15
   12eac:	07027504 	streq	r7, [r2, -r4, lsl #10]
   12eb0:	0000002c 	andeq	r0, r0, ip, lsr #32
   12eb4:	087f1738 	ldmdaeq	pc!, {r3, r4, r5, r8, r9, sl, ip}^	; <UNPREDICTABLE>
   12eb8:	77040000 	strvc	r0, [r4, -r0]
   12ebc:	08bc0a02 	ldmeq	ip!, {r1, r9, fp}
   12ec0:	173c0000 	ldrne	r0, [ip, -r0]!
   12ec4:	00000352 	andeq	r0, r0, r2, asr r3
   12ec8:	13027a04 	movwne	r7, #10756	; 0x2a04
   12ecc:	00000179 	andeq	r0, r0, r9, ror r1
   12ed0:	040d1740 	streq	r1, [sp], #-1856	; 0xfffff8c0
   12ed4:	7b040000 	blvc	112edc <__ccfg+0xf2f34>
   12ed8:	002c0702 	eoreq	r0, ip, r2, lsl #14
   12edc:	17440000 	strbne	r0, [r4, -r0]
   12ee0:	00000604 	andeq	r0, r0, r4, lsl #12
   12ee4:	13027c04 	movwne	r7, #11268	; 0x2c04
   12ee8:	00000179 	andeq	r0, r0, r9, ror r1
   12eec:	081a1748 	ldmdaeq	sl, {r3, r6, r8, r9, sl, ip}
   12ef0:	7d040000 	stcvc	0, cr0, [r4, #-0]
   12ef4:	08c21402 	stmiaeq	r2, {r1, sl, ip}^
   12ef8:	174c0000 	strbne	r0, [ip, -r0]
   12efc:	00000b55 	andeq	r0, r0, r5, asr fp
   12f00:	07028004 	streq	r8, [r2, -r4]
   12f04:	0000002c 	andeq	r0, r0, ip, lsr #32
   12f08:	0c4e1750 	mcrreq	7, 5, r1, lr, cr0
   12f0c:	81040000 	mrshi	r0, (UNDEF: 4)
   12f10:	05aa0902 	streq	r0, [sl, #2306]!	; 0x902
   12f14:	17540000 	ldrbne	r0, [r4, -r0]
   12f18:	00000c68 	andeq	r0, r0, r8, ror #24
   12f1c:	0702a404 	streq	sl, [r2, -r4, lsl #8]
   12f20:	00000871 	andeq	r0, r0, r1, ror r8
   12f24:	0a111858 	beq	45908c <__ccfg+0x4390e4>
   12f28:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
   12f2c:	02aa1302 	adceq	r1, sl, #134217728	; 0x8000000
   12f30:	01480000 	mrseq	r0, (UNDEF: 72)
   12f34:	0006a918 	andeq	sl, r6, r8, lsl r9
   12f38:	02a90400 	adceq	r0, r9, #0, 8
   12f3c:	00026712 	andeq	r6, r2, r2, lsl r7
   12f40:	18014c00 	stmdane	r1, {sl, fp, lr}
   12f44:	00000690 	muleq	r0, r0, r6
   12f48:	0c02ad04 	stceq	13, cr10, [r2], {4}
   12f4c:	000008d3 	ldrdeq	r0, [r0], -r3
   12f50:	d01802dc 			; <UNDEFINED> instruction: 0xd01802dc
   12f54:	0400000c 	streq	r0, [r0], #-12
   12f58:	571002b2 			; <UNDEFINED> instruction: 0x571002b2
   12f5c:	e0000006 	and	r0, r0, r6
   12f60:	0aa11802 	beq	fe858f70 <_estack+0xde853f70>
   12f64:	b4040000 	strlt	r0, [r4], #-0
   12f68:	08df0a02 	ldmeq	pc, {r1, r9, fp}^	; <UNPREDICTABLE>
   12f6c:	02ec0000 	rsceq	r0, ip, #0
   12f70:	b0040f00 	andlt	r0, r4, r0, lsl #30
   12f74:	02000005 	andeq	r0, r0, #5
   12f78:	0c5f0801 	mrrceq	8, 0, r0, pc, cr1	; <UNPREDICTABLE>
   12f7c:	b0150000 	andslt	r0, r5, r0
   12f80:	0f000005 	svceq	0x00000005
   12f84:	00043804 	andeq	r3, r4, r4, lsl #16
   12f88:	002c1300 	eoreq	r1, ip, r0, lsl #6
   12f8c:	05e00000 	strbeq	r0, [r0, #0]!
   12f90:	56140000 	ldrpl	r0, [r4], -r0
   12f94:	14000004 	strne	r0, [r0], #-4
   12f98:	000000f9 	strdeq	r0, [r0], -r9
   12f9c:	0005e014 	andeq	lr, r5, r4, lsl r0
   12fa0:	002c1400 	eoreq	r1, ip, r0, lsl #8
   12fa4:	0f000000 	svceq	0x00000000
   12fa8:	0005b704 	andeq	fp, r5, r4, lsl #14
   12fac:	c2040f00 	andgt	r0, r4, #0, 30
   12fb0:	13000005 	movwne	r0, #5
   12fb4:	0000008b 	andeq	r0, r0, fp, lsl #1
   12fb8:	0000060a 	andeq	r0, r0, sl, lsl #12
   12fbc:	00045614 	andeq	r5, r4, r4, lsl r6
   12fc0:	00f91400 	rscseq	r1, r9, r0, lsl #8
   12fc4:	8b140000 	blhi	512fcc <__ccfg+0x4f3024>
   12fc8:	14000000 	strne	r0, [r0], #-0
   12fcc:	0000002c 	andeq	r0, r0, ip, lsr #32
   12fd0:	ec040f00 	stc	15, cr0, [r4], {-0}
   12fd4:	13000005 	movwne	r0, #5
   12fd8:	0000002c 	andeq	r0, r0, ip, lsr #32
   12fdc:	00000624 	andeq	r0, r0, r4, lsr #12
   12fe0:	00045614 	andeq	r5, r4, r4, lsl r6
   12fe4:	00f91400 	rscseq	r1, r9, r0, lsl #8
   12fe8:	0f000000 	svceq	0x00000000
   12fec:	00061004 	andeq	r1, r6, r4
   12ff0:	00550800 	subseq	r0, r5, r0, lsl #16
   12ff4:	063a0000 	ldrteq	r0, [sl], -r0
   12ff8:	25090000 	strcs	r0, [r9, #-0]
   12ffc:	02000000 	andeq	r0, r0, #0
   13000:	00550800 	subseq	r0, r5, r0, lsl #16
   13004:	064a0000 	strbeq	r0, [sl], -r0
   13008:	25090000 	strcs	r0, [r9, #-0]
   1300c:	00000000 	andeq	r0, r0, r0
   13010:	04700400 	ldrbteq	r0, [r0], #-1024	; 0xfffffc00
   13014:	24040000 	strcs	r0, [r4], #-0
   13018:	02f51a01 	rscseq	r1, r5, #4096	; 0x1000
   1301c:	ca190000 	bgt	653024 <__ccfg+0x63307c>
   13020:	0c00000c 	stceq	0, cr0, [r0], {12}
   13024:	08012804 	stmdaeq	r1, {r2, fp, sp}
   13028:	00000690 	muleq	r0, r0, r6
   1302c:	000eb117 	andeq	fp, lr, r7, lsl r1
   13030:	012a0400 			; <UNDEFINED> instruction: 0x012a0400
   13034:	00069011 	andeq	r9, r6, r1, lsl r0
   13038:	c9170000 	ldmdbgt	r7, {}	; <UNPREDICTABLE>
   1303c:	0400000b 	streq	r0, [r0], #-11
   13040:	2c07012b 	stfcss	f0, [r7], {43}	; 0x2b
   13044:	04000000 	streq	r0, [r0], #-0
   13048:	00076d17 	andeq	r6, r7, r7, lsl sp
   1304c:	012c0400 			; <UNDEFINED> instruction: 0x012c0400
   13050:	0006960b 	andeq	r9, r6, fp, lsl #12
   13054:	0f000800 	svceq	0x00000800
   13058:	00065704 	andeq	r5, r6, r4, lsl #14
   1305c:	4a040f00 	bmi	116c64 <__ccfg+0xf6cbc>
   13060:	19000006 	stmdbne	r0, {r1, r2}
   13064:	000003dc 	ldrdeq	r0, [r0], -ip
   13068:	0144040e 	cmpeq	r4, lr, lsl #8
   1306c:	0006d508 	andeq	sp, r6, r8, lsl #10
   13070:	16381700 	ldrtne	r1, [r8], -r0, lsl #14
   13074:	45040000 	strmi	r0, [r4, #-0]
   13078:	06d51201 	ldrbeq	r1, [r5], r1, lsl #4
   1307c:	17000000 	strne	r0, [r0, -r0]
   13080:	0000082c 	andeq	r0, r0, ip, lsr #16
   13084:	12014604 	andne	r4, r1, #4, 12	; 0x400000
   13088:	000006d5 	ldrdeq	r0, [r0], -r5
   1308c:	14ea1706 	strbtne	r1, [sl], #1798	; 0x706
   13090:	47040000 	strmi	r0, [r4, -r0]
   13094:	00631201 	rsbeq	r1, r3, r1, lsl #4
   13098:	000c0000 	andeq	r0, ip, r0
   1309c:	00006308 	andeq	r6, r0, r8, lsl #6
   130a0:	0006e500 	andeq	lr, r6, r0, lsl #10
   130a4:	00250900 	eoreq	r0, r5, r0, lsl #18
   130a8:	00020000 	andeq	r0, r2, r0
   130ac:	8504d01a 	strhi	sp, [r4, #-26]	; 0xffffffe6
   130b0:	07fa0702 	ldrbeq	r0, [sl, r2, lsl #14]!
   130b4:	57170000 	ldrpl	r0, [r7, -r0]
   130b8:	0400000e 	streq	r0, [r0], #-14
   130bc:	25180287 	ldrcs	r0, [r8, #-647]	; 0xfffffd79
   130c0:	00000000 	andeq	r0, r0, r0
   130c4:	000cd817 	andeq	sp, ip, r7, lsl r8
   130c8:	02880400 	addeq	r0, r8, #0, 8
   130cc:	0005aa12 	andeq	sl, r5, r2, lsl sl
   130d0:	3a170400 	bcc	5d40d8 <__ccfg+0x5b4130>
   130d4:	04000004 	streq	r0, [r0], #-4
   130d8:	fa100289 	blx	413b04 <__ccfg+0x3f3b5c>
   130dc:	08000007 	stmdaeq	r0, {r0, r1, r2}
   130e0:	000b3e17 	andeq	r3, fp, r7, lsl lr
   130e4:	028a0400 	addeq	r0, sl, #0, 8
   130e8:	00018f17 	andeq	r8, r1, r7, lsl pc
   130ec:	e4172400 	ldr	r2, [r7], #-1024	; 0xfffffc00
   130f0:	04000007 	streq	r0, [r0], #-7
   130f4:	2c0f028b 	sfmcs	f0, 4, [pc], {139}	; 0x8b
   130f8:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
   130fc:	000eac17 	andeq	sl, lr, r7, lsl ip
   13100:	028c0400 	addeq	r0, ip, #0, 8
   13104:	0000782c 	andeq	r7, r0, ip, lsr #16
   13108:	76175000 	ldrvc	r5, [r7], -r0
   1310c:	04000000 	streq	r0, [r0], #-0
   13110:	9c1a028d 	lfmls	f0, 4, [sl], {141}	; 0x8d
   13114:	58000006 	stmdapl	r0, {r1, r2}
   13118:	00063417 	andeq	r3, r6, r7, lsl r4
   1311c:	028e0400 	addeq	r0, lr, #0, 8
   13120:	0000ed16 	andeq	lr, r0, r6, lsl sp
   13124:	e5176800 	ldr	r6, [r7, #-2048]	; 0xfffff800
   13128:	0400000c 	streq	r0, [r0], #-12
   1312c:	ed16028f 	lfm	f0, 4, [r6, #-572]	; 0xfffffdc4
   13130:	70000000 	andvc	r0, r0, r0
   13134:	00006817 	andeq	r6, r0, r7, lsl r8
   13138:	02900400 	addseq	r0, r0, #0, 8
   1313c:	0000ed16 	andeq	lr, r0, r6, lsl sp
   13140:	65177800 	ldrvs	r7, [r7, #-2048]	; 0xfffff800
   13144:	0400000b 	streq	r0, [r0], #-11
   13148:	0a100291 	beq	413b94 <__ccfg+0x3f3bec>
   1314c:	80000008 	andhi	r0, r0, r8
   13150:	00041717 	andeq	r1, r4, r7, lsl r7
   13154:	02920400 	addseq	r0, r2, #0, 8
   13158:	00081a10 	andeq	r1, r8, r0, lsl sl
   1315c:	88178800 	ldmdahi	r7, {fp, pc}
   13160:	0400000c 	streq	r0, [r0], #-12
   13164:	2c0f0293 	sfmcs	f0, 4, [pc], {147}	; 0x93
   13168:	a0000000 	andge	r0, r0, r0
   1316c:	0002a317 	andeq	sl, r2, r7, lsl r3
   13170:	02940400 	addseq	r0, r4, #0, 8
   13174:	0000ed16 	andeq	lr, r0, r6, lsl sp
   13178:	9a17a400 	bls	5fc180 <__ccfg+0x5dc1d8>
   1317c:	04000006 	streq	r0, [r0], #-6
   13180:	ed160295 	lfm	f0, 4, [r6, #-596]	; 0xfffffdac
   13184:	ac000000 	stcge	0, cr0, [r0], {-0}
   13188:	0005b617 	andeq	fp, r5, r7, lsl r6
   1318c:	02960400 	addseq	r0, r6, #0, 8
   13190:	0000ed16 	andeq	lr, r0, r6, lsl sp
   13194:	4517b400 	ldrmi	fp, [r7, #-1024]	; 0xfffffc00
   13198:	04000008 	streq	r0, [r0], #-8
   1319c:	ed160297 	lfm	f0, 4, [r6, #-604]	; 0xfffffda4
   131a0:	bc000000 	stclt	0, cr0, [r0], {-0}
   131a4:	00062317 	andeq	r2, r6, r7, lsl r3
   131a8:	02980400 	addseq	r0, r8, #0, 8
   131ac:	0000ed16 	andeq	lr, r0, r6, lsl sp
   131b0:	fd17c400 	ldc2	4, cr12, [r7, #-0]
   131b4:	04000008 	streq	r0, [r0], #-8
   131b8:	2c080299 	sfmcs	f0, 4, [r8], {153}	; 0x99
   131bc:	cc000000 	stcgt	0, cr0, [r0], {-0}
   131c0:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   131c4:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
   131c8:	25090000 	strcs	r0, [r9, #-0]
   131cc:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
   131d0:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   131d4:	081a0000 	ldmdaeq	sl, {}	; <UNPREDICTABLE>
   131d8:	25090000 	strcs	r0, [r9, #-0]
   131dc:	07000000 	streq	r0, [r0, -r0]
   131e0:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   131e4:	082a0000 	stmdaeq	sl!, {}	; <UNPREDICTABLE>
   131e8:	25090000 	strcs	r0, [r9, #-0]
   131ec:	17000000 	strne	r0, [r0, -r0]
   131f0:	04f01a00 	ldrbteq	r1, [r0], #2560	; 0xa00
   131f4:	5107029e 			; <UNDEFINED> instruction: 0x5107029e
   131f8:	17000008 	strne	r0, [r0, -r8]
   131fc:	000003c2 	andeq	r0, r0, r2, asr #7
   13200:	1b02a104 	blne	bb618 <__ccfg+0x9b670>
   13204:	00000851 	andeq	r0, r0, r1, asr r8
   13208:	0eff1700 	cdpeq	7, 15, cr1, cr15, cr0, {0}
   1320c:	a2040000 	andge	r0, r4, #0
   13210:	08611802 	stmdaeq	r1!, {r1, fp, ip}^
   13214:	00780000 	rsbseq	r0, r8, r0
   13218:	0002ef08 	andeq	lr, r2, r8, lsl #30
   1321c:	00086100 	andeq	r6, r8, r0, lsl #2
   13220:	00250900 	eoreq	r0, r5, r0, lsl #18
   13224:	001d0000 	andseq	r0, sp, r0
   13228:	00002508 	andeq	r2, r0, r8, lsl #10
   1322c:	00087100 	andeq	r7, r8, r0, lsl #2
   13230:	00250900 	eoreq	r0, r5, r0, lsl #18
   13234:	001d0000 	andseq	r0, sp, r0
   13238:	8304f01b 	movwhi	pc, #16411	; 0x401b	; <UNPREDICTABLE>
   1323c:	08960302 	ldmeq	r6, {r1, r8, r9}
   13240:	4c1c0000 	ldcmi	0, cr0, [ip], {-0}
   13244:	0400000d 	streq	r0, [r0], #-13
   13248:	e50b029a 	str	r0, [fp, #-666]	; 0xfffffd66
   1324c:	1c000006 	stcne	0, cr0, [r0], {6}
   13250:	00000b4d 	andeq	r0, r0, sp, asr #22
   13254:	0b02a304 	bleq	bbe6c <__ccfg+0x9bec4>
   13258:	0000082a 	andeq	r0, r0, sl, lsr #16
   1325c:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   13260:	08a60000 	stmiaeq	r6!, {}	; <UNPREDICTABLE>
   13264:	25090000 	strcs	r0, [r9, #-0]
   13268:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   1326c:	0eb71d00 	cdpeq	13, 11, cr1, cr7, cr0, {0}
   13270:	040f0000 	streq	r0, [pc], #-0	; 13278 <__exidx_end+0xd854>
   13274:	000008a6 	andeq	r0, r0, r6, lsr #17
   13278:	0008bc1e 	andeq	fp, r8, lr, lsl ip
   1327c:	04561400 	ldrbeq	r1, [r6], #-1024	; 0xfffffc00
   13280:	0f000000 	svceq	0x00000000
   13284:	0008b104 	andeq	fp, r8, r4, lsl #2
   13288:	79040f00 	stmdbvc	r4, {r8, r9, sl, fp}
   1328c:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
   13290:	000008d3 	ldrdeq	r0, [r0], -r3
   13294:	00002c14 	andeq	r2, r0, r4, lsl ip
   13298:	040f0000 	streq	r0, [pc], #-0	; 132a0 <__exidx_end+0xd87c>
   1329c:	000008d9 	ldrdeq	r0, [r0], -r9
   132a0:	08c8040f 	stmiaeq	r8, {r0, r1, r2, r3, sl}^
   132a4:	4a080000 	bmi	2132ac <__ccfg+0x1f3304>
   132a8:	ef000006 	svc	0x00000006
   132ac:	09000008 	stmdbeq	r0, {r3}
   132b0:	00000025 	andeq	r0, r0, r5, lsr #32
   132b4:	bd1f0002 	ldclt	0, cr0, [pc, #-8]	; 132b4 <__exidx_end+0xd890>
   132b8:	0400000a 	streq	r0, [r0], #-10
   132bc:	56170333 			; <UNDEFINED> instruction: 0x56170333
   132c0:	1f000004 	svcne	0x00000004
   132c4:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
   132c8:	1d033404 	cfstrsne	mvf3, [r3, #-16]
   132cc:	0000045c 	andeq	r0, r0, ip, asr r4
   132d0:	00443020 	subeq	r3, r4, r0, lsr #32
   132d4:	0e670600 	cdpeq	6, 6, cr0, cr7, cr0, {0}
   132d8:	000005aa 	andeq	r0, r0, sl, lsr #11
   132dc:	000e5f21 	andeq	r5, lr, r1, lsr #30
   132e0:	05900600 	ldreq	r0, [r0, #1536]	; 0x600
   132e4:	0000002c 	andeq	r0, r0, ip, lsr #32
   132e8:	000048cc 	andeq	r4, r0, ip, asr #17
   132ec:	00000038 	andeq	r0, r0, r8, lsr r0
   132f0:	09449c01 	stmdbeq	r4, {r0, sl, fp, ip, pc}^
   132f4:	34220000 	strtcc	r0, [r2], #-0
   132f8:	01000047 	tsteq	r0, r7, asr #32
   132fc:	04561249 	ldrbeq	r1, [r6], #-585	; 0xfffffdb7
   13300:	5a660000 	bpl	1993308 <__ccfg+0x1973360>
   13304:	5a600000 	bpl	181330c <__ccfg+0x17f3364>
   13308:	23000000 	movwcs	r0, #0
   1330c:	0000468d 	andeq	r4, r0, sp, lsl #13
   13310:	b8069f06 	stmdalt	r6, {r1, r2, r8, r9, sl, fp, ip, pc}
   13314:	14000048 	strne	r0, [r0], #-72	; 0xffffffb8
   13318:	01000000 	mrseq	r0, (UNDEF: 0)
   1331c:	1639249c 			; <UNDEFINED> instruction: 0x1639249c
   13320:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
   13324:	00002515 	andeq	r2, r0, r5, lsl r5
   13328:	22500100 	subscs	r0, r0, #0, 2
   1332c:	00004734 	andeq	r4, r0, r4, lsr r7
   13330:	56124001 	ldrpl	r4, [r2], -r1
   13334:	97000004 	strls	r0, [r0, -r4]
   13338:	9300005a 	movwls	r0, #90	; 0x5a
   1333c:	0000005a 	andeq	r0, r0, sl, asr r0
   13340:	00092600 	andeq	r2, r9, r0, lsl #12
   13344:	d2000400 	andle	r0, r0, #0, 8
   13348:	04000045 	streq	r0, [r0], #-69	; 0xffffffbb
   1334c:	00454601 	subeq	r4, r5, r1, lsl #12
   13350:	47460c00 	strbmi	r0, [r6, -r0, lsl #24]
   13354:	46e70000 	strbtmi	r0, [r7], r0
   13358:	91980000 	orrsls	r0, r8, r0
   1335c:	04020000 	streq	r0, [r2], #-0
   13360:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   13364:	07040300 	streq	r0, [r4, -r0, lsl #6]
   13368:	0000042d 	andeq	r0, r0, sp, lsr #8
   1336c:	f3050803 	vsub.i8	d0, d5, d3
   13370:	03000007 	movweq	r0, #7
   13374:	44170408 	ldrmi	r0, [r7], #-1032	; 0xfffffbf8
   13378:	d0040000 	andle	r0, r4, r0
   1337c:	0100000b 	tsteq	r0, fp
   13380:	24170165 	ldrcs	r0, [r7], #-357	; 0xfffffe9b
   13384:	03000000 	movweq	r0, #0
   13388:	0c580601 	mrrceq	6, 0, r0, r8, cr1
   1338c:	01030000 	mrseq	r0, (UNDEF: 3)
   13390:	000c5608 	andeq	r5, ip, r8, lsl #12
   13394:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
   13398:	00000a66 	andeq	r0, r0, r6, ror #20
   1339c:	53070203 	movwpl	r0, #29187	; 0x7203
   133a0:	0300000d 	movweq	r0, #13
   133a4:	07f80504 	ldrbeq	r0, [r8, r4, lsl #10]!
   133a8:	04030000 	streq	r0, [r3], #-0
   133ac:	00042807 	andeq	r2, r4, r7, lsl #16
   133b0:	07080300 	streq	r0, [r8, -r0, lsl #6]
   133b4:	00000423 	andeq	r0, r0, r3, lsr #8
   133b8:	000e3605 	andeq	r3, lr, r5, lsl #12
   133bc:	0e2e0200 	cdpeq	2, 2, cr0, cr14, cr0, {0}
   133c0:	00000062 	andeq	r0, r0, r2, rrx
   133c4:	0002f605 	andeq	pc, r2, r5, lsl #12
   133c8:	0e740200 	cdpeq	2, 7, cr0, cr4, cr0, {0}
   133cc:	00000062 	andeq	r0, r0, r2, rrx
   133d0:	a5020406 	strge	r0, [r2, #-1030]	; 0xfffffbfa
   133d4:	0000b103 	andeq	fp, r0, r3, lsl #2
   133d8:	07670700 	strbeq	r0, [r7, -r0, lsl #14]!
   133dc:	a7020000 	strge	r0, [r2, -r0]
   133e0:	0000390c 	andeq	r3, r0, ip, lsl #18
   133e4:	0aaf0700 	beq	febd4fec <_estack+0xdebcffec>
   133e8:	a8020000 	stmdage	r2, {}	; <UNPREDICTABLE>
   133ec:	0000b113 	andeq	fp, r0, r3, lsl r1
   133f0:	4d080000 	stcmi	0, cr0, [r8, #-0]
   133f4:	c1000000 	mrsgt	r0, (UNDEF: 0)
   133f8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   133fc:	00000024 	andeq	r0, r0, r4, lsr #32
   13400:	080a0003 	stmdaeq	sl, {r0, r1}
   13404:	e509a202 	str	sl, [r9, #-514]	; 0xfffffdfe
   13408:	0b000000 	bleq	13410 <__exidx_end+0xd9ec>
   1340c:	00000390 	muleq	r0, r0, r3
   13410:	1d07a402 	cfstrsne	mvf10, [r7, #-8]
   13414:	00000000 	andeq	r0, r0, r0
   13418:	0005fc0b 	andeq	pc, r5, fp, lsl #24
   1341c:	05a90200 	streq	r0, [r9, #512]!	; 0x200
   13420:	0000008f 	andeq	r0, r0, pc, lsl #1
   13424:	b0050004 	andlt	r0, r5, r4
   13428:	02000008 	andeq	r0, r0, #8
   1342c:	00c103aa 	sbceq	r0, r1, sl, lsr #7
   13430:	040c0000 	streq	r0, [ip], #-0
   13434:	00083d05 	andeq	r3, r8, r5, lsl #26
   13438:	19160300 	ldmdbne	r6, {r8, r9}
   1343c:	00000069 	andeq	r0, r0, r9, rrx
   13440:	00024a05 	andeq	r4, r2, r5, lsl #20
   13444:	0d0c0400 	cfstrseq	mvf0, [ip, #-0]
   13448:	0000001d 	andeq	r0, r0, sp, lsl r0
   1344c:	00072505 	andeq	r2, r7, r5, lsl #10
   13450:	1b230300 	blne	8d4058 <__ccfg+0x8b40b0>
   13454:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   13458:	0003290d 	andeq	r2, r3, sp, lsl #18
   1345c:	34031800 	strcc	r1, [r3], #-2048	; 0xfffff800
   13460:	00017108 	andeq	r7, r1, r8, lsl #2
   13464:	0eb10b00 	vmoveq.f64	d0, #16	; 0x40800000  4.0
   13468:	36030000 	strcc	r0, [r3], -r0
   1346c:	00017113 	andeq	r7, r1, r3, lsl r1
   13470:	5f0e0000 	svcpl	0x000e0000
   13474:	3703006b 	strcc	r0, [r3, -fp, rrx]
   13478:	00001d07 	andeq	r1, r0, r7, lsl #26
   1347c:	5d0b0400 	cfstrspl	mvf0, [fp, #-0]
   13480:	0300000b 	movweq	r0, #11
   13484:	001d0b37 	andseq	r0, sp, r7, lsr fp
   13488:	0b080000 	bleq	213490 <__ccfg+0x1f34e8>
   1348c:	000043e2 	andeq	r4, r0, r2, ror #7
   13490:	1d143703 	ldcne	7, cr3, [r4, #-12]
   13494:	0c000000 	stceq	0, cr0, [r0], {-0}
   13498:	0004570b 	andeq	r5, r4, fp, lsl #14
   1349c:	1b370300 	blne	dd40a4 <__ccfg+0xdb40fc>
   134a0:	0000001d 	andeq	r0, r0, sp, lsl r0
   134a4:	785f0e10 	ldmdavc	pc, {r4, r9, sl, fp}^	; <UNPREDICTABLE>
   134a8:	0b380300 	bleq	e140b0 <__ccfg+0xdf4108>
   134ac:	00000177 	andeq	r0, r0, r7, ror r1
   134b0:	040f0014 	streq	r0, [pc], #-20	; 134b8 <__exidx_end+0xda94>
   134b4:	00000117 	andeq	r0, r0, r7, lsl r1
   134b8:	0000f308 	andeq	pc, r0, r8, lsl #6
   134bc:	00018700 	andeq	r8, r1, r0, lsl #14
   134c0:	00240900 	eoreq	r0, r4, r0, lsl #18
   134c4:	00000000 	andeq	r0, r0, r0
   134c8:	000b780d 	andeq	r7, fp, sp, lsl #16
   134cc:	3c032400 	cfstrscc	mvf2, [r3], {-0}
   134d0:	00020a08 	andeq	r0, r2, r8, lsl #20
   134d4:	05670b00 	strbeq	r0, [r7, #-2816]!	; 0xfffff500
   134d8:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
   134dc:	00001d09 	andeq	r1, r0, r9, lsl #26
   134e0:	b90b0000 	stmdblt	fp, {}	; <UNPREDICTABLE>
   134e4:	03000003 	movweq	r0, #3
   134e8:	001d093f 	andseq	r0, sp, pc, lsr r9
   134ec:	0b040000 	bleq	1134f4 <__ccfg+0xf354c>
   134f0:	0000035a 	andeq	r0, r0, sl, asr r3
   134f4:	1d094003 	stcne	0, cr4, [r9, #-12]
   134f8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   134fc:	00066f0b 	andeq	r6, r6, fp, lsl #30
   13500:	09410300 	stmdbeq	r1, {r8, r9}^
   13504:	0000001d 	andeq	r0, r0, sp, lsl r0
   13508:	094f0b0c 	stmdbeq	pc, {r2, r3, r8, r9, fp}^	; <UNPREDICTABLE>
   1350c:	42030000 	andmi	r0, r3, #0
   13510:	00001d09 	andeq	r1, r0, r9, lsl #26
   13514:	c90b1000 	stmdbgt	fp, {ip}
   13518:	0300000a 	movweq	r0, #10
   1351c:	001d0943 	andseq	r0, sp, r3, asr #18
   13520:	0b140000 	bleq	513528 <__ccfg+0x4f3580>
   13524:	0000033d 	andeq	r0, r0, sp, lsr r3
   13528:	1d094403 	cfstrsne	mvf4, [r9, #-12]
   1352c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   13530:	0005700b 	andeq	r7, r5, fp
   13534:	09450300 	stmdbeq	r5, {r8, r9}^
   13538:	0000001d 	andeq	r0, r0, sp, lsl r0
   1353c:	08eb0b1c 	stmiaeq	fp!, {r2, r3, r4, r8, r9, fp}^
   13540:	46030000 	strmi	r0, [r3], -r0
   13544:	00001d09 	andeq	r1, r0, r9, lsl #26
   13548:	10002000 	andne	r2, r0, r0
   1354c:	00000032 	andeq	r0, r0, r2, lsr r0
   13550:	4f030108 	svcmi	0x00030108
   13554:	00024f08 	andeq	r4, r2, r8, lsl #30
   13558:	0d1a0b00 	vldreq	d0, [sl, #-0]
   1355c:	50030000 	andpl	r0, r3, r0
   13560:	00024f0a 	andeq	r4, r2, sl, lsl #30
   13564:	120b0000 	andne	r0, fp, #0
   13568:	0300000c 	movweq	r0, #12
   1356c:	024f0951 	subeq	r0, pc, #1327104	; 0x144000
   13570:	11800000 	orrne	r0, r0, r0
   13574:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
   13578:	f30a5303 	vcgt.u8	d5, d10, d3
   1357c:	00000000 	andeq	r0, r0, r0
   13580:	0ea41101 	fdveqs	f1, f4, f1
   13584:	56030000 	strpl	r0, [r3], -r0
   13588:	0000f30a 	andeq	pc, r0, sl, lsl #6
   1358c:	00010400 	andeq	r0, r1, r0, lsl #8
   13590:	0000f108 	andeq	pc, r0, r8, lsl #2
   13594:	00025f00 	andeq	r5, r2, r0, lsl #30
   13598:	00240900 	eoreq	r0, r4, r0, lsl #18
   1359c:	001f0000 	andseq	r0, pc, r0
   135a0:	000a1110 	andeq	r1, sl, r0, lsl r1
   135a4:	03019000 	movweq	r9, #4096	; 0x1000
   135a8:	02a20862 	adceq	r0, r2, #6422528	; 0x620000
   135ac:	b10b0000 	mrslt	r0, (UNDEF: 11)
   135b0:	0300000e 	movweq	r0, #14
   135b4:	02a21263 	adceq	r1, r2, #805306374	; 0x30000006
   135b8:	0b000000 	bleq	135c0 <__exidx_end+0xdb9c>
   135bc:	0000057f 	andeq	r0, r0, pc, ror r5
   135c0:	1d066403 	cfstrsne	mvf6, [r6, #-12]
   135c4:	04000000 	streq	r0, [r0], #-0
   135c8:	0002fe0b 	andeq	pc, r2, fp, lsl #28
   135cc:	09660300 	stmdbeq	r6!, {r8, r9}^
   135d0:	000002a8 	andeq	r0, r0, r8, lsr #5
   135d4:	00320b08 	eorseq	r0, r2, r8, lsl #22
   135d8:	67030000 	strvs	r0, [r3, -r0]
   135dc:	00020a1e 	andeq	r0, r2, lr, lsl sl
   135e0:	0f008800 	svceq	0x00008800
   135e4:	00025f04 	andeq	r5, r2, r4, lsl #30
   135e8:	02b80800 	adcseq	r0, r8, #0, 16
   135ec:	02b80000 	adcseq	r0, r8, #0
   135f0:	24090000 	strcs	r0, [r9], #-0
   135f4:	1f000000 	svcne	0x00000000
   135f8:	be040f00 	cdplt	15, 0, cr0, cr4, cr0, {0}
   135fc:	12000002 	andne	r0, r0, #2
   13600:	000cb20d 	andeq	fp, ip, sp, lsl #4
   13604:	7a030800 	bvc	d560c <__ccfg+0xb5664>
   13608:	0002e708 	andeq	lr, r2, r8, lsl #14
   1360c:	0cc40b00 	vstmiaeq	r4, {d16-d15}
   13610:	7b030000 	blvc	d3618 <__ccfg+0xb3670>
   13614:	0002e711 	andeq	lr, r2, r1, lsl r7
   13618:	8d0b0000 	stchi	0, cr0, [fp, #-0]
   1361c:	0300001d 	movweq	r0, #29
   13620:	001d067c 	andseq	r0, sp, ip, ror r6
   13624:	00040000 	andeq	r0, r4, r0
   13628:	004d040f 	subeq	r0, sp, pc, lsl #8
   1362c:	4f0d0000 	svcmi	0x000d0000
   13630:	68000004 	stmdavs	r0, {r2}
   13634:	3008ba03 	andcc	fp, r8, r3, lsl #20
   13638:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
   1363c:	0300705f 	movweq	r7, #95	; 0x5f
   13640:	02e712bb 	rsceq	r1, r7, #-1342177269	; 0xb000000b
   13644:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   13648:	0300725f 	movweq	r7, #607	; 0x25f
   1364c:	001d07bc 			; <UNDEFINED> instruction: 0x001d07bc
   13650:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
   13654:	0300775f 	movweq	r7, #1887	; 0x75f
   13658:	001d07bd 			; <UNDEFINED> instruction: 0x001d07bd
   1365c:	0b080000 	bleq	213664 <__ccfg+0x1f36bc>
   13660:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
   13664:	5409be03 	strpl	fp, [r9], #-3587	; 0xfffff1fd
   13668:	0c000000 	stceq	0, cr0, [r0], {-0}
   1366c:	0008540b 	andeq	r5, r8, fp, lsl #8
   13670:	09bf0300 	ldmibeq	pc!, {r8, r9}	; <UNPREDICTABLE>
   13674:	00000054 	andeq	r0, r0, r4, asr r0
   13678:	625f0e0e 	subsvs	r0, pc, #14, 28	; 0xe0
   1367c:	c0030066 	andgt	r0, r3, r6, rrx
   13680:	0002bf11 	andeq	fp, r2, r1, lsl pc
   13684:	b20b1000 	andlt	r1, fp, #0
   13688:	03000001 	movweq	r0, #1
   1368c:	001d07c1 	andseq	r0, sp, r1, asr #15
   13690:	0b180000 	bleq	613698 <__ccfg+0x5f36f0>
   13694:	00000303 	andeq	r0, r0, r3, lsl #6
   13698:	f10ac803 			; <UNDEFINED> instruction: 0xf10ac803
   1369c:	1c000000 	stcne	0, cr0, [r0], {-0}
   136a0:	001d1c0b 	andseq	r1, sp, fp, lsl #24
   136a4:	1dca0300 	stclne	3, cr0, [sl]
   136a8:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
   136ac:	1ce30b20 	vstmiane	r3!, {d16-d31}
   136b0:	cc030000 	stcgt	0, cr0, [r3], {-0}
   136b4:	0005de1d 	andeq	sp, r5, sp, lsl lr
   136b8:	d10b2400 	tstle	fp, r0, lsl #8
   136bc:	0300000e 	movweq	r0, #14
   136c0:	06020dcf 	streq	r0, [r2], -pc, asr #27
   136c4:	0b280000 	bleq	a136cc <__ccfg+0x9f3724>
   136c8:	00001cd1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
   136cc:	1c09d003 	stcne	0, cr13, [r9], {3}
   136d0:	2c000006 	stccs	0, cr0, [r0], {6}
   136d4:	62755f0e 	rsbsvs	r5, r5, #14, 30	; 0x38
   136d8:	11d30300 	bicsne	r0, r3, r0, lsl #6
   136dc:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
   136e0:	755f0e30 	ldrbvc	r0, [pc, #-3632]	; 128b8 <__exidx_end+0xce94>
   136e4:	d4030070 	strle	r0, [r3], #-112	; 0xffffff90
   136e8:	0002e712 	andeq	lr, r2, r2, lsl r7
   136ec:	5f0e3800 	svcpl	0x000e3800
   136f0:	03007275 	movweq	r7, #629	; 0x275
   136f4:	001d07d5 			; <UNDEFINED> instruction: 0x001d07d5
   136f8:	0b3c0000 	bleq	f13700 <__ccfg+0xef3758>
   136fc:	00000f08 	andeq	r0, r0, r8, lsl #30
   13700:	2211d803 	andscs	sp, r1, #196608	; 0x30000
   13704:	40000006 	andmi	r0, r0, r6
   13708:	000e510b 	andeq	r5, lr, fp, lsl #2
   1370c:	11d90300 	bicsne	r0, r9, r0, lsl #6
   13710:	00000632 	andeq	r0, r0, r2, lsr r6
   13714:	6c5f0e43 	mrrcvs	14, 4, r0, pc, cr3	; <UNPREDICTABLE>
   13718:	dc030062 	stcle	0, cr0, [r3], {98}	; 0x62
   1371c:	0002bf11 	andeq	fp, r2, r1, lsl pc
   13720:	6f0b4400 	svcvs	0x000b4400
   13724:	0300000b 	movweq	r0, #11
   13728:	001d07df 			; <UNDEFINED> instruction: 0x001d07df
   1372c:	0b4c0000 	bleq	1313734 <__ccfg+0x12f378c>
   13730:	00000483 	andeq	r0, r0, r3, lsl #9
   13734:	770ae003 	strvc	lr, [sl, -r3]
   13738:	50000000 	andpl	r0, r0, r0
   1373c:	0047400b 	subeq	r4, r7, fp
   13740:	12e30300 	rscne	r0, r3, #0, 6
   13744:	0000044e 	andeq	r0, r0, lr, asr #8
   13748:	0b950b54 	bleq	fe5564a0 <_estack+0xde5514a0>
   1374c:	e7030000 	str	r0, [r3, -r0]
   13750:	00010b0c 	andeq	r0, r1, ip, lsl #22
   13754:	190b5800 	stmdbne	fp, {fp, ip, lr}
   13758:	0300000a 	movweq	r0, #10
   1375c:	00e50ee9 	rsceq	r0, r5, r9, ror #29
   13760:	0b5c0000 	bleq	1713768 <__ccfg+0x16f37c0>
   13764:	00000e84 	andeq	r0, r0, r4, lsl #29
   13768:	1d09ea03 	vstrne	s28, [r9, #-12]
   1376c:	64000000 	strvs	r0, [r0], #-0
   13770:	001d1300 	andseq	r1, sp, r0, lsl #6
   13774:	044e0000 	strbeq	r0, [lr], #-0
   13778:	4e140000 	cdpmi	0, 1, cr0, cr4, cr0, {0}
   1377c:	14000004 	strne	r0, [r0], #-4
   13780:	000000f1 	strdeq	r0, [r0], -r1
   13784:	0005a214 	andeq	sl, r5, r4, lsl r2
   13788:	001d1400 	andseq	r1, sp, r0, lsl #8
   1378c:	0f000000 	svceq	0x00000000
   13790:	00045904 	andeq	r5, r4, r4, lsl #18
   13794:	044e1500 	strbeq	r1, [lr], #-1280	; 0xfffffb00
   13798:	4c160000 	ldcmi	0, cr0, [r6], {-0}
   1379c:	2800000d 	stmdacs	r0, {r0, r2, r3}
   137a0:	02650304 	rsbeq	r0, r5, #4, 6	; 0x10000000
   137a4:	0005a208 	andeq	sl, r5, r8, lsl #4
   137a8:	08ff1700 	ldmeq	pc!, {r8, r9, sl, ip}^	; <UNPREDICTABLE>
   137ac:	67030000 	strvs	r0, [r3, -r0]
   137b0:	001d0702 	andseq	r0, sp, r2, lsl #14
   137b4:	17000000 	strne	r0, [r0, -r0]
   137b8:	000007dd 	ldrdeq	r0, [r0], -sp
   137bc:	0b026c03 	bleq	ae7d0 <__ccfg+0x8e828>
   137c0:	0000068e 	andeq	r0, r0, lr, lsl #13
   137c4:	02ee1704 	rsceq	r1, lr, #4, 14	; 0x100000
   137c8:	6c030000 	stcvs	0, cr0, [r3], {-0}
   137cc:	068e1402 	streq	r1, [lr], r2, lsl #8
   137d0:	17080000 	strne	r0, [r8, -r0]
   137d4:	00000ef7 	strdeq	r0, [r0], -r7
   137d8:	1e026c03 	cdpne	12, 0, cr6, cr2, cr3, {0}
   137dc:	0000068e 	andeq	r0, r0, lr, lsl #13
   137e0:	057a170c 	ldrbeq	r1, [sl, #-1804]!	; 0xfffff8f4
   137e4:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
   137e8:	001d0802 	andseq	r0, sp, r2, lsl #16
   137ec:	17100000 	ldrne	r0, [r0, -r0]
   137f0:	000004cf 	andeq	r0, r0, pc, asr #9
   137f4:	08026f03 	stmdaeq	r2, {r0, r1, r8, r9, sl, fp, sp, lr}
   137f8:	0000088e 	andeq	r0, r0, lr, lsl #17
   137fc:	0e641714 	mcreq	7, 3, r1, cr4, cr4, {0}
   13800:	72030000 	andvc	r0, r3, #0
   13804:	001d0702 	andseq	r0, sp, r2, lsl #14
   13808:	17300000 	ldrne	r0, [r0, -r0]!
   1380c:	0000428e 	andeq	r4, r0, lr, lsl #5
   13810:	16027303 	strne	r7, [r2], -r3, lsl #6
   13814:	000008a3 	andeq	r0, r0, r3, lsr #17
   13818:	07851734 			; <UNDEFINED> instruction: 0x07851734
   1381c:	75030000 	strvc	r0, [r3, #-0]
   13820:	001d0702 	andseq	r0, sp, r2, lsl #14
   13824:	17380000 	ldrne	r0, [r8, -r0]!
   13828:	0000087f 	andeq	r0, r0, pc, ror r8
   1382c:	0a027703 	beq	b1440 <__ccfg+0x91498>
   13830:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
   13834:	0352173c 	cmpeq	r2, #60, 14	; 0xf00000
   13838:	7a030000 	bvc	d3840 <__ccfg+0xb3898>
   1383c:	01711302 	cmneq	r1, r2, lsl #6
   13840:	17400000 	strbne	r0, [r0, -r0]
   13844:	0000040d 	andeq	r0, r0, sp, lsl #8
   13848:	07027b03 	streq	r7, [r2, -r3, lsl #22]
   1384c:	0000001d 	andeq	r0, r0, sp, lsl r0
   13850:	06041744 	streq	r1, [r4], -r4, asr #14
   13854:	7c030000 	stcvc	0, cr0, [r3], {-0}
   13858:	01711302 	cmneq	r1, r2, lsl #6
   1385c:	17480000 	strbne	r0, [r8, -r0]
   13860:	0000081a 	andeq	r0, r0, sl, lsl r8
   13864:	14027d03 	strne	r7, [r2], #-3331	; 0xfffff2fd
   13868:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
   1386c:	0b55174c 	bleq	15595a4 <__ccfg+0x15395fc>
   13870:	80030000 	andhi	r0, r3, r0
   13874:	001d0702 	andseq	r0, sp, r2, lsl #14
   13878:	17500000 	ldrbne	r0, [r0, -r0]
   1387c:	00000c4e 	andeq	r0, r0, lr, asr #24
   13880:	09028103 	stmdbeq	r2, {r0, r1, r8, pc}
   13884:	000005a2 	andeq	r0, r0, r2, lsr #11
   13888:	0c681754 	stcleq	7, cr1, [r8], #-336	; 0xfffffeb0
   1388c:	a4030000 	strge	r0, [r3], #-0
   13890:	08690702 	stmdaeq	r9!, {r1, r8, r9, sl}^
   13894:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
   13898:	00000a11 	andeq	r0, r0, r1, lsl sl
   1389c:	1302a803 	movwne	sl, #10243	; 0x2803
   138a0:	000002a2 	andeq	r0, r0, r2, lsr #5
   138a4:	a9180148 	ldmdbge	r8, {r3, r6, r8}
   138a8:	03000006 	movweq	r0, #6
   138ac:	5f1202a9 	svcpl	0x001202a9
   138b0:	4c000002 	stcmi	0, cr0, [r0], {2}
   138b4:	06901801 	ldreq	r1, [r0], r1, lsl #16
   138b8:	ad030000 	stcge	0, cr0, [r3, #-0]
   138bc:	08cb0c02 	stmiaeq	fp, {r1, sl, fp}^
   138c0:	02dc0000 	sbcseq	r0, ip, #0
   138c4:	000cd018 	andeq	sp, ip, r8, lsl r0
   138c8:	02b20300 	adcseq	r0, r2, #0, 6
   138cc:	00064f10 	andeq	r4, r6, r0, lsl pc
   138d0:	1802e000 	stmdane	r2, {sp, lr, pc}
   138d4:	00000aa1 	andeq	r0, r0, r1, lsr #21
   138d8:	0a02b403 	beq	c08ec <__ccfg+0xa0944>
   138dc:	000008d7 	ldrdeq	r0, [r0], -r7
   138e0:	0f0002ec 	svceq	0x000002ec
   138e4:	0005a804 	andeq	sl, r5, r4, lsl #16
   138e8:	08010300 	stmdaeq	r1, {r8, r9}
   138ec:	00000c5f 	andeq	r0, r0, pc, asr ip
   138f0:	0005a815 	andeq	sl, r5, r5, lsl r8
   138f4:	30040f00 	andcc	r0, r4, r0, lsl #30
   138f8:	13000004 	movwne	r0, #4
   138fc:	0000001d 	andeq	r0, r0, sp, lsl r0
   13900:	000005d8 	ldrdeq	r0, [r0], -r8
   13904:	00044e14 	andeq	r4, r4, r4, lsl lr
   13908:	00f11400 	rscseq	r1, r1, r0, lsl #8
   1390c:	d8140000 	ldmdale	r4, {}	; <UNPREDICTABLE>
   13910:	14000005 	strne	r0, [r0], #-5
   13914:	0000001d 	andeq	r0, r0, sp, lsl r0
   13918:	af040f00 	svcge	0x00040f00
   1391c:	0f000005 	svceq	0x00000005
   13920:	0005ba04 	andeq	fp, r5, r4, lsl #20
   13924:	00831300 	addeq	r1, r3, r0, lsl #6
   13928:	06020000 	streq	r0, [r2], -r0
   1392c:	4e140000 	cdpmi	0, 1, cr0, cr4, cr0, {0}
   13930:	14000004 	strne	r0, [r0], #-4
   13934:	000000f1 	strdeq	r0, [r0], -r1
   13938:	00008314 	andeq	r8, r0, r4, lsl r3
   1393c:	001d1400 	andseq	r1, sp, r0, lsl #8
   13940:	0f000000 	svceq	0x00000000
   13944:	0005e404 	andeq	lr, r5, r4, lsl #8
   13948:	001d1300 	andseq	r1, sp, r0, lsl #6
   1394c:	061c0000 	ldreq	r0, [ip], -r0
   13950:	4e140000 	cdpmi	0, 1, cr0, cr4, cr0, {0}
   13954:	14000004 	strne	r0, [r0], #-4
   13958:	000000f1 	strdeq	r0, [r0], -r1
   1395c:	08040f00 	stmdaeq	r4, {r8, r9, sl, fp}
   13960:	08000006 	stmdaeq	r0, {r1, r2}
   13964:	0000004d 	andeq	r0, r0, sp, asr #32
   13968:	00000632 	andeq	r0, r0, r2, lsr r6
   1396c:	00002409 	andeq	r2, r0, r9, lsl #8
   13970:	08000200 	stmdaeq	r0, {r9}
   13974:	0000004d 	andeq	r0, r0, sp, asr #32
   13978:	00000642 	andeq	r0, r0, r2, asr #12
   1397c:	00002409 	andeq	r2, r0, r9, lsl #8
   13980:	04000000 	streq	r0, [r0], #-0
   13984:	00000470 	andeq	r0, r0, r0, ror r4
   13988:	1a012403 	bne	5c99c <__ccfg+0x3c9f4>
   1398c:	000002ed 	andeq	r0, r0, sp, ror #5
   13990:	000cca19 	andeq	ip, ip, r9, lsl sl
   13994:	28030c00 	stmdacs	r3, {sl, fp}
   13998:	06880801 	streq	r0, [r8], r1, lsl #16
   1399c:	b1170000 	tstlt	r7, r0
   139a0:	0300000e 	movweq	r0, #14
   139a4:	8811012a 	ldmdahi	r1, {r1, r3, r5, r8}
   139a8:	00000006 	andeq	r0, r0, r6
   139ac:	000bc917 	andeq	ip, fp, r7, lsl r9
   139b0:	012b0300 			; <UNDEFINED> instruction: 0x012b0300
   139b4:	00001d07 	andeq	r1, r0, r7, lsl #26
   139b8:	6d170400 	cfldrsvs	mvf0, [r7, #-0]
   139bc:	03000007 	movweq	r0, #7
   139c0:	8e0b012c 	adfhiep	f0, f3, #4.0
   139c4:	08000006 	stmdaeq	r0, {r1, r2}
   139c8:	4f040f00 	svcmi	0x00040f00
   139cc:	0f000006 	svceq	0x00000006
   139d0:	00064204 	andeq	r4, r6, r4, lsl #4
   139d4:	03dc1900 	bicseq	r1, ip, #0, 18
   139d8:	030e0000 	movweq	r0, #57344	; 0xe000
   139dc:	cd080144 	stfgts	f0, [r8, #-272]	; 0xfffffef0
   139e0:	17000006 	strne	r0, [r0, -r6]
   139e4:	00001638 	andeq	r1, r0, r8, lsr r6
   139e8:	12014503 	andne	r4, r1, #12582912	; 0xc00000
   139ec:	000006cd 	andeq	r0, r0, sp, asr #13
   139f0:	082c1700 	stmdaeq	ip!, {r8, r9, sl, ip}
   139f4:	46030000 	strmi	r0, [r3], -r0
   139f8:	06cd1201 	strbeq	r1, [sp], r1, lsl #4
   139fc:	17060000 	strne	r0, [r6, -r0]
   13a00:	000014ea 	andeq	r1, r0, sl, ror #9
   13a04:	12014703 	andne	r4, r1, #786432	; 0xc0000
   13a08:	0000005b 	andeq	r0, r0, fp, asr r0
   13a0c:	5b08000c 	blpl	213a44 <__ccfg+0x1f3a9c>
   13a10:	dd000000 	stcle	0, cr0, [r0, #-0]
   13a14:	09000006 	stmdbeq	r0, {r1, r2}
   13a18:	00000024 	andeq	r0, r0, r4, lsr #32
   13a1c:	d01a0002 	andsle	r0, sl, r2
   13a20:	07028503 	streq	r8, [r2, -r3, lsl #10]
   13a24:	000007f2 	strdeq	r0, [r0], -r2
   13a28:	000e5717 	andeq	r5, lr, r7, lsl r7
   13a2c:	02870300 	addeq	r0, r7, #0, 6
   13a30:	00002418 	andeq	r2, r0, r8, lsl r4
   13a34:	d8170000 	ldmdale	r7, {}	; <UNPREDICTABLE>
   13a38:	0300000c 	movweq	r0, #12
   13a3c:	a2120288 	andsge	r0, r2, #136, 4	; 0x80000008
   13a40:	04000005 	streq	r0, [r0], #-5
   13a44:	00043a17 	andeq	r3, r4, r7, lsl sl
   13a48:	02890300 	addeq	r0, r9, #0, 6
   13a4c:	0007f210 	andeq	pc, r7, r0, lsl r2	; <UNPREDICTABLE>
   13a50:	3e170800 	cdpcc	8, 1, cr0, cr7, cr0, {0}
   13a54:	0300000b 	movweq	r0, #11
   13a58:	8717028a 	ldrhi	r0, [r7, -sl, lsl #5]
   13a5c:	24000001 	strcs	r0, [r0], #-1
   13a60:	0007e417 	andeq	lr, r7, r7, lsl r4
   13a64:	028b0300 	addeq	r0, fp, #0, 6
   13a68:	00001d0f 	andeq	r1, r0, pc, lsl #26
   13a6c:	ac174800 	ldcge	8, cr4, [r7], {-0}
   13a70:	0300000e 	movweq	r0, #14
   13a74:	702c028c 	eorvc	r0, ip, ip, lsl #5
   13a78:	50000000 	andpl	r0, r0, r0
   13a7c:	00007617 	andeq	r7, r0, r7, lsl r6
   13a80:	028d0300 	addeq	r0, sp, #0, 6
   13a84:	0006941a 	andeq	r9, r6, sl, lsl r4
   13a88:	34175800 	ldrcc	r5, [r7], #-2048	; 0xfffff800
   13a8c:	03000006 	movweq	r0, #6
   13a90:	e516028e 	ldr	r0, [r6, #-654]	; 0xfffffd72
   13a94:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
   13a98:	000ce517 	andeq	lr, ip, r7, lsl r5
   13a9c:	028f0300 	addeq	r0, pc, #0, 6
   13aa0:	0000e516 	andeq	lr, r0, r6, lsl r5
   13aa4:	68177000 	ldmdavs	r7, {ip, sp, lr}
   13aa8:	03000000 	movweq	r0, #0
   13aac:	e5160290 	ldr	r0, [r6, #-656]	; 0xfffffd70
   13ab0:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
   13ab4:	000b6517 	andeq	r6, fp, r7, lsl r5
   13ab8:	02910300 	addseq	r0, r1, #0, 6
   13abc:	00080210 	andeq	r0, r8, r0, lsl r2
   13ac0:	17178000 	ldrne	r8, [r7, -r0]
   13ac4:	03000004 	movweq	r0, #4
   13ac8:	12100292 	andsne	r0, r0, #536870921	; 0x20000009
   13acc:	88000008 	stmdahi	r0, {r3}
   13ad0:	000c8817 	andeq	r8, ip, r7, lsl r8
   13ad4:	02930300 	addseq	r0, r3, #0, 6
   13ad8:	00001d0f 	andeq	r1, r0, pc, lsl #26
   13adc:	a317a000 	tstge	r7, #0
   13ae0:	03000002 	movweq	r0, #2
   13ae4:	e5160294 	ldr	r0, [r6, #-660]	; 0xfffffd6c
   13ae8:	a4000000 	strge	r0, [r0], #-0
   13aec:	00069a17 	andeq	r9, r6, r7, lsl sl
   13af0:	02950300 	addseq	r0, r5, #0, 6
   13af4:	0000e516 	andeq	lr, r0, r6, lsl r5
   13af8:	b617ac00 	ldrlt	sl, [r7], -r0, lsl #24
   13afc:	03000005 	movweq	r0, #5
   13b00:	e5160296 	ldr	r0, [r6, #-662]	; 0xfffffd6a
   13b04:	b4000000 	strlt	r0, [r0], #-0
   13b08:	00084517 	andeq	r4, r8, r7, lsl r5
   13b0c:	02970300 	addseq	r0, r7, #0, 6
   13b10:	0000e516 	andeq	lr, r0, r6, lsl r5
   13b14:	2317bc00 	tstcs	r7, #0, 24
   13b18:	03000006 	movweq	r0, #6
   13b1c:	e5160298 	ldr	r0, [r6, #-664]	; 0xfffffd68
   13b20:	c4000000 	strgt	r0, [r0], #-0
   13b24:	0008fd17 	andeq	pc, r8, r7, lsl sp	; <UNPREDICTABLE>
   13b28:	02990300 	addseq	r0, r9, #0, 6
   13b2c:	00001d08 	andeq	r1, r0, r8, lsl #26
   13b30:	0800cc00 	stmdaeq	r0, {sl, fp, lr, pc}
   13b34:	000005a8 	andeq	r0, r0, r8, lsr #11
   13b38:	00000802 	andeq	r0, r0, r2, lsl #16
   13b3c:	00002409 	andeq	r2, r0, r9, lsl #8
   13b40:	08001900 	stmdaeq	r0, {r8, fp, ip}
   13b44:	000005a8 	andeq	r0, r0, r8, lsr #11
   13b48:	00000812 	andeq	r0, r0, r2, lsl r8
   13b4c:	00002409 	andeq	r2, r0, r9, lsl #8
   13b50:	08000700 	stmdaeq	r0, {r8, r9, sl}
   13b54:	000005a8 	andeq	r0, r0, r8, lsr #11
   13b58:	00000822 	andeq	r0, r0, r2, lsr #16
   13b5c:	00002409 	andeq	r2, r0, r9, lsl #8
   13b60:	1a001700 	bne	19768 <__exidx_end+0x13d44>
   13b64:	029e03f0 	addseq	r0, lr, #240, 6	; 0xc0000003
   13b68:	00084907 	andeq	r4, r8, r7, lsl #18
   13b6c:	03c21700 	biceq	r1, r2, #0, 14
   13b70:	a1030000 	mrsge	r0, (UNDEF: 3)
   13b74:	08491b02 	stmdaeq	r9, {r1, r8, r9, fp, ip}^
   13b78:	17000000 	strne	r0, [r0, -r0]
   13b7c:	00000eff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   13b80:	1802a203 	stmdane	r2, {r0, r1, r9, sp, pc}
   13b84:	00000859 	andeq	r0, r0, r9, asr r8
   13b88:	e7080078 	smlsdx	r8, r8, r0, r0
   13b8c:	59000002 	stmdbpl	r0, {r1}
   13b90:	09000008 	stmdbeq	r0, {r3}
   13b94:	00000024 	andeq	r0, r0, r4, lsr #32
   13b98:	2408001d 	strcs	r0, [r8], #-29	; 0xffffffe3
   13b9c:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
   13ba0:	09000008 	stmdbeq	r0, {r3}
   13ba4:	00000024 	andeq	r0, r0, r4, lsr #32
   13ba8:	f01b001d 			; <UNDEFINED> instruction: 0xf01b001d
   13bac:	03028303 	movweq	r8, #8963	; 0x2303
   13bb0:	0000088e 	andeq	r0, r0, lr, lsl #17
   13bb4:	000d4c1c 	andeq	r4, sp, ip, lsl ip
   13bb8:	029a0300 	addseq	r0, sl, #0, 6
   13bbc:	0006dd0b 	andeq	sp, r6, fp, lsl #26
   13bc0:	0b4d1c00 	bleq	135abc8 <__ccfg+0x133ac20>
   13bc4:	a3030000 	movwge	r0, #12288	; 0x3000
   13bc8:	08220b02 	stmdaeq	r2!, {r1, r8, r9, fp}
   13bcc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13bd0:	000005a8 	andeq	r0, r0, r8, lsr #11
   13bd4:	0000089e 	muleq	r0, lr, r8
   13bd8:	00002409 	andeq	r2, r0, r9, lsl #8
   13bdc:	1d001800 	stcne	8, cr1, [r0, #-0]
   13be0:	00000eb7 			; <UNDEFINED> instruction: 0x00000eb7
   13be4:	089e040f 	ldmeq	lr, {r0, r1, r2, r3, sl}
   13be8:	b41e0000 	ldrlt	r0, [lr], #-0
   13bec:	14000008 	strne	r0, [r0], #-8
   13bf0:	0000044e 	andeq	r0, r0, lr, asr #8
   13bf4:	a9040f00 	stmdbge	r4, {r8, r9, sl, fp}
   13bf8:	0f000008 	svceq	0x00000008
   13bfc:	00017104 	andeq	r7, r1, r4, lsl #2
   13c00:	08cb1e00 	stmiaeq	fp, {r9, sl, fp, ip}^
   13c04:	1d140000 	ldcne	0, cr0, [r4, #-0]
   13c08:	00000000 	andeq	r0, r0, r0
   13c0c:	08d1040f 	ldmeq	r1, {r0, r1, r2, r3, sl}^
   13c10:	040f0000 	streq	r0, [pc], #-0	; 13c18 <__exidx_end+0xe1f4>
   13c14:	000008c0 	andeq	r0, r0, r0, asr #17
   13c18:	00064208 	andeq	r4, r6, r8, lsl #4
   13c1c:	0008e700 	andeq	lr, r8, r0, lsl #14
   13c20:	00240900 	eoreq	r0, r4, r0, lsl #18
   13c24:	00020000 	andeq	r0, r2, r0
   13c28:	000abd1f 	andeq	fp, sl, pc, lsl sp
   13c2c:	03330300 	teqeq	r3, #0, 6
   13c30:	00044e17 	andeq	r4, r4, r7, lsl lr
   13c34:	0ab61f00 	beq	fed9b83c <_estack+0xded9683c>
   13c38:	34030000 	strcc	r0, [r3], #-0
   13c3c:	04541d03 	ldrbeq	r1, [r4], #-3331	; 0xfffff2fd
   13c40:	3a200000 	bcc	813c48 <__ccfg+0x7f3ca0>
   13c44:	05000047 	streq	r0, [r0, #-71]	; 0xffffffb9
   13c48:	04593017 	ldrbeq	r3, [r9], #-23	; 0xffffffe9
   13c4c:	03050000 	movweq	r0, #20480	; 0x5000
   13c50:	20000118 	andcs	r0, r0, r8, lsl r1
   13c54:	0008e721 	andeq	lr, r8, r1, lsr #14
   13c58:	10030500 	andne	r0, r3, r0, lsl #10
   13c5c:	21200001 			; <UNDEFINED> instruction: 0x21200001
   13c60:	000008f4 	strdeq	r0, [r0], -r4
   13c64:	00000305 	andeq	r0, r0, r5, lsl #6
   13c68:	92000000 	andls	r0, r0, #0
   13c6c:	0400000a 	streq	r0, [r0], #-10
   13c70:	00478a00 	subeq	r8, r7, r0, lsl #20
   13c74:	97010400 	strls	r0, [r1, -r0, lsl #8]
   13c78:	0c00004a 	stceq	0, cr0, [r0], {74}	; 0x4a
   13c7c:	000048f1 	strdeq	r4, [r0], -r1
   13c80:	00005214 	andeq	r5, r0, r4, lsl r2
   13c84:	00004904 	andeq	r4, r0, r4, lsl #18
   13c88:	00000054 	andeq	r0, r0, r4, asr r0
   13c8c:	00009278 	andeq	r9, r0, r8, ror r2
   13c90:	23070802 	movwcs	r0, #30722	; 0x7802
   13c94:	03000004 	movweq	r0, #4
   13c98:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   13c9c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
   13ca0:	00042d07 	andeq	r2, r4, r7, lsl #26
   13ca4:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
   13ca8:	000007f3 	strdeq	r0, [r0], -r3
   13cac:	17040802 	strne	r0, [r4, -r2, lsl #16]
   13cb0:	04000044 	streq	r0, [r0], #-68	; 0xffffffbc
   13cb4:	00004b82 	andeq	r4, r0, r2, lsl #23
   13cb8:	33162a02 	tstcc	r6, #8192	; 0x2000
   13cbc:	04000000 	streq	r0, [r0], #-0
   13cc0:	00004f2f 	andeq	r4, r0, pc, lsr #30
   13cc4:	60152f02 	andsvs	r2, r5, r2, lsl #30
   13cc8:	05000000 	streq	r0, [r0, #-0]
   13ccc:	00006604 	andeq	r6, r0, r4, lsl #12
   13cd0:	00480600 	subeq	r0, r8, r0, lsl #12
   13cd4:	00750000 	rsbseq	r0, r5, r0
   13cd8:	75070000 	strvc	r0, [r7, #-0]
   13cdc:	00000000 	andeq	r0, r0, r0
   13ce0:	007b0405 	rsbseq	r0, fp, r5, lsl #8
   13ce4:	04080000 	streq	r0, [r8], #-0
   13ce8:	00005691 	muleq	r0, r1, r6
   13cec:	880f3602 	stmdahi	pc, {r1, r9, sl, ip, sp}	; <UNPREDICTABLE>
   13cf0:	05000000 	streq	r0, [r0, #-0]
   13cf4:	00008e04 	andeq	r8, r0, r4, lsl #28
   13cf8:	002c0600 	eoreq	r0, ip, r0, lsl #12
   13cfc:	00a20000 	adceq	r0, r2, r0
   13d00:	75070000 	strvc	r0, [r7, #-0]
   13d04:	07000000 	streq	r0, [r0, -r0]
   13d08:	00000075 	andeq	r0, r0, r5, ror r0
   13d0c:	08010200 	stmdaeq	r1, {r9}
   13d10:	00000c56 	andeq	r0, r0, r6, asr ip
   13d14:	00514909 	subseq	r4, r1, r9, lsl #18
   13d18:	12bb0200 	adcsne	r0, fp, #0, 4
   13d1c:	00000054 	andeq	r0, r0, r4, asr r0
   13d20:	0056c409 	subseq	ip, r6, r9, lsl #8
   13d24:	10be0200 	adcsne	r0, lr, r0, lsl #4
   13d28:	0000007c 	andeq	r0, r0, ip, ror r0
   13d2c:	58060102 	stmdapl	r6, {r1, r8}
   13d30:	0a00000c 	beq	13d68 <__exidx_end+0xe344>
   13d34:	00004e4f 	andeq	r4, r0, pc, asr #28
   13d38:	00a20107 	adceq	r0, r2, r7, lsl #2
   13d3c:	17030000 	strne	r0, [r3, -r0]
   13d40:	0001f506 	andeq	pc, r1, r6, lsl #10
   13d44:	49250b00 	stmdbmi	r5!, {r8, r9, fp}
   13d48:	0b000000 	bleq	13d50 <__exidx_end+0xe32c>
   13d4c:	00004d4e 	andeq	r4, r0, lr, asr #26
   13d50:	52760b01 	rsbspl	r0, r6, #1024	; 0x400
   13d54:	0b020000 	bleq	93d5c <__ccfg+0x73db4>
   13d58:	000055d7 	ldrdeq	r5, [r0], -r7
   13d5c:	51b80b03 			; <UNDEFINED> instruction: 0x51b80b03
   13d60:	0b040000 	bleq	113d68 <__ccfg+0xf3dc0>
   13d64:	000054f4 	strdeq	r5, [r0], -r4
   13d68:	54580b05 	ldrbpl	r0, [r8], #-2821	; 0xfffff4fb
   13d6c:	0b060000 	bleq	193d74 <__ccfg+0x173dcc>
   13d70:	00004946 	andeq	r4, r0, r6, asr #18
   13d74:	55090b07 	strpl	r0, [r9, #-2823]	; 0xfffff4f9
   13d78:	0b080000 	bleq	213d80 <__ccfg+0x1f3dd8>
   13d7c:	00005517 	andeq	r5, r0, r7, lsl r5
   13d80:	55ca0b09 	strbpl	r0, [sl, #2825]	; 0xb09
   13d84:	0b0a0000 	bleq	293d8c <__ccfg+0x273de4>
   13d88:	0000510f 	andeq	r5, r0, pc, lsl #2
   13d8c:	4bc30b0b 	blmi	ff0d69c0 <_estack+0xdf0d19c0>
   13d90:	0b0c0000 	bleq	313d98 <__ccfg+0x2f3df0>
   13d94:	00004bd7 	ldrdeq	r4, [r0], -r7
   13d98:	4e930b0d 	vfnmsmi.f64	d0, d3, d13
   13d9c:	0b0e0000 	bleq	393da4 <__ccfg+0x373dfc>
   13da0:	00004ea9 	andeq	r4, r0, r9, lsr #29
   13da4:	4d880b0f 	vstrmi	d0, [r8, #60]	; 0x3c
   13da8:	0b100000 	bleq	413db0 <__ccfg+0x3f3e08>
   13dac:	0000519c 	muleq	r0, ip, r1
   13db0:	4e120b11 	vmovmi.32	r0, d2[0]
   13db4:	0b120000 	bleq	493dbc <__ccfg+0x473e14>
   13db8:	0000588f 	andeq	r5, r0, pc, lsl #17
   13dbc:	49af0b13 	stmibmi	pc!, {r0, r1, r4, r8, r9, fp}	; <UNPREDICTABLE>
   13dc0:	0b140000 	bleq	513dc8 <__ccfg+0x4f3e20>
   13dc4:	00004e36 	andeq	r4, r0, r6, lsr lr
   13dc8:	48c40b15 	stmiami	r4, {r0, r2, r4, r8, r9, fp}^
   13dcc:	0b160000 	bleq	593dd4 <__ccfg+0x573e2c>
   13dd0:	000055fa 	strdeq	r5, [r0], -sl
   13dd4:	571d0b17 			; <UNDEFINED> instruction: 0x571d0b17
   13dd8:	0b180000 	bleq	613de0 <__ccfg+0x5f3e38>
   13ddc:	00004e5b 	andeq	r4, r0, fp, asr lr
   13de0:	52e80b19 	rscpl	r0, r8, #25600	; 0x6400
   13de4:	0b1a0000 	bleq	693dec <__ccfg+0x673e44>
   13de8:	00005608 	andeq	r5, r0, r8, lsl #12
   13dec:	47e50b1b 			; <UNDEFINED> instruction: 0x47e50b1b
   13df0:	0b1c0000 	bleq	713df8 <__ccfg+0x6f3e50>
   13df4:	00005616 	andeq	r5, r0, r6, lsl r6
   13df8:	56240b1d 			; <UNDEFINED> instruction: 0x56240b1d
   13dfc:	0b1e0000 	bleq	793e04 <__ccfg+0x773e5c>
   13e00:	00004793 	muleq	r0, r3, r7
   13e04:	564e0b1f 			; <UNDEFINED> instruction: 0x564e0b1f
   13e08:	0b200000 	bleq	813e10 <__ccfg+0x7f3e68>
   13e0c:	00005399 	muleq	r0, r9, r3
   13e10:	516e0b21 	cmnpl	lr, r1, lsr #22
   13e14:	0b220000 	bleq	893e1c <__ccfg+0x873e74>
   13e18:	000055ed 	andeq	r5, r0, sp, ror #11
   13e1c:	50900b23 	addspl	r0, r0, r3, lsr #22
   13e20:	0b240000 	bleq	913e28 <__ccfg+0x8f3e80>
   13e24:	00004f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
   13e28:	4c8e0b25 	fstmiaxmi	lr, {d0-d17}	;@ Deprecated
   13e2c:	0b260000 	bleq	993e34 <__ccfg+0x973e8c>
   13e30:	00004fb0 			; <UNDEFINED> instruction: 0x00004fb0
   13e34:	4d2a0b27 	fstmdbxmi	sl!, {d0-d18}	;@ Deprecated
   13e38:	0b280000 	bleq	a13e40 <__ccfg+0x9f3e98>
   13e3c:	00004fc0 	andeq	r4, r0, r0, asr #31
   13e40:	4fd00b29 	svcmi	0x00d00b29
   13e44:	0b2a0000 	bleq	a93e4c <__ccfg+0xa73ea4>
   13e48:	000050f5 	strdeq	r5, [r0], -r5	; <UNPREDICTABLE>
   13e4c:	4f390b2b 	svcmi	0x00390b2b
   13e50:	0b2c0000 	bleq	b13e58 <__ccfg+0xaf3eb0>
   13e54:	000053a6 	andeq	r5, r0, r6, lsr #7
   13e58:	4ccf0b2d 	fstmiaxmi	pc, {d16-d37}	;@ Deprecated
   13e5c:	002e0000 	eoreq	r0, lr, r0
   13e60:	004ecb0a 	subeq	ip, lr, sl, lsl #22
   13e64:	a2010700 	andge	r0, r1, #0, 14
   13e68:	04000000 	streq	r0, [r0], #-0
   13e6c:	03d60617 	bicseq	r0, r6, #24117248	; 0x1700000
   13e70:	f90b0000 			; <UNDEFINED> instruction: 0xf90b0000
   13e74:	0000004b 	andeq	r0, r0, fp, asr #32
   13e78:	00482c0b 	subeq	r2, r8, fp, lsl #24
   13e7c:	290b0100 	stmdbcs	fp, {r8}
   13e80:	02000058 	andeq	r0, r0, #88	; 0x58
   13e84:	0056990b 	subseq	r9, r6, fp, lsl #18
   13e88:	190b0300 	stmdbne	fp, {r8, r9}
   13e8c:	0400004c 	streq	r0, [r0], #-76	; 0xffffffb4
   13e90:	0049110b 	subeq	r1, r9, fp, lsl #2
   13e94:	ab0b0500 	blge	2d529c <__ccfg+0x2b52f4>
   13e98:	0600004c 	streq	r0, [r0], -ip, asr #32
   13e9c:	004c090b 	subeq	r0, ip, fp, lsl #18
   13ea0:	450b0700 	strmi	r0, [fp, #-1792]	; 0xfffff900
   13ea4:	08000055 	stmdaeq	r0, {r0, r2, r4, r6}
   13ea8:	0056790b 	subseq	r7, r6, fp, lsl #18
   13eac:	7c0b0900 			; <UNDEFINED> instruction: 0x7c0b0900
   13eb0:	0a000054 	beq	14008 <__exidx_end+0xe5e4>
   13eb4:	0049640b 	subeq	r6, r9, fp, lsl #8
   13eb8:	4c0b0b00 			; <UNDEFINED> instruction: 0x4c0b0b00
   13ebc:	0c00004c 	stceq	0, cr0, [r0], {76}	; 0x4c
   13ec0:	0048ad0b 	subeq	sl, r8, fp, lsl #26
   13ec4:	5e0b0d00 	cdppl	13, 0, cr0, cr11, cr0, {0}
   13ec8:	0e000058 	mcreq	0, 0, r0, cr0, cr8, {2}
   13ecc:	0050e20b 	subseq	lr, r0, fp, lsl #4
   13ed0:	dd0b0f00 	stcle	15, cr0, [fp, #-0]
   13ed4:	1000004d 	andne	r0, r0, sp, asr #32
   13ed8:	00511f0b 	subseq	r1, r1, fp, lsl #30
   13edc:	5f0b1100 	svcpl	0x000b1100
   13ee0:	12000057 	andne	r0, r0, #87	; 0x57
   13ee4:	004a2f0b 	subeq	r2, sl, fp, lsl #30
   13ee8:	f00b1300 			; <UNDEFINED> instruction: 0xf00b1300
   13eec:	1400004d 	strne	r0, [r0], #-77	; 0xffffffb3
   13ef0:	0050530b 	subseq	r5, r0, fp, lsl #6
   13ef4:	e40b1500 	str	r1, [fp], #-1280	; 0xfffffb00
   13ef8:	1600004b 	strne	r0, [r0], -fp, asr #32
   13efc:	00509f0b 	subseq	r9, r0, fp, lsl #30
   13f00:	b50b1700 	strlt	r1, [fp, #-1792]	; 0xfffff900
   13f04:	1800004e 	stmdane	r0, {r1, r2, r3, r6}
   13f08:	00492f0b 	subeq	r2, r9, fp, lsl #30
   13f0c:	060b1900 	streq	r1, [fp], -r0, lsl #18
   13f10:	1a000057 	bne	14074 <__exidx_end+0xe650>
   13f14:	00501f0b 	subseq	r1, r0, fp, lsl #30
   13f18:	a90b1b00 	stmdbge	fp, {r8, r9, fp, ip}
   13f1c:	1c00004d 	stcne	0, cr0, [r0], {77}	; 0x4d
   13f20:	0047ce0b 	subeq	ip, r7, fp, lsl #28
   13f24:	6a0b1d00 	bvs	2db32c <__ccfg+0x2bb384>
   13f28:	1e00004f 	cdpne	0, 0, cr0, cr0, cr15, {2}
   13f2c:	004f560b 	subeq	r5, pc, fp, lsl #12
   13f30:	390b1f00 	stmdbcc	fp, {r8, r9, sl, fp, ip}
   13f34:	20000054 	andcs	r0, r0, r4, asr r0
   13f38:	0054c40b 	subseq	ip, r4, fp, lsl #8
   13f3c:	e50b2100 	str	r2, [fp, #-256]	; 0xffffff00
   13f40:	22000056 	andcs	r0, r0, #86	; 0x56
   13f44:	004cdc0b 	subeq	sp, ip, fp, lsl #24
   13f48:	980b2300 	stmdals	fp, {r8, r9, sp}
   13f4c:	24000052 	strcs	r0, [r0], #-82	; 0xffffffae
   13f50:	0054910b 	subseq	r9, r4, fp, lsl #2
   13f54:	b50b2500 	strlt	r2, [fp, #-1280]	; 0xfffffb00
   13f58:	26000053 			; <UNDEFINED> instruction: 0x26000053
   13f5c:	0053c90b 	subseq	ip, r3, fp, lsl #18
   13f60:	dd0b2700 	stcle	7, cr2, [fp, #-0]
   13f64:	28000053 	stmdacs	r0, {r0, r1, r4, r6}
   13f68:	004b6d0b 	subeq	r6, fp, fp, lsl #26
   13f6c:	1a0b2900 	bne	2de374 <__ccfg+0x2be3cc>
   13f70:	2a00004a 	bcs	140a0 <__exidx_end+0xe67c>
   13f74:	004a420b 	subeq	r4, sl, fp, lsl #4
   13f78:	9e0b2b00 	vmlals.f64	d2, d11, d0
   13f7c:	2c000057 	stccs	0, cr0, [r0], {87}	; 0x57
   13f80:	004a740b 	subeq	r7, sl, fp, lsl #8
   13f84:	8e0b2d00 	cdphi	13, 0, cr2, cr11, cr0, {0}
   13f88:	2e000055 	mcrcs	0, 0, r0, cr0, cr5, {2}
   13f8c:	0055a20b 	subseq	sl, r5, fp, lsl #4
   13f90:	b60b2f00 	strlt	r2, [fp], -r0, lsl #30
   13f94:	30000055 	andcc	r0, r0, r5, asr r0
   13f98:	004c5e0b 	subeq	r5, ip, fp, lsl #28
   13f9c:	380b3100 	stmdacc	fp, {r8, ip, sp}
   13fa0:	3200004c 	andcc	r0, r0, #76	; 0x4c
   13fa4:	004f7e0b 	subeq	r7, pc, fp, lsl #28
   13fa8:	320b3300 	andcc	r3, fp, #0, 6
   13fac:	34000051 	strcc	r0, [r0], #-81	; 0xffffffaf
   13fb0:	0057b20b 	subseq	fp, r7, fp, lsl #4
   13fb4:	760b3500 	strvc	r3, [fp], -r0, lsl #10
   13fb8:	36000047 	strcc	r0, [r0], -r7, asr #32
   13fbc:	004d5e0b 	subeq	r5, sp, fp, lsl #28
   13fc0:	730b3700 	movwvc	r3, #46848	; 0xb700
   13fc4:	3800004d 	stmdacc	r0, {r0, r2, r3, r6}
   13fc8:	004fe00b 	subeq	lr, pc, fp
   13fcc:	0a0b3900 	beq	2e23d4 <__ccfg+0x2c242c>
   13fd0:	3a000050 	bcc	14118 <__exidx_end+0xe6f4>
   13fd4:	0057db0b 	subseq	sp, r7, fp, lsl #22
   13fd8:	830b3b00 	movwhi	r3, #47872	; 0xbb00
   13fdc:	3c000052 	stccc	0, cr0, [r0], {82}	; 0x52
   13fe0:	004d010b 	subeq	r0, sp, fp, lsl #2
   13fe4:	3e0b3d00 	cdpcc	13, 0, cr3, cr11, cr0, {0}
   13fe8:	3e000048 	cdpcc	0, 0, cr0, cr0, cr8, {2}
   13fec:	0047f30b 	subeq	pc, r7, fp, lsl #6
   13ff0:	7e0b3f00 	cdpvc	15, 0, cr3, cr11, cr0, {0}
   13ff4:	40000051 	andmi	r0, r0, r1, asr r0
   13ff8:	0053040b 	subseq	r0, r3, fp, lsl #8
   13ffc:	1b0b4100 	blne	2e4404 <__ccfg+0x2c445c>
   14000:	42000054 	andmi	r0, r0, #84	; 0x54
   14004:	004ff50b 	subeq	pc, pc, fp, lsl #10
   14008:	140b4300 	strne	r4, [fp], #-768	; 0xfffffd00
   1400c:	44000058 	strmi	r0, [r0], #-88	; 0xffffffa8
   14010:	0052ae0b 	subseq	sl, r2, fp, lsl #28
   14014:	5e0b4500 	cfsh32pl	mvfx4, mvfx11, #0
   14018:	4600004a 	strmi	r0, [r0], -sl, asr #32
   1401c:	004dbf0b 	subeq	fp, sp, fp, lsl #30
   14020:	030b4700 	movweq	r4, #46848	; 0xb700
   14024:	4800004f 	stmdami	r0, {r0, r1, r2, r3, r6}
   14028:	0047b20b 	subeq	fp, r7, fp, lsl #4
   1402c:	d40b4900 	strle	r4, [fp], #-2304	; 0xfffff700
   14030:	4a000048 	bmi	14158 <__exidx_end+0xe734>
   14034:	004d150b 	subeq	r1, sp, fp, lsl #10
   14038:	310b4b00 	tstcc	fp, r0, lsl #22
   1403c:	4c000050 	stcmi	0, cr0, [r0], {80}	; 0x50
   14040:	07020200 	streq	r0, [r2, -r0, lsl #4]
   14044:	00000d53 	andeq	r0, r0, r3, asr sp
   14048:	0003f30c 	andeq	pc, r3, ip, lsl #6
   1404c:	0003e800 	andeq	lr, r3, r0, lsl #16
   14050:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
   14054:	000003dd 	ldrdeq	r0, [r0], -sp
   14058:	03ff0405 	mvnseq	r0, #83886080	; 0x5000000
   1405c:	ed0e0000 	stc	0, cr0, [lr, #-0]
   14060:	02000003 	andeq	r0, r0, #3
   14064:	0c5f0801 	mrrceq	8, 0, r0, pc, cr1	; <UNPREDICTABLE>
   14068:	f80e0000 			; <UNDEFINED> instruction: 0xf80e0000
   1406c:	0f000003 	svceq	0x00000003
   14070:	000049a0 	andeq	r4, r0, r0, lsr #19
   14074:	1a014c05 	bne	67090 <__ccfg+0x470e8>
   14078:	000003e8 	andeq	r0, r0, r8, ror #7
   1407c:	004d990f 	subeq	r9, sp, pc, lsl #18
   14080:	01820500 	orreq	r0, r2, r0, lsl #10
   14084:	0003e81a 	andeq	lr, r3, sl, lsl r8
   14088:	03f80c00 	mvnseq	r0, #0, 24
   1408c:	04290000 	strteq	r0, [r9], #-0
   14090:	000d0000 	andeq	r0, sp, r0
   14094:	004fa209 	subeq	sl, pc, r9, lsl #4
   14098:	0d2d0600 	stceq	6, cr0, [sp, #-0]
   1409c:	0000041e 	andeq	r0, r0, lr, lsl r4
   140a0:	00565e09 	subseq	r5, r6, r9, lsl #28
   140a4:	1c380600 	ldcne	6, cr0, [r8], #-0
   140a8:	000001f5 	strdeq	r0, [r0], -r5
   140ac:	004c720a 	subeq	r7, ip, sl, lsl #4
   140b0:	a2010700 	andge	r0, r1, #0, 14
   140b4:	06000000 	streq	r0, [r0], -r0
   140b8:	04b40e3a 	ldrteq	r0, [r4], #3642	; 0xe3a
   140bc:	c70b0000 	strgt	r0, [fp, -r0]
   140c0:	00000047 	andeq	r0, r0, r7, asr #32
   140c4:	004ea20b 	subeq	sl, lr, fp, lsl #4
   140c8:	710b0100 	mrsvc	r0, (UNDEF: 27)
   140cc:	02000057 	andeq	r0, r0, #87	; 0x57
   140d0:	0057340b 	subseq	r3, r7, fp, lsl #8
   140d4:	db0b0300 	blle	2d4cdc <__ccfg+0x2b4d34>
   140d8:	04000051 	streq	r0, [r0], #-81	; 0xffffffaf
   140dc:	0055020b 	subseq	r0, r5, fp, lsl #4
   140e0:	eb0b0500 	bl	2d54e8 <__ccfg+0x2b5540>
   140e4:	06000049 	streq	r0, [r0], -r9, asr #32
   140e8:	0049c50b 	subeq	ip, r9, fp, lsl #10
   140ec:	d00b0700 	andle	r0, fp, r0, lsl #14
   140f0:	0800004b 	stmdaeq	r0, {r0, r1, r3, r6}
   140f4:	0050b50b 	subseq	fp, r0, fp, lsl #10
   140f8:	f20b0900 	vmla.i8	d0, d11, d0
   140fc:	0a000049 	beq	14228 <__exidx_end+0xe804>
   14100:	0050bc0b 	subseq	fp, r0, fp, lsl #24
   14104:	570b0b00 	strpl	r0, [fp, -r0, lsl #22]
   14108:	0c00004a 	stceq	0, cr0, [r0], {74}	; 0x4a
   1410c:	0049dc0b 	subeq	sp, r9, fp, lsl #24
   14110:	590b0d00 	stmdbpl	fp, {r8, sl, fp}
   14114:	0e000055 	mcreq	0, 0, r0, cr0, cr5, {2}
   14118:	0053220b 	subseq	r2, r3, fp, lsl #4
   1411c:	04000f00 	streq	r0, [r0], #-3840	; 0xfffff100
   14120:	00005451 	andeq	r5, r0, r1, asr r4
   14124:	41013f06 	tstmi	r1, r6, lsl #30
   14128:	09000004 	stmdbeq	r0, {r2}
   1412c:	000054e5 	andeq	r5, r0, r5, ror #9
   14130:	b40f4106 	strlt	r4, [pc], #-262	; 14138 <__exidx_end+0xe714>
   14134:	09000004 	stmdbeq	r0, {r2}
   14138:	0000556d 	andeq	r5, r0, sp, ror #10
   1413c:	2c0c4a06 			; <UNDEFINED> instruction: 0x2c0c4a06
   14140:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   14144:	00004984 	andeq	r4, r0, r4, lsl #19
   14148:	2c0c4b06 			; <UNDEFINED> instruction: 0x2c0c4b06
   1414c:	10000000 	andne	r0, r0, r0
   14150:	00005632 	andeq	r5, r0, r2, lsr r6
   14154:	00557e09 	subseq	r7, r5, r9, lsl #28
   14158:	144c0600 	strbne	r0, [ip], #-1536	; 0xfffffa00
   1415c:	000004f5 	strdeq	r0, [r0], -r5
   14160:	04e40405 	strbteq	r0, [r4], #1029	; 0x405
   14164:	09110000 	ldmdbeq	r1, {}	; <UNPREDICTABLE>
   14168:	00004e6c 	andeq	r4, r0, ip, ror #28
   1416c:	080f4e06 	stmdaeq	pc, {r1, r2, r9, sl, fp, lr}	; <UNPREDICTABLE>
   14170:	05000005 	streq	r0, [r0, #-5]
   14174:	0004fb04 	andeq	pc, r4, r4, lsl #22
   14178:	54671200 	strbtpl	r1, [r7], #-512	; 0xfffffe00
   1417c:	c8090000 	stmdagt	r9, {}	; <UNPREDICTABLE>
   14180:	06000051 			; <UNDEFINED> instruction: 0x06000051
   14184:	051f0d52 	ldreq	r0, [pc, #-3410]	; 1343a <__exidx_end+0xda16>
   14188:	04050000 	streq	r0, [r5], #-0
   1418c:	0000050e 	andeq	r0, r0, lr, lsl #10
   14190:	004bb613 	subeq	fp, fp, r3, lsl r6
   14194:	67063400 	strvs	r3, [r6, -r0, lsl #8]
   14198:	05501501 	ldrbeq	r1, [r0, #-1281]	; 0xfffffaff
   1419c:	ab140000 	blge	5141a4 <__ccfg+0x4f41fc>
   141a0:	0600004f 	streq	r0, [r0], -pc, asr #32
   141a4:	ed0f0169 	stfs	f0, [pc, #-420]	; 14008 <__exidx_end+0xe5e4>
   141a8:	00000003 	andeq	r0, r0, r3
   141ac:	004b9a14 	subeq	r9, fp, r4, lsl sl
   141b0:	016a0600 	cmneq	sl, r0, lsl #12
   141b4:	00055514 	andeq	r5, r5, r4, lsl r5
   141b8:	0e000400 	cfcpyseq	mvf0, mvf0
   141bc:	00000525 	andeq	r0, r0, r5, lsr #10
   141c0:	0000c80c 	andeq	ip, r0, ip, lsl #16
   141c4:	00056500 	andeq	r6, r5, r0, lsl #10
   141c8:	00331500 	eorseq	r1, r3, r0, lsl #10
   141cc:	002d0000 	eoreq	r0, sp, r0
   141d0:	0005500c 	andeq	r5, r5, ip
   141d4:	00057000 	andeq	r7, r5, r0
   141d8:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
   141dc:	00000565 	andeq	r0, r0, r5, ror #10
   141e0:	004eda0f 	subeq	sp, lr, pc, lsl #20
   141e4:	016b0600 	cmneq	fp, r0, lsl #12
   141e8:	00057003 	andeq	r7, r5, r3
   141ec:	51020f00 	tstpl	r2, r0, lsl #30
   141f0:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
   141f4:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   141f8:	a5160000 	ldrge	r0, [r6, #-0]
   141fc:	07000054 	smlsdeq	r0, r4, r0, r0
   14200:	0000a201 	andeq	sl, r0, r1, lsl #4
   14204:	01810600 	orreq	r0, r1, r0, lsl #12
   14208:	00063906 	andeq	r3, r6, r6, lsl #18
   1420c:	48650b00 	stmdami	r5!, {r8, r9, fp}^
   14210:	0b000000 	bleq	14218 <__exidx_end+0xe7f4>
   14214:	00004871 	andeq	r4, r0, r1, ror r8
   14218:	487d0b02 	ldmdami	sp!, {r1, r8, r9, fp}^
   1421c:	0b030000 	bleq	d4224 <__ccfg+0xb427c>
   14220:	00004c9e 	muleq	r0, lr, ip
   14224:	48890b03 	stmmi	r9, {r0, r1, r8, r9, fp}
   14228:	0b040000 	bleq	114230 <__ccfg+0xf4288>
   1422c:	00004e05 	andeq	r4, r0, r5, lsl #28
   14230:	4eeb0b04 	vfmami.f64	d16, d11, d4
   14234:	0b050000 	bleq	15423c <__ccfg+0x134294>
   14238:	00004e41 	andeq	r4, r0, r1, asr #28
   1423c:	49750b05 	ldmdbmi	r5!, {r0, r2, r8, r9, fp}^
   14240:	0b050000 	bleq	154248 <__ccfg+0x1342a0>
   14244:	00004895 	muleq	r0, r5, r8
   14248:	50690b06 	rsbpl	r0, r9, r6, lsl #22
   1424c:	0b060000 	bleq	194254 <__ccfg+0x1742ac>
   14250:	00004b8c 	andeq	r4, r0, ip, lsl #23
   14254:	50760b06 	rsbspl	r0, r6, r6, lsl #22
   14258:	0b060000 	bleq	194260 <__ccfg+0x1742b8>
   1425c:	00005525 	andeq	r5, r0, r5, lsr #10
   14260:	50830b06 	addpl	r0, r3, r6, lsl #22
   14264:	0b060000 	bleq	19426c <__ccfg+0x1742c4>
   14268:	000050c3 	andeq	r5, r0, r3, asr #1
   1426c:	48a10b06 	stmiami	r1!, {r1, r2, r8, r9, fp}
   14270:	0b070000 	bleq	1d4278 <__ccfg+0x1b42d0>
   14274:	000051ab 	andeq	r5, r0, fp, lsr #3
   14278:	51f80b07 	mvnspl	r0, r7, lsl #22
   1427c:	0b070000 	bleq	1d4284 <__ccfg+0x1b42dc>
   14280:	00005560 	andeq	r5, r0, r0, ror #10
   14284:	4a890b07 	bmi	fe256ea8 <_estack+0xde251ea8>
   14288:	0b070000 	bleq	1d4290 <__ccfg+0x1b42e8>
   1428c:	000052db 	ldrdeq	r5, [r0], -fp
   14290:	481a0b08 	ldmdami	sl, {r3, r8, r9, fp}
   14294:	0b080000 	bleq	21429c <__ccfg+0x1f42f4>
   14298:	00005533 	andeq	r5, r0, r3, lsr r5
   1429c:	52f70b08 	rscspl	r0, r7, #8, 22	; 0x2000
   142a0:	00080000 	andeq	r0, r8, r0
   142a4:	00578b0f 	subseq	r8, r7, pc, lsl #22
   142a8:	019f0600 	orrseq	r0, pc, r0, lsl #12
   142ac:	00058f1f 	andeq	r8, r5, pc, lsl pc
   142b0:	53290f00 			; <UNDEFINED> instruction: 0x53290f00
   142b4:	a2060000 	andge	r0, r6, #0
   142b8:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   142bc:	f80f0000 			; <UNDEFINED> instruction: 0xf80f0000
   142c0:	0600004e 	streq	r0, [r0], -lr, asr #32
   142c4:	2c0c01a5 	stfcss	f0, [ip], {165}	; 0xa5
   142c8:	0f000000 	svceq	0x00000000
   142cc:	00005870 	andeq	r5, r0, r0, ror r8
   142d0:	0c01a806 	stceq	8, cr10, [r1], {6}
   142d4:	0000002c 	andeq	r0, r0, ip, lsr #32
   142d8:	0049940f 	subeq	r9, r9, pc, lsl #8
   142dc:	01ab0600 			; <UNDEFINED> instruction: 0x01ab0600
   142e0:	00002c0c 	andeq	r2, r0, ip, lsl #24
   142e4:	53330f00 	teqpl	r3, #0, 30
   142e8:	ae060000 	cdpge	0, 0, cr0, cr6, cr0, {0}
   142ec:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   142f0:	e20f0000 	and	r0, pc, #0
   142f4:	06000051 			; <UNDEFINED> instruction: 0x06000051
   142f8:	2c0c01b1 	stfcss	f0, [ip], {177}	; 0xb1
   142fc:	0f000000 	svceq	0x00000000
   14300:	000051ed 	andeq	r5, r0, sp, ror #3
   14304:	0c01b406 	cfstrseq	mvf11, [r1], {6}
   14308:	0000002c 	andeq	r0, r0, ip, lsr #32
   1430c:	00533d0f 	subseq	r3, r3, pc, lsl #26
   14310:	01b70600 			; <UNDEFINED> instruction: 0x01b70600
   14314:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14318:	50450f00 	subpl	r0, r5, r0, lsl #30
   1431c:	ba060000 	blt	194324 <__ccfg+0x17437c>
   14320:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14324:	cf0f0000 	svcgt	0x000f0000
   14328:	06000057 			; <UNDEFINED> instruction: 0x06000057
   1432c:	2c0c01bd 	stfcss	f0, [ip], {189}	; 0xbd
   14330:	0f000000 	svceq	0x00000000
   14334:	00005347 	andeq	r5, r0, r7, asr #6
   14338:	0c01c006 	stceq	0, cr12, [r1], {6}
   1433c:	0000002c 	andeq	r0, r0, ip, lsr #32
   14340:	0058a70f 	subseq	sl, r8, pc, lsl #14
   14344:	01c30600 	biceq	r0, r3, r0, lsl #12
   14348:	00002c0c 	andeq	r2, r0, ip, lsl #24
   1434c:	573b0f00 	ldrpl	r0, [fp, -r0, lsl #30]!
   14350:	c6060000 	strgt	r0, [r6], -r0
   14354:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14358:	470f0000 	strmi	r0, [pc, -r0]
   1435c:	06000057 			; <UNDEFINED> instruction: 0x06000057
   14360:	2c0c01c9 	stfcss	f0, [ip], {201}	; 0xc9
   14364:	0f000000 	svceq	0x00000000
   14368:	00005753 	andeq	r5, r0, r3, asr r7
   1436c:	0c01cc06 	stceq	12, cr12, [r1], {6}
   14370:	0000002c 	andeq	r0, r0, ip, lsr #32
   14374:	0057780f 	subseq	r7, r7, pc, lsl #16
   14378:	01d00600 	bicseq	r0, r0, r0, lsl #12
   1437c:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14380:	589a0f00 	ldmpl	sl, {r8, r9, sl, fp}
   14384:	d3060000 	movwle	r0, #24576	; 0x6000
   14388:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   1438c:	f90f0000 			; <UNDEFINED> instruction: 0xf90f0000
   14390:	06000049 	streq	r0, [r0], -r9, asr #32
   14394:	2c0c01d6 	stfcss	f0, [ip], {214}	; 0xd6
   14398:	0f000000 	svceq	0x00000000
   1439c:	000047a2 	andeq	r4, r0, r2, lsr #15
   143a0:	0c01d906 			; <UNDEFINED> instruction: 0x0c01d906
   143a4:	0000002c 	andeq	r0, r0, ip, lsr #32
   143a8:	004cbe0f 	subeq	fp, ip, pc, lsl #28
   143ac:	01dc0600 	bicseq	r0, ip, r0, lsl #12
   143b0:	00002c0c 	andeq	r2, r0, ip, lsl #24
   143b4:	49cc0f00 	stmibmi	ip, {r8, r9, sl, fp}^
   143b8:	df060000 	svcle	0x00060000
   143bc:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   143c0:	580f0000 	stmdapl	pc, {}	; <UNPREDICTABLE>
   143c4:	06000053 			; <UNDEFINED> instruction: 0x06000053
   143c8:	2c0c01e2 	stfcss	f0, [ip], {226}	; 0xe2
   143cc:	0f000000 	svceq	0x00000000
   143d0:	00004f21 	andeq	r4, r0, r1, lsr #30
   143d4:	0c01e506 	cfstr32eq	mvfx14, [r1], {6}
   143d8:	0000002c 	andeq	r0, r0, ip, lsr #32
   143dc:	00515b0f 	subseq	r5, r1, pc, lsl #22
   143e0:	01e80600 	mvneq	r0, r0, lsl #12
   143e4:	00002c0c 	andeq	r2, r0, ip, lsl #24
   143e8:	56670f00 	strbtpl	r0, [r7], -r0, lsl #30
   143ec:	ef060000 	svc	0x00060000
   143f0:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   143f4:	3e0f0000 	cdpcc	0, 0, cr0, cr15, cr0, {0}
   143f8:	06000058 			; <UNDEFINED> instruction: 0x06000058
   143fc:	2c0c01f2 	stfcss	f0, [ip], {242}	; 0xf2
   14400:	0f000000 	svceq	0x00000000
   14404:	0000584e 	andeq	r5, r0, lr, asr #16
   14408:	0c01f506 	cfstr32eq	mvfx15, [r1], {6}
   1440c:	0000002c 	andeq	r0, r0, ip, lsr #32
   14410:	004ba30f 	subeq	sl, fp, pc, lsl #6
   14414:	01f80600 	mvnseq	r0, r0, lsl #12
   14418:	00002c0c 	andeq	r2, r0, ip, lsl #24
   1441c:	56af0f00 	strtpl	r0, [pc], r0, lsl #30
   14420:	fb060000 	blx	19442a <__ccfg+0x174482>
   14424:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14428:	c30f0000 	movwgt	r0, #61440	; 0xf000
   1442c:	06000052 			; <UNDEFINED> instruction: 0x06000052
   14430:	2c0c01fe 	stfcss	f0, [ip], {254}	; 0xfe
   14434:	0f000000 	svceq	0x00000000
   14438:	00004d37 	andeq	r4, r0, r7, lsr sp
   1443c:	0c020206 	sfmeq	f0, 4, [r2], {6}
   14440:	0000002c 	andeq	r0, r0, ip, lsr #32
   14444:	0054b70f 	subseq	fp, r4, pc, lsl #14
   14448:	020a0600 	andeq	r0, sl, #0, 12
   1444c:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14450:	4c2a0f00 	stcmi	15, cr0, [sl], #-0
   14454:	0d060000 	stceq	0, cr0, [r6, #-0]
   14458:	002c0c02 	eoreq	r0, ip, r2, lsl #24
   1445c:	2c0c0000 	stccs	0, cr0, [ip], {-0}
   14460:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
   14464:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
   14468:	4e210f00 	cdpmi	15, 2, cr0, cr1, cr0, {0}
   1446c:	fb060000 	blx	194476 <__ccfg+0x1744ce>
   14470:	07f30c03 	ldrbeq	r0, [r3, r3, lsl #24]!
   14474:	f50c0000 			; <UNDEFINED> instruction: 0xf50c0000
   14478:	1b000004 	blne	14490 <__exidx_end+0xea6c>
   1447c:	15000008 	strne	r0, [r0, #-8]
   14480:	00000033 	andeq	r0, r0, r3, lsr r0
   14484:	840f000d 	strhi	r0, [pc], #-13	; 1448c <__exidx_end+0xea68>
   14488:	06000053 			; <UNDEFINED> instruction: 0x06000053
   1448c:	0b140584 	bleq	515aa4 <__ccfg+0x4f5afc>
   14490:	16000008 	strne	r0, [r0], -r8
   14494:	00004ee3 	andeq	r4, r0, r3, ror #29
   14498:	00a20107 	adceq	r0, r2, r7, lsl #2
   1449c:	8b060000 	blhi	1944a4 <__ccfg+0x1744fc>
   144a0:	08660605 	stmdaeq	r6!, {r0, r2, r9, sl}^
   144a4:	800b0000 	andhi	r0, fp, r0
   144a8:	0000004c 	andeq	r0, r0, ip, asr #32
   144ac:	0050d00b 	subseq	sp, r0, fp
   144b0:	500b0100 	andpl	r0, fp, r0, lsl #2
   144b4:	02000048 	andeq	r0, r0, #72	; 0x48
   144b8:	0058000b 	subseq	r0, r8, fp
   144bc:	fe0b0300 	cdp2	3, 0, cr0, cr11, cr0, {0}
   144c0:	04000053 	streq	r0, [r0], #-83	; 0xffffffad
   144c4:	0053f10b 	subseq	pc, r3, fp, lsl #2
   144c8:	540b0500 	strpl	r0, [fp], #-1280	; 0xfffffb00
   144cc:	06000049 	streq	r0, [r0], -r9, asr #32
   144d0:	57f00f00 	ldrbpl	r0, [r0, r0, lsl #30]!
   144d4:	98060000 	stmdals	r6, {}	; <UNPREDICTABLE>
   144d8:	08281505 	stmdaeq	r8!, {r0, r2, r8, sl, ip}
   144dc:	d40f0000 	strle	r0, [pc], #-0	; 144e4 <__exidx_end+0xeac0>
   144e0:	06000056 			; <UNDEFINED> instruction: 0x06000056
   144e4:	33110799 	tstcc	r1, #40108032	; 0x2640000
   144e8:	0f000000 	svceq	0x00000000
   144ec:	00005371 	andeq	r5, r0, r1, ror r3
   144f0:	0c07ae06 	stceq	14, cr10, [r7], {6}
   144f4:	0000002c 	andeq	r0, r0, ip, lsr #32
   144f8:	00564604 	subseq	r4, r6, r4, lsl #12
   144fc:	167b0700 	ldrbtne	r0, [fp], -r0, lsl #14
   14500:	000000a2 	andeq	r0, r0, r2, lsr #1
   14504:	00088d0e 	andeq	r8, r8, lr, lsl #26
   14508:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
   1450c:	00000a66 	andeq	r0, r0, r6, ror #20
   14510:	0048ea04 	subeq	lr, r8, r4, lsl #20
   14514:	0f800700 	svceq	0x00800700
   14518:	0000002c 	andeq	r0, r0, ip, lsr #32
   1451c:	0048e904 	subeq	lr, r8, r4, lsl #18
   14520:	16810700 	strne	r0, [r1], r0, lsl #14
   14524:	00000033 	andeq	r0, r0, r3, lsr r0
   14528:	00535104 	subseq	r5, r3, r4, lsl #2
   1452c:	0f840700 	svceq	0x00840700
   14530:	0000003a 	andeq	r0, r0, sl, lsr r0
   14534:	14040402 	strne	r0, [r4], #-1026	; 0xfffffbfe
   14538:	0200004a 	andeq	r0, r0, #74	; 0x4a
   1453c:	4a0c0308 	bmi	315164 <__ccfg+0x2f51bc>
   14540:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   14544:	00441c04 	subeq	r1, r4, r4, lsl #24
   14548:	03100200 	tsteq	r0, #0, 4
   1454c:	0000540c 	andeq	r5, r0, ip, lsl #8
   14550:	00536813 	subseq	r6, r3, r3, lsl r8
   14554:	ed070800 	stc	8, cr0, [r7, #-0]
   14558:	09100a01 	ldmdbeq	r0, {r0, r9, fp}
   1455c:	6c170000 	ldcvs	0, cr0, [r7], {-0}
   14560:	0700776f 	streq	r7, [r0, -pc, ror #14]
   14564:	a51a01ed 	ldrge	r0, [sl, #-493]	; 0xfffffe13
   14568:	00000008 	andeq	r0, r0, r8
   1456c:	0048bf14 	subeq	fp, r8, r4, lsl pc
   14570:	01ed0700 	mvneq	r0, r0, lsl #14
   14574:	0008a51f 	andeq	sl, r8, pc, lsl r5
   14578:	18000400 	stmdane	r0, {sl}
   1457c:	01f40708 	mvnseq	r0, r8, lsl #14
   14580:	00093209 	andeq	r3, r9, r9, lsl #4
   14584:	00731900 	rsbseq	r1, r3, r0, lsl #18
   14588:	1301f607 	movwne	pc, #5639	; 0x1607	; <UNPREDICTABLE>
   1458c:	000008e5 	andeq	r0, r0, r5, ror #17
   14590:	006c6c19 	rsbeq	r6, ip, r9, lsl ip
   14594:	0a01f707 	beq	921b8 <__ccfg+0x72210>
   14598:	000008bd 			; <UNDEFINED> instruction: 0x000008bd
   1459c:	49e31a00 	stmibmi	r3!, {r9, fp, ip}^
   145a0:	f8070000 			; <UNDEFINED> instruction: 0xf8070000
   145a4:	09100301 	ldmdbeq	r0, {r0, r8, r9}
   145a8:	320e0000 	andcc	r0, lr, #0
   145ac:	0c000009 	stceq	0, cr0, [r0], {9}
   145b0:	00000899 	muleq	r0, r9, r8
   145b4:	00000954 	andeq	r0, r0, r4, asr r9
   145b8:	00003315 	andeq	r3, r0, r5, lsl r3
   145bc:	0e00ff00 	cdpeq	15, 0, cr15, cr0, cr0, {0}
   145c0:	00000944 	andeq	r0, r0, r4, asr #18
   145c4:	0052050f 	subseq	r0, r2, pc, lsl #10
   145c8:	01fc0700 	mvnseq	r0, r0, lsl #14
   145cc:	00095416 	andeq	r5, r9, r6, lsl r4
   145d0:	49bb0f00 	ldmibmi	fp!, {r8, r9, sl, fp}
   145d4:	02070000 	andeq	r0, r7, #0
   145d8:	09541602 	ldmdbeq	r4, {r1, r9, sl, ip}^
   145dc:	111b0000 	tstne	fp, r0
   145e0:	01000048 	tsteq	r0, r8, asr #32
   145e4:	bd010224 	sfmlt	f0, 4, [r1, #-144]	; 0xffffff70
   145e8:	04000008 	streq	r0, [r0], #-8
   145ec:	54000049 	strpl	r0, [r0], #-73	; 0xffffffb7
   145f0:	01000000 	mrseq	r0, (UNDEF: 0)
   145f4:	00751c9c 			; <UNDEFINED> instruction: 0x00751c9c
   145f8:	12022401 	andne	r2, r2, #16777216	; 0x1000000
   145fc:	000008bd 			; <UNDEFINED> instruction: 0x000008bd
   14600:	00005aba 			; <UNDEFINED> instruction: 0x00005aba
   14604:	00005ab6 			; <UNDEFINED> instruction: 0x00005ab6
   14608:	0100761c 	tsteq	r0, ip, lsl r6
   1460c:	bd1c0224 	lfmlt	f0, 4, [ip, #-144]	; 0xffffff70
   14610:	e6000008 	str	r0, [r0], -r8
   14614:	e200005a 	and	r0, r0, #90	; 0x5a
   14618:	1d00005a 	stcne	0, cr0, [r0, #-360]	; 0xfffffe98
   1461c:	01007575 	tsteq	r0, r5, ror r5
   14620:	3f110226 	svccc	0x00110226
   14624:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
   14628:	01007676 	tsteq	r0, r6, ror r6
   1462c:	3f110227 	svccc	0x00110227
   14630:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
   14634:	28010077 	stmdacs	r1, {r0, r1, r2, r4, r5, r6}
   14638:	09320b02 	ldmdbeq	r2!, {r1, r8, r9, fp}
   1463c:	201e0000 	andscs	r0, lr, r0
   14640:	1d000014 	stcne	0, cr0, [r0, #-80]	; 0xffffffb0
   14644:	00775f5f 	rsbseq	r5, r7, pc, asr pc
   14648:	16022801 	strne	r2, [r2], -r1, lsl #16
   1464c:	00000932 	andeq	r0, r0, r2, lsr r9
   14650:	0014201e 	andseq	r2, r4, lr, lsl r0
   14654:	587b1f00 	ldmdapl	fp!, {r8, r9, sl, fp, ip}^
   14658:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
   1465c:	08b11602 	ldmeq	r1!, {r1, r9, sl, ip}
   14660:	5b100000 	blpl	414668 <__ccfg+0x3f46c0>
   14664:	5b0e0000 	blpl	39466c <__ccfg+0x3746c4>
   14668:	801f0000 	andshi	r0, pc, r0
   1466c:	01000058 	qaddeq	r0, r8, r0
   14670:	b1160228 	tstlt	r6, r8, lsr #4
   14674:	29000008 	stmdbcs	r0, {r3}
   14678:	2300005b 	movwcs	r0, #91	; 0x5b
   1467c:	1f00005b 	svcne	0x0000005b
   14680:	00005885 	andeq	r5, r0, r5, lsl #17
   14684:	16022801 	strne	r2, [r2], -r1, lsl #16
   14688:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   1468c:	00005b5b 	andeq	r5, r0, fp, asr fp
   14690:	00005b57 	andeq	r5, r0, r7, asr fp
   14694:	00588a1f 	subseq	r8, r8, pc, lsl sl
   14698:	02280100 	eoreq	r0, r8, #0, 2
   1469c:	0008b116 	andeq	fp, r8, r6, lsl r1
   146a0:	005b8600 	subseq	r8, fp, r0, lsl #12
   146a4:	005b8400 	subseq	r8, fp, r0, lsl #8
   146a8:	56aa1f00 	strtpl	r1, [sl], r0, lsl #30
   146ac:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
   146b0:	08b11602 	ldmeq	r1!, {r1, r9, sl, ip}
   146b4:	5b9d0000 	blpl	fe7546bc <_estack+0xde74f6bc>
   146b8:	5b990000 	blpl	fe6546c0 <_estack+0xde64f6c0>
   146bc:	991f0000 	ldmdbls	pc, {}	; <UNPREDICTABLE>
   146c0:	01000057 	qaddeq	r0, r7, r0
   146c4:	b1160228 	tstlt	r6, r8, lsr #4
   146c8:	c5000008 	strgt	r0, [r0, #-8]
   146cc:	c100005b 	qaddgt	r0, fp, r0
   146d0:	1f00005b 	svcne	0x0000005b
   146d4:	0000568c 	andeq	r5, r0, ip, lsl #13
   146d8:	16022801 	strne	r2, [r2], -r1, lsl #16
   146dc:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   146e0:	00005bed 	andeq	r5, r0, sp, ror #23
   146e4:	00005be9 	andeq	r5, r0, r9, ror #23
   146e8:	0057861f 	subseq	r8, r7, pc, lsl r6
   146ec:	02280100 	eoreq	r0, r8, #0, 2
   146f0:	0008b116 	andeq	fp, r8, r6, lsl r1
   146f4:	005c1300 	subseq	r1, ip, r0, lsl #6
   146f8:	005c0f00 	subseq	r0, ip, r0, lsl #30
   146fc:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
       c:	10011106 	andne	r1, r1, r6, lsl #2
    return node->data_base.item_array[index];
      10:	02000006 	andeq	r0, r0, #6
      14:	0b0b0024 	bleq	2c00ac <__ccfg+0x2a0104>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
};
      1c:	24030000 	strcs	r0, [r3], #-0
      20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      24:	0008030b 	andeq	r0, r8, fp, lsl #6
      28:	00160400 	andseq	r0, r6, r0, lsl #8
      2c:	0b3a0e03 	bleq	e83840 <__ccfg+0xe63898>
      30:	0b39053b 	bleq	e41524 <__ccfg+0xe2157c>
      34:	00001349 	andeq	r1, r0, r9, asr #6
      38:	03001605 	movweq	r1, #1541	; 0x605
      3c:	3b0b3a0e 	blcc	2ce87c <__ccfg+0x2ae8d4>
			i = k;
      40:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				j->Next = k;
      44:	06000013 			; <UNDEFINED> instruction: 0x06000013
      48:	0b0b0117 	bleq	2c04ac <__ccfg+0x2a0504>
}
      4c:	0b3b0b3a 	bleq	ec2d3c <__ccfg+0xea2d94>
      50:	13010b39 	movwne	r0, #6969	; 0x1b39
      54:	0d070000 	stceq	0, cr0, [r7, #-0]
		release;
      58:	3a0e0300 	bcc	380c60 <__ccfg+0x360cb8>
      5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			nq++;
      60:	0013490b 	andseq	r4, r3, fp, lsl #18
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	01010800 	tsteq	r1, r0, lsl #16
      68:	13011349 	movwne	r1, #4937	; 0x1349
      6c:	21090000 	mrscs	r0, (UNDEF: 9)
      70:	2f134900 	svccs	0x00134900
      74:	0a00000b 	beq	a8 <g_pfnVectors+0xa8>
      78:	0b0b0113 	bleq	2c04cc <__ccfg+0x2a0524>
      7c:	0b3b0b3a 	bleq	ec2d6c <__ccfg+0xea2dc4>
      80:	13010b39 	movwne	r0, #6969	; 0x1b39
      84:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      88:	3a0e0300 	bcc	380c90 <__ccfg+0x360ce8>
      8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (!button_still_pressed (__button_list [pbutton]))
      90:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      94:	0c00000b 	stceq	0, cr0, [r0], {11}
      98:	0b0b000f 	bleq	2c00dc <__ccfg+0x2a0134>
	if (baction == NULL)
      9c:	130d0000 	movwne	r0, #53248	; 0xd000
      a0:	0b0e0301 	bleq	380cac <__ccfg+0x360d04>
	(*baction) (pbutton);
      a4:	3b0b3a0b 	blcc	2ce8d8 <__ccfg+0x2ae930>
endthread
      a8:	0013010b 	andseq	r0, r3, fp, lsl #2
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	000d0e00 	andeq	r0, sp, r0, lsl #28
      b0:	13490e03 	movtne	r0, #40451	; 0x9e03
endthread
      b4:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
      b8:	130f0000 	movwne	r0, #61440	; 0xf000
      bc:	0b0e0301 	bleq	380cc8 <__ccfg+0x360d20>
      c0:	3b0b3a0b 	blcc	2ce8f4 <__ccfg+0x2ae94c>
      c4:	010b390b 	tsteq	fp, fp, lsl #18
fsm sender(struct ResponseMessage *message) {
      c8:	10000013 	andne	r0, r0, r3, lsl r0
      cc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      d0:	0b3b0b3a 	bleq	ec2dc0 <__ccfg+0xea2e18>
}
      d4:	13490b39 	movtne	r0, #39737	; 0x9b39
      d8:	00000b38 	andeq	r0, r0, r8, lsr fp
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	0b000f11 	bleq	3d28 <TrimAfterColdResetWakeupFromShutDown+0x4>
      e0:	0013490b 	andseq	r4, r3, fp, lsl #18
      e4:	01131200 	tsteq	r3, r0, lsl #4
      e8:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
		packet[0] = 0;
      ec:	0b3b0b3a 	bleq	ec2ddc <__ccfg+0xea2e34>
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	13010b39 	movwne	r0, #6969	; 0x1b39
		*p = message->tpe;p++;
      f4:	0d130000 	ldceq	0, cr0, [r3, #-0]
      f8:	3a0e0300 	bcc	380d00 <__ccfg+0x360d58>
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		*p = message->sender_id;p++;
     100:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		*p = message->receiver_id;p++;
     104:	14000005 	strne	r0, [r0], #-5
		switch(message->tpe) {
     108:	0c270015 	stceq	0, cr0, [r7], #-84	; 0xffffffac
     10c:	15150000 	ldrne	r0, [r5, #-0]
     110:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
		tcv_endp(packet);
     114:	00130113 	andseq	r0, r3, r3, lsl r1
     118:	00051600 	andeq	r1, r5, r0, lsl #12
		ser_out(CONFIRM_message, "Message sent\r\n");
     11c:	00001349 	andeq	r1, r0, r9, asr #6
     120:	49002617 	stmdbmi	r0, {r0, r1, r2, r4, r9, sl, sp}
}
     124:	18000013 	stmdane	r0, {r0, r1, r4}
		finish;
     128:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     12c:	0b3a050b 	bleq	e81560 <__ccfg+0xe615b8>
				*p = message->status;p++;
     130:	0b39053b 	bleq	e41624 <__ccfg+0xe2167c>
     134:	00001301 	andeq	r1, r0, r1, lsl #6
				strncpy(p, message->record, sizeof(message->record));
     138:	03000d19 	movweq	r0, #3353	; 0xd19
				*p = message->padding;p++;
     13c:	3b0b3a0e 	blcc	2ce97c <__ccfg+0x2ae9d4>
				strncpy(p, message->record, sizeof(message->record));
     140:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				strncpy(p, message->record, sizeof(message->record));
     144:	000b3813 	andeq	r3, fp, r3, lsl r8
     148:	000d1a00 	andeq	r1, sp, r0, lsl #20
				strncpy(p, message->record, sizeof(message->record));
     14c:	0b3a0e03 	bleq	e83960 <__ccfg+0xe639b8>
				*p = message->record_index;p++;
     150:	0b39053b 	bleq	e41644 <__ccfg+0xe2169c>
				*p = message->padding;
     154:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
				break;
     158:	131b0000 	tstne	fp, #0
     15c:	0b0e0301 	bleq	380d68 <__ccfg+0x360dc0>
     160:	3b0b3a0b 	blcc	2ce994 <__ccfg+0x2ae9ec>
     164:	010b3905 	tsteq	fp, r5, lsl #18
     168:	1c000013 	stcne	0, cr0, [r0], {19}
		node->nnodes[i] = 0;
     16c:	0b0b0113 	bleq	2c05c0 <__ccfg+0x2a0618>
     170:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     174:	13010b39 	movwne	r0, #6969	; 0x1b39
     178:	171d0000 	ldrne	r0, [sp, -r0]
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     17c:	3a0b0b01 	bcc	2c2d88 <__ccfg+0x2a2de0>
bool init_node(struct Node* node){
     180:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    node->id  = 0;                  // default id value 0
     184:	0013010b 	andseq	r0, r3, fp, lsl #2
    node->index = 0;                // default entry count 0
     188:	000d1e00 	andeq	r1, sp, r0, lsl #28
    node->data_base.item_count = 0; // default no items in array
     18c:	0b3a0e03 	bleq	e839a0 <__ccfg+0xe639f8>
	reset_array(node);
     190:	0b39053b 	bleq	e41684 <__ccfg+0xe216dc>
    DEBUG_PRINT("Error initializing node...\n");
     194:	00001349 	andeq	r1, r0, r9, asr #6
     198:	0300131f 	movweq	r1, #799	; 0x31f
};
     19c:	000c3c0e 	andeq	r3, ip, lr, lsl #24
     1a0:	01152000 	tsteq	r5, r0
uint8_t generate_request_num(void){
     1a4:	13010c27 	movwne	r0, #7207	; 0x1c27
    return (uint8_t) (rand() % 255);
     1a8:	34210000 	strtcc	r0, [r1], #-0
     1ac:	3a0e0300 	bcc	380db4 <__ccfg+0x360e0c>
     1b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
     1b4:	3f13490b 	svccc	0x0013490b
            node->nnodes[i] = 0; // set to null byte
     1b8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     1bc:	00352200 	eorseq	r2, r5, r0, lsl #4
     1c0:	00001349 	andeq	r1, r0, r9, asr #6
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1c4:	03000d23 	movweq	r0, #3363	; 0xd23
};
     1c8:	3b0b3a0e 	blcc	2cea08 <__ccfg+0x2aea60>
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1cc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     1d0:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
        node->data_base.item_array[index].data_entry[0] = '\0';
     1d4:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     1d8:	2400000b 	strcs	r0, [r0], #-11
     1dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
        node->data_base.item_count -= 1;
     1e0:	0b3b0b3a 	bleq	ec2ed0 <__ccfg+0xea2f28>
};
     1e4:	13490b39 	movtne	r0, #39737	; 0x9b39
fsm receiver(struct Node* node_db) {
     1e8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     1ec:	21250000 			; <UNDEFINED> instruction: 0x21250000
     1f0:	26000000 	strcs	r0, [r0], -r0
     1f4:	0e030104 	adfeqs	f0, f3, f4
     1f8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     1fc:	0b3b0b3a 	bleq	ec2eec <__ccfg+0xea2f44>
     200:	13010b39 	movwne	r0, #6969	; 0x1b39
     204:	28270000 	stmdacs	r7!, {}	; <UNPREDICTABLE>
		incoming_packet = tcv_rnp(receiving, sfd);
     208:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     20c:	2800000b 	stmdacs	r0, {r0, r1, r3}
     210:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     214:	0b3b0b3a 	bleq	ec2f04 <__ccfg+0xea2f5c>
     218:	13490b39 	movtne	r0, #39737	; 0x9b39
     21c:	0a020c3f 	beq	83320 <__ccfg+0x63378>
     220:	34290000 	strtcc	r0, [r9], #-0
		switch (tpe){
     224:	3a080300 	bcc	200e2c <__ccfg+0x1e0e84>
     228:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     22c:	3f13490b 	svccc	0x0013490b
     230:	000a020c 	andeq	r0, sl, ip, lsl #4
     234:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
     238:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     23c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				DEBUG_PRINT("\r\nRECEIVED GID: %u", discovery_request_message->gid);
     240:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     244:	01120111 	tsteq	r2, r1, lsl r1
				DEBUG_PRINT("\rRECEIVED TYPE: %u", discovery_request_message->tpe);
     248:	13010a40 	movwne	r0, #6720	; 0x1a40
     24c:	052b0000 	streq	r0, [fp, #-0]!
				DEBUG_PRINT("\r\nRECEIVED REQ NUM: %u", discovery_request_message->request_number);
     250:	3a0e0300 	bcc	380e58 <__ccfg+0x360eb0>
     254:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				DEBUG_PRINT("\r\nRECEIVED SID: %u", discovery_request_message->sender_id);
     258:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     25c:	2c000006 	stccs	0, cr0, [r0], {6}
				DEBUG_PRINT("\r\nRECEIVED RID: %u", discovery_request_message->receiver_id);
     260:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     264:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				if (discovery_request_message->gid == node_db->gid){
     268:	01110b39 	tsteq	r1, r9, lsr fp
     26c:	0b2d0000 	bleq	b40274 <__ccfg+0xb202cc>
					response_message_0->gid = discovery_request_message->gid;
     270:	00065501 	andeq	r5, r6, r1, lsl #10
					response_message_0->tpe = DISCOVERY_RESPONSE;
     274:	00342e00 	eorseq	r2, r4, r0, lsl #28
					response_message_0->request_number = discovery_request_message->request_number;
     278:	0b3a0e03 	bleq	e83a8c <__ccfg+0xe63ae4>
					response_message_0->sender_id = node_db->id;
     27c:	0b39053b 	bleq	e41770 <__ccfg+0xe217c8>
					response_message_0->receiver_id = discovery_request_message->sender_id;
     280:	0a021349 	beq	84fac <__ccfg+0x65004>
					call sender(response_message_0, done_case);
     284:	0b2f0000 	bleq	bc028c <__ccfg+0xba02e4>
     288:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     28c:	00130101 	andseq	r0, r3, r1, lsl #2
     290:	011d3000 	tsteq	sp, r0
     294:	01521331 	cmpeq	r2, r1, lsr r3
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
     298:	0b580655 	bleq	1601bf4 <__ccfg+0x15e1c4c>
     29c:	0b570559 	bleq	15c1808 <__ccfg+0x15a1860>
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
     2a0:	05310000 	ldreq	r0, [r1, #-0]!
     2a4:	02133100 	andseq	r3, r3, #0, 2
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
     2a8:	32000006 	andcc	r0, r0, #6
     2ac:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
     2b0:	00001301 	andeq	r1, r0, r1, lsl #6
     2b4:	03003433 	movweq	r3, #1075	; 0x433
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
     2b8:	3b0b3a08 	blcc	2ceae0 <__ccfg+0x2aeb38>
     2bc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2c0:	00060213 	andeq	r0, r6, r3, lsl r2
     2c4:	011d3400 	tsteq	sp, r0, lsl #8
     2c8:	01111331 	tsteq	r1, r1, lsr r3
     2cc:	0b580112 	bleq	160071c <__ccfg+0x15e0774>
     2d0:	0b570559 	bleq	15c183c <__ccfg+0x15a1894>
     2d4:	34350000 	ldrtcc	r0, [r5], #-0
     2d8:	3a0e0300 	bcc	380ee0 <__ccfg+0x360f38>
     2dc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     2e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     2e4:	36000006 	strcc	r0, [r0], -r6
					node_db->index+=1;
     2e8:	0111010b 	tsteq	r1, fp, lsl #2
		tcv_endp(incoming_packet);
     2ec:	00000112 	andeq	r0, r0, r2, lsl r1
     2f0:	3f012e37 	svccc	0x00012e37
		proceed receiving;
     2f4:	3a0e030c 	bcc	380f2c <__ccfg+0x360f84>
     2f8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		ser_out(response_1_create, "\r\nData Saved");
     2fc:	110c270b 	tstne	ip, fp, lsl #14
     300:	40011201 	andmi	r1, r1, r1, lsl #4
		proceed receiving;
     304:	0013010a 	andseq	r0, r3, sl, lsl #2
		ser_out(response_1_delete, "\r\nRecord Deleted");
     308:	00053800 	andeq	r3, r5, r0, lsl #16
     30c:	0b3a0e03 	bleq	e83b20 <__ccfg+0xe63b78>
		proceed receiving;
     310:	0b390b3b 	bleq	e43004 <__ccfg+0xe2305c>
     314:	06021349 	streq	r1, [r2], -r9, asr #6
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     318:	34390000 	ldrtcc	r0, [r9], #-0
     31c:	3a0e0300 	bcc	380f24 <__ccfg+0x360f7c>
     320:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     324:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		proceed receiving;
     328:	3a000006 	bcc	348 <receiver+0x160>
     32c:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     330:	0b3b0b3a 	bleq	ec3020 <__ccfg+0xea3078>
     334:	01110b39 	tsteq	r1, r9, lsr fp
     338:	343b0000 	ldrtcc	r0, [fp], #-0
		proceed receiving;
     33c:	3a0e0300 	bcc	380f44 <__ccfg+0x360f9c>
     340:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     344:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     348:	3c00000a 	stccc	0, cr0, [r0], {10}
     34c:	08030034 	stmdaeq	r3, {r2, r4, r5}
		proceed receiving;
     350:	0b3b0b3a 	bleq	ec3040 <__ccfg+0xea3098>
     354:	13490b39 	movtne	r0, #39737	; 0x9b39
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     358:	00000a02 	andeq	r0, r0, r2, lsl #20
     35c:	0300343d 	movweq	r3, #1085	; 0x43d
     360:	3b0b3a0e 	blcc	2ceba0 <__ccfg+0x2aebf8>
		proceed receiving;
     364:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     368:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     36c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		proceed receiving;
     370:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     374:	13490b39 	movtne	r0, #39737	; 0x9b39
}
     378:	1d3f0000 	ldcne	0, cr0, [pc, #-0]	; 380 <receiver+0x198>
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     37c:	11133101 	tstne	r3, r1, lsl #2
     380:	58011201 	stmdapl	r1, {r0, r9, ip}
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     384:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     388:	0013010b 	andseq	r0, r3, fp, lsl #2
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
     38c:	00054000 	andeq	r4, r5, r0
     390:	00001331 	andeq	r1, r0, r1, lsr r3
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     394:	31003441 	tstcc	r0, r1, asr #8
     398:	42000013 	andmi	r0, r0, #19
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     39c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     3a0:	06550152 			; <UNDEFINED> instruction: 0x06550152
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     3a4:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     3a8:	13010b57 	movwne	r0, #6999	; 0x1b57
     3ac:	34430000 	strbcc	r0, [r3], #-0
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     3b0:	3a0e0300 	bcc	380fb8 <__ccfg+0x361010>
     3b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3b8:	1c13490b 			; <UNDEFINED> instruction: 0x1c13490b
		strncpy(response_message->record, rec, 20);
     3bc:	4400000b 	strmi	r0, [r0], #-11
     3c0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     3c4:	0b3b0b3a 	bleq	ec30b4 <__ccfg+0xea310c>
					call sender(response_message_4, done_case);
     3c8:	13490b39 	movtne	r0, #39737	; 0x9b39
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3cc:	00000602 	andeq	r0, r0, r2, lsl #12
     3d0:	3f012e45 	svccc	0x00012e45
     3d4:	3a0e030c 	bcc	38100c <__ccfg+0x361064>
     3d8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     3dc:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     3e0:	010b2013 	tsteq	fp, r3, lsl r0
					if (delete_record(node_db, delete_record_message->record_index)){
     3e4:	46000013 			; <UNDEFINED> instruction: 0x46000013
     3e8:	08030005 	stmdaeq	r3, {r0, r2}
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3ec:	0b3b0b3a 	bleq	ec30dc <__ccfg+0xea3134>
     3f0:	13490b39 	movtne	r0, #39737	; 0x9b39
     3f4:	05470000 	strbeq	r0, [r7, #-0]
     3f8:	3a0e0300 	bcc	381000 <__ccfg+0x361058>
     3fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     400:	0013490b 	andseq	r4, r3, fp, lsl #18
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     404:	012e4800 			; <UNDEFINED> instruction: 0x012e4800
     408:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    return node->data_base.item_array[index];
     40c:	0b3b0b3a 	bleq	ec30fc <__ccfg+0xea3154>
     410:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     414:	01111349 	tsteq	r1, r9, asr #6
     418:	0a400112 	beq	1000868 <__ccfg+0xfe08c0>
     41c:	00001301 	andeq	r1, r0, r1, lsl #6
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     420:	03003449 	movweq	r3, #1097	; 0x449
    return node->data_base.item_array[index];
     424:	3b0b3a08 	blcc	2cec4c <__ccfg+0x2aeca4>
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     428:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     42c:	4a000013 	bmi	480 <receiver+0x298>
     430:	0000010b 	andeq	r0, r0, fp, lsl #2
		strncpy(response_message->record, rec, 20);
     434:	3f002e4b 	svccc	0x00002e4b
     438:	3a0e030c 	bcc	381070 <__ccfg+0x3610c8>
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     43c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     440:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     444:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     448:	000a4001 	andeq	r4, sl, r1
     44c:	00054c00 	andeq	r4, r5, r0, lsl #24
     450:	0b3a0e03 	bleq	e83c64 <__ccfg+0xe63cbc>
     454:	0b390b3b 	bleq	e43148 <__ccfg+0xe231a0>
				if(!response_flag){
     458:	0a021349 	beq	85184 <__ccfg+0x651dc>
					response_flag=1;
     45c:	2e4d0000 	cdpcs	0, 4, cr0, cr13, cr0, {0}
					trigger(&response_flag);
     460:	3a0e0300 	bcc	381068 <__ccfg+0x3610c0>
				switch(response_message_5->status){
     464:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     468:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     46c:	000b2013 	andeq	r2, fp, r3, lsl r0
     470:	012e4e00 			; <UNDEFINED> instruction: 0x012e4e00
     474:	01111331 	tsteq	r1, r1, lsr r3
     478:	0a400112 	beq	10008c8 <__ccfg+0xfe0920>
     47c:	00001301 	andeq	r1, r0, r1, lsl #6
     480:	3100054f 	tstcc	r0, pc, asr #10
     484:	000a0213 	andeq	r0, sl, r3, lsl r2
     488:	012e5000 			; <UNDEFINED> instruction: 0x012e5000
     48c:	01111331 	tsteq	r1, r1, lsr r3
     490:	0a400112 	beq	10008e0 <__ccfg+0xfe0938>
     494:	01000000 	mrseq	r0, (UNDEF: 0)
     498:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     49c:	0e030b13 	vmoveq.32	d3[0], r0
     4a0:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
     4a4:	06100111 			; <UNDEFINED> instruction: 0x06100111
     4a8:	24020000 	strcs	r0, [r2], #-0
     4ac:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     4b0:	000e030b 	andeq	r0, lr, fp, lsl #6
     4b4:	00160300 	andseq	r0, r6, r0, lsl #6
     4b8:	0b3a0e03 	bleq	e83ccc <__ccfg+0xe63d24>
     4bc:	0b390b3b 	bleq	e431b0 <__ccfg+0xe23208>
     4c0:	00001349 	andeq	r1, r0, r9, asr #6
     4c4:	0b002404 	bleq	94dc <__exidx_end+0x3ab8>
     4c8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     4cc:	05000008 	streq	r0, [r0, #-8]
     4d0:	13490026 	movtne	r0, #36902	; 0x9026
     4d4:	35060000 	strcc	r0, [r6, #-0]
     4d8:	00134900 	andseq	r4, r3, r0, lsl #18
						if (response_checker[0] == response_message_5->request_number){
     4dc:	000f0700 	andeq	r0, pc, r0, lsl #14
     4e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     4e4:	13080000 	movwne	r0, #32768	; 0x8000
							switch(response_checker[1]){
     4e8:	3a0b0b01 	bcc	2c30f4 <__ccfg+0x2a314c>
     4ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4f0:	0013010b 	andseq	r0, r3, fp, lsl #2
     4f4:	000d0900 	andeq	r0, sp, r0, lsl #18
									proceed response_1_create;
     4f8:	0b3a0e03 	bleq	e83d0c <__ccfg+0xe63d64>
						proceed response_2;
     4fc:	0b390b3b 	bleq	e431f0 <__ccfg+0xe23248>
									proceed response_1_delete;
     500:	0b0b1349 	bleq	2c522c <__ccfg+0x2a5284>
									proceed response_1_retrieve;
     504:	0b0c0b0d 	bleq	303140 <__ccfg+0x2e3198>
						proceed response_2;
     508:	00000b38 	andeq	r0, r0, r8, lsr fp
						proceed response_3;
     50c:	03000d0a 	movweq	r0, #3338	; 0xd0a
						proceed response_4;
     510:	3b0b3a0e 	blcc	2ced50 <__ccfg+0x2aeda8>
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     514:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     518:	000b3813 	andeq	r3, fp, r3, lsl r8
}
     51c:	00340b00 	eorseq	r0, r4, r0, lsl #22
     520:	0b3a0e03 	bleq	e83d34 <__ccfg+0xe63d8c>
     524:	0b390b3b 	bleq	e43218 <__ccfg+0xe23270>
     528:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 40c <receiver+0x224>
bool delete_all(struct Node *node){
     52c:	00000c3c 	andeq	r0, r0, ip, lsr ip
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     530:	4901010c 	stmdbmi	r1, {r2, r3, r8}
        for(int i = 0; i <= node->data_base.item_count; i++){
     534:	00130113 	andseq	r0, r3, r3, lsl r1
            node->data_base.item_array[i].data_entry[0] = '\0';
     538:	00210d00 	eoreq	r0, r1, r0, lsl #26
        for(int i = 0; i <= node->data_base.item_count; i++){
     53c:	160e0000 	strne	r0, [lr], -r0
            node->data_base.item_array[i].timestamp = 0;
     540:	3a0e0300 	bcc	381148 <__ccfg+0x3611a0>
        for(int i = 0; i <= node->data_base.item_count; i++){
     544:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    node->data_base.item_count = 0;
     548:	0013490b 	andseq	r4, r3, fp, lsl #18
}
     54c:	01150f00 	tsteq	r5, r0, lsl #30
        return true;
     550:	13010c27 	movwne	r0, #7207	; 0x1c27
fsm root {
     554:	05100000 	ldreq	r0, [r0, #-0]
     558:	00134900 	andseq	r4, r3, r0, lsl #18
     55c:	00341100 	eorseq	r1, r4, r0, lsl #2
     560:	0b3a0e03 	bleq	e83d74 <__ccfg+0xe63dcc>
     564:	0b39053b 	bleq	e41a58 <__ccfg+0xe21ab0>
     568:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 44c <receiver+0x264>
     56c:	00000c3c 	andeq	r0, r0, ip, lsr ip
     570:	0b011312 	bleq	451c0 <__ccfg+0x25218>
     574:	3b0b3a0b 	blcc	2ceda8 <__ccfg+0x2aee00>
     578:	010b3905 	tsteq	fp, r5, lsl #18
     57c:	13000013 	movwne	r0, #19
     580:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     584:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     588:	13490b39 	movtne	r0, #39737	; 0x9b39
     58c:	00000b38 	andeq	r0, r0, r8, lsr fp
     590:	03011314 	movweq	r1, #4884	; 0x1314
     594:	3a0b0b0e 	bcc	2c31d4 <__ccfg+0x2a322c>
     598:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     59c:	0013010b 	andseq	r0, r3, fp, lsl #2
     5a0:	00211500 	eoreq	r1, r1, r0, lsl #10
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     5a4:	0b2f1349 	bleq	bc52d0 <__ccfg+0xba5328>
     5a8:	34160000 	ldrcc	r0, [r6], #-0
     5ac:	3a0e0300 	bcc	3811b4 <__ccfg+0x36120c>
		init_node(node_db);
     5b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		phys_cc1350(0, MAX_PKT_LEN);
     5b4:	0013490b 	andseq	r4, r3, fp, lsl #18
     5b8:	00341700 	eorseq	r1, r4, r0, lsl #14
		tcv_plug (0, &plug_null);
     5bc:	0b3a0e03 	bleq	e83dd0 <__ccfg+0xe63e28>
     5c0:	0b390b3b 	bleq	e432b4 <__ccfg+0xe2330c>
		sfd = tcv_open (WNONE, 0, 0);
     5c4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 4a8 <receiver+0x2c0>
     5c8:	00000a02 	andeq	r0, r0, r2, lsl #20
     5cc:	03003418 	movweq	r3, #1048	; 0x418
     5d0:	3b0b3a0e 	blcc	2cee10 <__ccfg+0x2aee68>
     5d4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			diag("Cannot open tcv interface");
     5d8:	000a0213 	andeq	r0, sl, r3, lsl r2
     5dc:	00341900 	eorseq	r1, r4, r0, lsl #18
			halt();
     5e0:	0b3a1347 	bleq	e85304 <__ccfg+0xe6535c>
		tcv_control(sfd, PHYSOPT_ON, NULL);
     5e4:	0b39053b 	bleq	e41ad8 <__ccfg+0xe21b30>
     5e8:	00000a02 	andeq	r0, r0, r2, lsl #20
		runfsm receiver(node_db);
     5ec:	3f012e1a 	svccc	0x00012e1a
     5f0:	3a0e030c 	bcc	381228 <__ccfg+0x361280>
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     5f4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     5f8:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     5fc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     600:	010a4001 	tsteq	sl, r1
     604:	1b000013 	blne	658 <root+0x104>
     608:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
		ser_inf(get_choice, "%c", &CHOICE);
     60c:	00001301 	andeq	r1, r0, r1, lsl #6
     610:	0300341c 	movweq	r3, #1052	; 0x41c
     614:	3b0b3a08 	blcc	2cee3c <__ccfg+0x2aee94>
		switch(CHOICE) {
     618:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     61c:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     620:	1331001d 	teqne	r1, #29
     624:	01120111 	tsteq	r2, r1, lsl r1
     628:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     62c:	00000b57 	andeq	r0, r0, r7, asr fp
     630:	3f012e1e 	svccc	0x00012e1e
     634:	3a0e030c 	bcc	38126c <__ccfg+0x3612c4>
     638:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     63c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
     640:	010a4001 	tsteq	sl, r1
     644:	1f000013 	svcne	0x00000013
				proceed menu;
     648:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     64c:	0b3b0b3a 	bleq	ec333c <__ccfg+0xea3394>
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     650:	00000b39 	andeq	r0, r0, r9, lsr fp
     654:	31011d20 	tstcc	r1, r0, lsr #26
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     658:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     65c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     660:	010b5705 	tsteq	fp, r5, lsl #14
		DEBUG_PRINT("setting node group ID");
     664:	21000013 	tstcs	r0, r3, lsl r0
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     668:	13310005 	teqne	r1, #5
    node->gid = gid; 
     66c:	1d220000 	stcne	0, cr0, [r2, #-0]
		proceed menu;
     670:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     674:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     678:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     67c:	0013010b 	andseq	r0, r3, fp, lsl #2
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     680:	010b2300 	mrseq	r2, (UNDEF: 59)
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     684:	00000655 	andeq	r0, r0, r5, asr r6
     688:	31000a24 	tstcc	r0, r4, lsr #20
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     68c:	00011113 	andeq	r1, r1, r3, lsl r1
     690:	001d2500 	andseq	r2, sp, r0, lsl #10
		if((node_db->id < 1) || (node_db->id > 25)){
     694:	01521331 	cmpeq	r2, r1, lsr r3
     698:	0b580655 	bleq	1601ff4 <__ccfg+0x15e204c>
     69c:	0b570559 	bleq	15c1c08 <__ccfg+0x15a1c60>
			strncpy(reason, "Out of Range", 50);
     6a0:	1d260000 	stcne	0, cr0, [r6, #-0]
     6a4:	11133101 	tstne	r3, r1, lsl #2
			proceed invalid_node_id;
     6a8:	58011201 	stmdapl	r1, {r0, r9, ip}
     6ac:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
				strncpy(reason, "ID is already in use", 50);
     6b0:	0013010b 	andseq	r0, r3, fp, lsl #2
		for(int i = 0; i < node_db->index; i++){
     6b4:	011d2700 	tsteq	sp, r0, lsl #14
     6b8:	01111331 	tsteq	r1, r1, lsr r3
     6bc:	0b580112 	bleq	1600b0c <__ccfg+0x15e0b64>
		proceed menu;
     6c0:	0b570559 	bleq	15c1c2c <__ccfg+0x15a1c84>
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     6c4:	1d280000 	stcne	0, cr0, [r8, #-0]
     6c8:	11133100 	tstne	r3, r0, lsl #2
     6cc:	58011201 	stmdapl	r1, {r0, r9, ip}
     6d0:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
		proceed get_new_node_id;
     6d4:	2900000b 	stmdbcs	r0, {r0, r1, r3}
     6d8:	08030034 	stmdaeq	r3, {r2, r4, r5}
		if (!clear_node_neighbour_array(node_db)){
     6dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     6e0:	13490b39 	movtne	r0, #39737	; 0x9b39
			strncpy(reason, "Error Clearing Node Array", 50);
     6e4:	00000602 	andeq	r0, r0, r2, lsl #12
     6e8:	03012e2a 	movweq	r2, #7722	; 0x1e2a
     6ec:	3b0b3a0e 	blcc	2cef2c <__ccfg+0x2aef84>
			proceed error;
     6f0:	200b3905 	andcs	r3, fp, r5, lsl #18
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     6f4:	0013010b 	andseq	r0, r3, fp, lsl #2
     6f8:	000a2b00 	andeq	r2, sl, r0, lsl #22
		request_packet->gid = node_db->gid;
     6fc:	0b3a0e03 	bleq	e83f10 <__ccfg+0xe63f68>
     700:	0b39053b 	bleq	e41bf4 <__ccfg+0xe21c4c>
		request_packet->tpe = DISCOVERY_REQUEST;
     704:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
		request_packet->request_number = generate_request_num();
     708:	030c3f01 	movweq	r3, #52993	; 0xcf01
     70c:	3b0b3a0e 	blcc	2cef4c <__ccfg+0x2aefa4>
		call sender(request_packet, wait_discovery);
     710:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     714:	1201110c 	andne	r1, r1, #12, 2
		request_packet->receiver_id=0;
     718:	010a4001 	tsteq	sl, r1
		call sender(request_packet, wait_discovery);
     71c:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     720:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     724:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			release;
     728:	13490b39 	movtne	r0, #39737	; 0x9b39
				proceed get_new_node_id;
     72c:	00000602 	andeq	r0, r0, r2, lsl #12
				proceed clear_neighbour_array;
     730:	11010b2e 	tstne	r1, lr, lsr #22
				proceed create_proto_start;
     734:	01011201 	tsteq	r1, r1, lsl #4
				proceed start_delete_proto;
     738:	2f000013 	svccs	0x00000013
				proceed retrieve_proto;
     73c:	13310034 	teqne	r1, #52	; 0x34
				proceed display_db;
     740:	0b300000 	bleq	c00748 <__ccfg+0xbe07a0>
				proceed del_local;
     744:	55133101 	ldrpl	r3, [r3, #-257]	; 0xfffffeff
			if(node_db->id == node_db->nnodes[i]){
     748:	31000006 	tstcc	r0, r6
     74c:	13310034 	teqne	r1, #52	; 0x34
     750:	00000602 	andeq	r0, r0, r2, lsl #12
				strncpy(reason, "ID is already in use", 50);
     754:	31011d32 	tstcc	r1, r2, lsr sp
     758:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
				proceed invalid_node_id;
     75c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     760:	000b570b 	andeq	r5, fp, fp, lsl #14
		for(int i = 0; i < node_db->index; i++){
     764:	011d3300 	tsteq	sp, r0, lsl #6
		if (discovery_wait_flag == 0){
     768:	01521331 	cmpeq	r2, r1, lsr r3
			discovery_wait_flag=1;
     76c:	0b580655 	bleq	16020c8 <__ccfg+0x15e2120>
     770:	0b570559 	bleq	15c1cdc <__ccfg+0x15a1d34>
			delay(3000, find_proto_start);
     774:	05340000 	ldreq	r0, [r4, #-0]!
     778:	3a080300 	bcc	201380 <__ccfg+0x1e13d8>
		if (discovery_wait_flag == 1){
     77c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			discovery_wait_flag=0;
     780:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     784:	3500000a 	strcc	r0, [r0, #-10]
			delay(3000, display_neighbour_nodes);
     788:	13310005 	teqne	r1, #5
     78c:	00000602 	andeq	r0, r0, r2, lsl #12
     790:	03003436 	movweq	r3, #1078	; 0x436
     794:	3b0b3a08 	blcc	2cefbc <__ccfg+0x2af014>
     798:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     79c:	00060213 	andeq	r0, r6, r3, lsl r2
     7a0:	010b3700 	tsteq	fp, r0, lsl #14
     7a4:	01120111 	tsteq	r2, r1, lsl r1
     7a8:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
     7ac:	3a0e0300 	bcc	3813b4 <__ccfg+0x36140c>
     7b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     7b4:	000b200b 	andeq	r2, fp, fp
     7b8:	012e3900 			; <UNDEFINED> instruction: 0x012e3900
     7bc:	0b3a0e03 	bleq	e83fd0 <__ccfg+0xe64028>
     7c0:	0b39053b 	bleq	e41cb4 <__ccfg+0xe21d0c>
     7c4:	01110c27 	tsteq	r1, r7, lsr #24
     7c8:	0a400112 	beq	1000c18 <__ccfg+0xfe0c70>
     7cc:	00001301 	andeq	r1, r0, r1, lsl #6
     7d0:	03012e3a 	movweq	r2, #7738	; 0x1e3a
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     7d4:	3b0b3a0e 	blcc	2cf014 <__ccfg+0x2af06c>
     7d8:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7dc:	1113490c 	tstne	r3, ip, lsl #18
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     7e0:	40011201 	andmi	r1, r1, r1, lsl #4
			if (node_db->nnodes[i] == 0) break;
     7e4:	0013010a 	andseq	r0, r3, sl, lsl #2
     7e8:	00053b00 	andeq	r3, r5, r0, lsl #22
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     7ec:	0b3a0803 	bleq	e82800 <__ccfg+0xe62858>
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7f0:	0b39053b 	bleq	e41ce4 <__ccfg+0xe21d3c>
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     7f4:	06021349 	streq	r1, [r2], -r9, asr #6
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7f8:	2e3c0000 	cdpcs	0, 3, cr0, cr12, cr0, {0}
		proceed menu;
     7fc:	3a0e0301 	bcc	381408 <__ccfg+0x361460>
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     800:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     804:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     808:	010a4001 	tsteq	sl, r1
     80c:	3d000013 	stccc	0, cr0, [r0, #-76]	; 0xffffffb4
     810:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 760 <root+0x20c>
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     814:	0b3a0e03 	bleq	e84028 <__ccfg+0xe64080>
     818:	0b39053b 	bleq	e41d0c <__ccfg+0xe21d64>
			strncpy(reason, "Error: improper ID", 50);
     81c:	13490c27 	movtne	r0, #39975	; 0x9c27
     820:	13010b20 	movwne	r0, #6944	; 0x1b20
     824:	053e0000 	ldreq	r0, [lr, #-0]!
			proceed error;
     828:	3a080300 	bcc	201430 <__ccfg+0x1e1488>
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     82c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     830:	0013490b 	andseq	r4, r3, fp, lsl #18
		ser_in(get_record_to_create, user_provided_record, 20);
     834:	000a3f00 	andeq	r3, sl, r0, lsl #30
     838:	0b3a0803 	bleq	e8284c <__ccfg+0xe628a4>
     83c:	0b39053b 	bleq	e41d30 <__ccfg+0xe21d88>
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     840:	34400000 	strbcc	r0, [r0], #-0
		create_message->gid = node_db->gid;
     844:	3a0e0300 	bcc	38144c <__ccfg+0x3614a4>
     848:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     84c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		create_message->tpe = 2;
     850:	41000006 	tstmi	r0, r6
		create_message->request_number = generate_request_num();
     854:	0803000a 	stmdaeq	r3, {r1, r3}
		create_message->sender_id = node_db->id;
     858:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     85c:	01110b39 	tsteq	r1, r9, lsr fp
     860:	1d420000 	stclne	0, cr0, [r2, #-0]
		strncpy(create_message->record, user_provided_record, 20);
     864:	11133101 	tstne	r3, r1, lsl #2
		create_message->receiver_id = user_provided_receiver_id;
     868:	58011201 	stmdapl	r1, {r0, r9, ip}
		strncpy(create_message->record, user_provided_record, 20);
     86c:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
		response_checker[0] = create_message->request_number;
     870:	0013010b 	andseq	r0, r3, fp, lsl #2
		call sender(create_message, wait);
     874:	011d4300 	tsteq	sp, r0, lsl #6
		response_checker[1] = create_message->tpe;
     878:	01111331 	tsteq	r1, r1, lsr r3
     87c:	0b580112 	bleq	1600ccc <__ccfg+0x15e0d24>
		call sender(create_message, wait);
     880:	0b570b59 	bleq	15c35ec <__ccfg+0x15a3644>
     884:	2e440000 	cdpcs	0, 4, cr0, cr4, cr0, {0}
     888:	3a0e0301 	bcc	381494 <__ccfg+0x3614ec>
     88c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     890:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     894:	010b2013 	tsteq	fp, r3, lsl r0
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     898:	45000013 	strmi	r0, [r0, #-19]	; 0xffffffed
     89c:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     8a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     8a4:	13490b39 	movtne	r0, #39737	; 0x9b39
     8a8:	00000b20 	andeq	r0, r0, r0, lsr #22
			strncpy(reason, "Error: improper node ID", 50);
     8ac:	03012e46 	movweq	r2, #7750	; 0x1e46
     8b0:	3b0b3a0e 	blcc	2cf0f0 <__ccfg+0x2af148>
			proceed error;
     8b4:	200b390b 	andcs	r3, fp, fp, lsl #18
     8b8:	0013010b 	andseq	r0, r3, fp, lsl #2
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     8bc:	00344700 	eorseq	r4, r4, r0, lsl #14
     8c0:	0b3a0803 	bleq	e828d4 <__ccfg+0xe6292c>
		ser_inf(get_index_for_delete, "%d", &user_provided_index);
     8c4:	0b390b3b 	bleq	e435b8 <__ccfg+0xe23610>
     8c8:	00001349 	andeq	r1, r0, r9, asr #6
     8cc:	00010b48 	andeq	r0, r1, r8, asr #22
		if (user_provided_index < 0 || user_provided_index > 40){
     8d0:	012e4900 			; <UNDEFINED> instruction: 0x012e4900
			strncpy(reason, "Error: invalid index", 50);
     8d4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     8d8:	0b3b0b3a 	bleq	ec35c8 <__ccfg+0xea3620>
     8dc:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			proceed error;
     8e0:	01120111 	tsteq	r2, r1, lsl r1
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     8e4:	13010a40 	movwne	r0, #6720	; 0x1a40
     8e8:	054a0000 	strbeq	r0, [sl, #-0]
		delete_record->gid = node_db->gid;
     8ec:	3a080300 	bcc	2014f4 <__ccfg+0x1e154c>
     8f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		delete_record->tpe = DELETE_RECORD;
     8f8:	4b000006 	blmi	918 <root+0x3c4>
		delete_record->request_number = generate_request_num();
     8fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     900:	0b3b0b3a 	bleq	ec35f0 <__ccfg+0xea3648>
		delete_record->sender_id = node_db->id;
     904:	13490b39 	movtne	r0, #39737	; 0x9b39
		response_checker[0] = delete_record->request_number;
     908:	00000a02 	andeq	r0, r0, r2, lsl #20
		delete_record->receiver_id = user_provided_receiver_id;
     90c:	03000a4c 	movweq	r0, #2636	; 0xa4c
     910:	3b0b3a0e 	blcc	2cf150 <__ccfg+0x2af1a8>
		delete_record->record_index = user_provided_index;
     914:	110b390b 	tstne	fp, fp, lsl #18
     918:	4d000001 	stcmi	0, cr0, [r0, #-4]
		response_checker[0] = delete_record->request_number;
     91c:	1331001d 	teqne	r1, #29
		call sender(&delete_record, wait);
     920:	06550152 			; <UNDEFINED> instruction: 0x06550152
     924:	0b590b58 	bleq	164368c <__ccfg+0x16236e4>
     928:	00000b57 	andeq	r0, r0, r7, asr fp
     92c:	3f002e4e 	svccc	0x00002e4e
     930:	3a0e030c 	bcc	381568 <__ccfg+0x3615c0>
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     934:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     938:	110c270b 	tstne	ip, fp, lsl #14
		ser_inf(get_id_for_retrieve, "%d", &user_provided_receiver_id);
     93c:	40011201 	andmi	r1, r1, r1, lsl #4
     940:	4f00000a 	svcmi	0x0000000a
     944:	08030005 	stmdaeq	r3, {r0, r2}
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     948:	0b3b0b3a 	bleq	ec3638 <__ccfg+0xea3690>
     94c:	13490b39 	movtne	r0, #39737	; 0x9b39
			strncpy(reason, "Error: improper node ID", 50);
     950:	00000a02 	andeq	r0, r0, r2, lsl #20
     954:	03012e50 	movweq	r2, #7760	; 0x1e50
     958:	3b0b3a0e 	blcc	2cf198 <__ccfg+0x2af1f0>
			proceed error;
     95c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     960:	010b200c 	tsteq	fp, ip
     964:	51000013 	tstpl	r0, r3, lsl r0
		ser_inf(get_index_for_retrieve, "%d", &user_provided_index);
     968:	08030005 	stmdaeq	r3, {r0, r2}
     96c:	0b3b0b3a 	bleq	ec365c <__ccfg+0xea36b4>
     970:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (user_provided_index < 0 || user_provided_index > 40){
     974:	2e520000 	cdpcs	0, 5, cr0, cr2, cr0, {0}
     978:	3a0e0301 	bcc	381584 <__ccfg+0x3615dc>
			strncpy(reason, "Error: invalid index", 50);
     97c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     980:	200c270b 	andcs	r2, ip, fp, lsl #14
			proceed error;
     984:	0013010b 	andseq	r0, r3, fp, lsl #2
     988:	00055300 	andeq	r5, r5, r0, lsl #6
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     98c:	0b3a0e03 	bleq	e841a0 <__ccfg+0xe641f8>
		retrieve_record->tpe = RETRIEVE_RECORD;
     990:	0b39053b 	bleq	e41e84 <__ccfg+0xe21edc>
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     994:	00001349 	andeq	r1, r0, r9, asr #6
		retrieve_record->gid = node_db->gid;
     998:	03002e54 	movweq	r2, #3668	; 0xe54
		retrieve_record->tpe = RETRIEVE_RECORD;
     99c:	3b0b3a0e 	blcc	2cf1dc <__ccfg+0x2af234>
		retrieve_record->request_number = generate_request_num();
     9a0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     9a4:	000b200c 	andeq	r2, fp, ip
		retrieve_record->sender_id = node_db->id;
     9a8:	012e5500 			; <UNDEFINED> instruction: 0x012e5500
     9ac:	0b3a0e03 	bleq	e841c0 <__ccfg+0xe64218>
     9b0:	0b390b3b 	bleq	e436a4 <__ccfg+0xe236fc>
		call sender(&retrieve_record, wait);
     9b4:	13490c27 	movtne	r0, #39975	; 0x9c27
		retrieve_record->receiver_id = user_provided_receiver_id;
     9b8:	13010b20 	movwne	r0, #6944	; 0x1b20
		retrieve_record->record_index = user_provided_index;
     9bc:	2e560000 	cdpcs	0, 5, cr0, cr6, cr0, {0}
		response_checker[0] = retrieve_record->request_number;
     9c0:	3a0e0300 	bcc	3815c8 <__ccfg+0x361620>
		response_checker[1] = retrieve_record->tpe;
     9c4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9c8:	200c270b 	andcs	r2, ip, fp, lsl #14
		call sender(&retrieve_record, wait);
     9cc:	5700000b 	strpl	r0, [r0, -fp]
     9d0:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     9d4:	0b3b0b3a 	bleq	ec36c4 <__ccfg+0xea371c>
     9d8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     9dc:	0b201349 	bleq	805708 <__ccfg+0x7e5760>
     9e0:	2e580000 	cdpcs	0, 5, cr0, cr8, cr0, {0}
		if(node_db->data_base.item_count != 0){
     9e4:	3a0e0300 	bcc	3815ec <__ccfg+0x361644>
     9e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		ser_out(loop_through_data, "\r\n");
     9ec:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     9f0:	000b2013 	andeq	r2, fp, r3, lsl r0
		proceed menu;
     9f4:	012e5900 			; <UNDEFINED> instruction: 0x012e5900
     9f8:	01111331 	tsteq	r1, r1, lsr r3
		delete_all(node_db);
     9fc:	0a400112 	beq	1000e4c <__ccfg+0xfe0ea4>
     a00:	01000000 	mrseq	r0, (UNDEF: 0)
		proceed menu;
     a04:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
		delay(3000, timeout);
     a08:	0e030b13 	vmoveq.32	d3[0], r0
     a0c:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
     a10:	06100111 			; <UNDEFINED> instruction: 0x06100111
		when(&response_flag, menu);
     a14:	24020000 	strcs	r0, [r2], #-0
     a18:	3e0b0b00 	vmlacc.f64	d0, d11, d0
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a1c:	000e030b 	andeq	r0, lr, fp, lsl #6
     a20:	00160300 	andseq	r0, r6, r0, lsl #6
     a24:	0b3a0e03 	bleq	e84238 <__ccfg+0xe64290>
     a28:	0b390b3b 	bleq	e4371c <__ccfg+0xe23774>
     a2c:	00001349 	andeq	r1, r0, r9, asr #6
     a30:	0b002404 	bleq	9a48 <__exidx_end+0x4024>
     a34:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     a38:	05000008 	streq	r0, [r0, #-8]
     a3c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     a40:	0b3a0b0b 	bleq	e83674 <__ccfg+0xe636cc>
     a44:	13010b3b 	movwne	r0, #6971	; 0x1b3b
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a48:	0d060000 	stceq	0, cr0, [r6, #-0]
     a4c:	490e0300 	stmdbmi	lr, {r8, r9}
		ser_out(timeout, "\r\nFailed to reach the destination");
     a50:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
     a54:	0700000c 	streq	r0, [r0, -ip]
		proceed menu;
     a58:	0b0b000f 	bleq	2c0a9c <__ccfg+0x2a0af4>
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     a5c:	26080000 	strcs	r0, [r8], -r0
     a60:	00134900 	andseq	r4, r3, r0, lsl #18
     a64:	00350900 	eorseq	r0, r5, r0, lsl #18
		proceed menu;
     a68:	00001349 	andeq	r1, r0, r9, asr #6
}
     a6c:	0b000f0a 	bleq	469c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x8>
     a70:	0013490b 	andseq	r4, r3, fp, lsl #18
     a74:	01130b00 	tsteq	r3, r0, lsl #22
     a78:	0b3a0b0b 	bleq	e836ac <__ccfg+0xe63704>
     a7c:	0b390b3b 	bleq	e43770 <__ccfg+0xe237c8>
     a80:	00001301 	andeq	r1, r0, r1, lsl #6
     a84:	03000d0c 	movweq	r0, #3340	; 0xd0c
     a88:	3b0b3a0e 	blcc	2cf2c8 <__ccfg+0x2af320>
     a8c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     a90:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     a94:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     a98:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     a9c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     aa0:	0b3b0b3a 	bleq	ec3790 <__ccfg+0xea37e8>
     aa4:	13490b39 	movtne	r0, #39737	; 0x9b39
     aa8:	00000b38 	andeq	r0, r0, r8, lsr fp
     aac:	0300340e 	movweq	r3, #1038	; 0x40e
     ab0:	3b0b3a0e 	blcc	2cf2f0 <__ccfg+0x2af348>
     ab4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     ab8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     abc:	0f00000c 	svceq	0x0000000c
     ac0:	13490101 	movtne	r0, #37121	; 0x9101
     ac4:	00001301 	andeq	r1, r0, r1, lsl #6
     ac8:	00002110 	andeq	r2, r0, r0, lsl r1
     acc:	00161100 	andseq	r1, r6, r0, lsl #2
static void devinit_uart (int devnum) {
     ad0:	0b3a0e03 	bleq	e842e4 <__ccfg+0xe6433c>
	adddevfunc (ioreq_uart_a, devnum);
     ad4:	0b39053b 	bleq	e41fc8 <__ccfg+0xe22020>
     ad8:	00001349 	andeq	r1, r0, r9, asr #6
void udelay (volatile word n) {
     adc:	27011512 	smladcs	r1, r2, r5, r1
     ae0:	0013010c 	andseq	r0, r3, ip, lsl #2
	while (n) {
     ae4:	00051300 	andeq	r1, r5, r0, lsl #6
     ae8:	00001349 	andeq	r1, r0, r9, asr #6
}
     aec:	03003414 	movweq	r3, #1044	; 0x414
	while (n--);
     af0:	3b0b3a0e 	blcc	2cf330 <__ccfg+0x2af388>
     af4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     af8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
		n--;
     afc:	1500000c 	strne	r0, [r0, #-12]
     b00:	0b0b0113 	bleq	2c0f54 <__ccfg+0x2a0fac>
     b04:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
void mdelay (volatile word n) {
     b08:	13010b39 	movwne	r0, #6969	; 0x1b39
     b0c:	0d160000 	ldceq	0, cr0, [r6, #-0]
	while (n) {
     b10:	3a0e0300 	bcc	381718 <__ccfg+0x361770>
     b14:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
     b18:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		udelay (999);
     b1c:	1700000b 	strne	r0, [r0, -fp]
     b20:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
		n--;
     b24:	0b3a0b0b 	bleq	e83758 <__ccfg+0xe637b0>
     b28:	0b39053b 	bleq	e4201c <__ccfg+0xe22074>
     b2c:	00001301 	andeq	r1, r0, r1, lsl #6
     b30:	49002118 	stmdbmi	r0, {r3, r4, r8, sp}
void __pi_ondomain (lword d) {
     b34:	000b2f13 	andeq	r2, fp, r3, lsl pc
     b38:	01151900 	tsteq	r5, r0, lsl #18
		if (__pi_systat.effpdm > 1)
     b3c:	13490c27 	movtne	r0, #39975	; 0x9c27
     b40:	00001301 	andeq	r1, r0, r1, lsl #6
			__pi_systat.effpdm = 1;
     b44:	4700341a 	smladmi	r0, sl, r4, r3
	PRCMPowerDomainOn (d);
     b48:	3b0b3a13 	blcc	2cf39c <__ccfg+0x2af3f4>
     b4c:	020b390b 	andeq	r3, fp, #180224	; 0x2c000
     b50:	1b00000a 	blne	b80 <__pi_offdomain+0x10>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     b54:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b58:	0b3b0b3a 	bleq	ec3848 <__ccfg+0xea38a0>
     b5c:	13490b39 	movtne	r0, #39737	; 0x9b39
	__pi_systat.ondmns |= d;
     b60:	0a020c3f 	beq	83c64 <__ccfg+0x63cbc>
     b64:	341c0000 	ldrcc	r0, [ip], #-0
}
     b68:	3a0e0300 	bcc	381770 <__ccfg+0x3617c8>
     b6c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
void __pi_offdomain (lword d) {
     b70:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b74:	1d00000a 	stcne	0, cr0, [r0, #-40]	; 0xffffffd8
	PRCMPowerDomainOff (d);
     b78:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     b7c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b80:	13490b39 	movtne	r0, #39737	; 0x9b39
     b84:	00000a02 	andeq	r0, r0, r2, lsl #20
	if (d & PRCM_DOMAIN_RFCORE) {
     b88:	3f002e1e 	svccc	0x00002e1e
     b8c:	3a0e030c 	bcc	3817c4 <__ccfg+0x36181c>
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     b90:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b94:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
			__pi_systat.effpdm = __pi_systat.reqpdm;
     b98:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     b9c:	000a4001 	andeq	r4, sl, r1
	__pi_systat.ondmns &= ~d;
     ba0:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
     ba4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
}
     ba8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     bac:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
void __pi_syserror (word ec, const char *m) {
     bb0:	01120111 	tsteq	r2, r1, lsl r1
	diag ("SYSERR: %x, %s", ec, m);
     bb4:	13010a40 	movwne	r0, #6720	; 0x1a40
     bb8:	05200000 	streq	r0, [r0, #-0]!
  __ASM volatile ("cpsid i" : : : "memory");
     bbc:	3a0e0300 	bcc	3817c4 <__ccfg+0x36181c>
     bc0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     bc4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     bc8:	21000006 	tstcs	r0, r6
		all_leds_blink;
     bcc:	00000018 	andeq	r0, r0, r8, lsl r0
     bd0:	03003422 	movweq	r3, #1058	; 0x422
     bd4:	3b0b3a08 	blcc	2cf3fc <__ccfg+0x2af454>
     bd8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     bdc:	00060213 	andeq	r0, r6, r3, lsl r2
     be0:	00342300 	eorseq	r2, r4, r0, lsl #6
     be4:	0b3a0803 	bleq	e82bf8 <__ccfg+0xe62c50>
     be8:	0b39053b 	bleq	e420dc <__ccfg+0xe22134>
     bec:	0a021349 	beq	85918 <__ccfg+0x65970>
     bf0:	34240000 	strtcc	r0, [r4], #-0
	while (1) {
     bf4:	3a080300 	bcc	2017fc <__ccfg+0x1e1854>
     bf8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     bfc:	0013490b 	andseq	r4, r3, fp, lsl #18
     c00:	000a2500 	andeq	r2, sl, r0, lsl #10
void tci_run_delay_timer () {
     c04:	0b3a0e03 	bleq	e84418 <__ccfg+0xe64470>
	setdel = __pi_mintk - __pi_old;
     c08:	0b39053b 	bleq	e420fc <__ccfg+0xe22154>
     c0c:	00000111 	andeq	r0, r0, r1, lsl r1
     c10:	11010b26 	tstne	r1, r6, lsr #22
     c14:	01011201 	tsteq	r1, r1, lsl #4
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c18:	27000013 	smladcs	r0, r3, r0, r0
     c1c:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     c20:	00001301 	andeq	r1, r0, r1, lsl #6
     c24:	31011d28 	tstcc	r1, r8, lsr #26
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     c28:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
	sti_tim;
     c2c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
}
     c30:	000b5705 	andeq	r5, fp, r5, lsl #14
     c34:	00052900 	andeq	r2, r5, r0, lsl #18
     c38:	00001331 	andeq	r1, r0, r1, lsr r3
     c3c:	03012e2a 	movweq	r2, #7722	; 0x1e2a
     c40:	3b0b3a0e 	blcc	2cf480 <__ccfg+0x2af4d8>
	cli_aux;
     c44:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     c48:	1201110c 	andne	r1, r1, #12, 2
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c4c:	010a4001 	tsteq	sl, r1
     c50:	2b000013 	blcs	ca4 <AONRTCIntHandler+0x38>
     c54:	08030005 	stmdaeq	r3, {r0, r2}
     c58:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	sti_aux;
     c5c:	13490b39 	movtne	r0, #39737	; 0x9b39
}
     c60:	00000602 	andeq	r0, r0, r2, lsl #12
     c64:	3f012e2c 	svccc	0x00012e2c
     c68:	3a0e030c 	bcc	3818a0 <__ccfg+0x3618f8>
void AONRTCIntHandler () {
     c6c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     c70:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     c74:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     c78:	010a4001 	tsteq	sl, r1
		if (__pi_utims [0] == 0)
     c7c:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     c80:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		if (*(__pi_utims [0])) {
     c84:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     c88:	13490b39 	movtne	r0, #39737	; 0x9b39
			(*(__pi_utims [0]))--;
     c8c:	00000602 	andeq	r0, r0, r2, lsl #12
		if (__pi_utims [1] == 0)
     c90:	3f012e2e 	svccc	0x00012e2e
		if (*(__pi_utims [1])) {
     c94:	3a0e030c 	bcc	3818cc <__ccfg+0x361924>
			aux_timer_inactive = 0;
     c98:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			(*(__pi_utims [1]))--;
     c9c:	200c270b 	andcs	r2, ip, fp, lsl #14
		if (__pi_utims [2] == 0)
     ca0:	0013010b 	andseq	r0, r3, fp, lsl #2
		if (*(__pi_utims [2])) {
     ca4:	00052f00 	andeq	r2, r5, r0, lsl #30
			(*(__pi_utims [2]))--;
     ca8:	0b3a0803 	bleq	e82cbc <__ccfg+0xe62d14>
		if (__pi_utims [3] != 0) {
     cac:	0b39053b 	bleq	e421a0 <__ccfg+0xe221f8>
			if (*(__pi_utims [3])) {
     cb0:	00001349 	andeq	r1, r0, r9, asr #6
				aux_timer_inactive = 0;
     cb4:	3f012e30 	svccc	0x00012e30
				(*(__pi_utims [3]))--;
     cb8:	3a0e030c 	bcc	3818f0 <__ccfg+0x361948>
	if (__pi_systat.ledsts) {
     cbc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     cc0:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
		if (__pi_systat.ledblc++ == 0) {
     cc4:	010a4001 	tsteq	sl, r1
     cc8:	31000013 	tstcc	r0, r3, lsl r0
			if (__pi_systat.ledblk) {
     ccc:	0c3f012e 	ldfeqs	f0, [pc], #-184	; c1c <tci_run_delay_timer+0x18>
     cd0:	0b3a0803 	bleq	e82ce4 <__ccfg+0xe62d3c>
     cd4:	0b39053b 	bleq	e421c8 <__ccfg+0xe22220>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     cd8:	13490c27 	movtne	r0, #39975	; 0x9c27
     cdc:	01120111 	tsteq	r2, r1, lsl r1
				if (__pi_systat.ledsts & 0x2)
     ce0:	13010a40 	movwne	r0, #6720	; 0x1a40
     ce4:	05320000 	ldreq	r0, [r2, #-0]!
     ce8:	3a080300 	bcc	2018f0 <__ccfg+0x1e1948>
				if (__pi_systat.ledsts & 0x4)
     cec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				__pi_systat.ledblk = 0;
     cf0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     cf4:	3300000a 	movwcc	r0, #10
			if (__pi_systat.fstblk)
     cf8:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; c48 <tci_run_auxiliary_timer+0x4>
     cfc:	0b3a0e03 	bleq	e84510 <__ccfg+0xe64568>
				__pi_systat.ledblc = 200;
     d00:	0b39053b 	bleq	e421f4 <__ccfg+0xe2224c>
	if (events & AON_RTC_EVFLAGS_CH0) {
     d04:	01110c27 	tsteq	r1, r7, lsr #24
		cli_tim;
     d08:	0a400112 	beq	1001158 <__ccfg+0xfe11b0>
		__pi_new += setdel;
     d0c:	05340000 	ldreq	r0, [r4, #-0]!
     d10:	3a0e0300 	bcc	381918 <__ccfg+0x361970>
		setdel = 0;
     d14:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		RISE_N_SHINE;
     d18:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		__pi_new += setdel;
     d1c:	3500000a 	strcc	r0, [r0, #-10]
		RISE_N_SHINE;
     d20:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     d24:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		aux_timer_inactive = 1;
     d28:	13490b39 	movtne	r0, #39737	; 0x9b39
     d2c:	0b360000 	bleq	d80d34 <__ccfg+0xd60d8c>
				if (__pi_systat.ledsts & 0x1)
     d30:	00065501 	andeq	r5, r6, r1, lsl #10
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d34:	012e3700 			; <UNDEFINED> instruction: 0x012e3700
     d38:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
				if (__pi_systat.ledsts & 0x2)
     d3c:	0b3b0b3a 	bleq	ec3a2c <__ccfg+0xea3a84>
     d40:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     d44:	13010b20 	movwne	r0, #6944	; 0x1b20
				if (__pi_systat.ledsts & 0x8)
     d48:	05380000 	ldreq	r0, [r8, #-0]!
				__pi_systat.ledblk = 1;
     d4c:	3a080300 	bcc	201954 <__ccfg+0x1e19ac>
     d50:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (aux_timer_inactive) {
     d54:	0013490b 	andseq	r4, r3, fp, lsl #18
			cli_aux;
     d58:	00053900 	andeq	r3, r5, r0, lsl #18
     d5c:	0b3a0e03 	bleq	e84570 <__ccfg+0xe645c8>
     d60:	0b390b3b 	bleq	e43a54 <__ccfg+0xe23aac>
     d64:	00001349 	andeq	r1, r0, r9, asr #6
     d68:	0300343a 	movweq	r3, #1082	; 0x43a
     d6c:	3b0b3a08 	blcc	2cf594 <__ccfg+0x2af5ec>
     d70:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     d74:	3b000013 	blcc	dc8 <tci_update_delay_ticks+0x48>
     d78:	0803000a 	stmdaeq	r3, {r1, r3}
     d7c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
word tci_update_delay_ticks (Boolean force) {
     d80:	00000b39 	andeq	r0, r0, r9, lsr fp
	cli_tim;
     d84:	3f012e3c 	svccc	0x00012e3c
     d88:	3a0e030c 	bcc	3819c0 <__ccfg+0x361a18>
	if (setdel) {
     d8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d90:	110c270b 	tstne	ip, fp, lsl #14
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     d94:	40011201 	andmi	r1, r1, r1, lsl #4
     d98:	0013010a 	andseq	r0, r3, sl, lsl #2
     d9c:	00053d00 	andeq	r3, r5, r0, lsl #26
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     da0:	0b3a0803 	bleq	e82db4 <__ccfg+0xe62e0c>
				AON_RTC_O_CH0CMP)) - gettav ());
     da4:	0b390b3b 	bleq	e43a98 <__ccfg+0xe23af0>
	return NO;
     da8:	06021349 	streq	r1, [r2], -r9, asr #6
			setdel = 0;
     dac:	343e0000 	ldrtcc	r0, [lr], #-0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     db0:	3a080300 	bcc	2019b8 <__ccfg+0x1e1a10>
     db4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
     db8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		sti_tim;
     dbc:	3f000006 	svccc	0x00000006
		return YES;
     dc0:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; d10 <AONRTCIntHandler+0xa4>
     dc4:	0b3a0e03 	bleq	e845d8 <__ccfg+0xe64630>
     dc8:	0b390b3b 	bleq	e43abc <__ccfg+0xe23b14>
     dcc:	01110c27 	tsteq	r1, r7, lsr #24
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     dd0:	0a400112 	beq	1001220 <__ccfg+0xfe1278>
	UARTDisable (UART0_BASE);
     dd4:	2e400000 	cdpcs	0, 4, cr0, cr0, cr0, {0}
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     dd8:	3a0e0301 	bcc	3819e4 <__ccfg+0x361a3c>
	UARTDisable (UART0_BASE);
     ddc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	UARTConfigSetExpClk (UART0_BASE,
     de0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     de4:	010b2013 	tsteq	fp, r3, lsl r0
     de8:	41000013 	tstmi	r0, r3, lsl r0
     dec:	0e03012e 	adfeqsp	f0, f3, #0.5
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     df0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     df4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     df8:	0b201349 	bleq	805b24 <__ccfg+0x7e5b7c>
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     dfc:	00001301 	andeq	r1, r0, r1, lsl #6
     e00:	31012e42 	tstcc	r1, r2, asr #28
     e04:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	urates [0] = rate;
     e08:	010a4001 	tsteq	sl, r1
}
     e0c:	43000013 	movwmi	r0, #19
     e10:	13310005 	teqne	r1, #5
     e14:	00000602 	andeq	r0, r0, r2, lsl #12
     e18:	31003444 	tstcc	r0, r4, asr #8
     e1c:	00060213 	andeq	r0, r6, r3, lsl r2
     e20:	011d4500 	tsteq	sp, r0, lsl #10
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e24:	01111331 	tsteq	r1, r1, lsr r3
     e28:	0b580112 	bleq	1601278 <__ccfg+0x15e12d0>
     e2c:	0b570b59 	bleq	15c3b98 <__ccfg+0x15a3bf0>
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     e30:	34460000 	strbcc	r0, [r6], #-0
     e34:	00133100 	andseq	r3, r3, r0, lsl #2
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     e38:	011d4700 	tsteq	sp, r0, lsl #14
     e3c:	01521331 	cmpeq	r2, r1, lsr r3
	__pi_uart_setrate (urates [0], __pi_uart);
     e40:	0b580655 	bleq	160279c <__ccfg+0x15e27f4>
     e44:	0b570b59 	bleq	15c3bb0 <__ccfg+0x15a3c08>
     e48:	0a480000 	beq	1200e50 <__ccfg+0x11e0ea8>
     e4c:	11133100 	tstne	r3, r0, lsl #2
     e50:	49000001 	stmdbmi	r0, {r0}
     e54:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     e58:	01120111 	tsteq	r2, r1, lsl r1
	switch (operation) {
     e5c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
static int ioreq_uart_a (int operation, char *buf, int len) {
     e60:	00000b57 	andeq	r0, r0, r7, asr fp
     e64:	31012e4a 	tstcc	r1, sl, asr #28
     e68:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     e6c:	000a4001 	andeq	r4, sl, r1
     e70:	11010000 	mrsne	r0, (UNDEF: 1)
				*buf++ = uart_a_read;
     e74:	130e2501 	movwne	r2, #58625	; 0xe501
     e78:	1b0e030b 	blne	381aac <__ccfg+0x361b04>
			while (len && uart_a_char_available) {
     e7c:	1106550e 	tstne	r6, lr, lsl #10
     e80:	00061001 	andeq	r1, r6, r1
     e84:	00240200 	eoreq	r0, r4, r0, lsl #4
			if (len != operation) {
     e88:	0b3e0b0b 	bleq	f83abc <__ccfg+0xf63b14>
}
     e8c:	00000e03 	andeq	r0, r0, r3, lsl #28
     e90:	03001603 	movweq	r1, #1539	; 0x603
			uart_a_disable_int;
     e94:	3b0b3a0e 	blcc	2cf6d4 <__ccfg+0x2af72c>
			if (uart_a_char_available) {
     e98:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				*buf++ = uart_a_read;
     e9c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
			uart_a_disable_int;
     ea0:	0b0b0024 	bleq	2c0f38 <__ccfg+0x2a0f90>
     ea4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
			if (uart_a_char_available) {
     ea8:	13050000 	movwne	r0, #20480	; 0x5000
     eac:	0b0e0301 	bleq	381ab8 <__ccfg+0x361b10>
				uart_a_enable_int;
     eb0:	3b0b3a0b 	blcc	2cf6e4 <__ccfg+0x2af73c>
     eb4:	0013010b 	andseq	r0, r3, fp, lsl #2
				goto Redo_rx;
     eb8:	000d0600 	andeq	r0, sp, r0, lsl #12
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     ebc:	13490e03 	movtne	r0, #40451	; 0x9e03
     ec0:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
			return -2;
     ec4:	0f070000 	svceq	0x00070000
     ec8:	000b0b00 	andeq	r0, fp, r0, lsl #22
				uart_a_write (*buf);
     ecc:	00260800 	eoreq	r0, r6, r0, lsl #16
     ed0:	00001349 	andeq	r1, r0, r9, asr #6
			while (len && uart_a_room_in_tx) {
     ed4:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
     ed8:	0a000013 	beq	f2c <ioreq_uart_a+0xd0>
     edc:	0b0b000f 	bleq	2c0f20 <__ccfg+0x2a0f78>
			if (len != operation) {
     ee0:	00001349 	andeq	r1, r0, r9, asr #6
			uart_a_disable_int;
     ee4:	0b01130b 	bleq	45b18 <__ccfg+0x25b70>
     ee8:	3b0b3a0b 	blcc	2cf71c <__ccfg+0x2af774>
			if (uart_a_room_in_tx) {
     eec:	010b390b 	tsteq	fp, fp, lsl #18
     ef0:	0c000013 	stceq	0, cr0, [r0], {19}
				uart_a_enable_int;
     ef4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     ef8:	0b3b0b3a 	bleq	ec3be8 <__ccfg+0xea3c40>
				*buf++ = uart_a_read;
     efc:	13490b39 	movtne	r0, #39737	; 0x9b39
			if (uart_a_room_in_tx) {
     f00:	0b0d0b0b 	bleq	343b34 <__ccfg+0x323b8c>
				uart_a_write (*buf);
     f04:	0b380b0c 	bleq	e03b3c <__ccfg+0xde3b94>
     f08:	0d0d0000 	stceq	0, cr0, [sp, #-0]
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     f0c:	3a0e0300 	bcc	381b14 <__ccfg+0x361b6c>
     f10:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			uart_a_enable_int;
     f14:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     f18:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
     f1c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			return 0;
     f20:	0b3b0b3a 	bleq	ec3c10 <__ccfg+0xea3c68>
			if (len == UART_CNTRL_SETRATE) {
     f24:	13490b39 	movtne	r0, #39737	; 0x9b39
				if (__pi_uart_setrate (*((word*)buf),
     f28:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     f2c:	010f0000 	mrseq	r0, CPSR
     f30:	01134901 	tsteq	r3, r1, lsl #18
				syserror (EREQPAR, "uar");
     f34:	10000013 	andne	r0, r0, r3, lsl r0
			syserror (ENOOPER, "uai");
     f38:	00000021 	andeq	r0, r0, r1, lsr #32
			if (len == UART_CNTRL_GETRATE) {
     f3c:	03001611 	movweq	r1, #1553	; 0x611
				return 1;
     f40:	3b0b3a0e 	blcc	2cf780 <__ccfg+0x2af7d8>
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     f44:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			syserror (ENOOPER, "uai");
     f48:	12000013 	andne	r0, r0, #19
     f4c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
     f50:	00001301 	andeq	r1, r0, r1, lsl #6
     f54:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
     f58:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
     f5c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f60:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f64:	13490b39 	movtne	r0, #39737	; 0x9b39
     f68:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     f6c:	15150000 	ldrne	r0, [r5, #-0]
void UART0IntHandler () {
     f70:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     f74:	00130113 	andseq	r0, r3, r3, lsl r1
     f78:	01131600 	tsteq	r3, r0, lsl #12
     f7c:	0b0b0e03 	bleq	2c4790 <__ccfg+0x2a47e8>
     f80:	0b3b0b3a 	bleq	ec3c70 <__ccfg+0xea3cc8>
     f84:	13010b39 	movwne	r0, #6969	; 0x1b39
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     f88:	17170000 	ldrne	r0, [r7, -r0]
     f8c:	3a0b0b01 	bcc	2c3b98 <__ccfg+0x2a3bf0>
		RISE_N_SHINE;
     f90:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f94:	0013010b 	andseq	r0, r3, fp, lsl #2
		i_trigger (devevent (UART_A, READ));
     f98:	000d1800 	andeq	r1, sp, r0, lsl #16
     f9c:	0b3a0e03 	bleq	e847b0 <__ccfg+0xe64808>
     fa0:	0b390b3b 	bleq	e43c94 <__ccfg+0xe23cec>
     fa4:	00001349 	andeq	r1, r0, r9, asr #6
     fa8:	03000d19 	movweq	r0, #3353	; 0xd19
     fac:	3b0b3a08 	blcc	2cf7d4 <__ccfg+0x2af82c>
     fb0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     fb4:	1a000013 	bne	1008 <UART0IntHandler+0x9c>
     fb8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     fbc:	0b3b0b3a 	bleq	ec3cac <__ccfg+0xea3d04>
     fc0:	13490b39 	movtne	r0, #39737	; 0x9b39
     fc4:	00000b38 	andeq	r0, r0, r8, lsr fp
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     fc8:	0b01131b 	bleq	45c3c <__ccfg+0x25c94>
     fcc:	3b0b3a0b 	blcc	2cf800 <__ccfg+0x2af858>
     fd0:	010b3905 	tsteq	fp, r5, lsl #18
		i_trigger (devevent (UART_A, WRITE));
     fd4:	1c000013 	stcne	0, cr0, [r0], {19}
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     fd8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     fdc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		RISE_N_SHINE;
     fe0:	13490b39 	movtne	r0, #39737	; 0x9b39
     fe4:	00000b38 	andeq	r0, r0, r8, lsr fp
     fe8:	0301131d 	movweq	r1, #4893	; 0x131d
		i_trigger (devevent (UART_A, WRITE));
     fec:	3a0b0b0e 	bcc	2c3c2c <__ccfg+0x2a3c84>
     ff0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ff4:	0013010b 	andseq	r0, r3, fp, lsl #2
     ff8:	00211e00 	eoreq	r1, r1, r0, lsl #28
     ffc:	0b2f1349 	bleq	bc5d28 <__ccfg+0xba5d80>
    1000:	341f0000 	ldrcc	r0, [pc], #-0	; 1008 <UART0IntHandler+0x9c>
    1004:	3a0e0300 	bcc	381c0c <__ccfg+0x361c64>
    1008:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    100c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1010:	2000000a 	andcs	r0, r0, sl
    1014:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; f64 <ioreq_uart_a+0x108>
}
    1018:	0b3a0e03 	bleq	e8482c <__ccfg+0xe64884>
    101c:	0b39053b 	bleq	e42510 <__ccfg+0xe22568>
    1020:	01110c27 	tsteq	r1, r7, lsr #24
    1024:	0a400112 	beq	1001474 <__ccfg+0xfe14cc>
    1028:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
void __buttons_setirq (int val) {
    102c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1030:	3b0b3a0e 	blcc	2cf870 <__ccfg+0x2af8c8>
    1034:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1038:	1113490c 	tstne	r3, ip, lsl #18
    103c:	40011201 	andmi	r1, r1, r1, lsl #4
    1040:	0013010a 	andseq	r0, r3, sl, lsl #2
		bn = BUTTON_GPIO (__button_list [i]);
    1044:	00052200 	andeq	r2, r5, r0, lsl #4
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1048:	0b3a0803 	bleq	e8305c <__ccfg+0xe630b4>
    104c:	0b39053b 	bleq	e42540 <__ccfg+0xe22598>
    1050:	06021349 	streq	r1, [r2], -r9, asr #6
    1054:	1d230000 	stcne	0, cr0, [r3, #-0]
    1058:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    105c:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
}
    1060:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    1064:	2400000b 	strcs	r0, [r0], #-11
    1068:	13310005 	teqne	r1, #5
    106c:	00000602 	andeq	r0, r0, r2, lsl #12
void __pinlist_setirq (int val) {
    1070:	55010b25 	strpl	r0, [r1, #-2853]	; 0xfffff4db
	for (i = 0; i < N_PINLIST; i++) {
    1074:	26000006 	strcs	r0, [r0], -r6
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1078:	13310034 	teqne	r1, #52	; 0x34
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    107c:	00000602 	andeq	r0, r0, r2, lsl #12
	for (i = 0; i < N_PINLIST; i++) {
    1080:	3f012e27 	svccc	0x00012e27
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1084:	3a0e030c 	bcc	381cbc <__ccfg+0x361d14>
    1088:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    108c:	110c270b 	tstne	ip, fp, lsl #14
    1090:	40011201 	andmi	r1, r1, r1, lsl #4
    1094:	0013010a 	andseq	r0, r3, sl, lsl #2
	for (i = 0; i < N_PINLIST; i++) {
    1098:	00342800 	eorseq	r2, r4, r0, lsl #16
}
    109c:	0b3a0803 	bleq	e830b0 <__ccfg+0xe63108>
    10a0:	0b39053b 	bleq	e42594 <__ccfg+0xe225ec>
    10a4:	06021349 	streq	r1, [r2], -r9, asr #6
    10a8:	34290000 	strtcc	r0, [r9], #-0
void GPIOIntHandler () {
    10ac:	3a080300 	bcc	201cb4 <__ccfg+0x1e1d0c>
if (buttons_int) {
    10b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    10b4:	0013490b 	andseq	r4, r3, fp, lsl #18
	buttons_disable ();
    10b8:	00342a00 	eorseq	r2, r4, r0, lsl #20
    10bc:	0b3a0803 	bleq	e830d0 <__ccfg+0xe63128>
	i_trigger ((aword)&__button_list);
    10c0:	0b39053b 	bleq	e425b4 <__ccfg+0xe2260c>
    10c4:	0a021349 	beq	85df0 <__ccfg+0x65e48>
    10c8:	052b0000 	streq	r0, [fp, #-0]!
    10cc:	3a0e0300 	bcc	381cd4 <__ccfg+0x361d2c>
    10d0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    10d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    10d8:	2c000006 	stccs	0, cr0, [r0], {6}
    10dc:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 102c <__buttons_setirq>
    10e0:	0b3a0e03 	bleq	e848f4 <__ccfg+0xe6494c>
    10e4:	0b39053b 	bleq	e425d8 <__ccfg+0xe22630>
    10e8:	13490c27 	movtne	r0, #39975	; 0x9c27
	RISE_N_SHINE;
    10ec:	13010b20 	movwne	r0, #6944	; 0x1b20
    10f0:	052d0000 	streq	r0, [sp, #-0]!
    10f4:	3a0e0300 	bcc	381cfc <__ccfg+0x361d54>
if (pin_sensor_int) {
    10f8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    10fc:	0013490b 	andseq	r4, r3, fp, lsl #18
	i_trigger ((aword)(&__input_pins));
    1100:	00052e00 	andeq	r2, r5, r0, lsl #28
    1104:	0b3a0803 	bleq	e83118 <__ccfg+0xe63170>
    1108:	0b39053b 	bleq	e425fc <__ccfg+0xe22654>
    110c:	00001349 	andeq	r1, r0, r9, asr #6
    1110:	11010b2f 	tstne	r1, pc, lsr #22
    1114:	00011201 	andeq	r1, r1, r1, lsl #4
    1118:	00343000 	eorseq	r3, r4, r0
    111c:	0b3a0e03 	bleq	e84930 <__ccfg+0xe64988>
    1120:	0b39053b 	bleq	e42614 <__ccfg+0xe2266c>
    1124:	0a021349 	beq	85e50 <__ccfg+0x65ea8>
    1128:	0a310000 	beq	c41130 <__ccfg+0xc21188>
	__pinsen_disable_and_clear;
    112c:	3a0e0300 	bcc	381d34 <__ccfg+0x361d8c>
	RISE_N_SHINE;
    1130:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1134:	0001110b 	andeq	r1, r1, fp, lsl #2
    1138:	011d3200 	tsteq	sp, r0, lsl #4
}
    113c:	01111331 	tsteq	r1, r1, lsr r3
    1140:	0b580112 	bleq	1601590 <__ccfg+0x15e15e8>
    1144:	0b570559 	bleq	15c26b0 <__ccfg+0x15a2708>
    1148:	05330000 	ldreq	r0, [r3, #-0]!
    114c:	00133100 	andseq	r3, r3, r0, lsl #2
void system_init () {
    1150:	00053400 	andeq	r3, r5, r0, lsl #8
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1154:	0b3a0803 	bleq	e83168 <__ccfg+0xe631c0>
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    1158:	0b39053b 	bleq	e4264c <__ccfg+0xe226a4>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    115c:	0a021349 	beq	85e88 <__ccfg+0x65ee0>
    1160:	18350000 	ldmdane	r5!, {}	; <UNPREDICTABLE>
    1164:	36000000 	strcc	r0, [r0], -r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1168:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    116c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1170:	13490b39 	movtne	r0, #39737	; 0x9b39
    1174:	2e370000 	cdpcs	0, 3, cr0, cr7, cr0, {0}
    1178:	3a080301 	bcc	201d84 <__ccfg+0x1e1ddc>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    117c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1180:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1184:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1188:	010a4001 	tsteq	sl, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    118c:	38000013 	stmdacc	r0, {r0, r1, r4}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1190:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
		pin = (port_confs [i] >> 19) & 0x1f;
    1194:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1198:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		pin = (port_confs [i] >> 19) & 0x1f;
    119c:	01120111 	tsteq	r2, r1, lsl r1
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    11a0:	13010a40 	movwne	r0, #6720	; 0x1a40
    11a4:	2e390000 	cdpcs	0, 3, cr0, cr9, cr0, {0}
    11a8:	3a0e0301 	bcc	381db4 <__ccfg+0x361e0c>
    11ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (port_confs [i] & 0x80)
    11b0:	200c270b 	andcs	r2, ip, fp, lsl #14
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    11b4:	0013010b 	andseq	r0, r3, fp, lsl #2
    11b8:	00053a00 	andeq	r3, r5, r0, lsl #20
		if (port_confs [i] & 0x40)
    11bc:	0b3a0803 	bleq	e831d0 <__ccfg+0xe63228>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11c0:	0b390b3b 	bleq	e43eb4 <__ccfg+0xe23f0c>
    11c4:	00001349 	andeq	r1, r0, r9, asr #6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11c8:	03012e3b 	movweq	r2, #7739	; 0x1e3b
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    11cc:	3b0b3a0e 	blcc	2cfa0c <__ccfg+0x2afa64>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11d0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	all_leds_blink;
    11d4:	2013490c 	andscs	r4, r3, ip, lsl #18
    11d8:	0013010b 	andseq	r0, r3, fp, lsl #2
    11dc:	00343c00 	eorseq	r3, r4, r0, lsl #24
    11e0:	0b3a0803 	bleq	e831f4 <__ccfg+0xe6324c>
    11e4:	0b390b3b 	bleq	e43ed8 <__ccfg+0xe23f30>
    11e8:	00001349 	andeq	r1, r0, r9, asr #6
    11ec:	03012e3d 	movweq	r2, #7741	; 0x1e3d
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11f0:	3b0b3a08 	blcc	2cfa18 <__ccfg+0x2afa70>
    11f4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    11f8:	010b200c 	tsteq	fp, ip
    11fc:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
    1200:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1204:	01120111 	tsteq	r2, r1, lsl r1
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1208:	13010a40 	movwne	r0, #6720	; 0x1a40
    120c:	053f0000 	ldreq	r0, [pc, #-0]!	; 1214 <system_init+0xc4>
	IntEnable (INT_AON_RTC_COMB);
    1210:	02133100 	andseq	r3, r3, #0, 2
    1214:	4000000a 	andmi	r0, r0, sl
    1218:	1331011d 	teqne	r1, #1073741831	; 0x40000007
	__pi_malloc_init ();
    121c:	01120111 	tsteq	r2, r1, lsl r1
	IntEnable (INT_AON_GPIO_EDGE);
    1220:	0b590b58 	bleq	1643f88 <__ccfg+0x1623fe0>
    1224:	00000b57 	andeq	r0, r0, r7, asr fp
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1228:	31011d41 	tstcc	r1, r1, asr #26
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    122c:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    1230:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1234:	000b570b 	andeq	r5, fp, fp, lsl #14
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1238:	012e4200 			; <UNDEFINED> instruction: 0x012e4200
    123c:	01111331 	tsteq	r1, r1, lsr r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1240:	0a400112 	beq	1001690 <__ccfg+0xfe16e8>
    1244:	34430000 	strbcc	r0, [r3], #-0
    1248:	00133100 	andseq	r3, r3, r0, lsl #2
	urates [0] = UART_RATE / 100;
    124c:	11010000 	mrsne	r0, (UNDEF: 1)
    1250:	130e2501 	movwne	r2, #58625	; 0xe501
	reinit_uart ();
    1254:	1b0e030b 	blne	381e88 <__ccfg+0x361ee0>
	EXTRA_INITIALIZERS;
    1258:	1106550e 	tstne	r6, lr, lsl #10
    125c:	00061001 	andeq	r1, r6, r1
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    1260:	00240200 	eoreq	r0, r4, r0, lsl #4
    1264:	0b3e0b0b 	bleq	f83e98 <__ccfg+0xf63ef0>
    1268:	00000e03 	andeq	r0, r0, r3, lsl #28
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    126c:	03001603 	movweq	r1, #1539	; 0x603
    1270:	3b0b3a0e 	blcc	2cfab0 <__ccfg+0x2afb08>
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1274:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1278:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
			devinit [i] . init (devinit [i] . param);
    127c:	0b0b0024 	bleq	2c1314 <__ccfg+0x2a136c>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1280:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1284:	0f050000 	svceq	0x00050000
    1288:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
	IntEnable (INT_UART0_COMB);
    128c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1290:	13490026 	movtne	r0, #36902	; 0x9026
}
    1294:	15070000 	strne	r0, [r7, #-0]
	tci_run_auxiliary_timer ();
    1298:	000c2700 	andeq	r2, ip, r0, lsl #14
		diag ("");
    129c:	00340800 	eorseq	r0, r4, r0, lsl #16
    12a0:	0b3a0e03 	bleq	e84ab4 <__ccfg+0xe64b0c>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    12a4:	0b390b3b 	bleq	e43f98 <__ccfg+0xe23ff0>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    12a8:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 118c <system_init+0x3c>
		diag ("Leftover RAM: %d bytes",
    12ac:	00000c3c 	andeq	r0, r0, ip, lsr ip
    12b0:	49010109 	stmdbmi	r1, {r0, r3, r8}
    12b4:	00130113 	andseq	r0, r3, r3, lsl r1
    12b8:	00210a00 	eoreq	r0, r1, r0, lsl #20
    12bc:	0b2f1349 	bleq	bc5fe8 <__ccfg+0xba6040>
    12c0:	340b0000 	strcc	r0, [fp], #-0
    12c4:	3a0e0300 	bcc	381ecc <__ccfg+0x361f24>
    12c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12cc:	3f13490b 	svccc	0x0013490b
    12d0:	000a020c 	andeq	r0, sl, ip, lsl #4
    12d4:	002e0c00 	eoreq	r0, lr, r0, lsl #24
    12d8:	0b3a0e03 	bleq	e84aec <__ccfg+0xe64b44>
    12dc:	0b39053b 	bleq	e427d0 <__ccfg+0xe22828>
    12e0:	01110c27 	tsteq	r1, r7, lsr #24
    12e4:	0a400112 	beq	1001734 <__ccfg+0xfe178c>
    12e8:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    12ec:	030c3f01 	movweq	r3, #52993	; 0xcf01
    12f0:	3b0b3a0e 	blcc	2cfb30 <__ccfg+0x2afb88>
    12f4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    12f8:	1201110c 	andne	r1, r1, #12, 2
    12fc:	000a4001 	andeq	r4, sl, r1
    1300:	00340e00 	eorseq	r0, r4, r0, lsl #28
    1304:	0b3a0e03 	bleq	e84b18 <__ccfg+0xe64b70>
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1308:	0b390b3b 	bleq	e43ffc <__ccfg+0xe24054>
    130c:	06021349 	streq	r1, [r2], -r9, asr #6
    1310:	01000000 	mrseq	r0, (UNDEF: 0)
    1314:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1318:	0e030b13 	vmoveq.32	d3[0], r0
    131c:	06100e1b 			; <UNDEFINED> instruction: 0x06100e1b
    1320:	24020000 	strcs	r0, [r2], #-0
    1324:	3e0b0b00 	vmlacc.f64	d0, d11, d0
}
    1328:	000e030b 	andeq	r0, lr, fp, lsl #6
__attribute__ ((noreturn)) void __pi_release () {
    132c:	00160300 	andseq	r0, r6, r0, lsl #6
    1330:	0b3a0e03 	bleq	e84b44 <__ccfg+0xe64b9c>
    1334:	0b390b3b 	bleq	e44028 <__ccfg+0xe24080>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1338:	00001349 	andeq	r1, r0, r9, asr #6
	check_stack_overflow;
    133c:	0b002404 	bleq	a354 <__exidx_end+0x4930>
    1340:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1344:	05000008 	streq	r0, [r0, #-8]
	update_n_wake (MAX_WORD, NO);
    1348:	0b0b0113 	bleq	2c179c <__ccfg+0x2a17f4>
    134c:	0b3b0b3a 	bleq	ec403c <__ccfg+0xea4094>
    1350:	13010b39 	movwne	r0, #6969	; 0x1b39
	for_all_tasks (__pi_curr) {
    1354:	0d060000 	stceq	0, cr0, [r6, #-0]
    1358:	3a0e0300 	bcc	381f60 <__ccfg+0x361fb8>
    135c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  __ASM volatile ("cpsid i" : : : "memory");
    1360:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	__SLEEP;
    1364:	0700000b 	streq	r0, [r0, -fp]
    1368:	13490026 	movtne	r0, #36902	; 0x9026
    136c:	34080000 	strcc	r0, [r8], #-0
    1370:	3a0e0300 	bcc	381f78 <__ccfg+0x361fd0>
	system_event_count ++;
    1374:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1378:	3f13490b 	svccc	0x0013490b
	switch (__pi_systat.effpdm) {
    137c:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1380:	00350900 	eorseq	r0, r5, r0, lsl #18
    1384:	00001349 	andeq	r1, r0, r9, asr #6
    1388:	03000d0a 	movweq	r0, #3338	; 0xd0a
			__WFI ();
    138c:	3b0b3a0e 	blcc	2cfbcc <__ccfg+0x2afc24>
    1390:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1394:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
	check_stack_overflow;
    1398:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    139c:	0b00000b 	bleq	13d0 <__pi_release+0xa4>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    13a0:	0b0b000f 	bleq	2c13e4 <__ccfg+0x2a143c>
    13a4:	00001349 	andeq	r1, r0, r9, asr #6
			(__pi_curr->code) (tstate (__pi_curr));
    13a8:	4901010c 	stmdbmi	r1, {r2, r3, r8}
			goto Redo;
    13ac:	00130113 	andseq	r0, r3, r3, lsl r1
	for_all_tasks (__pi_curr) {
    13b0:	00210d00 	eoreq	r0, r1, r0, lsl #26
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    13b4:	160e0000 	strne	r0, [lr], -r0
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    13b8:	3a0e0300 	bcc	381fc0 <__ccfg+0x362018>
    13bc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    13c0:	0013490b 	andseq	r4, r3, fp, lsl #18
    13c4:	01150f00 	tsteq	r5, r0, lsl #30
    13c8:	13010c27 	movwne	r0, #7207	; 0x1c27
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    13cc:	05100000 	ldreq	r0, [r0, #-0]
    13d0:	00134900 	andseq	r4, r3, r0, lsl #18
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    13d4:	00341100 	eorseq	r1, r4, r0, lsl #2
    13d8:	0b3a0e03 	bleq	e84bec <__ccfg+0xe64c44>
			__WFI ();
    13dc:	0b39053b 	bleq	e428d0 <__ccfg+0xe22928>
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    13e0:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 12c4 <system_init+0x174>
    13e4:	00000c3c 	andeq	r0, r0, ip, lsr ip
}
    13e8:	0b011312 	bleq	46038 <__ccfg+0x26090>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    13ec:	3b0b3a0b 	blcc	2cfc20 <__ccfg+0x2afc78>
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    13f0:	010b3905 	tsteq	fp, r5, lsl #18
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    13f4:	13000013 	movwne	r0, #19
    13f8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			PRCMPowerDomainOff (__pi_systat.ondmns |
    13fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1400:	13490b39 	movtne	r0, #39737	; 0x9b39
    1404:	00000b38 	andeq	r0, r0, r8, lsr fp
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1408:	03011314 	movweq	r1, #4884	; 0x1314
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    140c:	3a0b0b0e 	bcc	2c404c <__ccfg+0x2a40a4>
    1410:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1414:	0013010b 	andseq	r0, r3, fp, lsl #2
    1418:	00211500 	eoreq	r1, r1, r0, lsl #10
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    141c:	0b2f1349 	bleq	bc6148 <__ccfg+0xba61a0>
    1420:	34160000 	ldrcc	r0, [r6], #-0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1424:	3a134700 	bcc	4d302c <__ccfg+0x4b3084>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1428:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    142c:	000a020b 	andeq	r0, sl, fp, lsl #4
    1430:	11010000 	mrsne	r0, (UNDEF: 1)
    1434:	130e2501 	movwne	r2, #58625	; 0xe501
    1438:	1b0e030b 	blne	38206c <__ccfg+0x3620c4>
			SysCtrlSetRechargeBeforePowerDown
    143c:	1106550e 	tstne	r6, lr, lsl #10
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1440:	00061001 	andeq	r1, r6, r1
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1444:	00240200 	eoreq	r0, r4, r0, lsl #4
    1448:	0b3e0b0b 	bleq	f8407c <__ccfg+0xf640d4>
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    144c:	00000e03 	andeq	r0, r0, r3, lsl #28
    1450:	03001603 	movweq	r1, #1539	; 0x603
    1454:	3b0b3a0e 	blcc	2cfc94 <__ccfg+0x2afcec>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    1458:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    145c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1460:	0b0b0024 	bleq	2c14f8 <__ccfg+0x2a1550>
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1464:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1468:	26050000 	strcs	r0, [r5], -r0
    146c:	00134900 	andseq	r4, r3, r0, lsl #18
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1470:	00350600 	eorseq	r0, r5, r0, lsl #12
			while (!(AONWUCPowerStatusGet () &
    1474:	00001349 	andeq	r1, r0, r9, asr #6
			PRCMPowerDomainOn (__pi_systat.ondmns);
    1478:	0b000f07 	bleq	509c <patable+0xe>
    147c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1480:	01130800 	tsteq	r3, r0, lsl #16
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    1484:	0b3a0b0b 	bleq	e840b8 <__ccfg+0xe64110>
    1488:	0b390b3b 	bleq	e4417c <__ccfg+0xe241d4>
    148c:	00001301 	andeq	r1, r0, r1, lsl #6
    1490:	03000d09 	movweq	r0, #3337	; 0xd09
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1494:	3b0b3a0e 	blcc	2cfcd4 <__ccfg+0x2afd2c>
    1498:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    149c:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    14a0:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
			SysCtrlAdjustRechargeAfterPowerDown ();
    14a4:	0a00000b 	beq	14d8 <__pi_release+0x1ac>
			reinit_uart ();
    14a8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    14ac:	0b3b0b3a 	bleq	ec419c <__ccfg+0xea41f4>
    14b0:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    14b4:	00000b38 	andeq	r0, r0, r8, lsr fp
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    14b8:	0300340b 	movweq	r3, #1035	; 0x40b
    14bc:	3b0b3a0e 	blcc	2cfcfc <__ccfg+0x2afd54>
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    14c0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    14c4:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    14c8:	0c00000c 	stceq	0, cr0, [r0], {12}
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    14cc:	13490101 	movtne	r0, #37121	; 0x9101
    14d0:	00001301 	andeq	r1, r0, r1, lsl #6
    14d4:	0000210d 	andeq	r2, r0, sp, lsl #2
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    14d8:	00160e00 	andseq	r0, r6, r0, lsl #28
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    14dc:	0b3a0e03 	bleq	e84cf0 <__ccfg+0xe64d48>
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    14e0:	0b39053b 	bleq	e429d4 <__ccfg+0xe22a2c>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    14e4:	00001349 	andeq	r1, r0, r9, asr #6
    14e8:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    14ec:	0013010c 	andseq	r0, r3, ip, lsl #2
    14f0:	00051000 	andeq	r1, r5, r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    14f4:	00001349 	andeq	r1, r0, r9, asr #6
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    14f8:	03003411 	movweq	r3, #1041	; 0x411
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    14fc:	3b0b3a0e 	blcc	2cfd3c <__ccfg+0x2afd94>
    1500:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			PRCMPowerDomainOff (
    1504:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1508:	1200000c 	andne	r0, r0, #12
	__SLEEP;
    150c:	0b0b0113 	bleq	2c1960 <__ccfg+0x2a19b8>
    1510:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  __ASM volatile ("cpsie i" : : : "memory");
    1514:	13010b39 	movwne	r0, #6969	; 0x1b39
	goto Redo;
    1518:	0d130000 	ldceq	0, cr0, [r3, #-0]
    151c:	3a0e0300 	bcc	382124 <__ccfg+0x36217c>
    1520:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1524:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1528:	1400000b 	strne	r0, [r0], #-11
    152c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1530:	0b3a0b0b 	bleq	e84164 <__ccfg+0xe641bc>
    1534:	0b39053b 	bleq	e42a28 <__ccfg+0xe22a80>
    1538:	00001301 	andeq	r1, r0, r1, lsl #6
    153c:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    1540:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1544:	00341600 	eorseq	r1, r4, r0, lsl #12
    1548:	0b3a1347 	bleq	e8626c <__ccfg+0xe662c4>
    154c:	0b390b3b 	bleq	e44240 <__ccfg+0xe24298>
    1550:	00000a02 	andeq	r0, r0, r2, lsl #20
    1554:	3f012e17 	svccc	0x00012e17
    1558:	3a0e030c 	bcc	382190 <__ccfg+0x3621e8>
    155c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1560:	110c270b 	tstne	ip, fp, lsl #14
    1564:	40011201 	andmi	r1, r1, r1, lsl #4
    1568:	0013010a 	andseq	r0, r3, sl, lsl #2
    156c:	00051800 	andeq	r1, r5, r0, lsl #16
    1570:	0b3a0803 	bleq	e83584 <__ccfg+0xe635dc>
    1574:	0b390b3b 	bleq	e44268 <__ccfg+0xe242c0>
    1578:	06021349 	streq	r1, [r2], -r9, asr #6
    157c:	05190000 	ldreq	r0, [r9, #-0]
    1580:	3a0e0300 	bcc	382188 <__ccfg+0x3621e0>
	cli_tim;
    1584:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1588:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    158c:	1a000006 	bne	15ac <halt+0x28>
	diag ("PicOS halted");
    1590:	08030034 	stmdaeq	r3, {r2, r4, r5}
	mdelay (500);
    1594:	0b3b0b3a 	bleq	ec4284 <__ccfg+0xea42dc>
    1598:	13490b39 	movtne	r0, #39737	; 0x9b39
	setpowermode (2);
    159c:	341b0000 	ldrcc	r0, [fp], #-0
	__PCB = NULL;
    15a0:	3a080300 	bcc	2021a8 <__ccfg+0x1e2200>
	release;
    15a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    15ac:	1c000006 	stcne	0, cr0, [r0], {6}
    15b0:	1331001d 	teqne	r1, #29
int main (void) {
    15b4:	01120111 	tsteq	r2, r1, lsl r1
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    15b8:	0b590b58 	bleq	1644320 <__ccfg+0x1624378>
    15bc:	00000b57 	andeq	r0, r0, r7, asr fp
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    15c0:	31011d1d 	tstcc	r1, sp, lsl sp
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    15c4:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
	system_init ();
    15c8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
	tcv_init ();
    15cc:	000b570b 	andeq	r5, fp, fp, lsl #14
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    15d0:	00051e00 	andeq	r1, r5, r0, lsl #28
    15d4:	06021331 			; <UNDEFINED> instruction: 0x06021331
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    15d8:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    15dc:	030c3f00 	movweq	r3, #52992	; 0xcf00
    15e0:	3b0b3a0e 	blcc	2cfe20 <__ccfg+0x2afe78>
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    15e4:	110b390b 	tstne	fp, fp, lsl #18
    15e8:	40011201 	andmi	r1, r1, r1, lsl #4
	delay (16, 0);
    15ec:	2000000a 	andcs	r0, r0, sl
    15f0:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    15f4:	0b3b0b3a 	bleq	ec42e4 <__ccfg+0xea433c>
	__pi_release ();
    15f8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    15fc:	00000b20 	andeq	r0, r0, r0, lsr #22
    1600:	03012e21 	movweq	r2, #7713	; 0x1e21
    1604:	3b0b3a0e 	blcc	2cfe44 <__ccfg+0x2afe9c>
    1608:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    160c:	2013490c 	andscs	r4, r3, ip, lsl #18
    1610:	2200000b 	andcs	r0, r0, #11
static void killev (__pi_pcb_t *pid) {
    1614:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	wfun = (aword)(pid->code);
    1618:	0b3b0b3a 	bleq	ec4308 <__ccfg+0xea4360>
	for_all_tasks (i) {
    161c:	13490b39 	movtne	r0, #39737	; 0x9b39
		for (j = 0; j < nevents (i); j++) {
    1620:	01000000 	mrseq	r0, (UNDEF: 0)
    1624:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1628:	0e030b13 	vmoveq.32	d3[0], r0
			    || i->Events [j] . Event == wfun
    162c:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
		for (j = 0; j < nevents (i); j++) {
    1630:	06100111 			; <UNDEFINED> instruction: 0x06100111
			if (i->Events [j] . Event == (aword)pid
    1634:	24020000 	strcs	r0, [r2], #-0
    1638:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    163c:	000e030b 	andeq	r0, lr, fp, lsl #6
				wakeupev (i, j);
    1640:	00160300 	andseq	r0, r6, r0, lsl #6
    1644:	0b3a0e03 	bleq	e84e58 <__ccfg+0xe64eb0>
	for_all_tasks (i) {
    1648:	0b390b3b 	bleq	e4433c <__ccfg+0xe24394>
}
    164c:	00001349 	andeq	r1, r0, r9, asr #6
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1650:	0b002404 	bleq	a668 <__exidx_end+0x4c44>
static void qfree (aword *ch) {
    1654:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1658:	05000008 	streq	r0, [r0, #-8]
	cc = (aword*)(mpools + MA_NP);
    165c:	13490026 	movtne	r0, #36902	; 0x9026
	m_setnextp (ch, chunk);
    1660:	35060000 	strcc	r0, [r6, #-0]
	m_setnextp (cc, ch);
    1664:	00134900 	andseq	r4, r3, r0, lsl #18
}
    1668:	01130700 	tsteq	r3, r0, lsl #14
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    166c:	0b3a0b0b 	bleq	e842a0 <__ccfg+0xe642f8>
    1670:	0b390b3b 	bleq	e44364 <__ccfg+0xe243bc>
    1674:	00001301 	andeq	r1, r0, r1, lsl #6
			m_setnextp (cc, m_nextp (chunk));
    1678:	03000d08 	movweq	r0, #3336	; 0xd08
			m_size (chunk) += m_hdrlen + m_size (ch);
    167c:	3b0b3a0e 	blcc	2cfebc <__ccfg+0x2aff14>
    1680:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1684:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1688:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    168c:	0900000b 	stmdbeq	r0, {r0, r1, r3}
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    1690:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1694:	0b3b0b3a 	bleq	ec4384 <__ccfg+0xea43dc>
    1698:	13490b39 	movtne	r0, #39737	; 0x9b39
			m_setnextp (cc, m_nextp (chunk));
    169c:	00000b38 	andeq	r0, r0, r8, lsr fp
			m_size (ch) += m_hdrlen + m_size (chunk);
    16a0:	0300340a 	movweq	r3, #1034	; 0x40a
    16a4:	3b0b3a0e 	blcc	2cfee4 <__ccfg+0x2aff3c>
    16a8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    16ac:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    16b0:	0b00000c 	bleq	16e8 <__pi_badstate>
    16b4:	0b0b000f 	bleq	2c16f8 <__ccfg+0x2a1750>
			if (m_size (chunk) >= m_size (ch))
    16b8:	00001349 	andeq	r1, r0, r9, asr #6
    16bc:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    16c0:	00130113 	andseq	r0, r3, r3, lsl r1
		chunk = m_nextp (chunk))
    16c4:	00210d00 	eoreq	r0, r1, r0, lsl #26
    16c8:	160e0000 	strne	r0, [lr], -r0
    16cc:	3a0e0300 	bcc	3822d4 <__ccfg+0x36232c>
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    16d0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	diag_wait (a);
    16d4:	0013490b 	andseq	r4, r3, fp, lsl #18
	diag_wchar (c, a);
    16d8:	01150f00 	tsteq	r5, r0, lsl #30
    16dc:	13010c27 	movwne	r0, #7207	; 0x1c27
}
    16e0:	05100000 	ldreq	r0, [r0, #-0]
    16e4:	00134900 	andseq	r4, r3, r0, lsl #18
	syserror (ESTATE, "state");
    16e8:	00341100 	eorseq	r1, r4, r0, lsl #2
    16ec:	0b3a0e03 	bleq	e84f00 <__ccfg+0xe64f58>
    16f0:	0b39053b 	bleq	e42be4 <__ccfg+0xe22c3c>
    16f4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 15d8 <main+0x24>
	for (i = 0; i < MAX_UTIMERS; i++)
    16f8:	00000c3c 	andeq	r0, r0, ip, lsr ip
void utimer_add (address ut) {
    16fc:	0b011312 	bleq	4634c <__ccfg+0x263a4>
    1700:	3b0b3a0b 	blcc	2cff34 <__ccfg+0x2aff8c>
		if (__pi_utims [i] == NULL)
    1704:	010b3905 	tsteq	fp, r5, lsl #18
	for (i = 0; i < MAX_UTIMERS; i++)
    1708:	13000013 	movwne	r0, #19
    170c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		syserror (ERESOURCE, "ut a");
    1710:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	__pi_utims [i] = ut;
    1714:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    1718:	00000b38 	andeq	r0, r0, r8, lsr fp
    171c:	03011314 	movweq	r1, #4884	; 0x1314
    1720:	3a0b0b0e 	bcc	2c4360 <__ccfg+0x2a43b8>
	*t = v;
    1724:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	TCI_RUN_AUXILIARY_TIMER;
    1728:	0013010b 	andseq	r0, r3, fp, lsl #2
void update_n_wake (word min, Boolean force) {
    172c:	00211500 	eoreq	r1, r1, r0, lsl #10
	if (TCI_UPDATE_DELAY_TICKS (force))
    1730:	0b2f1349 	bleq	bc645c <__ccfg+0xba64b4>
    1734:	34160000 	ldrcc	r0, [r6], #-0
    1738:	3a0e0300 	bcc	382340 <__ccfg+0x362398>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    173c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1740:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1744:	1700000a 	strne	r0, [r0, -sl]
    1748:	13470034 	movtne	r0, #28724	; 0x7034
    174c:	0b3b0b3a 	bleq	ec443c <__ccfg+0xea4494>
    1750:	0a020b39 	beq	8443c <__ccfg+0x64494>
    1754:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
    1758:	030c3f01 	movweq	r3, #52993	; 0xcf01
    175c:	3b0b3a0e 	blcc	2cff9c <__ccfg+0x2afff4>
    1760:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1764:	1201110c 	andne	r1, r1, #12, 2
    1768:	010a4001 	tsteq	sl, r1
    176c:	19000013 	stmdbne	r0, {r0, r1, r4}
		for_all_tasks (i) {
    1770:	08030005 	stmdaeq	r3, {r0, r2}
	__pi_mintk = znew + min;
    1774:	0b3b0b3a 	bleq	ec4464 <__ccfg+0xea44bc>
    1778:	13490b39 	movtne	r0, #39737	; 0x9b39
			if (!twaiting (i))
    177c:	00000602 	andeq	r0, r0, r2, lsl #12
    1780:	0300051a 	movweq	r0, #1306	; 0x51a
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1784:	3b0b3a0e 	blcc	2cffc4 <__ccfg+0x2b001c>
    1788:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    178c:	00060213 	andeq	r0, r6, r3, lsl r2
    1790:	000a1b00 	andeq	r1, sl, r0, lsl #22
    1794:	0b3a0e03 	bleq	e84fa8 <__ccfg+0xe65000>
    1798:	0b390b3b 	bleq	e4448c <__ccfg+0xe244e4>
    179c:	00000111 	andeq	r0, r0, r1, lsl r1
    17a0:	31011d1c 	tstcc	r1, ip, lsl sp
    17a4:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    17a8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    17ac:	010b570b 	tsteq	fp, fp, lsl #14
    17b0:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
				wakeuptm (i);
    17b4:	13310005 	teqne	r1, #5
    17b8:	1d1e0000 	ldcne	0, cr0, [lr, #-0]
		for_all_tasks (i) {
    17bc:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
				d = i->Timer - znew;
    17c0:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    17c4:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    17c8:	1f00000b 	svcne	0x0000000b
		if ((word)(__pi_mintk - znew) < min) 
    17cc:	0e03012e 	adfeqsp	f0, f3, #0.5
    17d0:	0b3b0b3a 	bleq	ec44c0 <__ccfg+0xea4518>
    17d4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	__pi_old = znew;
    17d8:	0b201349 	bleq	806504 <__ccfg+0x7e655c>
}
    17dc:	05200000 	streq	r0, [r0, #-0]!
	TCI_RUN_DELAY_TIMER;
    17e0:	3a0e0300 	bcc	3823e8 <__ccfg+0x362440>
}
    17e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    17e8:	0013490b 	andseq	r4, r3, fp, lsl #18
    17ec:	11010000 	mrsne	r0, (UNDEF: 1)
    17f0:	130e2501 	movwne	r2, #58625	; 0xe501
    17f4:	1b0e030b 	blne	382428 <__ccfg+0x362480>
void proceed (word state) {
    17f8:	1106550e 	tstne	r6, lr, lsl #10
	prcdstate (__pi_curr, state);
    17fc:	00061001 	andeq	r1, r6, r1
    1800:	00240200 	eoreq	r0, r4, r0, lsl #4
	release;
    1804:	0b3e0b0b 	bleq	f84438 <__ccfg+0xf64490>
    1808:	00000e03 	andeq	r0, r0, r3, lsl #28
void __pi_wait (aword event, word state) {
    180c:	03001603 	movweq	r1, #1539	; 0x603
	sint j = nevents (__pi_curr);
    1810:	3b0b3a0e 	blcc	2d0050 <__ccfg+0x2b00a8>
	if (j >= MAX_EVENTS_PER_TASK)
    1814:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1818:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    181c:	0b0b0024 	bleq	2c18b4 <__ccfg+0x2a190c>
		syserror (ENEVENTS, "sw");
    1820:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1824:	26050000 	strcs	r0, [r5], -r0
	setestate (__pi_curr->Events [j], state, event);
    1828:	00134900 	andseq	r4, r3, r0, lsl #18
	incwait (__pi_curr);
    182c:	00350600 	eorseq	r0, r5, r0, lsl #12
	setestate (__pi_curr->Events [j], state, event);
    1830:	00001349 	andeq	r1, r0, r9, asr #6
}
    1834:	0b011307 	bleq	46458 <__ccfg+0x264b0>
    1838:	3b0b3a0b 	blcc	2d006c <__ccfg+0x2b00c4>
    183c:	010b390b 	tsteq	fp, fp, lsl #18
void __pi_trigger (aword event) {
    1840:	08000013 	stmdaeq	r0, {r0, r1, r4}
	for_all_tasks (i) {
    1844:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		for (j = 0; j < nevents (i); j++) {
    1848:	0b3b0b3a 	bleq	ec4538 <__ccfg+0xea4590>
    184c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1850:	0b0d0b0b 	bleq	344484 <__ccfg+0x3244dc>
    1854:	0b380b0c 	bleq	e0448c <__ccfg+0xde44e4>
			if (i->Events [j] . Event == event) {
    1858:	0d090000 	stceq	0, cr0, [r9, #-0]
    185c:	3a0e0300 	bcc	382464 <__ccfg+0x3624bc>
    1860:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				wakeupev (i, j);
    1864:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1868:	0a00000b 	beq	189c <delay+0x4>
	for_all_tasks (i) {
    186c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
}
    1870:	0b3b0b3a 	bleq	ec4560 <__ccfg+0xea45b8>
aword __pi_join (aword pid, word st) {
    1874:	13490b39 	movtne	r0, #39737	; 0x9b39
	for_all_tasks (i) {
    1878:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    187c:	0f0b0000 	svceq	0x000b0000
	return 0;
    1880:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
		if ((aword)i == pid) {
    1884:	0c000013 	stceq	0, cr0, [r0], {19}
			__pi_wait (pid, st);
    1888:	13490101 	movtne	r0, #37121	; 0x9101
}
    188c:	00001301 	andeq	r1, r0, r1, lsl #6
	for_all_tasks (i) {
    1890:	0000210d 	andeq	r2, r0, sp, lsl #2
    1894:	00160e00 	andseq	r0, r6, r0, lsl #28
void delay (word d, word state) {
    1898:	0b3a0e03 	bleq	e850ac <__ccfg+0xe65104>
	settstate (__pi_curr, state);
    189c:	0b39053b 	bleq	e42d90 <__ccfg+0xe22de8>
    18a0:	00001349 	andeq	r1, r0, r9, asr #6
    18a4:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    18a8:	0013010c 	andseq	r0, r3, ip, lsl #2
	update_n_wake (d, YES);
    18ac:	00051000 	andeq	r1, r5, r0
    18b0:	00001349 	andeq	r1, r0, r9, asr #6
	__pi_curr->Timer = __pi_old + d;
    18b4:	03003411 	movweq	r3, #1041	; 0x411
    18b8:	3b0b3a0e 	blcc	2d00f8 <__ccfg+0x2b0150>
	inctimer (__pi_curr);
    18bc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    18c0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    18c4:	1200000c 	andne	r0, r0, #12
}
    18c8:	0b0b0113 	bleq	2c1d1c <__ccfg+0x2a1d74>
    18cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if (fun == NULL)
    18d0:	13010b39 	movwne	r0, #6969	; 0x1b39
		return (int) __pi_curr;
    18d4:	0d130000 	ldceq	0, cr0, [r3, #-0]
    18d8:	3a0e0300 	bcc	3824e0 <__ccfg+0x362538>
	for_all_tasks (i)
    18dc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    18e0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		if (i->code == fun)
    18e4:	1400000b 	strne	r0, [r0], #-11
	for_all_tasks (i)
    18e8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    18ec:	0b3a0b0b 	bleq	e84520 <__ccfg+0xe64578>
    18f0:	0b39053b 	bleq	e42de4 <__ccfg+0xe22e3c>
int __pi_strlen (const char *s) {
    18f4:	00001301 	andeq	r1, r0, r1, lsl #6
	for (i = 0; *(s+i) != '\0'; i++);
    18f8:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
}
    18fc:	000b2f13 	andeq	r2, fp, r3, lsl pc
	for (i = 0; *(s+i) != '\0'; i++);
    1900:	00341600 	eorseq	r1, r4, r0, lsl #12
	while ((Boolean)(*d++ = *s++));
    1904:	0b3a0e03 	bleq	e85118 <__ccfg+0xe65170>
    1908:	0b390b3b 	bleq	e445fc <__ccfg+0xe24654>
    190c:	0a021349 	beq	86638 <__ccfg+0x66690>
}
    1910:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
	while (n-- && (*s != '\0'))
    1914:	030c3f00 	movweq	r3, #52992	; 0xcf00
    1918:	3b0b3a0e 	blcc	2d0158 <__ccfg+0x2b01b0>
	*d = '\0';
    191c:	110b390b 	tstne	fp, fp, lsl #18
	while (n-- && (*s != '\0'))
    1920:	40011201 	andmi	r1, r1, r1, lsl #4
    1924:	1800000a 	stmdane	r0, {r1, r3}
		*d++ = *s++;
    1928:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1878 <__pi_join+0x4>
    192c:	0b3a0e03 	bleq	e85140 <__ccfg+0xe65198>
	while (n--)
    1930:	0b390b3b 	bleq	e44624 <__ccfg+0xe2467c>
    1934:	13490c27 	movtne	r0, #39975	; 0x9c27
		*dest++ = *src++;
    1938:	01120111 	tsteq	r2, r1, lsl r1
    193c:	13010a40 	movwne	r0, #6720	; 0x1a40
    1940:	05190000 	ldreq	r0, [r9, #-0]
	while (n--)
    1944:	3a080300 	bcc	20254c <__ccfg+0x1e25a4>
}
    1948:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		*dest++ = c;
    194c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
void adddevfunc (devreqfun_t rf, int loc) {
    1950:	1a000006 	bne	1970 <adddevfunc+0x20>
		syserror (EREQPAR, "addv");
    1954:	08030005 	stmdaeq	r3, {r0, r2}
		syserror (ERESOURCE, "addv");
    1958:	0b3b0b3a 	bleq	ec4648 <__ccfg+0xea46a0>
	if (ioreq [loc] != NULL)
    195c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1960:	00000a02 	andeq	r0, r0, r2, lsl #20
		syserror (ERESOURCE, "addv");
    1964:	3f012e1b 	svccc	0x00012e1b
	ioreq [loc] = rf;
    1968:	3a0e030c 	bcc	3825a0 <__ccfg+0x3625f8>
}
    196c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1970:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
sint io (word retry, word dev, word operation, char *buf, word len) {
    1974:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1978:	010a4001 	tsteq	sl, r1
    197c:	1c000013 	stcne	0, cr0, [r0], {19}
    1980:	08030005 	stmdaeq	r3, {r0, r2}
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1984:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1988:	13490b39 	movtne	r0, #39737	; 0x9b39
    198c:	00000602 	andeq	r0, r0, r2, lsl #12
		syserror (ENODEVICE, "io");
    1990:	3f002e1d 	svccc	0x00002e1d
    1994:	3a0e030c 	bcc	3825cc <__ccfg+0x362624>
	if (len == 0)
    1998:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	ret = (ioreq [dev]) (operation, buf, len);
    199c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
    19a0:	000a4001 	andeq	r4, sl, r1
	if (ret >= 0)
    19a4:	00341e00 	eorseq	r1, r4, r0, lsl #28
	if (ret == -1) {
    19a8:	0b3a0803 	bleq	e839bc <__ccfg+0xe63a14>
    19ac:	0b39053b 	bleq	e42ea0 <__ccfg+0xe22ef8>
		if (retry == WNONE)
    19b0:	06021349 	streq	r1, [r2], -r9, asr #6
		iowait (dev, operation, retry);
    19b4:	0a1f0000 	beq	7c19bc <__ccfg+0x7a1a14>
    19b8:	3a0e0300 	bcc	3825c0 <__ccfg+0x362618>
    19bc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			release;
    19c0:	0001110b 	andeq	r1, r1, fp, lsl #2
	if (ret == -2) {
    19c4:	011d2000 	tsteq	sp, r0
		if (retry != WNONE) {
    19c8:	01521331 	cmpeq	r2, r1, lsr r3
    19cc:	0b580655 	bleq	1603328 <__ccfg+0x15e3380>
			iowait (dev, operation, retry);
    19d0:	0b570559 	bleq	15c2f3c <__ccfg+0x15a2f94>
    19d4:	00001301 	andeq	r1, r0, r1, lsl #6
			(ioreq [dev]) (NONE, buf, len);
    19d8:	31000521 	tstcc	r0, r1, lsr #10
    19dc:	22000013 	andcs	r0, r0, #19
    19e0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
		(ioreq [dev]) (NONE, buf, len);
    19e4:	01120111 	tsteq	r2, r1, lsl r1
    19e8:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    19ec:	00000b57 	andeq	r0, r0, r7, asr fp
}
    19f0:	03000523 	movweq	r0, #1315	; 0x523
	if (retry != WNONE) {
    19f4:	3b0b3a0e 	blcc	2d0234 <__ccfg+0x2b028c>
		delay (-ret - 2, retry);
    19f8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    19fc:	00060213 	andeq	r0, r6, r3, lsl r2
    1a00:	000a2400 	andeq	r2, sl, r0, lsl #8
    1a04:	0b3a0e03 	bleq	e85218 <__ccfg+0xe65270>
		release;
    1a08:	0b390b3b 	bleq	e446fc <__ccfg+0xe24754>
    1a0c:	00000111 	andeq	r0, r0, r1, lsl r1
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1a10:	31011d25 	tstcc	r1, r5, lsr #26
    1a14:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    1a18:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1a1c:	000b570b 	andeq	r5, fp, fp, lsl #14
    1a20:	00052600 	andeq	r2, r5, r0, lsl #12
		syserror (ERESOURCE, "mal1");
    1a24:	06021331 			; <UNDEFINED> instruction: 0x06021331
    1a28:	1d270000 	stcne	0, cr0, [r7, #-0]
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1a2c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1a30:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a34:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
	m_size (mpools [0]) = mlen - m_hdrlen;
    1a38:	0013010b 	andseq	r0, r3, fp, lsl #2
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a3c:	011d2800 	tsteq	sp, r0, lsl #16
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1a40:	01111331 	tsteq	r1, r1, lsr r3
    1a44:	0b580112 	bleq	1601e94 <__ccfg+0x15e1eec>
}
    1a48:	0b570b59 	bleq	15c47b4 <__ccfg+0x15a480c>
    1a4c:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
    1a50:	030c3f00 	movweq	r3, #52992	; 0xcf00
    1a54:	3b0b3a0e 	blcc	2d0294 <__ccfg+0x2b02ec>
    1a58:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1a5c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
void __pi_free (aword *ch) {
    1a60:	000a4001 	andeq	r4, sl, r1
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1a64:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
    1a68:	0b3a0e03 	bleq	e8527c <__ccfg+0xe652d4>
		syserror (EMALLOC, "malg");
    1a6c:	0b390b3b 	bleq	e44760 <__ccfg+0xe247b8>
    1a70:	01120111 	tsteq	r2, r1, lsl r1
	mcfree [MA_NP] += m_size (ch);
    1a74:	13010a40 	movwne	r0, #6720	; 0x1a40
		m_size (ch) ^= MALLOC_UMASK;
    1a78:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
    1a7c:	3a0e0300 	bcc	382684 <__ccfg+0x3626dc>
	mcfree [MA_NP] += m_size (ch);
    1a80:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	QFREE;
    1a84:	000b200b 	andeq	r2, fp, fp
	if (mevent [MA_NP] . nwait) {
    1a88:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
    1a8c:	0b3a0e03 	bleq	e852a0 <__ccfg+0xe652f8>
		trigger ((aword)(&(mevent [MA_NP])));
    1a90:	0b390b3b 	bleq	e44784 <__ccfg+0xe247dc>
		mevent [MA_NP] . nwait --;
    1a94:	01110c27 	tsteq	r1, r7, lsr #24
}
    1a98:	0a400112 	beq	1001ee8 <__ccfg+0xfe1f40>
    1a9c:	00001301 	andeq	r1, r0, r1, lsl #6
    1aa0:	55010b2d 	strpl	r0, [r1, #-2861]	; 0xfffff4d3
    1aa4:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
void kill (aword pid) {
    1aa8:	13310034 	teqne	r1, #52	; 0x34
		pid = (aword) __pi_curr;
    1aac:	00000602 	andeq	r0, r0, r2, lsl #12
	j = NULL;
    1ab0:	03012e2f 	movweq	r2, #7727	; 0x1e2f
	for_all_tasks (i) {
    1ab4:	3b0b3a0e 	blcc	2d02f4 <__ccfg+0x2b034c>
	syserror (EREQPAR, "kpi");
    1ab8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1abc:	010b2013 	tsteq	fp, r3, lsl r0
		if ((aword)i == pid) {
    1ac0:	30000013 	andcc	r0, r0, r3, lsl r0
    1ac4:	08030034 	stmdaeq	r3, {r2, r4, r5}
				__PCB = i->Next;
    1ac8:	0b3b0b3a 	bleq	ec47b8 <__ccfg+0xea4810>
			killev (i);
    1acc:	13490b39 	movtne	r0, #39737	; 0x9b39
			ufree (i);
    1ad0:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
			if (i == __pi_curr)
    1ad4:	3a0e0301 	bcc	3826e0 <__ccfg+0x362738>
    1ad8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				release;
    1adc:	200c270b 	andcs	r2, ip, fp, lsl #14
				j->Next = i->Next;
    1ae0:	0013010b 	andseq	r0, r3, fp, lsl #2
    1ae4:	00053200 	andeq	r3, r5, r0, lsl #4
    1ae8:	0b3a0803 	bleq	e83afc <__ccfg+0xe63b54>
}
    1aec:	0b390b3b 	bleq	e447e0 <__ccfg+0xe24838>
    1af0:	00001349 	andeq	r1, r0, r9, asr #6
    1af4:	31011d33 	tstcc	r1, r3, lsr sp
	if (size < 8)
    1af8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		_size = 2;
    1afc:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1b00:	010b570b 	tsteq	fp, fp, lsl #14
		_size = (((aword)size) + 3) >> 2;
    1b04:	34000013 	strcc	r0, [r0], #-19	; 0xffffffed
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b08:	0e03012e 	adfeqsp	f0, f3, #0.5
		_size = (((aword)size) + 3) >> 2;
    1b0c:	0b3b0b3a 	bleq	ec47fc <__ccfg+0xea4854>
		if (mevent [MA_NP] . nfail != 255)
    1b10:	13490b39 	movtne	r0, #39737	; 0x9b39
    1b14:	01120111 	tsteq	r2, r1, lsl r1
			mevent [MA_NP] . nfail ++;
    1b18:	13010a40 	movwne	r0, #6720	; 0x1a40
		mnfree [MA_NP] = 0;
    1b1c:	34350000 	ldrtcc	r0, [r5], #-0
    1b20:	3a080300 	bcc	202728 <__ccfg+0x1e2780>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b28:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			syserror (EMALLOC, "malc");
    1b2c:	36000006 	strcc	r0, [r0], -r6
    1b30:	0e03012e 	adfeqsp	f0, f3, #0.5
		if (m_size (chunk) >= _size)
    1b34:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1b38:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		chunk = m_nextp (chunk)) {
    1b3c:	13010b20 	movwne	r0, #6944	; 0x1b20
		m_setnextp (cc, m_nextp (chunk));
    1b40:	05370000 	ldreq	r0, [r7, #-0]!
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1b44:	3a0e0300 	bcc	38274c <__ccfg+0x3627a4>
    1b48:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			m_size (chunk) = _size;
    1b4c:	0013490b 	andseq	r4, r3, fp, lsl #18
			cc = chunk + _size + m_hdrlen;
    1b50:	012e3800 			; <UNDEFINED> instruction: 0x012e3800
    1b54:	0b3a0e03 	bleq	e85368 <__ccfg+0xe653c0>
			m_size (cc) = waste - m_hdrlen;
    1b58:	0b390b3b 	bleq	e4484c <__ccfg+0xe248a4>
			QFREE;
    1b5c:	13490c27 	movtne	r0, #39975	; 0x9c27
		mevent [MA_NP] . nfail = 0;
    1b60:	13010b20 	movwne	r0, #6944	; 0x1b20
		mcfree [MA_NP] -= m_size (chunk);
    1b64:	05390000 	ldreq	r0, [r9, #-0]!
    1b68:	3a0e0300 	bcc	382770 <__ccfg+0x3627c8>
    1b6c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b70:	0013490b 	andseq	r4, r3, fp, lsl #18
		m_size (chunk) |= MALLOC_UMASK;
    1b74:	012e3a00 			; <UNDEFINED> instruction: 0x012e3a00
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1b78:	01111331 	tsteq	r1, r1, lsr r3
		m_size (chunk) |= MALLOC_UMASK;
    1b7c:	0a400112 	beq	1001fcc <__ccfg+0xfe2024>
			mnfree [MA_NP] = mcfree [MA_NP];
    1b80:	1d3b0000 	ldcne	0, cr0, [fp, #-0]
}
    1b84:	11133100 	tstne	r3, r0, lsl #2
    1b88:	58011201 	stmdapl	r1, {r0, r9, ip}
    1b8c:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    1b90:	0000000b 	andeq	r0, r0, fp
    1b94:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1b98:	030b130e 	movweq	r1, #45838	; 0xb30e
    1b9c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
aword __pi_fork (fsmcode func, aword data) {
    1ba0:	10011106 	andne	r1, r1, r6, lsl #2
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1ba4:	02000006 	andeq	r0, r0, #6
    1ba8:	0b0b0024 	bleq	2c1c40 <__ccfg+0x2a1c98>
    1bac:	0e030b3e 	vmoveq.16	d3[0], r0
		if ((j = __PCB) == NULL)
    1bb0:	16030000 	strne	r0, [r3], -r0
	i->Next = NULL;
    1bb4:	3a0e0300 	bcc	3827bc <__ccfg+0x362814>
	i->data = data;
    1bb8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if ((j = __PCB) == NULL)
    1bbc:	0013490b 	andseq	r4, r3, fp, lsl #18
}
    1bc0:	00240400 	eoreq	r0, r4, r0, lsl #8
			for (; j->Next != NULL; j = j->Next);
    1bc4:	0b3e0b0b 	bleq	f847f8 <__ccfg+0xf64850>
    1bc8:	00000803 	andeq	r0, r0, r3, lsl #16
	return (aword) i;
    1bcc:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    1bd0:	06000013 			; <UNDEFINED> instruction: 0x06000013
	if (mevent [MA_NP] . nwait != 255)
    1bd4:	13490035 	movtne	r0, #36917	; 0x9035
    1bd8:	0f070000 	svceq	0x00070000
    1bdc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
		mevent [MA_NP] . nwait ++;
    1be0:	08000013 	stmdaeq	r0, {r0, r1, r4}
	wait ((aword)(&(mevent [MA_NP])), state);
    1be4:	0b0b0113 	bleq	2c2038 <__ccfg+0x2a2090>
    1be8:	0b3b0b3a 	bleq	ec48d8 <__ccfg+0xea4930>
void diag (const char *mess, ...) {
    1bec:	13010b39 	movwne	r0, #6969	; 0x1b39
    1bf0:	0d090000 	stceq	0, cr0, [r9, #-0]
    1bf4:	3a0e0300 	bcc	3827fc <__ccfg+0x362854>
	diag_disable_int (a, is);
    1bf8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1bfc:	0b13490b 	bleq	4d4030 <__ccfg+0x4b4088>
    1c00:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
				d = (bc == 16) ? 10000 : 1000000000;
    1c04:	000b380b 	andeq	r3, fp, fp, lsl #16
	diag_disable_int (a, is);
    1c08:	000d0a00 	andeq	r0, sp, r0, lsl #20
	while (*mess != '\0') {
    1c0c:	0b3a0e03 	bleq	e85420 <__ccfg+0xe65478>
	dgout ('\r');
    1c10:	0b390b3b 	bleq	e44904 <__ccfg+0xe2495c>
	dgout ('\n');
    1c14:	0b381349 	bleq	e06940 <__ccfg+0xde6998>
    1c18:	340b0000 	strcc	r0, [fp], #-0
    1c1c:	3a0e0300 	bcc	382824 <__ccfg+0x36287c>
	diag_wait (a);
    1c20:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	diag_enable_int (a, is);
    1c24:	3f13490b 	svccc	0x0013490b
    1c28:	000c3c0c 	andeq	r3, ip, ip, lsl #24
}
    1c2c:	01010c00 	tsteq	r1, r0, lsl #24
    1c30:	13011349 	movwne	r1, #4937	; 0x1349
    1c34:	210d0000 	mrscs	r0, (UNDEF: 13)
		if (*mess == '%') {
    1c38:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1c3c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
			if (*mess == 'l') {
    1c40:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1c44:	13490b39 	movtne	r0, #39737	; 0x9b39
				mess++;
    1c48:	150f0000 	strne	r0, [pc, #-0]	; 1c50 <diag+0x64>
				val = va_arg (ap, lword);
    1c4c:	010c2701 	tsteq	ip, r1, lsl #14
				bc = 32;
    1c50:	10000013 	andne	r0, r0, r3, lsl r0
				bc = 16;
    1c54:	13490005 	movtne	r0, #36869	; 0x9005
			switch (*mess) {
    1c58:	34110000 	ldrcc	r0, [r1], #-0
    1c5c:	3a0e0300 	bcc	382864 <__ccfg+0x3628bc>
    1c60:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				dgout ('%');
    1c64:	3f13490b 	svccc	0x0013490b
    1c68:	000c3c0c 	andeq	r3, ip, ip, lsl #24
				dgout (*mess);
    1c6c:	01131200 	tsteq	r3, r0, lsl #4
    1c70:	0b3a0b0b 	bleq	e848a4 <__ccfg+0xe648fc>
			switch (*mess) {
    1c74:	0b39053b 	bleq	e43168 <__ccfg+0xe231c0>
					v = __pi_hex_enc_table [
    1c78:	00001301 	andeq	r1, r0, r1, lsl #6
					i += 4;
    1c7c:	03000d13 	movweq	r0, #3347	; 0xd13
					(val >> (bc - i)) & 0xf];
    1c80:	3b0b3a0e 	blcc	2d04c0 <__ccfg+0x2b0518>
    1c84:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
					dgout (v);
    1c88:	000b3813 	andeq	r3, fp, r3, lsl r8
    1c8c:	01131400 	tsteq	r3, r0, lsl #8
				while (i < bc) {
    1c90:	0b0b0e03 	bleq	2c54a4 <__ccfg+0x2a54fc>
			mess++;
    1c94:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
					d /= 10;
    1c98:	13010b39 	movwne	r0, #6969	; 0x1b39
				if ((val >> (bc - 1)) & 1) {
    1c9c:	21150000 	tstcs	r5, r0
    1ca0:	2f134900 	svccs	0x00134900
					dgout ('-');
    1ca4:	1600000b 	strne	r0, [r0], -fp
    1ca8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1bf8 <diag+0xc>
						val |= 0xffff0000;
    1cac:	0b3a0e03 	bleq	e854c0 <__ccfg+0xe65518>
    1cb0:	0b390b3b 	bleq	e449a4 <__ccfg+0xe249fc>
    1cb4:	13490c27 	movtne	r0, #39975	; 0x9c27
				d = (bc == 16) ? 10000 : 1000000000;
    1cb8:	01120111 	tsteq	r2, r1, lsl r1
    1cbc:	13010a40 	movwne	r0, #6720	; 0x1a40
    1cc0:	05170000 	ldreq	r0, [r7, #-0]
					v = (word) (val / d);
    1cc4:	3a080300 	bcc	2028cc <__ccfg+0x1e2924>
					if (v || d == 1) break;
    1cc8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ccc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
					d /= 10;
    1cd0:	18000006 	stmdane	r0, {r1, r2}
				d = (bc == 16) ? 10000 : 1000000000;
    1cd4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
					dgout (v + '0');
    1cd8:	0b3b0b3a 	bleq	ec49c8 <__ccfg+0xea4a20>
    1cdc:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ce0:	00000602 	andeq	r0, r0, r2, lsl #12
					d /= 10;
    1ce4:	03003419 	movweq	r3, #1049	; 0x419
					val = val - (v * d);
    1ce8:	3b0b3a08 	blcc	2d0510 <__ccfg+0x2b0568>
					if (d == 0) break;
    1cec:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
					v = (word) (val / d);
    1cf0:	00060213 	andeq	r0, r6, r3, lsl r2
    1cf4:	11010000 	mrsne	r0, (UNDEF: 1)
				if (bc == 16)
    1cf8:	130e2501 	movwne	r2, #58625	; 0xe501
				d = (bc == 16) ? 10000 : 1000000000;
    1cfc:	1b0e030b 	blne	382930 <__ccfg+0x362988>
					val &= 0xffff;
    1d00:	1106550e 	tstne	r6, lr, lsl #10
					dgout (*s);
    1d04:	00061001 	andeq	r1, r6, r1
					s++;
    1d08:	00240200 	eoreq	r0, r4, r0, lsl #4
				while (*s != '\0') {
    1d0c:	0b3e0b0b 	bleq	f84940 <__ccfg+0xf64998>
    1d10:	00000e03 	andeq	r0, r0, r3, lsl #28
			dgout (*mess++);
    1d14:	03001603 	movweq	r1, #1539	; 0x603
    1d18:	3b0b3a0e 	blcc	2d0558 <__ccfg+0x2b05b0>
    1d1c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1d20:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1d24:	0b0b0024 	bleq	2c1dbc <__ccfg+0x2a1e14>
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1d28:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1d2c:	26050000 	strcs	r0, [r5], -r0
    1d30:	00134900 	andseq	r4, r3, r0, lsl #18
    1d34:	00350600 	eorseq	r0, r5, r0, lsl #12
	^ entropy
    1d38:	00001349 	andeq	r1, r0, r9, asr #6
}
    1d3c:	0b011307 	bleq	46960 <__ccfg+0x269b8>
    1d40:	3b0b3a0b 	blcc	2d0574 <__ccfg+0x2b05cc>
    1d44:	010b390b 	tsteq	fp, fp, lsl #18
    1d48:	08000013 	stmdaeq	r0, {r0, r1, r4}
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1d4c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	word cs = size + hblenb;
    1d50:	0b3b0b3a 	bleq	ec4a40 <__ccfg+0xea4a98>
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1d54:	13490b39 	movtne	r0, #39737	; 0x9b39
    1d58:	0b0d0b0b 	bleq	34498c <__ccfg+0x3249e4>
	p -> length = size;
    1d5c:	0b380b0c 	bleq	e04994 <__ccfg+0xde49ec>
}
    1d60:	0d090000 	stceq	0, cr0, [r9, #-0]
	if (p->attributes.b.queued) {
    1d64:	3a0e0300 	bcc	38296c <__ccfg+0x3629c4>
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1d68:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d6c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1d70:	0a00000b 	beq	1da4 <enq+0x18>
		p->attributes.b.queued = 0;
    1d74:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1d78:	0b3b0b3a 	bleq	ec4a68 <__ccfg+0xea4ac0>
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1d7c:	13490b39 	movtne	r0, #39737	; 0x9b39
	deq (p);	// Remove from queue
    1d80:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
}
    1d84:	0f0b0000 	svceq	0x000b0000
	tfree ((address)p);
    1d88:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1d8c:	0c000013 	stceq	0, cr0, [r0], {19}
    1d90:	13490101 	movtne	r0, #37121	; 0x9101
    1d94:	00001301 	andeq	r1, r0, r1, lsl #6
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1d98:	0000210d 	andeq	r2, r0, sp, lsl #2
    1d9c:	00160e00 	andseq	r0, r6, r0, lsl #28
	if (q_empty (q))
    1da0:	0b3a0e03 	bleq	e855b4 <__ccfg+0xe6560c>
    1da4:	0b39053b 	bleq	e43298 <__ccfg+0xe232f0>
		trigger (q);
    1da8:	00001349 	andeq	r1, r0, r9, asr #6
	if (p->attributes.b.urgent) {
    1dac:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
		p->u.bqueue.next = q->next;
    1db0:	0013010c 	andseq	r0, r3, ip, lsl #2
		p->u.bqueue.prev = q;
    1db4:	00051000 	andeq	r1, r5, r0
		q->next->prev = (qitem_t*) p;
    1db8:	00001349 	andeq	r1, r0, r9, asr #6
	p->attributes.b.queued = 1;
    1dbc:	03003411 	movweq	r3, #1041	; 0x411
    1dc0:	3b0b3a0e 	blcc	2d0600 <__ccfg+0x2b0658>
}
    1dc4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		p->u.bqueue.prev = q->prev;
    1dc8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
		q->prev->next = (qitem_t*) p;
    1dcc:	1200000c 	andne	r0, r0, #12
		q->prev = (qitem_t*) p;
    1dd0:	0b0b0113 	bleq	2c2224 <__ccfg+0x2a227c>
    1dd4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1dd8:	13010b39 	movwne	r0, #6969	; 0x1b39
	deq (p);	// Soft dequeue, timer and hook left intact
    1ddc:	0d130000 	ldceq	0, cr0, [r3, #-0]
	switch (dv) {
    1de0:	3a0e0300 	bcc	3829e8 <__ccfg+0x362a40>
    1de4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1de8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1dec:	1400000b 	strne	r0, [r0], #-11
			p->attributes.b.urgent = 1;
    1df0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1df4:	0b3a0b0b 	bleq	e84a28 <__ccfg+0xe64a80>
			verify_ses (p, "dispose ses");
    1df8:	0b39053b 	bleq	e432ec <__ccfg+0xe23344>
    1dfc:	00001301 	andeq	r1, r0, r1, lsl #6
    1e00:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    1e04:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1e08:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
			verify_phy (p, "dispose phy");
    1e0c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1e10:	0b3b0b3a 	bleq	ec4b00 <__ccfg+0xea4b58>
}
    1e14:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			enq (oqueues [p->attributes.b.phys], p);
    1e18:	01111349 	tsteq	r1, r9, asr #6
			p->attributes.b.urgent = 1;
    1e1c:	0a400112 	beq	100226c <__ccfg+0xfe22c4>
    1e20:	05170000 	ldreq	r0, [r7, #-0]
			verify_phy (p, "dispose phy");
    1e24:	3a080300 	bcc	202a2c <__ccfg+0x1e2a84>
    1e28:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e2c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1e30:	18000006 	stmdane	r0, {r1, r2}
    1e34:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1e38:	0b3b0b3a 	bleq	ec4b28 <__ccfg+0xea4b80>
			enq (oqueues [p->attributes.b.phys], p);
    1e3c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1e40:	00000602 	andeq	r0, r0, r2, lsl #12
}
    1e44:	01110100 	tsteq	r1, r0, lsl #2
			rlp (p);
    1e48:	0b130e25 	bleq	4c56e4 <__ccfg+0x4a573c>
}
    1e4c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1e50:	01110655 	tsteq	r1, r5, asr r6
    1e54:	00000610 	andeq	r0, r0, r0, lsl r6
    1e58:	0b002402 	bleq	ae68 <__exidx_end+0x5444>
    1e5c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1e60:	0300000e 	movweq	r0, #14
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1e64:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	if (b->attributes.b.outgoing) {
    1e68:	0b3b0b3a 	bleq	ec4b58 <__ccfg+0xea4bb0>
	b = header (p);
    1e6c:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (b->attributes.b.outgoing) {
    1e70:	24040000 	strcs	r0, [r4], #-0
		verify_ses (b, "tcv02");
    1e74:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1e78:	0008030b 	andeq	r0, r8, fp, lsl #6
    1e7c:	01130500 	tsteq	r3, r0, lsl #10
    1e80:	0b0b0e03 	bleq	2c5694 <__ccfg+0x2a56ec>
    1e84:	0b3b0b3a 	bleq	ec4b74 <__ccfg+0xea4bcc>
		verify_plg (b, tcv_out, "tcv03");
    1e88:	00001301 	andeq	r1, r0, r1, lsl #6
    1e8c:	03000d06 	movweq	r0, #3334	; 0xd06
    1e90:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
    1e94:	000c340b 	andeq	r3, ip, fp, lsl #8
    1e98:	000f0700 	andeq	r0, pc, r0, lsl #14
    1e9c:	00000b0b 	andeq	r0, r0, fp, lsl #22
    1ea0:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
    1ea4:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1ea8:	13490035 	movtne	r0, #36917	; 0x9035
		dispose (b, plugins [b->attributes.b.plugin] ->
    1eac:	130a0000 	movwne	r0, #40960	; 0xa000
}
    1eb0:	3a0b0b01 	bcc	2c4abc <__ccfg+0x2a4b14>
		dispose (b, plugins [b->attributes.b.plugin] ->
    1eb4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		rlp (b);
    1eb8:	0013010b 	andseq	r0, r3, fp, lsl #2
}
    1ebc:	000d0b00 	andeq	r0, sp, r0, lsl #22
		rlp (b);
    1ec0:	0b3a0e03 	bleq	e856d4 <__ccfg+0xe6572c>
    1ec4:	0b390b3b 	bleq	e44bb8 <__ccfg+0xe24c10>
    1ec8:	0b0b1349 	bleq	2c6bf4 <__ccfg+0x2a6c4c>
    1ecc:	0b0c0b0d 	bleq	304b08 <__ccfg+0x2e4b60>
    1ed0:	00000b38 	andeq	r0, r0, r8, lsr fp
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1ed4:	03000d0c 	movweq	r0, #3340	; 0xd0c
    1ed8:	3b0b3a0e 	blcc	2d0718 <__ccfg+0x2b0770>
    1edc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1ee0:	000b3813 	andeq	r3, fp, r3, lsl r8
	va_start (ap, plid);
    1ee4:	00340d00 	eorseq	r0, r4, r0, lsl #26
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1ee8:	0b3a0e03 	bleq	e856fc <__ccfg+0xe65754>
    1eec:	0b390b3b 	bleq	e44be0 <__ccfg+0xe24c38>
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1ef0:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1dd4 <enq+0x48>
    1ef4:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1ef8:	0b000f0e 	bleq	5b38 <__exidx_end+0x114>
    1efc:	0013490b 	andseq	r4, r3, fp, lsl #18
			syserror (ENODEVICE, "tcv04");
    1f00:	01010f00 	tsteq	r1, r0, lsl #30
		syserror (EMALLOC, "tcv05");
    1f04:	13011349 	movwne	r1, #4937	; 0x1349
	attp.b.outgoing = 1;
    1f08:	21100000 	tstcs	r0, r0
    1f0c:	11000000 	mrsne	r0, (UNDEF: 0)
    1f10:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1f14:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f18:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (descriptors [fd] == NULL)
    1f1c:	15120000 	ldrne	r0, [r2, #-0]
    1f20:	010c2701 	tsteq	ip, r1, lsl #14
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f24:	13000013 	movwne	r0, #19
		return ERROR;
    1f28:	13490005 	movtne	r0, #36869	; 0x9005
}
    1f2c:	34140000 	ldrcc	r0, [r4], #-0
    1f30:	3a0e0300 	bcc	382b38 <__ccfg+0x362b90>
    1f34:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	s->attpattern.b.session = fd;
    1f38:	3f13490b 	svccc	0x0013490b
    1f3c:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	descriptors [fd] = s;
    1f40:	01131500 	tsteq	r3, r0, lsl #10
	q_init (&(s->rqueue));
    1f44:	0b3a0b0b 	bleq	e84b78 <__ccfg+0xe64bd0>
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1f48:	0b39053b 	bleq	e4343c <__ccfg+0xe23494>
    1f4c:	00001301 	andeq	r1, r0, r1, lsl #6
    1f50:	03000d16 	movweq	r0, #3350	; 0xd16
    1f54:	3b0b3a0e 	blcc	2d0794 <__ccfg+0x2b07ec>
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1f58:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1f5c:	000b3813 	andeq	r3, fp, r3, lsl r8
    1f60:	01131700 	tsteq	r3, r0, lsl #14
	descriptors [fd] = s;
    1f64:	0b0b0e03 	bleq	2c5778 <__ccfg+0x2a57d0>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1f68:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1f6c:	13010b39 	movwne	r0, #6969	; 0x1b39
	if (s == NULL)
    1f70:	21180000 	tstcs	r8, r0
		syserror (EMALLOC, "tcv05");
    1f74:	2f134900 	svccs	0x00134900
    1f78:	1900000b 	stmdbne	r0, {r0, r1, r3}
    1f7c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1ecc <tcv_endp+0x68>
    1f80:	0b3a0e03 	bleq	e85794 <__ccfg+0xe657ec>
    1f84:	0b390b3b 	bleq	e44c78 <__ccfg+0xe24cd0>
    1f88:	13490c27 	movtne	r0, #39975	; 0x9c27
    1f8c:	01120111 	tsteq	r2, r1, lsl r1
    1f90:	13010a40 	movwne	r0, #6720	; 0x1a40
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1f94:	051a0000 	ldreq	r0, [sl, #-0]
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1f98:	3a080300 	bcc	202ba0 <__ccfg+0x1e2bf8>
    1f9c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1fa0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	plugins [ord] = pl;
    1fa4:	1b000006 	blne	1fc4 <tcv_rnp+0xc>
	return 0;
    1fa8:	08030005 	stmdaeq	r3, {r0, r2}
		return ERROR;
    1fac:	0b3b0b3a 	bleq	ec4c9c <__ccfg+0xea4cf4>
}
    1fb0:	13490b39 	movtne	r0, #39737	; 0x9b39
    1fb4:	00000a02 	andeq	r0, r0, r2, lsl #20
	verify_fds (fd, "tcv10");
    1fb8:	0000181c 	andeq	r1, r0, ip, lsl r8
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    1fbc:	00341d00 	eorseq	r1, r4, r0, lsl #26
	verify_fds (fd, "tcv10");
    1fc0:	0b3a0e03 	bleq	e857d4 <__ccfg+0xe6582c>
    1fc4:	0b390b3b 	bleq	e44cb8 <__ccfg+0xe24d10>
    1fc8:	06021349 	streq	r1, [r2], -r9, asr #6
	verify_plg (b, tcv_frm, "tcv11");
    1fcc:	341e0000 	ldrcc	r0, [lr], #-0
	b = q_first (rq);
    1fd0:	3a080300 	bcc	202bd8 <__ccfg+0x1e2c30>
	if (q_end (b, rq)) {
    1fd4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (state != WNONE) {
    1fd8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1fdc:	1f000006 	svcne	0x00000006
			when (rq, state);
    1fe0:	08030034 	stmdaeq	r3, {r2, r4, r5}
			release;
    1fe4:	0b3b0b3a 	bleq	ec4cd4 <__ccfg+0xea4d2c>
	deq (b);	// Dequeue the packet ...
    1fe8:	13490b39 	movtne	r0, #39737	; 0x9b39
    1fec:	00000a02 	andeq	r0, r0, r2, lsl #20
	p = ((address)(b + 1));
    1ff0:	01110100 	tsteq	r1, r0, lsl #2
	verify_plg (b, tcv_frm, "tcv11");
    1ff4:	0b130e25 	bleq	4c5890 <__ccfg+0x4a58e8>
    1ff8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1ffc:	01110655 	tsteq	r1, r5, asr r6
    2000:	00000610 	andeq	r0, r0, r0, lsl r6
    2004:	0b002402 	bleq	b014 <__exidx_end+0x55f0>
    2008:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    200c:	0300000e 	movweq	r0, #14
    2010:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2014:	0b3b0b3a 	bleq	ec4d04 <__ccfg+0xea4d5c>
    2018:	13490b39 	movtne	r0, #39737	; 0x9b39
	b->u.pointers.tail =
    201c:	24040000 	strcs	r0, [r4], #-0
}
    2020:	3e0b0b00 	vmlacc.f64	d0, d11, d0
		return NULL;
    2024:	0008030b 	andeq	r0, r8, fp, lsl #6
    2028:	01130500 	tsteq	r3, r0, lsl #10
    202c:	0b0b0e03 	bleq	2c5840 <__ccfg+0x2a5898>
    2030:	0b3b0b3a 	bleq	ec4d20 <__ccfg+0xea4d78>
    2034:	00001301 	andeq	r1, r0, r1, lsl #6
	verify_fds (fd, "tcv16");
    2038:	03000d06 	movweq	r0, #3334	; 0xd06
								Boolean urg) {
    203c:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
    2040:	000c340b 	andeq	r3, ip, fp, lsl #8
	verify_fds (fd, "tcv16");
    2044:	000f0700 	andeq	r0, pc, r0, lsl #14
    2048:	00000b0b 	andeq	r0, r0, fp, lsl #22
    204c:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
	verify_pld (s, tcv_frm, "tcv17");
    2050:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2054:	13490035 	movtne	r0, #36917	; 0x9035
    2058:	130a0000 	movwne	r0, #40960	; 0xa000
    205c:	3a0b0b01 	bcc	2c4c68 <__ccfg+0x2a4cc0>
    2060:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2064:	0013010b 	andseq	r0, r3, fp, lsl #2
    2068:	000d0b00 	andeq	r0, sp, r0, lsl #22
    206c:	0b3a0e03 	bleq	e85880 <__ccfg+0xe658d8>
	ptrs.head = (word) fd;
    2070:	0b390b3b 	bleq	e44d64 <__ccfg+0xe24dbc>
	ptrs.tail = (word) urg;
    2074:	0b0b1349 	bleq	2c6da0 <__ccfg+0x2a6df8>
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    2078:	0b0c0b0d 	bleq	304cb4 <__ccfg+0x2e4d0c>
    207c:	00000b38 	andeq	r0, r0, r8, lsr fp
		if (state != WNONE) {
    2080:	03000d0c 	movweq	r0, #3340	; 0xd0c
    2084:	3b0b3a0e 	blcc	2d08c4 <__ccfg+0x2b091c>
}
    2088:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			when (eid, state);
    208c:	000b3813 	andeq	r3, fp, r3, lsl r8
    2090:	00340d00 	eorseq	r0, r4, r0, lsl #26
			release;
    2094:	0b3a0e03 	bleq	e858a8 <__ccfg+0xe65900>
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    2098:	0b390b3b 	bleq	e44d8c <__ccfg+0xe24de4>
    209c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1f80 <tcv_open+0xac>
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    20a0:	00000c3c 	andeq	r0, r0, ip, lsr ip
    20a4:	0b000f0e 	bleq	5ce4 <__exidx_end+0x2c0>
    20a8:	0013490b 	andseq	r4, r3, fp, lsl #18
    20ac:	01010f00 	tsteq	r1, r0, lsl #30
    20b0:	13011349 	movwne	r1, #4937	; 0x1349
    20b4:	21100000 	tstcs	r0, r0
		if (state != WNONE) {
    20b8:	11000000 	mrsne	r0, (UNDEF: 0)
    20bc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
			tmwait (state);
    20c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    20c4:	13490b39 	movtne	r0, #39737	; 0x9b39
	b->attributes = s->attpattern;
    20c8:	15120000 	ldrne	r0, [r2, #-0]
		b->attributes.b.urgent = 1;
    20cc:	010c2701 	tsteq	ip, r1, lsl #14
    20d0:	13000013 	movwne	r0, #19
	b->u.pointers.head = ptrs.head;
    20d4:	13490005 	movtne	r0, #36869	; 0x9005
	b->u.pointers.tail = length;
    20d8:	34140000 	ldrcc	r0, [r4], #-0
	return (address) (b + 1);
    20dc:	3a0e0300 	bcc	382ce4 <__ccfg+0x362d3c>
    20e0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    20e4:	3f13490b 	svccc	0x0013490b
    20e8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    20ec:	01131500 	tsteq	r3, r0, lsl #10
    20f0:	0b3a0b0b 	bleq	e84d24 <__ccfg+0xe64d7c>
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    20f4:	0b39053b 	bleq	e435e8 <__ccfg+0xe23640>
	if (len >= b->u.pointers.tail)
    20f8:	00001301 	andeq	r1, r0, r1, lsl #6
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    20fc:	03000d16 	movweq	r0, #3350	; 0xd16
    2100:	3b0b3a0e 	blcc	2d0940 <__ccfg+0x2b0998>
	if (len > 0) {
    2104:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		memcpy ((char*)buf, ((char*)p) + b->u.pointers.head, len);
    2108:	000b3813 	andeq	r3, fp, r3, lsl r8
    210c:	01131700 	tsteq	r3, r0, lsl #14
    2110:	0b0b0e03 	bleq	2c5924 <__ccfg+0x2a597c>
		b->u.pointers.tail -= len;
    2114:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2118:	13010b39 	movwne	r0, #6969	; 0x1b39
    211c:	21180000 	tstcs	r8, r0
		b->u.pointers.head += len;
    2120:	2f134900 	svccs	0x00134900
    2124:	1900000b 	stmdbne	r0, {r0, r1, r3}
    2128:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2078 <tcv_wnps+0x40>
}
    212c:	0b3a0e03 	bleq	e85940 <__ccfg+0xe65998>
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2130:	0b390b3b 	bleq	e44e24 <__ccfg+0xe24e7c>
    2134:	13490c27 	movtne	r0, #39975	; 0x9c27
    2138:	01120111 	tsteq	r2, r1, lsl r1
	verify_fph (phy, "tcv23");
    213c:	13010a40 	movwne	r0, #6720	; 0x1a40
    2140:	051a0000 	ldreq	r0, [sl, #-0]
    2144:	3a080300 	bcc	202d4c <__ccfg+0x1e2da4>
    2148:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    214c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	return (physical [phy]) (opt, arg);
    2150:	1b000006 	blne	2170 <tcv_control+0x14>
    2154:	08030005 	stmdaeq	r3, {r0, r2}
    2158:	0b3b0b3a 	bleq	ec4e48 <__ccfg+0xea4ea0>
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    215c:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (opt < 0) {
    2160:	00000a02 	andeq	r0, r0, r2, lsl #20
		if (fd < 0)
    2164:	0000181c 	andeq	r1, r0, ip, lsl r8
		if (opt == PHYSOPT_PLUGINFO) {
    2168:	00341d00 	eorseq	r1, r4, r0, lsl #26
			if (fd >= TCV_MAX_PLUGS)
    216c:	0b3a0e03 	bleq	e85980 <__ccfg+0xe659d8>
			if ((p = plugins [fd]) == NULL)
    2170:	0b390b3b 	bleq	e44e64 <__ccfg+0xe24ebc>
    2174:	06021349 	streq	r1, [r2], -r9, asr #6
}
    2178:	341e0000 	ldrcc	r0, [lr], #-0
		if (fd >= TCV_MAX_PHYS)
    217c:	3a080300 	bcc	202d84 <__ccfg+0x1e2ddc>
		return physinfo [fd];
    2180:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2184:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	verify_fds (fd, "tcv22");
    2188:	0000000a 	andeq	r0, r0, sl
    218c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2190:	030b130e 	movweq	r1, #45838	; 0xb30e
    2194:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2198:	10011106 	andne	r1, r1, r6, lsl #2
}
    219c:	02000006 	andeq	r0, r0, #6
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    21a0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    21a4:	0b3b0b3a 	bleq	ec4e94 <__ccfg+0xea4eec>
			return 0;
    21a8:	13490b39 	movtne	r0, #39737	; 0x9b39
    21ac:	24030000 	strcs	r0, [r3], #-0
    21b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    21b4:	000e030b 	andeq	r0, lr, fp, lsl #6
    21b8:	00260400 	eoreq	r0, r6, r0, lsl #8
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    21bc:	00001349 	andeq	r1, r0, r9, asr #6
    21c0:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
	if (dsp != TCV_DSP_PASS) {
    21c4:	06000013 			; <UNDEFINED> instruction: 0x06000013
		if (ses == NONE)
    21c8:	0b0b0024 	bleq	2c2260 <__ccfg+0x2a22b8>
			syserror (EREQPAR, "tcv26");
    21cc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
		verify_fds (ses, "tcv27");
    21d0:	16070000 	strne	r0, [r7], -r0
    21d4:	3a0e0300 	bcc	382ddc <__ccfg+0x362e34>
    21d8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    21dc:	0013490b 	andseq	r4, r3, fp, lsl #18
    21e0:	01170800 	tsteq	r7, r0, lsl #16
		if ((p = apb (size)) != NULL) {
    21e4:	0b3a0b0b 	bleq	e84e18 <__ccfg+0xe64e70>
    21e8:	0b390b3b 	bleq	e44edc <__ccfg+0xe24f34>
		return NULL;
    21ec:	00001301 	andeq	r1, r0, r1, lsl #6
			p->attributes = descriptors [ses] -> attpattern;
    21f0:	03000d09 	movweq	r0, #3337	; 0xd09
			dispose (p, dsp);
    21f4:	3b0b3a0e 	blcc	2d0a34 <__ccfg+0x2b0a8c>
			p->attributes = descriptors [ses] -> attpattern;
    21f8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			p->attributes.b.outgoing = 0;
    21fc:	0a000013 	beq	2250 <tcvphy_reg+0x2c>
			dispose (p, dsp);
    2200:	13490101 	movtne	r0, #37121	; 0x9101
			return (address)(p + 1);
    2204:	00001301 	andeq	r1, r0, r1, lsl #6
    2208:	4900210b 	stmdbmi	r0, {r0, r1, r3, r8, sp}
	if ((p = apb (size)) != NULL)
    220c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2210:	01130c00 	tsteq	r3, r0, lsl #24
		return (address)(p + 1);
    2214:	0b3a0b0b 	bleq	e84e48 <__ccfg+0xe64ea0>
    2218:	0b390b3b 	bleq	e44f0c <__ccfg+0xe24f64>
    221c:	00001301 	andeq	r1, r0, r1, lsl #6
    2220:	03000d0d 	movweq	r0, #3341	; 0xd0d
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2224:	3b0b3a0e 	blcc	2d0a64 <__ccfg+0x2b0abc>
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2228:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    222c:	000b3813 	andeq	r3, fp, r3, lsl r8
    2230:	000f0e00 	andeq	r0, pc, r0, lsl #28
		syserror (EREQPAR, "tcv28");
    2234:	00000b0b 	andeq	r0, r0, fp, lsl #22
		syserror (EMALLOC, "tcv29");
    2238:	0301130f 	movweq	r1, #4879	; 0x130f
	physical [phy] = ps;
    223c:	3a0b0b0e 	bcc	2c4e7c <__ccfg+0x2a4ed4>
	physinfo [phy] = info;
    2240:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2244:	0013010b 	andseq	r0, r3, fp, lsl #2
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2248:	000d1000 	andeq	r1, sp, r0
    224c:	0b3a0803 	bleq	e84260 <__ccfg+0xe642b8>
    2250:	0b390b3b 	bleq	e44f44 <__ccfg+0xe24f9c>
		syserror (EMALLOC, "tcv29");
    2254:	0b381349 	bleq	e06f80 <__ccfg+0xde6fd8>
    2258:	0f110000 	svceq	0x00110000
	q_init (q);
    225c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
}
    2260:	12000013 	andne	r0, r0, #19
    2264:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2268:	0b3a050b 	bleq	e8369c <__ccfg+0xe636f4>
    226c:	0b390b3b 	bleq	e44f60 <__ccfg+0xe24fb8>
    2270:	00001301 	andeq	r1, r0, r1, lsl #6
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2274:	03000d13 	movweq	r0, #3347	; 0xd13
	verify_fph (phy, "tcv30");
    2278:	3b0b3a0e 	blcc	2d0ab8 <__ccfg+0x2b0b10>
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    227c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2280:	00053813 	andeq	r3, r5, r3, lsl r8
	verify_fph (phy, "tcv30");
    2284:	00151400 	andseq	r1, r5, r0, lsl #8
    2288:	00000c27 	andeq	r0, r0, r7, lsr #24
    228c:	27011515 	smladcs	r1, r5, r5, r1
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2290:	0113490c 	tsteq	r3, ip, lsl #18
    2294:	16000013 			; <UNDEFINED> instruction: 0x16000013
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2298:	13490005 	movtne	r0, #36869	; 0x9005
    229c:	13170000 	tstne	r7, #0
		if (plugins [plg] == NULL)
    22a0:	0b0e0301 	bleq	382eac <__ccfg+0x362f04>
    22a4:	3b0b3a05 	blcc	2d0ac0 <__ccfg+0x2b0b18>
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    22a8:	010b3905 	tsteq	fp, r5, lsl #18
}
    22ac:	18000013 	stmdane	r0, {r0, r1, r4}
    22b0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    22b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    22b8:	13490b39 	movtne	r0, #39737	; 0x9b39
    22bc:	00000b38 	andeq	r0, r0, r8, lsr fp
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    22c0:	03000d19 	movweq	r0, #3353	; 0xd19
    22c4:	3b0b3a0e 	blcc	2d0b04 <__ccfg+0x2b0b5c>
    22c8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    22cc:	00053813 	andeq	r3, r5, r3, lsl r8
    22d0:	01131a00 	tsteq	r3, r0, lsl #20
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    22d4:	0b0b0e03 	bleq	2c5ae8 <__ccfg+0x2a5b40>
	len -= (ap.head + ap.tail);
    22d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    22dc:	13010b39 	movwne	r0, #6969	; 0x1b39
    22e0:	131b0000 	tstne	fp, #0
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    22e4:	3a0b0b01 	bcc	2c4ef0 <__ccfg+0x2a4f48>
    22e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    22ec:	0013010b 	andseq	r0, r3, fp, lsl #2
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    22f0:	01171c00 	tsteq	r7, r0, lsl #24
    22f4:	0b3a0b0b 	bleq	e84f28 <__ccfg+0xe64f80>
    22f8:	0b39053b 	bleq	e437ec <__ccfg+0xe23844>
	return 1;
    22fc:	00001301 	andeq	r1, r0, r1, lsl #6
    2300:	03000d1d 	movweq	r0, #3357	; 0xd1d
    2304:	3b0b3a0e 	blcc	2d0b44 <__ccfg+0x2b0b9c>
    2308:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    230c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
	verify_fph (phy, "tcv32");
    2310:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    2314:	00000c3c 	andeq	r0, r0, ip, lsr ip
    2318:	2701151f 	smladcs	r1, pc, r5, r1	; <UNPREDICTABLE>
    231c:	0013010c 	andseq	r0, r3, ip, lsl #2
    2320:	00342000 	eorseq	r2, r4, r0
    2324:	0b3a0e03 	bleq	e85b38 <__ccfg+0xe65b90>
	oq = oqueues [phy];
    2328:	0b39053b 	bleq	e4381c <__ccfg+0xe23874>
	b = q_first (oq);
    232c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2210 <tcvp_new+0x54>
	if (q_end (b, oq)) {
    2330:	00000c3c 	andeq	r0, r0, ip, lsr ip
	*len = b->length;
    2334:	03000d21 	movweq	r0, #3361	; 0xd21
	deq (b);	// Dequeue the packet ...
    2338:	3b0b3a0e 	blcc	2d0b78 <__ccfg+0x2b0bd0>
}
    233c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		return NULL;
    2340:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    2344:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    2348:	2200000b 	andcs	r0, r0, #11
    234c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	verify_fph (phy, "tcv33");
    2350:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2354:	13490b39 	movtne	r0, #39737	; 0x9b39
    2358:	0b0d0b0b 	bleq	344f8c <__ccfg+0x324fe4>
    235c:	0b380b0c 	bleq	e04f94 <__ccfg+0xde4fec>
    2360:	34230000 	strtcc	r0, [r3], #-0
    2364:	3a0e0300 	bcc	382f6c <__ccfg+0x362fc4>
	oq = oqueues [phy];
    2368:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	b = q_first (oq);
    236c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		return NULL;
    2370:	2400000a 	strcs	r0, [r0], #-10
	return (address)(b + 1);
    2374:	13490021 	movtne	r0, #36897	; 0x9021
}
    2378:	0000052f 	andeq	r0, r0, pc, lsr #10
    237c:	03003425 	movweq	r3, #1061	; 0x425
    2380:	3b0b3a0e 	blcc	2d0bc0 <__ccfg+0x2b0c18>
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    2384:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	verify_plg (b, tcv_xmt, "tcv34");
    2388:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	hblock_t *b = header (pkt);
    238c:	2600000c 	strcs	r0, [r0], -ip
	verify_plg (b, tcv_xmt, "tcv34");
    2390:	00000021 	andeq	r0, r0, r1, lsr #32
    2394:	03003427 	movweq	r3, #1063	; 0x427
    2398:	3b0b3a0e 	blcc	2d0bd8 <__ccfg+0x2b0c30>
    239c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    23a0:	28000013 	stmdacs	r0, {r0, r1, r4}
    23a4:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 22f4 <tcvphy_rcv+0x80>
    23a8:	0b3a0e03 	bleq	e85bbc <__ccfg+0xe65c14>
	dispose (b, plugins [b->attributes.b.plugin] ->
    23ac:	0b39053b 	bleq	e438a0 <__ccfg+0xe238f8>
}
    23b0:	01110c27 	tsteq	r1, r7, lsr #24
	dispose (b, plugins [b->attributes.b.plugin] ->
    23b4:	0a400112 	beq	1002804 <__ccfg+0xfe285c>
    23b8:	00001301 	andeq	r1, r0, r1, lsl #6
    23bc:	03000529 	movweq	r0, #1321	; 0x529
}
    23c0:	3b0b3a08 	blcc	2d0be8 <__ccfg+0x2b0c40>
    while(1)
    23c4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
{
    23c8:	00060213 	andeq	r0, r6, r3, lsl r2
    SetupTrimDevice();
    23cc:	011d2a00 	tsteq	sp, r0, lsl #20
    pui32Src = &_etext;
    23d0:	01521331 	cmpeq	r2, r1, lsr r3
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    23d4:	0b580655 	bleq	1603d30 <__ccfg+0x15e3d88>
    __asm("    ldr     r0, =_bss\n"
    23d8:	0b570559 	bleq	15c3944 <__ccfg+0x15a399c>
    23dc:	00001301 	andeq	r1, r0, r1, lsl #6
    23e0:	55010b2b 	strpl	r0, [r1, #-2859]	; 0xfffff4d5
    23e4:	2c000006 	stccs	0, cr0, [r0], {6}
    23e8:	13310034 	teqne	r1, #52	; 0x34
   main();
    23ec:	342d0000 	strtcc	r0, [sp], #-0
    FaultISR();
    23f0:	02133100 	andseq	r3, r3, #0, 2
        *pui32Dest++ = *pui32Src++;
    23f4:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
    23f8:	1331001d 	teqne	r1, #29
    23fc:	06550152 			; <UNDEFINED> instruction: 0x06550152
    2400:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    2404:	00000b57 	andeq	r0, r0, r7, asr fp
    2408:	03012e2f 	movweq	r2, #7727	; 0x1e2f
    240c:	3b0b3a0e 	blcc	2d0c4c <__ccfg+0x2b0ca4>
    2410:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
static byte get_byte () {
    2414:	1113490c 	tstne	r3, ip, lsl #18
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2418:	40011201 	andmi	r1, r1, r1, lsl #4
    241c:	0013010a 	andseq	r0, r3, sl, lsl #2
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2420:	00343000 	eorseq	r3, r4, r0
    2424:	0b3a0803 	bleq	e84438 <__ccfg+0xe64490>
		if (ee_inp)
    2428:	0b39053b 	bleq	e4391c <__ccfg+0xe23974>
			b |= 1;
    242c:	06021349 	streq	r1, [r2], -r9, asr #6
    2430:	0a310000 	beq	c42438 <__ccfg+0xc22490>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2434:	3a0e0300 	bcc	38303c <__ccfg+0x363094>
	for (b = 0, i = 0; i < 8; i++) {
    2438:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    243c:	0001110b 	andeq	r1, r1, fp, lsl #2
    2440:	010b3200 	mrseq	r3, R11_fiq
    2444:	01120111 	tsteq	r2, r1, lsl r1
static void put_byte (byte b) {
    2448:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
    244c:	3a0e0301 	bcc	383058 <__ccfg+0x3630b0>
    2450:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2454:	010b200b 	tsteq	fp, fp
		if (b & 0x80)
    2458:	34000013 	strcc	r0, [r0], #-19	; 0xffffffed
    245c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2460:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	for (i = 0; i < 8; i++) {
    2464:	13490b39 	movtne	r0, #39737	; 0x9b39
		b <<= 1;
    2468:	05350000 	ldreq	r0, [r5, #-0]!
	for (i = 0; i < 8; i++) {
    246c:	3a0e0300 	bcc	383074 <__ccfg+0x3630cc>
}
    2470:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2474:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2478:	36000006 	strcc	r0, [r0], -r6
    247c:	1331001d 	teqne	r1, #29
	put_byte (cmd);
    2480:	01120111 	tsteq	r2, r1, lsl r1
    2484:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
}
    2488:	00000b57 	andeq	r0, r0, r7, asr fp
    248c:	55010b37 	strpl	r0, [r1, #-2871]	; 0xfffff4c9
static void wwait (word st, word del) {
    2490:	00130106 	andseq	r0, r3, r6, lsl #2
    2494:	011d3800 	tsteq	sp, r0, lsl #16
    2498:	01111331 	tsteq	r1, r1, lsr r3
	while (dopen && (rdsr () & 1)) {
    249c:	0b580112 	bleq	16028ec <__ccfg+0x15e2944>
    24a0:	0b570559 	bleq	15c3a0c <__ccfg+0x15a3a64>
    24a4:	00001301 	andeq	r1, r0, r1, lsl #6
    24a8:	31000539 	tstcc	r0, r9, lsr r5
	put_byte (CMD_RDSR);
    24ac:	3a000013 	bcc	2500 <ready+0x1c>
	r = get_byte ();
    24b0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    24b4:	06550152 			; <UNDEFINED> instruction: 0x06550152
	while (dopen && (rdsr () & 1)) {
    24b8:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
}
    24bc:	00000b57 	andeq	r0, r0, r7, asr fp
		if (st == WNONE)
    24c0:	03012e3b 	movweq	r2, #7739	; 0x1e3b
    24c4:	3b0b3a0e 	blcc	2d0d04 <__ccfg+0x2b0d5c>
			mdelay (1);
    24c8:	110b3905 	tstne	fp, r5, lsl #18
    24cc:	40011201 	andmi	r1, r1, r1, lsl #4
			delay (del, st);
    24d0:	0013010a 	andseq	r0, r3, sl, lsl #2
    24d4:	002e3c00 	eoreq	r3, lr, r0, lsl #24
			release;
    24d8:	0b3a0e03 	bleq	e85cec <__ccfg+0xe65d44>
    24dc:	0b39053b 	bleq	e439d0 <__ccfg+0xe23a28>
    24e0:	00000b20 	andeq	r0, r0, r0, lsr #22
static void ready () {
    24e4:	03002e3d 	movweq	r2, #3645	; 0xe3d
	if (dopen) {
    24e8:	3b0b3a0e 	blcc	2d0d28 <__ccfg+0x2b0d80>
		wwait (WNONE, 1);
    24ec:	110b3905 	tstne	fp, r5, lsl #18
    24f0:	40011201 	andmi	r1, r1, r1, lsl #4
    24f4:	3e00000a 	cdpcc	0, 0, cr0, cr0, cr10, {0}
	dstat = 0;
    24f8:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
}
    24fc:	0b3b0b3a 	bleq	ec51ec <__ccfg+0xea5244>
    2500:	0b200b39 	bleq	8051ec <__ccfg+0x7e5244>
    2504:	2e3f0000 	cdpcs	0, 3, cr0, cr15, cr0, {0}
	udelay (1);
    2508:	3a0e0301 	bcc	383114 <__ccfg+0x36316c>
    250c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	udelay (1);
    2510:	200c270b 	andcs	r2, ip, fp, lsl #14
		dopen = DOPEN_TEMP;
    2514:	0013010b 	andseq	r0, r3, fp, lsl #2
    2518:	00054000 	andeq	r4, r5, r0
    251c:	0b3a0803 	bleq	e84530 <__ccfg+0xe64588>
    2520:	0b390b3b 	bleq	e45214 <__ccfg+0xe2526c>
static void cclose () {
    2524:	00001349 	andeq	r1, r0, r9, asr #6
	if (dopen == DOPEN_TEMP) {
    2528:	03000541 	movweq	r0, #1345	; 0x541
    252c:	3b0b3a0e 	blcc	2d0d6c <__ccfg+0x2b0dc4>
		wwait (WNONE, 1);
    2530:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2534:	42000013 	andmi	r0, r0, #19
	cmd_0 (CMD_DP);
    2538:	08030034 	stmdaeq	r3, {r2, r4, r5}
    253c:	0b3b0b3a 	bleq	ec522c <__ccfg+0xea5284>
		dopen = 0;
    2540:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    2544:	2e430000 	cdpcs	0, 4, cr0, cr3, cr0, {0}
word ee_open () {
    2548:	3a0e0301 	bcc	383154 <__ccfg+0x3631ac>
	ready ();
    254c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	dopen = DOPEN_PERM;
    2550:	200c270b 	andcs	r2, ip, fp, lsl #14
    2554:	0013010b 	andseq	r0, r3, fp, lsl #2
}
    2558:	00054400 	andeq	r4, r5, r0, lsl #8
	if (dopen) {
    255c:	0b3a0e03 	bleq	e85d70 <__ccfg+0xe65dc8>
    2560:	0b39053b 	bleq	e43a54 <__ccfg+0xe23aac>
		dopen = DOPEN_TEMP;
    2564:	00001349 	andeq	r1, r0, r9, asr #6
		cclose ();
    2568:	03002e45 	movweq	r2, #3653	; 0xe45
}
    256c:	3b0b3a0e 	blcc	2d0dac <__ccfg+0x2b0e04>
int ser_out (word st, const char *m) {
    2570:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
	if ((prcs = running (__outserial)) != 0) {
    2574:	000b200c 	andeq	r2, fp, ip
    2578:	002e4600 	eoreq	r4, lr, r0, lsl #12
    257c:	0b3a0e03 	bleq	e85d90 <__ccfg+0xe65de8>
		join (prcs, st);
    2580:	0b390b3b 	bleq	e45274 <__ccfg+0xe252cc>
		release;
    2584:	0b200c27 	bleq	805628 <__ccfg+0x7e5680>
	if (*m)
    2588:	2e470000 	cdpcs	0, 4, cr0, cr7, cr0, {0}
		prcs = strlen (m) +1;
    258c:	11133101 	tstne	r3, r1, lsl #2
    2590:	40011201 	andmi	r1, r1, r1, lsl #4
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    2594:	0013010a 	andseq	r0, r3, sl, lsl #2
    2598:	00054800 	andeq	r4, r5, r0, lsl #16
    259c:	06021331 			; <UNDEFINED> instruction: 0x06021331
		umwait (st);
    25a0:	1d490000 	stclne	0, cr0, [r9, #-0]
    25a4:	11133101 	tstne	r3, r1, lsl #2
		prcs =  m [1] + 3;
    25a8:	58011201 	stmdapl	r1, {r0, r9, ip}
	if (*m)
    25ac:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
		strcpy (buf, m);
    25b0:	4a00000b 	bmi	25e4 <ser_in+0x8>
    25b4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
	if (runstrand (__outserial, buf) == 0) {
    25b8:	01120111 	tsteq	r2, r1, lsl r1
    25bc:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
		ufree (buf);
    25c0:	00000b57 	andeq	r0, r0, r7, asr fp
    25c4:	31012e4b 	tstcc	r1, fp, asr #28
		memcpy (buf, m, prcs);
    25c8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    25cc:	000a4001 	andeq	r4, sl, r1
    25d0:	00344c00 	eorseq	r4, r4, r0, lsl #24
}
    25d4:	061c1331 			; <UNDEFINED> instruction: 0x061c1331
    25d8:	01000000 	mrseq	r0, (UNDEF: 0)
int ser_in (word st, char *buf, int len) {
    25dc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    25e0:	0e030b13 	vmoveq.32	d3[0], r0
	if (len == 0)
    25e4:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
	if (__inpline == NULL) {
    25e8:	06100111 			; <UNDEFINED> instruction: 0x06100111
		if ((prcs = running (__inserial)) == 0) {
    25ec:	24020000 	strcs	r0, [r2], #-0
    25f0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
			prcs = runthread (__inserial);
    25f4:	000e030b 	andeq	r0, lr, fp, lsl #6
    25f8:	00160300 	andseq	r0, r6, r0, lsl #6
			if (prcs == 0) {
    25fc:	0b3a0e03 	bleq	e85e10 <__ccfg+0xe65e68>
				npwait (st);
    2600:	0b390b3b 	bleq	e452f4 <__ccfg+0xe2534c>
		release;
    2604:	00001349 	andeq	r1, r0, r9, asr #6
		join (prcs, st);
    2608:	0b002404 	bleq	b620 <__exidx_end+0x5bfc>
    260c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
	if (*__inpline == NULL) // bin cmd
    2610:	05000008 	streq	r0, [r0, #-8]
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2614:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
	if (prcs >= len)
    2618:	0b3a0b0b 	bleq	e8524c <__ccfg+0xe652a4>
		prcs = len-1;
    261c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
	memcpy (buf, __inpline, prcs);
    2620:	0d060000 	stceq	0, cr0, [r6, #-0]
    2624:	490e0300 	stmdbmi	lr, {r8, r9}
    2628:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
	ufree (__inpline);
    262c:	0700000c 	streq	r0, [r0, -ip]
	__inpline = NULL;
    2630:	0b0b000f 	bleq	2c2674 <__ccfg+0x2a26cc>
	if (*buf) // if it's NULL, it's a bin cmd
    2634:	26080000 	strcs	r0, [r8], -r0
		buf [prcs] = '\0';
    2638:	00134900 	andseq	r4, r3, r0, lsl #18
}
    263c:	00350900 	eorseq	r0, r5, r0, lsl #18
		prcs = strlen (__inpline);
    2640:	00001349 	andeq	r1, r0, r9, asr #6
    2644:	0b000f0a 	bleq	6274 <__exidx_end+0x850>
		return 0;
    2648:	0013490b 	andseq	r4, r3, fp, lsl #18
    264c:	01130b00 	tsteq	r3, r0, lsl #22
    2650:	0b3a0b0b 	bleq	e85284 <__ccfg+0xe652dc>
int ser_outf (word st, const char *m, ...) {
    2654:	0b390b3b 	bleq	e45348 <__ccfg+0xe253a0>
    2658:	00001301 	andeq	r1, r0, r1, lsl #6
	if ((prcs = running (__outserial)) != 0) {
    265c:	03000d0c 	movweq	r0, #3340	; 0xd0c
    2660:	3b0b3a0e 	blcc	2d0ea0 <__ccfg+0x2b0ef8>
		join (prcs, st);
    2664:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2668:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
		release;
    266c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2670:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    2674:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2678:	0b3b0b3a 	bleq	ec5368 <__ccfg+0xea53c0>
		umwait (st);
    267c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2680:	00000b38 	andeq	r0, r0, r8, lsr fp
	if (runstrand (__outserial, buf) == 0) {
    2684:	0300340e 	movweq	r3, #1038	; 0x40e
    2688:	3b0b3a0e 	blcc	2d0ec8 <__ccfg+0x2b0f20>
    268c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		ufree (buf);
    2690:	3c0c3f13 	stccc	15, cr3, [ip], {19}
		npwait (st);
    2694:	0f00000c 	svceq	0x0000000c
}
    2698:	13490101 	movtne	r0, #37121	; 0x9101
    269c:	00001301 	andeq	r1, r0, r1, lsl #6
    26a0:	00002110 	andeq	r2, r0, r0, lsl r1
    26a4:	00161100 	andseq	r1, r6, r0, lsl #2
int ser_inf (word st, const char *fmt, ...) {
    26a8:	0b3a0e03 	bleq	e85ebc <__ccfg+0xe65f14>
    26ac:	0b39053b 	bleq	e43ba0 <__ccfg+0xe23bf8>
	if (fmt == NULL)
    26b0:	00001349 	andeq	r1, r0, r9, asr #6
	if (__inpline == NULL) {
    26b4:	27011512 	smladcs	r1, r2, r5, r1
		if ((prcs = running (__inserial)) == 0) {
    26b8:	0013010c 	andseq	r0, r3, ip, lsl #2
    26bc:	00051300 	andeq	r1, r5, r0, lsl #6
			prcs = runthread (__inserial);
    26c0:	00001349 	andeq	r1, r0, r9, asr #6
    26c4:	03003414 	movweq	r3, #1044	; 0x414
			if (prcs == 0) {
    26c8:	3b0b3a0e 	blcc	2d0f08 <__ccfg+0x2b0f60>
				npwait (st);
    26cc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		release;
    26d0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
		join (prcs, st);
    26d4:	1500000c 	strne	r0, [r0, #-12]
    26d8:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
	va_start (ap, fmt);
    26dc:	13011349 	movwne	r1, #4937	; 0x1349
	prcs = vscan (__inpline, fmt, ap);
    26e0:	13160000 	tstne	r6, #0
    26e4:	3a0b0b01 	bcc	2c52f0 <__ccfg+0x2a5348>
	ufree (__inpline);
    26e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	__inpline = NULL;
    26ec:	0013010b 	andseq	r0, r3, fp, lsl #2
}
    26f0:	000d1700 	andeq	r1, sp, r0, lsl #14
    26f4:	0b3a0e03 	bleq	e85f08 <__ccfg+0xe65f60>
    26f8:	0b39053b 	bleq	e43bec <__ccfg+0xe23c44>
		return 0;
    26fc:	0b381349 	bleq	e07428 <__ccfg+0xde7480>
    2700:	13180000 	tstne	r8, #0
    2704:	0b0e0301 	bleq	383310 <__ccfg+0x363368>
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2708:	3b0b3a0b 	blcc	2d0f3c <__ccfg+0x2b0f94>
    270c:	010b3905 	tsteq	fp, r5, lsl #18
    2710:	19000013 	stmdbne	r0, {r0, r1, r4}
	RF_cmdFs.frequency = 
    2714:	13490021 	movtne	r0, #36897	; 0x9021
}
    2718:	00000b2f 	andeq	r0, r0, pc, lsr #22
    271c:	0300341a 	movweq	r3, #1050	; 0x41a
    2720:	3b0b3a0e 	blcc	2d0f60 <__ccfg+0x2b0fb8>
    2724:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
static int option (int opt, address val) {
    2728:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
    272c:	1b00000a 	blne	275c <option+0x34>
    2730:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2734:	0b3b0b3a 	bleq	ec5424 <__ccfg+0xea547c>
    2738:	13490b39 	movtne	r0, #39737	; 0x9b39
    273c:	00000a02 	andeq	r0, r0, r2, lsl #20
    2740:	03012e1c 	movweq	r2, #7708	; 0x1e1c
    2744:	3b0b3a0e 	blcc	2d0f84 <__ccfg+0x2b0fdc>
    2748:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    274c:	1113490c 	tstne	r3, ip, lsl #18
    2750:	40011201 	andmi	r1, r1, r1, lsl #4
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    2754:	0013010a 	andseq	r0, r3, sl, lsl #2
    2758:	00051d00 	andeq	r1, r5, r0, lsl #26
			goto RVal;
    275c:	0b3a0803 	bleq	e84770 <__ccfg+0xe647c8>
			_BIS (dstate, DSTATE_RXON);
    2760:	0b390b3b 	bleq	e45454 <__ccfg+0xe254ac>
    2764:	06021349 	streq	r1, [r2], -r9, asr #6
	int ret = 0;
    2768:	051e0000 	ldreq	r0, [lr, #-0]
			p_trigger (drvprcs, qevent);
    276c:	3a0e0300 	bcc	383374 <__ccfg+0x3633cc>
    2770:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2774:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2778:	1f00000a 	svcne	0x0000000a
    277c:	08030005 	stmdaeq	r3, {r0, r2}
    2780:	0b3b0b3a 	bleq	ec5470 <__ccfg+0xea54c8>
    2784:	13490b39 	movtne	r0, #39737	; 0x9b39
    2788:	00000a02 	andeq	r0, r0, r2, lsl #20
    278c:	03012e20 	movweq	r2, #7712	; 0x1e20
    2790:	3b0b3a0e 	blcc	2d0fd0 <__ccfg+0x2b1028>
}
    2794:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
			_BIC (dstate, DSTATE_RXON);
    2798:	2013490c 	andscs	r4, r3, ip, lsl #18
    279c:	0013010b 	andseq	r0, r3, fp, lsl #2
			statid = (val == NULL) ? 0 : *val;
    27a0:	00052100 	andeq	r2, r5, r0, lsl #2
    27a4:	0b3a0803 	bleq	e847b8 <__ccfg+0xe64810>
	int ret = 0;
    27a8:	0b390b3b 	bleq	e4549c <__ccfg+0xe254f4>
			ret = (int) statid;
    27ac:	00001349 	andeq	r1, r0, r9, asr #6
	if (val != NULL)
    27b0:	03000522 	movweq	r0, #1314	; 0x522
		*val = ret;
    27b4:	3b0b3a0e 	blcc	2d0ff4 <__ccfg+0x2b104c>
			ret = rbuffl + 2;
    27b8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    27bc:	23000013 	movwcs	r0, #19
			if (val != NULL) {
    27c0:	08030034 	stmdaeq	r3, {r2, r4, r5}
				memcpy (val, &rxstat,
    27c4:	0b3b0b3a 	bleq	ec54b4 <__ccfg+0xea550c>
    27c8:	13490b39 	movtne	r0, #39737	; 0x9b39
				memset (&rxstat, 0, 
    27cc:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
    27d0:	11133101 	tstne	r3, r1, lsl #2
			if (val == NULL)
    27d4:	40011201 	andmi	r1, r1, r1, lsl #4
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    27d8:	2500000a 	strcs	r0, [r0, #-10]
    27dc:	13310005 	teqne	r1, #5
				utimer_set (bckf_timer, *val);
    27e0:	00000602 	andeq	r0, r0, r2, lsl #12
    27e4:	31003426 	tstcc	r0, r6, lsr #8
    27e8:	27000013 	smladcs	r0, r3, r0, r0
			for (ret = 0; ret < 8; ret++)
    27ec:	1331011d 	teqne	r1, #1073741831	; 0x40000007
				if (RF_cmdPropRadioDivSetup.txPower
    27f0:	01120111 	tsteq	r2, r1, lsl r1
					== patable [ret])
    27f4:	0b590b58 	bleq	164555c <__ccfg+0x16255b4>
				if (RF_cmdPropRadioDivSetup.txPower
    27f8:	00000b57 	andeq	r0, r0, r7, asr fp
			for (ret = 0; ret < 8; ret++)
    27fc:	31000528 	tstcc	r0, r8, lsr #10
    2800:	000a0213 	andeq	r0, sl, r3, lsl r2
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2804:	00052900 	andeq	r2, r5, r0, lsl #18
    2808:	00001331 	andeq	r1, r0, r1, lsr r3
    280c:	01110100 	tsteq	r1, r0, lsl #2
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2810:	0b130e25 	bleq	4c60ac <__ccfg+0x4a6104>
    2814:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
			_BIS (dstate, DSTATE_IRST);
    2818:	01110655 	tsteq	r1, r5, asr r6
    281c:	00000610 	andeq	r0, r0, r0, lsl r6
    2820:	0b002402 	bleq	b830 <__exidx_end+0x5e0c>
			ret = (int) channel;
    2824:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
			goto RVal;
    2828:	0300000e 	movweq	r0, #14
				(*val > 7) ? 7 : *val;
    282c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2830:	0b3b0b3a 	bleq	ec5520 <__ccfg+0xea5578>
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2834:	13490b39 	movtne	r0, #39737	; 0x9b39
    2838:	24040000 	strcs	r0, [r4], #-0
			plugch ();
    283c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
			_BIS (dstate, DSTATE_IRST);
    2840:	0008030b 	andeq	r0, r8, fp, lsl #6
    2844:	00260500 	eoreq	r0, r6, r0, lsl #10
			ret = (int) vrate;
    2848:	00001349 	andeq	r1, r0, r9, asr #6
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    284c:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
    2850:	07000013 	smladeq	r0, r3, r0, r0
    2854:	0b0b0113 	bleq	2c2ca8 <__ccfg+0x2a2d00>
    2858:	0b3b0b3a 	bleq	ec5548 <__ccfg+0xea55a0>
    285c:	13010b39 	movwne	r0, #6969	; 0x1b39
    2860:	0d080000 	stceq	0, cr0, [r8, #-0]
    2864:	3a0e0300 	bcc	38346c <__ccfg+0x3634c4>
    2868:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    286c:	0b13490b 	bleq	4d4ca0 <__ccfg+0x4b4cf8>
    2870:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    2874:	000b380b 	andeq	r3, fp, fp, lsl #16
    2878:	000d0900 	andeq	r0, sp, r0, lsl #18
			syserror (EREQPAR, "cc13 op");
    287c:	0b3a0e03 	bleq	e86090 <__ccfg+0xe660e8>
    2880:	0b390b3b 	bleq	e45574 <__ccfg+0xe255cc>
    2884:	0b381349 	bleq	e075b0 <__ccfg+0xde7608>
    2888:	340a0000 	strcc	r0, [sl], #-0
    288c:	3a0e0300 	bcc	383494 <__ccfg+0x3634ec>
    2890:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2894:	3f13490b 	svccc	0x0013490b
    2898:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    289c:	000f0b00 	andeq	r0, pc, r0, lsl #22
    28a0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    28a4:	010c0000 	mrseq	r0, (UNDEF: 12)
    28a8:	01134901 	tsteq	r3, r1, lsl #18
    28ac:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    28b0:	00000021 	andeq	r0, r0, r1, lsr #32
    28b4:	0300160e 	movweq	r1, #1550	; 0x60e
static void issue_cmd (lword cmd) {
    28b8:	3b0b3a0e 	blcc	2d10f8 <__ccfg+0x2b1150>
    28bc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    28c0:	0f000013 	svceq	0x00000013
    28c4:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    28c8:	00001301 	andeq	r1, r0, r1, lsl #6
		if (res != 0x86)
    28cc:	49000510 	stmdbmi	r0, {r4, r8, sl}
			syserror (EHARDWARE, "hang ic0");
    28d0:	11000013 	tstne	r0, r3, lsl r0
    28d4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		if (cnt-- == 0) {
    28d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			diag ("HUP %lx %lx", cmd, res);
    28dc:	13490b39 	movtne	r0, #39737	; 0x9b39
    28e0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
			syserror (EHARDWARE, "hang ic0");
    28e4:	13120000 	tstne	r2, #0
		udelay (1);
    28e8:	3a0b0b01 	bcc	2c54f4 <__ccfg+0x2a554c>
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    28ec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    28f0:	0013010b 	andseq	r0, r3, fp, lsl #2
    28f4:	000d1300 	andeq	r1, sp, r0, lsl #6
    28f8:	0b3a0e03 	bleq	e8610c <__ccfg+0xe66164>
    28fc:	0b39053b 	bleq	e43df0 <__ccfg+0xe23e48>
static void rx_de () {
    2900:	0b381349 	bleq	e0762c <__ccfg+0xde7684>
	if ((dstate & DSTATE_RXAC) == 0)
    2904:	13140000 	tstne	r4, #0
    2908:	0b0e0301 	bleq	383514 <__ccfg+0x36356c>
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    290c:	3b0b3a0b 	blcc	2d1140 <__ccfg+0x2b1198>
	_BIC (dstate, DSTATE_RXAC);
    2910:	010b3905 	tsteq	fp, r5, lsl #18
    2914:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
}
    2918:	13490021 	movtne	r0, #36897	; 0x9021
    291c:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2920:	3f012e16 	svccc	0x00012e16
static void rf_off () {
    2924:	3a0e030c 	bcc	38355c <__ccfg+0x3635b4>
	if ((dstate & DSTATE_RFON) == 0)
    2928:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    292c:	110c270b 	tstne	ip, fp, lsl #14
	IntDisable (INT_RFC_CPE_0);
    2930:	40011201 	andmi	r1, r1, r1, lsl #4
    2934:	0013010a 	andseq	r0, r3, sl, lsl #2
    2938:	00051700 	andeq	r1, r5, r0, lsl #14
	RFCAdi3VcoLdoVoltageMode (false);
    293c:	0b3a0e03 	bleq	e86150 <__ccfg+0xe661a8>
	RFCSynthPowerDown ();
    2940:	0b390b3b 	bleq	e45634 <__ccfg+0xe2568c>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2944:	06021349 	streq	r1, [r2], -r9, asr #6
    2948:	34180000 	ldrcc	r0, [r8], #-0
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    294c:	3a0e0300 	bcc	383554 <__ccfg+0x3635ac>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2950:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2954:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2958:	19000006 	stmdbne	r0, {r1, r2}
    295c:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    2960:	0b3b0b3a 	bleq	ec5650 <__ccfg+0xea56a8>
	_BIC (dstate, DSTATE_RFON);
    2964:	00000b39 	andeq	r0, r0, r9, lsr fp
    2968:	55010b1a 	strpl	r0, [r1, #-2842]	; 0xfffff4e6
}
    296c:	1b000006 	blne	298c <wait_cmd.constprop.0+0xc>
    2970:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2974:	0b3b0b3a 	bleq	ec5664 <__ccfg+0xea56bc>
    2978:	13490b39 	movtne	r0, #39737	; 0x9b39
    297c:	00000a02 	andeq	r0, r0, r2, lsl #20
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2980:	01110100 	tsteq	r1, r0, lsl #2
    2984:	0b130e25 	bleq	4c6220 <__ccfg+0x4a6278>
    2988:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
		if (cmd->status == tstat)
    298c:	01110655 	tsteq	r1, r5, asr r6
		if (timeout-- == 0) {
    2990:	00000610 	andeq	r0, r0, r0, lsl r6
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2994:	0b002402 	bleq	b9a4 <__exidx_end+0x5f80>
    2998:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    299c:	0300000e 	movweq	r0, #14
			syserror (EHARDWARE, "rt2");
    29a0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    29a4:	0b3b0b3a 	bleq	ec5694 <__ccfg+0xea56ec>
		udelay (1);
    29a8:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (cmd->status == tstat)
    29ac:	24040000 	strcs	r0, [r4], #-0
}
    29b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    29b4:	0008030b 	andeq	r0, r8, fp, lsl #6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    29b8:	00260500 	eoreq	r0, r6, r0, lsl #10
    29bc:	00001349 	andeq	r1, r0, r9, asr #6
static void rf_on () {
    29c0:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
    29c4:	07000013 	smladeq	r0, r3, r0, r0
	OSCHF_TurnOnXosc();
    29c8:	0b0b000f 	bleq	2c2a0c <__ccfg+0x2a2a64>
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    29cc:	00001349 	andeq	r1, r0, r9, asr #6
    29d0:	0b011308 	bleq	475f8 <__ccfg+0x27650>
    29d4:	3b0b3a0b 	blcc	2d1208 <__ccfg+0x2b1260>
    29d8:	010b390b 	tsteq	fp, fp, lsl #18
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    29dc:	09000013 	stmdbeq	r0, {r0, r1, r4}
    29e0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    29e4:	0b3b0b3a 	bleq	ec56d4 <__ccfg+0xea572c>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    29e8:	13490b39 	movtne	r0, #39737	; 0x9b39
	issue_cmd (
    29ec:	0b0d0b0b 	bleq	345620 <__ccfg+0x325678>
    29f0:	0b380b0c 	bleq	e05628 <__ccfg+0xde5680>
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    29f4:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    29f8:	3a0e0300 	bcc	383600 <__ccfg+0x363658>
    29fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
   pPatchTab[80] = 0;
    2a00:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
   } while (--nIterations);
    2a04:	0b00000b 	bleq	2a38 <rf_on.part.0+0x80>
   pPatchTab[53] = 2;
    2a08:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2a0c:	0b3b0b3a 	bleq	ec56fc <__ccfg+0xea5754>
   pPatchTab[55] = 3;
    2a10:	13490b39 	movtne	r0, #39737	; 0x9b39
   pPatchTab[110] = 4;
    2a14:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
   pPatchTab[107] = 5;
    2a18:	010c0000 	mrseq	r0, (UNDEF: 12)
   pPatchTab[65] = 6;
    2a1c:	01134901 	tsteq	r3, r1, lsl #18
    2a20:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
   pPatchTab[57] = 1;
    2a24:	00000021 	andeq	r0, r0, r1, lsr #32
   pIrqPatch[1] = _IRQ_PATCH_0;
    2a28:	0300160e 	movweq	r1, #1550	; 0x60e
   const uint32_t *pS = patchGenfskRfe;
    2a2c:	3b0b3a0e 	blcc	2d126c <__ccfg+0x2b12c4>
      t2 = *pS++;
    2a30:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
      t4 = *pS++;
    2a34:	0f000013 	svceq	0x00000013
      t6 = *pS++;
    2a38:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
      t8 = *pS++;
    2a3c:	00001301 	andeq	r1, r0, r1, lsl #6
      *pD++ = t1;
    2a40:	49000510 	stmdbmi	r0, {r4, r8, sl}
      *pD++ = t2;
    2a44:	11000013 	tstne	r0, r3, lsl r0
      *pD++ = t3;
    2a48:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
      *pD++ = t5;
    2a4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      *pD++ = t7;
    2a50:	13490b39 	movtne	r0, #39737	; 0x9b39
   } while (--nIterations);
    2a54:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2a58:	13120000 	tstne	r2, #0
      *pD++ = t8;
    2a5c:	3a0b0b01 	bcc	2c5668 <__ccfg+0x2a56c0>
   } while (--nIterations);
    2a60:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2a64:	0013010b 	andseq	r0, r3, fp, lsl #2
   *pD++ = t2;
    2a68:	000d1300 	andeq	r1, sp, r0, lsl #6
   *pD++ = t3;
    2a6c:	0b3a0e03 	bleq	e86280 <__ccfg+0xe662d8>
   *pD++ = t4;
    2a70:	0b39053b 	bleq	e43f64 <__ccfg+0xe23fbc>
   *pD++ = t5;
    2a74:	0b381349 	bleq	e077a0 <__ccfg+0xde77f8>
    2a78:	13140000 	tstne	r4, #0
	RFCAdi3VcoLdoVoltageMode (true);
    2a7c:	0b0e0301 	bleq	383688 <__ccfg+0x3636e0>
    2a80:	3b0b3a0b 	blcc	2d12b4 <__ccfg+0x2b130c>
       	RFCRfTrimSet (&rfTrim);
    2a84:	010b3905 	tsteq	fp, r5, lsl #18
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2a88:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    2a8c:	13490021 	movtne	r0, #36897	; 0x9021
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2a90:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2a94:	03003416 	movweq	r3, #1046	; 0x416
	issue_cmd ((lword)&cmd_srt);
    2a98:	3b0b3a0e 	blcc	2d12d8 <__ccfg+0x2b1330>
    2a9c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	issue_cmd ((lword)&RF_cmdFs);
    2aa0:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2aa4:	1700000a 	strne	r0, [r0, -sl]
    2aa8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 29f8 <rf_on.part.0+0x40>
    2aac:	0b3a0e03 	bleq	e862c0 <__ccfg+0xe66318>
	IntEnable (INT_RFC_CPE_0);
    2ab0:	0b390b3b 	bleq	e457a4 <__ccfg+0xe257fc>
	_BIC (dstate, DSTATE_IRST);
    2ab4:	01110c27 	tsteq	r1, r7, lsr #24
    2ab8:	0a400112 	beq	1002f08 <__ccfg+0xfe2f60>
    2abc:	05180000 	ldreq	r0, [r8, #-0]
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2ac0:	3a0e0300 	bcc	3836c8 <__ccfg+0x363720>
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2ac4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	IntEnable (INT_RFC_CPE_0);
    2ac8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2acc:	19000006 	stmdbne	r0, {r1, r2}
}
    2ad0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	IntEnable (INT_RFC_CPE_0);
    2ad4:	0b3b0b3a 	bleq	ec57c4 <__ccfg+0xea581c>
    2ad8:	13490b39 	movtne	r0, #39737	; 0x9b39
    2adc:	00000602 	andeq	r0, r0, r2, lsl #12
    2ae0:	55010b1a 	strpl	r0, [r1, #-2842]	; 0xfffff4e6
    2ae4:	1b000006 	blne	2b04 <rf_on.part.0+0x14c>
    2ae8:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2aec:	0b3b0b3a 	bleq	ec57dc <__ccfg+0xea5834>
    2af0:	13490b39 	movtne	r0, #39737	; 0x9b39
    2af4:	00000a02 	andeq	r0, r0, r2, lsl #20
    2af8:	01110100 	tsteq	r1, r0, lsl #2
    2afc:	0b130e25 	bleq	4c6398 <__ccfg+0x4a63f0>
    2b00:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2b04:	01110655 	tsteq	r1, r5, asr r6
    2b08:	00000610 	andeq	r0, r0, r0, lsl r6
    2b0c:	0b002402 	bleq	bb1c <__exidx_end+0x60f8>
    2b10:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2b14:	0300000e 	movweq	r0, #14
    2b18:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2b1c:	0b3b0b3a 	bleq	ec580c <__ccfg+0xea5864>
    2b20:	13490b39 	movtne	r0, #39737	; 0x9b39
    2b24:	24040000 	strcs	r0, [r4], #-0
    2b28:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2b2c:	0008030b 	andeq	r0, r8, fp, lsl #6
    2b30:	01130500 	tsteq	r3, r0, lsl #10
    2b34:	0b0b0e03 	bleq	2c6348 <__ccfg+0x2a63a0>
static void rx_int_enable () {
    2b38:	0b3b0b3a 	bleq	ec5828 <__ccfg+0xea5880>
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2b3c:	00001301 	andeq	r1, r0, r1, lsl #6
    2b40:	03000d06 	movweq	r0, #3334	; 0xd06
    2b44:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
    2b48:	000c340b 	andeq	r3, ip, fp, lsl #8
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2b4c:	000f0700 	andeq	r0, pc, r0, lsl #14
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2b50:	00000b0b 	andeq	r0, r0, fp, lsl #22
    2b54:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2b58:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2b5c:	13490035 	movtne	r0, #36917	; 0x9035
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2b60:	0f0a0000 	svceq	0x000a0000
    2b64:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2b68:	0b000013 	bleq	2bbc <rx_int_enable+0x84>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2b6c:	0b0b0113 	bleq	2c2fc0 <__ccfg+0x2a3018>
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2b70:	0b3b0b3a 	bleq	ec5860 <__ccfg+0xea58b8>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2b74:	13010b39 	movwne	r0, #6969	; 0x1b39
		if (db->status == DATA_ENTRY_FINISHED) {
    2b78:	0d0c0000 	stceq	0, cr0, [ip, #-0]
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2b7c:	3a0e0300 	bcc	383784 <__ccfg+0x3637dc>
    2b80:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			nr++;
    2b84:	0b13490b 	bleq	4d4fb8 <__ccfg+0x4b5010>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2b88:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    2b8c:	000b380b 	andeq	r3, fp, fp, lsl #16
    2b90:	000d0d00 	andeq	r0, sp, r0, lsl #26
    2b94:	0b3a0e03 	bleq	e863a8 <__ccfg+0xe66400>
				__dp [pl + 1] = __dp [pl] - 128;
    2b98:	0b390b3b 	bleq	e4588c <__ccfg+0xe258e4>
				pl = __dp [1] + 2;
    2b9c:	0b381349 	bleq	e078c8 <__ccfg+0xde7920>
				__dp [pl + 1] = __dp [pl] - 128;
    2ba0:	340e0000 	strcc	r0, [lr], #-0
    2ba4:	3a0e0300 	bcc	3837ac <__ccfg+0x363804>
				__dp [pl] = 0;
    2ba8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2bac:	3f13490b 	svccc	0x0013490b
    2bb0:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    2bb4:	01010f00 	tsteq	r1, r0, lsl #30
			db->status = DATA_ENTRY_PENDING;
    2bb8:	13011349 	movwne	r1, #4937	; 0x1349
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2bbc:	21100000 	tstcs	r0, r0
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2bc0:	11000000 	mrsne	r0, (UNDEF: 0)
				diag ("BAD RX");
    2bc4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2bc8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if (nr) {
    2bcc:	13490b39 	movtne	r0, #39737	; 0x9b39
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2bd0:	15120000 	ldrne	r0, [r2, #-0]
}
    2bd4:	010c2701 	tsteq	ip, r1, lsl #14
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2bd8:	13000013 	movwne	r0, #19
    2bdc:	13490005 	movtne	r0, #36869	; 0x9005
    2be0:	34140000 	ldrcc	r0, [r4], #-0
}
    2be4:	3a0e0300 	bcc	3837ec <__ccfg+0x363844>
    2be8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2bec:	3f13490b 	svccc	0x0013490b
    2bf0:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    2bf4:	01131500 	tsteq	r3, r0, lsl #10
    2bf8:	0b3a0b0b 	bleq	e8582c <__ccfg+0xe65884>
    2bfc:	0b39053b 	bleq	e440f0 <__ccfg+0xe24148>
    2c00:	00001301 	andeq	r1, r0, r1, lsl #6
    2c04:	03000d16 	movweq	r0, #3350	; 0xd16
thread (cc1350_driver)
    2c08:	3b0b3a0e 	blcc	2d1448 <__ccfg+0x2b14a0>
    2c0c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2c10:	000b3813 	andeq	r3, fp, r3, lsl r8
    2c14:	01131700 	tsteq	r3, r0, lsl #14
    2c18:	0b0b0e03 	bleq	2c642c <__ccfg+0x2a6484>
		if (dstate & DSTATE_IRST) {
    2c1c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2c20:	13010b39 	movwne	r0, #6969	; 0x1b39
    2c24:	21180000 	tstcs	r8, r0
			rf_off ();
    2c28:	2f134900 	svccs	0x00134900
			_BIC (dstate,
    2c2c:	1900000b 	stmdbne	r0, {r0, r1, r3}
    2c30:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2b80 <rx_int_enable+0x48>
		if (dstate & DSTATE_RXAC) {
    2c34:	0b3a0e03 	bleq	e86448 <__ccfg+0xe664a0>
    2c38:	0b390b3b 	bleq	e4592c <__ccfg+0xe25984>
			if ((dstate & DSTATE_RXON) == 0)
    2c3c:	13490c27 	movtne	r0, #39975	; 0x9c27
				rx_de ();
    2c40:	01120111 	tsteq	r2, r1, lsl r1
		if (paylen == 0) {
    2c44:	13010a40 	movwne	r0, #6720	; 0x1a40
    2c48:	051a0000 	ldreq	r0, [sl, #-0]
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2c4c:	3a080300 	bcc	203854 <__ccfg+0x1e38ac>
    2c50:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c54:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2c58:	1b000006 	blne	2c78 <cc1350_driver+0x70>
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2c5c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2c60:	0b3b0b3a 	bleq	ec5950 <__ccfg+0xea59a8>
    2c64:	13490b39 	movtne	r0, #39737	; 0x9b39
    2c68:	00000602 	andeq	r0, r0, r2, lsl #12
    2c6c:	03000a1c 	movweq	r0, #2588	; 0xa1c
    2c70:	3b0b3a0e 	blcc	2d14b0 <__ccfg+0x2b1508>
    2c74:	110b390b 	tstne	fp, fp, lsl #18
    2c78:	1d000001 	stcne	0, cr0, [r0, #-4]
		} else if (dstate & DSTATE_RXON) {
    2c7c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2bcc <rx_int_enable+0x94>
	if (dstate & DSTATE_RFON)
    2c80:	0b3a0e03 	bleq	e86494 <__ccfg+0xe664ec>
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2c84:	0b390b3b 	bleq	e45978 <__ccfg+0xe259d0>
		re->status = DATA_ENTRY_PENDING;
    2c88:	13490c27 	movtne	r0, #39975	; 0x9c27
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2c8c:	01120111 	tsteq	r2, r1, lsl r1
	issue_cmd ((lword)&RF_cmdPropRx);
    2c90:	00000a40 	andeq	r0, r0, r0, asr #20
	_BIS (dstate, DSTATE_RXAC);
    2c94:	0300341e 	movweq	r3, #1054	; 0x41e
    2c98:	3b0b3a08 	blcc	2d14c0 <__ccfg+0x2b1518>
    2c9c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2ca0:	000a0213 	andeq	r0, sl, r3, lsl r2
	if (dstate & DSTATE_RXAC)
    2ca4:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
    2ca8:	0b3a0e03 	bleq	e864bc <__ccfg+0xe66514>
				if (statid != 0xffff)
    2cac:	0b390b3b 	bleq	e459a0 <__ccfg+0xe259f8>
    2cb0:	01110c27 	tsteq	r1, r7, lsr #24
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2cb4:	0a400112 	beq	1003104 <__ccfg+0xfe315c>
				RF_cmdPropTx.pktLen = (byte) paylen;
    2cb8:	13010a48 	movwne	r0, #6728	; 0x1a48
		if (paylen == 0) {
    2cbc:	05200000 	streq	r0, [r0, #-0]!
			wait (qevent, DR_LOOP);
    2cc0:	3a080300 	bcc	2038c8 <__ccfg+0x1e3920>
    2cc4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			if (dstate & DSTATE_RXAC) {
    2cc8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2ccc:	2100000a 	tstcs	r0, sl
				rx_int_enable ();
    2cd0:	0803000a 	stmdaeq	r3, {r1, r3}
			release;
    2cd4:	0b3b0b3a 	bleq	ec59c4 <__ccfg+0xea5a1c>
			} else if (dstate & DSTATE_RFON) {
    2cd8:	01110b39 	tsteq	r1, r9, lsr fp
				delay (offdelay, DR_GOOF);
    2cdc:	0b220000 	bleq	882ce4 <__ccfg+0x862d3c>
    2ce0:	01065501 	tsteq	r6, r1, lsl #10
    2ce4:	23000013 	movwcs	r0, #19
		if (bckf_timer) {
    2ce8:	08030034 	stmdaeq	r3, {r2, r4, r5}
			wait (qevent, DR_LOOP);
    2cec:	0b3b0b3a 	bleq	ec59dc <__ccfg+0xea5a34>
    2cf0:	13490b39 	movtne	r0, #39737	; 0x9b39
    2cf4:	0b240000 	bleq	902cfc <__ccfg+0x8e2d54>
			delay (bckf_timer, DR_LOOP);
    2cf8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2cfc:	00130101 	andseq	r0, r3, r1, lsl #2
			if (dstate & DSTATE_RXAC)
    2d00:	010b2500 	tsteq	fp, r0, lsl #10
    2d04:	01120111 	tsteq	r2, r1, lsl r1
	if (dstate & DSTATE_RFON)
    2d08:	01000000 	mrseq	r0, (UNDEF: 0)
    2d0c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
		rx_de ();
    2d10:	0e030b13 	vmoveq.32	d3[0], r0
		RF_cmdPropTx . status = 0;
    2d14:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2d18:	06100111 			; <UNDEFINED> instruction: 0x06100111
    2d1c:	24020000 	strcs	r0, [r2], #-0
    2d20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
		issue_cmd ((lword)&cmd_cs);
    2d24:	000e030b 	andeq	r0, lr, fp, lsl #6
		if (dstate & DSTATE_IRST)
    2d28:	00160300 	andseq	r0, r6, r0, lsl #6
    2d2c:	0b3a0e03 	bleq	e86540 <__ccfg+0xe66598>
    2d30:	0b390b3b 	bleq	e45a24 <__ccfg+0xe25a7c>
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2d34:	00001349 	andeq	r1, r0, r9, asr #6
    2d38:	0b002404 	bleq	bd50 <__exidx_end+0x632c>
			delay (1, DR_XMIT);
    2d3c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2d40:	05000008 	streq	r0, [r0, #-8]
    2d44:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2d48:	0b3a0b0b 	bleq	e8597c <__ccfg+0xe659d4>
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2d4c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2d50:	0d060000 	stceq	0, cr0, [r6, #-0]
				RF_cmdPropTx . status = 0;
    2d54:	490e0300 	stmdbmi	lr, {r8, r9}
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2d58:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
				issue_cmd ((lword)&RF_cmdPropTx);
    2d5c:	0700000c 	streq	r0, [r0, -ip]
				proceed (DR_XMIT);
    2d60:	0b0b000f 	bleq	2c2da4 <__ccfg+0x2a2dfc>
    2d64:	26080000 	strcs	r0, [r8], -r0
			txtries++;
    2d68:	00134900 	andseq	r4, r3, r0, lsl #18
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2d6c:	00350900 	eorseq	r0, r5, r0, lsl #18
    2d70:	00001349 	andeq	r1, r0, r9, asr #6
    2d74:	0b000f0a 	bleq	69a4 <__exidx_end+0xf80>
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2d78:	0013490b 	andseq	r4, r3, fp, lsl #18
		goto DR_LOOP__;
    2d7c:	01130b00 	tsteq	r3, r0, lsl #22
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2d80:	0b3a0b0b 	bleq	e859b4 <__ccfg+0xe65a0c>
		paylen = 0;
    2d84:	0b390b3b 	bleq	e45a78 <__ccfg+0xe25ad0>
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2d88:	00001301 	andeq	r1, r0, r1, lsl #6
		txtries = 0;
    2d8c:	03000d0c 	movweq	r0, #3340	; 0xd0c
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2d90:	3b0b3a0e 	blcc	2d15d0 <__ccfg+0x2b1628>
    2d94:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2d98:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    2d9c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    2da0:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
		    tcvphy_top (physid) == NULL)
    2da4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2da8:	0b3b0b3a 	bleq	ec5a98 <__ccfg+0xea5af0>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2dac:	13490b39 	movtne	r0, #39737	; 0x9b39
    2db0:	00000b38 	andeq	r0, r0, r8, lsr fp
			rf_off ();
    2db4:	0300340e 	movweq	r3, #1038	; 0x40e
endthread
    2db8:	3b0b3a0e 	blcc	2d15f8 <__ccfg+0x2b1650>
    2dbc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2dc0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    2dc4:	0f00000c 	svceq	0x0000000c
    2dc8:	13490101 	movtne	r0, #37121	; 0x9101
    2dcc:	00001301 	andeq	r1, r0, r1, lsl #6
    2dd0:	00002110 	andeq	r2, r0, r0, lsl r1
    2dd4:	00161100 	andseq	r1, r6, r0, lsl #2
    2dd8:	0b3a0e03 	bleq	e865ec <__ccfg+0xe66644>
    2ddc:	0b39053b 	bleq	e442d0 <__ccfg+0xe24328>
    2de0:	00001349 	andeq	r1, r0, r9, asr #6
    2de4:	27011512 	smladcs	r1, r2, r5, r1
    2de8:	0013010c 	andseq	r0, r3, ip, lsl #2
    2dec:	00051300 	andeq	r1, r5, r0, lsl #6
    2df0:	00001349 	andeq	r1, r0, r9, asr #6
    2df4:	03003414 	movweq	r3, #1044	; 0x414
void RFCCPE0IntHandler (void) {
    2df8:	3b0b3a0e 	blcc	2d1638 <__ccfg+0x2b1690>
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2dfc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		_BIS (dstate, DSTATE_IRST);
    2e00:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    2e04:	1500000c 	strne	r0, [r0, #-12]
    2e08:	0b0b0113 	bleq	2c325c <__ccfg+0x2a32b4>
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2e0c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2e10:	13010b39 	movwne	r0, #6969	; 0x1b39
    2e14:	0d160000 	ldceq	0, cr0, [r6, #-0]
	p_trigger (drvprcs, qevent);
    2e18:	3a0e0300 	bcc	383a20 <__ccfg+0x363a78>
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2e1c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e20:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2e24:	1700000b 	strne	r0, [r0, -fp]
    2e28:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2e2c:	0b3a0b0b 	bleq	e85a60 <__ccfg+0xe65ab8>
    2e30:	0b39053b 	bleq	e44324 <__ccfg+0xe2437c>
    2e34:	00001301 	andeq	r1, r0, r1, lsl #6
    2e38:	49002118 	stmdbmi	r0, {r3, r4, r8, sp}
    2e3c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2e40:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
	RISE_N_SHINE;
    2e44:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2e48:	0b3b0b3a 	bleq	ec5b38 <__ccfg+0xea5b90>
    2e4c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
}
    2e50:	01111349 	tsteq	r1, r9, asr #6
    2e54:	0a400112 	beq	10032a4 <__ccfg+0xfe32fc>
    2e58:	00001301 	andeq	r1, r0, r1, lsl #6
    2e5c:	0300051a 	movweq	r0, #1306	; 0x51a
    2e60:	3b0b3a08 	blcc	2d1688 <__ccfg+0x2b16e0>
    2e64:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
void phys_cc1350 (int phy, int mbs) {
    2e68:	00060213 	andeq	r0, r6, r3, lsl r2
	if (rbuffl != 0)
    2e6c:	00341b00 	eorseq	r1, r4, r0, lsl #22
    2e70:	0b3a0803 	bleq	e84e84 <__ccfg+0xe64edc>
		syserror (ETOOMANY, "cc13");
    2e74:	0b390b3b 	bleq	e45b68 <__ccfg+0xe25bc0>
		syserror (EREQPAR, "cc13 mb");
    2e78:	06021349 	streq	r1, [r2], -r9, asr #6
	if (mbs == 0)
    2e7c:	0a1c0000 	beq	702e84 <__ccfg+0x6e2edc>
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2e80:	3a0e0300 	bcc	383a88 <__ccfg+0x363ae0>
		syserror (EREQPAR, "cc13 mb");
    2e84:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e88:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
	i = 0;
    2e8c:	0111010b 	tsteq	r1, fp, lsl #2
	rbuffl = (byte) mbs;
    2e90:	13010112 	movwne	r0, #4370	; 0x1112
		db->config.type = 0;	// General (data in structure)
    2e94:	341e0000 	ldrcc	r0, [lr], #-0
	rbuffl = (byte) mbs;
    2e98:	3a080300 	bcc	203aa0 <__ccfg+0x1e3af8>
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2e9c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ea0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		if (db == NULL)
    2ea4:	1f00000a 	svcne	0x0000000a
			syserror (EMALLOC, "cc13");
    2ea8:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    2eac:	00001301 	andeq	r1, r0, r1, lsl #6
    2eb0:	03003420 	movweq	r3, #1056	; 0x420
		db->status = DATA_ENTRY_PENDING;
    2eb4:	3b0b3a08 	blcc	2d16dc <__ccfg+0x2b1734>
		if (i)
    2eb8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			da->pNextEntry = (byte*) db;
    2ebc:	21000013 	tstcs	r0, r3, lsl r0
		db->length = rbuffl + 2;
    2ec0:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    2ec4:	01000000 	mrseq	r0, (UNDEF: 0)
		db->config.type = 0;	// General (data in structure)
    2ec8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
		db->length = rbuffl + 2;
    2ecc:	0e030b13 	vmoveq.32	d3[0], r0
	db->pNextEntry = (byte*) re;
    2ed0:	06100e1b 			; <UNDEFINED> instruction: 0x06100e1b
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2ed4:	24020000 	strcs	r0, [r2], #-0
    2ed8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	if (rbuffs == NULL)
    2edc:	000e030b 	andeq	r0, lr, fp, lsl #6
	rbuffs->pCurrEntry = (byte*) re;
    2ee0:	00160300 	andseq	r0, r6, r0, lsl #6
	rbuffs->pLastEntry = NULL;
    2ee4:	0b3a0e03 	bleq	e866f8 <__ccfg+0xe66750>
    2ee8:	0b390b3b 	bleq	e45bdc <__ccfg+0xe25c34>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2eec:	00001349 	andeq	r1, r0, r9, asr #6
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2ef0:	49002604 	stmdbmi	r0, {r2, r9, sl, sp}
    2ef4:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    2ef8:	0b0b0024 	bleq	2c2f90 <__ccfg+0x2a2fe8>
	rbuffl -= 2;
    2efc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f00:	16060000 	strne	r0, [r6], -r0
	rbuffl -= 2;
    2f04:	3a0e0300 	bcc	383b0c <__ccfg+0x363b64>
	physid = phy;
    2f08:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f0c:	0013490b 	andseq	r4, r3, fp, lsl #18
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f10:	01170700 	tsteq	r7, r0, lsl #14
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f14:	0b3a0b0b 	bleq	e85b48 <__ccfg+0xe65ba0>
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f18:	0b390b3b 	bleq	e45c0c <__ccfg+0xe25c64>
    2f1c:	00001301 	andeq	r1, r0, r1, lsl #6
	utimer_add (&bckf_timer);
    2f20:	03000d08 	movweq	r0, #3336	; 0xd08
	drvprcs = runthread (cc1350_driver);
    2f24:	3b0b3a0e 	blcc	2d1764 <__ccfg+0x2b17bc>
    2f28:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2f2c:	09000013 	stmdbeq	r0, {r0, r1, r4}
	if (drvprcs == 0)
    2f30:	13490101 	movtne	r0, #37121	; 0x9101
		syserror (ERESOURCE, "cc13");
    2f34:	00001301 	andeq	r1, r0, r1, lsl #6
    2f38:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2f3c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2f40:	01130b00 	tsteq	r3, r0, lsl #22
    2f44:	0b3a0b0b 	bleq	e85b78 <__ccfg+0xe65bd0>
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2f48:	0b390b3b 	bleq	e45c3c <__ccfg+0xe25c94>
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2f4c:	00001301 	andeq	r1, r0, r1, lsl #6
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2f50:	03000d0c 	movweq	r0, #3340	; 0xd0c
    2f54:	3b0b3a0e 	blcc	2d1794 <__ccfg+0x2b17ec>
    2f58:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2f5c:	000b3813 	andeq	r3, fp, r3, lsl r8
    2f60:	000f0d00 	andeq	r0, pc, r0, lsl #26
    2f64:	00000b0b 	andeq	r0, r0, fp, lsl #22
    2f68:	0301130e 	movweq	r1, #4878	; 0x130e
    2f6c:	3a0b0b0e 	bcc	2c5bac <__ccfg+0x2a5c04>
    2f70:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	plugch ();
    2f74:	0013010b 	andseq	r0, r3, fp, lsl #2
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2f78:	000d0f00 	andeq	r0, sp, r0, lsl #30
    2f7c:	0b3a0803 	bleq	e84f90 <__ccfg+0xe64fe8>
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2f80:	0b390b3b 	bleq	e45c74 <__ccfg+0xe25ccc>
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2f84:	0b381349 	bleq	e07cb0 <__ccfg+0xde7d08>
    2f88:	0f100000 	svceq	0x00100000
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2f8c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
}
    2f90:	11000013 	tstne	r0, r3, lsl r0
    2f94:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2f98:	0b3a050b 	bleq	e843cc <__ccfg+0xe64424>
    2f9c:	0b390b3b 	bleq	e45c90 <__ccfg+0xe25ce8>
    2fa0:	00001301 	andeq	r1, r0, r1, lsl #6
    2fa4:	03000d12 	movweq	r0, #3346	; 0xd12
    2fa8:	3b0b3a0e 	blcc	2d17e8 <__ccfg+0x2b1840>
    2fac:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2fb0:	00053813 	andeq	r3, r5, r3, lsl r8
    2fb4:	00151300 	andseq	r1, r5, r0, lsl #6
    2fb8:	00000c27 	andeq	r0, r0, r7, lsr #24
    2fbc:	27011514 	smladcs	r1, r4, r5, r1
    2fc0:	0113490c 	tsteq	r3, ip, lsl #18
    2fc4:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    2fc8:	13490005 	movtne	r0, #36869	; 0x9005
    2fcc:	13160000 	tstne	r6, #0
    2fd0:	0b0e0301 	bleq	383bdc <__ccfg+0x363c34>
    2fd4:	3b0b3a05 	blcc	2d17f0 <__ccfg+0x2b1848>
    2fd8:	010b3905 	tsteq	fp, r5, lsl #18
    2fdc:	17000013 	smladne	r0, r3, r0, r0
    2fe0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2fe4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2fe8:	13490b39 	movtne	r0, #39737	; 0x9b39
    2fec:	00000b38 	andeq	r0, r0, r8, lsr fp
    2ff0:	03000d18 	movweq	r0, #3352	; 0xd18
    2ff4:	3b0b3a0e 	blcc	2d1834 <__ccfg+0x2b188c>
    2ff8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2ffc:	00053813 	andeq	r3, r5, r3, lsl r8
    3000:	01131900 	tsteq	r3, r0, lsl #18
    3004:	0b0b0e03 	bleq	2c6818 <__ccfg+0x2a6870>
    3008:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    300c:	13010b39 	movwne	r0, #6969	; 0x1b39
    3010:	131a0000 	tstne	sl, #0
    3014:	3a0b0b01 	bcc	2c5c20 <__ccfg+0x2a5c78>
    3018:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    301c:	0013010b 	andseq	r0, r3, fp, lsl #2
    3020:	01171b00 	tsteq	r7, r0, lsl #22
    3024:	0b3a0b0b 	bleq	e85c58 <__ccfg+0xe65cb0>
    3028:	0b39053b 	bleq	e4451c <__ccfg+0xe24574>
    302c:	00001301 	andeq	r1, r0, r1, lsl #6
    3030:	03000d1c 	movweq	r0, #3356	; 0xd1c
    3034:	3b0b3a0e 	blcc	2d1874 <__ccfg+0x2b18cc>
    3038:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    303c:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    3040:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    3044:	00000c3c 	andeq	r0, r0, ip, lsr ip
    3048:	2701151e 	smladcs	r1, lr, r5, r1
    304c:	0013010c 	andseq	r0, r3, ip, lsl #2
    3050:	00341f00 	eorseq	r1, r4, r0, lsl #30
    3054:	0b3a0e03 	bleq	e86868 <__ccfg+0xe668c0>
    3058:	0b39053b 	bleq	e4454c <__ccfg+0xe245a4>
    305c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2f40 <phys_cc1350+0xd8>
    3060:	00000c3c 	andeq	r0, r0, ip, lsr ip
    3064:	03000d20 	movweq	r0, #3360	; 0xd20
    3068:	3b0b3a0e 	blcc	2d18a8 <__ccfg+0x2b1900>
    306c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    3070:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    3074:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    3078:	2100000b 	tstcs	r0, fp
strand (__outserial, const char*)
    307c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3080:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3084:	13490b39 	movtne	r0, #39737	; 0x9b39
    3088:	0b0d0b0b 	bleq	345cbc <__ccfg+0x325d14>
endstrand
    308c:	0b380b0c 	bleq	e05cc4 <__ccfg+0xde5d1c>
    3090:	34220000 	strtcc	r0, [r2], #-0
	ptr = data;
    3094:	3a0e0300 	bcc	383c9c <__ccfg+0x363cf4>
    3098:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (*ptr)
    309c:	1c13490b 			; <UNDEFINED> instruction: 0x1c13490b
		len = strlen (ptr);
    30a0:	23000003 	movwcs	r0, #3
    30a4:	13490021 	movtne	r0, #36897	; 0x9021
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    30a8:	0000052f 	andeq	r0, r0, pc, lsr #10
    30ac:	49003524 	stmdbmi	r0, {r2, r5, r8, sl, ip, sp}
    30b0:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    30b4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    30b8:	0b3b0b3a 	bleq	ec5da8 <__ccfg+0xea5e00>
	len -= quant;
    30bc:	13490b39 	movtne	r0, #39737	; 0x9b39
    30c0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    30c4:	21260000 			; <UNDEFINED> instruction: 0x21260000
	if (len == 0) {
    30c8:	27000000 	strcs	r0, [r0, -r0]
		ufree (data);
    30cc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		finish;
    30d0:	0b3b0b3a 	bleq	ec5dc0 <__ccfg+0xea5e18>
    30d4:	13490b39 	movtne	r0, #39737	; 0x9b39
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    30d8:	00000a02 	andeq	r0, r0, r2, lsl #20
    30dc:	47003428 	strmi	r3, [r0, -r8, lsr #8]
    30e0:	3b0b3a13 	blcc	2d1934 <__ccfg+0x2b198c>
    30e4:	020b390b 	andeq	r3, fp, #180224	; 0x2c000
    30e8:	0000000a 	andeq	r0, r0, sl
strand (__inserial, address)
    30ec:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    30f0:	030b130e 	movweq	r1, #45838	; 0xb30e
    30f4:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    30f8:	10011117 	andne	r1, r1, r7, lsl r1
    30fc:	02000017 	andeq	r0, r0, #23
	if (__inpline != NULL)
    3100:	0b0b0024 	bleq	2c3198 <__ccfg+0x2a31f0>
    3104:	0e030b3e 	vmoveq.16	d3[0], r0
		finish;
    3108:	16030000 	strne	r0, [r3], -r0
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    310c:	3a0e0300 	bcc	383d14 <__ccfg+0x363d6c>
    3110:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3114:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    3118:	0b0b0024 	bleq	2c31b0 <__ccfg+0x2a3208>
		umwait (IM_INIT);
    311c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
		release;
    3120:	0f050000 	svceq	0x00050000
	savedata (data);
    3124:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
	len = MAX_LINE_LENGTH;
    3128:	06000013 			; <UNDEFINED> instruction: 0x06000013
	io (IM_READ, __cport, READ, ptr, 1);
    312c:	19270015 	stmdbne	r7!, {r0, r2, r4}
    3130:	15070000 	strne	r0, [r7, #-0]
    3134:	01192701 	tsteq	r9, r1, lsl #14
    3138:	08000013 	stmdaeq	r0, {r0, r1, r4}
	if (ptr == (char*) data) { // new line
    313c:	13490005 	movtne	r0, #36869	; 0x9005
    3140:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
		if (*ptr == '\0') { // bin cmd
    3144:	03193f01 	tsteq	r9, #1, 30
			proceed (IM_BIN);
    3148:	3b0b3a0e 	blcc	2d1988 <__ccfg+0x2b19e0>
    314c:	1119270b 	tstne	r9, fp, lsl #14
		if (*ptr < 0x20)
    3150:	40061201 	andmi	r1, r6, r1, lsl #4
    3154:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
			proceed (IM_READ);
    3158:	00001301 	andeq	r1, r0, r1, lsl #6
    315c:	0300050a 	movweq	r0, #1290	; 0x50a
	if (*ptr == '\n' || *ptr == '\r') {
    3160:	3b0b3a0e 	blcc	2d19a0 <__ccfg+0x2b19f8>
    3164:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3168:	0b000017 	bleq	31cc <__inserial+0xe0>
		*ptr = '\0';
    316c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		__inpline = (char*)data;
    3170:	0b3b0b3a 	bleq	ec5e60 <__ccfg+0xea5eb8>
		finish;
    3174:	17021349 	strne	r1, [r2, -r9, asr #6]
	if (len) {
    3178:	890c0000 	stmdbhi	ip, {}	; <UNPREDICTABLE>
		ptr++;
    317c:	11000182 	smlabbne	r0, r2, r1, r0
    3180:	00133101 	andseq	r3, r3, r1, lsl #2
		len--;
    3184:	82890d00 	addhi	r0, r9, #0, 26
	proceed (IM_READ);
    3188:	01110001 	tsteq	r1, r1
	io (IM_BIN, __cport, READ, ptr, 1);
    318c:	31194295 			; <UNDEFINED> instruction: 0x31194295
    3190:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    3194:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3198:	0b3a0e03 	bleq	e869ac <__ccfg+0xe66a04>
    319c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
	len -= 2;
    31a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
	if (len > *ptr + 1) // 1 for 0x04
    31a4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    31a8:	00130119 	andseq	r0, r3, r9, lsl r1
		len = *ptr + 1;
    31ac:	82890f00 	addhi	r0, r9, #0, 30
    31b0:	01110101 	tsteq	r1, r1, lsl #2
	ptr++;
    31b4:	00001301 	andeq	r1, r0, r1, lsl #6
	quant = io (IM_BINL, __cport, READ, ptr, len);
    31b8:	01828a10 	orreq	r8, r2, r0, lsl sl
    31bc:	91180200 	tstls	r8, r0, lsl #4
    31c0:	00001842 	andeq	r1, r0, r2, asr #16
    31c4:	3f002e11 	svccc	0x00002e11
    31c8:	3a0e0319 	bcc	383e34 <__ccfg+0x363e8c>
    31cc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
	len -= quant;
    31d0:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
		__inpline = (char*)data;
    31d4:	00000019 	andeq	r0, r0, r9, lsl r0
		finish;
    31d8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
	ptr += quant;
    31dc:	030b130e 	movweq	r1, #45838	; 0xb30e
    31e0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
endstrand
    31e4:	10011117 	andne	r1, r1, r7, lsl r1
    31e8:	02000017 	andeq	r0, r0, #23
	proceed (IM_BINL);
    31ec:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
endstrand
    31f0:	0b3b0b3a 	bleq	ec5ee0 <__ccfg+0xea5f38>
    31f4:	00001349 	andeq	r1, r0, r9, asr #6
    31f8:	0b002403 	bleq	c20c <__exidx_end+0x67e8>
    31fc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3200:	0400000e 	streq	r0, [r0], #-14
    3204:	0b0b0024 	bleq	2c329c <__ccfg+0x2a32f4>
		if (res && (d < n))
    3208:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    320c:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    3210:	03193f01 	tsteq	r9, #1, 30
    3214:	3b0b3a0e 	blcc	2d1a54 <__ccfg+0x2b1aac>
			res [d] = (char) c;
    3218:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
		d++;
    321c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3220:	97184006 	ldrls	r4, [r8, -r6]
    3224:	00001942 	andeq	r1, r0, r2, asr #18
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3228:	03003406 	movweq	r3, #1030	; 0x406
    322c:	3b0b3a0e 	blcc	2d1a6c <__ccfg+0x2b1ac4>
    3230:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
				enci (10000);
    3234:	07000017 	smladeq	r0, r7, r0, r0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3238:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    323c:	0b3b0b3a 	bleq	ec5f2c <__ccfg+0xea5f84>
	d = 0;
    3240:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
		c = *fm++;
    3244:	01000000 	mrseq	r0, (UNDEF: 0)
		if (c == '\\') {
    3248:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
			if ((c = *fm++) == '\0') {
    324c:	0e030b13 	vmoveq.32	d3[0], r0
    3250:	17550e1b 	smmlane	r5, fp, lr, r0
				outc ('\\');
    3254:	17100111 			; <UNDEFINED> instruction: 0x17100111
			if ((c = *fm++) == '\0') {
    3258:	24020000 	strcs	r0, [r2], #-0
				outc ('\\');
    325c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3260:	000e030b 	andeq	r0, lr, fp, lsl #6
			outc (c);
    3264:	00160300 	andseq	r0, r6, r0, lsl #6
    3268:	0b3a0e03 	bleq	e86a7c <__ccfg+0xe66ad4>
			if (c == '\0')
    326c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3270:	24040000 	strcs	r0, [r4], #-0
			outc (c);
    3274:	3e0b0b00 	vmlacc.f64	d0, d11, d0
				outc (val);
    3278:	0008030b 	andeq	r0, r8, fp, lsl #6
				val = (word) va_arg (ap, aword);
    327c:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
		if (c == '%') {
    3280:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3284:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			c = *fm++;
    3288:	13491927 	movtne	r1, #39207	; 0x9927
			switch (c) {
    328c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3290:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3294:	00130119 	andseq	r0, r3, r9, lsl r1
    3298:	00340600 	eorseq	r0, r4, r0, lsl #12
    329c:	0b3a0e03 	bleq	e86ab0 <__ccfg+0xe66b08>
    32a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    32a4:	00001702 	andeq	r1, r0, r2, lsl #14
    32a8:	03003407 	movweq	r3, #1031	; 0x407
				outc ('%');
    32ac:	3b0b3a0e 	blcc	2d1aec <__ccfg+0x2b1b44>
    32b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
				outc (c);
    32b4:	08000018 	stmdaeq	r0, {r3, r4}
    32b8:	0b0b0117 	bleq	2c371c <__ccfg+0x2a3774>
    32bc:	0b3b0b3a 	bleq	ec5fac <__ccfg+0xea6004>
				if (c == '\0')
    32c0:	00001301 	andeq	r1, r0, r1, lsl #6
				return d;
    32c4:	03000d09 	movweq	r0, #3337	; 0xd09
}
    32c8:	3b0b3a0e 	blcc	2d1b08 <__ccfg+0x2b1b60>
    32cc:	0013490b 	andseq	r4, r3, fp, lsl #18
			switch (c) {
    32d0:	00340a00 	eorseq	r0, r4, r0, lsl #20
    32d4:	0b3a0e03 	bleq	e86ae8 <__ccfg+0xe66b40>
    32d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
				for (i = 12; ; i -= 4) {
    32dc:	010b0000 	mrseq	r0, (UNDEF: 11)
				val = (word) va_arg (ap, aword);
    32e0:	01134901 	tsteq	r3, r1, lsl #18
						[ (val >> i) & 0xf ]);
    32e4:	0c000013 	stceq	0, cr0, [r0], {19}
    32e8:	13490021 	movtne	r0, #36897	; 0x9021
    32ec:	00000b2f 	andeq	r0, r0, pc, lsr #22
					outc (__pi_hex_enc_table
    32f0:	01110100 	tsteq	r1, r0, lsl #2
    32f4:	0b130e25 	bleq	4c6b90 <__ccfg+0x4a6be8>
					if (i == 0)
    32f8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    32fc:	01111755 	tsteq	r1, r5, asr r7
				for (i = 12; ; i -= 4) {
    3300:	00001710 	andeq	r1, r0, r0, lsl r7
				val = (word) va_arg (ap, aword);
    3304:	0b002402 	bleq	c314 <__exidx_end+0x68f0>
				if (c == 'd' && (val & 0x8000) != 0) {
    3308:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
				val = (word) va_arg (ap, aword);
    330c:	0300000e 	movweq	r0, #14
				if (c == 'd' && (val & 0x8000) != 0) {
    3310:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3314:	0b3b0b3a 	bleq	ec6004 <__ccfg+0xea605c>
					outc ('-');
    3318:	00001349 	andeq	r1, r0, r9, asr #6
    331c:	0b002404 	bleq	c334 <__exidx_end+0x6910>
					val = (~val) + 1;
    3320:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3324:	05000008 	streq	r0, [r0, #-8]
				for (i = 12; ; i -= 4) {
    3328:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
				enci (10000);
    332c:	0b3a0e03 	bleq	e86b40 <__ccfg+0xe66b98>
    3330:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3334:	01111349 	tsteq	r1, r9, asr #6
    3338:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    333c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3340:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3344:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3348:	0b3b0b3a 	bleq	ec6038 <__ccfg+0xea6090>
    334c:	00001349 	andeq	r1, r0, r9, asr #6
    3350:	03003407 	movweq	r3, #1031	; 0x407
    3354:	3b0b3a0e 	blcc	2d1b94 <__ccfg+0x2b1bec>
    3358:	00134905 	andseq	r4, r3, r5, lsl #18
    335c:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    3360:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3364:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3368:	13491927 	movtne	r1, #39207	; 0x9927
    336c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3370:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
				if (c == 'd' || c == 'u') {
    3374:	00130119 	andseq	r0, r3, r9, lsl r1
    3378:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
					if (c == 'd' &&
    337c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
					val = va_arg (ap, lword);
    3380:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
					fm++;
    3384:	01111927 	tsteq	r1, r7, lsr #18
					if (c == 'd' &&
    3388:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    338c:	00194297 	mulseq	r9, r7, r2
						outc ('-');
    3390:	00050a00 	andeq	r0, r5, r0, lsl #20
    3394:	0b3a0e03 	bleq	e86ba8 <__ccfg+0xe66c00>
						val = (~val) + 1;
    3398:	1349053b 	movtne	r0, #38203	; 0x953b
				enci (10000);
    339c:	00001802 	andeq	r1, r0, r2, lsl #16
					enci (1000000000UL);
    33a0:	01110100 	tsteq	r1, r0, lsl #2
    33a4:	0b130e25 	bleq	4c6c40 <__ccfg+0x4a6c98>
    33a8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    33ac:	01111755 	tsteq	r1, r5, asr r7
    33b0:	00001710 	andeq	r1, r0, r0, lsl r7
    33b4:	0b002402 	bleq	c3c4 <__exidx_end+0x69a0>
    33b8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    33bc:	0300000e 	movweq	r0, #14
    33c0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    33c4:	0b3b0b3a 	bleq	ec60b4 <__ccfg+0xea610c>
    33c8:	00001349 	andeq	r1, r0, r9, asr #6
    33cc:	0b002404 	bleq	c3e4 <__exidx_end+0x69c0>
    33d0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    33d4:	05000008 	streq	r0, [r0, #-8]
    33d8:	0b0b000f 	bleq	2c341c <__ccfg+0x2a3474>
    33dc:	00001349 	andeq	r1, r0, r9, asr #6
    33e0:	27001506 	strcs	r1, [r0, -r6, lsl #10]
				} else if (c == 'x') {
    33e4:	07000019 	smladeq	r0, r9, r0, r0
					for (i = 28; ; i -= 4) {
    33e8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
					val = va_arg (ap, lword);
    33ec:	00001301 	andeq	r1, r0, r1, lsl #6
							[ (val >> i) & 0xf ]);
    33f0:	49000508 	stmdbmi	r0, {r3, r8, sl}
    33f4:	09000013 	stmdbeq	r0, {r0, r1, r4}
						outc (__pi_hex_enc_table
    33f8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    33fc:	13011349 	movwne	r1, #4937	; 0x1349
    3400:	150a0000 	strne	r0, [sl, #-0]
						if (i == 0)
    3404:	49192700 	ldmdbmi	r9, {r8, r9, sl, sp}
    3408:	0b000013 	bleq	345c <vform+0x4>
					for (i = 28; ; i -= 4) {
    340c:	0b0b0113 	bleq	2c3860 <__ccfg+0x2a38b8>
					outc ('%');
    3410:	0b3b0b3a 	bleq	ec6100 <__ccfg+0xea6158>
    3414:	00001301 	andeq	r1, r0, r1, lsl #6
    3418:	03000d0c 	movweq	r0, #3340	; 0xd0c
					outc ('l');
    341c:	3b0b3a0e 	blcc	2d1c5c <__ccfg+0x2b1cb4>
    3420:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
				val = (word) va_arg (ap, aword);
    3424:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
				outc (val);
    3428:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    342c:	0b3a0e03 	bleq	e86c40 <__ccfg+0xe66c98>
				while (*st != '\0') {
    3430:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3434:	13010b20 	movwne	r0, #6944	; 0x1b20
    3438:	050e0000 	streq	r0, [lr, #-0]
    343c:	3a0e0300 	bcc	384044 <__ccfg+0x36409c>
					outc (*st);
    3440:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3444:	0f000013 	svceq	0x00000013
					st++;
    3448:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
		c = *fm++;
    344c:	0b3a0e03 	bleq	e86c60 <__ccfg+0xe66cb8>
    3450:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3454:	0b201349 	bleq	808180 <__ccfg+0x7e81d8>
char *vform (char *res, const char *fm, va_list aq) {
    3458:	00001301 	andeq	r1, r0, r1, lsl #6
    345c:	03003410 	movweq	r3, #1040	; 0x410
	if (res != NULL) {
    3460:	3b0b3a0e 	blcc	2d1ca0 <__ccfg+0x2b1cf8>
		__pi_vfparse (res, MAX_WORD, fm, aq);
    3464:	0013490b 	andseq	r4, r3, fp, lsl #18
    3468:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
    346c:	01111331 	tsteq	r1, r1, lsr r3
}
    3470:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3474:	01194297 			; <UNDEFINED> instruction: 0x01194297
	fml = strlen (fm) + 17;
    3478:	12000013 	andne	r0, r0, #19
    347c:	13310005 	teqne	r1, #5
    3480:	00001702 	andeq	r1, r0, r2, lsl #14
	if ((res = (char*) umalloc (fml)) == NULL)
    3484:	11010b13 	tstne	r1, r3, lsl fp
    3488:	01061201 	tsteq	r6, r1, lsl #4
    348c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    3490:	01018289 	smlabbeq	r1, r9, r2, r8
    3494:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
    3498:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
    349c:	0001828a 	andeq	r8, r1, sl, lsl #5
		ufree (res);
    34a0:	42911802 	addsmi	r1, r1, #131072	; 0x20000
		goto Again;
    34a4:	16000018 			; <UNDEFINED> instruction: 0x16000018
	if (buf == NULL || fmt == NULL)
    34a8:	01018289 	smlabbeq	r1, r9, r2, r8
int vscan (const char *buf, const char *fmt, va_list ap) {
    34ac:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
	if (buf == NULL || fmt == NULL)
    34b0:	00130118 	andseq	r0, r3, r8, lsl r1
    34b4:	00341700 	eorseq	r1, r4, r0, lsl #14
    34b8:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
		    	    case 'u': scanu (lword); break;
    34bc:	0b180000 	bleq	6034c4 <__ccfg+0x5e351c>
			while (isspace (*buf)) buf++;
    34c0:	01175501 	tsteq	r7, r1, lsl #10
    34c4:	19000013 	stmdbne	r0, {r0, r1, r4}
	while (*fmt != '\0') {
    34c8:	13310005 	teqne	r1, #5
		if (*fmt++ != '%')
    34cc:	00000b1c 	andeq	r0, r0, ip, lsl fp
		switch (*fmt++) {
    34d0:	55010b1a 	strpl	r0, [r1, #-2842]	; 0xfffff4e6
    34d4:	1b000017 	blne	3538 <vscan+0x90>
    34d8:	13310034 	teqne	r1, #52	; 0x34
    34dc:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
    34e0:	03193f01 	tsteq	r9, #1, 30
    34e4:	3b0b3a0e 	blcc	2d1d24 <__ccfg+0x2b1d7c>
    34e8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
}
    34ec:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		switch (*fmt++) {
    34f0:	97184006 	ldrls	r4, [r8, -r6]
    34f4:	13011942 	movwne	r1, #6466	; 0x1942
    34f8:	051d0000 	ldreq	r0, [sp, #-0]
    34fc:	3a0e0300 	bcc	384104 <__ccfg+0x36415c>
			while (isspace (*buf)) buf++;
    3500:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3504:	00170213 	andseq	r0, r7, r3, lsl r2
    3508:	00341e00 	eorseq	r1, r4, r0, lsl #28
    350c:	0b3a0e03 	bleq	e86d20 <__ccfg+0xe66d78>
    3510:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3514:	00001702 	andeq	r1, r0, r2, lsl #14
			if (*buf == '\0')
    3518:	0182891f 	orreq	r8, r2, pc, lsl r9
			if (*buf != ',') {
    351c:	31011100 	mrscc	r1, (UNDEF: 17)
			sap = va_arg (ap, char*);
    3520:	20000013 	andcs	r0, r0, r3, lsl r0
			nc++;
    3524:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
			if (*buf != ',') {
    3528:	0b3a0e03 	bleq	e86d3c <__ccfg+0xe66d94>
				while (!isspace (*buf) && *buf != ',' &&
    352c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3530:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3534:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3538:	00130119 	andseq	r0, r3, r9, lsl r1
    353c:	82892100 	addhi	r2, r9, #0, 2
    3540:	01110101 	tsteq	r1, r1, lsl #2
    3544:	13011331 	movwne	r1, #4913	; 0x1331
			while (isspace (*buf)) buf++;
    3548:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
    354c:	3a0e0300 	bcc	384154 <__ccfg+0x3641ac>
    3550:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3554:	20134919 	andscs	r4, r3, r9, lsl r9
    3558:	2300000b 	movwcs	r0, #11
			if (*buf == ',') buf++;
    355c:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    3560:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			*sap = '\0';
    3564:	0b201927 	bleq	809a08 <__ccfg+0x7e9a60>
			break;
    3568:	34240000 	strtcc	r0, [r4], #-0
		    case 'd': scani (word); break;
    356c:	3a0e0300 	bcc	384174 <__ccfg+0x3641cc>
    3570:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3574:	00170213 	andseq	r0, r7, r3, lsl r2
    3578:	011d2500 	tsteq	sp, r0, lsl #10
    357c:	01111331 	tsteq	r1, r1, lsr r3
    3580:	0b580612 	bleq	1604dd0 <__ccfg+0x15e4e28>
    3584:	13010559 	movwne	r0, #5465	; 0x1559
    3588:	05260000 	streq	r0, [r6, #-0]!
    358c:	3a0e0300 	bcc	384194 <__ccfg+0x3641ec>
    3590:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3594:	00170213 	andseq	r0, r7, r3, lsl r2
    3598:	00342700 	eorseq	r2, r4, r0, lsl #14
    359c:	0b3a0e03 	bleq	e86db0 <__ccfg+0xe66e08>
    35a0:	1349053b 	movtne	r0, #38203	; 0x953b
    35a4:	00001802 	andeq	r1, r0, r2, lsl #16
    35a8:	03003428 	movweq	r3, #1064	; 0x428
    35ac:	3b0b3a08 	blcc	2d1dd4 <__ccfg+0x2b1e2c>
    35b0:	02134905 	andseq	r4, r3, #81920	; 0x14000
    35b4:	29000017 	stmdbcs	r0, {r0, r1, r2, r4}
    35b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    35bc:	0b3b0b3a 	bleq	ec62ac <__ccfg+0xea6304>
    35c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    35c4:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
    35c8:	03193f00 	tsteq	r9, #0, 30
    35cc:	3b0b3a0e 	blcc	2d1e0c <__ccfg+0x2b1e64>
    35d0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    35d4:	00193c13 	andseq	r3, r9, r3, lsl ip
    35d8:	002e2b00 	eoreq	r2, lr, r0, lsl #22
		    case 'u': scanu (word); break;
    35dc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    35e0:	0b3b0b3a 	bleq	ec62d0 <__ccfg+0xea6328>
    35e4:	13491927 	movtne	r1, #39207	; 0x9927
    35e8:	0000193c 	andeq	r1, r0, ip, lsr r9
    35ec:	3f012e2c 	svccc	0x00012e2c
    35f0:	3a0e0319 	bcc	38425c <__ccfg+0x3642b4>
    35f4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    35f8:	00193c19 	andseq	r3, r9, r9, lsl ip
    35fc:	11010000 	mrsne	r0, (UNDEF: 1)
    3600:	130e2501 	movwne	r2, #58625	; 0xe501
    3604:	1b0e030b 	blne	384238 <__ccfg+0x364290>
    3608:	1117550e 	tstne	r7, lr, lsl #10
    360c:	00171001 	andseq	r1, r7, r1
    3610:	00240200 	eoreq	r0, r4, r0, lsl #4
    3614:	0b3e0b0b 	bleq	f86248 <__ccfg+0xf662a0>
    3618:	00000e03 	andeq	r0, r0, r3, lsl #28
    361c:	03001603 	movweq	r1, #1539	; 0x603
    3620:	3b0b3a0e 	blcc	2d1e60 <__ccfg+0x2b1eb8>
		    case 'x': scanx (word); break;
    3624:	0013490b 	andseq	r4, r3, fp, lsl #18
    3628:	00240400 	eoreq	r0, r4, r0, lsl #8
    362c:	0b3e0b0b 	bleq	f86260 <__ccfg+0xf662b8>
    3630:	00000803 	andeq	r0, r0, r3, lsl #16
    3634:	0b000f05 	bleq	7250 <__exidx_end+0x182c>
    3638:	0600000b 	streq	r0, [r0], -fp
    363c:	0b0b000f 	bleq	2c3680 <__ccfg+0x2a36d8>
    3640:	00001349 	andeq	r1, r0, r9, asr #6
    3644:	03011307 	movweq	r1, #4871	; 0x1307
    3648:	3a0b0b0e 	bcc	2c6288 <__ccfg+0x2a62e0>
    364c:	010b3b0b 	tsteq	fp, fp, lsl #22
    3650:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3654:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3658:	0b3b0b3a 	bleq	ec6348 <__ccfg+0xea63a0>
    365c:	0b381349 	bleq	e08388 <__ccfg+0xde83e0>
    3660:	13090000 	movwne	r0, #36864	; 0x9000
    3664:	3a0b0b01 	bcc	2c6270 <__ccfg+0x2a62c8>
    3668:	010b3b0b 	tsteq	fp, fp, lsl #22
    366c:	0a000013 	beq	36c0 <vscan+0x218>
    3670:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3674:	0b3b0b3a 	bleq	ec6364 <__ccfg+0xea63bc>
    3678:	0b0b1349 	bleq	2c83a4 <__ccfg+0x2a83fc>
    367c:	0b0c0b0d 	bleq	3062b8 <__ccfg+0x2e6310>
    3680:	00000b38 	andeq	r0, r0, r8, lsr fp
    3684:	0301130b 	movweq	r1, #4875	; 0x130b
    3688:	3a0b0b0e 	bcc	2c62c8 <__ccfg+0x2a6320>
    368c:	01053b0b 	tsteq	r5, fp, lsl #22
    3690:	0c000013 	stceq	0, cr0, [r0], {19}
    3694:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3698:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			switch (*fmt++) {
    369c:	0b381349 	bleq	e083c8 <__ccfg+0xde8420>
    36a0:	130d0000 	movwne	r0, #53248	; 0xd000
    36a4:	3a0b0b01 	bcc	2c62b0 <__ccfg+0x2a6308>
    36a8:	01053b0b 	tsteq	r5, fp, lsl #22
    36ac:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    36b0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		    	    case 'd': scani (lword); break;
    36b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    36b8:	0b0b1349 	bleq	2c83e4 <__ccfg+0x2a843c>
    36bc:	0b0c0b0d 	bleq	3062f8 <__ccfg+0x2e6350>
    36c0:	00000b38 	andeq	r0, r0, r8, lsr fp
    36c4:	03002e0f 	movweq	r2, #3599	; 0xe0f
    36c8:	3b0b3a0e 	blcc	2d1f08 <__ccfg+0x2b1f60>
    36cc:	20192705 	andscs	r2, r9, r5, lsl #14
    36d0:	1000000b 	andne	r0, r0, fp
    36d4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    36d8:	0b3a0e03 	bleq	e86eec <__ccfg+0xe66f44>
    36dc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    36e0:	01111349 	tsteq	r1, r9, asr #6
    36e4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    36e8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    36ec:	11000013 	tstne	r0, r3, lsl r0
    36f0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    36f4:	0b3b0b3a 	bleq	ec63e4 <__ccfg+0xea643c>
    36f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    36fc:	05120000 	ldreq	r0, [r2, #-0]
    3700:	3a080300 	bcc	204308 <__ccfg+0x1e4360>
    3704:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3708:	00170213 	andseq	r0, r7, r3, lsl r2
    370c:	001d1300 	andseq	r1, sp, r0, lsl #6
		    	    case 'x': scanx (lword); break;
    3710:	01111331 	tsteq	r1, r1, lsr r3
    3714:	0b580612 	bleq	1604f64 <__ccfg+0x15e4fbc>
    3718:	00000b59 	andeq	r0, r0, r9, asr fp
    371c:	3f002e14 	svccc	0x00002e14
    3720:	3a0e0319 	bcc	38438c <__ccfg+0x3643e4>
    3724:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3728:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    372c:	97184006 	ldrls	r4, [r8, -r6]
    3730:	00001942 	andeq	r1, r0, r2, asr #18
    3734:	3f012e15 	svccc	0x00012e15
    3738:	3a0e0319 	bcc	3843a4 <__ccfg+0x3643fc>
    373c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3740:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3744:	97184006 	ldrls	r4, [r8, -r6]
    3748:	13011942 	movwne	r1, #6466	; 0x1942
    374c:	05160000 	ldreq	r0, [r6, #-0]
    3750:	3a0e0300 	bcc	384358 <__ccfg+0x3643b0>
    3754:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3758:	00180213 	andseq	r0, r8, r3, lsl r2
    375c:	00341700 	eorseq	r1, r4, r0, lsl #14
    3760:	0b3a0e03 	bleq	e86f74 <__ccfg+0xe66fcc>
    3764:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3768:	00001702 	andeq	r1, r0, r2, lsl #14
    376c:	03000518 	movweq	r0, #1304	; 0x518
    3770:	3b0b3a0e 	blcc	2d1fb0 <__ccfg+0x2b2008>
    3774:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3778:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    377c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		    	    case 'd': scani (lword); break;
    3780:	0b3b0b3a 	bleq	ec6470 <__ccfg+0xea64c8>
    3784:	00001349 	andeq	r1, r0, r9, asr #6
    3788:	0300051a 	movweq	r0, #1306	; 0x51a
    378c:	3b0b3a0e 	blcc	2d1fcc <__ccfg+0x2b2024>
    3790:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3794:	1b000017 	blne	37f8 <vscan+0x350>
    3798:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		    	    case 'u': scanu (lword); break;
    379c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    37a0:	061c1349 	ldreq	r1, [ip], -r9, asr #6
    37a4:	341c0000 	ldrcc	r0, [ip], #-0
    37a8:	3a080300 	bcc	2043b0 <__ccfg+0x1e4408>
    37ac:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    37b0:	00170213 	andseq	r0, r7, r3, lsl r2
    37b4:	82891d00 	addhi	r1, r9, #0, 26
    37b8:	01110101 	tsteq	r1, r1, lsl #2
    37bc:	00001331 	andeq	r1, r0, r1, lsr r3
    37c0:	01828a1e 	orreq	r8, r2, lr, lsl sl
    37c4:	91180200 	tstls	r8, r0, lsl #4
    37c8:	00001842 	andeq	r1, r0, r2, asr #16
    37cc:	0300051f 	movweq	r0, #1311	; 0x51f
    37d0:	3b0b3a0e 	blcc	2d2010 <__ccfg+0x2b2068>
    37d4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    37d8:	20000018 	andcs	r0, r0, r8, lsl r0
    37dc:	13490101 	movtne	r0, #37121	; 0x9101
    37e0:	00001301 	andeq	r1, r0, r1, lsl #6
		    	    case 'x': scanx (lword); break;
    37e4:	49002121 	stmdbmi	r0, {r0, r5, r8, sp}
    37e8:	000b2f13 	andeq	r2, fp, r3, lsl pc
			if ((c = *buf++) == '\0')
    37ec:	00342200 	eorseq	r2, r4, r0, lsl #4
    37f0:	0b3a0e03 	bleq	e87004 <__ccfg+0xe6705c>
			sap = va_arg (ap, char*);
    37f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
			nc++;
    37f8:	00000a1c 	andeq	r0, r0, ip, lsl sl
			break;
    37fc:	49002623 	stmdbmi	r0, {r0, r1, r5, r9, sl, sp}
			while (isspace (*buf)) buf++;
    3800:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    3804:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3808:	0b3a0e03 	bleq	e8701c <__ccfg+0xe67074>
						*sap++ = *buf++;
    380c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3810:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
			while (isspace (*buf)) buf++;
    3814:	05250000 	streq	r0, [r5, #-0]!
    3818:	00134900 	andseq	r4, r3, r0, lsl #18
    381c:	11010000 	mrsne	r0, (UNDEF: 1)
		return 0;
    3820:	130e2501 	movwne	r2, #58625	; 0xe501
    3824:	1b0e030b 	blne	384458 <__ccfg+0x3644b0>
		    case 'x': scanx (word); break;
    3828:	1117550e 	tstne	r7, lr, lsl #10
    382c:	00171001 	andseq	r1, r7, r1
		    	    case 'x': scanx (lword); break;
    3830:	00240200 	eoreq	r0, r4, r0, lsl #4
    3834:	0b3e0b0b 	bleq	f86468 <__ccfg+0xf664c0>
    3838:	00000e03 	andeq	r0, r0, r3, lsl #28
    383c:	03001603 	movweq	r1, #1539	; 0x603
    3840:	3b0b3a0e 	blcc	2d2080 <__ccfg+0x2b20d8>
    3844:	0013490b 	andseq	r4, r3, fp, lsl #18
    3848:	00240400 	eoreq	r0, r4, r0, lsl #8
    384c:	0b3e0b0b 	bleq	f86480 <__ccfg+0xf664d8>
    3850:	00000803 	andeq	r0, r0, r3, lsl #16
    3854:	03002e05 	movweq	r2, #3589	; 0xe05
    3858:	3b0b3a0e 	blcc	2d2098 <__ccfg+0x2b20f0>
    385c:	20192705 	andscs	r2, r9, r5, lsl #14
    3860:	0600000b 	streq	r0, [r0], -fp
    3864:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    3868:	0b3b0b3a 	bleq	ec6558 <__ccfg+0xea65b0>
    386c:	0b201927 	bleq	809d10 <__ccfg+0x7e9d68>
    3870:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
    3874:	3a0e0301 	bcc	384480 <__ccfg+0x3644d8>
    3878:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    387c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3880:	97184006 	ldrls	r4, [r8, -r6]
    3884:	13011942 	movwne	r1, #6466	; 0x1942
    3888:	05080000 	streq	r0, [r8, #-0]
    388c:	3a0e0300 	bcc	384494 <__ccfg+0x3644ec>
    3890:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3894:	00170213 	andseq	r0, r7, r3, lsl r2
    3898:	00340900 	eorseq	r0, r4, r0, lsl #18
    389c:	0b3a0e03 	bleq	e870b0 <__ccfg+0xe67108>
    38a0:	1349053b 	movtne	r0, #38203	; 0x953b
    38a4:	00001702 	andeq	r1, r0, r2, lsl #14
    38a8:	31001d0a 	tstcc	r0, sl, lsl #26
    38ac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    38b0:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    38b4:	0b000005 	bleq	38d0 <NOROM_CPUcpsie>
    38b8:	0111010b 	tsteq	r1, fp, lsl #2
    38bc:	13010612 	movwne	r0, #5650	; 0x1612
    38c0:	890c0000 	stmdbhi	ip, {}	; <UNPREDICTABLE>
    38c4:	11010182 	smlabbne	r1, r2, r1, r0
    38c8:	01133101 	tsteq	r3, r1, lsl #2
    38cc:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    38d0:	0001828a 	andeq	r8, r1, sl, lsl #5
    38d4:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    38d8:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
    38dc:	01018289 	smlabbeq	r1, r9, r2, r8
    38e0:	00000111 	andeq	r0, r0, r1, lsl r1
    38e4:	3f012e0f 	svccc	0x00012e0f
    38e8:	3a0e0319 	bcc	384554 <__ccfg+0x3645ac>
    38ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    38f0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    38f4:	97184006 	ldrls	r4, [r8, -r6]
    38f8:	13011942 	movwne	r1, #6466	; 0x1942
    38fc:	34100000 	ldrcc	r0, [r0], #-0
    3900:	3a0e0300 	bcc	384508 <__ccfg+0x364560>
    3904:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3908:	00170213 	andseq	r0, r7, r3, lsl r2
    390c:	82891100 	addhi	r1, r9, #0, 2
    3910:	01110001 	tsteq	r1, r1
    3914:	00001331 	andeq	r1, r0, r1, lsr r3
    3918:	01828912 	orreq	r8, r2, r2, lsl r9
    391c:	31011101 	tstcc	r1, r1, lsl #2
    3920:	13000013 	movwne	r0, #19
    3924:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3928:	0b3a0e03 	bleq	e8713c <__ccfg+0xe67194>
    392c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3930:	1301193c 	movwne	r1, #6460	; 0x193c
    3934:	05140000 	ldreq	r0, [r4, #-0]
    3938:	00134900 	andseq	r4, r3, r0, lsl #18
    393c:	002e1500 	eoreq	r1, lr, r0, lsl #10
    3940:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3944:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3948:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    394c:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    3950:	03193f00 	tsteq	r9, #0, 30
    3954:	3b0b3a0e 	blcc	2d2194 <__ccfg+0x2b21ec>
    3958:	3c19270b 	ldccc	7, cr2, [r9], {11}
    395c:	00000019 	andeq	r0, r0, r9, lsl r0
    3960:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3964:	030b130e 	movweq	r1, #45838	; 0xb30e
    3968:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    396c:	10011117 	andne	r1, r1, r7, lsl r1
    3970:	02000017 	andeq	r0, r0, #23
    3974:	0b0b0024 	bleq	2c3a0c <__ccfg+0x2a3a64>
    3978:	0e030b3e 	vmoveq.16	d3[0], r0
    397c:	16030000 	strne	r0, [r3], -r0
    3980:	3a0e0300 	bcc	384588 <__ccfg+0x3645e0>
    3984:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3988:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    398c:	0b0b0024 	bleq	2c3a24 <__ccfg+0x2a3a7c>
    3990:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3994:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    3998:	3a0e0301 	bcc	3845a4 <__ccfg+0x3645fc>
    399c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    39a0:	20134919 	andscs	r4, r3, r9, lsl r9
    39a4:	0013010b 	andseq	r0, r3, fp, lsl #2
    39a8:	00050600 	andeq	r0, r5, r0, lsl #12
    39ac:	0b3a0e03 	bleq	e871c0 <__ccfg+0xe67218>
    39b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    39b4:	34070000 	strcc	r0, [r7], #-0
    39b8:	3a0e0300 	bcc	3845c0 <__ccfg+0x364618>
    39bc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    39c0:	08000013 	stmdaeq	r0, {r0, r1, r4}
    39c4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    39c8:	0b3a0e03 	bleq	e871dc <__ccfg+0xe67234>
    39cc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    39d0:	0b201349 	bleq	8086fc <__ccfg+0x7e8754>
    39d4:	00001301 	andeq	r1, r0, r1, lsl #6
    39d8:	03000509 	movweq	r0, #1289	; 0x509
    39dc:	3b0b3a0e 	blcc	2d221c <__ccfg+0x2b2274>
    39e0:	00134905 	andseq	r4, r3, r5, lsl #18
    39e4:	00340a00 	eorseq	r0, r4, r0, lsl #20
    39e8:	0b3a0e03 	bleq	e871fc <__ccfg+0xe67254>
    39ec:	1349053b 	movtne	r0, #38203	; 0x953b
    39f0:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
    39f4:	3a0e0300 	bcc	3845fc <__ccfg+0x364654>
    39f8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    39fc:	000b2019 	andeq	r2, fp, r9, lsl r0
    3a00:	012e0c00 			; <UNDEFINED> instruction: 0x012e0c00
    3a04:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3a08:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3a0c:	01111927 	tsteq	r1, r7, lsr #18
    3a10:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3a14:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3a18:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    3a1c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3a20:	0b3b0b3a 	bleq	ec6710 <__ccfg+0xea6768>
    3a24:	17021349 	strne	r1, [r2, -r9, asr #6]
    3a28:	340e0000 	strcc	r0, [lr], #-0
    3a2c:	3a0e0300 	bcc	384634 <__ccfg+0x36468c>
    3a30:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3a34:	00180213 	andseq	r0, r8, r3, lsl r2
    3a38:	00340f00 	eorseq	r0, r4, r0, lsl #30
    3a3c:	0b3a0e03 	bleq	e87250 <__ccfg+0xe672a8>
    3a40:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3a44:	00001702 	andeq	r1, r0, r2, lsl #14
    3a48:	31011d10 	tstcc	r1, r0, lsl sp
    3a4c:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    3a50:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    3a54:	0013010b 	andseq	r0, r3, fp, lsl #2
    3a58:	00051100 	andeq	r1, r5, r0, lsl #2
    3a5c:	00001331 	andeq	r1, r0, r1, lsr r3
    3a60:	55010b12 	strpl	r0, [r1, #-2834]	; 0xfffff4ee
    3a64:	13000017 	movwne	r0, #23
    3a68:	13310034 	teqne	r1, #52	; 0x34
    3a6c:	00001802 	andeq	r1, r0, r2, lsl #16
    3a70:	31011d14 	tstcc	r1, r4, lsl sp
    3a74:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3a78:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3a7c:	1500000b 	strne	r0, [r0, #-11]
    3a80:	0111010b 	tsteq	r1, fp, lsl #2
    3a84:	00000612 	andeq	r0, r0, r2, lsl r6
    3a88:	31003416 	tstcc	r0, r6, lsl r4
    3a8c:	00170213 	andseq	r0, r7, r3, lsl r2
    3a90:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
    3a94:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3a98:	0b3b0b3a 	bleq	ec6788 <__ccfg+0xea67e0>
    3a9c:	01111927 	tsteq	r1, r7, lsr #18
    3aa0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3aa4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3aa8:	18000013 	stmdane	r0, {r0, r1, r4}
    3aac:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3ab0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3ab4:	0b590b58 	bleq	164681c <__ccfg+0x1626874>
    3ab8:	00001301 	andeq	r1, r0, r1, lsl #6
    3abc:	01828919 	orreq	r8, r2, r9, lsl r9
    3ac0:	31011101 	tstcc	r1, r1, lsl #2
    3ac4:	1a000013 	bne	3b18 <NOROM_RFCRfTrimRead+0x98>
    3ac8:	0001828a 	andeq	r8, r1, sl, lsl #5
    3acc:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    3ad0:	1b000018 	blne	3b38 <NOROM_RFCRfTrimRead+0xb8>
    3ad4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3ad8:	0b3a0e03 	bleq	e872ec <__ccfg+0xe67344>
    3adc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3ae0:	01111349 	tsteq	r1, r9, asr #6
    3ae4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3ae8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3aec:	1c000013 	stcne	0, cr0, [r0], {19}
    3af0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3af4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3af8:	17021349 	strne	r1, [r2, -r9, asr #6]
    3afc:	341d0000 	ldrcc	r0, [sp], #-0
    3b00:	3a0e0300 	bcc	384708 <__ccfg+0x364760>
    3b04:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3b08:	00170213 	andseq	r0, r7, r3, lsl r2
    3b0c:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
    3b10:	01111331 	tsteq	r1, r1, lsr r3
    3b14:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3b18:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3b1c:	1f000013 	svcne	0x00000013
    3b20:	13310005 	teqne	r1, #5
    3b24:	00001702 	andeq	r1, r0, r2, lsl #14
    3b28:	31003420 	tstcc	r0, r0, lsr #8
    3b2c:	21000013 	tstcs	r0, r3, lsl r0
    3b30:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3b34:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3b38:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    3b3c:	00001301 	andeq	r1, r0, r1, lsl #6
    3b40:	01828922 	orreq	r8, r2, r2, lsr #18
    3b44:	31011101 	tstcc	r1, r1, lsl #2
    3b48:	00130113 	andseq	r0, r3, r3, lsl r1
    3b4c:	82892300 	addhi	r2, r9, #0, 6
    3b50:	01110001 	tsteq	r1, r1
    3b54:	00001331 	andeq	r1, r0, r1, lsr r3
    3b58:	01828924 	orreq	r8, r2, r4, lsr #18
    3b5c:	93011101 	movwls	r1, #4353	; 0x1101
    3b60:	13011842 	movwne	r1, #6210	; 0x1842
    3b64:	1d250000 	stcne	0, cr0, [r5, #-0]
    3b68:	11133100 	tstne	r3, r0, lsl #2
    3b6c:	58061201 	stmdapl	r6, {r0, r9, ip}
    3b70:	0005590b 	andeq	r5, r5, fp, lsl #18
    3b74:	82892600 	addhi	r2, r9, #0, 12
    3b78:	01110101 	tsteq	r1, r1, lsl #2
    3b7c:	00001301 	andeq	r1, r0, r1, lsl #6
    3b80:	3f012e27 	svccc	0x00012e27
    3b84:	3a0e0319 	bcc	3847f0 <__ccfg+0x364848>
    3b88:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3b8c:	01193c19 	tsteq	r9, r9, lsl ip
    3b90:	28000013 	stmdacs	r0, {r0, r1, r4}
    3b94:	13490005 	movtne	r0, #36869	; 0x9005
    3b98:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
    3b9c:	03193f01 	tsteq	r9, #1, 30
    3ba0:	3b0b3a0e 	blcc	2d23e0 <__ccfg+0x2b2438>
    3ba4:	3c19270b 	ldccc	7, cr2, [r9], {11}
    3ba8:	00130119 	andseq	r0, r3, r9, lsl r1
    3bac:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
    3bb0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3bb4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3bb8:	13491927 	movtne	r1, #39207	; 0x9927
    3bbc:	0000193c 	andeq	r1, r0, ip, lsr r9
    3bc0:	01110100 	tsteq	r1, r0, lsl #2
    3bc4:	0b130e25 	bleq	4c7460 <__ccfg+0x4a74b8>
    3bc8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    3bcc:	01111755 	tsteq	r1, r5, asr r7
    3bd0:	00001710 	andeq	r1, r0, r0, lsl r7
    3bd4:	03001602 	movweq	r1, #1538	; 0x602
    3bd8:	3b0b3a0e 	blcc	2d2418 <__ccfg+0x2b2470>
    3bdc:	0013490b 	andseq	r4, r3, fp, lsl #18
    3be0:	00240300 	eoreq	r0, r4, r0, lsl #6
    3be4:	0b3e0b0b 	bleq	f86818 <__ccfg+0xf66870>
    3be8:	00000e03 	andeq	r0, r0, r3, lsl #28
    3bec:	0b002404 	bleq	cc04 <__exidx_end+0x71e0>
    3bf0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3bf4:	05000008 	streq	r0, [r0, #-8]
    3bf8:	0b0b000f 	bleq	2c3c3c <__ccfg+0x2a3c94>
    3bfc:	00001349 	andeq	r1, r0, r9, asr #6
    3c00:	27001506 	strcs	r1, [r0, -r6, lsl #10]
    3c04:	07000019 	smladeq	r0, r9, r0, r0
    3c08:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    3c0c:	00001301 	andeq	r1, r0, r1, lsl #6
    3c10:	49000508 	stmdbmi	r0, {r3, r8, sl}
    3c14:	09000013 	stmdbeq	r0, {r0, r1, r4}
    3c18:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    3c1c:	13011349 	movwne	r1, #4937	; 0x1349
    3c20:	150a0000 	strne	r0, [sl, #-0]
    3c24:	49192700 	ldmdbmi	r9, {r8, r9, sl, sp}
    3c28:	0b000013 	bleq	3c7c <NOROM_RFCRTrim+0xac>
    3c2c:	0b0b0113 	bleq	2c4080 <__ccfg+0x2a40d8>
    3c30:	0b3b0b3a 	bleq	ec6920 <__ccfg+0xea6978>
    3c34:	00001301 	andeq	r1, r0, r1, lsl #6
    3c38:	03000d0c 	movweq	r0, #3340	; 0xd0c
    3c3c:	3b0b3a0e 	blcc	2d247c <__ccfg+0x2b24d4>
    3c40:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    3c44:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    3c48:	0e03012e 	adfeqsp	f0, f3, #0.5
    3c4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3c50:	0b201927 	bleq	80a0f4 <__ccfg+0x7ea14c>
    3c54:	00001301 	andeq	r1, r0, r1, lsl #6
    3c58:	0300050e 	movweq	r0, #1294	; 0x50e
    3c5c:	3b0b3a0e 	blcc	2d249c <__ccfg+0x2b24f4>
    3c60:	00134905 	andseq	r4, r3, r5, lsl #18
    3c64:	002e0f00 	eoreq	r0, lr, r0, lsl #30
    3c68:	0b3a0e03 	bleq	e8747c <__ccfg+0xe674d4>
    3c6c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3c70:	0b201349 	bleq	80899c <__ccfg+0x7e89f4>
    3c74:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    3c78:	3a0e0300 	bcc	384880 <__ccfg+0x3648d8>
    3c7c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3c80:	000b2019 	andeq	r2, fp, r9, lsl r0
    3c84:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
    3c88:	0b3a0e03 	bleq	e8749c <__ccfg+0xe674f4>
    3c8c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3c90:	0b201349 	bleq	8089bc <__ccfg+0x7e8a14>
    3c94:	00001301 	andeq	r1, r0, r1, lsl #6
    3c98:	03000512 	movweq	r0, #1298	; 0x512
    3c9c:	3b0b3a0e 	blcc	2d24dc <__ccfg+0x2b2534>
    3ca0:	0013490b 	andseq	r4, r3, fp, lsl #18
    3ca4:	00341300 	eorseq	r1, r4, r0, lsl #6
    3ca8:	0b3a0e03 	bleq	e874bc <__ccfg+0xe67514>
    3cac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3cb0:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    3cb4:	03193f01 	tsteq	r9, #1, 30
    3cb8:	3b0b3a0e 	blcc	2d24f8 <__ccfg+0x2b2550>
    3cbc:	1119270b 	tstne	r9, fp, lsl #14
    3cc0:	40061201 	andmi	r1, r6, r1, lsl #4
    3cc4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3cc8:	00001301 	andeq	r1, r0, r1, lsl #6
    3ccc:	03003415 	movweq	r3, #1045	; 0x415
    3cd0:	3b0b3a0e 	blcc	2d2510 <__ccfg+0x2b2568>
    3cd4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3cd8:	16000017 			; <UNDEFINED> instruction: 0x16000017
    3cdc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3ce0:	0b3b0b3a 	bleq	ec69d0 <__ccfg+0xea6a28>
    3ce4:	051c1349 	ldreq	r1, [ip, #-841]	; 0xfffffcb7
    3ce8:	1d170000 	ldcne	0, cr0, [r7, #-0]
    3cec:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    3cf0:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    3cf4:	010b590b 	tsteq	fp, fp, lsl #18
    3cf8:	18000013 	stmdane	r0, {r0, r1, r4}
    3cfc:	13310005 	teqne	r1, #5
    3d00:	00000b1c 	andeq	r0, r0, ip, lsl fp
    3d04:	31001d19 	tstcc	r0, r9, lsl sp
    3d08:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3d0c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3d10:	1a00000b 	bne	3d44 <TrimAfterColdResetWakeupFromShutDown+0x20>
    3d14:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3d18:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3d1c:	0b590b58 	bleq	1646a84 <__ccfg+0x1626adc>
    3d20:	00001301 	andeq	r1, r0, r1, lsl #6
    3d24:	0182891b 	orreq	r8, r2, fp, lsl r9
    3d28:	31011100 	mrscc	r1, (UNDEF: 17)
    3d2c:	1c000013 	stcne	0, cr0, [r0], {19}
    3d30:	01018289 	smlabbeq	r1, r9, r2, r8
    3d34:	13010111 	movwne	r0, #4369	; 0x1111
    3d38:	8a1d0000 	bhi	743d40 <__ccfg+0x723d98>
    3d3c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    3d40:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    3d44:	891e0000 	ldmdbhi	lr, {}	; <UNPREDICTABLE>
    3d48:	11010182 	smlabbne	r1, r2, r1, r0
    3d4c:	01133101 	tsteq	r3, r1, lsl #2
    3d50:	1f000013 	svcne	0x00000013
    3d54:	01018289 	smlabbeq	r1, r9, r2, r8
    3d58:	00000111 	andeq	r0, r0, r1, lsl r1
    3d5c:	3f012e20 	svccc	0x00012e20
    3d60:	3a0e0319 	bcc	3849cc <__ccfg+0x364a24>
    3d64:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3d68:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3d6c:	97184006 	ldrls	r4, [r8, -r6]
    3d70:	13011942 	movwne	r1, #6466	; 0x1942
    3d74:	05210000 	streq	r0, [r1, #-0]!
    3d78:	3a0e0300 	bcc	384980 <__ccfg+0x3649d8>
    3d7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3d80:	00170213 	andseq	r0, r7, r3, lsl r2
    3d84:	00342200 	eorseq	r2, r4, r0, lsl #4
    3d88:	0b3a0e03 	bleq	e8759c <__ccfg+0xe675f4>
    3d8c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3d90:	00001802 	andeq	r1, r0, r2, lsl #16
    3d94:	03003423 	movweq	r3, #1059	; 0x423
    3d98:	3b0b3a08 	blcc	2d25c0 <__ccfg+0x2b2618>
    3d9c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3da0:	24000017 	strcs	r0, [r0], #-23	; 0xffffffe9
    3da4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    3da8:	0b3b0b3a 	bleq	ec6a98 <__ccfg+0xea6af0>
    3dac:	00001349 	andeq	r1, r0, r9, asr #6
    3db0:	11010b25 	tstne	r1, r5, lsr #22
    3db4:	01061201 	tsteq	r6, r1, lsl #4
    3db8:	26000013 			; <UNDEFINED> instruction: 0x26000013
    3dbc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3dc0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3dc4:	17021349 	strne	r1, [r2, -r9, asr #6]
    3dc8:	1d270000 	stcne	0, cr0, [r7, #-0]
    3dcc:	11133101 	tstne	r3, r1, lsl #2
    3dd0:	58061201 	stmdapl	r6, {r0, r9, ip}
    3dd4:	0105590b 	tsteq	r5, fp, lsl #18
    3dd8:	28000013 	stmdacs	r0, {r0, r1, r4}
    3ddc:	13310005 	teqne	r1, #5
    3de0:	0b290000 	bleq	a43de8 <__ccfg+0xa23e40>
    3de4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    3de8:	2a000006 	bcs	3e08 <NOROM_SetupTrimDevice+0x10>
    3dec:	13310034 	teqne	r1, #52	; 0x34
    3df0:	00001702 	andeq	r1, r0, r2, lsl #14
    3df4:	31011d2b 	tstcc	r1, fp, lsr #26
    3df8:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    3dfc:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    3e00:	00130105 	andseq	r0, r3, r5, lsl #2
    3e04:	010b2c00 	tsteq	fp, r0, lsl #24
    3e08:	00001755 	andeq	r1, r0, r5, asr r7
    3e0c:	4900262d 	stmdbmi	r0, {r0, r2, r3, r5, r9, sl, sp}
    3e10:	2e000013 	mcrcs	0, 0, r0, cr0, cr3, {0}
    3e14:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3e18:	0b3a0e03 	bleq	e8762c <__ccfg+0xe67684>
    3e1c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3e20:	01111349 	tsteq	r1, r9, asr #6
    3e24:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3e28:	00194297 	mulseq	r9, r7, r2
    3e2c:	01012f00 	tsteq	r1, r0, lsl #30
    3e30:	13011349 	movwne	r1, #4937	; 0x1349
    3e34:	21300000 	teqcs	r0, r0
    3e38:	2f134900 	svccs	0x00134900
    3e3c:	3100000b 	tstcc	r0, fp
    3e40:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3e44:	0b3a0e03 	bleq	e87658 <__ccfg+0xe676b0>
    3e48:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3e4c:	1301193c 	movwne	r1, #6460	; 0x193c
    3e50:	2e320000 	cdpcs	0, 3, cr0, cr2, cr0, {0}
    3e54:	03193f01 	tsteq	r9, #1, 30
    3e58:	3b0b3a0e 	blcc	2d2698 <__ccfg+0x2b26f0>
    3e5c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3e60:	01193c13 	tsteq	r9, r3, lsl ip
    3e64:	33000013 	movwcc	r0, #19
    3e68:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3e6c:	0b3a0e03 	bleq	e87680 <__ccfg+0xe676d8>
    3e70:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3e74:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    3e78:	01000000 	mrseq	r0, (UNDEF: 0)
    3e7c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    3e80:	0e030b13 	vmoveq.32	d3[0], r0
    3e84:	17550e1b 	smmlane	r5, fp, lr, r0
    3e88:	17100111 			; <UNDEFINED> instruction: 0x17100111
    3e8c:	24020000 	strcs	r0, [r2], #-0
    3e90:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3e94:	000e030b 	andeq	r0, lr, fp, lsl #6
    3e98:	00160300 	andseq	r0, r6, r0, lsl #6
    3e9c:	0b3a0e03 	bleq	e876b0 <__ccfg+0xe67708>
    3ea0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3ea4:	24040000 	strcs	r0, [r4], #-0
    3ea8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3eac:	0008030b 	andeq	r0, r8, fp, lsl #6
    3eb0:	01040500 	tsteq	r4, r0, lsl #10
    3eb4:	0b3a0b0b 	bleq	e86ae8 <__ccfg+0xe66b40>
    3eb8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    3ebc:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
    3ec0:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    3ec4:	0700000d 	streq	r0, [r0, -sp]
    3ec8:	0b0b0104 	bleq	2c42e0 <__ccfg+0x2a4338>
    3ecc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3ed0:	00001301 	andeq	r1, r0, r1, lsl #6
    3ed4:	03001608 	movweq	r1, #1544	; 0x608
    3ed8:	3b0b3a0e 	blcc	2d2718 <__ccfg+0x2b2770>
    3edc:	00134905 	andseq	r4, r3, r5, lsl #18
    3ee0:	002e0900 	eoreq	r0, lr, r0, lsl #18
    3ee4:	0b3a0e03 	bleq	e876f8 <__ccfg+0xe67750>
    3ee8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3eec:	0b201349 	bleq	808c18 <__ccfg+0x7e8c70>
    3ef0:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
    3ef4:	03193f01 	tsteq	r9, #1, 30
    3ef8:	3b0b3a0e 	blcc	2d2738 <__ccfg+0x2b2790>
    3efc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3f00:	010b2013 	tsteq	fp, r3, lsl r0
    3f04:	0b000013 	bleq	3f58 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x40>
    3f08:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3f0c:	0b3b0b3a 	bleq	ec6bfc <__ccfg+0xea6c54>
    3f10:	00001349 	andeq	r1, r0, r9, asr #6
    3f14:	3f002e0c 	svccc	0x00002e0c
    3f18:	3a0e0319 	bcc	384b84 <__ccfg+0x364bdc>
    3f1c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3f20:	11134919 	tstne	r3, r9, lsl r9
    3f24:	40061201 	andmi	r1, r6, r1, lsl #4
    3f28:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3f2c:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    3f30:	03193f01 	tsteq	r9, #1, 30
    3f34:	3b0b3a0e 	blcc	2d2774 <__ccfg+0x2b27cc>
    3f38:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3f3c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3f40:	97184006 	ldrls	r4, [r8, -r6]
    3f44:	13011942 	movwne	r1, #6466	; 0x1942
    3f48:	340e0000 	strcc	r0, [lr], #-0
    3f4c:	3a0e0300 	bcc	384b54 <__ccfg+0x364bac>
    3f50:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3f54:	00170213 	andseq	r0, r7, r3, lsl r2
    3f58:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
    3f5c:	01111331 	tsteq	r1, r1, lsr r3
    3f60:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3f64:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3f68:	10000013 	andne	r0, r0, r3, lsl r0
    3f6c:	13310034 	teqne	r1, #52	; 0x34
    3f70:	00001702 	andeq	r1, r0, r2, lsl #14
    3f74:	11010b11 	tstne	r1, r1, lsl fp
    3f78:	00061201 	andeq	r1, r6, r1, lsl #4
    3f7c:	00341200 	eorseq	r1, r4, r0, lsl #4
    3f80:	00001331 	andeq	r1, r0, r1, lsr r3
    3f84:	31001d13 	tstcc	r0, r3, lsl sp
    3f88:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3f8c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3f90:	1400000b 	strne	r0, [r0], #-11
    3f94:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3f98:	0b3a0e03 	bleq	e877ac <__ccfg+0xe67804>
    3f9c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3fa0:	01111349 	tsteq	r1, r9, asr #6
    3fa4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3fa8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3fac:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    3fb0:	00018289 	andeq	r8, r1, r9, lsl #5
    3fb4:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3fb8:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    3fbc:	3a0e0301 	bcc	384bc8 <__ccfg+0x364c20>
    3fc0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3fc4:	20134919 	andscs	r4, r3, r9, lsl r9
    3fc8:	0013010b 	andseq	r0, r3, fp, lsl #2
    3fcc:	00341700 	eorseq	r1, r4, r0, lsl #14
    3fd0:	0b3a0e03 	bleq	e877e4 <__ccfg+0xe6783c>
    3fd4:	1349053b 	movtne	r0, #38203	; 0x953b
    3fd8:	34180000 	ldrcc	r0, [r8], #-0
    3fdc:	3a0e0300 	bcc	384be4 <__ccfg+0x364c3c>
    3fe0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3fe4:	00180213 	andseq	r0, r8, r3, lsl r2
    3fe8:	001d1900 	andseq	r1, sp, r0, lsl #18
    3fec:	01521331 	cmpeq	r2, r1, lsr r3
    3ff0:	0b581755 	bleq	1609d4c <__ccfg+0x15e9da4>
    3ff4:	00000b59 	andeq	r0, r0, r9, asr fp
    3ff8:	31011d1a 	tstcc	r1, sl, lsl sp
    3ffc:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    4000:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    4004:	0013010b 	andseq	r0, r3, fp, lsl #2
    4008:	010b1b00 	tsteq	fp, r0, lsl #22
    400c:	00001755 	andeq	r1, r0, r5, asr r7
    4010:	3f012e1c 	svccc	0x00012e1c
    4014:	3a0e0319 	bcc	384c80 <__ccfg+0x364cd8>
    4018:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    401c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    4020:	97184006 	ldrls	r4, [r8, -r6]
    4024:	00001942 	andeq	r1, r0, r2, asr #18
    4028:	31011d1d 	tstcc	r1, sp, lsl sp
    402c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4030:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    4034:	0013010b 	andseq	r0, r3, fp, lsl #2
    4038:	011d1e00 	tsteq	sp, r0, lsl #28
    403c:	01111331 	tsteq	r1, r1, lsr r3
    4040:	0b580612 	bleq	1605890 <__ccfg+0x15e58e8>
    4044:	00000b59 	andeq	r0, r0, r9, asr fp
    4048:	01110100 	tsteq	r1, r0, lsl #2
    404c:	0b130e25 	bleq	4c78e8 <__ccfg+0x4a7940>
    4050:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    4054:	01111755 	tsteq	r1, r5, asr r7
    4058:	00001710 	andeq	r1, r0, r0, lsl r7
    405c:	0b002402 	bleq	d06c <__exidx_end+0x7648>
    4060:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    4064:	0300000e 	movweq	r0, #14
    4068:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    406c:	0b3b0b3a 	bleq	ec6d5c <__ccfg+0xea6db4>
    4070:	00001349 	andeq	r1, r0, r9, asr #6
    4074:	0b002404 	bleq	d08c <__exidx_end+0x7668>
    4078:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    407c:	05000008 	streq	r0, [r0, #-8]
    4080:	0e03012e 	adfeqsp	f0, f3, #0.5
    4084:	0b3b0b3a 	bleq	ec6d74 <__ccfg+0xea6dcc>
    4088:	0b201927 	bleq	80a52c <__ccfg+0x7ea584>
    408c:	00001301 	andeq	r1, r0, r1, lsl #6
    4090:	03000506 	movweq	r0, #1286	; 0x506
    4094:	3b0b3a0e 	blcc	2d28d4 <__ccfg+0x2b292c>
    4098:	0013490b 	andseq	r4, r3, fp, lsl #18
    409c:	00340700 	eorseq	r0, r4, r0, lsl #14
    40a0:	0b3a0e03 	bleq	e878b4 <__ccfg+0xe6790c>
    40a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    40a8:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    40ac:	3a0e0301 	bcc	384cb8 <__ccfg+0x364d10>
    40b0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    40b4:	20134919 	andscs	r4, r3, r9, lsl r9
    40b8:	0013010b 	andseq	r0, r3, fp, lsl #2
    40bc:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
    40c0:	01111331 	tsteq	r1, r1, lsr r3
    40c4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    40c8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    40cc:	0a000013 	beq	4120 <NOROM_SetupGetTrimForXoscHfCtl+0x24>
    40d0:	13310005 	teqne	r1, #5
    40d4:	00001702 	andeq	r1, r0, r2, lsl #14
    40d8:	3100340b 	tstcc	r0, fp, lsl #8
    40dc:	00170213 	andseq	r0, r7, r3, lsl r2
    40e0:	00050c00 	andeq	r0, r5, r0, lsl #24
    40e4:	0b1c1331 	bleq	708db0 <__ccfg+0x6e8e08>
    40e8:	890d0000 	stmdbhi	sp, {}	; <UNPREDICTABLE>
    40ec:	11000182 	smlabbne	r0, r2, r1, r0
    40f0:	00133101 	andseq	r3, r3, r1, lsl #2
    40f4:	82890e00 	addhi	r0, r9, #0, 28
    40f8:	01110001 	tsteq	r1, r1
    40fc:	31194295 			; <UNDEFINED> instruction: 0x31194295
    4100:	0f000013 	svceq	0x00000013
    4104:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4108:	0b3a0e03 	bleq	e8791c <__ccfg+0xe67974>
    410c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    4110:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4114:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    4118:	00130119 	andseq	r0, r3, r9, lsl r1
    411c:	00051000 	andeq	r1, r5, r0
    4120:	0b3a0e03 	bleq	e87934 <__ccfg+0xe6798c>
    4124:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    4128:	00001702 	andeq	r1, r0, r2, lsl #14
    412c:	01828911 	orreq	r8, r2, r1, lsl r9
    4130:	95011101 	strls	r1, [r1, #-257]	; 0xfffffeff
    4134:	13311942 	teqne	r1, #1081344	; 0x108000
    4138:	8a120000 	bhi	484140 <__ccfg+0x464198>
    413c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    4140:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    4144:	34130000 	ldrcc	r0, [r3], #-0
    4148:	3a0e0300 	bcc	384d50 <__ccfg+0x364da8>
    414c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4150:	00170213 	andseq	r0, r7, r3, lsl r2
    4154:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
    4158:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    415c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4160:	13491927 	movtne	r1, #39207	; 0x9927
    4164:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4168:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    416c:	00130119 	andseq	r0, r3, r9, lsl r1
    4170:	011d1500 	tsteq	sp, r0, lsl #10
    4174:	01111331 	tsteq	r1, r1, lsr r3
    4178:	0b580612 	bleq	16059c8 <__ccfg+0x15e5a20>
    417c:	00000b59 	andeq	r0, r0, r9, asr fp
    4180:	11010b16 	tstne	r1, r6, lsl fp
    4184:	00061201 	andeq	r1, r6, r1, lsl #4
    4188:	002e1700 	eoreq	r1, lr, r0, lsl #14
    418c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    4190:	0b3b0b3a 	bleq	ec6e80 <__ccfg+0xea6ed8>
    4194:	13491927 	movtne	r1, #39207	; 0x9927
    4198:	0000193c 	andeq	r1, r0, ip, lsr r9
    419c:	01110100 	tsteq	r1, r0, lsl #2
    41a0:	0b130e25 	bleq	4c7a3c <__ccfg+0x4a7a94>
    41a4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    41a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    41ac:	00001710 	andeq	r1, r0, r0, lsl r7
    41b0:	0b002402 	bleq	d1c0 <__exidx_end+0x779c>
    41b4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    41b8:	03000008 	movweq	r0, #8
    41bc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    41c0:	0b3b0b3a 	bleq	ec6eb0 <__ccfg+0xea6f08>
    41c4:	13490b39 	movtne	r0, #39737	; 0x9b39
    41c8:	24040000 	strcs	r0, [r4], #-0
    41cc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    41d0:	000e030b 	andeq	r0, lr, fp, lsl #6
    41d4:	00160500 	andseq	r0, r6, r0, lsl #10
    41d8:	0b3a0e03 	bleq	e879ec <__ccfg+0xe67a44>
    41dc:	0b39053b 	bleq	e456d0 <__ccfg+0xe25728>
    41e0:	00001349 	andeq	r1, r0, r9, asr #6
    41e4:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
    41e8:	07000013 	smladeq	r0, r3, r0, r0
    41ec:	0b0b0117 	bleq	2c4650 <__ccfg+0x2a46a8>
    41f0:	0b3b0b3a 	bleq	ec6ee0 <__ccfg+0xea6f38>
    41f4:	13010b39 	movwne	r0, #6969	; 0x1b39
    41f8:	0d080000 	stceq	0, cr0, [r8, #-0]
    41fc:	3a0e0300 	bcc	384e04 <__ccfg+0x364e5c>
    4200:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4204:	0013490b 	andseq	r4, r3, fp, lsl #18
    4208:	01010900 	tsteq	r1, r0, lsl #18
    420c:	13011349 	movwne	r1, #4937	; 0x1349
    4210:	210a0000 	mrscs	r0, (UNDEF: 10)
    4214:	2f134900 	svccs	0x00134900
    4218:	0b00000b 	bleq	424c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xc4>
    421c:	0b0b0113 	bleq	2c4670 <__ccfg+0x2a46c8>
    4220:	0b3b0b3a 	bleq	ec6f10 <__ccfg+0xea6f68>
    4224:	13010b39 	movwne	r0, #6969	; 0x1b39
    4228:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    422c:	3a0e0300 	bcc	384e34 <__ccfg+0x364e8c>
    4230:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4234:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4238:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    423c:	0b0b000f 	bleq	2c4280 <__ccfg+0x2a42d8>
    4240:	370e0000 	strcc	r0, [lr, -r0]
    4244:	00134900 	andseq	r4, r3, r0, lsl #18
    4248:	01130f00 	tsteq	r3, r0, lsl #30
    424c:	0b0b0e03 	bleq	2c7a60 <__ccfg+0x2a7ab8>
    4250:	0b3b0b3a 	bleq	ec6f40 <__ccfg+0xea6f98>
    4254:	13010b39 	movwne	r0, #6969	; 0x1b39
    4258:	0d100000 	ldceq	0, cr0, [r0, #-0]
    425c:	3a080300 	bcc	204e64 <__ccfg+0x1e4ebc>
    4260:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4264:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4268:	1100000b 	tstne	r0, fp
    426c:	0b0b000f 	bleq	2c42b0 <__ccfg+0x2a4308>
    4270:	00001349 	andeq	r1, r0, r9, asr #6
    4274:	03011312 	movweq	r1, #4882	; 0x1312
    4278:	3a050b0e 	bcc	146eb8 <__ccfg+0x126f10>
    427c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4280:	0013010b 	andseq	r0, r3, fp, lsl #2
    4284:	000d1300 	andeq	r1, sp, r0, lsl #6
    4288:	0b3a0e03 	bleq	e87a9c <__ccfg+0xe67af4>
    428c:	0b390b3b 	bleq	e46f80 <__ccfg+0xe26fd8>
    4290:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    4294:	15140000 	ldrne	r0, [r4, #-0]
    4298:	00192700 	andseq	r2, r9, r0, lsl #14
    429c:	01151500 	tsteq	r5, r0, lsl #10
    42a0:	13491927 	movtne	r1, #39207	; 0x9927
    42a4:	00001301 	andeq	r1, r0, r1, lsl #6
    42a8:	49000516 	stmdbmi	r0, {r1, r2, r4, r8, sl}
    42ac:	17000013 	smladne	r0, r3, r0, r0
    42b0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    42b4:	0b3a050b 	bleq	e856e8 <__ccfg+0xe65740>
    42b8:	0b39053b 	bleq	e457ac <__ccfg+0xe25804>
    42bc:	00001301 	andeq	r1, r0, r1, lsl #6
    42c0:	03000d18 	movweq	r0, #3352	; 0xd18
    42c4:	3b0b3a0e 	blcc	2d2b04 <__ccfg+0x2b2b5c>
    42c8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    42cc:	000b3813 	andeq	r3, fp, r3, lsl r8
    42d0:	000d1900 	andeq	r1, sp, r0, lsl #18
    42d4:	0b3a0e03 	bleq	e87ae8 <__ccfg+0xe67b40>
    42d8:	0b39053b 	bleq	e457cc <__ccfg+0xe25824>
    42dc:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    42e0:	131a0000 	tstne	sl, #0
    42e4:	0b0e0301 	bleq	384ef0 <__ccfg+0x364f48>
    42e8:	3b0b3a0b 	blcc	2d2b1c <__ccfg+0x2b2b74>
    42ec:	010b3905 	tsteq	fp, r5, lsl #18
    42f0:	1b000013 	blne	4344 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x20>
    42f4:	0b0b0113 	bleq	2c4748 <__ccfg+0x2a47a0>
    42f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    42fc:	13010b39 	movwne	r0, #6969	; 0x1b39
    4300:	171c0000 	ldrne	r0, [ip, -r0]
    4304:	3a0b0b01 	bcc	2c6f10 <__ccfg+0x2a6f68>
    4308:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    430c:	0013010b 	andseq	r0, r3, fp, lsl #2
    4310:	000d1d00 	andeq	r1, sp, r0, lsl #26
    4314:	0b3a0e03 	bleq	e87b28 <__ccfg+0xe67b80>
    4318:	0b39053b 	bleq	e4580c <__ccfg+0xe25864>
    431c:	00001349 	andeq	r1, r0, r9, asr #6
    4320:	2701151e 	smladcs	r1, lr, r5, r1
    4324:	00130119 	andseq	r0, r3, r9, lsl r1
    4328:	00341f00 	eorseq	r1, r4, r0, lsl #30
    432c:	0b3a0e03 	bleq	e87b40 <__ccfg+0xe67b98>
    4330:	0b39053b 	bleq	e45824 <__ccfg+0xe2587c>
    4334:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    4338:	0000193c 	andeq	r1, r0, ip, lsr r9
    433c:	00002620 	andeq	r2, r0, r0, lsr #12
    4340:	00342100 	eorseq	r2, r4, r0, lsl #2
    4344:	0b3a0e03 	bleq	e87b58 <__ccfg+0xe67bb0>
    4348:	0b390b3b 	bleq	e4703c <__ccfg+0xe27094>
    434c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    4350:	0000193c 	andeq	r1, r0, ip, lsr r9
    4354:	3f012e22 	svccc	0x00012e22
    4358:	3a0e0319 	bcc	384fc4 <__ccfg+0x36501c>
    435c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4360:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    4364:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4368:	97184006 	ldrls	r4, [r8, -r6]
    436c:	13011942 	movwne	r1, #6466	; 0x1942
    4370:	05230000 	streq	r0, [r3, #-0]!
    4374:	3a0e0300 	bcc	384f7c <__ccfg+0x364fd4>
    4378:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    437c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4380:	24000018 	strcs	r0, [r0], #-24	; 0xffffffe8
    4384:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    4388:	0b3b0b3a 	bleq	ec7078 <__ccfg+0xea70d0>
    438c:	13490b39 	movtne	r0, #39737	; 0x9b39
    4390:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    4394:	25000017 	strcs	r0, [r0, #-23]	; 0xffffffe9
    4398:	08030034 	stmdaeq	r3, {r2, r4, r5}
    439c:	0b3b0b3a 	bleq	ec708c <__ccfg+0xea70e4>
    43a0:	13490b39 	movtne	r0, #39737	; 0x9b39
    43a4:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    43a8:	26000017 			; <UNDEFINED> instruction: 0x26000017
    43ac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    43b0:	0b3b0b3a 	bleq	ec70a0 <__ccfg+0xea70f8>
    43b4:	13490b39 	movtne	r0, #39737	; 0x9b39
    43b8:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    43bc:	00000017 	andeq	r0, r0, r7, lsl r0
    43c0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    43c4:	030b130e 	movweq	r1, #45838	; 0xb30e
    43c8:	110e1b0e 	tstne	lr, lr, lsl #22
    43cc:	10061201 	andne	r1, r6, r1, lsl #4
    43d0:	02000017 	andeq	r0, r0, #23
    43d4:	0b0b0024 	bleq	2c446c <__ccfg+0x2a44c4>
    43d8:	0e030b3e 	vmoveq.16	d3[0], r0
    43dc:	24030000 	strcs	r0, [r3], #-0
    43e0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    43e4:	0008030b 	andeq	r0, r8, fp, lsl #6
    43e8:	00160400 	andseq	r0, r6, r0, lsl #8
    43ec:	0b3a0e03 	bleq	e87c00 <__ccfg+0xe67c58>
    43f0:	0b39053b 	bleq	e458e4 <__ccfg+0xe2593c>
    43f4:	00001349 	andeq	r1, r0, r9, asr #6
    43f8:	03001605 	movweq	r1, #1541	; 0x605
    43fc:	3b0b3a0e 	blcc	2d2c3c <__ccfg+0x2b2c94>
    4400:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4404:	06000013 			; <UNDEFINED> instruction: 0x06000013
    4408:	0b0b0117 	bleq	2c486c <__ccfg+0x2a48c4>
    440c:	0b3b0b3a 	bleq	ec70fc <__ccfg+0xea7154>
    4410:	13010b39 	movwne	r0, #6969	; 0x1b39
    4414:	0d070000 	stceq	0, cr0, [r7, #-0]
    4418:	3a0e0300 	bcc	385020 <__ccfg+0x365078>
    441c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4420:	0013490b 	andseq	r4, r3, fp, lsl #18
    4424:	01010800 	tsteq	r1, r0, lsl #16
    4428:	13011349 	movwne	r1, #4937	; 0x1349
    442c:	21090000 	mrscs	r0, (UNDEF: 9)
    4430:	2f134900 	svccs	0x00134900
    4434:	0a00000b 	beq	4468 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>
    4438:	0b0b0113 	bleq	2c488c <__ccfg+0x2a48e4>
    443c:	0b3b0b3a 	bleq	ec712c <__ccfg+0xea7184>
    4440:	13010b39 	movwne	r0, #6969	; 0x1b39
    4444:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    4448:	3a0e0300 	bcc	385050 <__ccfg+0x3650a8>
    444c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4450:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4454:	0c00000b 	stceq	0, cr0, [r0], {11}
    4458:	0b0b000f 	bleq	2c449c <__ccfg+0x2a44f4>
    445c:	130d0000 	movwne	r0, #53248	; 0xd000
    4460:	0b0e0301 	bleq	38506c <__ccfg+0x3650c4>
    4464:	3b0b3a0b 	blcc	2d2c98 <__ccfg+0x2b2cf0>
    4468:	010b390b 	tsteq	fp, fp, lsl #18
    446c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    4470:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    4474:	0b3b0b3a 	bleq	ec7164 <__ccfg+0xea71bc>
    4478:	13490b39 	movtne	r0, #39737	; 0x9b39
    447c:	00000b38 	andeq	r0, r0, r8, lsr fp
    4480:	0b000f0f 	bleq	80c4 <__exidx_end+0x26a0>
    4484:	0013490b 	andseq	r4, r3, fp, lsl #18
    4488:	01131000 	tsteq	r3, r0
    448c:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    4490:	0b3b0b3a 	bleq	ec7180 <__ccfg+0xea71d8>
    4494:	13010b39 	movwne	r0, #6969	; 0x1b39
    4498:	0d110000 	ldceq	0, cr0, [r1, #-0]
    449c:	3a0e0300 	bcc	3850a4 <__ccfg+0x3650fc>
    44a0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    44a4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    44a8:	12000005 	andne	r0, r0, #5
    44ac:	19270015 	stmdbne	r7!, {r0, r2, r4}
    44b0:	15130000 	ldrne	r0, [r3, #-0]
    44b4:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    44b8:	00130113 	andseq	r0, r3, r3, lsl r1
    44bc:	00051400 	andeq	r1, r5, r0, lsl #8
    44c0:	00001349 	andeq	r1, r0, r9, asr #6
    44c4:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
    44c8:	16000013 			; <UNDEFINED> instruction: 0x16000013
    44cc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    44d0:	0b3a050b 	bleq	e85904 <__ccfg+0xe6595c>
    44d4:	0b39053b 	bleq	e459c8 <__ccfg+0xe25a20>
    44d8:	00001301 	andeq	r1, r0, r1, lsl #6
    44dc:	03000d17 	movweq	r0, #3351	; 0xd17
    44e0:	3b0b3a0e 	blcc	2d2d20 <__ccfg+0x2b2d78>
    44e4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    44e8:	000b3813 	andeq	r3, fp, r3, lsl r8
    44ec:	000d1800 	andeq	r1, sp, r0, lsl #16
    44f0:	0b3a0e03 	bleq	e87d04 <__ccfg+0xe67d5c>
    44f4:	0b39053b 	bleq	e459e8 <__ccfg+0xe25a40>
    44f8:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    44fc:	13190000 	tstne	r9, #0
    4500:	0b0e0301 	bleq	38510c <__ccfg+0x365164>
    4504:	3b0b3a0b 	blcc	2d2d38 <__ccfg+0x2b2d90>
    4508:	010b3905 	tsteq	fp, r5, lsl #18
    450c:	1a000013 	bne	4560 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xec>
    4510:	0b0b0113 	bleq	2c4964 <__ccfg+0x2a49bc>
    4514:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4518:	13010b39 	movwne	r0, #6969	; 0x1b39
    451c:	171b0000 	ldrne	r0, [fp, -r0]
    4520:	3a0b0b01 	bcc	2c712c <__ccfg+0x2a7184>
    4524:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4528:	0013010b 	andseq	r0, r3, fp, lsl #2
    452c:	000d1c00 	andeq	r1, sp, r0, lsl #24
    4530:	0b3a0e03 	bleq	e87d44 <__ccfg+0xe67d9c>
    4534:	0b39053b 	bleq	e45a28 <__ccfg+0xe25a80>
    4538:	00001349 	andeq	r1, r0, r9, asr #6
    453c:	0300131d 	movweq	r1, #797	; 0x31d
    4540:	00193c0e 	andseq	r3, r9, lr, lsl #24
    4544:	01151e00 	tsteq	r5, r0, lsl #28
    4548:	13011927 	movwne	r1, #6439	; 0x1927
    454c:	341f0000 	ldrcc	r0, [pc], #-0	; 4554 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xe0>
    4550:	3a0e0300 	bcc	385158 <__ccfg+0x3651b0>
    4554:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4558:	3f13490b 	svccc	0x0013490b
    455c:	00193c19 	andseq	r3, r9, r9, lsl ip
    4560:	00342000 	eorseq	r2, r4, r0
    4564:	0b3a0e03 	bleq	e87d78 <__ccfg+0xe67dd0>
    4568:	0b390b3b 	bleq	e4725c <__ccfg+0xe272b4>
    456c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    4570:	0000193c 	andeq	r1, r0, ip, lsr r9
    4574:	3f012e21 	svccc	0x00012e21
    4578:	3a0e0319 	bcc	3851e4 <__ccfg+0x36523c>
    457c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4580:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    4584:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4588:	96184006 	ldrls	r4, [r8], -r6
    458c:	13011942 	movwne	r1, #6466	; 0x1942
    4590:	34220000 	strtcc	r0, [r2], #-0
    4594:	3a0e0300 	bcc	38519c <__ccfg+0x3651f4>
    4598:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    459c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    45a0:	1742b717 	smlaldne	fp, r2, r7, r7
    45a4:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    45a8:	03193f01 	tsteq	r9, #1, 30
    45ac:	3b0b3a0e 	blcc	2d2dec <__ccfg+0x2b2e44>
    45b0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    45b4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    45b8:	97184006 	ldrls	r4, [r8, -r6]
    45bc:	00001942 	andeq	r1, r0, r2, asr #18
    45c0:	03000524 	movweq	r0, #1316	; 0x524
    45c4:	3b0b3a0e 	blcc	2d2e04 <__ccfg+0x2b2e5c>
    45c8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    45cc:	00180213 	andseq	r0, r8, r3, lsl r2
    45d0:	11010000 	mrsne	r0, (UNDEF: 1)
    45d4:	130e2501 	movwne	r2, #58625	; 0xe501
    45d8:	1b0e030b 	blne	38520c <__ccfg+0x365264>
    45dc:	0017100e 	andseq	r1, r7, lr
    45e0:	00240200 	eoreq	r0, r4, r0, lsl #4
    45e4:	0b3e0b0b 	bleq	f87218 <__ccfg+0xf67270>
    45e8:	00000803 	andeq	r0, r0, r3, lsl #16
    45ec:	0b002403 	bleq	d600 <__exidx_end+0x7bdc>
    45f0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    45f4:	0400000e 	streq	r0, [r0], #-14
    45f8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    45fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4600:	13490b39 	movtne	r0, #39737	; 0x9b39
    4604:	16050000 	strne	r0, [r5], -r0
    4608:	3a0e0300 	bcc	385210 <__ccfg+0x365268>
    460c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4610:	0013490b 	andseq	r4, r3, fp, lsl #18
    4614:	01170600 	tsteq	r7, r0, lsl #12
    4618:	0b3a0b0b 	bleq	e8724c <__ccfg+0xe672a4>
    461c:	0b390b3b 	bleq	e47310 <__ccfg+0xe27368>
    4620:	00001301 	andeq	r1, r0, r1, lsl #6
    4624:	03000d07 	movweq	r0, #3335	; 0xd07
    4628:	3b0b3a0e 	blcc	2d2e68 <__ccfg+0x2b2ec0>
    462c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4630:	08000013 	stmdaeq	r0, {r0, r1, r4}
    4634:	13490101 	movtne	r0, #37121	; 0x9101
    4638:	00001301 	andeq	r1, r0, r1, lsl #6
    463c:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
    4640:	000b2f13 	andeq	r2, fp, r3, lsl pc
    4644:	01130a00 	tsteq	r3, r0, lsl #20
    4648:	0b3a0b0b 	bleq	e8727c <__ccfg+0xe672d4>
    464c:	0b390b3b 	bleq	e47340 <__ccfg+0xe27398>
    4650:	00001301 	andeq	r1, r0, r1, lsl #6
    4654:	03000d0b 	movweq	r0, #3339	; 0xd0b
    4658:	3b0b3a0e 	blcc	2d2e98 <__ccfg+0x2b2ef0>
    465c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4660:	000b3813 	andeq	r3, fp, r3, lsl r8
    4664:	000f0c00 	andeq	r0, pc, r0, lsl #24
    4668:	00000b0b 	andeq	r0, r0, fp, lsl #22
    466c:	0301130d 	movweq	r1, #4877	; 0x130d
    4670:	3a0b0b0e 	bcc	2c72b0 <__ccfg+0x2a7308>
    4674:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4678:	0013010b 	andseq	r0, r3, fp, lsl #2
    467c:	000d0e00 	andeq	r0, sp, r0, lsl #28
    4680:	0b3a0803 	bleq	e86694 <__ccfg+0xe666ec>
    4684:	0b390b3b 	bleq	e47378 <__ccfg+0xe273d0>
    4688:	0b381349 	bleq	e093b4 <__ccfg+0xde940c>
    468c:	0f0f0000 	svceq	0x000f0000
    4690:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    4694:	10000013 	andne	r0, r0, r3, lsl r0
    4698:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    469c:	0b3a050b 	bleq	e85ad0 <__ccfg+0xe65b28>
    46a0:	0b390b3b 	bleq	e47394 <__ccfg+0xe273ec>
    46a4:	00001301 	andeq	r1, r0, r1, lsl #6
    46a8:	03000d11 	movweq	r0, #3345	; 0xd11
    46ac:	3b0b3a0e 	blcc	2d2eec <__ccfg+0x2b2f44>
    46b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    46b4:	00053813 	andeq	r3, r5, r3, lsl r8
    46b8:	00151200 	andseq	r1, r5, r0, lsl #4
    46bc:	00001927 	andeq	r1, r0, r7, lsr #18
    46c0:	27011513 	smladcs	r1, r3, r5, r1
    46c4:	01134919 	tsteq	r3, r9, lsl r9
    46c8:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    46cc:	13490005 	movtne	r0, #36869	; 0x9005
    46d0:	26150000 	ldrcs	r0, [r5], -r0
    46d4:	00134900 	andseq	r4, r3, r0, lsl #18
    46d8:	01131600 	tsteq	r3, r0, lsl #12
    46dc:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    46e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    46e4:	13010b39 	movwne	r0, #6969	; 0x1b39
    46e8:	0d170000 	ldceq	0, cr0, [r7, #-0]
    46ec:	3a0e0300 	bcc	3852f4 <__ccfg+0x36534c>
    46f0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    46f4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    46f8:	1800000b 	stmdane	r0, {r0, r1, r3}
    46fc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4700:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4704:	13490b39 	movtne	r0, #39737	; 0x9b39
    4708:	00000538 	andeq	r0, r0, r8, lsr r5
    470c:	03011319 	movweq	r1, #4889	; 0x1319
    4710:	3a0b0b0e 	bcc	2c7350 <__ccfg+0x2a73a8>
    4714:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4718:	0013010b 	andseq	r0, r3, fp, lsl #2
    471c:	01131a00 	tsteq	r3, r0, lsl #20
    4720:	0b3a0b0b 	bleq	e87354 <__ccfg+0xe673ac>
    4724:	0b39053b 	bleq	e45c18 <__ccfg+0xe25c70>
    4728:	00001301 	andeq	r1, r0, r1, lsl #6
    472c:	0b01171b 	bleq	4a3a0 <__ccfg+0x2a3f8>
    4730:	3b0b3a0b 	blcc	2d2f64 <__ccfg+0x2b2fbc>
    4734:	010b3905 	tsteq	fp, r5, lsl #18
    4738:	1c000013 	stcne	0, cr0, [r0], {19}
    473c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4740:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4744:	13490b39 	movtne	r0, #39737	; 0x9b39
    4748:	131d0000 	tstne	sp, #0
    474c:	3c0e0300 	stccc	3, cr0, [lr], {-0}
    4750:	1e000019 	mcrne	0, 0, r0, cr0, cr9, {0}
    4754:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    4758:	00001301 	andeq	r1, r0, r1, lsl #6
    475c:	0300341f 	movweq	r3, #1055	; 0x41f
    4760:	3b0b3a0e 	blcc	2d2fa0 <__ccfg+0x2b2ff8>
    4764:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4768:	3c193f13 	ldccc	15, cr3, [r9], {19}
    476c:	20000019 	andcs	r0, r0, r9, lsl r0
    4770:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    4774:	0b3b0b3a 	bleq	ec7464 <__ccfg+0xea74bc>
    4778:	13490b39 	movtne	r0, #39737	; 0x9b39
    477c:	00001802 	andeq	r1, r0, r2, lsl #16
    4780:	47003421 	strmi	r3, [r0, -r1, lsr #8]
    4784:	00180213 	andseq	r0, r8, r3, lsl r2
    4788:	11010000 	mrsne	r0, (UNDEF: 1)
    478c:	130e2501 	movwne	r2, #58625	; 0xe501
    4790:	1b0e030b 	blne	3853c4 <__ccfg+0x36541c>
    4794:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    4798:	00171006 	andseq	r1, r7, r6
    479c:	00240200 	eoreq	r0, r4, r0, lsl #4
    47a0:	0b3e0b0b 	bleq	f873d4 <__ccfg+0xf6742c>
    47a4:	00000e03 	andeq	r0, r0, r3, lsl #28
    47a8:	0b002403 	bleq	d7bc <__exidx_end+0x7d98>
    47ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    47b0:	04000008 	streq	r0, [r0], #-8
    47b4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    47b8:	0b3b0b3a 	bleq	ec74a8 <__ccfg+0xea7500>
    47bc:	13490b39 	movtne	r0, #39737	; 0x9b39
    47c0:	0f050000 	svceq	0x00050000
    47c4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    47c8:	06000013 			; <UNDEFINED> instruction: 0x06000013
    47cc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    47d0:	13011349 	movwne	r1, #4937	; 0x1349
    47d4:	05070000 	streq	r0, [r7, #-0]
    47d8:	00134900 	andseq	r4, r3, r0, lsl #18
    47dc:	00260800 	eoreq	r0, r6, r0, lsl #16
    47e0:	34090000 	strcc	r0, [r9], #-0
    47e4:	3a0e0300 	bcc	3853ec <__ccfg+0x365444>
    47e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    47ec:	3f13490b 	svccc	0x0013490b
    47f0:	00193c19 	andseq	r3, r9, r9, lsl ip
    47f4:	01040a00 	tsteq	r4, r0, lsl #20
    47f8:	0b3e0e03 	bleq	f8800c <__ccfg+0xf68064>
    47fc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    4800:	0b3b0b3a 	bleq	ec74f0 <__ccfg+0xea7548>
    4804:	13010b39 	movwne	r0, #6969	; 0x1b39
    4808:	280b0000 	stmdacs	fp, {}	; <UNPREDICTABLE>
    480c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    4810:	0c00000b 	stceq	0, cr0, [r0], {11}
    4814:	13490101 	movtne	r0, #37121	; 0x9101
    4818:	00001301 	andeq	r1, r0, r1, lsl #6
    481c:	0000210d 	andeq	r2, r0, sp, lsl #2
    4820:	00260e00 	eoreq	r0, r6, r0, lsl #28
    4824:	00001349 	andeq	r1, r0, r9, asr #6
    4828:	0300340f 	movweq	r3, #1039	; 0x40f
    482c:	3b0b3a0e 	blcc	2d306c <__ccfg+0x2b30c4>
    4830:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4834:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4838:	10000019 	andne	r0, r0, r9, lsl r0
    483c:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    4840:	0000193c 	andeq	r1, r0, ip, lsr r9
    4844:	27001511 	smladcs	r0, r1, r5, r1
    4848:	12000019 	andne	r0, r0, #25
    484c:	0e030017 	mcreq	0, 0, r0, cr3, cr7, {0}
    4850:	0000193c 	andeq	r1, r0, ip, lsr r9
    4854:	03011313 	movweq	r1, #4883	; 0x1313
    4858:	3a0b0b0e 	bcc	2c7498 <__ccfg+0x2a74f0>
    485c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4860:	0013010b 	andseq	r0, r3, fp, lsl #2
    4864:	000d1400 	andeq	r1, sp, r0, lsl #8
    4868:	0b3a0e03 	bleq	e8807c <__ccfg+0xe680d4>
    486c:	0b39053b 	bleq	e45d60 <__ccfg+0xe25db8>
    4870:	0b381349 	bleq	e0959c <__ccfg+0xde95f4>
    4874:	21150000 	tstcs	r5, r0
    4878:	2f134900 	svccs	0x00134900
    487c:	1600000b 	strne	r0, [r0], -fp
    4880:	0e030104 	adfeqs	f0, f3, f4
    4884:	0b0b0b3e 	bleq	2c7584 <__ccfg+0x2a75dc>
    4888:	0b3a1349 	bleq	e895b4 <__ccfg+0xe6960c>
    488c:	0b39053b 	bleq	e45d80 <__ccfg+0xe25dd8>
    4890:	00001301 	andeq	r1, r0, r1, lsl #6
    4894:	03000d17 	movweq	r0, #3351	; 0xd17
    4898:	3b0b3a08 	blcc	2d30c0 <__ccfg+0x2b3118>
    489c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    48a0:	000b3813 	andeq	r3, fp, r3, lsl r8
    48a4:	01171800 	tsteq	r7, r0, lsl #16
    48a8:	0b3a0b0b 	bleq	e874dc <__ccfg+0xe67534>
    48ac:	0b39053b 	bleq	e45da0 <__ccfg+0xe25df8>
    48b0:	00001301 	andeq	r1, r0, r1, lsl #6
    48b4:	03000d19 	movweq	r0, #3353	; 0xd19
    48b8:	3b0b3a08 	blcc	2d30e0 <__ccfg+0x2b3138>
    48bc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    48c0:	1a000013 	bne	4914 <__aeabi_lmul+0x10>
    48c4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    48c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    48cc:	13490b39 	movtne	r0, #39737	; 0x9b39
    48d0:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    48d4:	03193f01 	tsteq	r9, #1, 30
    48d8:	3b0b3a0e 	blcc	2d3118 <__ccfg+0x2b3170>
    48dc:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    48e0:	11134919 	tstne	r3, r9, lsl r9
    48e4:	40061201 	andmi	r1, r6, r1, lsl #4
    48e8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    48ec:	051c0000 	ldreq	r0, [ip, #-0]
    48f0:	3a080300 	bcc	2054f8 <__ccfg+0x1e5550>
    48f4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    48f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    48fc:	1742b717 	smlaldne	fp, r2, r7, r7
    4900:	341d0000 	ldrcc	r0, [sp], #-0
    4904:	3a080300 	bcc	20550c <__ccfg+0x1e5564>
    4908:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    490c:	0013490b 	andseq	r4, r3, fp, lsl #18
    4910:	010b1e00 	tsteq	fp, r0, lsl #28
    4914:	00001755 	andeq	r1, r0, r5, asr r7
    4918:	0300341f 	movweq	r3, #1055	; 0x41f
    491c:	3b0b3a0e 	blcc	2d315c <__ccfg+0x2b31b4>
    4920:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4924:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    4928:	00001742 	andeq	r1, r0, r2, asr #14
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000554 	andeq	r0, r0, r4, asr r5
       4:	000005a8 	andeq	r0, r0, r8, lsr #11
       8:	4e500001 	cdpmi	0, 5, cr0, cr0, cr1, {0}
       c:	5000000a 	andpl	r0, r0, sl
    return node->data_base.item_array[index];
      10:	0100000a 	tsteq	r0, sl
      14:	0a705000 	beq	1c1401c <__ccfg+0x1bf4074>
      18:	0a730000 	beq	1cc0020 <__ccfg+0x1ca0078>
};
      1c:	00010000 	andeq	r0, r1, r0
      20:	00000050 	andeq	r0, r0, r0, asr r0
      24:	00000000 	andeq	r0, r0, r0
      28:	00067000 	andeq	r7, r6, r0
      2c:	00067400 	andeq	r7, r6, r0, lsl #8
      30:	91000200 	mrsls	r0, R8_usr
      34:	00000064 	andeq	r0, r0, r4, rrx
      38:	00000000 	andeq	r0, r0, r0
      3c:	00067000 	andeq	r7, r6, r0
			i = k;
      40:	00067400 	andeq	r7, r6, r0, lsl #8
				j->Next = k;
      44:	53000100 	movwpl	r0, #256	; 0x100
	...
}
      50:	000006b4 			; <UNDEFINED> instruction: 0x000006b4
      54:	000006c4 	andeq	r0, r0, r4, asr #13
		release;
      58:	46540001 	ldrbmi	r0, [r4], -r1
      5c:	66000007 	strvs	r0, [r0], -r7
			nq++;
      60:	01000007 	tsteq	r0, r7
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	00005400 	andeq	r5, r0, r0, lsl #8
      68:	00000000 	andeq	r0, r0, r0
      6c:	06920000 	ldreq	r0, [r2], r0
      70:	06940000 	ldreq	r0, [r4], r0
      74:	00010000 	andeq	r0, r1, r0
      78:	00000051 	andeq	r0, r0, r1, asr r0
      7c:	00000000 	andeq	r0, r0, r0
      80:	00069200 	andeq	r9, r6, r0, lsl #4
      84:	00069400 	andeq	r9, r6, r0, lsl #8
      88:	52000100 	andpl	r0, r0, #0, 2
	...
	if (!button_still_pressed (__button_list [pbutton]))
      94:	00000700 	andeq	r0, r0, r0, lsl #14
      98:	0000070b 	andeq	r0, r0, fp, lsl #14
	if (baction == NULL)
      9c:	0b500001 	bleq	14000a8 <__ccfg+0x13e0100>
      a0:	26000007 	strcs	r0, [r0], -r7
	(*baction) (pbutton);
      a4:	01000007 	tsteq	r0, r7
endthread
      a8:	00005400 	andeq	r5, r0, r0, lsl #8
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00000000 	andeq	r0, r0, r0
      b0:	07e20000 	strbeq	r0, [r2, r0]!
endthread
      b4:	07f20000 	ldrbeq	r0, [r2, r0]!
      b8:	00010000 	andeq	r0, r1, r0
      bc:	0007f654 	andeq	pc, r7, r4, asr r6	; <UNPREDICTABLE>
      c0:	00080000 	andeq	r0, r8, r0
      c4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
fsm sender(struct ResponseMessage *message) {
      d0:	00000848 	andeq	r0, r0, r8, asr #16
}
      d4:	00000855 	andeq	r0, r0, r5, asr r8
      d8:	55500001 	ldrbpl	r0, [r0, #-1]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	8e000008 	cdphi	0, 0, cr0, cr0, cr8, {0}
      e0:	01000008 	tsteq	r0, r8
      e4:	00005400 	andeq	r5, r0, r0, lsl #8
      e8:	00000000 	andeq	r0, r0, r0
		packet[0] = 0;
      ec:	0a1c0000 	beq	7000f4 <__ccfg+0x6e014c>
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	0a460000 	beq	11800f8 <__ccfg+0x1160150>
		*p = message->tpe;p++;
      f4:	00010000 	andeq	r0, r1, r0
      f8:	00000054 	andeq	r0, r0, r4, asr r0
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      fc:	00000000 	andeq	r0, r0, r0
		*p = message->sender_id;p++;
     100:	0001e800 	andeq	lr, r1, r0, lsl #16
		*p = message->receiver_id;p++;
     104:	00020a00 	andeq	r0, r2, r0, lsl #20
		switch(message->tpe) {
     108:	50000100 	andpl	r0, r0, r0, lsl #2
     10c:	0000051c 	andeq	r0, r0, ip, lsl r5
     110:	0000051f 	andeq	r0, r0, pc, lsl r5
		tcv_endp(packet);
     114:	00500001 	subseq	r0, r0, r1
     118:	00000000 	andeq	r0, r0, r0
		ser_out(CONFIRM_message, "Message sent\r\n");
     11c:	f2000000 	vhadd.s8	d0, d0, d0
     120:	84000001 	strhi	r0, [r0], #-1
}
     124:	01000002 	tsteq	r0, r2
		finish;
     128:	02965400 	addseq	r5, r6, #0, 8
     12c:	02ec0000 	rsceq	r0, ip, #0
				*p = message->status;p++;
     130:	00010000 	andeq	r0, r1, r0
     134:	00037a54 	andeq	r7, r3, r4, asr sl
				strncpy(p, message->record, sizeof(message->record));
     138:	0003c000 	andeq	ip, r3, r0
				*p = message->padding;p++;
     13c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
				strncpy(p, message->record, sizeof(message->record));
     140:	000003ca 	andeq	r0, r0, sl, asr #7
				strncpy(p, message->record, sizeof(message->record));
     144:	00000412 	andeq	r0, r0, r2, lsl r4
     148:	3a540001 	bcc	1500154 <__ccfg+0x14e01ac>
				strncpy(p, message->record, sizeof(message->record));
     14c:	2c000004 	stccs	0, cr0, [r0], {4}
				*p = message->record_index;p++;
     150:	01000005 	tsteq	r0, r5
				*p = message->padding;
     154:	00005400 	andeq	r5, r0, r0, lsl #8
				break;
     158:	00000000 	andeq	r0, r0, r0
     15c:	03bc0000 			; <UNDEFINED> instruction: 0x03bc0000
     160:	03c00000 	biceq	r0, r0, #0
     164:	00020000 	andeq	r0, r2, r0
     168:	00000074 	andeq	r0, r0, r4, ror r0
		node->nnodes[i] = 0;
     16c:	00000000 	andeq	r0, r0, r0
     170:	03bc0000 			; <UNDEFINED> instruction: 0x03bc0000
     174:	03c00000 	biceq	r0, r0, #0
     178:	00020000 	andeq	r0, r2, r0
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     17c:	00000274 	andeq	r0, r0, r4, ror r2
bool init_node(struct Node* node){
     180:	00000000 	andeq	r0, r0, r0
    node->id  = 0;                  // default id value 0
     184:	04380000 	ldrteq	r0, [r8], #-0
    node->index = 0;                // default entry count 0
     188:	043a0000 	ldrteq	r0, [sl], #-0
    node->data_base.item_count = 0; // default no items in array
     18c:	00010000 	andeq	r0, r1, r0
	reset_array(node);
     190:	00000051 	andeq	r0, r0, r1, asr r0
    DEBUG_PRINT("Error initializing node...\n");
     194:	00000000 	andeq	r0, r0, r0
     198:	00043200 	andeq	r3, r4, r0, lsl #4
};
     19c:	00043a00 	andeq	r3, r4, r0, lsl #20
     1a0:	03000800 	movweq	r0, #2048	; 0x800
uint8_t generate_request_num(void){
     1a4:	20000558 	andcs	r0, r0, r8, asr r5
    return (uint8_t) (rand() % 255);
     1a8:	00072306 	andeq	r2, r7, r6, lsl #6
     1ac:	00000000 	andeq	r0, r0, r0
     1b0:	32000000 	andcc	r0, r0, #0
}
     1b4:	3a000004 	bcc	1cc <delete_record>
            node->nnodes[i] = 0; // set to null byte
     1b8:	08000004 	stmdaeq	r0, {r2}
     1bc:	05580300 	ldrbeq	r0, [r8, #-768]	; 0xfffffd00
     1c0:	23062000 	movwcs	r2, #24576	; 0x6000
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1c4:	00000005 	andeq	r0, r0, r5
};
     1c8:	00000000 	andeq	r0, r0, r0
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1cc:	00040c00 	andeq	r0, r4, r0, lsl #24
     1d0:	00041800 	andeq	r1, r4, r0, lsl #16
        node->data_base.item_array[index].data_entry[0] = '\0';
     1d4:	53000100 	movwpl	r0, #256	; 0x100
     1d8:	00000418 	andeq	r0, r0, r8, lsl r4
     1dc:	00000426 	andeq	r0, r0, r6, lsr #8
        node->data_base.item_count -= 1;
     1e0:	58030008 	stmdapl	r3, {r3}
};
     1e4:	06200005 	strteq	r0, [r0], -r5
fsm receiver(struct Node* node_db) {
     1e8:	00000823 	andeq	r0, r0, r3, lsr #16
     1ec:	00000000 	andeq	r0, r0, r0
     1f0:	040c0000 	streq	r0, [ip], #-0
     1f4:	04120000 	ldreq	r0, [r2], #-0
     1f8:	00010000 	andeq	r0, r1, r0
     1fc:	00000054 	andeq	r0, r0, r4, asr r0
     200:	00000000 	andeq	r0, r0, r0
     204:	0000c800 	andeq	ip, r0, r0, lsl #16
		incoming_packet = tcv_rnp(receiving, sfd);
     208:	0000d900 	andeq	sp, r0, r0, lsl #18
     20c:	50000100 	andpl	r0, r0, r0, lsl #2
     210:	000000da 	ldrdeq	r0, [r0], -sl
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     214:	000000eb 	andeq	r0, r0, fp, ror #1
     218:	00500001 	subseq	r0, r0, r1
     21c:	00000000 	andeq	r0, r0, r0
     220:	dc000000 	stcle	0, cr0, [r0], {-0}
		switch (tpe){
     224:	e0000000 	and	r0, r0, r0
     228:	05000000 	streq	r0, [r0, #-0]
     22c:	06007300 	streq	r7, [r0], -r0, lsl #6
     230:	00000823 	andeq	r0, r0, r3, lsr #16
     234:	00000000 	andeq	r0, r0, r0
     238:	01400000 	mrseq	r0, (UNDEF: 64)
     23c:	01420000 	mrseq	r0, (UNDEF: 66)
				DEBUG_PRINT("\r\nRECEIVED GID: %u", discovery_request_message->gid);
     240:	00010000 	andeq	r0, r1, r0
     244:	00000050 	andeq	r0, r0, r0, asr r0
				DEBUG_PRINT("\rRECEIVED TYPE: %u", discovery_request_message->tpe);
     248:	00000000 	andeq	r0, r0, r0
     24c:	00052c00 	andeq	r2, r5, r0, lsl #24
				DEBUG_PRINT("\r\nRECEIVED REQ NUM: %u", discovery_request_message->request_number);
     250:	00054c00 	andeq	r4, r5, r0, lsl #24
     254:	50000100 	andpl	r0, r0, r0, lsl #2
				DEBUG_PRINT("\r\nRECEIVED SID: %u", discovery_request_message->sender_id);
     258:	0000054e 	andeq	r0, r0, lr, asr #10
     25c:	00000550 	andeq	r0, r0, r0, asr r5
				DEBUG_PRINT("\r\nRECEIVED RID: %u", discovery_request_message->receiver_id);
     260:	00500001 	subseq	r0, r0, r1
     264:	00000000 	andeq	r0, r0, r0
				if (discovery_request_message->gid == node_db->gid){
     268:	3a000000 	bcc	270 <receiver+0x88>
     26c:	3c000005 	stccc	0, cr0, [r0], {5}
					response_message_0->gid = discovery_request_message->gid;
     270:	01000005 	tsteq	r0, r5
					response_message_0->tpe = DISCOVERY_RESPONSE;
     274:	05445300 	strbeq	r5, [r4, #-768]	; 0xfffffd00
					response_message_0->request_number = discovery_request_message->request_number;
     278:	054c0000 	strbeq	r0, [ip, #-0]
					response_message_0->sender_id = node_db->id;
     27c:	00010000 	andeq	r0, r1, r0
					response_message_0->receiver_id = discovery_request_message->sender_id;
     280:	00000053 	andeq	r0, r0, r3, asr r0
					call sender(response_message_0, done_case);
     284:	00000000 	andeq	r0, r0, r0
     288:	0001cc00 	andeq	ip, r1, r0, lsl #24
     28c:	0001e600 	andeq	lr, r1, r0, lsl #12
     290:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
     29c:	000001cc 	andeq	r0, r0, ip, asr #3
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
     2a0:	000001d8 	ldrdeq	r0, [r0], -r8
     2a4:	00510001 	subseq	r0, r1, r1
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
     2a8:	00000000 	andeq	r0, r0, r0
     2ac:	b6000000 	strlt	r0, [r0], -r0
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
     2b0:	c0000001 	andgt	r0, r0, r1
     2b4:	01000001 	tsteq	r0, r1
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
     2b8:	00005000 	andeq	r5, r0, r0
     2bc:	00000000 	andeq	r0, r0, r0
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2c0:	016c0000 	cmneq	ip, r0
     2c4:	01760000 	cmneq	r6, r0
     2c8:	00010000 	andeq	r0, r1, r0
     2cc:	00000050 	andeq	r0, r0, r0, asr r0
	...
     2dc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
					node_db->index+=1;
     2e8:	00000180 	andeq	r0, r0, r0, lsl #3
		tcv_endp(incoming_packet);
     2ec:	00000193 	muleq	r0, r3, r1
     2f0:	00500001 	subseq	r0, r0, r1
	...
		ser_out(response_1_create, "\r\nData Saved");
     300:	01000000 	mrseq	r0, (UNDEF: 0)
		proceed receiving;
     304:	00005000 	andeq	r5, r0, r0
	...
		proceed receiving;
     314:	00010000 	andeq	r0, r1, r0
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     318:	00000050 	andeq	r0, r0, r0, asr r0
	...
		proceed receiving;
     328:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		proceed receiving;
     33c:	00510001 	subseq	r0, r1, r1
	...
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     34c:	01000000 	mrseq	r0, (UNDEF: 0)
		proceed receiving;
     350:	00005200 	andeq	r5, r0, r0, lsl #4
	...
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     360:	00010000 	andeq	r0, r1, r0
		proceed receiving;
     364:	00000050 	andeq	r0, r0, r0, asr r0
	...
		proceed receiving;
     374:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     388:	00520001 	subseq	r0, r2, r1
	...
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     398:	01000000 	mrseq	r0, (UNDEF: 0)
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     39c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     3ac:	00010000 	andeq	r0, r1, r0
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     3b0:	00000050 	andeq	r0, r0, r0, asr r0
     3b4:	00000000 	andeq	r0, r0, r0
     3b8:	00130800 	andseq	r0, r3, r0, lsl #16
		strncpy(response_message->record, rec, 20);
     3bc:	00130800 	andseq	r0, r3, r0, lsl #16
     3c0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3cc:	00001194 	muleq	r0, r4, r1
     3d0:	0000119a 	muleq	r0, sl, r1
     3d4:	ca560001 	bgt	15803e0 <__ccfg+0x1560438>
     3d8:	ce000011 	mcrgt	0, 0, r0, cr0, cr1, {0}
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     3dc:	01000011 	tsteq	r0, r1, lsl r0
     3e0:	00005600 	andeq	r5, r0, r0, lsl #12
					if (delete_record(node_db, delete_record_message->record_index)){
     3e4:	00000000 	andeq	r0, r0, r0
     3e8:	107e0000 	rsbsne	r0, lr, r0
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3ec:	10820000 	addne	r0, r2, r0
     3f0:	00010000 	andeq	r0, r1, r0
     3f4:	00109852 	andseq	r9, r0, r2, asr r8
     3f8:	0010ac00 	andseq	sl, r0, r0, lsl #24
     3fc:	52000100 	andpl	r0, r0, #0, 2
	...
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     408:	00001086 	andeq	r1, r0, r6, lsl #1
    return node->data_base.item_array[index];
     40c:	0000108c 	andeq	r1, r0, ip, lsl #1
     410:	00530001 	subseq	r0, r3, r1
     414:	00000000 	andeq	r0, r0, r0
     418:	3c000000 	stccc	0, cr0, [r0], {-0}
     41c:	46000010 			; <UNDEFINED> instruction: 0x46000010
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     420:	01000010 	tsteq	r0, r0, lsl r0
    return node->data_base.item_array[index];
     424:	00005300 	andeq	r5, r0, r0, lsl #6
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     428:	00000000 	andeq	r0, r0, r0
     42c:	103c0000 	eorsne	r0, ip, r0
     430:	10420000 	subne	r0, r2, r0
		strncpy(response_message->record, rec, 20);
     434:	00010000 	andeq	r0, r1, r0
     438:	00000053 	andeq	r0, r0, r3, asr r0
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     43c:	00000000 	andeq	r0, r0, r0
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     440:	0010d200 	andseq	sp, r0, r0, lsl #4
     444:	0010dc00 	andseq	sp, r0, r0, lsl #24
     448:	53000100 	movwpl	r0, #256	; 0x100
	...
     454:	000010c4 	andeq	r1, r0, r4, asr #1
				if(!response_flag){
     458:	000010ee 	andeq	r1, r0, lr, ror #1
					response_flag=1;
     45c:	00520001 	subseq	r0, r2, r1
					trigger(&response_flag);
     460:	00000000 	andeq	r0, r0, r0
				switch(response_message_5->status){
     464:	12000000 	andne	r0, r0, #0
     468:	1c000011 	stcne	0, cr0, [r0], {17}
     46c:	01000011 	tsteq	r0, r1, lsl r0
     470:	00005300 	andeq	r5, r0, r0, lsl #6
     474:	00000000 	andeq	r0, r0, r0
     478:	11040000 	mrsne	r0, (UNDEF: 4)
     47c:	113a0000 	teqne	sl, r0
     480:	00010000 	andeq	r0, r1, r0
     484:	00000050 	andeq	r0, r0, r0, asr r0
     488:	00000000 	andeq	r0, r0, r0
     48c:	000faa00 	andeq	sl, pc, r0, lsl #20
     490:	000fb400 	andeq	fp, pc, r0, lsl #8
     494:	53000100 	movwpl	r0, #256	; 0x100
	...
     4a0:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
     4a4:	00000fc6 	andeq	r0, r0, r6, asr #31
     4a8:	00520001 	subseq	r0, r2, r1
     4ac:	00000000 	andeq	r0, r0, r0
     4b0:	fc000000 	stc2	0, cr0, [r0], {-0}
     4b4:	0600000f 	streq	r0, [r0], -pc
     4b8:	01000010 	tsteq	r0, r0, lsl r0
     4bc:	00005300 	andeq	r5, r0, r0, lsl #6
     4c0:	00000000 	andeq	r0, r0, r0
     4c4:	0fee0000 	svceq	0x00ee0000
     4c8:	10160000 	andsne	r0, r6, r0
     4cc:	00010000 	andeq	r0, r1, r0
     4d0:	00000052 	andeq	r0, r0, r2, asr r0
     4d4:	00000000 	andeq	r0, r0, r0
     4d8:	000ad000 	andeq	sp, sl, r0
						if (response_checker[0] == response_message_5->request_number){
     4dc:	000ad400 	andeq	sp, sl, r0, lsl #8
     4e0:	50000100 	andpl	r0, r0, r0, lsl #2
     4e4:	00000ad4 	ldrdeq	r0, [r0], -r4
							switch(response_checker[1]){
     4e8:	00000ad7 	ldrdeq	r0, [r0], -r7
     4ec:	00510001 	subseq	r0, r1, r1
     4f0:	00000000 	andeq	r0, r0, r0
     4f4:	5c000000 	stcpl	0, cr0, [r0], {-0}
									proceed response_1_create;
     4f8:	5e00000e 	cdppl	0, 0, cr0, cr0, cr14, {0}
						proceed response_2;
     4fc:	0100000e 	tsteq	r0, lr
									proceed response_1_delete;
     500:	00005000 	andeq	r5, r0, r0
									proceed response_1_retrieve;
     504:	00000000 	andeq	r0, r0, r0
						proceed response_2;
     508:	0e5c0000 	cdpeq	0, 5, cr0, cr12, cr0, {0}
						proceed response_3;
     50c:	0e720000 	cdpeq	0, 7, cr0, cr2, cr0, {0}
						proceed response_4;
     510:	00010000 	andeq	r0, r1, r0
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     514:	000e7251 	andeq	r7, lr, r1, asr r2
     518:	000e7600 	andeq	r7, lr, r0, lsl #12
}
     51c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     520:	00000e7c 	andeq	r0, r0, ip, ror lr
     524:	00000e92 	muleq	r0, r2, lr
     528:	92550001 	subsls	r0, r5, #1
bool delete_all(struct Node *node){
     52c:	a000000e 	andge	r0, r0, lr
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     530:	0100000e 	tsteq	r0, lr
        for(int i = 0; i <= node->data_base.item_count; i++){
     534:	0ea05100 	fdveqs	f5, f0, f0
            node->data_base.item_array[i].data_entry[0] = '\0';
     538:	0ece0000 	cdpeq	0, 12, cr0, cr14, cr0, {0}
        for(int i = 0; i <= node->data_base.item_count; i++){
     53c:	00010000 	andeq	r0, r1, r0
            node->data_base.item_array[i].timestamp = 0;
     540:	000ed455 	andeq	sp, lr, r5, asr r4
        for(int i = 0; i <= node->data_base.item_count; i++){
     544:	000efc00 	andeq	pc, lr, r0, lsl #24
    node->data_base.item_count = 0;
     548:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
}
     54c:	00000efc 	strdeq	r0, [r0], -ip
        return true;
     550:	00000f0a 	andeq	r0, r0, sl, lsl #30
fsm root {
     554:	0a510001 	beq	1440560 <__ccfg+0x14205b8>
     558:	1400000f 	strne	r0, [r0], #-15
     55c:	0100000f 	tsteq	r0, pc
     560:	0f145500 	svceq	0x00145500
     564:	0f1f0000 	svceq	0x001f0000
     568:	00010000 	andeq	r0, r1, r0
     56c:	000f1f51 	andeq	r1, pc, r1, asr pc	; <UNPREDICTABLE>
     570:	000f2200 	andeq	r2, pc, r0, lsl #4
     574:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     578:	00000f22 	andeq	r0, r0, r2, lsr #30
     57c:	00000f28 	andeq	r0, r0, r8, lsr #30
     580:	28510001 	ldmdacs	r1, {r0}^
     584:	3a00000f 	bcc	5c8 <root+0x74>
     588:	0100000f 	tsteq	r0, pc
     58c:	0f3a5500 	svceq	0x003a5500
     590:	0f4c0000 	svceq	0x004c0000
     594:	00010000 	andeq	r0, r1, r0
     598:	000f4c51 	andeq	r4, pc, r1, asr ip	; <UNPREDICTABLE>
     59c:	000f6c00 	andeq	r6, pc, r0, lsl #24
     5a0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     5ac:	00000e5c 	andeq	r0, r0, ip, asr lr
		init_node(node_db);
     5b0:	00000e72 	andeq	r0, r0, r2, ror lr
		phys_cc1350(0, MAX_PKT_LEN);
     5b4:	72520001 	subsvc	r0, r2, #1
     5b8:	7800000e 	stmdavc	r0, {r1, r2, r3}
		tcv_plug (0, &plug_null);
     5bc:	0100000e 	tsteq	r0, lr
     5c0:	0e7c5600 	cdpeq	6, 7, cr5, cr12, cr0, {0}
		sfd = tcv_open (WNONE, 0, 0);
     5c4:	0e8c0000 	cdpeq	0, 8, cr0, cr12, cr0, {0}
     5c8:	00010000 	andeq	r0, r1, r0
     5cc:	000e9256 	andeq	r9, lr, r6, asr r2
     5d0:	000ea000 	andeq	sl, lr, r0
     5d4:	52000100 	andpl	r0, r0, #0, 2
			diag("Cannot open tcv interface");
     5d8:	00000ea0 	andeq	r0, r0, r0, lsr #29
     5dc:	00000ed0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
			halt();
     5e0:	d4560001 	ldrble	r0, [r6], #-1
		tcv_control(sfd, PHYSOPT_ON, NULL);
     5e4:	fc00000e 	stc2	0, cr0, [r0], {14}
     5e8:	0100000e 	tsteq	r0, lr
		runfsm receiver(node_db);
     5ec:	0efc5600 	cdpeq	6, 15, cr5, cr12, cr0, {0}
     5f0:	0f0a0000 	svceq	0x000a0000
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     5f4:	00010000 	andeq	r0, r1, r0
     5f8:	000f0a52 	andeq	r0, pc, r2, asr sl	; <UNPREDICTABLE>
     5fc:	000f1400 	andeq	r1, pc, r0, lsl #8
     600:	56000100 	strpl	r0, [r0], -r0, lsl #2
     604:	00000f14 	andeq	r0, r0, r4, lsl pc
     608:	00000f1f 	andeq	r0, r0, pc, lsl pc
		ser_inf(get_choice, "%c", &CHOICE);
     60c:	22520001 	subscs	r0, r2, #1
     610:	2d00000f 	stccs	0, cr0, [r0, #-60]	; 0xffffffc4
     614:	0100000f 	tsteq	r0, pc
		switch(CHOICE) {
     618:	0f2d5200 	svceq	0x002d5200
     61c:	0f3a0000 	svceq	0x003a0000
     620:	00010000 	andeq	r0, r1, r0
     624:	000f3a54 	andeq	r3, pc, r4, asr sl	; <UNPREDICTABLE>
     628:	000f6c00 	andeq	r6, pc, r0, lsl #24
     62c:	52000100 	andpl	r0, r0, #0, 2
	...
     638:	00000dd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     63c:	00000dde 	ldrdeq	r0, [r0], -lr
     640:	00500001 	subseq	r0, r0, r1
     644:	00000000 	andeq	r0, r0, r0
				proceed menu;
     648:	d0000000 	andle	r0, r0, r0
     64c:	df00000d 	svcle	0x0000000d
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     650:	0100000d 	tsteq	r0, sp
     654:	00005100 	andeq	r5, r0, r0, lsl #2
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     658:	00000000 	andeq	r0, r0, r0
     65c:	0d800000 	stceq	0, cr0, [r0]
     660:	0d970000 	ldceq	0, cr0, [r7]
		DEBUG_PRINT("setting node group ID");
     664:	00010000 	andeq	r0, r1, r0
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     668:	000dba50 	andeq	fp, sp, r0, asr sl
    node->gid = gid; 
     66c:	000dd000 	andeq	sp, sp, r0
		proceed menu;
     670:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     67c:	00000c76 	andeq	r0, r0, r6, ror ip
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     680:	00000c86 	andeq	r0, r0, r6, lsl #25
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     684:	86520001 	ldrbhi	r0, [r2], -r1
     688:	8e00000c 	cdphi	0, 0, cr0, cr0, cr12, {0}
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     68c:	0500000c 	streq	r0, [r0, #-12]
     690:	20040c00 	andcs	r0, r4, r0, lsl #24
		if((node_db->id < 1) || (node_db->id > 25)){
     694:	0d284009 	stceq	0, cr4, [r8, #-36]!	; 0xffffffdc
     698:	0d2c0000 	stceq	0, cr0, [ip, #-0]
     69c:	00050000 	andeq	r0, r5, r0
			strncpy(reason, "Out of Range", 50);
     6a0:	0920040c 	stmdbeq	r0!, {r2, r3, sl}
     6a4:	000d2c40 	andeq	r2, sp, r0, asr #24
			proceed invalid_node_id;
     6a8:	000d2e00 	andeq	r2, sp, r0, lsl #28
     6ac:	52000100 	andpl	r0, r0, #0, 2
				strncpy(reason, "ID is already in use", 50);
     6b0:	00000d2e 	andeq	r0, r0, lr, lsr #26
		for(int i = 0; i < node_db->index; i++){
     6b4:	00000d30 	andeq	r0, r0, r0, lsr sp
     6b8:	040c0005 	streq	r0, [ip], #-5
     6bc:	00400920 	subeq	r0, r0, r0, lsr #18
		proceed menu;
     6c0:	00000000 	andeq	r0, r0, r0
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     6c4:	90000000 	andls	r0, r0, r0
     6c8:	9a00000c 	bls	700 <root+0x1ac>
     6cc:	0100000c 	tsteq	r0, ip
     6d0:	0c9e5200 	lfmeq	f5, 4, [lr], {0}
		proceed get_new_node_id;
     6d4:	0ca80000 	stceq	0, cr0, [r8]
     6d8:	00010000 	andeq	r0, r1, r0
		if (!clear_node_neighbour_array(node_db)){
     6dc:	000cac52 	andeq	sl, ip, r2, asr ip
     6e0:	000cb600 	andeq	fp, ip, r0, lsl #12
			strncpy(reason, "Error Clearing Node Array", 50);
     6e4:	52000100 	andpl	r0, r0, #0, 2
     6e8:	00000cba 			; <UNDEFINED> instruction: 0x00000cba
     6ec:	00000cc6 	andeq	r0, r0, r6, asr #25
			proceed error;
     6f0:	52520001 	subspl	r0, r2, #1
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     6f4:	5600000d 	strpl	r0, [r0], -sp
     6f8:	0100000d 	tsteq	r0, sp
		request_packet->gid = node_db->gid;
     6fc:	00005200 	andeq	r5, r0, r0, lsl #4
     700:	00000000 	andeq	r0, r0, r0
		request_packet->tpe = DISCOVERY_REQUEST;
     704:	0c160000 	ldceq	0, cr0, [r6], {-0}
		request_packet->request_number = generate_request_num();
     708:	0c280000 	stceq	0, cr0, [r8], #-0
     70c:	00010000 	andeq	r0, r1, r0
		call sender(request_packet, wait_discovery);
     710:	00000054 	andeq	r0, r0, r4, asr r0
     714:	00000000 	andeq	r0, r0, r0
		request_packet->receiver_id=0;
     718:	000bb000 	andeq	fp, fp, r0
		call sender(request_packet, wait_discovery);
     71c:	000bb800 	andeq	fp, fp, r0, lsl #16
     720:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				proceed get_new_node_id;
     72c:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
				proceed clear_neighbour_array;
     730:	00000bb6 			; <UNDEFINED> instruction: 0x00000bb6
				proceed create_proto_start;
     734:	b6510001 	ldrblt	r0, [r1], -r1
				proceed start_delete_proto;
     738:	bb00000b 	bllt	76c <root+0x218>
				proceed retrieve_proto;
     73c:	0100000b 	tsteq	r0, fp
				proceed display_db;
     740:	00005200 	andeq	r5, r0, r0, lsl #4
	...
			if(node_db->id == node_db->nnodes[i]){
     750:	00010000 	andeq	r0, r1, r0
				strncpy(reason, "ID is already in use", 50);
     754:	00000050 	andeq	r0, r0, r0, asr r0
	...
		for(int i = 0; i < node_db->index; i++){
     764:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			discovery_wait_flag=1;
     770:	00510001 	subseq	r0, r1, r1
	...
			discovery_wait_flag=0;
     780:	01000000 	mrseq	r0, (UNDEF: 0)
     784:	00005200 	andeq	r5, r0, r0, lsl #4
			delay(3000, display_neighbour_nodes);
     788:	00000000 	andeq	r0, r0, r0
     78c:	00010000 	andeq	r0, r1, r0
     790:	00000054 	andeq	r0, r0, r4, asr r0
     794:	00000000 	andeq	r0, r0, r0
     798:	000b7000 	andeq	r7, fp, r0
     79c:	000b7b00 	andeq	r7, fp, r0, lsl #22
     7a0:	50000100 	andpl	r0, r0, r0, lsl #2
     7a4:	00000b7b 	andeq	r0, r0, fp, ror fp
     7a8:	00000ba4 	andeq	r0, r0, r4, lsr #23
     7ac:	00540001 	subseq	r0, r4, r1
     7b0:	00000000 	andeq	r0, r0, r0
     7b4:	34000000 	strcc	r0, [r0], #-0
     7b8:	4c00000b 	stcmi	0, cr0, [r0], {11}
     7bc:	0100000b 	tsteq	r0, fp
     7c0:	0b4c5000 	bleq	13147c8 <__ccfg+0x12f4820>
     7c4:	0b640000 	bleq	19007cc <__ccfg+0x18e0824>
     7c8:	00010000 	andeq	r0, r1, r0
     7cc:	00000054 	andeq	r0, r0, r4, asr r0
     7d0:	00000000 	andeq	r0, r0, r0
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     7d4:	000b0800 	andeq	r0, fp, r0, lsl #16
     7d8:	000b0e00 	andeq	r0, fp, r0, lsl #28
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7dc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     7f0:	00500001 	subseq	r0, r0, r1
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     7f4:	00000000 	andeq	r0, r0, r0
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7f8:	ec000000 	stc	0, cr0, [r0], {-0}
		proceed menu;
     7fc:	0a00001b 	beq	870 <root+0x31c>
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     800:	0200001c 	andeq	r0, r0, #28
     804:	0a709100 	beq	1c24c0c <__ccfg+0x1c04c64>
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     808:	3200001c 	andcc	r0, r0, #28
     80c:	0100001c 	tsteq	r0, ip, lsl r0
     810:	1c365400 	cfldrsne	mvf5, [r6], #-0
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     814:	1c3e0000 	ldcne	0, cr0, [lr], #-0
     818:	00010000 	andeq	r0, r1, r0
			strncpy(reason, "Error: improper ID", 50);
     81c:	001c4c54 	andseq	r4, ip, r4, asr ip
     820:	001c9600 	andseq	r9, ip, r0, lsl #12
     824:	56000100 	strpl	r0, [r0], -r0, lsl #2
			proceed error;
     828:	00001c9a 	muleq	r0, sl, ip
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     82c:	00001d12 	andeq	r1, r0, r2, lsl sp
     830:	00560001 	subseq	r0, r6, r1
		ser_in(get_record_to_create, user_provided_record, 20);
     834:	00000000 	andeq	r0, r0, r0
     838:	56000000 	strpl	r0, [r0], -r0
     83c:	9400001c 	strls	r0, [r0], #-28	; 0xffffffe4
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     840:	0100001c 	tsteq	r0, ip, lsl r0
		create_message->gid = node_db->gid;
     844:	1c9a5100 	ldfnes	f5, [sl], {0}
     848:	1cac0000 	stcne	0, cr0, [ip]
     84c:	00010000 	andeq	r0, r1, r0
		create_message->tpe = 2;
     850:	001cb851 	andseq	fp, ip, r1, asr r8
		create_message->request_number = generate_request_num();
     854:	001cc200 	andseq	ip, ip, r0, lsl #4
		create_message->sender_id = node_db->id;
     858:	51000100 	mrspl	r0, (UNDEF: 16)
     85c:	00001cd4 	ldrdeq	r1, [r0], -r4
     860:	00001cd8 	ldrdeq	r1, [r0], -r8
		strncpy(create_message->record, user_provided_record, 20);
     864:	f8510001 			; <UNDEFINED> instruction: 0xf8510001
		create_message->receiver_id = user_provided_receiver_id;
     868:	fc00001c 	stc2	0, cr0, [r0], {28}
		strncpy(create_message->record, user_provided_record, 20);
     86c:	0100001c 	tsteq	r0, ip, lsl r0
		response_checker[0] = create_message->request_number;
     870:	00005100 	andeq	r5, r0, r0, lsl #2
		call sender(create_message, wait);
     874:	00000000 	andeq	r0, r0, r0
		response_checker[1] = create_message->tpe;
     878:	1c560000 	mrane	r0, r6, acc0
     87c:	1c940000 	ldcne	0, cr0, [r4], {0}
		call sender(create_message, wait);
     880:	00010000 	andeq	r0, r1, r0
     884:	001c9a55 	andseq	r9, ip, r5, asr sl
     888:	001cc200 	andseq	ip, ip, r0, lsl #4
     88c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     890:	00001cd4 	ldrdeq	r1, [r0], -r4
     894:	00001cd8 	ldrdeq	r1, [r0], -r8
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     898:	f8550001 			; <UNDEFINED> instruction: 0xf8550001
     89c:	1200001c 	andne	r0, r0, #28
     8a0:	0100001d 	tsteq	r0, sp, lsl r0
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     8a4:	00005500 	andeq	r5, r0, r0, lsl #10
     8a8:	00000000 	andeq	r0, r0, r0
			strncpy(reason, "Error: improper node ID", 50);
     8ac:	1cc80000 	stclne	0, cr0, [r8], {0}
     8b0:	1cd40000 	ldclne	0, cr0, [r4], {0}
			proceed error;
     8b4:	00010000 	andeq	r0, r1, r0
     8b8:	001cd855 	andseq	sp, ip, r5, asr r8
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     8bc:	001cf200 	andseq	pc, ip, r0, lsl #4
     8c0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
		ser_inf(get_index_for_delete, "%d", &user_provided_index);
     8c4:	00001cf6 	strdeq	r1, [r0], -r6
     8c8:	00001cf8 	strdeq	r1, [r0], -r8
     8cc:	00550001 	subseq	r0, r5, r1
		if (user_provided_index < 0 || user_provided_index > 40){
     8d0:	00000000 	andeq	r0, r0, r0
			strncpy(reason, "Error: invalid index", 50);
     8d4:	7c000000 	stcvc	0, cr0, [r0], {-0}
     8d8:	9400001c 	strls	r0, [r0], #-28	; 0xffffffe4
     8dc:	0100001c 	tsteq	r0, ip, lsl r0
			proceed error;
     8e0:	00005400 	andeq	r5, r0, r0, lsl #8
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     8e4:	00000000 	andeq	r0, r0, r0
     8e8:	1cc20000 	stclne	0, cr0, [r2], {0}
		delete_record->gid = node_db->gid;
     8ec:	1cd40000 	ldclne	0, cr0, [r4], {0}
     8f0:	00010000 	andeq	r0, r1, r0
     8f4:	001cd854 	andseq	sp, ip, r4, asr r8
		delete_record->tpe = DELETE_RECORD;
     8f8:	001cec00 	andseq	lr, ip, r0, lsl #24
		delete_record->request_number = generate_request_num();
     8fc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     900:	00001cec 	andeq	r1, r0, ip, ror #25
		delete_record->sender_id = node_db->id;
     904:	00001cf8 	strdeq	r1, [r0], -r8
		response_checker[0] = delete_record->request_number;
     908:	00530001 	subseq	r0, r3, r1
		delete_record->receiver_id = user_provided_receiver_id;
     90c:	00000000 	andeq	r0, r0, r0
     910:	04000000 	streq	r0, [r0], #-0
		delete_record->record_index = user_provided_index;
     914:	1200001d 	andne	r0, r0, #29
     918:	0100001d 	tsteq	r0, sp, lsl r0
		response_checker[0] = delete_record->request_number;
     91c:	00005100 	andeq	r5, r0, r0, lsl #2
		call sender(&delete_record, wait);
     920:	00000000 	andeq	r0, r0, r0
     924:	16d00000 	ldrbne	r0, [r0], r0
     928:	16dc0000 	ldrbne	r0, [ip], r0
     92c:	00010000 	andeq	r0, r1, r0
     930:	00000050 	andeq	r0, r0, r0, asr r0
	...
		ser_inf(get_id_for_retrieve, "%d", &user_provided_receiver_id);
     940:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     94c:	00500001 	subseq	r0, r0, r1
	...
			proceed error;
     95c:	01000000 	mrseq	r0, (UNDEF: 0)
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     960:	00005100 	andeq	r5, r0, r0, lsl #2
     964:	00000000 	andeq	r0, r0, r0
		ser_inf(get_index_for_retrieve, "%d", &user_provided_index);
     968:	00010000 	andeq	r0, r1, r0
     96c:	00000051 	andeq	r0, r0, r1, asr r0
	...
			strncpy(reason, "Error: invalid index", 50);
     97c:	52000100 	andpl	r0, r0, #0, 2
	...
			proceed error;
     988:	00520001 	subseq	r0, r2, r1
	...
		retrieve_record->gid = node_db->gid;
     998:	01000000 	mrseq	r0, (UNDEF: 0)
		retrieve_record->tpe = RETRIEVE_RECORD;
     99c:	00005300 	andeq	r5, r0, r0, lsl #6
		retrieve_record->request_number = generate_request_num();
     9a0:	00000000 	andeq	r0, r0, r0
     9a4:	00010000 	andeq	r0, r1, r0
		retrieve_record->sender_id = node_db->id;
     9a8:	00000053 	andeq	r0, r0, r3, asr r0
     9ac:	00000000 	andeq	r0, r0, r0
     9b0:	53000100 	movwpl	r0, #256	; 0x100
	...
		response_checker[1] = retrieve_record->tpe;
     9c4:	00500001 	subseq	r0, r0, r1
     9c8:	00000000 	andeq	r0, r0, r0
		call sender(&retrieve_record, wait);
     9cc:	d4000000 	strle	r0, [r0], #-0
     9d0:	dc00001b 	stcle	0, cr0, [r0], {27}
     9d4:	0100001b 	tsteq	r0, fp, lsl r0
     9d8:	00005000 	andeq	r5, r0, r0
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     9dc:	00000000 	andeq	r0, r0, r0
     9e0:	1af80000 	bne	ffe009e8 <_estack+0xdfdfb9e8>
		if(node_db->data_base.item_count != 0){
     9e4:	1afe0000 	bne	fff809ec <_estack+0xdff7b9ec>
     9e8:	00010000 	andeq	r0, r1, r0
		ser_out(loop_through_data, "\r\n");
     9ec:	00000050 	andeq	r0, r0, r0, asr r0
     9f0:	00000000 	andeq	r0, r0, r0
		proceed menu;
     9f4:	001b0e00 	andseq	r0, fp, r0, lsl #28
     9f8:	001b3a00 	andseq	r3, fp, r0, lsl #20
		delete_all(node_db);
     9fc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     a00:	00001b3a 	andeq	r1, r0, sl, lsr fp
		proceed menu;
     a04:	00001b40 	andeq	r1, r0, r0, asr #22
		delay(3000, timeout);
     a08:	40520001 	subsmi	r0, r2, r1
     a0c:	8800001b 	stmdahi	r0, {r0, r1, r3, r4}
     a10:	0100001b 	tsteq	r0, fp, lsl r0
		when(&response_flag, menu);
     a14:	1b885400 	blne	fe215a1c <_estack+0xde210a1c>
     a18:	1ba00000 	blne	fe800a20 <_estack+0xde7fba20>
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a1c:	00010000 	andeq	r0, r1, r0
     a20:	00000050 	andeq	r0, r0, r0, asr r0
     a24:	00000000 	andeq	r0, r0, r0
     a28:	001b3a00 	andseq	r3, fp, r0, lsl #20
     a2c:	001b3e00 	andseq	r3, fp, r0, lsl #28
     a30:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     a34:	00001b3e 	andeq	r1, r0, lr, lsr fp
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     a38:	00001b40 	andeq	r1, r0, r0, asr #22
     a3c:	56530001 	ldrbpl	r0, [r3], -r1
     a40:	5f00001b 	svcpl	0x0000001b
     a44:	0100001b 	tsteq	r0, fp, lsl r0
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a48:	00005000 	andeq	r5, r0, r0
     a4c:	00000000 	andeq	r0, r0, r0
		ser_out(timeout, "\r\nFailed to reach the destination");
     a50:	1b480000 	blne	1200a58 <__ccfg+0x11e0ab0>
     a54:	1b580000 	blne	1600a5c <__ccfg+0x15e0ab4>
		proceed menu;
     a58:	00010000 	andeq	r0, r1, r0
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     a5c:	00000053 	andeq	r0, r0, r3, asr r0
     a60:	00000000 	andeq	r0, r0, r0
     a64:	001b0e00 	andseq	r0, fp, r0, lsl #28
		proceed menu;
     a68:	001b2c00 	andseq	r2, fp, r0, lsl #24
}
     a6c:	50000100 	andpl	r0, r0, r0, lsl #2
     a70:	00001b32 	andeq	r1, r0, r2, lsr fp
     a74:	00001b52 	andeq	r1, r0, r2, asr fp
     a78:	52500001 	subspl	r0, r0, #1
     a7c:	5c00001b 	stcpl	0, cr0, [r0], {27}
     a80:	0200001b 	andeq	r0, r0, #27
     a84:	007c7400 	rsbseq	r7, ip, r0, lsl #8
     a88:	00000000 	andeq	r0, r0, r0
     a8c:	50000000 	andpl	r0, r0, r0
     a90:	7e000016 	mcrvc	0, 0, r0, cr0, cr6, {0}
     a94:	01000016 	tsteq	r0, r6, lsl r0
     a98:	168c5000 	strne	r5, [ip], r0
     a9c:	16d00000 	ldrbne	r0, [r0], r0
     aa0:	00010000 	andeq	r0, r1, r0
     aa4:	00000050 	andeq	r0, r0, r0, asr r0
     aa8:	00000000 	andeq	r0, r0, r0
     aac:	00165800 	andseq	r5, r6, r0, lsl #16
     ab0:	00166400 	andseq	r6, r6, r0, lsl #8
     ab4:	53000100 	movwpl	r0, #256	; 0x100
     ab8:	00001664 	andeq	r1, r0, r4, ror #12
     abc:	00001666 	andeq	r1, r0, r6, ror #12
     ac0:	00700002 	rsbseq	r0, r0, r2
     ac4:	0000166a 	andeq	r1, r0, sl, ror #12
     ac8:	000016c2 	andeq	r1, r0, r2, asr #13
     acc:	c2530001 	subsgt	r0, r3, #1
static void devinit_uart (int devnum) {
     ad0:	c6000016 			; <UNDEFINED> instruction: 0xc6000016
	adddevfunc (ioreq_uart_a, devnum);
     ad4:	02000016 	andeq	r0, r0, #22
     ad8:	c6007300 	strgt	r7, [r0], -r0, lsl #6
void udelay (volatile word n) {
     adc:	d0000016 	andle	r0, r0, r6, lsl r0
     ae0:	01000016 	tsteq	r0, r6, lsl r0
	while (n) {
     ae4:	00005300 	andeq	r5, r0, r0, lsl #6
     ae8:	00000000 	andeq	r0, r0, r0
}
     aec:	16580000 	ldrbne	r0, [r8], -r0
	while (n--);
     af0:	165a0000 	ldrbne	r0, [sl], -r0
     af4:	00010000 	andeq	r0, r1, r0
     af8:	00166a52 	andseq	r6, r6, r2, asr sl
		n--;
     afc:	0016aa00 	andseq	sl, r6, r0, lsl #20
     b00:	52000100 	andpl	r0, r0, #0, 2
     b04:	000016c2 	andeq	r1, r0, r2, asr #13
void mdelay (volatile word n) {
     b08:	000016c6 	andeq	r1, r0, r6, asr #13
     b0c:	c6530001 	ldrbgt	r0, [r3], -r1
	while (n) {
     b10:	d0000016 	andle	r0, r0, r6, lsl r0
     b14:	01000016 	tsteq	r0, r6, lsl r0
}
     b18:	00005200 	andeq	r5, r0, r0, lsl #4
		udelay (999);
     b1c:	00000000 	andeq	r0, r0, r0
     b20:	1a200000 	bne	800b28 <__ccfg+0x7e0b80>
		n--;
     b24:	1a280000 	bne	a00b2c <__ccfg+0x9e0b84>
     b28:	00010000 	andeq	r0, r1, r0
     b2c:	001a2c51 	andseq	r2, sl, r1, asr ip
     b30:	001a2e00 	andseq	r2, sl, r0, lsl #28
void __pi_ondomain (lword d) {
     b34:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		if (__pi_systat.effpdm > 1)
     b40:	00001974 	andeq	r1, r0, r4, ror r9
			__pi_systat.effpdm = 1;
     b44:	00001990 	muleq	r0, r0, r9
	PRCMPowerDomainOn (d);
     b48:	96500001 	ldrbls	r0, [r0], -r1
     b4c:	a2000019 	andge	r0, r0, #25
     b50:	01000019 	tsteq	r0, r9, lsl r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     b54:	00005000 	andeq	r5, r0, r0
     b58:	00000000 	andeq	r0, r0, r0
     b5c:	19740000 	ldmdbne	r4!, {}^	; <UNPREDICTABLE>
	__pi_systat.ondmns |= d;
     b60:	19920000 	ldmibne	r2, {}	; <UNPREDICTABLE>
     b64:	00010000 	andeq	r0, r1, r0
}
     b68:	00199651 	andseq	r9, r9, r1, asr r6
     b6c:	0019a000 	andseq	sl, r9, r0
void __pi_offdomain (lword d) {
     b70:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     b7c:	00001974 	andeq	r1, r0, r4, ror r9
     b80:	00001995 	muleq	r0, r5, r9
     b84:	96520001 	ldrbls	r0, [r2], -r1
	if (d & PRCM_DOMAIN_RFCORE) {
     b88:	9e000019 	mcrls	0, 0, r0, cr0, cr9, {0}
     b8c:	01000019 	tsteq	r0, r9, lsl r0
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     b90:	00005200 	andeq	r5, r0, r0, lsl #4
     b94:	00000000 	andeq	r0, r0, r0
			__pi_systat.effpdm = __pi_systat.reqpdm;
     b98:	19740000 	ldmdbne	r4!, {}^	; <UNPREDICTABLE>
     b9c:	198c0000 	stmibne	ip, {}	; <UNPREDICTABLE>
	__pi_systat.ondmns &= ~d;
     ba0:	00010000 	andeq	r0, r1, r0
     ba4:	00198c53 	andseq	r8, r9, r3, asr ip
}
     ba8:	001a1000 	andseq	r1, sl, r0
     bac:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	diag ("SYSERR: %x, %s", ec, m);
     bb8:	00001974 	andeq	r1, r0, r4, ror r9
  __ASM volatile ("cpsid i" : : : "memory");
     bbc:	000019f4 	strdeq	r1, [r0], -r4
     bc0:	00910002 	addseq	r0, r1, r2
     bc4:	000019f4 	strdeq	r1, [r0], -r4
     bc8:	00001a10 	andeq	r1, r0, r0, lsl sl
		all_leds_blink;
     bcc:	00910002 	addseq	r0, r1, r2
	...
     bd8:	000019a4 	andeq	r1, r0, r4, lsr #19
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     bdc:	000019ba 			; <UNDEFINED> instruction: 0x000019ba
     be0:	c2500001 	subsgt	r0, r0, #1
     be4:	d4000019 	strle	r0, [r0], #-25	; 0xffffffe7
     be8:	01000019 	tsteq	r0, r9, lsl r0
     bec:	19e45000 	stmibne	r4!, {ip, lr}^
     bf0:	19ec0000 	stmibne	ip!, {}^	; <UNPREDICTABLE>
	while (1) {
     bf4:	00010000 	andeq	r0, r1, r0
     bf8:	0019f450 	andseq	pc, r9, r0, asr r4	; <UNPREDICTABLE>
     bfc:	0019fc00 	andseq	pc, r9, r0, lsl #24
     c00:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	setdel = __pi_mintk - __pi_old;
     c0c:	00001950 	andeq	r1, r0, r0, asr r9
     c10:	00001956 	andeq	r1, r0, r6, asr r9
     c14:	5c500001 	mrrcpl	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c18:	64000019 	strvs	r0, [r0], #-25	; 0xffffffe7
     c1c:	01000019 	tsteq	r0, r9, lsl r0
     c20:	19685000 	stmdbne	r8!, {ip, lr}^
     c24:	19740000 	ldmdbne	r4!, {}^	; <UNPREDICTABLE>
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     c28:	00010000 	andeq	r0, r1, r0
	sti_tim;
     c2c:	00000050 	andeq	r0, r0, r0, asr r0
}
     c30:	00000000 	andeq	r0, r0, r0
     c34:	00195000 	andseq	r5, r9, r0
     c38:	00195800 	andseq	r5, r9, r0, lsl #16
     c3c:	51000100 	mrspl	r0, (UNDEF: 16)
     c40:	0000195c 	andeq	r1, r0, ip, asr r9
	cli_aux;
     c44:	00001966 	andeq	r1, r0, r6, ror #18
     c48:	68510001 	ldmdavs	r1, {r0}^
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c4c:	74000019 	strvc	r0, [r0], #-25	; 0xffffffe7
     c50:	01000019 	tsteq	r0, r9, lsl r0
     c54:	00005100 	andeq	r5, r0, r0, lsl #2
     c58:	00000000 	andeq	r0, r0, r0
	sti_aux;
     c5c:	19420000 	stmdbne	r2, {}^	; <UNPREDICTABLE>
}
     c60:	194a0000 	stmdbne	sl, {}^	; <UNPREDICTABLE>
     c64:	00010000 	andeq	r0, r1, r0
     c68:	00194e50 	andseq	r4, r9, r0, asr lr
void AONRTCIntHandler () {
     c6c:	00195000 	andseq	r5, r9, r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     c70:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if (__pi_utims [0] == 0)
     c7c:	00001942 	andeq	r1, r0, r2, asr #18
     c80:	00001944 	andeq	r1, r0, r4, asr #18
		if (*(__pi_utims [0])) {
     c84:	00520001 	subseq	r0, r2, r1
     c88:	00000000 	andeq	r0, r0, r0
			(*(__pi_utims [0]))--;
     c8c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
		if (__pi_utims [1] == 0)
     c90:	30000019 	andcc	r0, r0, r9, lsl r0
		if (*(__pi_utims [1])) {
     c94:	01000019 	tsteq	r0, r9, lsl r0
			aux_timer_inactive = 0;
     c98:	00005000 	andeq	r5, r0, r0
			(*(__pi_utims [1]))--;
     c9c:	00000000 	andeq	r0, r0, r0
		if (__pi_utims [2] == 0)
     ca0:	192e0000 	stmdbne	lr!, {}	; <UNPREDICTABLE>
		if (*(__pi_utims [2])) {
     ca4:	19380000 	ldmdbne	r8!, {}	; <UNPREDICTABLE>
			(*(__pi_utims [2]))--;
     ca8:	00010000 	andeq	r0, r1, r0
		if (__pi_utims [3] != 0) {
     cac:	00193c51 	andseq	r3, r9, r1, asr ip
			if (*(__pi_utims [3])) {
     cb0:	00194200 	andseq	r4, r9, r0, lsl #4
				aux_timer_inactive = 0;
     cb4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	if (__pi_systat.ledsts) {
     cc0:	0000192e 	andeq	r1, r0, lr, lsr #18
		if (__pi_systat.ledblc++ == 0) {
     cc4:	00001932 	andeq	r1, r0, r2, lsr r9
     cc8:	00520001 	subseq	r0, r2, r1
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     cd8:	01000000 	mrseq	r0, (UNDEF: 0)
     cdc:	00005000 	andeq	r5, r0, r0
	...
				if (__pi_systat.ledsts & 0x4)
     cec:	00010000 	andeq	r0, r1, r0
				__pi_systat.ledblk = 0;
     cf0:	00000051 	andeq	r0, r0, r1, asr r0
	...
				__pi_systat.ledblc = 200;
     d00:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		__pi_new += setdel;
     d0c:	00500001 	subseq	r0, r0, r1
	...
     d1c:	01000000 	mrseq	r0, (UNDEF: 0)
		RISE_N_SHINE;
     d20:	00005100 	andeq	r5, r0, r0, lsl #2
     d24:	00000000 	andeq	r0, r0, r0
		aux_timer_inactive = 1;
     d28:	19120000 	ldmdbne	r2, {}	; <UNPREDICTABLE>
     d2c:	19280000 	stmdbne	r8!, {}	; <UNPREDICTABLE>
				if (__pi_systat.ledsts & 0x1)
     d30:	00010000 	andeq	r0, r1, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d34:	00192c50 	andseq	r2, r9, r0, asr ip
     d38:	00192e00 	andseq	r2, r9, r0, lsl #28
				if (__pi_systat.ledsts & 0x2)
     d3c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				if (__pi_systat.ledsts & 0x8)
     d48:	00001912 	andeq	r1, r0, r2, lsl r9
				__pi_systat.ledblk = 1;
     d4c:	00001914 	andeq	r1, r0, r4, lsl r9
     d50:	00510001 	subseq	r0, r1, r1
		if (aux_timer_inactive) {
     d54:	00000000 	andeq	r0, r0, r0
			cli_aux;
     d58:	12000000 	andne	r0, r0, #0
     d5c:	16000019 			; <UNDEFINED> instruction: 0x16000019
     d60:	01000019 	tsteq	r0, r9, lsl r0
     d64:	00005200 	andeq	r5, r0, r0, lsl #4
     d68:	00000000 	andeq	r0, r0, r0
     d6c:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
     d70:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     d74:	00010000 	andeq	r0, r1, r0
     d78:	00000050 	andeq	r0, r0, r0, asr r0
     d7c:	00000000 	andeq	r0, r0, r0
word tci_update_delay_ticks (Boolean force) {
     d80:	00190200 	andseq	r0, r9, r0, lsl #4
	cli_tim;
     d84:	00190400 	andseq	r0, r9, r0, lsl #8
     d88:	51000100 	mrspl	r0, (UNDEF: 16)
	if (setdel) {
     d8c:	00001908 	andeq	r1, r0, r8, lsl #18
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d90:	00001912 	andeq	r1, r0, r2, lsl r9
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     d94:	00510001 	subseq	r0, r1, r1
     d98:	00000000 	andeq	r0, r0, r0
     d9c:	f4000000 	vst4.8	{d0-d3}, [r0], r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     da0:	f8000018 			; <UNDEFINED> instruction: 0xf8000018
				AON_RTC_O_CH0CMP)) - gettav ());
     da4:	01000018 	tsteq	r0, r8, lsl r0
	return NO;
     da8:	18f85000 	ldmne	r8!, {ip, lr}^
			setdel = 0;
     dac:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     db0:	00010000 	andeq	r0, r1, r0
     db4:	00000053 	andeq	r0, r0, r3, asr r0
}
     db8:	00000000 	andeq	r0, r0, r0
		sti_tim;
     dbc:	0018f800 	andseq	pc, r8, r0, lsl #16
		return YES;
     dc0:	00190200 	andseq	r0, r9, r0, lsl #4
     dc4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     dd8:	00500001 	subseq	r0, r0, r1
	UARTDisable (UART0_BASE);
     ddc:	00000000 	andeq	r0, r0, r0
	UARTConfigSetExpClk (UART0_BASE,
     de0:	01000000 	mrseq	r0, (UNDEF: 0)
     de4:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     df4:	00010000 	andeq	r0, r1, r0
     df8:	00000052 	andeq	r0, r0, r2, asr r0
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     dfc:	00000000 	andeq	r0, r0, r0
     e00:	52000100 	andpl	r0, r0, #0, 2
	...
}
     e14:	00500001 	subseq	r0, r0, r1
     e18:	00000000 	andeq	r0, r0, r0
     e1c:	d0000000 	andle	r0, r0, r0
     e20:	d8000018 	stmdale	r0, {r3, r4}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e24:	01000018 	tsteq	r0, r8, lsl r0
     e28:	18da5000 	ldmne	sl, {ip, lr}^
     e2c:	18de0000 	ldmne	lr, {}^	; <UNPREDICTABLE>
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     e30:	00010000 	andeq	r0, r1, r0
     e34:	0018de50 	andseq	sp, r8, r0, asr lr
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     e38:	0018f400 	andseq	pc, r8, r0, lsl #8
     e3c:	53000100 	movwpl	r0, #256	; 0x100
	...
	__pi_uart_setrate (urates [0], __pi_uart);
     e50:	00500001 	subseq	r0, r0, r1
     e54:	00000000 	andeq	r0, r0, r0
     e58:	01000000 	mrseq	r0, (UNDEF: 0)
	switch (operation) {
     e5c:	00005000 	andeq	r5, r0, r0
	...
static int ioreq_uart_a (int operation, char *buf, int len) {
     e6c:	00010000 	andeq	r0, r1, r0
     e70:	00000050 	andeq	r0, r0, r0, asr r0
				*buf++ = uart_a_read;
     e74:	00000000 	andeq	r0, r0, r0
     e78:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
     e8c:	00500001 	subseq	r0, r0, r1
     e90:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
     e94:	01000000 	mrseq	r0, (UNDEF: 0)
			if (uart_a_char_available) {
     e98:	00005700 	andeq	r5, r0, r0, lsl #14
	...
     ea8:	00010000 	andeq	r0, r1, r0
     eac:	00000056 	andeq	r0, r0, r6, asr r0
	...
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     ebc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			return -2;
     ec8:	00500001 	subseq	r0, r0, r1
				uart_a_write (*buf);
     ecc:	00000000 	andeq	r0, r0, r0
     ed0:	01000000 	mrseq	r0, (UNDEF: 0)
			while (len && uart_a_room_in_tx) {
     ed4:	00005800 	andeq	r5, r0, r0, lsl #16
     ed8:	00000000 	andeq	r0, r0, r0
     edc:	00010000 	andeq	r0, r1, r0
			if (len != operation) {
     ee0:	00000050 	andeq	r0, r0, r0, asr r0
	...
			if (uart_a_room_in_tx) {
     ef0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
				*buf++ = uart_a_read;
     efc:	00540001 	subseq	r0, r4, r1
	...
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     f0c:	01000000 	mrseq	r0, (UNDEF: 0)
     f10:	00005800 	andeq	r5, r0, r0, lsl #16
			uart_a_enable_int;
     f14:	00000000 	andeq	r0, r0, r0
     f18:	00010000 	andeq	r0, r1, r0
     f1c:	00000058 	andeq	r0, r0, r8, asr r0
			return 0;
     f20:	00000000 	andeq	r0, r0, r0
			if (len == UART_CNTRL_SETRATE) {
     f24:	001aa800 	andseq	sl, sl, r0, lsl #16
				if (__pi_uart_setrate (*((word*)buf),
     f28:	001ab000 	andseq	fp, sl, r0
     f2c:	50000100 	andpl	r0, r0, r0, lsl #2
     f30:	00001ab0 			; <UNDEFINED> instruction: 0x00001ab0
				syserror (EREQPAR, "uar");
     f34:	00001aba 			; <UNDEFINED> instruction: 0x00001aba
			syserror (ENOOPER, "uai");
     f38:	c0500001 	subsgt	r0, r0, r1
			if (len == UART_CNTRL_GETRATE) {
     f3c:	cc00001a 	stcgt	0, cr0, [r0], {26}
				return 1;
     f40:	0100001a 	tsteq	r0, sl, lsl r0
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     f44:	1ae05000 	bne	ff814f4c <_estack+0xdf80ff4c>
			syserror (ENOOPER, "uai");
     f48:	1aea0000 	bne	ffa80f50 <_estack+0xdfa7bf50>
     f4c:	00010000 	andeq	r0, r1, r0
     f50:	00000050 	andeq	r0, r0, r0, asr r0
     f54:	00000000 	andeq	r0, r0, r0
     f58:	001ab600 	andseq	fp, sl, r0, lsl #12
     f5c:	001ae800 	andseq	lr, sl, r0, lsl #16
     f60:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     f64:	00001ae8 	andeq	r1, r0, r8, ror #21
     f68:	00001aea 	andeq	r1, r0, sl, ror #21
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     f6c:	ea520001 	b	1480f78 <__ccfg+0x1460fd0>
void UART0IntHandler () {
     f70:	ec00001a 	stc	0, cr0, [r0], {26}
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     f74:	0100001a 	tsteq	r0, sl, lsl r0
     f78:	00005400 	andeq	r5, r0, r0, lsl #8
     f7c:	00000000 	andeq	r0, r0, r0
     f80:	161a0000 	ldrne	r0, [sl], -r0
     f84:	164c0000 	strbne	r0, [ip], -r0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     f88:	00010000 	andeq	r0, r1, r0
     f8c:	00000056 	andeq	r0, r0, r6, asr r0
		RISE_N_SHINE;
     f90:	00000000 	andeq	r0, r0, r0
     f94:	00163000 	andseq	r3, r6, r0
		i_trigger (devevent (UART_A, READ));
     f98:	00163a00 	andseq	r3, r6, r0, lsl #20
     f9c:	53000100 	movwpl	r0, #256	; 0x100
	...
     fb0:	00500001 	subseq	r0, r0, r1
     fb4:	00000000 	andeq	r0, r0, r0
     fb8:	01000000 	mrseq	r0, (UNDEF: 0)
     fbc:	00005400 	andeq	r5, r0, r0, lsl #8
	...
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     fcc:	00010000 	andeq	r0, r1, r0
     fd0:	00000050 	andeq	r0, r0, r0, asr r0
		i_trigger (devevent (UART_A, WRITE));
     fd4:	00000000 	andeq	r0, r0, r0
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     fd8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		RISE_N_SHINE;
     fe4:	00001898 	muleq	r0, r8, r8
     fe8:	000018b1 			; <UNDEFINED> instruction: 0x000018b1
		i_trigger (devevent (UART_A, WRITE));
     fec:	00500001 	subseq	r0, r0, r1
     ff0:	00000000 	andeq	r0, r0, r0
     ff4:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     ff8:	ae000018 	mcrge	0, 0, r0, cr0, cr8, {0}
     ffc:	01000018 	tsteq	r0, r8, lsl r0
    1000:	00005100 	andeq	r5, r0, r0, lsl #2
    1004:	00000000 	andeq	r0, r0, r0
    1008:	18740000 	ldmdane	r4!, {}^	; <UNPREDICTABLE>
    100c:	18880000 	stmne	r8, {}	; <UNPREDICTABLE>
    1010:	00010000 	andeq	r0, r1, r0
    1014:	00188850 	andseq	r8, r8, r0, asr r8
}
    1018:	00188c00 	andseq	r8, r8, r0, lsl #24
    101c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1020:	00001890 	muleq	r0, r0, r8
    1024:	00001898 	muleq	r0, r8, r8
    1028:	00500001 	subseq	r0, r0, r1
void __buttons_setirq (int val) {
    102c:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1030:	74000000 	strvc	r0, [r0], #-0
    1034:	8b000018 	blhi	109c <__pinlist_setirq+0x2c>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1038:	01000018 	tsteq	r0, r8, lsl r0
    103c:	18905100 	ldmne	r0, {r8, ip, lr}
    1040:	18980000 	ldmne	r8, {}	; <UNPREDICTABLE>
		bn = BUTTON_GPIO (__button_list [i]);
    1044:	00010000 	andeq	r0, r1, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1048:	00000051 	andeq	r0, r0, r1, asr r0
    104c:	00000000 	andeq	r0, r0, r0
    1050:	00187c00 	andseq	r7, r8, r0, lsl #24
    1054:	00188b00 	andseq	r8, r8, r0, lsl #22
    1058:	53000100 	movwpl	r0, #256	; 0x100
    105c:	00001890 	muleq	r0, r0, r8
}
    1060:	00001898 	muleq	r0, r8, r8
    1064:	00530001 	subseq	r0, r3, r1
	...
	for (i = 0; i < N_PINLIST; i++) {
    1074:	01000000 	mrseq	r0, (UNDEF: 0)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1078:	00005000 	andeq	r5, r0, r0
	...
    1088:	00010000 	andeq	r0, r1, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    108c:	00000051 	andeq	r0, r0, r1, asr r0
    1090:	00000000 	andeq	r0, r0, r0
    1094:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
}
    10a8:	00520001 	subseq	r0, r2, r1
void GPIOIntHandler () {
    10ac:	00000000 	andeq	r0, r0, r0
if (buttons_int) {
    10b0:	01000000 	mrseq	r0, (UNDEF: 0)
    10b4:	00005200 	andeq	r5, r0, r0, lsl #4
	buttons_disable ();
    10b8:	00000000 	andeq	r0, r0, r0
    10bc:	18540000 	ldmdane	r4, {}^	; <UNPREDICTABLE>
	i_trigger ((aword)&__button_list);
    10c0:	185e0000 	ldmdane	lr, {}^	; <UNPREDICTABLE>
    10c4:	00010000 	andeq	r0, r1, r0
    10c8:	00000053 	andeq	r0, r0, r3, asr r0
    10cc:	00000000 	andeq	r0, r0, r0
    10d0:	0017f800 	andseq	pc, r7, r0, lsl #16
    10d4:	0017fe00 	andseq	pc, r7, r0, lsl #28
    10d8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    10e4:	00001ba0 	andeq	r1, r0, r0, lsr #23
    10e8:	00001ba6 	andeq	r1, r0, r6, lsr #23
	RISE_N_SHINE;
    10ec:	a6500001 	ldrbge	r0, [r0], -r1
    10f0:	d400001b 	strle	r0, [r0], #-27	; 0xffffffe5
    10f4:	0100001b 	tsteq	r0, fp, lsl r0
if (pin_sensor_int) {
    10f8:	00005500 	andeq	r5, r0, r0, lsl #10
    10fc:	00000000 	andeq	r0, r0, r0
	i_trigger ((aword)(&__input_pins));
    1100:	1ba00000 	blne	fe801108 <_estack+0xde7fc108>
    1104:	1bab0000 	blne	feac110c <_estack+0xdeabc10c>
    1108:	00010000 	andeq	r0, r1, r0
    110c:	001bab51 	andseq	sl, fp, r1, asr fp
    1110:	001bd400 	andseq	sp, fp, r0, lsl #8
    1114:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1120:	00001bbc 			; <UNDEFINED> instruction: 0x00001bbc
    1124:	00001bc0 	andeq	r1, r0, r0, asr #23
    1128:	c2530001 	subsgt	r0, r3, #1
	__pinsen_disable_and_clear;
    112c:	c600001b 			; <UNDEFINED> instruction: 0xc600001b
	RISE_N_SHINE;
    1130:	0100001b 	tsteq	r0, fp, lsl r0
    1134:	1bc65300 	blne	ff195d3c <_estack+0xdf190d3c>
    1138:	1bd40000 	blne	ff501140 <_estack+0xdf4fc140>
}
    113c:	00010000 	andeq	r0, r1, r0
    1140:	00000052 	andeq	r0, r0, r2, asr r0
    1144:	00000000 	andeq	r0, r0, r0
    1148:	00172400 	andseq	r2, r7, r0, lsl #8
    114c:	00172900 	andseq	r2, r7, r0, lsl #18
void system_init () {
    1150:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    115c:	00001724 	andeq	r1, r0, r4, lsr #14
    1160:	00001729 	andeq	r1, r0, r9, lsr #14
    1164:	00510001 	subseq	r0, r1, r1
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1174:	01000000 	mrseq	r0, (UNDEF: 0)
    1178:	00005000 	andeq	r5, r0, r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    117c:	00000000 	andeq	r0, r0, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1180:	00010000 	andeq	r0, r1, r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1184:	00000050 	andeq	r0, r0, r0, asr r0
	...
		pin = (port_confs [i] >> 19) & 0x1f;
    1194:	53000100 	movwpl	r0, #256	; 0x100
	...
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    11a0:	00530001 	subseq	r0, r3, r1
    11a4:	00000000 	andeq	r0, r0, r0
    11a8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    11ac:	00000016 	andeq	r0, r0, r6, lsl r0
		if (port_confs [i] & 0x80)
    11b0:	01000017 	tsteq	r0, r7, lsl r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    11b4:	17005000 	strne	r5, [r0, -r0]
    11b8:	17130000 	ldrne	r0, [r3, -r0]
		if (port_confs [i] & 0x40)
    11bc:	00010000 	andeq	r0, r1, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11c0:	00171453 	andseq	r1, r7, r3, asr r4
    11c4:	00172400 	andseq	r2, r7, r0, lsl #8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11c8:	53000100 	movwpl	r0, #256	; 0x100
	...
	all_leds_blink;
    11d4:	00001702 	andeq	r1, r0, r2, lsl #14
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11d8:	00001713 	andeq	r1, r0, r3, lsl r7
    11dc:	14500001 	ldrbne	r0, [r0], #-1
    11e0:	24000017 	strcs	r0, [r0], #-23	; 0xffffffe9
    11e4:	01000017 	tsteq	r0, r7, lsl r0
    11e8:	00005000 	andeq	r5, r0, r0
	...
    11f8:	00010000 	andeq	r0, r1, r0
    11fc:	00000050 	andeq	r0, r0, r0, asr r0
    1200:	00000000 	andeq	r0, r0, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1204:	53000100 	movwpl	r0, #256	; 0x100
	...
	IntEnable (INT_AON_RTC_COMB);
    1210:	00530001 	subseq	r0, r3, r1
	...
	IntEnable (INT_AON_GPIO_EDGE);
    1220:	01000000 	mrseq	r0, (UNDEF: 0)
    1224:	00005000 	andeq	r5, r0, r0
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1228:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    122c:	00010000 	andeq	r0, r1, r0
    1230:	00000050 	andeq	r0, r0, r0, asr r0
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1240:	53000100 	movwpl	r0, #256	; 0x100
	...
	urates [0] = UART_RATE / 100;
    124c:	0000172c 	andeq	r1, r0, ip, lsr #14
    1250:	00001732 	andeq	r1, r0, r2, lsr r7
	reinit_uart ();
    1254:	00500001 	subseq	r0, r0, r1
	EXTRA_INITIALIZERS;
    1258:	00000000 	andeq	r0, r0, r0
    125c:	2c000000 	stccs	0, cr0, [r0], {-0}
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    1260:	35000017 	strcc	r0, [r0, #-23]	; 0xffffffe9
    1264:	01000017 	tsteq	r0, r7, lsl r0
    1268:	00005100 	andeq	r5, r0, r0, lsl #2
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    126c:	00000000 	andeq	r0, r0, r0
    1270:	173a0000 	ldrne	r0, [sl, -r0]!
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1274:	17780000 	ldrbne	r0, [r8, -r0]!
    1278:	00010000 	andeq	r0, r1, r0
			devinit [i] . init (devinit [i] . param);
    127c:	00177c54 	andseq	r7, r7, r4, asr ip
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1280:	0017ca00 	andseq	ip, r7, r0, lsl #20
    1284:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1288:	000017cc 	andeq	r1, r0, ip, asr #15
	IntEnable (INT_UART0_COMB);
    128c:	000017d6 	ldrdeq	r1, [r0], -r6
    1290:	00540001 	subseq	r0, r4, r1
}
    1294:	00000000 	andeq	r0, r0, r0
	tci_run_auxiliary_timer ();
    1298:	72000000 	andvc	r0, r0, #0
		diag ("");
    129c:	74000017 	strvc	r0, [r0], #-23	; 0xffffffe9
    12a0:	01000017 	tsteq	r0, r7, lsl r0
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    12a4:	177c5000 	ldrbne	r5, [ip, -r0]!
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    12a8:	17cc0000 	strbne	r0, [ip, r0]
		diag ("Leftover RAM: %d bytes",
    12ac:	00010000 	andeq	r0, r1, r0
    12b0:	00000050 	andeq	r0, r0, r0, asr r0
    12b4:	00000000 	andeq	r0, r0, r0
    12b8:	00180c00 	andseq	r0, r8, r0, lsl #24
    12bc:	00182000 	andseq	r2, r8, r0
    12c0:	50000100 	andpl	r0, r0, r0, lsl #2
    12c4:	00001826 	andeq	r1, r0, r6, lsr #16
    12c8:	00001840 	andeq	r1, r0, r0, asr #16
    12cc:	00500001 	subseq	r0, r0, r1
    12d0:	00000000 	andeq	r0, r0, r0
    12d4:	0c000000 	stceq	0, cr0, [r0], {-0}
    12d8:	22000018 	andcs	r0, r0, #24
    12dc:	01000018 	tsteq	r0, r8, lsl r0
    12e0:	18265100 	stmdane	r6!, {r8, ip, lr}
    12e4:	182c0000 	stmdane	ip!, {}	; <UNPREDICTABLE>
    12e8:	00010000 	andeq	r0, r1, r0
    12ec:	00000051 	andeq	r0, r0, r1, asr r0
    12f0:	00000000 	andeq	r0, r0, r0
    12f4:	00181e00 	andseq	r1, r8, r0, lsl #28
    12f8:	00182000 	andseq	r2, r8, r0
    12fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1308:	0000181e 	andeq	r1, r0, lr, lsl r8
    130c:	00001822 	andeq	r1, r0, r2, lsr #16
    1310:	00510001 	subseq	r0, r1, r1
    1314:	00000000 	andeq	r0, r0, r0
    1318:	60000000 	andvs	r0, r0, r0
    131c:	6e00001a 	mcrvs	0, 0, r0, cr0, cr10, {0}
    1320:	0100001a 	tsteq	r0, sl, lsl r0
    1324:	1a745000 	bne	1d1532c <__ccfg+0x1cf5384>
}
    1328:	1a870000 	bne	fe1c1330 <_estack+0xde1bc330>
__attribute__ ((noreturn)) void __pi_release () {
    132c:	00010000 	andeq	r0, r1, r0
    1330:	00000050 	andeq	r0, r0, r0, asr r0
    1334:	00000000 	andeq	r0, r0, r0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1338:	001a6c00 	andseq	r6, sl, r0, lsl #24
	check_stack_overflow;
    133c:	001a6e00 	andseq	r6, sl, r0, lsl #28
    1340:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	for_all_tasks (__pi_curr) {
    1354:	00500001 	subseq	r0, r0, r1
    1358:	00000000 	andeq	r0, r0, r0
    135c:	01000000 	mrseq	r0, (UNDEF: 0)
  __ASM volatile ("cpsid i" : : : "memory");
    1360:	00005000 	andeq	r5, r0, r0
	...
	__SLEEP;
    1370:	00010000 	andeq	r0, r1, r0
	system_event_count ++;
    1374:	00000055 	andeq	r0, r0, r5, asr r0
	...
	switch (__pi_systat.effpdm) {
    1384:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1390:	00500001 	subseq	r0, r0, r1
	...
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    13a0:	01000000 	mrseq	r0, (UNDEF: 0)
    13a4:	00005000 	andeq	r5, r0, r0
			(__pi_curr->code) (tstate (__pi_curr));
    13a8:	00000000 	andeq	r0, r0, r0
			goto Redo;
    13ac:	00010000 	andeq	r0, r1, r0
	for_all_tasks (__pi_curr) {
    13b0:	00000050 	andeq	r0, r0, r0, asr r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    13b4:	00000000 	andeq	r0, r0, r0
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    13b8:	75000200 	strvc	r0, [r0, #-512]	; 0xfffffe00
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    13c4:	00238400 	eoreq	r8, r3, r0, lsl #8
    13c8:	0023a400 	eoreq	sl, r3, r0, lsl #8
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    13cc:	50000100 	andpl	r0, r0, r0, lsl #2
    13d0:	000023aa 	andeq	r2, r0, sl, lsr #7
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    13d4:	000023ab 	andeq	r2, r0, fp, lsr #7
    13d8:	00500001 	subseq	r0, r0, r1
			__WFI ();
    13dc:	00000000 	andeq	r0, r0, r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    13e0:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    13e4:	b4000023 	strlt	r0, [r0], #-35	; 0xffffffdd
}
    13e8:	01000023 	tsteq	r0, r3, lsr #32
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    13ec:	23b45400 			; <UNDEFINED> instruction: 0x23b45400
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    13f0:	23b70000 			; <UNDEFINED> instruction: 0x23b70000
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    13f4:	00010000 	andeq	r0, r1, r0
    13f8:	00000050 	andeq	r0, r0, r0, asr r0
			PRCMPowerDomainOff (__pi_systat.ondmns |
    13fc:	00000000 	andeq	r0, r0, r0
    1400:	00235000 	eoreq	r5, r3, r0
    1404:	00236000 	eoreq	r6, r3, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1408:	50000100 	andpl	r0, r0, r0, lsl #2
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    140c:	00002366 	andeq	r2, r0, r6, ror #6
    1410:	0000236e 	andeq	r2, r0, lr, ror #6
    1414:	00500001 	subseq	r0, r0, r1
    1418:	00000000 	andeq	r0, r0, r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    141c:	6c000000 	stcvs	0, cr0, [r0], {-0}
    1420:	78000023 	stmdavc	r0, {r0, r1, r5}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1424:	01000023 	tsteq	r0, r3, lsr #32
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1428:	00005300 	andeq	r5, r0, r0, lsl #6
    142c:	00000000 	andeq	r0, r0, r0
    1430:	236e0000 	cmncs	lr, #0
    1434:	23740000 	cmncs	r4, #0
    1438:	00010000 	andeq	r0, r1, r0
			SysCtrlSetRechargeBeforePowerDown
    143c:	00237450 	eoreq	r7, r3, r0, asr r4
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1440:	00237800 	eoreq	r7, r3, r0, lsl #16
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1444:	73000200 	movwvc	r0, #512	; 0x200
	...
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1450:	00231000 	eoreq	r1, r3, r0
    1454:	00232000 	eoreq	r2, r3, r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    1458:	50000100 	andpl	r0, r0, r0, lsl #2
    145c:	00002326 	andeq	r2, r0, r6, lsr #6
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1460:	0000232e 	andeq	r2, r0, lr, lsr #6
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1464:	00500001 	subseq	r0, r0, r1
    1468:	00000000 	andeq	r0, r0, r0
    146c:	10000000 	andne	r0, r0, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1470:	22000023 	andcs	r0, r0, #35	; 0x23
			while (!(AONWUCPowerStatusGet () &
    1474:	01000023 	tsteq	r0, r3, lsr #32
			PRCMPowerDomainOn (__pi_systat.ondmns);
    1478:	23265100 			; <UNDEFINED> instruction: 0x23265100
    147c:	23500000 	cmpcs	r0, #0
    1480:	00010000 	andeq	r0, r1, r0
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    1484:	00000051 	andeq	r0, r0, r1, asr r0
    1488:	00000000 	andeq	r0, r0, r0
    148c:	00232c00 	eoreq	r2, r3, r0, lsl #24
    1490:	00233400 	eoreq	r3, r3, r0, lsl #8
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1494:	53000100 	movwpl	r0, #256	; 0x100
    1498:	0000233e 	andeq	r2, r0, lr, lsr r3
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    149c:	00002350 	andeq	r2, r0, r0, asr r3
    14a0:	00530001 	subseq	r0, r3, r1
			SysCtrlAdjustRechargeAfterPowerDown ();
    14a4:	00000000 	andeq	r0, r0, r0
			reinit_uart ();
    14a8:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    14ac:	3c000023 	stccc	0, cr0, [r0], {35}	; 0x23
    14b0:	01000023 	tsteq	r0, r3, lsr #32
}
    14b4:	233e5000 	teqcs	lr, #0
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    14b8:	23400000 	movtcs	r0, #0
    14bc:	00010000 	andeq	r0, r1, r0
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    14c0:	00234050 	eoreq	r4, r3, r0, asr r0
    14c4:	00235000 	eoreq	r5, r3, r0
    14c8:	73000200 	movwvc	r0, #512	; 0x200
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    14d4:	00227400 	eoreq	r7, r2, r0, lsl #8
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    14d8:	00228e00 	eoreq	r8, r2, r0, lsl #28
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    14dc:	50000100 	andpl	r0, r0, r0, lsl #2
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    14e0:	0000228e 	andeq	r2, r0, lr, lsl #5
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    14e4:	00002294 	muleq	r0, r4, r2
    14e8:	94550001 	ldrbls	r0, [r5], #-1
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    14ec:	9e000022 	cdpls	0, 0, cr0, cr0, cr2, {1}
    14f0:	01000022 	tsteq	r0, r2, lsr #32
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    14f4:	229e5000 	addscs	r5, lr, #0
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    14f8:	23100000 	tstcs	r0, #0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    14fc:	00010000 	andeq	r0, r1, r0
    1500:	00000055 	andeq	r0, r0, r5, asr r0
			PRCMPowerDomainOff (
    1504:	00000000 	andeq	r0, r0, r0
    1508:	00227400 	eoreq	r7, r2, r0, lsl #8
	__SLEEP;
    150c:	00228e00 	eoreq	r8, r2, r0, lsl #28
    1510:	51000100 	mrspl	r0, (UNDEF: 16)
  __ASM volatile ("cpsie i" : : : "memory");
    1514:	0000228e 	andeq	r2, r0, lr, lsl #5
	goto Redo;
    1518:	00002294 	muleq	r0, r4, r2
    151c:	94570001 	ldrbls	r0, [r7], #-1
    1520:	9e000022 	cdpls	0, 0, cr0, cr0, cr2, {1}
    1524:	01000022 	tsteq	r0, r2, lsr #32
    1528:	229e5100 	addscs	r5, lr, #0, 2
    152c:	23100000 	tstcs	r0, #0
    1530:	00010000 	andeq	r0, r1, r0
    1534:	00000057 	andeq	r0, r0, r7, asr r0
    1538:	00000000 	andeq	r0, r0, r0
    153c:	00227400 	eoreq	r7, r2, r0, lsl #8
    1540:	00228e00 	eoreq	r8, r2, r0, lsl #28
    1544:	52000100 	andpl	r0, r0, #0, 2
    1548:	0000228e 	andeq	r2, r0, lr, lsl #5
    154c:	00002294 	muleq	r0, r4, r2
    1550:	94540001 	ldrbls	r0, [r4], #-1
    1554:	9e000022 	cdpls	0, 0, cr0, cr0, cr2, {1}
    1558:	01000022 	tsteq	r0, r2, lsr #32
    155c:	229e5200 	addscs	r5, lr, #0, 4
    1560:	23100000 	tstcs	r0, #0
    1564:	00010000 	andeq	r0, r1, r0
    1568:	00000054 	andeq	r0, r0, r4, asr r0
    156c:	00000000 	andeq	r0, r0, r0
    1570:	0022ce00 	eoreq	ip, r2, r0, lsl #28
    1574:	0022e600 	eoreq	lr, r2, r0, lsl #12
    1578:	50000100 	andpl	r0, r0, r0, lsl #2
    157c:	000022e6 	andeq	r2, r0, r6, ror #5
    1580:	000022eb 	andeq	r2, r0, fp, ror #5
	cli_tim;
    1584:	00510001 	subseq	r0, r1, r1
    1588:	00000000 	andeq	r0, r0, r0
    158c:	ec000000 	stc	0, cr0, [r0], {-0}
	diag ("PicOS halted");
    1590:	fb000022 	blx	1622 <killev+0xe>
	mdelay (500);
    1594:	01000022 	tsteq	r0, r2, lsr #32
    1598:	00005000 	andeq	r5, r0, r0
	setpowermode (2);
    159c:	00000000 	andeq	r0, r0, r0
	__PCB = NULL;
    15a0:	22240000 	eorcs	r0, r4, #0
	release;
    15a4:	22320000 	eorscs	r0, r2, #0
    15a8:	00010000 	andeq	r0, r1, r0
    15ac:	00223250 	eoreq	r3, r2, r0, asr r2
    15b0:	00226000 	eoreq	r6, r2, r0
int main (void) {
    15b4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    15c0:	00002224 	andeq	r2, r0, r4, lsr #4
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    15c4:	00002238 	andeq	r2, r0, r8, lsr r2
	system_init ();
    15c8:	3c510001 	mrrccc	0, 0, r0, r1, cr1
	tcv_init ();
    15cc:	4b000022 	blmi	165c <qfree+0xc>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    15d0:	01000022 	tsteq	r0, r2, lsr #32
    15d4:	00005100 	andeq	r5, r0, r0, lsl #2
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    15d8:	00000000 	andeq	r0, r0, r0
    15dc:	22240000 	eorcs	r0, r4, #0
    15e0:	22380000 	eorscs	r0, r8, #0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    15e4:	00010000 	andeq	r0, r1, r0
    15e8:	00223c52 	eoreq	r3, r2, r2, asr ip
	delay (16, 0);
    15ec:	00224b00 	eoreq	r4, r2, r0, lsl #22
    15f0:	52000100 	andpl	r0, r0, #0, 2
	...
	__pi_release ();
    15fc:	0000224c 	andeq	r2, r0, ip, asr #4
    1600:	00002256 	andeq	r2, r0, r6, asr r2
    1604:	56500001 	ldrbpl	r0, [r0], -r1
    1608:	5a000022 	bpl	1698 <qfree+0x48>
    160c:	07000022 	streq	r0, [r0, -r2, lsr #32]
    1610:	32007400 	andcc	r7, r0, #0, 8
static void killev (__pi_pcb_t *pid) {
    1614:	22007224 	andcs	r7, r0, #36, 4	; 0x40000002
	wfun = (aword)(pid->code);
    1618:	0000225a 	andeq	r2, r0, sl, asr r2
	for_all_tasks (i) {
    161c:	00002274 	andeq	r2, r0, r4, ror r2
		for (j = 0; j < nevents (i); j++) {
    1620:	00500001 	subseq	r0, r0, r1
	...
    1630:	01000000 	mrseq	r0, (UNDEF: 0)
			if (i->Events [j] . Event == (aword)pid
    1634:	00005000 	andeq	r5, r0, r0
	...
				wakeupev (i, j);
    1644:	00010000 	andeq	r0, r1, r0
	for_all_tasks (i) {
    1648:	00000051 	andeq	r0, r0, r1, asr r0
	...
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1658:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	m_setnextp (cc, ch);
    1664:	00550001 	subseq	r0, r5, r1
	...
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1674:	01000000 	mrseq	r0, (UNDEF: 0)
			m_setnextp (cc, m_nextp (chunk));
    1678:	00005100 	andeq	r5, r0, r0, lsl #2
			m_size (chunk) += m_hdrlen + m_size (ch);
    167c:	00000000 	andeq	r0, r0, r0
    1680:	00010000 	andeq	r0, r1, r0
    1684:	00000056 	andeq	r0, r0, r6, asr r0
	...
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    1694:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			m_size (ch) += m_hdrlen + m_size (chunk);
    16a0:	00540001 	subseq	r0, r4, r1
	...
    16b0:	01000000 	mrseq	r0, (UNDEF: 0)
    16b4:	00005000 	andeq	r5, r0, r0
			if (m_size (chunk) >= m_size (ch))
    16b8:	00000000 	andeq	r0, r0, r0
    16bc:	00010000 	andeq	r0, r1, r0
    16c0:	00000050 	andeq	r0, r0, r0, asr r0
	...
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    16d0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	diag_wchar (c, a);
    16dc:	00510001 	subseq	r0, r1, r1
	...
	syserror (ESTATE, "state");
    16ec:	01000000 	mrseq	r0, (UNDEF: 0)
    16f0:	00005000 	andeq	r5, r0, r0
    16f4:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < MAX_UTIMERS; i++)
    16f8:	00010000 	andeq	r0, r1, r0
void utimer_add (address ut) {
    16fc:	00000050 	andeq	r0, r0, r0, asr r0
	...
	for (i = 0; i < MAX_UTIMERS; i++)
    170c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
}
    1718:	00510001 	subseq	r0, r1, r1
    171c:	00000000 	andeq	r0, r0, r0
    1720:	5c000000 	stcpl	0, cr0, [r0], {-0}
	*t = v;
    1724:	74000021 	strvc	r0, [r0], #-33	; 0xffffffdf
	TCI_RUN_AUXILIARY_TIMER;
    1728:	01000021 	tsteq	r0, r1, lsr #32
void update_n_wake (word min, Boolean force) {
    172c:	217a5000 	cmncs	sl, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
    1730:	21840000 	orrcs	r0, r4, r0
    1734:	00010000 	andeq	r0, r1, r0
    1738:	00218650 	eoreq	r8, r1, r0, asr r6
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    173c:	00219400 	eoreq	r9, r1, r0, lsl #8
    1740:	50000100 	andpl	r0, r0, r0, lsl #2
    1744:	0000219a 	muleq	r0, sl, r1
    1748:	0000219c 	muleq	r0, ip, r1
    174c:	a6500001 	ldrbge	r0, [r0], -r1
    1750:	a8000021 	stmdage	r0, {r0, r5}
    1754:	01000021 	tsteq	r0, r1, lsr #32
    1758:	00005000 	andeq	r5, r0, r0
    175c:	00000000 	andeq	r0, r0, r0
    1760:	215c0000 	cmpcs	ip, r0
    1764:	21960000 	orrscs	r0, r6, r0
    1768:	00010000 	andeq	r0, r1, r0
    176c:	00219a51 	eoreq	r9, r1, r1, asr sl
		for_all_tasks (i) {
    1770:	0021a500 	eoreq	sl, r1, r0, lsl #10
	__pi_mintk = znew + min;
    1774:	51000100 	mrspl	r0, (UNDEF: 16)
    1778:	000021a6 	andeq	r2, r0, r6, lsr #3
			if (!twaiting (i))
    177c:	000021bc 			; <UNDEFINED> instruction: 0x000021bc
    1780:	00510001 	subseq	r0, r1, r1
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1784:	00000000 	andeq	r0, r0, r0
    1788:	5c000000 	stcpl	0, cr0, [r0], {-0}
    178c:	99000021 	stmdbls	r0, {r0, r5}
    1790:	01000021 	tsteq	r0, r1, lsr #32
    1794:	219a5200 	orrscs	r5, sl, r0, lsl #4
    1798:	21a50000 			; <UNDEFINED> instruction: 0x21a50000
    179c:	00010000 	andeq	r0, r1, r0
    17a0:	0021a652 	eoreq	sl, r1, r2, asr r6
    17a4:	0021bc00 	eoreq	fp, r1, r0, lsl #24
    17a8:	52000100 	andpl	r0, r0, #0, 2
	...
				wakeuptm (i);
    17b4:	00002174 	andeq	r2, r0, r4, ror r1
    17b8:	00002178 	andeq	r2, r0, r8, ror r1
		for_all_tasks (i) {
    17bc:	00500001 	subseq	r0, r0, r1
	...
		if ((word)(__pi_mintk - znew) < min) 
    17cc:	01000000 	mrseq	r0, (UNDEF: 0)
    17d0:	00005000 	andeq	r5, r0, r0
    17d4:	00000000 	andeq	r0, r0, r0
	__pi_old = znew;
    17d8:	00010000 	andeq	r0, r1, r0
}
    17dc:	00000050 	andeq	r0, r0, r0, asr r0
	...
    17ec:	50000100 	andpl	r0, r0, r0, lsl #2
	...
void proceed (word state) {
    17f8:	00540001 	subseq	r0, r4, r1
	...
	release;
    1808:	01000000 	mrseq	r0, (UNDEF: 0)
void __pi_wait (aword event, word state) {
    180c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	if (j >= MAX_EVENTS_PER_TASK)
    181c:	00010000 	andeq	r0, r1, r0
		syserror (ENEVENTS, "sw");
    1820:	00000052 	andeq	r0, r0, r2, asr r0
    1824:	00000000 	andeq	r0, r0, r0
	setestate (__pi_curr->Events [j], state, event);
    1828:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
}
    1834:	000020f4 	strdeq	r2, [r0], -r4
    1838:	000020fe 	strdeq	r2, [r0], -lr
    183c:	fe500001 	cdp2	0, 5, cr0, cr0, cr1, {0}
void __pi_trigger (aword event) {
    1840:	2e000020 	cdpcs	0, 0, cr0, cr0, cr0, {1}
	for_all_tasks (i) {
    1844:	01000021 	tsteq	r0, r1, lsr #32
		for (j = 0; j < nevents (i); j++) {
    1848:	00005400 	andeq	r5, r0, r0, lsl #8
    184c:	00000000 	andeq	r0, r0, r0
    1850:	20f40000 	rscscs	r0, r4, r0
    1854:	210c0000 	mrscs	r0, (UNDEF: 12)
			if (i->Events [j] . Event == event) {
    1858:	00010000 	andeq	r0, r1, r0
    185c:	00210c51 	eoreq	r0, r1, r1, asr ip
    1860:	00211300 	eoreq	r1, r1, r0, lsl #6
				wakeupev (i, j);
    1864:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    1870:	000020f4 	strdeq	r2, [r0], -r4
aword __pi_join (aword pid, word st) {
    1874:	00002104 	andeq	r2, r0, r4, lsl #2
	for_all_tasks (i) {
    1878:	04520001 	ldrbeq	r0, [r2], #-1
    187c:	2e000021 	cdpcs	0, 0, cr0, cr0, cr1, {1}
	return 0;
    1880:	01000021 	tsteq	r0, r1, lsr #32
		if ((aword)i == pid) {
    1884:	00005500 	andeq	r5, r0, r0, lsl #10
			__pi_wait (pid, st);
    1888:	00000000 	andeq	r0, r0, r0
}
    188c:	20380000 	eorscs	r0, r8, r0
	for_all_tasks (i) {
    1890:	204e0000 	subcs	r0, lr, r0
    1894:	00010000 	andeq	r0, r1, r0
void delay (word d, word state) {
    1898:	00205450 	eoreq	r5, r0, r0, asr r4
	settstate (__pi_curr, state);
    189c:	00207400 	eoreq	r7, r0, r0, lsl #8
    18a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	update_n_wake (d, YES);
    18ac:	00002038 	andeq	r2, r0, r8, lsr r0
    18b0:	0000204e 	andeq	r2, r0, lr, asr #32
	__pi_curr->Timer = __pi_old + d;
    18b4:	54510001 	ldrbpl	r0, [r1], #-1
    18b8:	6c000020 	stcvs	0, cr0, [r0], {32}
	inctimer (__pi_curr);
    18bc:	01000020 	tsteq	r0, r0, lsr #32
    18c0:	206e5100 	rsbcs	r5, lr, r0, lsl #2
    18c4:	207a0000 	rsbscs	r0, sl, r0
}
    18c8:	00010000 	andeq	r0, r1, r0
    18cc:	00000051 	andeq	r0, r0, r1, asr r0
	if (fun == NULL)
    18d0:	00000000 	andeq	r0, r0, r0
		return (int) __pi_curr;
    18d4:	00203800 	eoreq	r3, r0, r0, lsl #16
    18d8:	00204e00 	eoreq	r4, r0, r0, lsl #28
	for_all_tasks (i)
    18dc:	52000100 	andpl	r0, r0, #0, 2
}
    18e0:	0000204e 	andeq	r2, r0, lr, asr #32
		if (i->code == fun)
    18e4:	00002054 	andeq	r2, r0, r4, asr r0
	for_all_tasks (i)
    18e8:	54540001 	ldrbpl	r0, [r4], #-1
    18ec:	60000020 	andvs	r0, r0, r0, lsr #32
    18f0:	01000020 	tsteq	r0, r0, lsr #32
int __pi_strlen (const char *s) {
    18f4:	20605200 	rsbcs	r5, r0, r0, lsl #4
	for (i = 0; *(s+i) != '\0'; i++);
    18f8:	20860000 	addcs	r0, r6, r0
}
    18fc:	00010000 	andeq	r0, r1, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1900:	00208c54 	eoreq	r8, r0, r4, asr ip
	while ((Boolean)(*d++ = *s++));
    1904:	00209200 	eoreq	r9, r0, r0, lsl #4
    1908:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    190c:	00002096 	muleq	r0, r6, r0
}
    1910:	000020aa 	andeq	r2, r0, sl, lsr #1
	while (n-- && (*s != '\0'))
    1914:	00540001 	subseq	r0, r4, r1
    1918:	00000000 	andeq	r0, r0, r0
	*d = '\0';
    191c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
	while (n-- && (*s != '\0'))
    1920:	46000020 	strmi	r0, [r0], -r0, lsr #32
    1924:	01000020 	tsteq	r0, r0, lsr #32
		*d++ = *s++;
    1928:	00005300 	andeq	r5, r0, r0, lsl #6
    192c:	00000000 	andeq	r0, r0, r0
	while (n--)
    1930:	20b40000 	adcscs	r0, r4, r0
    1934:	20c00000 	sbccs	r0, r0, r0
		*dest++ = *src++;
    1938:	00010000 	andeq	r0, r1, r0
    193c:	0020c650 	eoreq	ip, r0, r0, asr r6
    1940:	0020de00 	eoreq	sp, r0, r0, lsl #28
	while (n--)
    1944:	50000100 	andpl	r0, r0, r0, lsl #2
	...
void adddevfunc (devreqfun_t rf, int loc) {
    1950:	0000207c 	andeq	r2, r0, ip, ror r0
		syserror (EREQPAR, "addv");
    1954:	00002086 	andeq	r2, r0, r6, lsl #1
		syserror (ERESOURCE, "addv");
    1958:	8c500001 	mrrchi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
	if (ioreq [loc] != NULL)
    195c:	91000020 	tstls	r0, r0, lsr #32
    1960:	01000020 	tsteq	r0, r0, lsr #32
		syserror (ERESOURCE, "addv");
    1964:	20965000 	addscs	r5, r6, r0
	ioreq [loc] = rf;
    1968:	20a40000 	adccs	r0, r4, r0
}
    196c:	00010000 	andeq	r0, r1, r0
    1970:	00000050 	andeq	r0, r0, r0, asr r0
	...
sint io (word retry, word dev, word operation, char *buf, word len) {
    1980:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    198c:	00500001 	subseq	r0, r0, r1
		syserror (ENODEVICE, "io");
    1990:	00000000 	andeq	r0, r0, r0
    1994:	01000000 	mrseq	r0, (UNDEF: 0)
	if (len == 0)
    1998:	00005000 	andeq	r5, r0, r0
	ret = (ioreq [dev]) (operation, buf, len);
    199c:	00000000 	andeq	r0, r0, r0
    19a0:	00010000 	andeq	r0, r1, r0
	if (ret >= 0)
    19a4:	00000050 	andeq	r0, r0, r0, asr r0
	...
		iowait (dev, operation, retry);
    19b4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			release;
    19c0:	00510001 	subseq	r0, r1, r1
	if (ret == -2) {
    19c4:	00000000 	andeq	r0, r0, r0
		if (retry != WNONE) {
    19c8:	01000000 	mrseq	r0, (UNDEF: 0)
    19cc:	00005100 	andeq	r5, r0, r0, lsl #2
			iowait (dev, operation, retry);
    19d0:	00000000 	andeq	r0, r0, r0
    19d4:	00010000 	andeq	r0, r1, r0
			(ioreq [dev]) (NONE, buf, len);
    19d8:	00000051 	andeq	r0, r0, r1, asr r0
	...
		(ioreq [dev]) (NONE, buf, len);
    19e8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	if (retry != WNONE) {
    19f4:	0070000a 	rsbseq	r0, r0, sl
		delay (-ret - 2, retry);
    19f8:	9c032432 	cfstrsls	mvf2, [r3], {50}	; 0x32
    19fc:	22200005 	eorcs	r0, r0, #5
	...
		release;
    1a08:	00540001 	subseq	r0, r4, r1
    1a0c:	00000000 	andeq	r0, r0, r0
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1a10:	0a000000 	beq	1a18 <__pi_malloc_init+0x8>
    1a14:	32007000 	andcc	r7, r0, #0
    1a18:	059c0324 	ldreq	r0, [ip, #804]	; 0x324
    1a1c:	00222000 	eoreq	r2, r2, r0
    1a20:	00000000 	andeq	r0, r0, r0
		syserror (ERESOURCE, "mal1");
    1a24:	01000000 	mrseq	r0, (UNDEF: 0)
    1a28:	00005400 	andeq	r5, r0, r0, lsl #8
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1a2c:	00000000 	andeq	r0, r0, r0
    1a30:	000a0000 	andeq	r0, sl, r0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a34:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
	m_size (mpools [0]) = mlen - m_hdrlen;
    1a38:	00059c03 	andeq	r9, r5, r3, lsl #24
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a3c:	00002220 	andeq	r2, r0, r0, lsr #4
	...
}
    1a4c:	00010000 	andeq	r0, r1, r0
    1a50:	00000055 	andeq	r0, r0, r5, asr r0
    1a54:	00000000 	andeq	r0, r0, r0
    1a58:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		syserror (EMALLOC, "malg");
    1a6c:	00540001 	subseq	r0, r4, r1
    1a70:	00000000 	andeq	r0, r0, r0
	mcfree [MA_NP] += m_size (ch);
    1a74:	01000000 	mrseq	r0, (UNDEF: 0)
		m_size (ch) ^= MALLOC_UMASK;
    1a78:	00005400 	andeq	r5, r0, r0, lsl #8
	...
	if (mevent [MA_NP] . nwait) {
    1a88:	00010000 	andeq	r0, r1, r0
    1a8c:	00000050 	andeq	r0, r0, r0, asr r0
		trigger ((aword)(&(mevent [MA_NP])));
    1a90:	00000000 	andeq	r0, r0, r0
		mevent [MA_NP] . nwait --;
    1a94:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    1aa0:	00500001 	subseq	r0, r0, r1
	...
	j = NULL;
    1ab0:	01000000 	mrseq	r0, (UNDEF: 0)
	for_all_tasks (i) {
    1ab4:	00005500 	andeq	r5, r0, r0, lsl #10
	...
		if ((aword)i == pid) {
    1ac4:	00010000 	andeq	r0, r1, r0
				__PCB = i->Next;
    1ac8:	00000050 	andeq	r0, r0, r0, asr r0
	...
			if (i == __pi_curr)
    1ad8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				j->Next = i->Next;
    1ae4:	00500001 	subseq	r0, r0, r1
    1ae8:	00000000 	andeq	r0, r0, r0
}
    1aec:	01000000 	mrseq	r0, (UNDEF: 0)
    1af0:	00005000 	andeq	r5, r0, r0
    1af4:	00000000 	andeq	r0, r0, r0
	if (size < 8)
    1af8:	00010000 	andeq	r0, r1, r0
		_size = 2;
    1afc:	00000050 	andeq	r0, r0, r0, asr r0
	...
		_size = (((aword)size) + 3) >> 2;
    1b0c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			mevent [MA_NP] . nfail ++;
    1b18:	00510001 	subseq	r0, r1, r1
		mnfree [MA_NP] = 0;
    1b1c:	00000000 	andeq	r0, r0, r0
    1b20:	01000000 	mrseq	r0, (UNDEF: 0)
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b24:	00005100 	andeq	r5, r0, r0, lsl #2
	...
		if (m_size (chunk) >= _size)
    1b34:	00010000 	andeq	r0, r1, r0
    1b38:	00000053 	andeq	r0, r0, r3, asr r0
		chunk = m_nextp (chunk)) {
    1b3c:	00000000 	andeq	r0, r0, r0
		m_setnextp (cc, m_nextp (chunk));
    1b40:	70000a00 	andvc	r0, r0, r0, lsl #20
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1b44:	03243200 			; <UNDEFINED> instruction: 0x03243200
    1b48:	2000059c 	mulcs	r0, ip, r5
			m_size (chunk) = _size;
    1b4c:	00000022 	andeq	r0, r0, r2, lsr #32
			cc = chunk + _size + m_hdrlen;
    1b50:	00000000 	andeq	r0, r0, r0
    1b54:	53000100 	movwpl	r0, #256	; 0x100
	...
		mevent [MA_NP] . nfail = 0;
    1b60:	0070000a 	rsbseq	r0, r0, sl
		mcfree [MA_NP] -= m_size (chunk);
    1b64:	9c032432 	cfstrsls	mvf2, [r3], {50}	; 0x32
    1b68:	22200005 	eorcs	r0, r0, #5
	...
		m_size (chunk) |= MALLOC_UMASK;
    1b74:	00530001 	subseq	r0, r3, r1
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1b78:	00000000 	andeq	r0, r0, r0
		m_size (chunk) |= MALLOC_UMASK;
    1b7c:	0a000000 	beq	1b84 <__pi_malloc+0x8c>
			mnfree [MA_NP] = mcfree [MA_NP];
    1b80:	32007000 	andcc	r7, r0, #0
}
    1b84:	059c0324 	ldreq	r0, [ip, #804]	; 0x324
    1b88:	00222000 	eoreq	r2, r2, r0
	...
    1b98:	01000000 	mrseq	r0, (UNDEF: 0)
    1b9c:	00005000 	andeq	r5, r0, r0
aword __pi_fork (fsmcode func, aword data) {
    1ba0:	00000000 	andeq	r0, r0, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1ba4:	00010000 	andeq	r0, r1, r0
    1ba8:	00000050 	andeq	r0, r0, r0, asr r0
	...
	i->data = data;
    1bb8:	53000100 	movwpl	r0, #256	; 0x100
	...
			for (; j->Next != NULL; j = j->Next);
    1bc4:	00530001 	subseq	r0, r3, r1
    1bc8:	00000000 	andeq	r0, r0, r0
	return (aword) i;
    1bcc:	01000000 	mrseq	r0, (UNDEF: 0)
    1bd0:	00005300 	andeq	r5, r0, r0, lsl #6
	...
		mevent [MA_NP] . nwait ++;
    1be0:	00010000 	andeq	r0, r1, r0
	wait ((aword)(&(mevent [MA_NP])), state);
    1be4:	00000052 	andeq	r0, r0, r2, asr r0
    1be8:	00000000 	andeq	r0, r0, r0
void diag (const char *mess, ...) {
    1bec:	52000100 	andpl	r0, r0, #0, 2
	...
	diag_disable_int (a, is);
    1bf8:	00520001 	subseq	r0, r2, r1
    1bfc:	00000000 	andeq	r0, r0, r0
    1c00:	01000000 	mrseq	r0, (UNDEF: 0)
				d = (bc == 16) ? 10000 : 1000000000;
    1c04:	00005200 	andeq	r5, r0, r0, lsl #4
	diag_disable_int (a, is);
    1c08:	00000000 	andeq	r0, r0, r0
	while (*mess != '\0') {
    1c0c:	1fb80000 	svcne	0x00b80000
	dgout ('\r');
    1c10:	1fc60000 	svcne	0x00c60000
	dgout ('\n');
    1c14:	00010000 	andeq	r0, r1, r0
    1c18:	00000050 	andeq	r0, r0, r0, asr r0
    1c1c:	00000000 	andeq	r0, r0, r0
	diag_wait (a);
    1c20:	001fb800 	andseq	fp, pc, r0, lsl #16
	diag_enable_int (a, is);
    1c24:	001fca00 	andseq	ip, pc, r0, lsl #20
    1c28:	51000100 	mrspl	r0, (UNDEF: 16)
}
    1c2c:	00001fd0 	ldrdeq	r1, [r0], -r0
    1c30:	00001fe0 	andeq	r1, r0, r0, ror #31
    1c34:	e8510001 	ldmda	r1, {r0}^
		if (*mess == '%') {
    1c38:	0a00001f 	beq	1cbc <diag+0xd0>
    1c3c:	01000020 	tsteq	r0, r0, lsr #32
			if (*mess == 'l') {
    1c40:	200c5100 	andcs	r5, ip, r0, lsl #2
    1c44:	200e0000 	andcs	r0, lr, r0
				mess++;
    1c48:	00010000 	andeq	r0, r1, r0
				val = va_arg (ap, lword);
    1c4c:	00202251 	eoreq	r2, r0, r1, asr r2
				bc = 32;
    1c50:	00203800 	eoreq	r3, r0, r0, lsl #16
				bc = 16;
    1c54:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			switch (*mess) {
    1c60:	00001ff4 	strdeq	r1, [r0], -r4
				dgout ('%');
    1c64:	0000201e 	andeq	r2, r0, lr, lsl r0
    1c68:	00550001 	subseq	r0, r5, r1
				dgout (*mess);
    1c6c:	00000000 	andeq	r0, r0, r0
    1c70:	d2000000 	andle	r0, r0, #0
			switch (*mess) {
    1c74:	fc00001f 	stc2	0, cr0, [r0], {31}
					v = __pi_hex_enc_table [
    1c78:	0100001f 	tsteq	r0, pc, lsl r0
					i += 4;
    1c7c:	1ffc5400 	svcne	0x00fc5400
					(val >> (bc - i)) & 0xf];
    1c80:	20100000 	andscs	r0, r0, r0
    1c84:	00010000 	andeq	r0, r1, r0
					dgout (v);
    1c88:	00201050 	eoreq	r1, r0, r0, asr r0
    1c8c:	00203800 	eoreq	r3, r0, r0, lsl #16
				while (i < bc) {
    1c90:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
				if ((val >> (bc - 1)) & 1) {
    1c9c:	00001fd0 	ldrdeq	r1, [r0], -r0
    1ca0:	00001fe3 	andeq	r1, r0, r3, ror #31
					dgout ('-');
    1ca4:	e8500001 	ldmda	r0, {r0}^
    1ca8:	ea00001f 	b	1d2c <lrnd+0x4>
						val |= 0xffff0000;
    1cac:	0100001f 	tsteq	r0, pc, lsl r0
    1cb0:	1fea5000 	svcne	0x00ea5000
    1cb4:	1fed0000 	svcne	0x00ed0000
				d = (bc == 16) ? 10000 : 1000000000;
    1cb8:	00070000 	andeq	r0, r7, r0
    1cbc:	24320071 	ldrtcs	r0, [r2], #-113	; 0xffffff8f
    1cc0:	22220072 	eorcs	r0, r2, #114	; 0x72
					v = (word) (val / d);
    1cc4:	38000020 	stmdacc	r0, {r5}
					if (v || d == 1) break;
    1cc8:	01000020 	tsteq	r0, r0, lsr #32
    1ccc:	00005000 	andeq	r5, r0, r0
					d /= 10;
    1cd0:	00000000 	andeq	r0, r0, r0
				d = (bc == 16) ? 10000 : 1000000000;
    1cd4:	1f940000 	svcne	0x00940000
					dgout (v + '0');
    1cd8:	1faa0000 	svcne	0x00aa0000
    1cdc:	00010000 	andeq	r0, r1, r0
    1ce0:	001fac50 	andseq	sl, pc, r0, asr ip	; <UNPREDICTABLE>
					d /= 10;
    1ce4:	001fb000 	andseq	fp, pc, r0
					val = val - (v * d);
    1ce8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				d = (bc == 16) ? 10000 : 1000000000;
    1cfc:	00500001 	subseq	r0, r0, r1
					val &= 0xffff;
    1d00:	00000000 	andeq	r0, r0, r0
					dgout (*s);
    1d04:	01000000 	mrseq	r0, (UNDEF: 0)
					s++;
    1d08:	00005000 	andeq	r5, r0, r0
	...
			dgout (*mess++);
    1d18:	00010000 	andeq	r0, r1, r0
    1d1c:	00000051 	andeq	r0, r0, r1, asr r0
    1d20:	00000000 	andeq	r0, r0, r0
    1d24:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1d30:	00510001 	subseq	r0, r1, r1
    1d34:	00000000 	andeq	r0, r0, r0
	^ entropy
    1d38:	01000000 	mrseq	r0, (UNDEF: 0)
}
    1d3c:	00005500 	andeq	r5, r0, r0, lsl #10
    1d40:	00000000 	andeq	r0, r0, r0
    1d44:	00010000 	andeq	r0, r1, r0
    1d48:	00000051 	andeq	r0, r0, r1, asr r0
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1d4c:	00000000 	andeq	r0, r0, r0
	word cs = size + hblenb;
    1d50:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	if (p->attributes.b.queued) {
    1d64:	00560001 	subseq	r0, r6, r1
	...
		p->attributes.b.queued = 0;
    1d74:	01000000 	mrseq	r0, (UNDEF: 0)
    1d78:	00005000 	andeq	r5, r0, r0
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1d7c:	00000000 	andeq	r0, r0, r0
	deq (p);	// Remove from queue
    1d80:	1ed40000 	cdpne	0, 13, cr0, cr4, cr0, {0}
}
    1d84:	1f020000 	svcne	0x00020000
	tfree ((address)p);
    1d88:	00010000 	andeq	r0, r1, r0
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1d8c:	001f0850 	andseq	r0, pc, r0, asr r8	; <UNPREDICTABLE>
    1d90:	001f2800 	andseq	r2, pc, r0, lsl #16
    1d94:	50000100 	andpl	r0, r0, r0, lsl #2
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1d98:	00001f68 	andeq	r1, r0, r8, ror #30
    1d9c:	00001f6a 	andeq	r1, r0, sl, ror #30
	if (q_empty (q))
    1da0:	00500001 	subseq	r0, r0, r1
    1da4:	00000000 	andeq	r0, r0, r0
		trigger (q);
    1da8:	d4000000 	strle	r0, [r0], #-0
	if (p->attributes.b.urgent) {
    1dac:	0400001e 	streq	r0, [r0], #-30	; 0xffffffe2
		p->u.bqueue.next = q->next;
    1db0:	0100001f 	tsteq	r0, pc, lsl r0
		p->u.bqueue.prev = q;
    1db4:	1f045100 	svcne	0x00045100
		q->next->prev = (qitem_t*) p;
    1db8:	1f080000 	svcne	0x00080000
	p->attributes.b.queued = 1;
    1dbc:	00010000 	andeq	r0, r1, r0
    1dc0:	001f0857 	andseq	r0, pc, r7, asr r8	; <UNPREDICTABLE>
}
    1dc4:	001f2800 	andseq	r2, pc, r0, lsl #16
		p->u.bqueue.prev = q->prev;
    1dc8:	51000100 	mrspl	r0, (UNDEF: 16)
		q->prev->next = (qitem_t*) p;
    1dcc:	00001f28 	andeq	r1, r0, r8, lsr #30
		q->prev = (qitem_t*) p;
    1dd0:	00001f34 	andeq	r1, r0, r4, lsr pc
    1dd4:	38570001 	ldmdacc	r7, {r0}^
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1dd8:	6800001f 	stmdavs	r0, {r0, r1, r2, r3, r4}
	deq (p);	// Soft dequeue, timer and hook left intact
    1ddc:	0100001f 	tsteq	r0, pc, lsl r0
	switch (dv) {
    1de0:	1f685700 	svcne	0x00685700
    1de4:	1f6d0000 	svcne	0x006d0000
    1de8:	00010000 	andeq	r0, r1, r0
    1dec:	001f6d51 	andseq	r6, pc, r1, asr sp	; <UNPREDICTABLE>
			p->attributes.b.urgent = 1;
    1df0:	001f9400 	andseq	r9, pc, r0, lsl #8
    1df4:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
			verify_ses (p, "dispose ses");
    1e00:	00001ed4 	ldrdeq	r1, [r0], -r4
    1e04:	00001f04 	andeq	r1, r0, r4, lsl #30
    1e08:	78910002 	ldmvc	r1, {r1}
			verify_phy (p, "dispose phy");
    1e0c:	00001f08 	andeq	r1, r0, r8, lsl #30
    1e10:	00001f28 	andeq	r1, r0, r8, lsr #30
}
    1e14:	78910002 	ldmvc	r1, {r1}
			enq (oqueues [p->attributes.b.phys], p);
    1e18:	00001f38 	andeq	r1, r0, r8, lsr pc
			p->attributes.b.urgent = 1;
    1e1c:	00001f44 	andeq	r1, r0, r4, asr #30
    1e20:	78910002 	ldmvc	r1, {r1}
			verify_phy (p, "dispose phy");
    1e24:	00001f68 	andeq	r1, r0, r8, ror #30
    1e28:	00001f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    1e2c:	78910002 	ldmvc	r1, {r1}
	...
    1e38:	00001f1c 	andeq	r1, r0, ip, lsl pc
			enq (oqueues [p->attributes.b.phys], p);
    1e3c:	00001f2c 	andeq	r1, r0, ip, lsr #30
    1e40:	38560001 	ldmdacc	r6, {r0}^
}
    1e44:	9400001f 	strls	r0, [r0], #-31	; 0xffffffe1
			rlp (p);
    1e48:	0100001f 	tsteq	r0, pc, lsl r0
}
    1e4c:	00005600 	andeq	r5, r0, r0, lsl #12
    1e50:	00000000 	andeq	r0, r0, r0
    1e54:	1f380000 	svcne	0x00380000
    1e58:	1f520000 	svcne	0x00520000
    1e5c:	00010000 	andeq	r0, r1, r0
    1e60:	001f5250 	andseq	r5, pc, r0, asr r2	; <UNPREDICTABLE>
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1e64:	001f5600 	andseq	r5, pc, r0, lsl #12
	if (b->attributes.b.outgoing) {
    1e68:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	b = header (p);
    1e6c:	00001f56 	andeq	r1, r0, r6, asr pc
	if (b->attributes.b.outgoing) {
    1e70:	00001f5a 	andeq	r1, r0, sl, asr pc
		verify_ses (b, "tcv02");
    1e74:	5a500001 	bpl	1401e80 <__ccfg+0x13e1ed8>
    1e78:	6800001f 	stmdavs	r0, {r0, r1, r2, r3, r4}
    1e7c:	0100001f 	tsteq	r0, pc, lsl r0
    1e80:	1f6e5400 	svcne	0x006e5400
    1e84:	1f760000 	svcne	0x00760000
		verify_plg (b, tcv_out, "tcv03");
    1e88:	00010000 	andeq	r0, r1, r0
    1e8c:	001f7650 	andseq	r7, pc, r0, asr r6	; <UNPREDICTABLE>
    1e90:	001f9400 	andseq	r9, pc, r0, lsl #8
    1e94:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1ea0:	00001e64 	andeq	r1, r0, r4, ror #28
    1ea4:	00001e8a 	andeq	r1, r0, sl, lsl #29
    1ea8:	8e500001 	cdphi	0, 5, cr0, cr0, cr1, {0}
		dispose (b, plugins [b->attributes.b.plugin] ->
    1eac:	ab00001e 	blge	1f2c <tcv_open+0x58>
}
    1eb0:	0100001e 	tsteq	r0, lr, lsl r0
		dispose (b, plugins [b->attributes.b.plugin] ->
    1eb4:	1eb85000 	cdpne	0, 11, cr5, cr8, cr0, {0}
		rlp (b);
    1eb8:	1eba0000 	cdpne	0, 11, cr0, cr10, cr0, {0}
}
    1ebc:	00010000 	andeq	r0, r1, r0
		rlp (b);
    1ec0:	00000050 	andeq	r0, r0, r0, asr r0
    1ec4:	00000000 	andeq	r0, r0, r0
    1ec8:	001e6e00 	andseq	r6, lr, r0, lsl #28
    1ecc:	001eb400 	andseq	fp, lr, r0, lsl #8
    1ed0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1ed4:	00001eb4 			; <UNDEFINED> instruction: 0x00001eb4
    1ed8:	00001eb7 			; <UNDEFINED> instruction: 0x00001eb7
    1edc:	b8500001 	ldmdalt	r0, {r0}^
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1ee0:	be00001e 	mcrlt	0, 0, r0, cr0, cr14, {0}
	va_start (ap, plid);
    1ee4:	0100001e 	tsteq	r0, lr, lsl r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1ee8:	1ebe5400 	cdpne	4, 11, cr5, cr14, cr0, {0}
    1eec:	1ec10000 	cdpne	0, 12, cr0, cr1, cr0, {0}
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1ef0:	00010000 	andeq	r0, r1, r0
    1ef4:	00000050 	andeq	r0, r0, r0, asr r0
    1ef8:	00000000 	andeq	r0, r0, r0
    1efc:	001d4c00 	andseq	r4, sp, r0, lsl #24
			syserror (ENODEVICE, "tcv04");
    1f00:	001d5200 	andseq	r5, sp, r0, lsl #4
		syserror (EMALLOC, "tcv05");
    1f04:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	attp.b.outgoing = 1;
    1f10:	00001d7c 	andeq	r1, r0, ip, ror sp
    1f14:	00001d89 	andeq	r1, r0, r9, lsl #27
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f18:	00500001 	subseq	r0, r0, r1
		if (descriptors [fd] == NULL)
    1f1c:	00000000 	andeq	r0, r0, r0
    1f20:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f24:	7a00001d 	bvc	1fa0 <tcv_plug+0xc>
		return ERROR;
    1f28:	0100001d 	tsteq	r0, sp, lsl r0
}
    1f2c:	00005000 	andeq	r5, r0, r0
    1f30:	00000000 	andeq	r0, r0, r0
    1f34:	1d8c0000 	stcne	0, cr0, [ip]
	s->attpattern.b.session = fd;
    1f38:	1d9a0000 	ldcne	0, cr0, [sl]
    1f3c:	00010000 	andeq	r0, r1, r0
	descriptors [fd] = s;
    1f40:	001d9a50 	andseq	r9, sp, r0, asr sl
	q_init (&(s->rqueue));
    1f44:	001da000 	andseq	sl, sp, r0
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1f48:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    1f4c:	00001da0 	andeq	r1, r0, r0, lsr #27
    1f50:	00001da9 	andeq	r1, r0, r9, lsr #27
    1f54:	a9500001 	ldmdbge	r0, {r0}^
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1f58:	d800001d 	stmdale	r0, {r0, r2, r3, r4}
    1f5c:	0100001d 	tsteq	r0, sp, lsl r0
    1f60:	00005500 	andeq	r5, r0, r0, lsl #10
	descriptors [fd] = s;
    1f64:	00000000 	andeq	r0, r0, r0
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1f68:	1d8c0000 	stcne	0, cr0, [ip]
    1f6c:	1d9c0000 	ldcne	0, cr0, [ip]
	if (s == NULL)
    1f70:	00010000 	andeq	r0, r1, r0
		syserror (EMALLOC, "tcv05");
    1f74:	001d9c51 	andseq	r9, sp, r1, asr ip
    1f78:	001da000 	andseq	sl, sp, r0
    1f7c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1f80:	00001da0 	andeq	r1, r0, r0, lsr #27
    1f84:	00001da9 	andeq	r1, r0, r9, lsr #27
    1f88:	a9510001 	ldmdbge	r1, {r0}^
    1f8c:	d800001d 	stmdale	r0, {r0, r2, r3, r4}
    1f90:	0100001d 	tsteq	r0, sp, lsl r0
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1f94:	00005400 	andeq	r5, r0, r0, lsl #8
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1f98:	00000000 	andeq	r0, r0, r0
    1f9c:	1d980000 	ldcne	0, cr0, [r8]
    1fa0:	1d9a0000 	ldcne	0, cr0, [sl]
	plugins [ord] = pl;
    1fa4:	00010000 	andeq	r0, r1, r0
	return 0;
    1fa8:	001d9a50 	andseq	r9, sp, r0, asr sl
		return ERROR;
    1fac:	001da000 	andseq	sl, sp, r0
}
    1fb0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    1fbc:	00001d98 	muleq	r0, r8, sp
	verify_fds (fd, "tcv10");
    1fc0:	00001d9c 	muleq	r0, ip, sp
    1fc4:	9c510001 	mrrcls	0, 0, r0, r1, cr1
    1fc8:	a000001d 	andge	r0, r0, sp, lsl r0
	verify_plg (b, tcv_frm, "tcv11");
    1fcc:	0100001d 	tsteq	r0, sp, lsl r0
	b = q_first (rq);
    1fd0:	00005400 	andeq	r5, r0, r0, lsl #8
	if (q_end (b, rq)) {
    1fd4:	00000000 	andeq	r0, r0, r0
		if (state != WNONE) {
    1fd8:	1dd80000 	ldclne	0, cr0, [r8]
    1fdc:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
			when (rq, state);
    1fe0:	00010000 	andeq	r0, r1, r0
			release;
    1fe4:	001e0850 	andseq	r0, lr, r0, asr r8
	deq (b);	// Dequeue the packet ...
    1fe8:	001e1400 	andseq	r1, lr, r0, lsl #8
    1fec:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	p = ((address)(b + 1));
    1ff0:	00001e14 	andeq	r1, r0, r4, lsl lr
	verify_plg (b, tcv_frm, "tcv11");
    1ff4:	00001e1b 	andeq	r1, r0, fp, lsl lr
    1ff8:	1c510001 	mrrcne	0, 0, r0, r1, cr1
    1ffc:	4200001e 	andmi	r0, r0, #30
    2000:	0100001e 	tsteq	r0, lr, lsl r0
    2004:	1e425000 	cdpne	0, 4, cr5, cr2, cr0, {0}
    2008:	1e440000 	cdpne	0, 4, cr0, cr4, cr0, {0}
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    200c:	00010000 	andeq	r0, r1, r0
    2010:	001e4454 	andseq	r4, lr, r4, asr r4
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2014:	001e4b00 	andseq	r4, lr, r0, lsl #22
    2018:	50000100 	andpl	r0, r0, r0, lsl #2
	b->u.pointers.tail =
    201c:	00001e4c 	andeq	r1, r0, ip, asr #28
}
    2020:	00001e64 	andeq	r1, r0, r4, ror #28
		return NULL;
    2024:	00500001 	subseq	r0, r0, r1
    2028:	00000000 	andeq	r0, r0, r0
    202c:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    2030:	e200001d 	and	r0, r0, #29
    2034:	0100001d 	tsteq	r0, sp, lsl r0
	verify_fds (fd, "tcv16");
    2038:	00005100 	andeq	r5, r0, r0, lsl #2
								Boolean urg) {
    203c:	00000000 	andeq	r0, r0, r0
    2040:	1e240000 	cdpne	0, 2, cr0, cr4, cr0, {0}
	verify_fds (fd, "tcv16");
    2044:	1e420000 	cdpne	0, 4, cr0, cr2, cr0, {0}
    2048:	00010000 	andeq	r0, r1, r0
    204c:	001e4250 	andseq	r4, lr, r0, asr r2
	verify_pld (s, tcv_frm, "tcv17");
    2050:	001e4400 	andseq	r4, lr, r0, lsl #8
    2054:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2060:	00002130 	andeq	r2, r0, r0, lsr r1
    2064:	00002136 	andeq	r2, r0, r6, lsr r1
    2068:	36500001 	ldrbcc	r0, [r0], -r1
    206c:	42000021 	andmi	r0, r0, #33	; 0x21
	ptrs.head = (word) fd;
    2070:	01000021 	tsteq	r0, r1, lsr #32
	ptrs.tail = (word) urg;
    2074:	00005300 	andeq	r5, r0, r0, lsl #6
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    2078:	00000000 	andeq	r0, r0, r0
    207c:	21300000 	teqcs	r0, r0
		if (state != WNONE) {
    2080:	213a0000 	teqcs	sl, r0
    2084:	00010000 	andeq	r0, r1, r0
}
    2088:	00213a51 	eoreq	r3, r1, r1, asr sl
			when (eid, state);
    208c:	00214600 	eoreq	r4, r1, r0, lsl #12
    2090:	50000100 	andpl	r0, r0, r0, lsl #2
			release;
    2094:	0000214c 	andeq	r2, r0, ip, asr #2
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    2098:	00002151 	andeq	r2, r0, r1, asr r1
    209c:	00500001 	subseq	r0, r0, r1
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    20a0:	00000000 	andeq	r0, r0, r0
    20a4:	30000000 	andcc	r0, r0, r0
    20a8:	3e000021 	cdpcc	0, 0, cr0, cr0, cr1, {1}
    20ac:	01000021 	tsteq	r0, r1, lsr #32
    20b0:	213e5200 	teqcs	lr, r0, lsl #4
    20b4:	21480000 	mrscs	r0, (UNDEF: 72)
		if (state != WNONE) {
    20b8:	00010000 	andeq	r0, r1, r0
    20bc:	00214c51 	eoreq	r4, r1, r1, asr ip
			tmwait (state);
    20c0:	00215100 	eoreq	r5, r1, r0, lsl #2
    20c4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		b->attributes.b.urgent = 1;
    20d0:	00002144 	andeq	r2, r0, r4, asr #2
	b->u.pointers.head = ptrs.head;
    20d4:	00002146 	andeq	r2, r0, r6, asr #2
	b->u.pointers.tail = length;
    20d8:	00500001 	subseq	r0, r0, r1
	return (address) (b + 1);
    20dc:	00000000 	andeq	r0, r0, r0
    20e0:	44000000 	strmi	r0, [r0], #-0
    20e4:	48000021 	stmdami	r0, {r0, r5}
    20e8:	01000021 	tsteq	r0, r1, lsr #32
    20ec:	00005100 	andeq	r5, r0, r0, lsl #2
    20f0:	00000000 	andeq	r0, r0, r0
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    20f4:	21bc0000 			; <UNDEFINED> instruction: 0x21bc0000
	if (len >= b->u.pointers.tail)
    20f8:	21c00000 	biccs	r0, r0, r0
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    20fc:	00010000 	andeq	r0, r1, r0
    2100:	00000050 	andeq	r0, r0, r0, asr r0
	if (len > 0) {
    2104:	00000000 	andeq	r0, r0, r0
		memcpy ((char*)buf, ((char*)p) + b->u.pointers.head, len);
    2108:	0021bc00 	eoreq	fp, r1, r0, lsl #24
    210c:	0021ce00 	eoreq	ip, r1, r0, lsl #28
    2110:	51000100 	mrspl	r0, (UNDEF: 16)
		b->u.pointers.tail -= len;
    2114:	000021ce 	andeq	r2, r0, lr, asr #3
    2118:	000021d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    211c:	d2560001 	subsle	r0, r6, #1
		b->u.pointers.head += len;
    2120:	e2000021 	and	r0, r0, #33	; 0x21
    2124:	01000021 	tsteq	r0, r1, lsr #32
    2128:	21e25100 	mvncs	r5, r0, lsl #2
}
    212c:	21e40000 	mvncs	r0, r0
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2130:	00010000 	andeq	r0, r1, r0
    2134:	0021e456 	eoreq	lr, r1, r6, asr r4
    2138:	0021e700 	eoreq	lr, r1, r0, lsl #14
	verify_fph (phy, "tcv23");
    213c:	51000100 	mrspl	r0, (UNDEF: 16)
    2140:	000021e7 	andeq	r2, r0, r7, ror #3
    2144:	0000220a 	andeq	r2, r0, sl, lsl #4
    2148:	0a560001 	beq	1582154 <__ccfg+0x15621ac>
}
    214c:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
	return (physical [phy]) (opt, arg);
    2150:	01000022 	tsteq	r0, r2, lsr #32
    2154:	220d5100 	andcs	r5, sp, #0, 2
    2158:	22240000 	eorcs	r0, r4, #0
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    215c:	00010000 	andeq	r0, r1, r0
	if (opt < 0) {
    2160:	00000056 	andeq	r0, r0, r6, asr r0
		if (fd < 0)
    2164:	00000000 	andeq	r0, r0, r0
		if (opt == PHYSOPT_PLUGINFO) {
    2168:	0021bc00 	eoreq	fp, r1, r0, lsl #24
			if (fd >= TCV_MAX_PLUGS)
    216c:	0021d100 	eoreq	sp, r1, r0, lsl #2
			if ((p = plugins [fd]) == NULL)
    2170:	52000100 	andpl	r0, r0, #0, 2
    2174:	000021d1 	ldrdeq	r2, [r0], -r1
}
    2178:	000021d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
		if (fd >= TCV_MAX_PHYS)
    217c:	d2550001 	subsle	r0, r5, #1
		return physinfo [fd];
    2180:	e7000021 	str	r0, [r0, -r1, lsr #32]
    2184:	01000021 	tsteq	r0, r1, lsr #32
	verify_fds (fd, "tcv22");
    2188:	21e75200 	mvncs	r5, r0, lsl #4
    218c:	220a0000 	andcs	r0, sl, #0
    2190:	00010000 	andeq	r0, r1, r0
    2194:	00220a55 	eoreq	r0, r2, r5, asr sl
    2198:	00220d00 	eoreq	r0, r2, r0, lsl #26
}
    219c:	52000100 	andpl	r0, r0, #0, 2
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    21a0:	0000220d 	andeq	r2, r0, sp, lsl #4
    21a4:	00002224 	andeq	r2, r0, r4, lsr #4
			return 0;
    21a8:	00550001 	subseq	r0, r5, r1
    21ac:	00000000 	andeq	r0, r0, r0
    21b0:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    21b4:	ee000021 	cdp	0, 0, cr0, cr0, cr1, {1}
    21b8:	01000021 	tsteq	r0, r1, lsr #32
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    21bc:	21f05000 	mvnscs	r5, r0
    21c0:	22030000 	andcs	r0, r3, #0
	if (dsp != TCV_DSP_PASS) {
    21c4:	00010000 	andeq	r0, r1, r0
		if (ses == NONE)
    21c8:	00220350 	eoreq	r0, r2, r0, asr r3
			syserror (EREQPAR, "tcv26");
    21cc:	00220a00 	eoreq	r0, r2, r0, lsl #20
		verify_fds (ses, "tcv27");
    21d0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    21d4:	0000220e 	andeq	r2, r0, lr, lsl #4
    21d8:	00002214 	andeq	r2, r0, r4, lsl r2
    21dc:	00500001 	subseq	r0, r0, r1
    21e0:	00000000 	andeq	r0, r0, r0
		if ((p = apb (size)) != NULL) {
    21e4:	ca000000 	bgt	21ec <tcvp_new+0x30>
    21e8:	ce000021 	cdpgt	0, 0, cr0, cr0, cr1, {1}
		return NULL;
    21ec:	01000021 	tsteq	r0, r1, lsr #32
			p->attributes = descriptors [ses] -> attpattern;
    21f0:	00005100 	andeq	r5, r0, r0, lsl #2
			dispose (p, dsp);
    21f4:	00000000 	andeq	r0, r0, r0
			p->attributes = descriptors [ses] -> attpattern;
    21f8:	23d40000 	bicscs	r0, r4, #0
			p->attributes.b.outgoing = 0;
    21fc:	23ed0000 	mvncs	r0, #0
			dispose (p, dsp);
    2200:	00010000 	andeq	r0, r1, r0
			return (address)(p + 1);
    2204:	0023f852 	eoreq	pc, r3, r2, asr r8	; <UNPREDICTABLE>
    2208:	00240c00 	eoreq	r0, r4, r0, lsl #24
	if ((p = apb (size)) != NULL)
    220c:	52000100 	andpl	r0, r0, #0, 2
	...
		return (address)(p + 1);
    2218:	000023d4 	ldrdeq	r2, [r0], -r4
    221c:	000023ed 	andeq	r2, r0, sp, ror #7
    2220:	fc530001 	mrrc2	0, 0, r0, r3, cr1
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2224:	0c000023 	stceq	0, cr0, [r0], {35}	; 0x23
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2228:	01000024 	tsteq	r0, r4, lsr #32
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    222c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
	physical [phy] = ps;
    223c:	00010000 	andeq	r0, r1, r0
	physinfo [phy] = info;
    2240:	00000050 	andeq	r0, r0, r0, asr r0
    2244:	00000000 	andeq	r0, r0, r0
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2248:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	q_init (q);
    225c:	00510001 	subseq	r0, r1, r1
}
    2260:	00000000 	andeq	r0, r0, r0
    2264:	01000000 	mrseq	r0, (UNDEF: 0)
    2268:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	verify_fph (phy, "tcv30");
    2278:	00010000 	andeq	r0, r1, r0
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    227c:	00000052 	andeq	r0, r0, r2, asr r0
    2280:	00000000 	andeq	r0, r0, r0
	verify_fph (phy, "tcv30");
    2284:	52000100 	andpl	r0, r0, #0, 2
	...
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2298:	00510001 	subseq	r0, r1, r1
	...
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    22a8:	01000000 	mrseq	r0, (UNDEF: 0)
}
    22ac:	00005000 	andeq	r5, r0, r0
	...
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    22bc:	00010000 	andeq	r0, r1, r0
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    22c0:	00000050 	andeq	r0, r0, r0, asr r0
    22c4:	00000000 	andeq	r0, r0, r0
    22c8:	03000500 	movweq	r0, #1280	; 0x500
	...
	len -= (ap.head + ap.tail);
    22d8:	00500001 	subseq	r0, r0, r1
    22dc:	00000000 	andeq	r0, r0, r0
    22e0:	05000000 	streq	r0, [r0, #-0]
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    22e4:	00000300 	andeq	r0, r0, r0, lsl #6
	...
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    22f8:	00010000 	andeq	r0, r1, r0
	return 1;
    22fc:	00000050 	andeq	r0, r0, r0, asr r0
    2300:	00000000 	andeq	r0, r0, r0
    2304:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	verify_fph (phy, "tcv32");
    2310:	00500001 	subseq	r0, r0, r1
    2314:	00000000 	andeq	r0, r0, r0
    2318:	01000000 	mrseq	r0, (UNDEF: 0)
    231c:	00005000 	andeq	r5, r0, r0
	...
	b = q_first (oq);
    232c:	00010000 	andeq	r0, r1, r0
	if (q_end (b, oq)) {
    2330:	00000050 	andeq	r0, r0, r0, asr r0
	...
		return NULL;
    2340:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	verify_fph (phy, "tcv33");
    2354:	00500001 	subseq	r0, r0, r1
	...
    2364:	01000000 	mrseq	r0, (UNDEF: 0)
	oq = oqueues [phy];
    2368:	00005100 	andeq	r5, r0, r0, lsl #2
	b = q_first (oq);
    236c:	00000000 	andeq	r0, r0, r0
		return NULL;
    2370:	00010000 	andeq	r0, r1, r0
	return (address)(b + 1);
    2374:	00000056 	andeq	r0, r0, r6, asr r0
	...
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    2384:	52000100 	andpl	r0, r0, #0, 2
	...
	verify_plg (b, tcv_xmt, "tcv34");
    2398:	00530001 	subseq	r0, r3, r1
	...
    23a8:	01000000 	mrseq	r0, (UNDEF: 0)
	dispose (b, plugins [b->attributes.b.plugin] ->
    23ac:	00005400 	andeq	r5, r0, r0, lsl #8
}
    23b0:	00000000 	andeq	r0, r0, r0
	dispose (b, plugins [b->attributes.b.plugin] ->
    23b4:	00010000 	andeq	r0, r1, r0
    23b8:	00000054 	andeq	r0, r0, r4, asr r0
    23bc:	00000000 	andeq	r0, r0, r0
}
    23c0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    23d4:	00500001 	subseq	r0, r0, r1
    __asm("    ldr     r0, =_bss\n"
    23d8:	00000000 	andeq	r0, r0, r0
    23dc:	01000000 	mrseq	r0, (UNDEF: 0)
    23e0:	00005000 	andeq	r5, r0, r0
	...
    FaultISR();
    23f0:	00010000 	andeq	r0, r1, r0
        *pui32Dest++ = *pui32Src++;
    23f4:	00000051 	andeq	r0, r0, r1, asr r0
    23f8:	00000000 	andeq	r0, r0, r0
    23fc:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    2408:	00510001 	subseq	r0, r1, r1
	...
    2418:	01000000 	mrseq	r0, (UNDEF: 0)
static byte get_byte () {
    241c:	00005200 	andeq	r5, r0, r0, lsl #4
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2420:	00000000 	andeq	r0, r0, r0
    2424:	00010000 	andeq	r0, r1, r0
		if (ee_inp)
    2428:	00000054 	andeq	r0, r0, r4, asr r0
	...
	for (b = 0, i = 0; i < 8; i++) {
    2438:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
static void put_byte (byte b) {
    244c:	00500001 	subseq	r0, r0, r1
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    245c:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2460:	00005000 	andeq	r5, r0, r0
	for (i = 0; i < 8; i++) {
    2464:	00000000 	andeq	r0, r0, r0
		b <<= 1;
    2468:	00010000 	andeq	r0, r1, r0
	for (i = 0; i < 8; i++) {
    246c:	00000055 	andeq	r0, r0, r5, asr r0
}
    2470:	00000000 	andeq	r0, r0, r0
    2474:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    2488:	00510001 	subseq	r0, r1, r1
    248c:	00000000 	andeq	r0, r0, r0
static void wwait (word st, word del) {
    2490:	01000000 	mrseq	r0, (UNDEF: 0)
    2494:	00005600 	andeq	r5, r0, r0, lsl #12
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2498:	00000000 	andeq	r0, r0, r0
	while (dopen && (rdsr () & 1)) {
    249c:	00010000 	andeq	r0, r1, r0
    24a0:	00000056 	andeq	r0, r0, r6, asr r0
    24a4:	00000000 	andeq	r0, r0, r0
    24a8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
}
    24bc:	00520001 	subseq	r0, r2, r1
		if (st == WNONE)
    24c0:	00000000 	andeq	r0, r0, r0
    24c4:	01000000 	mrseq	r0, (UNDEF: 0)
			mdelay (1);
    24c8:	00005200 	andeq	r5, r0, r0, lsl #4
    24cc:	00000000 	andeq	r0, r0, r0
			delay (del, st);
    24d0:	24900000 	ldrcs	r0, [r0], #0
    24d4:	24a00000 	strtcs	r0, [r0], #0
			release;
    24d8:	00010000 	andeq	r0, r1, r0
    24dc:	00000050 	andeq	r0, r0, r0, asr r0
    24e0:	00000000 	andeq	r0, r0, r0
static void ready () {
    24e4:	00249000 	eoreq	r9, r4, r0
	if (dopen) {
    24e8:	0024a000 	eoreq	sl, r4, r0
		wwait (WNONE, 1);
    24ec:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	dstat = 0;
    24f8:	000024b2 			; <UNDEFINED> instruction: 0x000024b2
}
    24fc:	000024b6 			; <UNDEFINED> instruction: 0x000024b6
    2500:	00500001 	subseq	r0, r0, r1
    2504:	00000000 	andeq	r0, r0, r0
	udelay (1);
    2508:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    250c:	83000024 	movwhi	r0, #36	; 0x24
	udelay (1);
    2510:	01000024 	tsteq	r0, r4, lsr #32
		dopen = DOPEN_TEMP;
    2514:	00005000 	andeq	r5, r0, r0
    2518:	00000000 	andeq	r0, r0, r0
    251c:	24480000 	strbcs	r0, [r8], #-0
    2520:	24640000 	strbtcs	r0, [r4], #-0
static void cclose () {
    2524:	00010000 	andeq	r0, r1, r0
	if (dopen == DOPEN_TEMP) {
    2528:	00246c50 	eoreq	r6, r4, r0, asr ip
    252c:	00247800 	eoreq	r7, r4, r0, lsl #16
		wwait (WNONE, 1);
    2530:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	cmd_0 (CMD_DP);
    253c:	00002424 	andeq	r2, r0, r4, lsr #8
		dopen = 0;
    2540:	00002428 	andeq	r2, r0, r8, lsr #8
}
    2544:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
word ee_open () {
    2548:	48000024 	stmdami	r0, {r2, r5}
	ready ();
    254c:	01000024 	tsteq	r0, r4, lsr #32
	dopen = DOPEN_PERM;
    2550:	00005000 	andeq	r5, r0, r0
    2554:	00000000 	andeq	r0, r0, r0
}
    2558:	25700000 	ldrbcs	r0, [r0, #-0]!
	if (dopen) {
    255c:	25760000 	ldrbcs	r0, [r6, #-0]!
    2560:	00010000 	andeq	r0, r1, r0
		dopen = DOPEN_TEMP;
    2564:	00000050 	andeq	r0, r0, r0, asr r0
		cclose ();
    2568:	00000000 	andeq	r0, r0, r0
}
    256c:	00257000 	eoreq	r7, r5, r0
int ser_out (word st, const char *m) {
    2570:	00257b00 	eoreq	r7, r5, r0, lsl #22
	if ((prcs = running (__outserial)) != 0) {
    2574:	51000100 	mrspl	r0, (UNDEF: 16)
    2578:	0000257b 	andeq	r2, r0, fp, ror r5
    257c:	000025d6 	ldrdeq	r2, [r0], -r6
		join (prcs, st);
    2580:	00540001 	subseq	r0, r4, r1
		release;
    2584:	00000000 	andeq	r0, r0, r0
	if (*m)
    2588:	7c000000 	stcvc	0, cr0, [r0], {-0}
		prcs = strlen (m) +1;
    258c:	83000025 	movwhi	r0, #37	; 0x25
    2590:	01000025 	tsteq	r0, r5, lsr #32
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    2594:	25885000 	strcs	r5, [r8]
    2598:	258e0000 	strcs	r0, [lr]
    259c:	00010000 	andeq	r0, r1, r0
		umwait (st);
    25a0:	00259450 	eoreq	r9, r5, r0, asr r4
    25a4:	0025a600 	eoreq	sl, r5, r0, lsl #12
		prcs =  m [1] + 3;
    25a8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	if (*m)
    25ac:	000025a6 	andeq	r2, r0, r6, lsr #11
		strcpy (buf, m);
    25b0:	000025aa 	andeq	r2, r0, sl, lsr #11
    25b4:	aa500001 	bge	14025c0 <__ccfg+0x13e2618>
	if (runstrand (__outserial, buf) == 0) {
    25b8:	d6000025 	strle	r0, [r0], -r5, lsr #32
    25bc:	01000025 	tsteq	r0, r5, lsr #32
		ufree (buf);
    25c0:	00005500 	andeq	r5, r0, r0, lsl #10
    25c4:	00000000 	andeq	r0, r0, r0
		memcpy (buf, m, prcs);
    25c8:	259a0000 	ldrcs	r0, [sl]
    25cc:	259e0000 	ldrcs	r0, [lr]
    25d0:	00010000 	andeq	r0, r1, r0
}
    25d4:	00259e50 	eoreq	r9, r5, r0, asr lr
    25d8:	0025a600 	eoreq	sl, r5, r0, lsl #12
int ser_in (word st, char *buf, int len) {
    25dc:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    25e0:	000025ac 	andeq	r2, r0, ip, lsr #11
	if (len == 0)
    25e4:	000025b5 			; <UNDEFINED> instruction: 0x000025b5
	if (__inpline == NULL) {
    25e8:	b5500001 	ldrblt	r0, [r0, #-1]
		if ((prcs = running (__inserial)) == 0) {
    25ec:	c8000025 	stmdagt	r0, {r0, r2, r5}
    25f0:	01000025 	tsteq	r0, r5, lsr #32
			prcs = runthread (__inserial);
    25f4:	25c85700 	strbcs	r5, [r8, #1792]	; 0x700
    25f8:	25cf0000 	strbcs	r0, [pc]	; 2600 <ser_in+0x24>
			if (prcs == 0) {
    25fc:	00010000 	andeq	r0, r1, r0
				npwait (st);
    2600:	0025cf50 	eoreq	ip, r5, r0, asr pc
		release;
    2604:	0025d600 	eoreq	sp, r5, r0, lsl #12
		join (prcs, st);
    2608:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2614:	000025dc 	ldrdeq	r2, [r0], -ip
	if (prcs >= len)
    2618:	000025ea 	andeq	r2, r0, sl, ror #11
		prcs = len-1;
    261c:	46500001 	ldrbmi	r0, [r0], -r1
	memcpy (buf, __inpline, prcs);
    2620:	54000026 	strpl	r0, [r0], #-38	; 0xffffffda
    2624:	01000026 	tsteq	r0, r6, lsr #32
    2628:	00005000 	andeq	r5, r0, r0
	ufree (__inpline);
    262c:	00000000 	andeq	r0, r0, r0
	__inpline = NULL;
    2630:	25dc0000 	ldrbcs	r0, [ip]
	if (*buf) // if it's NULL, it's a bin cmd
    2634:	25f10000 	ldrbcs	r0, [r1, #0]!
		buf [prcs] = '\0';
    2638:	00010000 	andeq	r0, r1, r0
}
    263c:	0025f151 	eoreq	pc, r5, r1, asr r1	; <UNPREDICTABLE>
		prcs = strlen (__inpline);
    2640:	00261000 	eoreq	r1, r6, r0
    2644:	57000100 	strpl	r0, [r0, -r0, lsl #2]
		return 0;
    2648:	00002610 	andeq	r2, r0, r0, lsl r6
    264c:	00002618 	andeq	r2, r0, r8, lsl r6
    2650:	18510001 	ldmdane	r1, {r0}^
int ser_outf (word st, const char *m, ...) {
    2654:	3e000026 	cdpcc	0, 0, cr0, cr0, cr6, {1}
    2658:	01000026 	tsteq	r0, r6, lsr #32
	if ((prcs = running (__outserial)) != 0) {
    265c:	263e5700 	ldrtcs	r5, [lr], -r0, lsl #14
    2660:	26410000 	strbcs	r0, [r1], -r0
		join (prcs, st);
    2664:	00010000 	andeq	r0, r1, r0
    2668:	00264151 	eoreq	r4, r6, r1, asr r1
		release;
    266c:	00264600 	eoreq	r4, r6, r0, lsl #12
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2670:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    2674:	00002646 	andeq	r2, r0, r6, asr #12
    2678:	00002654 	andeq	r2, r0, r4, asr r6
		umwait (st);
    267c:	00510001 	subseq	r0, r1, r1
    2680:	00000000 	andeq	r0, r0, r0
	if (runstrand (__outserial, buf) == 0) {
    2684:	dc000000 	stcle	0, cr0, [r0], {-0}
    2688:	f1000025 			; <UNDEFINED> instruction: 0xf1000025
    268c:	01000025 	tsteq	r0, r5, lsr #32
		ufree (buf);
    2690:	25f15200 	ldrbcs	r5, [r1, #512]!	; 0x200
		npwait (st);
    2694:	26100000 	ldrcs	r0, [r0], -r0
}
    2698:	00010000 	andeq	r0, r1, r0
    269c:	00261055 	eoreq	r1, r6, r5, asr r0
    26a0:	00261800 	eoreq	r1, r6, r0, lsl #16
    26a4:	52000100 	andpl	r0, r0, #0, 2
int ser_inf (word st, const char *fmt, ...) {
    26a8:	00002618 	andeq	r2, r0, r8, lsl r6
    26ac:	0000263e 	andeq	r2, r0, lr, lsr r6
	if (fmt == NULL)
    26b0:	3e550001 	cdpcc	0, 5, cr0, cr5, cr1, {0}
	if (__inpline == NULL) {
    26b4:	41000026 	tstmi	r0, r6, lsr #32
		if ((prcs = running (__inserial)) == 0) {
    26b8:	01000026 	tsteq	r0, r6, lsr #32
    26bc:	26415200 	strbcs	r5, [r1], -r0, lsl #4
			prcs = runthread (__inserial);
    26c0:	26460000 	strbcs	r0, [r6], -r0
    26c4:	00010000 	andeq	r0, r1, r0
			if (prcs == 0) {
    26c8:	00264655 	eoreq	r4, r6, r5, asr r6
				npwait (st);
    26cc:	00265400 	eoreq	r5, r6, r0, lsl #8
		release;
    26d0:	52000100 	andpl	r0, r0, #0, 2
	...
	va_start (ap, fmt);
    26dc:	000025f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
	prcs = vscan (__inpline, fmt, ap);
    26e0:	000025f8 	strdeq	r2, [r0], -r8
    26e4:	f8500001 			; <UNDEFINED> instruction: 0xf8500001
	ufree (__inpline);
    26e8:	fb000025 	blx	2786 <option+0x5e>
	__inpline = NULL;
    26ec:	01000025 	tsteq	r0, r5, lsr #32
}
    26f0:	25fc5100 	ldrbcs	r5, [ip, #256]!	; 0x100
    26f4:	26000000 	strcs	r0, [r0], -r0
    26f8:	00010000 	andeq	r0, r1, r0
		return 0;
    26fc:	00260850 	eoreq	r0, r6, r0, asr r8
    2700:	00260d00 	eoreq	r0, r6, r0, lsl #26
    2704:	50000100 	andpl	r0, r0, r0, lsl #2
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2708:	00002618 	andeq	r2, r0, r8, lsl r6
    270c:	0000263a 	andeq	r2, r0, sl, lsr r6
    2710:	44540001 	ldrbmi	r0, [r4], #-1
	RF_cmdFs.frequency = 
    2714:	46000026 	strmi	r0, [r0], -r6, lsr #32
}
    2718:	01000026 	tsteq	r0, r6, lsr #32
    271c:	00005000 	andeq	r5, r0, r0
    2720:	00000000 	andeq	r0, r0, r0
    2724:	26540000 	ldrbcs	r0, [r4], -r0
static int option (int opt, address val) {
    2728:	265c0000 	ldrbcs	r0, [ip], -r0
    272c:	00010000 	andeq	r0, r1, r0
    2730:	00000050 	andeq	r0, r0, r0, asr r0
    2734:	00000000 	andeq	r0, r0, r0
    2738:	00266000 	eoreq	r6, r6, r0
    273c:	00266900 	eoreq	r6, r6, r0, lsl #18
    2740:	50000100 	andpl	r0, r0, r0, lsl #2
    2744:	00002669 	andeq	r2, r0, r9, ror #12
    2748:	0000266e 	andeq	r2, r0, lr, ror #12
    274c:	6e560001 	cdpvs	0, 5, cr0, cr6, cr1, {0}
    2750:	77000026 	strvc	r0, [r0, -r6, lsr #32]
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    2754:	01000026 	tsteq	r0, r6, lsr #32
    2758:	26775000 	ldrbtcs	r5, [r7], -r0
			goto RVal;
    275c:	269e0000 	ldrcs	r0, [lr], r0
			_BIS (dstate, DSTATE_RXON);
    2760:	00010000 	andeq	r0, r1, r0
    2764:	00269e56 	eoreq	r9, r6, r6, asr lr
	int ret = 0;
    2768:	0026a800 	eoreq	sl, r6, r0, lsl #16
			p_trigger (drvprcs, qevent);
    276c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2778:	00002678 	andeq	r2, r0, r8, ror r6
    277c:	0000267c 	andeq	r2, r0, ip, ror r6
    2780:	7c500001 	mrrcvc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    2784:	84000026 	strhi	r0, [r0], #-38	; 0xffffffda
    2788:	01000026 	tsteq	r0, r6, lsr #32
    278c:	26845500 	strcs	r5, [r4], r0, lsl #10
    2790:	26880000 	strcs	r0, [r8], r0
}
    2794:	00010000 	andeq	r0, r1, r0
			_BIC (dstate, DSTATE_RXON);
    2798:	00268850 	eoreq	r8, r6, r0, asr r8
    279c:	00269e00 	eoreq	r9, r6, r0, lsl #28
			statid = (val == NULL) ? 0 : *val;
    27a0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
			ret = (int) statid;
    27ac:	000026a8 	andeq	r2, r0, r8, lsr #13
	if (val != NULL)
    27b0:	000026b6 			; <UNDEFINED> instruction: 0x000026b6
		*val = ret;
    27b4:	fc500001 	mrrc2	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
			ret = rbuffl + 2;
    27b8:	08000026 	stmdaeq	r0, {r1, r2, r5}
    27bc:	01000027 	tsteq	r0, r7, lsr #32
			if (val != NULL) {
    27c0:	00005000 	andeq	r5, r0, r0
				memcpy (val, &rxstat,
    27c4:	00000000 	andeq	r0, r0, r0
    27c8:	26be0000 	ldrtcs	r0, [lr], r0
				memset (&rxstat, 0, 
    27cc:	26c40000 	strbcs	r0, [r4], r0
    27d0:	00010000 	andeq	r0, r1, r0
			if (val == NULL)
    27d4:	0026c450 	eoreq	ip, r6, r0, asr r4
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    27d8:	0026c700 	eoreq	ip, r6, r0, lsl #14
    27dc:	51000100 	mrspl	r0, (UNDEF: 16)
				utimer_set (bckf_timer, *val);
    27e0:	000026c8 	andeq	r2, r0, r8, asr #13
    27e4:	000026cc 	andeq	r2, r0, ip, asr #13
    27e8:	d4500001 	ldrble	r0, [r0], #-1
			for (ret = 0; ret < 8; ret++)
    27ec:	d9000026 	stmdble	r0, {r1, r2, r5}
				if (RF_cmdPropRadioDivSetup.txPower
    27f0:	01000026 	tsteq	r0, r6, lsr #32
					== patable [ret])
    27f4:	26e65000 	strbtcs	r5, [r6], r0
				if (RF_cmdPropRadioDivSetup.txPower
    27f8:	26e80000 	strbtcs	r0, [r8], r0
			for (ret = 0; ret < 8; ret++)
    27fc:	00010000 	andeq	r0, r1, r0
    2800:	0026e850 	eoreq	lr, r6, r0, asr r8
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2804:	0026f000 	eoreq	pc, r6, r0
    2808:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2814:	00002e68 	andeq	r2, r0, r8, ror #28
			_BIS (dstate, DSTATE_IRST);
    2818:	00002e76 	andeq	r2, r0, r6, ror lr
    281c:	76500001 	ldrbvc	r0, [r0], -r1
    2820:	7c00002e 	stcvc	0, cr0, [r0], {46}	; 0x2e
			ret = (int) channel;
    2824:	0100002e 	tsteq	r0, lr, lsr #32
			goto RVal;
    2828:	2e7c5600 	cdpcs	6, 7, cr5, cr12, cr0, {0}
				(*val > 7) ? 7 : *val;
    282c:	2e860000 	cdpcs	0, 8, cr0, cr6, cr0, {0}
    2830:	00010000 	andeq	r0, r1, r0
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2834:	002e8650 	eoreq	r8, lr, r0, asr r6
    2838:	002e8a00 	eoreq	r8, lr, r0, lsl #20
			plugch ();
    283c:	56000100 	strpl	r0, [r0], -r0, lsl #2
			_BIS (dstate, DSTATE_IRST);
    2840:	00002e8a 	andeq	r2, r0, sl, lsl #29
    2844:	00002e9a 	muleq	r0, sl, lr
			ret = (int) vrate;
    2848:	9a500001 	bls	1402854 <__ccfg+0x13e28ac>
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    284c:	9200002e 	andls	r0, r0, #46	; 0x2e
    2850:	0100002f 	tsteq	r0, pc, lsr #32
    2854:	00005600 	andeq	r5, r0, r0, lsl #12
    2858:	00000000 	andeq	r0, r0, r0
    285c:	2e680000 	cdpcs	0, 6, cr0, cr8, cr0, {0}
    2860:	2e780000 	cdpcs	0, 7, cr0, cr8, cr0, {0}
    2864:	00010000 	andeq	r0, r1, r0
    2868:	002e7c51 	eoreq	r7, lr, r1, asr ip
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    286c:	002e8800 	eoreq	r8, lr, r0, lsl #16
    2870:	51000100 	mrspl	r0, (UNDEF: 16)
    2874:	00002e8a 	andeq	r2, r0, sl, lsl #29
    2878:	00002e9a 	muleq	r0, sl, lr
			syserror (EREQPAR, "cc13 op");
    287c:	00510001 	subseq	r0, r1, r1
    2880:	00000000 	andeq	r0, r0, r0
    2884:	d0000000 	andle	r0, r0, r0
    2888:	e400002e 	str	r0, [r0], #-46	; 0xffffffd2
    288c:	0100002e 	tsteq	r0, lr, lsr #32
    2890:	2ee45500 	cdpcs	5, 14, cr5, cr4, cr0, {0}
    2894:	2eea0000 	cdpcs	0, 14, cr0, cr10, cr0, {0}
    2898:	00020000 	andeq	r0, r2, r0
    289c:	00000070 	andeq	r0, r0, r0, ror r0
    28a0:	00000000 	andeq	r0, r0, r0
    28a4:	2e9a0000 	cdpcs	0, 9, cr0, cr10, cr0, {0}
    28a8:	2ea30000 	cdpcs	0, 10, cr0, cr3, cr0, {0}
    28ac:	00010000 	andeq	r0, r1, r0
    28b0:	002ea353 	eoreq	sl, lr, r3, asr r3
    28b4:	002f0600 	eoreq	r0, pc, r0, lsl #12
static void issue_cmd (lword cmd) {
    28b8:	5b000100 	blpl	2cc0 <cc1350_driver+0xb8>
    28bc:	00002f38 	andeq	r2, r0, r8, lsr pc
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    28c0:	00002f3c 	andeq	r2, r0, ip, lsr pc
    28c4:	005b0001 	subseq	r0, fp, r1
    28c8:	00000000 	andeq	r0, r0, r0
		if (res != 0x86)
    28cc:	a4000000 	strge	r0, [r0], #-0
			syserror (EHARDWARE, "hang ic0");
    28d0:	a800002e 	stmdage	r0, {r1, r2, r3, r5}
    28d4:	0100002e 	tsteq	r0, lr, lsr #32
		if (cnt-- == 0) {
    28d8:	2eae5000 	cdpcs	0, 10, cr5, cr14, cr0, {0}
			diag ("HUP %lx %lx", cmd, res);
    28dc:	2ed40000 	cdpcs	0, 13, cr0, cr4, cr0, {0}
    28e0:	00010000 	andeq	r0, r1, r0
			syserror (EHARDWARE, "hang ic0");
    28e4:	002ed450 	eoreq	sp, lr, r0, asr r4
		udelay (1);
    28e8:	002ed700 	eoreq	sp, lr, r0, lsl #14
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    28ec:	53000100 	movwpl	r0, #256	; 0x100
}
    28f0:	00002f38 	andeq	r2, r0, r8, lsr pc
    28f4:	00002f3c 	andeq	r2, r0, ip, lsr pc
    28f8:	00500001 	subseq	r0, r0, r1
    28fc:	00000000 	andeq	r0, r0, r0
static void rx_de () {
    2900:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
	if ((dstate & DSTATE_RXAC) == 0)
    2904:	56000027 	strpl	r0, [r0], -r7, lsr #32
    2908:	01000027 	tsteq	r0, r7, lsr #32
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    290c:	275e5000 	ldrbcs	r5, [lr, -r0]
	_BIC (dstate, DSTATE_RXAC);
    2910:	27680000 	strbcs	r0, [r8, -r0]!
    2914:	00010000 	andeq	r0, r1, r0
}
    2918:	00279650 	eoreq	r9, r7, r0, asr r6
    291c:	0027a800 	eoreq	sl, r7, r0, lsl #16
    2920:	50000100 	andpl	r0, r0, r0, lsl #2
static void rf_off () {
    2924:	000027ac 	andeq	r2, r0, ip, lsr #15
	if ((dstate & DSTATE_RFON) == 0)
    2928:	000027b0 			; <UNDEFINED> instruction: 0x000027b0
    292c:	b8500001 	ldmdalt	r0, {r0}^
	IntDisable (INT_RFC_CPE_0);
    2930:	bc000027 	stclt	0, cr0, [r0], {39}	; 0x27
    2934:	01000027 	tsteq	r0, r7, lsr #32
    2938:	27be5000 	ldrcs	r5, [lr, r0]!
	RFCAdi3VcoLdoVoltageMode (false);
    293c:	27c40000 	strbcs	r0, [r4, r0]
	RFCSynthPowerDown ();
    2940:	00010000 	andeq	r0, r1, r0
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2944:	0027cc50 	eoreq	ip, r7, r0, asr ip
    2948:	0027ce00 	eoreq	ip, r7, r0, lsl #28
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    294c:	50000100 	andpl	r0, r0, r0, lsl #2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2950:	000027d4 	ldrdeq	r2, [r0], -r4
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2954:	000027d9 	ldrdeq	r2, [r0], -r9
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2958:	e8500001 	ldmda	r0, {r0}^
    295c:	ee000027 	cdp	0, 0, cr0, cr0, cr7, {1}
    2960:	01000027 	tsteq	r0, r7, lsr #32
	_BIC (dstate, DSTATE_RFON);
    2964:	28045000 	stmdacs	r4, {ip, lr}
    2968:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
}
    296c:	00010000 	andeq	r0, r1, r0
    2970:	00282450 	eoreq	r2, r8, r0, asr r4
    2974:	00282800 	eoreq	r2, r8, r0, lsl #16
    2978:	50000100 	andpl	r0, r0, r0, lsl #2
    297c:	0000282a 	andeq	r2, r0, sl, lsr #16
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2980:	0000287c 	andeq	r2, r0, ip, ror r8
    2984:	00500001 	subseq	r0, r0, r1
    2988:	00000000 	andeq	r0, r0, r0
		if (cmd->status == tstat)
    298c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
		if (timeout-- == 0) {
    2990:	68000027 	stmdavs	r0, {r0, r1, r2, r5}
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2994:	01000027 	tsteq	r0, r7, lsr #32
    2998:	27965100 	ldrcs	r5, [r6, r0, lsl #2]
    299c:	27a80000 	strcs	r0, [r8, r0]!
			syserror (EHARDWARE, "rt2");
    29a0:	00010000 	andeq	r0, r1, r0
    29a4:	0027ac51 	eoreq	sl, r7, r1, asr ip
		udelay (1);
    29a8:	0027b000 	eoreq	fp, r7, r0
		if (cmd->status == tstat)
    29ac:	51000100 	mrspl	r0, (UNDEF: 16)
}
    29b0:	000027b0 			; <UNDEFINED> instruction: 0x000027b0
    29b4:	000027b8 			; <UNDEFINED> instruction: 0x000027b8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    29b8:	b8540001 	ldmdalt	r4, {r0}^
    29bc:	c6000027 	strgt	r0, [r0], -r7, lsr #32
static void rf_on () {
    29c0:	01000027 	tsteq	r0, r7, lsr #32
    29c4:	27c65100 	strbcs	r5, [r6, r0, lsl #2]
	OSCHF_TurnOnXosc();
    29c8:	27cc0000 	strbcs	r0, [ip, r0]
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    29cc:	00010000 	andeq	r0, r1, r0
    29d0:	0027cc54 	eoreq	ip, r7, r4, asr ip
    29d4:	0027d100 	eoreq	sp, r7, r0, lsl #2
    29d8:	51000100 	mrspl	r0, (UNDEF: 16)
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    29dc:	000027d1 	ldrdeq	r2, [r0], -r1
    29e0:	000027d4 	ldrdeq	r2, [r0], -r4
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    29e4:	d4540001 	ldrble	r0, [r4], #-1
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    29e8:	d9000027 	stmdble	r0, {r0, r1, r2, r5}
	issue_cmd (
    29ec:	01000027 	tsteq	r0, r7, lsr #32
    29f0:	27d95100 	ldrbcs	r5, [r9, r0, lsl #2]
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    29f4:	27e80000 	strbcs	r0, [r8, r0]!
    29f8:	00010000 	andeq	r0, r1, r0
    29fc:	0027e854 	eoreq	lr, r7, r4, asr r8
   pPatchTab[80] = 0;
    2a00:	0027ea00 	eoreq	lr, r7, r0, lsl #20
   } while (--nIterations);
    2a04:	51000100 	mrspl	r0, (UNDEF: 16)
   pPatchTab[53] = 2;
    2a08:	000027ea 	andeq	r2, r0, sl, ror #15
    2a0c:	000027ec 	andeq	r2, r0, ip, ror #15
   pPatchTab[55] = 3;
    2a10:	ec540001 	mrrc	0, 0, r0, r4, cr1
   pPatchTab[110] = 4;
    2a14:	f4000027 	vst4.8	{d0-d3}, [r0 :128], r7
   pPatchTab[107] = 5;
    2a18:	01000027 	tsteq	r0, r7, lsr #32
   pPatchTab[65] = 6;
    2a1c:	27f45100 	ldrbcs	r5, [r4, r0, lsl #2]!
    2a20:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
   pPatchTab[57] = 1;
    2a24:	00010000 	andeq	r0, r1, r0
   pIrqPatch[1] = _IRQ_PATCH_0;
    2a28:	00280454 	eoreq	r0, r8, r4, asr r4
   const uint32_t *pS = patchGenfskRfe;
    2a2c:	00287e00 	eoreq	r7, r8, r0, lsl #28
      t2 = *pS++;
    2a30:	51000100 	mrspl	r0, (UNDEF: 16)
      t4 = *pS++;
    2a34:	0000287e 	andeq	r2, r0, lr, ror r8
      t6 = *pS++;
    2a38:	000028b8 			; <UNDEFINED> instruction: 0x000028b8
      t8 = *pS++;
    2a3c:	00540001 	subseq	r0, r4, r1
      *pD++ = t1;
    2a40:	00000000 	andeq	r0, r0, r0
      *pD++ = t2;
    2a44:	5c000000 	stcpl	0, cr0, [r0], {-0}
      *pD++ = t3;
    2a48:	5e000027 	cdppl	0, 0, cr0, cr0, cr7, {1}
      *pD++ = t5;
    2a4c:	01000027 	tsteq	r0, r7, lsr #32
      *pD++ = t7;
    2a50:	276a5000 	strbcs	r5, [sl, -r0]!
   } while (--nIterations);
    2a54:	27940000 	ldrcs	r0, [r4, r0]
    2a58:	00010000 	andeq	r0, r1, r0
      *pD++ = t8;
    2a5c:	0027b050 	eoreq	fp, r7, r0, asr r0
   } while (--nIterations);
    2a60:	0027b800 	eoreq	fp, r7, r0, lsl #16
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2a64:	50000100 	andpl	r0, r0, r0, lsl #2
   *pD++ = t2;
    2a68:	000027f4 	strdeq	r2, [r0], -r4
   *pD++ = t3;
    2a6c:	00002804 	andeq	r2, r0, r4, lsl #16
   *pD++ = t4;
    2a70:	0e500001 	cdpeq	0, 5, cr0, cr0, cr1, {0}
   *pD++ = t5;
    2a74:	24000028 	strcs	r0, [r0], #-40	; 0xffffffd8
    2a78:	01000028 	tsteq	r0, r8, lsr #32
	RFCAdi3VcoLdoVoltageMode (true);
    2a7c:	28285000 	stmdacs	r8!, {ip, lr}
    2a80:	282a0000 	stmdacs	sl!, {}	; <UNPREDICTABLE>
       	RFCRfTrimSet (&rfTrim);
    2a84:	00010000 	andeq	r0, r1, r0
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2a88:	00000050 	andeq	r0, r0, r0, asr r0
    2a8c:	00000000 	andeq	r0, r0, r0
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2a90:	00277e00 	eoreq	r7, r7, r0, lsl #28
    2a94:	00278800 	eoreq	r8, r7, r0, lsl #16
	issue_cmd ((lword)&cmd_srt);
    2a98:	53000100 	movwpl	r0, #256	; 0x100
	...
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2aa4:	00002c08 	andeq	r2, r0, r8, lsl #24
    2aa8:	00002c1c 	andeq	r2, r0, ip, lsl ip
    2aac:	90500001 	subsls	r0, r0, r1
	IntEnable (INT_RFC_CPE_0);
    2ab0:	a800002d 	stmdage	r0, {r0, r2, r3, r5}
	_BIC (dstate, DSTATE_IRST);
    2ab4:	0100002d 	tsteq	r0, sp, lsr #32
    2ab8:	2db85000 	ldccs	0, cr5, [r8]
    2abc:	2dbf0000 	ldccs	0, cr0, [pc]	; 2ac4 <rf_on.part.0+0x10c>
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2ac0:	00010000 	andeq	r0, r1, r0
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2ac4:	00000050 	andeq	r0, r0, r0, asr r0
	IntEnable (INT_RFC_CPE_0);
    2ac8:	00000000 	andeq	r0, r0, r0
    2acc:	002c8800 	eoreq	r8, ip, r0, lsl #16
}
    2ad0:	002c9000 	eoreq	r9, ip, r0
	IntEnable (INT_RFC_CPE_0);
    2ad4:	52000100 	andpl	r0, r0, #0, 2
    2ad8:	00002c90 	muleq	r0, r0, ip
    2adc:	00002c93 	muleq	r0, r3, ip
    2ae0:	00720002 	rsbseq	r0, r2, r2
	...
    2aec:	00002e2e 	andeq	r2, r0, lr, lsr #28
    2af0:	00002e38 	andeq	r2, r0, r8, lsr lr
    2af4:	00530001 	subseq	r0, r3, r1
    2af8:	00000000 	andeq	r0, r0, r0
    2afc:	76000000 	strvc	r0, [r0], -r0
    2b00:	ba00002b 	blt	2bb4 <rx_int_enable+0x7c>
    2b04:	0100002b 	tsteq	r0, fp, lsr #32
    2b08:	2bba5400 	blcs	fee97b10 <_estack+0xdee92b10>
    2b0c:	2bc20000 	blcs	ff082b14 <_estack+0xdf07db14>
    2b10:	00020000 	andeq	r0, r2, r0
    2b14:	2bc20074 	blcs	ff082cec <_estack+0xdf07dcec>
    2b18:	2bcc0000 	blcs	ff302b20 <_estack+0xdf2fdb20>
    2b1c:	00010000 	andeq	r0, r1, r0
    2b20:	002bcc54 	eoreq	ip, fp, r4, asr ip
    2b24:	002bd100 	eoreq	sp, fp, r0, lsl #2
    2b28:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
    2b2c:	002be200 	eoreq	lr, fp, r0, lsl #4
    2b30:	002be600 	eoreq	lr, fp, r0, lsl #12
    2b34:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
	...
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2b40:	002b9e00 	eoreq	r9, fp, r0, lsl #28
    2b44:	002bb500 	eoreq	fp, fp, r0, lsl #10
    2b48:	52000100 	andpl	r0, r0, #0, 2
	...
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2b54:	00002b76 	andeq	r2, r0, r6, ror fp
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2b58:	00002bd6 	ldrdeq	r2, [r0], -r6
    2b5c:	e2550001 	subs	r0, r5, #1
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2b60:	e600002b 	str	r0, [r0], -fp, lsr #32
    2b64:	0100002b 	tsteq	r0, fp, lsr #32
    2b68:	00005500 	andeq	r5, r0, r0, lsl #10
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2b6c:	00000000 	andeq	r0, r0, r0
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2b70:	28b80000 	ldmcs	r8!, {}	; <UNPREDICTABLE>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2b74:	28be0000 	ldmcs	lr!, {}	; <UNPREDICTABLE>
		if (db->status == DATA_ENTRY_FINISHED) {
    2b78:	00010000 	andeq	r0, r1, r0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2b7c:	0028be50 	eoreq	fp, r8, r0, asr lr
    2b80:	0028f000 	eoreq	pc, r8, r0
			nr++;
    2b84:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2b90:	000028c6 	andeq	r2, r0, r6, asr #17
    2b94:	000028d0 	ldrdeq	r2, [r0], -r0
				__dp [pl + 1] = __dp [pl] - 128;
    2b98:	d6520001 	ldrble	r0, [r2], -r1
				pl = __dp [1] + 2;
    2b9c:	e1000028 	tst	r0, r8, lsr #32
				__dp [pl + 1] = __dp [pl] - 128;
    2ba0:	01000028 	tsteq	r0, r8, lsr #32
    2ba4:	28e65200 	stmiacs	r6!, {r9, ip, lr}^
				__dp [pl] = 0;
    2ba8:	28eb0000 	stmiacs	fp!, {}^	; <UNPREDICTABLE>
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2bac:	00010000 	andeq	r0, r1, r0
    2bb0:	0028ee52 	eoreq	lr, r8, r2, asr lr
    2bb4:	00290000 	eoreq	r0, r9, r0
			db->status = DATA_ENTRY_PENDING;
    2bb8:	52000100 	andpl	r0, r0, #0, 2
	...
				diag ("BAD RX");
    2bc4:	000028ce 	andeq	r2, r0, lr, asr #17
    2bc8:	000028d0 	ldrdeq	r2, [r0], -r0
	if (nr) {
    2bcc:	00540001 	subseq	r0, r4, r1
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2bd0:	00000000 	andeq	r0, r0, r0
}
    2bd4:	80000000 	andhi	r0, r0, r0
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2bd8:	8a000029 	bhi	2c84 <cc1350_driver+0x7c>
    2bdc:	01000029 	tsteq	r0, r9, lsr #32
    2be0:	298a5000 	stmibcs	sl, {ip, lr}
}
    2be4:	29b00000 	ldmibcs	r0!, {}	; <UNPREDICTABLE>
    2be8:	00010000 	andeq	r0, r1, r0
    2bec:	00000054 	andeq	r0, r0, r4, asr r0
    2bf0:	00000000 	andeq	r0, r0, r0
    2bf4:	00298000 	eoreq	r8, r9, r0
    2bf8:	00298a00 	eoreq	r8, r9, r0, lsl #20
    2bfc:	51000100 	mrspl	r0, (UNDEF: 16)
    2c00:	0000298a 	andeq	r2, r0, sl, lsl #19
    2c04:	000029b0 			; <UNDEFINED> instruction: 0x000029b0
thread (cc1350_driver)
    2c08:	00550001 	subseq	r0, r5, r1
    2c0c:	00000000 	andeq	r0, r0, r0
    2c10:	5a000000 	bpl	2c18 <cc1350_driver+0x10>
    2c14:	6200002a 	andvs	r0, r0, #42	; 0x2a
    2c18:	0100002a 	tsteq	r0, sl, lsr #32
		if (dstate & DSTATE_IRST) {
    2c1c:	00005200 	andeq	r5, r0, r0, lsl #4
    2c20:	00000000 	andeq	r0, r0, r0
    2c24:	2a2e0000 	bcs	b82c2c <__ccfg+0xb62c84>
			rf_off ();
    2c28:	2a5a0000 	bcs	1682c30 <__ccfg+0x1662c88>
			_BIC (dstate,
    2c2c:	00010000 	andeq	r0, r1, r0
    2c30:	002a5e53 	eoreq	r5, sl, r3, asr lr
		if (dstate & DSTATE_RXAC) {
    2c34:	002a6200 	eoreq	r6, sl, r0, lsl #4
    2c38:	53000100 	movwpl	r0, #256	; 0x100
	...
		if (paylen == 0) {
    2c44:	00002a34 	andeq	r2, r0, r4, lsr sl
    2c48:	00002a62 	andeq	r2, r0, r2, ror #20
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2c4c:	005e0001 	subseq	r0, lr, r1
    2c50:	00000000 	andeq	r0, r0, r0
    2c54:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2c58:	6200002a 	andvs	r0, r0, #42	; 0x2a
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2c5c:	0100002a 	tsteq	r0, sl, lsr #32
    2c60:	00005700 	andeq	r5, r0, r0, lsl #14
    2c64:	00000000 	andeq	r0, r0, r0
    2c68:	2a3c0000 	bcs	f02c70 <__ccfg+0xee2cc8>
    2c6c:	2a780000 	bcs	1e02c74 <__ccfg+0x1de2ccc>
    2c70:	00010000 	andeq	r0, r1, r0
    2c74:	00000055 	andeq	r0, r0, r5, asr r0
    2c78:	00000000 	andeq	r0, r0, r0
		} else if (dstate & DSTATE_RXON) {
    2c7c:	002a3c00 	eoreq	r3, sl, r0, lsl #24
	if (dstate & DSTATE_RFON)
    2c80:	002a5400 	eoreq	r5, sl, r0, lsl #8
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2c84:	50000100 	andpl	r0, r0, r0, lsl #2
		re->status = DATA_ENTRY_PENDING;
    2c88:	00002a54 	andeq	r2, r0, r4, asr sl
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2c8c:	00002a5e 	andeq	r2, r0, lr, asr sl
	issue_cmd ((lword)&RF_cmdPropRx);
    2c90:	18730002 	ldmdane	r3!, {r1}^
	_BIS (dstate, DSTATE_RXAC);
    2c94:	00002a5e 	andeq	r2, r0, lr, asr sl
    2c98:	00002a60 	andeq	r2, r0, r0, ror #20
    2c9c:	18700002 	ldmdane	r0!, {r1}^
	...
	if (dstate & DSTATE_RXAC)
    2ca8:	00002a5a 	andeq	r2, r0, sl, asr sl
				if (statid != 0xffff)
    2cac:	00002a78 	andeq	r2, r0, r8, ror sl
    2cb0:	00540001 	subseq	r0, r4, r1
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2cb4:	00000000 	andeq	r0, r0, r0
				RF_cmdPropTx.pktLen = (byte) paylen;
    2cb8:	30000000 	andcc	r0, r0, r0
		if (paylen == 0) {
    2cbc:	32000030 	andcc	r0, r0, #48	; 0x30
			wait (qevent, DR_LOOP);
    2cc0:	01000030 	tsteq	r0, r0, lsr r0
    2cc4:	00005000 	andeq	r5, r0, r0
			if (dstate & DSTATE_RXAC) {
    2cc8:	00000000 	andeq	r0, r0, r0
    2ccc:	302c0000 	eorcc	r0, ip, r0
				rx_int_enable ();
    2cd0:	302e0000 	eorcc	r0, lr, r0
			release;
    2cd4:	00010000 	andeq	r0, r1, r0
			} else if (dstate & DSTATE_RFON) {
    2cd8:	00000050 	andeq	r0, r0, r0, asr r0
				delay (offdelay, DR_GOOF);
    2cdc:	00000000 	andeq	r0, r0, r0
    2ce0:	00302400 	eorseq	r2, r0, r0, lsl #8
    2ce4:	00302600 	eorseq	r2, r0, r0, lsl #12
		if (bckf_timer) {
    2ce8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			wait (qevent, DR_LOOP);
    2cf4:	00003000 	andeq	r3, r0, r0
			delay (bckf_timer, DR_LOOP);
    2cf8:	0000300a 	andeq	r3, r0, sl
    2cfc:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
			if (dstate & DSTATE_RXAC)
    2d00:	1a000030 	bne	2dc8 <cc1350_driver+0x1c0>
    2d04:	01000030 	tsteq	r0, r0, lsr r0
	if (dstate & DSTATE_RFON)
    2d08:	00005000 	andeq	r5, r0, r0
    2d0c:	00000000 	andeq	r0, r0, r0
		rx_de ();
    2d10:	30000000 	andcc	r0, r0, r0
		RF_cmdPropTx . status = 0;
    2d14:	30020000 	andcc	r0, r2, r0
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2d18:	00010000 	andeq	r0, r1, r0
    2d1c:	00000051 	andeq	r0, r0, r1, asr r0
    2d20:	00000000 	andeq	r0, r0, r0
		issue_cmd ((lword)&cmd_cs);
    2d24:	00300000 	eorseq	r0, r0, r0
		if (dstate & DSTATE_IRST)
    2d28:	00300400 	eorseq	r0, r0, r0, lsl #8
    2d2c:	52000100 	andpl	r0, r0, #0, 2
	...
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2d38:	00003000 	andeq	r3, r0, r0
			delay (1, DR_XMIT);
    2d3c:	00003018 	andeq	r3, r0, r8, lsl r0
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2d40:	00530001 	subseq	r0, r3, r1
    2d44:	00000000 	andeq	r0, r0, r0
    2d48:	dc000000 	stcle	0, cr0, [r0], {-0}
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2d4c:	e800002f 	stmda	r0, {r0, r1, r2, r3, r5}
    2d50:	0100002f 	tsteq	r0, pc, lsr #32
				RF_cmdPropTx . status = 0;
    2d54:	2fe85000 	svccs	0x00e85000
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2d58:	30000000 	andcc	r0, r0, r0
				issue_cmd ((lword)&RF_cmdPropTx);
    2d5c:	00010000 	andeq	r0, r1, r0
				proceed (DR_XMIT);
    2d60:	00000053 	andeq	r0, r0, r3, asr r0
    2d64:	00000000 	andeq	r0, r0, r0
			txtries++;
    2d68:	00303400 	eorseq	r3, r0, r0, lsl #8
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2d6c:	00304200 	eorseq	r4, r0, r0, lsl #4
    2d70:	50000100 	andpl	r0, r0, r0, lsl #2
    2d74:	00003042 	andeq	r3, r0, r2, asr #32
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2d78:	0000307c 	andeq	r3, r0, ip, ror r0
		goto DR_LOOP__;
    2d7c:	00550001 	subseq	r0, r5, r1
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2d80:	00000000 	andeq	r0, r0, r0
		paylen = 0;
    2d84:	34000000 	strcc	r0, [r0], #-0
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2d88:	45000030 	strmi	r0, [r0, #-48]	; 0xffffffd0
		txtries = 0;
    2d8c:	01000030 	tsteq	r0, r0, lsr r0
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2d90:	30455100 	subcc	r5, r5, r0, lsl #2
    2d94:	307c0000 	rsbscc	r0, ip, r0
    2d98:	00010000 	andeq	r0, r1, r0
    2d9c:	00000056 	andeq	r0, r0, r6, asr r0
    2da0:	00000000 	andeq	r0, r0, r0
		    tcvphy_top (physid) == NULL)
    2da4:	00303400 	eorseq	r3, r0, r0, lsl #8
    2da8:	00304500 	eorseq	r4, r0, r0, lsl #10
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2dac:	52000100 	andpl	r0, r0, #0, 2
    2db0:	00003054 	andeq	r3, r0, r4, asr r0
			rf_off ();
    2db4:	0000305a 	andeq	r3, r0, sl, asr r0
endthread
    2db8:	00520001 	subseq	r0, r2, r1
    2dbc:	00000000 	andeq	r0, r0, r0
    2dc0:	7c000000 	stcvc	0, cr0, [r0], {-0}
    2dc4:	93000030 	movwls	r0, #48	; 0x30
    2dc8:	01000030 	tsteq	r0, r0, lsr r0
    2dcc:	30945000 	addscc	r5, r4, r0
    2dd0:	30a00000 	adccc	r0, r0, r0
    2dd4:	00010000 	andeq	r0, r1, r0
    2dd8:	0030d850 	eorseq	sp, r0, r0, asr r8
    2ddc:	0030ec00 	eorseq	lr, r0, r0, lsl #24
    2de0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2dec:	00003084 	andeq	r3, r0, r4, lsl #1
    2df0:	00003090 	muleq	r0, r0, r0
    2df4:	90550001 	subsls	r0, r5, r1
void RFCCPE0IntHandler (void) {
    2df8:	93000030 	movwls	r0, #48	; 0x30
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2dfc:	02000030 	andeq	r0, r0, #48	; 0x30
		_BIS (dstate, DSTATE_IRST);
    2e00:	94087300 	strls	r7, [r8], #-768	; 0xfffffd00
    2e04:	ec000030 	stc	0, cr0, [r0], {48}	; 0x30
    2e08:	01000030 	tsteq	r0, r0, lsr r0
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2e0c:	00005500 	andeq	r5, r0, r0, lsl #10
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2e10:	00000000 	andeq	r0, r0, r0
    2e14:	30ba0000 	adcscc	r0, sl, r0
	p_trigger (drvprcs, qevent);
    2e18:	30cc0000 	sbccc	r0, ip, r0
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2e1c:	00010000 	andeq	r0, r1, r0
    2e20:	00000050 	andeq	r0, r0, r0, asr r0
    2e24:	00000000 	andeq	r0, r0, r0
    2e28:	0030ec00 	eorseq	lr, r0, r0, lsl #24
    2e2c:	00310800 	eorseq	r0, r1, r0, lsl #16
    2e30:	50000100 	andpl	r0, r0, r0, lsl #2
    2e34:	000031ee 	andeq	r3, r0, lr, ror #3
    2e38:	000031f7 	strdeq	r3, [r0], -r7
    2e3c:	00500001 	subseq	r0, r0, r1
    2e40:	00000000 	andeq	r0, r0, r0
	RISE_N_SHINE;
    2e44:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    2e48:	16000030 			; <UNDEFINED> instruction: 0x16000030
    2e4c:	01000031 	tsteq	r0, r1, lsr r0
}
    2e50:	31165400 	tstcc	r6, r0, lsl #8
    2e54:	311d0000 	tstcc	sp, r0
    2e58:	00010000 	andeq	r0, r1, r0
    2e5c:	00311d50 	eorseq	r1, r1, r0, asr sp
    2e60:	00312200 	eorseq	r2, r1, r0, lsl #4
    2e64:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
void phys_cc1350 (int phy, int mbs) {
    2e68:	00003122 	andeq	r3, r0, r2, lsr #2
	if (rbuffl != 0)
    2e6c:	0000312c 	andeq	r3, r0, ip, lsr #2
    2e70:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
		syserror (ETOOMANY, "cc13");
    2e74:	ea000031 	b	2f40 <phys_cc1350+0xd8>
		syserror (EREQPAR, "cc13 mb");
    2e78:	01000031 	tsteq	r0, r1, lsr r0
	if (mbs == 0)
    2e7c:	31ee5400 	mvncc	r5, r0, lsl #8
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2e80:	31f40000 	mvnscc	r0, r0
		syserror (EREQPAR, "cc13 mb");
    2e84:	00010000 	andeq	r0, r1, r0
    2e88:	0031f454 	eorseq	pc, r1, r4, asr r4	; <UNPREDICTABLE>
	i = 0;
    2e8c:	0031f700 	eorseq	pc, r1, r0, lsl #14
	rbuffl = (byte) mbs;
    2e90:	72000200 	andvc	r0, r0, #0, 4
		db->config.type = 0;	// General (data in structure)
    2e94:	00000008 	andeq	r0, r0, r8
	rbuffl = (byte) mbs;
    2e98:	00000000 	andeq	r0, r0, r0
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2e9c:	0031ce00 	eorseq	ip, r1, r0, lsl #28
    2ea0:	0031d000 	eorseq	sp, r1, r0
		if (db == NULL)
    2ea4:	50000100 	andpl	r0, r0, r0, lsl #2
			syserror (EMALLOC, "cc13");
    2ea8:	000031d0 	ldrdeq	r3, [r0], -r0
    2eac:	000031ea 	andeq	r3, r0, sl, ror #3
    2eb0:	00560001 	subseq	r0, r6, r1
		db->status = DATA_ENTRY_PENDING;
    2eb4:	00000000 	andeq	r0, r0, r0
		if (i)
    2eb8:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
			da->pNextEntry = (byte*) db;
    2ebc:	6f000034 	svcvs	0x00000034
		db->length = rbuffl + 2;
    2ec0:	01000034 	tsteq	r0, r4, lsr r0
    2ec4:	346f5000 	strbtcc	r5, [pc], #-0	; 2ecc <phys_cc1350+0x64>
		db->config.type = 0;	// General (data in structure)
    2ec8:	34760000 	ldrbtcc	r0, [r6], #-0
		db->length = rbuffl + 2;
    2ecc:	00010000 	andeq	r0, r1, r0
	db->pNextEntry = (byte*) re;
    2ed0:	00347654 	eorseq	r7, r4, r4, asr r6
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2ed4:	00347800 	eorseq	r7, r4, r0, lsl #16
    2ed8:	50000100 	andpl	r0, r0, r0, lsl #2
	if (rbuffs == NULL)
    2edc:	00003478 	andeq	r3, r0, r8, ror r4
	rbuffs->pCurrEntry = (byte*) re;
    2ee0:	00003488 	andeq	r3, r0, r8, lsl #9
	rbuffs->pLastEntry = NULL;
    2ee4:	88540001 	ldmdahi	r4, {r0}^
    2ee8:	97000034 	smladxls	r0, r4, r0, r0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2eec:	01000034 	tsteq	r0, r4, lsr r0
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2ef0:	34975000 	ldrcc	r5, [r7], #0
    2ef4:	34a80000 	strtcc	r0, [r8], #0
    2ef8:	00010000 	andeq	r0, r1, r0
	rbuffl -= 2;
    2efc:	00000054 	andeq	r0, r0, r4, asr r0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f00:	00000000 	andeq	r0, r0, r0
	rbuffl -= 2;
    2f04:	00345800 	eorseq	r5, r4, r0, lsl #16
	physid = phy;
    2f08:	00346c00 	eorseq	r6, r4, r0, lsl #24
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f0c:	51000100 	mrspl	r0, (UNDEF: 16)
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f10:	0000346c 	andeq	r3, r0, ip, ror #8
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f14:	0000346f 	andeq	r3, r0, pc, ror #8
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f18:	6f520001 	svcvs	0x00520001
    2f1c:	76000034 			; <UNDEFINED> instruction: 0x76000034
	utimer_add (&bckf_timer);
    2f20:	01000034 	tsteq	r0, r4, lsr r0
	drvprcs = runthread (cc1350_driver);
    2f24:	34765600 	ldrbtcc	r5, [r6], #-1536	; 0xfffffa00
    2f28:	347b0000 	ldrbtcc	r0, [fp], #-0
    2f2c:	00010000 	andeq	r0, r1, r0
	if (drvprcs == 0)
    2f30:	00347b51 	eorseq	r7, r4, r1, asr fp
		syserror (ERESOURCE, "cc13");
    2f34:	0034a800 	eorseq	sl, r4, r0, lsl #16
    2f38:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2f44:	00003458 	andeq	r3, r0, r8, asr r4
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2f48:	00003460 	andeq	r3, r0, r0, ror #8
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2f4c:	64520001 	ldrbvs	r0, [r2], #-1
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2f50:	68000034 	stmdavs	r0, {r2, r4, r5}
    2f54:	01000034 	tsteq	r0, r4, lsr r0
    2f58:	34705200 	ldrbtcc	r5, [r0], #-512	; 0xfffffe00
    2f5c:	34760000 	ldrbtcc	r0, [r6], #-0
    2f60:	00010000 	andeq	r0, r1, r0
    2f64:	00348257 	eorseq	r8, r4, r7, asr r2
    2f68:	0034a800 	eorseq	sl, r4, r0, lsl #16
    2f6c:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2f78:	00003482 	andeq	r3, r0, r2, lsl #9
    2f7c:	000034a4 	andeq	r3, r0, r4, lsr #9
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2f80:	a4550001 	ldrbge	r0, [r5], #-1
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2f84:	a8000034 	stmdage	r0, {r2, r4, r5}
    2f88:	01000034 	tsteq	r0, r4, lsr r0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2f8c:	00005800 	andeq	r5, r0, r0, lsl #16
}
    2f90:	00000000 	andeq	r0, r0, r0
    2f94:	349c0000 	ldrcc	r0, [ip], #0
    2f98:	34a00000 	strtcc	r0, [r0], #0
    2f9c:	00010000 	andeq	r0, r1, r0
    2fa0:	00000050 	andeq	r0, r0, r0, asr r0
    2fa4:	00000000 	andeq	r0, r0, r0
    2fa8:	00322800 	eorseq	r2, r2, r0, lsl #16
    2fac:	00324200 	eorseq	r4, r2, r0, lsl #4
    2fb0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2fbc:	00003228 	andeq	r3, r0, r8, lsr #4
    2fc0:	00003242 	andeq	r3, r0, r2, asr #4
    2fc4:	00510001 	subseq	r0, r1, r1
    2fc8:	00000000 	andeq	r0, r0, r0
    2fcc:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    2fd0:	42000032 	andmi	r0, r0, #50	; 0x32
    2fd4:	01000032 	tsteq	r0, r2, lsr r0
    2fd8:	32525200 	subscc	r5, r2, #0, 4
    2fdc:	327e0000 	rsbscc	r0, lr, #0
    2fe0:	00010000 	andeq	r0, r1, r0
    2fe4:	00328c55 	eorseq	r8, r2, r5, asr ip
    2fe8:	00344a00 	eorseq	r4, r4, r0, lsl #20
    2fec:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    2ff8:	00003228 	andeq	r3, r0, r8, lsr #4
    2ffc:	0000322c 	andeq	r3, r0, ip, lsr #4
    3000:	2e530001 	cdpcs	0, 5, cr0, cr3, cr1, {0}
    3004:	30000032 	andcc	r0, r0, r2, lsr r0
    3008:	03000032 	movweq	r0, #50	; 0x32
    300c:	04935300 	ldreq	r5, [r3], #768	; 0x300
    3010:	00003230 	andeq	r3, r0, r0, lsr r2
    3014:	0000327a 	andeq	r3, r0, sl, ror r2
    3018:	93540003 	cmpls	r4, #3
    301c:	00327a04 	eorseq	r7, r2, r4, lsl #20
    3020:	0032ce00 	eorseq	ip, r2, r0, lsl #28
    3024:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    3028:	32ce0493 	sbccc	r0, lr, #-1828716544	; 0x93000000
    302c:	32da0000 	sbcscc	r0, sl, #0
    3030:	00030000 	andeq	r0, r3, r0
    3034:	e2049354 	and	r9, r4, #84, 6	; 0x50000001
    3038:	04000032 	streq	r0, [r0], #-50	; 0xffffffce
    303c:	03000033 	movweq	r0, #51	; 0x33
    3040:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    3044:	00003308 	andeq	r3, r0, r8, lsl #6
    3048:	00003382 	andeq	r3, r0, r2, lsl #7
    304c:	93540003 	cmpls	r4, #3
    3050:	00338804 	eorseq	r8, r3, r4, lsl #16
    3054:	00339c00 	eorseq	r9, r3, r0, lsl #24
    3058:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    305c:	33e20493 	mvncc	r0, #-1828716544	; 0x93000000
    3060:	33ee0000 	mvncc	r0, #0
    3064:	00030000 	andeq	r0, r3, r0
    3068:	10049354 	andne	r9, r4, r4, asr r3
    306c:	22000034 	andcs	r0, r0, #52	; 0x34
    3070:	03000034 	movweq	r0, #52	; 0x34
    3074:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    3078:	00003426 	andeq	r3, r0, r6, lsr #8
strand (__outserial, const char*)
    307c:	0000342e 	andeq	r3, r0, lr, lsr #8
    3080:	93540003 	cmpls	r4, #3
    3084:	00343204 	eorseq	r3, r4, r4, lsl #4
    3088:	00345800 	eorseq	r5, r4, r0, lsl #16
endstrand
    308c:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    3090:	00000493 	muleq	r0, r3, r4
	ptr = data;
    3094:	00000000 	andeq	r0, r0, r0
    3098:	32460000 	subcc	r0, r6, #0
	if (*ptr)
    309c:	32500000 	subscc	r0, r0, #0
		len = strlen (ptr);
    30a0:	00010000 	andeq	r0, r1, r0
    30a4:	00325059 	eorseq	r5, r2, r9, asr r0
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    30a8:	00325200 	eorseq	r5, r2, r0, lsl #4
    30ac:	72000200 	andvc	r0, r0, #0, 4
    30b0:	00325200 	eorseq	r5, r2, r0, lsl #4
    30b4:	00327600 	eorseq	r7, r2, r0, lsl #12
    30b8:	59000100 	stmdbpl	r0, {r8}
	len -= quant;
    30bc:	0000327e 	andeq	r3, r0, lr, ror r2
    30c0:	0000328c 	andeq	r3, r0, ip, lsl #5
    30c4:	8c590001 	mrrchi	0, 0, r0, r9, cr1
	if (len == 0) {
    30c8:	c4000032 	strgt	r0, [r0], #-50	; 0xffffffce
		ufree (data);
    30cc:	01000032 	tsteq	r0, r2, lsr r0
		finish;
    30d0:	32ce5800 	sbccc	r5, lr, #0, 16
    30d4:	32de0000 	sbcscc	r0, lr, #0
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    30d8:	00010000 	andeq	r0, r1, r0
    30dc:	0032de58 	eorseq	sp, r2, r8, asr lr
    30e0:	0032e600 	eorseq	lr, r2, r0, lsl #12
    30e4:	72000200 	andvc	r0, r0, #0, 4
    30e8:	00330401 	eorseq	r0, r3, r1, lsl #8
strand (__inserial, address)
    30ec:	00332e00 	eorseq	r2, r3, r0, lsl #28
    30f0:	58000100 	stmdapl	r0, {r8}
    30f4:	00003332 	andeq	r3, r0, r2, lsr r3
    30f8:	00003336 	andeq	r3, r0, r6, lsr r3
    30fc:	40500001 	subsmi	r0, r0, r1
	if (__inpline != NULL)
    3100:	4a000033 	bmi	31d4 <__inserial+0xe8>
    3104:	01000033 	tsteq	r0, r3, lsr r0
		finish;
    3108:	336a5000 	cmncc	sl, #0
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    310c:	336c0000 	cmncc	ip, #0
    3110:	00010000 	andeq	r0, r1, r0
    3114:	00337250 	eorseq	r7, r3, r0, asr r2
    3118:	00337400 	eorseq	r7, r3, r0, lsl #8
		umwait (IM_INIT);
    311c:	58000100 	stmdapl	r0, {r8}
		release;
    3120:	00003374 	andeq	r3, r0, r4, ror r3
	savedata (data);
    3124:	00003397 	muleq	r0, r7, r3
	len = MAX_LINE_LENGTH;
    3128:	a6530001 	ldrbge	r0, [r3], -r1
	io (IM_READ, __cport, READ, ptr, 1);
    312c:	aa000033 	bge	3200 <__inserial+0x114>
    3130:	01000033 	tsteq	r0, r3, lsr r0
    3134:	33b45900 			; <UNDEFINED> instruction: 0x33b45900
    3138:	33d40000 	bicscc	r0, r4, #0
	if (ptr == (char*) data) { // new line
    313c:	00010000 	andeq	r0, r1, r0
    3140:	0033da59 	eorseq	sp, r3, r9, asr sl
		if (*ptr == '\0') { // bin cmd
    3144:	0033dc00 	eorseq	sp, r3, r0, lsl #24
			proceed (IM_BIN);
    3148:	59000100 	stmdbpl	r0, {r8}
    314c:	000033e2 	andeq	r3, r0, r2, ror #7
		if (*ptr < 0x20)
    3150:	000033f0 	strdeq	r3, [r0], -r0
    3154:	10530001 	subsne	r0, r3, r1
			proceed (IM_READ);
    3158:	19000034 	stmdbne	r0, {r2, r4, r5}
    315c:	01000034 	tsteq	r0, r4, lsr r0
	if (*ptr == '\n' || *ptr == '\r') {
    3160:	34225300 	strtcc	r5, [r2], #-768	; 0xfffffd00
    3164:	34360000 	ldrtcc	r0, [r6], #-0
    3168:	00010000 	andeq	r0, r1, r0
		*ptr = '\0';
    316c:	00344a58 	eorseq	r4, r4, r8, asr sl
		__inpline = (char*)data;
    3170:	00345800 	eorseq	r5, r4, r0, lsl #16
		finish;
    3174:	59000100 	stmdbpl	r0, {r8}
	...
		ptr++;
    3180:	000032e6 	andeq	r3, r0, r6, ror #5
		len--;
    3184:	00003304 	andeq	r3, r0, r4, lsl #6
	proceed (IM_READ);
    3188:	00580001 	subseq	r0, r8, r1
	io (IM_BIN, __cport, READ, ptr, 1);
    318c:	00000000 	andeq	r0, r0, r0
    3190:	10000000 	andne	r0, r0, r0
    3194:	24000033 	strcs	r0, [r0], #-51	; 0xffffffcd
    3198:	01000033 	tsteq	r0, r3, lsr r0
    319c:	33285900 			; <UNDEFINED> instruction: 0x33285900
	len -= 2;
    31a0:	33560000 	cmpcc	r6, #0
	if (len > *ptr + 1) // 1 for 0x04
    31a4:	00010000 	andeq	r0, r1, r0
    31a8:	00335e59 	eorseq	r5, r3, r9, asr lr
		len = *ptr + 1;
    31ac:	00337200 	eorseq	r7, r3, r0, lsl #4
    31b0:	59000100 	stmdbpl	r0, {r8}
	...
	quant = io (IM_BINL, __cport, READ, ptr, len);
    31bc:	0000332e 	andeq	r3, r0, lr, lsr #6
    31c0:	00003360 	andeq	r3, r0, r0, ror #6
    31c4:	60580001 	subsvs	r0, r8, r1
    31c8:	6c000033 	stcvs	0, cr0, [r0], {51}	; 0x33
    31cc:	01000033 	tsteq	r0, r3, lsr r0
	len -= quant;
    31d0:	336c5300 	cmncc	ip, #0, 6
		__inpline = (char*)data;
    31d4:	33720000 	cmncc	r2, #0
		finish;
    31d8:	00010000 	andeq	r0, r1, r0
	ptr += quant;
    31dc:	00000058 	andeq	r0, r0, r8, asr r0
    31e0:	00000000 	andeq	r0, r0, r0
endstrand
    31e4:	00339c00 	eorseq	r9, r3, r0, lsl #24
    31e8:	0033e200 	eorseq	lr, r3, r0, lsl #4
	proceed (IM_BINL);
    31ec:	5a000100 	bpl	35f4 <vscan+0x14c>
	...
endstrand
    31f8:	000033a2 	andeq	r3, r0, r2, lsr #7
    31fc:	000033cc 	andeq	r3, r0, ip, asr #7
    3200:	cc580001 	mrrcgt	0, 0, r0, r8, cr1
    3204:	dc000033 	stcle	0, cr0, [r0], {51}	; 0x33
		if (res && (d < n))
    3208:	01000033 	tsteq	r0, r3, lsr r0
    320c:	33dc5300 	bicscc	r5, ip, #0, 6
    3210:	33e20000 	mvncc	r0, #0
    3214:	00010000 	andeq	r0, r1, r0
			res [d] = (char) c;
    3218:	00000058 	andeq	r0, r0, r8, asr r0
		d++;
    321c:	00000000 	andeq	r0, r0, r0
    3220:	0033f000 	eorseq	pc, r3, r0
    3224:	00341000 	eorseq	r1, r4, r0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3228:	58000100 	stmdapl	r0, {r8}
	...
				enci (10000);
    3234:	00003422 	andeq	r3, r0, r2, lsr #8
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3238:	00003426 	andeq	r3, r0, r6, lsr #8
    323c:	00740002 	rsbseq	r0, r4, r2
	d = 0;
    3240:	00003426 	andeq	r3, r0, r6, lsr #8
		c = *fm++;
    3244:	0000342e 	andeq	r3, r0, lr, lsr #8
		if (c == '\\') {
    3248:	7c740002 	ldclvc	0, cr0, [r4], #-8
	...
				outc ('\\');
    3254:	0000343a 	andeq	r3, r0, sl, lsr r4
			if ((c = *fm++) == '\0') {
    3258:	00003448 	andeq	r3, r0, r8, asr #8
				outc ('\\');
    325c:	00580001 	subseq	r0, r8, r1
    3260:	00000000 	andeq	r0, r0, r0
			outc (c);
    3264:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    3268:	c4000034 	strgt	r0, [r0], #-52	; 0xffffffcc
			if (c == '\0')
    326c:	01000034 	tsteq	r0, r4, lsr r0
    3270:	35025000 	strcc	r5, [r2, #-0]
			outc (c);
    3274:	35140000 	ldrcc	r0, [r4, #-0]
				outc (val);
    3278:	00010000 	andeq	r0, r1, r0
				val = (word) va_arg (ap, aword);
    327c:	00351453 	eorseq	r1, r5, r3, asr r4
		if (c == '%') {
    3280:	00352800 	eorseq	r2, r5, r0, lsl #16
    3284:	56000100 	strpl	r0, [r0], -r0, lsl #2
			c = *fm++;
    3288:	0000352a 	andeq	r3, r0, sl, lsr #10
			switch (c) {
    328c:	00003546 	andeq	r3, r0, r6, asr #10
    3290:	58560001 	ldmdapl	r6, {r0}^
    3294:	64000035 	strvs	r0, [r0], #-53	; 0xffffffcb
    3298:	01000035 	tsteq	r0, r5, lsr r0
    329c:	35645600 	strbcc	r5, [r4, #-1536]!	; 0xfffffa00
    32a0:	356a0000 	strbcc	r0, [sl, #-0]!
    32a4:	00010000 	andeq	r0, r1, r0
    32a8:	00357053 	eorseq	r7, r5, r3, asr r0
				outc ('%');
    32ac:	00357400 	eorseq	r7, r5, r0, lsl #8
    32b0:	53000100 	movwpl	r0, #256	; 0x100
				outc (c);
    32b4:	00003574 	andeq	r3, r0, r4, ror r5
    32b8:	00003584 	andeq	r3, r0, r4, lsl #11
    32bc:	845e0001 	ldrbhi	r0, [lr], #-1
				if (c == '\0')
    32c0:	9a000035 	bls	339c <__pi_vfparse+0x174>
				return d;
    32c4:	01000035 	tsteq	r0, r5, lsr r0
}
    32c8:	359a5300 	ldrcc	r5, [sl, #768]	; 0x300
    32cc:	35a20000 	strcc	r0, [r2, #0]!
			switch (c) {
    32d0:	00010000 	andeq	r0, r1, r0
    32d4:	0035a85e 	eorseq	sl, r5, lr, asr r8
    32d8:	0035c400 	eorseq	ip, r5, r0, lsl #8
				for (i = 12; ; i -= 4) {
    32dc:	53000100 	movwpl	r0, #256	; 0x100
				val = (word) va_arg (ap, aword);
    32e0:	000035c4 	andeq	r3, r0, r4, asr #11
						[ (val >> i) & 0xf ]);
    32e4:	000035ca 	andeq	r3, r0, sl, asr #11
    32e8:	ca5e0001 	bgt	17832f4 <__ccfg+0x176334c>
    32ec:	cc000035 	stcgt	0, cr0, [r0], {53}	; 0x35
					outc (__pi_hex_enc_table
    32f0:	01000035 	tsteq	r0, r5, lsr r0
    32f4:	35d85300 	ldrbcc	r5, [r8, #768]	; 0x300
					if (i == 0)
    32f8:	35da0000 	ldrbcc	r0, [sl]
    32fc:	00010000 	andeq	r0, r1, r0
				for (i = 12; ; i -= 4) {
    3300:	0035da5e 	eorseq	sp, r5, lr, asr sl
				val = (word) va_arg (ap, aword);
    3304:	0035ee00 	eorseq	lr, r5, r0, lsl #28
				if (c == 'd' && (val & 0x8000) != 0) {
    3308:	53000100 	movwpl	r0, #256	; 0x100
				val = (word) va_arg (ap, aword);
    330c:	000035ee 	andeq	r3, r0, lr, ror #11
				if (c == 'd' && (val & 0x8000) != 0) {
    3310:	000035fe 	strdeq	r3, [r0], -lr
    3314:	fe560001 	cdp2	0, 5, cr0, cr6, cr1, {0}
					outc ('-');
    3318:	12000035 	andne	r0, r0, #53	; 0x35
    331c:	01000036 	tsteq	r0, r6, lsr r0
					val = (~val) + 1;
    3320:	36205300 	strtcc	r5, [r0], -r0, lsl #6
    3324:	36220000 	strtcc	r0, [r2], -r0
				for (i = 12; ; i -= 4) {
    3328:	00010000 	andeq	r0, r1, r0
				enci (10000);
    332c:	00362256 	eorseq	r2, r6, r6, asr r2
    3330:	00363a00 	eorseq	r3, r6, r0, lsl #20
    3334:	53000100 	movwpl	r0, #256	; 0x100
    3338:	0000363a 	andeq	r3, r0, sl, lsr r6
    333c:	00003654 	andeq	r3, r0, r4, asr r6
    3340:	5a560001 	bpl	158334c <__ccfg+0x15633a4>
    3344:	7c000036 	stcvc	0, cr0, [r0], {54}	; 0x36
    3348:	01000036 	tsteq	r0, r6, lsr r0
    334c:	367c5300 	ldrbtcc	r5, [ip], -r0, lsl #6
    3350:	368e0000 	strcc	r0, [lr], r0
    3354:	00010000 	andeq	r0, r1, r0
    3358:	0036b456 	eorseq	fp, r6, r6, asr r4
    335c:	0036b800 	eorseq	fp, r6, r0, lsl #16
    3360:	53000100 	movwpl	r0, #256	; 0x100
    3364:	000036b8 			; <UNDEFINED> instruction: 0x000036b8
    3368:	000036c8 	andeq	r3, r0, r8, asr #13
    336c:	c8580001 	ldmdagt	r8, {r0}^
    3370:	d8000036 	stmdale	r0, {r1, r2, r4, r5}
				if (c == 'd' || c == 'u') {
    3374:	01000036 	tsteq	r0, r6, lsr r0
    3378:	36d85300 	ldrbcc	r5, [r8], r0, lsl #6
					if (c == 'd' &&
    337c:	36e20000 	strbtcc	r0, [r2], r0
					val = va_arg (ap, lword);
    3380:	00010000 	andeq	r0, r1, r0
					fm++;
    3384:	0036e858 	eorseq	lr, r6, r8, asr r8
					if (c == 'd' &&
    3388:	00370a00 	eorseq	r0, r7, r0, lsl #20
    338c:	53000100 	movwpl	r0, #256	; 0x100
						outc ('-');
    3390:	00003710 	andeq	r3, r0, r0, lsl r7
    3394:	00003720 	andeq	r3, r0, r0, lsr #14
						val = (~val) + 1;
    3398:	20530001 	subscs	r0, r3, r1
				enci (10000);
    339c:	3a000037 	bcc	3480 <vform+0x28>
					enci (1000000000UL);
    33a0:	01000037 	tsteq	r0, r7, lsr r0
    33a4:	37405600 	strbcc	r5, [r0, -r0, lsl #12]
    33a8:	37600000 	strbcc	r0, [r0, -r0]!
    33ac:	00010000 	andeq	r0, r1, r0
    33b0:	00376053 	eorseq	r6, r7, r3, asr r0
    33b4:	00377200 	eorseq	r7, r7, r0, lsl #4
    33b8:	56000100 	strpl	r0, [r0], -r0, lsl #2
    33bc:	00003786 	andeq	r3, r0, r6, lsl #15
    33c0:	0000378a 	andeq	r3, r0, sl, lsl #15
    33c4:	8a580001 	bhi	16033d0 <__ccfg+0x15e3428>
    33c8:	8e000037 	mcrhi	0, 0, r0, cr0, cr7, {1}
    33cc:	01000037 	tsteq	r0, r7, lsr r0
    33d0:	37985300 	ldrcc	r5, [r8, r0, lsl #6]
    33d4:	379a0000 	ldrcc	r0, [sl, r0]
    33d8:	00010000 	andeq	r0, r1, r0
    33dc:	00379a58 	eorseq	r9, r7, r8, asr sl
    33e0:	0037b000 	eorseq	fp, r7, r0
				} else if (c == 'x') {
    33e4:	53000100 	movwpl	r0, #256	; 0x100
					for (i = 28; ; i -= 4) {
    33e8:	000037b0 			; <UNDEFINED> instruction: 0x000037b0
					val = va_arg (ap, lword);
    33ec:	000037c0 	andeq	r3, r0, r0, asr #15
							[ (val >> i) & 0xf ]);
    33f0:	c0560001 	subsgt	r0, r6, r1
    33f4:	d6000037 			; <UNDEFINED> instruction: 0xd6000037
						outc (__pi_hex_enc_table
    33f8:	01000037 	tsteq	r0, r7, lsr r0
    33fc:	37e05300 	strbcc	r5, [r0, r0, lsl #6]!
    3400:	37e20000 	strbcc	r0, [r2, r0]!
						if (i == 0)
    3404:	00010000 	andeq	r0, r1, r0
    3408:	0037e256 	eorseq	lr, r7, r6, asr r2
					for (i = 28; ; i -= 4) {
    340c:	0037ea00 	eorseq	lr, r7, r0, lsl #20
					outc ('%');
    3410:	53000100 	movwpl	r0, #256	; 0x100
    3414:	000037ee 	andeq	r3, r0, lr, ror #15
    3418:	000037fe 	strdeq	r3, [r0], -lr
					outc ('l');
    341c:	fe530001 	cdp2	0, 5, cr0, cr3, cr1, {0}
    3420:	0c000037 	stceq	0, cr0, [r0], {55}	; 0x37
				val = (word) va_arg (ap, aword);
    3424:	01000038 	tsteq	r0, r8, lsr r0
				outc (val);
    3428:	380c5600 	stmdacc	ip, {r9, sl, ip, lr}
    342c:	38120000 	ldmdacc	r2, {}	; <UNPREDICTABLE>
				while (*st != '\0') {
    3430:	00010000 	andeq	r0, r1, r0
    3434:	00381258 	eorseq	r1, r8, r8, asr r2
    3438:	00381e00 	eorseq	r1, r8, r0, lsl #28
    343c:	56000100 	strpl	r0, [r0], -r0, lsl #2
					outc (*st);
    3440:	0000381e 	andeq	r3, r0, lr, lsl r8
    3444:	00003826 	andeq	r3, r0, r6, lsr #16
					st++;
    3448:	26500001 	ldrbcs	r0, [r0], -r1
		c = *fm++;
    344c:	38000038 	stmdacc	r0, {r3, r4, r5}
    3450:	01000038 	tsteq	r0, r8, lsr r0
    3454:	00005300 	andeq	r5, r0, r0, lsl #6
char *vform (char *res, const char *fm, va_list aq) {
    3458:	00000000 	andeq	r0, r0, r0
    345c:	34a80000 	strtcc	r0, [r8], #0
	if (res != NULL) {
    3460:	34c60000 	strbcc	r0, [r6], #0
		__pi_vfparse (res, MAX_WORD, fm, aq);
    3464:	00010000 	andeq	r0, r1, r0
    3468:	0034c651 	eorseq	ip, r4, r1, asr r6
    346c:	0034cc00 	eorseq	ip, r4, r0, lsl #24
}
    3470:	56000100 	strpl	r0, [r0], -r0, lsl #2
    3474:	000034cc 	andeq	r3, r0, ip, asr #9
	fml = strlen (fm) + 17;
    3478:	000034ea 	andeq	r3, r0, sl, ror #9
    347c:	f0510001 			; <UNDEFINED> instruction: 0xf0510001
    3480:	38000034 	stmdacc	r0, {r2, r4, r5}
	if ((res = (char*) umalloc (fml)) == NULL)
    3484:	01000038 	tsteq	r0, r8, lsr r0
    3488:	00005100 	andeq	r5, r0, r0, lsl #2
    348c:	00000000 	andeq	r0, r0, r0
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    3490:	34a80000 	strtcc	r0, [r8], #0
    3494:	34a80000 	strtcc	r0, [r8], #0
    3498:	00010000 	andeq	r0, r1, r0
    349c:	0034a852 	eorseq	sl, r4, r2, asr r8
		ufree (res);
    34a0:	0034c400 	eorseq	ip, r4, r0, lsl #8
		goto Again;
    34a4:	52000300 	andpl	r0, r0, #0, 6
	if (buf == NULL || fmt == NULL)
    34a8:	356a0493 	strbcc	r0, [sl, #-1171]!	; 0xfffffb6d
int vscan (const char *buf, const char *fmt, va_list ap) {
    34ac:	359e0000 	ldrcc	r0, [lr]
	if (buf == NULL || fmt == NULL)
    34b0:	00010000 	andeq	r0, r1, r0
    34b4:	0035c452 	eorseq	ip, r5, r2, asr r4
    34b8:	0035ca00 	eorseq	ip, r5, r0, lsl #20
		    	    case 'u': scanu (lword); break;
    34bc:	52000100 	andpl	r0, r0, #0, 2
			while (isspace (*buf)) buf++;
    34c0:	000035da 	ldrdeq	r3, [r0], -sl
    34c4:	000035f4 	strdeq	r3, [r0], -r4
	while (*fmt != '\0') {
    34c8:	22520001 	subscs	r0, r2, #1
		if (*fmt++ != '%')
    34cc:	4a000036 	bmi	35ac <vscan+0x104>
		switch (*fmt++) {
    34d0:	01000036 	tsteq	r0, r6, lsr r0
    34d4:	369c5200 	ldrcc	r5, [ip], r0, lsl #4
    34d8:	36dc0000 	ldrbcc	r0, [ip], r0
    34dc:	00010000 	andeq	r0, r1, r0
    34e0:	00370a52 	eorseq	r0, r7, r2, asr sl
    34e4:	00373000 	eorseq	r3, r7, r0
    34e8:	52000100 	andpl	r0, r0, #0, 2
}
    34ec:	00003780 	andeq	r3, r0, r0, lsl #15
		switch (*fmt++) {
    34f0:	0000378a 	andeq	r3, r0, sl, lsl #15
    34f4:	9a520001 	bls	1483500 <__ccfg+0x1463558>
    34f8:	b6000037 			; <UNDEFINED> instruction: 0xb6000037
    34fc:	01000037 	tsteq	r0, r7, lsr r0
			while (isspace (*buf)) buf++;
    3500:	37e25200 	strbcc	r5, [r2, r0, lsl #4]!
    3504:	37f80000 	ldrbcc	r0, [r8, r0]!
    3508:	00010000 	andeq	r0, r1, r0
    350c:	0037fe52 	eorseq	pc, r7, r2, asr lr	; <UNPREDICTABLE>
    3510:	00380c00 	eorseq	r0, r8, r0, lsl #24
    3514:	52000100 	andpl	r0, r0, #0, 2
			if (*buf == '\0')
    3518:	0000381e 	andeq	r3, r0, lr, lsl r8
			if (*buf != ',') {
    351c:	00003826 	andeq	r3, r0, r6, lsr #16
			sap = va_arg (ap, char*);
    3520:	00520001 	subseq	r0, r2, r1
			nc++;
    3524:	00000000 	andeq	r0, r0, r0
			if (*buf != ',') {
    3528:	26000000 	strcs	r0, [r0], -r0
				while (!isspace (*buf) && *buf != ',' &&
    352c:	28000035 	stmdacs	r0, {r0, r2, r4, r5}
    3530:	01000035 	tsteq	r0, r5, lsr r0
    3534:	35a05400 	strcc	r5, [r0, #1024]!	; 0x400
    3538:	35c40000 	strbcc	r0, [r4]
    353c:	00010000 	andeq	r0, r1, r0
    3540:	0035ca54 	eorseq	ip, r5, r4, asr sl
    3544:	0035da00 	eorseq	sp, r5, r0, lsl #20
			while (isspace (*buf)) buf++;
    3548:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    354c:	000035f6 	strdeq	r3, [r0], -r6
    3550:	00003622 	andeq	r3, r0, r2, lsr #12
    3554:	4c540001 	mrrcmi	0, 0, r0, r4, cr1
    3558:	9c000036 	stcls	0, cr0, [r0], {54}	; 0x36
			if (*buf == ',') buf++;
    355c:	01000036 	tsteq	r0, r6, lsr r0
    3560:	36de5400 	ldrbcc	r5, [lr], r0, lsl #8
			*sap = '\0';
    3564:	370a0000 	strcc	r0, [sl, -r0]
			break;
    3568:	00010000 	andeq	r0, r1, r0
		    case 'd': scani (word); break;
    356c:	00373254 	eorseq	r3, r7, r4, asr r2
    3570:	00378000 	eorseq	r8, r7, r0
    3574:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    3578:	0000378a 	andeq	r3, r0, sl, lsl #15
    357c:	0000379a 	muleq	r0, sl, r7
    3580:	b8540001 	ldmdalt	r4, {r0}^
    3584:	e2000037 	and	r0, r0, #55	; 0x37
    3588:	01000037 	tsteq	r0, r7, lsr r0
    358c:	37fa5400 	ldrbcc	r5, [sl, r0, lsl #8]!
    3590:	37fe0000 	ldrbcc	r0, [lr, r0]!
    3594:	00010000 	andeq	r0, r1, r0
    3598:	00382654 	eorseq	r2, r8, r4, asr r6
    359c:	00383800 	eorseq	r3, r8, r0, lsl #16
    35a0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    35ac:	0000359a 	muleq	r0, sl, r5
    35b0:	000035c4 	andeq	r3, r0, r4, asr #11
    35b4:	ca580001 	bgt	16035c0 <__ccfg+0x15e3618>
    35b8:	da000035 	ble	3694 <vscan+0x1ec>
    35bc:	01000035 	tsteq	r0, r5, lsr r0
    35c0:	00005800 	andeq	r5, r0, r0, lsl #16
    35c4:	00000000 	andeq	r0, r0, r0
    35c8:	367c0000 	ldrbtcc	r0, [ip], -r0
    35cc:	368e0000 	strcc	r0, [lr], r0
    35d0:	00010000 	andeq	r0, r1, r0
    35d4:	00368e59 	eorseq	r8, r6, r9, asr lr
    35d8:	00369600 	eorseq	r9, r6, r0, lsl #12
		    case 'u': scanu (word); break;
    35dc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    35e8:	000036d8 	ldrdeq	r3, [r0], -r8
    35ec:	00003702 	andeq	r3, r0, r2, lsl #14
    35f0:	8a500001 	bhi	14035fc <__ccfg+0x13e3654>
    35f4:	9a000037 	bls	36d8 <vscan+0x230>
    35f8:	01000037 	tsteq	r0, r7, lsr r0
    35fc:	00005000 	andeq	r5, r0, r0
    3600:	00000000 	andeq	r0, r0, r0
    3604:	37600000 	strbcc	r0, [r0, -r0]!
    3608:	37720000 	ldrbcc	r0, [r2, -r0]!
    360c:	00010000 	andeq	r0, r1, r0
    3610:	00377259 	eorseq	r7, r7, r9, asr r2
    3614:	00377a00 	eorseq	r7, r7, r0, lsl #20
    3618:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		    case 'x': scanx (word); break;
    3624:	000037ee 	andeq	r3, r0, lr, ror #15
    3628:	000037fe 	strdeq	r3, [r0], -lr
    362c:	00500001 	subseq	r0, r0, r1
    3630:	00000000 	andeq	r0, r0, r0
    3634:	2a000000 	bcs	363c <vscan+0x194>
    3638:	46000035 			; <UNDEFINED> instruction: 0x46000035
    363c:	01000035 	tsteq	r0, r5, lsr r0
    3640:	38105e00 	ldmdacc	r0, {r9, sl, fp, ip, lr}
    3644:	38120000 	ldmdacc	r2, {}	; <UNPREDICTABLE>
    3648:	00010000 	andeq	r0, r1, r0
    364c:	0000005e 	andeq	r0, r0, lr, asr r0
    3650:	00000000 	andeq	r0, r0, r0
    3654:	00383800 	eorseq	r3, r8, r0, lsl #16
    3658:	00383f00 	eorseq	r3, r8, r0, lsl #30
    365c:	50000100 	andpl	r0, r0, r0, lsl #2
    3660:	0000383f 	andeq	r3, r0, pc, lsr r8
    3664:	00003856 	andeq	r3, r0, r6, asr r8
    3668:	56560001 	ldrbpl	r0, [r6], -r1
    366c:	5a000038 	bpl	3754 <vscan+0x2ac>
    3670:	04000038 	streq	r0, [r0], #-56	; 0xffffffc8
    3674:	5001f300 	andpl	pc, r1, r0, lsl #6
    3678:	00385a9f 	mlaseq	r8, pc, sl, r5	; <UNPREDICTABLE>
    367c:	00385c00 	eorseq	r5, r8, r0, lsl #24
    3680:	56000100 	strpl	r0, [r0], -r0, lsl #2
    3684:	0000385c 	andeq	r3, r0, ip, asr r8
    3688:	00003860 	andeq	r3, r0, r0, ror #16
    368c:	01f30004 	mvnseq	r0, r4
    3690:	00009f50 	andeq	r9, r0, r0, asr pc
    3694:	00000000 	andeq	r0, r0, r0
    3698:	38420000 	stmdacc	r2, {}^	; <UNPREDICTABLE>
			switch (*fmt++) {
    369c:	384b0000 	stmdacc	fp, {}^	; <UNPREDICTABLE>
    36a0:	00050000 	andeq	r0, r5, r0
    36a4:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    36a8:	00384b9f 	mlaseq	r8, pc, fp, r4	; <UNPREDICTABLE>
    36ac:	00385600 	eorseq	r5, r8, r0, lsl #12
    36b0:	75000500 	strvc	r0, [r0, #-1280]	; 0xfffffb00
		    	    case 'd': scani (lword); break;
    36b4:	9f293000 	svcls	0x00293000
    36b8:	0000385a 	andeq	r3, r0, sl, asr r8
    36bc:	0000385c 	andeq	r3, r0, ip, asr r8
    36c0:	00750005 	rsbseq	r0, r5, r5
    36c4:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
	...
    36d4:	01000000 	mrseq	r0, (UNDEF: 0)
    36d8:	00005000 	andeq	r5, r0, r0
    36dc:	00000000 	andeq	r0, r0, r0
    36e0:	00010000 	andeq	r0, r1, r0
    36e4:	00000056 	andeq	r0, r0, r6, asr r0
    36e8:	00000000 	andeq	r0, r0, r0
    36ec:	f3000400 	vshl.u8	d0, d0, d0
    36f0:	009f5001 	addseq	r5, pc, r1
    36f4:	00000000 	andeq	r0, r0, r0
    36f8:	01000000 	mrseq	r0, (UNDEF: 0)
    36fc:	00005600 	andeq	r5, r0, r0, lsl #12
    3700:	00000000 	andeq	r0, r0, r0
    3704:	00040000 	andeq	r0, r4, r0
    3708:	9f5001f3 	svcls	0x005001f3
	...
		    	    case 'x': scanx (lword); break;
    371c:	00510001 	subseq	r0, r1, r1
    3720:	00000000 	andeq	r0, r0, r0
    3724:	04000000 	streq	r0, [r0], #-0
    3728:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    372c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    373c:	70000500 	andvc	r0, r0, r0, lsl #10
    3740:	9f293000 	svcls	0x00293000
	...
    374c:	00750005 	rsbseq	r0, r5, r5
    3750:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
    3754:	00000000 	andeq	r0, r0, r0
    3758:	05000000 	streq	r0, [r0, #-0]
    375c:	30007500 	andcc	r7, r0, r0, lsl #10
    3760:	00009f29 	andeq	r9, r0, r9, lsr #30
    3764:	00000000 	andeq	r0, r0, r0
    3768:	38640000 	stmdacc	r4!, {}^	; <UNPREDICTABLE>
    376c:	38760000 	ldmdacc	r6!, {}^	; <UNPREDICTABLE>
    3770:	00070000 	andeq	r0, r7, r0
    3774:	243f0070 	ldrtcs	r0, [pc], #-112	; 377c <vscan+0x2d4>
    3778:	009f263f 	addseq	r2, pc, pc, lsr r6	; <UNPREDICTABLE>
    377c:	00000000 	andeq	r0, r0, r0
		    	    case 'd': scani (lword); break;
    3780:	6c000000 	stcvs	0, cr0, [r0], {-0}
    3784:	74000038 	strvc	r0, [r0], #-56	; 0xffffffc8
    3788:	0d000038 	stceq	0, cr0, [r0, #-224]	; 0xffffff20
    378c:	7a807200 	bvc	fe01ff94 <_estack+0xde01af94>
    3790:	24480071 	strbcs	r0, [r8], #-113	; 0xffffff8f
    3794:	341e2648 	ldrcc	r2, [lr], #-1608	; 0xfffff9b8
    3798:	38749f26 	ldmdacc	r4!, {r1, r2, r5, r8, r9, sl, fp, ip, pc}^
		    	    case 'u': scanu (lword); break;
    379c:	38900000 	ldmcc	r0, {}	; <UNPREDICTABLE>
    37a0:	000c0000 	andeq	r0, ip, r0
    37a4:	24480071 	strbcs	r0, [r8], #-113	; 0xffffff8f
    37a8:	00722648 	rsbseq	r2, r2, r8, asr #12
    37ac:	9f26341e 	svcls	0x0026341e
	...
    37b8:	00003896 	muleq	r0, r6, r8
    37bc:	000038a0 	andeq	r3, r0, r0, lsr #17
    37c0:	00530001 	subseq	r0, r3, r1
    37c4:	00000000 	andeq	r0, r0, r0
    37c8:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    37cc:	a4000038 	strge	r0, [r0], #-56	; 0xffffffc8
    37d0:	01000038 	tsteq	r0, r8, lsr r0
    37d4:	00005000 	andeq	r5, r0, r0
    37d8:	00000000 	andeq	r0, r0, r0
    37dc:	38d80000 	ldmcc	r8, {}^	; <UNPREDICTABLE>
    37e0:	38f00000 	ldmcc	r0!, {}^	; <UNPREDICTABLE>
		    	    case 'x': scanx (lword); break;
    37e4:	00010000 	andeq	r0, r1, r0
    37e8:	0038f050 	eorseq	pc, r8, r0, asr r0	; <UNPREDICTABLE>
			if ((c = *buf++) == '\0')
    37ec:	00392a00 	eorseq	r2, r9, r0, lsl #20
    37f0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
			sap = va_arg (ap, char*);
    37f4:	0000392a 	andeq	r3, r0, sl, lsr #18
			nc++;
    37f8:	00003934 	andeq	r3, r0, r4, lsr r9
			break;
    37fc:	01f30004 	mvnseq	r0, r4
			while (isspace (*buf)) buf++;
    3800:	00009f50 	andeq	r9, r0, r0, asr pc
    3804:	00000000 	andeq	r0, r0, r0
    3808:	38d80000 	ldmcc	r8, {}^	; <UNPREDICTABLE>
						*sap++ = *buf++;
    380c:	38de0000 	ldmcc	lr, {}^	; <UNPREDICTABLE>
    3810:	00010000 	andeq	r0, r1, r0
			while (isspace (*buf)) buf++;
    3814:	0038de51 	eorseq	sp, r8, r1, asr lr
    3818:	00391600 	eorseq	r1, r9, r0, lsl #12
    381c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		return 0;
    3820:	00003916 	andeq	r3, r0, r6, lsl r9
    3824:	00003934 	andeq	r3, r0, r4, lsr r9
		    case 'x': scanx (word); break;
    3828:	01f30004 	mvnseq	r0, r4
    382c:	00009f51 	andeq	r9, r0, r1, asr pc
		    	    case 'x': scanx (lword); break;
    3830:	00000000 	andeq	r0, r0, r0
    3834:	39120000 	ldmdbcc	r2, {}	; <UNPREDICTABLE>
    3838:	39260000 	stmdbcc	r6!, {}	; <UNPREDICTABLE>
    383c:	00010000 	andeq	r0, r1, r0
    3840:	00000055 	andeq	r0, r0, r5, asr r0
    3844:	00000000 	andeq	r0, r0, r0
    3848:	00391200 	eorseq	r1, r9, r0, lsl #4
    384c:	00391600 	eorseq	r1, r9, r0, lsl #12
    3850:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    3854:	00003916 	andeq	r3, r0, r6, lsl r9
    3858:	00003926 	andeq	r3, r0, r6, lsr #18
    385c:	01f30004 	mvnseq	r0, r4
    3860:	00009f51 	andeq	r9, r0, r1, asr pc
    3864:	00000000 	andeq	r0, r0, r0
    3868:	39340000 	ldmdbcc	r4!, {}	; <UNPREDICTABLE>
    386c:	39520000 	ldmdbcc	r2, {}^	; <UNPREDICTABLE>
    3870:	00010000 	andeq	r0, r1, r0
    3874:	00395250 	eorseq	r5, r9, r0, asr r2
    3878:	00396000 	eorseq	r6, r9, r0
    387c:	f3000400 	vshl.u8	d0, d0, d0
    3880:	009f5001 	addseq	r5, pc, r1
	...
    3890:	01000000 	mrseq	r0, (UNDEF: 0)
    3894:	00005000 	andeq	r5, r0, r0
    3898:	00000000 	andeq	r0, r0, r0
    389c:	00010000 	andeq	r0, r1, r0
    38a0:	00000056 	andeq	r0, r0, r6, asr r0
    38a4:	00000000 	andeq	r0, r0, r0
    38a8:	f3000400 	vshl.u8	d0, d0, d0
    38ac:	009f5001 	addseq	r5, pc, r1
	...
    38bc:	01000000 	mrseq	r0, (UNDEF: 0)
    38c0:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    38d0:	00070000 	andeq	r0, r7, r0
    38d4:	00730070 	rsbseq	r0, r3, r0, ror r0
    38d8:	009f191c 	addseq	r1, pc, ip, lsl r9	; <UNPREDICTABLE>
    38dc:	00000000 	andeq	r0, r0, r0
    38e0:	04000000 	streq	r0, [r0], #-0
    38e4:	19007000 	stmdbne	r0, {ip, sp, lr}
    38e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    38f8:	0a000400 	beq	4900 <rand+0x34>
    38fc:	009f07d0 			; <UNDEFINED> instruction: 0x009f07d0
    3900:	00000000 	andeq	r0, r0, r0
    3904:	01000000 	mrseq	r0, (UNDEF: 0)
    3908:	00005000 	andeq	r5, r0, r0
    390c:	00000000 	andeq	r0, r0, r0
    3910:	00050000 	andeq	r0, r5, r0
    3914:	25400072 	strbcs	r0, [r0, #-114]	; 0xffffff8e
    3918:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    391c:	00000000 	andeq	r0, r0, r0
    3920:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    392c:	d00a0004 	andle	r0, sl, r4
    3930:	00009f07 	andeq	r9, r0, r7, lsl #30
    3934:	00000000 	andeq	r0, r0, r0
    3938:	00010000 	andeq	r0, r1, r0
    393c:	00000050 	andeq	r0, r0, r0, asr r0
    3940:	00000000 	andeq	r0, r0, r0
    3944:	0039b200 	eorseq	fp, r9, r0, lsl #4
    3948:	0039be00 	eorseq	fp, r9, r0, lsl #28
    394c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3958:	000039b2 			; <UNDEFINED> instruction: 0x000039b2
    395c:	000039be 			; <UNDEFINED> instruction: 0x000039be
    3960:	00530001 	subseq	r0, r3, r1
	...
    3970:	01000000 	mrseq	r0, (UNDEF: 0)
    3974:	00005000 	andeq	r5, r0, r0
    3978:	00000000 	andeq	r0, r0, r0
    397c:	00030000 	andeq	r0, r3, r0
    3980:	009f1b70 	addseq	r1, pc, r0, ror fp	; <UNPREDICTABLE>
    3984:	00000000 	andeq	r0, r0, r0
    3988:	04000000 	streq	r0, [r0], #-0
    398c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3990:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    39a0:	74000700 	strvc	r0, [r0], #-1792	; 0xfffff900
    39a4:	48244800 	stmdami	r4!, {fp, lr}
    39a8:	00009f26 	andeq	r9, r0, r6, lsr #30
	...
    39b8:	00010000 	andeq	r0, r1, r0
    39bc:	00000050 	andeq	r0, r0, r0, asr r0
    39c0:	00000000 	andeq	r0, r0, r0
    39c4:	f3000600 	vmax.u8	d0, d0, d0
    39c8:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    39cc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    39dc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    39e8:	01f3000c 	mvnseq	r0, ip
    39ec:	f31c4b50 	vqrdmlah.s16	q2, q6, q0
    39f0:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    39f4:	00009f1e 	andeq	r9, r0, lr, lsl pc
	...
    3a04:	002c0000 	eoreq	r0, ip, r0
    3a08:	26400071 			; <UNDEFINED> instruction: 0x26400071
    3a0c:	24400071 	strbcs	r0, [r0], #-113	; 0xffffff8f
    3a10:	00702648 	rsbseq	r2, r0, r8, asr #12
    3a14:	2226331e 	eorcs	r3, r6, #2013265920	; 0x78000000
    3a18:	24480071 	strbcs	r0, [r8], #-113	; 0xffffff8f
    3a1c:	00752648 	rsbseq	r2, r5, r8, asr #12
    3a20:	22263a1e 	eorcs	r3, r6, #122880	; 0x1e000
    3a24:	24480074 	strbcs	r0, [r8], #-116	; 0xffffff8c
    3a28:	00752648 	rsbseq	r2, r5, r8, asr #12
    3a2c:	1e00701e 	mcrne	0, 0, r7, cr0, cr14, {0}
    3a30:	9f222642 	svcls	0x00222642
	...
    3a3c:	00710032 	rsbseq	r0, r1, r2, lsr r0
    3a40:	01f32640 	mvnseq	r2, r0, asr #12
    3a44:	711c4b50 	tstvc	ip, r0, asr fp
    3a48:	48244000 	stmdami	r4!, {lr}
    3a4c:	26331e26 	ldrtcs	r1, [r3], -r6, lsr #28
    3a50:	48007122 	stmdami	r0, {r1, r5, r8, ip, sp, lr}
    3a54:	75264824 	strvc	r4, [r6, #-2084]!	; 0xfffff7dc
    3a58:	263a1e00 	ldrtcs	r1, [sl], -r0, lsl #28
    3a5c:	5001f322 	andpl	pc, r1, r2, lsr #6
    3a60:	00741c4b 	rsbseq	r1, r4, fp, asr #24
    3a64:	26482448 	strbcs	r2, [r8], -r8, asr #8
    3a68:	1e00751e 	mcrne	5, 0, r7, cr0, cr14, {0}
    3a6c:	9f222642 	svcls	0x00222642
	...
    3a80:	00500001 	subseq	r0, r0, r1
    3a84:	00000000 	andeq	r0, r0, r0
    3a88:	04000000 	streq	r0, [r0], #-0
    3a8c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3a90:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3aa0:	70000b00 	andvc	r0, r0, r0, lsl #22
    3aa4:	1e007000 	cdpne	0, 0, cr7, cr0, cr0, {0}
    3aa8:	00702646 	rsbseq	r2, r0, r6, asr #12
    3aac:	00009f1c 	andeq	r9, r0, ip, lsl pc
    3ab0:	00000000 	andeq	r0, r0, r0
    3ab4:	00010000 	andeq	r0, r1, r0
    3ab8:	00000050 	andeq	r0, r0, r0, asr r0
    3abc:	00000000 	andeq	r0, r0, r0
    3ac0:	f3000e00 	vcge.f32	d0, d0, d0
    3ac4:	01f35001 	mvnseq	r5, r1
    3ac8:	26461e50 			; <UNDEFINED> instruction: 0x26461e50
    3acc:	1c5001f3 	ldfnee	f0, [r0], {243}	; 0xf3
    3ad0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3ae0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    3aec:	380c0005 	stmdacc	ip, {r0, r2}
    3af0:	00400910 	subeq	r0, r0, r0, lsl r9
	...
    3b00:	01000000 	mrseq	r0, (UNDEF: 0)
    3b04:	00005600 	andeq	r5, r0, r0, lsl #12
	...
    3b14:	00060000 	andeq	r0, r6, r0
    3b18:	00760070 	rsbseq	r0, r6, r0, ror r0
    3b1c:	00009f1c 	andeq	r9, r0, ip, lsl pc
    3b20:	00000000 	andeq	r0, r0, r0
    3b24:	00010000 	andeq	r0, r1, r0
    3b28:	00000050 	andeq	r0, r0, r0, asr r0
	...
    3b38:	70000a00 	andvc	r0, r0, r0, lsl #20
    3b3c:	44fc0800 	ldrbtmi	r0, [ip], #2048	; 0x800
    3b40:	25461a24 	strbcs	r1, [r6, #-2596]	; 0xfffff5dc
    3b44:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3b54:	53000100 	movwpl	r0, #256	; 0x100
	...
    3b68:	00730009 	rsbseq	r0, r3, r9
    3b6c:	1afc000a 	bne	fff03b9c <_estack+0xdfefeb9c>
    3b70:	009f253a 	addseq	r2, pc, sl, lsr r5	; <UNPREDICTABLE>
	...
    3b80:	0a000000 	beq	3b88 <NOROM_RFCRfTrimRead+0x108>
    3b84:	08007300 	stmdaeq	r0, {r8, r9, ip, sp, lr}
    3b88:	1a2440fc 	bne	913f80 <__ccfg+0x8f3fd8>
    3b8c:	009f2542 	addseq	r2, pc, r2, asr #10
    3b90:	00000000 	andeq	r0, r0, r0
    3b94:	0c000000 	stceq	0, cr0, [r0], {-0}
    3b98:	2a00003a 	bcs	3c88 <NOROM_RFCRTrim+0xb8>
    3b9c:	0100003a 	tsteq	r0, sl, lsr r0
    3ba0:	3a2a5000 	bcc	a97ba8 <__ccfg+0xa77c00>
    3ba4:	3a340000 	bcc	d03bac <__ccfg+0xce3c04>
    3ba8:	00040000 	andeq	r0, r4, r0
    3bac:	9f5001f3 	svcls	0x005001f3
	...
    3bb8:	00003a96 	muleq	r0, r6, sl
    3bbc:	00003a98 	muleq	r0, r8, sl
    3bc0:	9a530001 	bls	14c3bcc <__ccfg+0x14a3c24>
    3bc4:	9c00003a 	stcls	0, cr0, [r0], {58}	; 0x3a
    3bc8:	0100003a 	tsteq	r0, sl, lsr r0
    3bcc:	00005300 	andeq	r5, r0, r0, lsl #6
    3bd0:	00000000 	andeq	r0, r0, r0
    3bd4:	3bd00000 	blcc	ff403bdc <_estack+0xdf3febdc>
    3bd8:	3c060000 	stccc	0, cr0, [r6], {-0}
    3bdc:	00010000 	andeq	r0, r1, r0
    3be0:	003c0650 	eorseq	r0, ip, r0, asr r6
    3be4:	003ce800 	eorseq	lr, ip, r0, lsl #16
    3be8:	f3000400 	vshl.u8	d0, d0, d0
    3bec:	009f5001 	addseq	r5, pc, r1
    3bf0:	00000000 	andeq	r0, r0, r0
    3bf4:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    3bf8:	f200003b 	vqadd.s8	d0, d0, d27
    3bfc:	0100003b 	tsteq	r0, fp, lsr r0
    3c00:	3bf25100 	blcc	ffc98008 <_estack+0xdfc93008>
    3c04:	3bf80000 	blcc	ffe03c0c <_estack+0xdfdfec0c>
    3c08:	00020000 	andeq	r0, r2, r0
    3c0c:	3bfc9f32 	blcc	fff2b8dc <_estack+0xdff268dc>
    3c10:	3c860000 	stccc	0, cr0, [r6], {0}
    3c14:	00010000 	andeq	r0, r1, r0
    3c18:	003c8651 	eorseq	r8, ip, r1, asr r6
    3c1c:	003c8a00 	eorseq	r8, ip, r0, lsl #20
    3c20:	71000300 	mrsvc	r0, LR_irq
    3c24:	3cac9f05 	stccc	15, cr9, [ip], #20
    3c28:	3cc20000 	stclcc	0, cr0, [r2], {0}
    3c2c:	00010000 	andeq	r0, r1, r0
    3c30:	003cc251 	eorseq	ip, ip, r1, asr r2
    3c34:	003cc400 	eorseq	ip, ip, r0, lsl #8
    3c38:	71000300 	mrsvc	r0, LR_irq
    3c3c:	00009f05 	andeq	r9, r0, r5, lsl #30
    3c40:	00000000 	andeq	r0, r0, r0
    3c44:	3c520000 	mracc	r0, r2, acc0
    3c48:	3c580000 	mracc	r0, r8, acc0
    3c4c:	00010000 	andeq	r0, r1, r0
    3c50:	003c6053 	eorseq	r6, ip, r3, asr r0
    3c54:	003c6200 	eorseq	r6, ip, r0, lsl #4
    3c58:	53000100 	movwpl	r0, #256	; 0x100
    3c5c:	00003c76 	andeq	r3, r0, r6, ror ip
    3c60:	00003c78 	andeq	r3, r0, r8, ror ip
    3c64:	80530001 	subshi	r0, r3, r1
    3c68:	8c00003c 	stchi	0, cr0, [r0], {60}	; 0x3c
    3c6c:	0100003c 	tsteq	r0, ip, lsr r0
    3c70:	3cac5300 	stccc	3, cr5, [ip]
    3c74:	3cb80000 	ldccc	0, cr0, [r8]
    3c78:	00010000 	andeq	r0, r1, r0
    3c7c:	003cbc53 	eorseq	fp, ip, r3, asr ip
    3c80:	003cc400 	eorseq	ip, ip, r0, lsl #8
    3c84:	53000100 	movwpl	r0, #256	; 0x100
	...
    3c90:	00003bf0 	strdeq	r3, [r0], -r0
    3c94:	00003bf2 	strdeq	r3, [r0], -r2
    3c98:	f4530001 			; <UNDEFINED> instruction: 0xf4530001
    3c9c:	f800003b 			; <UNDEFINED> instruction: 0xf800003b
    3ca0:	0100003b 	tsteq	r0, fp, lsr r0
    3ca4:	3bfe5300 	blcc	fff988ac <_estack+0xdff938ac>
    3ca8:	3c060000 	stccc	0, cr0, [r6], {-0}
    3cac:	00010000 	andeq	r0, r1, r0
    3cb0:	003c0653 	eorseq	r0, ip, r3, asr r6
    3cb4:	003c1c00 	eorseq	r1, ip, r0, lsl #24
    3cb8:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
    3cbc:	3c209f6c 	stccc	15, cr9, [r0], #-432	; 0xfffffe50
    3cc0:	3c260000 	stccc	0, cr0, [r6], #-0
    3cc4:	00030000 	andeq	r0, r3, r0
    3cc8:	009f6c74 	addseq	r6, pc, r4, ror ip	; <UNPREDICTABLE>
    3ccc:	00000000 	andeq	r0, r0, r0
    3cd0:	16000000 	strne	r0, [r0], -r0
    3cd4:	9a00003c 	bls	3dcc <TrimAfterColdResetWakeupFromShutDown+0xa8>
    3cd8:	0100003c 	tsteq	r0, ip, lsr r0
    3cdc:	3c9a5200 	lfmcc	f5, 4, [sl], {0}
    3ce0:	3ca00000 	stccc	0, cr0, [r0]
    3ce4:	00020000 	andeq	r0, r2, r0
    3ce8:	3ca00070 	stccc	0, cr0, [r0], #448	; 0x1c0
    3cec:	3ca40000 	stccc	0, cr0, [r4]
    3cf0:	00010000 	andeq	r0, r1, r0
    3cf4:	003ca452 	eorseq	sl, ip, r2, asr r4
    3cf8:	003caa00 	eorseq	sl, ip, r0, lsl #20
    3cfc:	70000200 	andvc	r0, r0, r0, lsl #4
    3d00:	003cac00 	eorseq	sl, ip, r0, lsl #24
    3d04:	003cb400 	eorseq	fp, ip, r0, lsl #8
    3d08:	52000100 	andpl	r0, r0, #0, 2
    3d0c:	00003cb4 			; <UNDEFINED> instruction: 0x00003cb4
    3d10:	00003cba 			; <UNDEFINED> instruction: 0x00003cba
    3d14:	00700002 	rsbseq	r0, r0, r2
    3d18:	00003cbc 			; <UNDEFINED> instruction: 0x00003cbc
    3d1c:	00003cc4 	andeq	r3, r0, r4, asr #25
    3d20:	00520001 	subseq	r0, r2, r1
    3d24:	00000000 	andeq	r0, r0, r0
    3d28:	d0000000 	andle	r0, r0, r0
    3d2c:	1c00003b 	stcne	0, cr0, [r0], {59}	; 0x3b
    3d30:	0200003c 	andeq	r0, r0, #60	; 0x3c
    3d34:	1c9f3000 	ldcne	0, cr3, [pc], {0}
    3d38:	2000003c 	andcs	r0, r0, ip, lsr r0
    3d3c:	0100003c 	tsteq	r0, ip, lsr r0
    3d40:	3c205400 	cfstrscc	mvf5, [r0], #-0
    3d44:	3c260000 	stccc	0, cr0, [r6], #-0
    3d48:	00020000 	andeq	r0, r2, r0
    3d4c:	3c269f30 	stccc	15, cr9, [r6], #-192	; 0xffffff40
    3d50:	3cc40000 	stclcc	0, cr0, [r4], {0}
    3d54:	00010000 	andeq	r0, r1, r0
    3d58:	00000054 	andeq	r0, r0, r4, asr r0
    3d5c:	00000000 	andeq	r0, r0, r0
    3d60:	003ce800 	eorseq	lr, ip, r0, lsl #16
    3d64:	003cf200 	eorseq	pc, ip, r0, lsl #4
    3d68:	50000100 	andpl	r0, r0, r0, lsl #2
    3d6c:	00003cf2 	strdeq	r3, [r0], -r2
    3d70:	00003d04 	andeq	r3, r0, r4, lsl #26
    3d74:	70750003 	rsbsvc	r0, r5, r3
    3d78:	003d049f 	mlaseq	sp, pc, r4, r0	; <UNPREDICTABLE>
    3d7c:	003d0800 	eorseq	r0, sp, r0, lsl #16
    3d80:	f3000400 	vshl.u8	d0, d0, d0
    3d84:	009f5001 	addseq	r5, pc, r1
	...
    3d94:	02000000 	andeq	r0, r0, #0
    3d98:	009f3000 	addseq	r3, pc, r0
    3d9c:	00000000 	andeq	r0, r0, r0
    3da0:	02000000 	andeq	r0, r0, #0
    3da4:	009f3100 	addseq	r3, pc, r0, lsl #2
    3da8:	00000000 	andeq	r0, r0, r0
    3dac:	02000000 	andeq	r0, r0, #0
    3db0:	009f3200 	addseq	r3, pc, r0, lsl #4
    3db4:	00000000 	andeq	r0, r0, r0
    3db8:	02000000 	andeq	r0, r0, #0
    3dbc:	009f3300 	addseq	r3, pc, r0, lsl #6
    3dc0:	00000000 	andeq	r0, r0, r0
    3dc4:	02000000 	andeq	r0, r0, #0
    3dc8:	009f3400 	addseq	r3, pc, r0, lsl #8
    3dcc:	00000000 	andeq	r0, r0, r0
    3dd0:	02000000 	andeq	r0, r0, #0
    3dd4:	009f3500 	addseq	r3, pc, r0, lsl #10
    3dd8:	00000000 	andeq	r0, r0, r0
    3ddc:	02000000 	andeq	r0, r0, #0
    3de0:	009f3600 	addseq	r3, pc, r0, lsl #12
    3de4:	00000000 	andeq	r0, r0, r0
    3de8:	02000000 	andeq	r0, r0, #0
    3dec:	009f3700 	addseq	r3, pc, r0, lsl #14
    3df0:	00000000 	andeq	r0, r0, r0
    3df4:	02000000 	andeq	r0, r0, #0
    3df8:	009f3800 	addseq	r3, pc, r0, lsl #16
    3dfc:	00000000 	andeq	r0, r0, r0
    3e00:	02000000 	andeq	r0, r0, #0
    3e04:	009f3900 	addseq	r3, pc, r0, lsl #18
    3e08:	00000000 	andeq	r0, r0, r0
    3e0c:	02000000 	andeq	r0, r0, #0
    3e10:	009f3a00 	addseq	r3, pc, r0, lsl #20
    3e14:	00000000 	andeq	r0, r0, r0
    3e18:	02000000 	andeq	r0, r0, #0
    3e1c:	009f3b00 	addseq	r3, pc, r0, lsl #22
    3e20:	00000000 	andeq	r0, r0, r0
    3e24:	02000000 	andeq	r0, r0, #0
    3e28:	009f3c00 	addseq	r3, pc, r0, lsl #24
    3e2c:	00000000 	andeq	r0, r0, r0
    3e30:	24000000 	strcs	r0, [r0], #-0
    3e34:	6200003d 	andvs	r0, r0, #61	; 0x3d
    3e38:	0100003d 	tsteq	r0, sp, lsr r0
    3e3c:	3d625000 	stclcc	0, cr5, [r2, #-0]
    3e40:	3dc40000 	stclcc	0, cr0, [r4]
    3e44:	00010000 	andeq	r0, r1, r0
    3e48:	003dc455 	eorseq	ip, sp, r5, asr r4
    3e4c:	003df800 	eorseq	pc, sp, r0, lsl #16
    3e50:	f3000400 	vshl.u8	d0, d0, d0
    3e54:	009f5001 	addseq	r5, pc, r1
    3e58:	00000000 	andeq	r0, r0, r0
    3e5c:	60000000 	andvs	r0, r0, r0
    3e60:	c400003d 	strgt	r0, [r0], #-61	; 0xffffffc3
    3e64:	0100003d 	tsteq	r0, sp, lsr r0
    3e68:	00005400 	andeq	r5, r0, r0, lsl #8
    3e6c:	00000000 	andeq	r0, r0, r0
    3e70:	3d760000 	ldclcc	0, cr0, [r6, #-0]
    3e74:	3d780000 	ldclcc	0, cr0, [r8, #-0]
    3e78:	00070000 	andeq	r0, r7, r0
    3e7c:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    3e80:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    3e84:	00000000 	andeq	r0, r0, r0
    3e88:	86000000 	strhi	r0, [r0], -r0
    3e8c:	a000003d 	andge	r0, r0, sp, lsr r0
    3e90:	0100003d 	tsteq	r0, sp, lsr r0
    3e94:	00005300 	andeq	r5, r0, r0, lsl #6
    3e98:	00000000 	andeq	r0, r0, r0
    3e9c:	3d8a0000 	stccc	0, cr0, [sl]
    3ea0:	3d960000 	ldccc	0, cr0, [r6]
    3ea4:	00010000 	andeq	r0, r1, r0
    3ea8:	003d9652 	eorseq	r9, sp, r2, asr r6
    3eac:	003d9a00 	eorseq	r9, sp, r0, lsl #20
    3eb0:	71000300 	mrsvc	r0, LR_irq
    3eb4:	3d9a9f06 	ldccc	15, cr9, [sl, #24]
    3eb8:	3da20000 	stccc	0, cr0, [r2]
    3ebc:	00010000 	andeq	r0, r1, r0
    3ec0:	00000052 	andeq	r0, r0, r2, asr r0
    3ec4:	00000000 	andeq	r0, r0, r0
    3ec8:	003dfe00 	eorseq	pc, sp, r0, lsl #28
    3ecc:	003e7800 	eorseq	r7, lr, r0, lsl #16
    3ed0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3edc:	00003e64 	andeq	r3, r0, r4, ror #28
    3ee0:	00003e6e 	andeq	r3, r0, lr, ror #28
    3ee4:	00530001 	subseq	r0, r3, r1
    3ee8:	00000000 	andeq	r0, r0, r0
    3eec:	9c000000 	stcls	0, cr0, [r0], {-0}
    3ef0:	c200003e 	andgt	r0, r0, #62	; 0x3e
    3ef4:	0100003e 	tsteq	r0, lr, lsr r0
    3ef8:	3ec25000 	cdpcc	0, 12, cr5, cr2, cr0, {0}
    3efc:	3f180000 	svccc	0x00180000
    3f00:	00040000 	andeq	r0, r4, r0
    3f04:	9f5001f3 	svcls	0x005001f3
	...
    3f10:	00003ec4 	andeq	r3, r0, r4, asr #29
    3f14:	00003ef8 	strdeq	r3, [r0], -r8
    3f18:	00530001 	subseq	r0, r3, r1
    3f1c:	00000000 	andeq	r0, r0, r0
    3f20:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    3f24:	d600003e 			; <UNDEFINED> instruction: 0xd600003e
    3f28:	0100003e 	tsteq	r0, lr, lsr r0
    3f2c:	3ed65100 	cdpcc	1, 13, cr5, cr6, cr0, {0}
    3f30:	3ed80000 	cdpcc	0, 13, cr0, cr8, cr0, {0}
    3f34:	00060000 	andeq	r0, r6, r0
    3f38:	00730072 	rsbseq	r0, r3, r2, ror r0
    3f3c:	3ed89f1c 	mrccc	15, 6, r9, cr8, cr12, {0}
    3f40:	3ede0000 	cdpcc	0, 13, cr0, cr14, cr0, {0}
    3f44:	00010000 	andeq	r0, r1, r0
    3f48:	00000051 	andeq	r0, r0, r1, asr r0
    3f4c:	00000000 	andeq	r0, r0, r0
    3f50:	003eb400 	eorseq	fp, lr, r0, lsl #8
    3f54:	003ec600 	eorseq	ip, lr, r0, lsl #12
    3f58:	53000100 	movwpl	r0, #256	; 0x100
	...
    3f64:	00003f18 	andeq	r3, r0, r8, lsl pc
    3f68:	00003f3b 	andeq	r3, r0, fp, lsr pc
    3f6c:	3b500001 	blcc	1403f78 <__ccfg+0x13e3fd0>
    3f70:	4600003f 			; <UNDEFINED> instruction: 0x4600003f
    3f74:	0100003f 	tsteq	r0, pc, lsr r0
    3f78:	3f465400 	svccc	0x00465400
    3f7c:	3f4e0000 	svccc	0x004e0000
    3f80:	00010000 	andeq	r0, r1, r0
    3f84:	003f4e50 	eorseq	r4, pc, r0, asr lr	; <UNPREDICTABLE>
    3f88:	003f9a00 	eorseq	r9, pc, r0, lsl #20
    3f8c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3f98:	00003f54 	andeq	r3, r0, r4, asr pc
    3f9c:	00003f58 	andeq	r3, r0, r8, asr pc
    3fa0:	5a530001 	bpl	14c3fac <__ccfg+0x14a4004>
    3fa4:	6800003f 	stmdavs	r0, {r0, r1, r2, r3, r4, r5}
    3fa8:	0100003f 	tsteq	r0, pc, lsr r0
    3fac:	3f6a5300 	svccc	0x006a5300
    3fb0:	3f720000 	svccc	0x00720000
    3fb4:	00010000 	andeq	r0, r1, r0
    3fb8:	00000053 	andeq	r0, r0, r3, asr r0
    3fbc:	00000000 	andeq	r0, r0, r0
    3fc0:	003f5400 	eorseq	r5, pc, r0, lsl #8
    3fc4:	003f8800 	eorseq	r8, pc, r0, lsl #16
    3fc8:	74000500 	strvc	r0, [r0], #-1280	; 0xfffffb00
    3fcc:	9f264c00 	svcls	0x00264c00
    3fd0:	00003f88 	andeq	r3, r0, r8, lsl #31
    3fd4:	00003fc4 	andeq	r3, r0, r4, asr #31
    3fd8:	01f30006 	mvnseq	r0, r6
    3fdc:	9f264c50 	svcls	0x00264c50
	...
    3fe8:	00003f4e 	andeq	r3, r0, lr, asr #30
    3fec:	00003f58 	andeq	r3, r0, r8, asr pc
    3ff0:	00530001 	subseq	r0, r3, r1
    3ff4:	00000000 	andeq	r0, r0, r0
    3ff8:	c4000000 	strgt	r0, [r0], #-0
    3ffc:	d800003f 	stmdale	r0, {r0, r1, r2, r3, r4, r5}
    4000:	0100003f 	tsteq	r0, pc, lsr r0
    4004:	3fd85000 	svccc	0x00d85000
    4008:	40200000 	eormi	r0, r0, r0
    400c:	00040000 	andeq	r0, r4, r0
    4010:	9f5001f3 	svcls	0x005001f3
	...
    401c:	00003fca 	andeq	r3, r0, sl, asr #31
    4020:	00003fd2 	ldrdeq	r3, [r0], -r2
    4024:	00530001 	subseq	r0, r3, r1
    4028:	00000000 	andeq	r0, r0, r0
    402c:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    4030:	e000003f 	and	r0, r0, pc, lsr r0
    4034:	0100003f 	tsteq	r0, pc, lsr r0
    4038:	3fe05200 	svccc	0x00e05200
    403c:	3fe20000 	svccc	0x00e20000
    4040:	00050000 	andeq	r0, r5, r0
    4044:	25310072 	ldrcs	r0, [r1, #-114]!	; 0xffffff8e
    4048:	003fe29f 	mlaseq	pc, pc, r2, lr	; <UNPREDICTABLE>
    404c:	003fe800 	eorseq	lr, pc, r0, lsl #16
    4050:	52000100 	andpl	r0, r0, #0, 2
    4054:	00003fec 	andeq	r3, r0, ip, ror #31
    4058:	00003ffe 	strdeq	r3, [r0], -lr
    405c:	02520001 	subseq	r0, r2, #1
    4060:	0c000040 	stceq	0, cr0, [r0], {64}	; 0x40
    4064:	01000040 	tsteq	r0, r0, asr #32
    4068:	400e5200 	andmi	r5, lr, r0, lsl #4
    406c:	40200000 	eormi	r0, r0, r0
    4070:	00010000 	andeq	r0, r1, r0
    4074:	00000052 	andeq	r0, r0, r2, asr r0
    4078:	00000000 	andeq	r0, r0, r0
    407c:	003fd200 	eorseq	sp, pc, r0, lsl #4
    4080:	003fdc00 	eorseq	sp, pc, r0, lsl #24
    4084:	53000100 	movwpl	r0, #256	; 0x100
    4088:	00003fdc 	ldrdeq	r3, [r0], -ip
    408c:	00003fde 	ldrdeq	r3, [r0], -lr
    4090:	00730005 	rsbseq	r0, r3, r5
    4094:	de9f2531 	mrcle	5, 4, r2, cr15, cr1, {1}
    4098:	e000003f 	and	r0, r0, pc, lsr r0
    409c:	0100003f 	tsteq	r0, pc, lsr r0
    40a0:	3fe05300 	svccc	0x00e05300
    40a4:	3fec0000 	svccc	0x00ec0000
    40a8:	00040000 	andeq	r0, r4, r0
    40ac:	9fffff0a 	svcls	0x00ffff0a
    40b0:	00003fec 	andeq	r3, r0, ip, ror #31
    40b4:	00003ff2 	strdeq	r3, [r0], -r2
    40b8:	f6530001 			; <UNDEFINED> instruction: 0xf6530001
    40bc:	fc00003f 	stc2	0, cr0, [r0], {63}	; 0x3f
    40c0:	0100003f 	tsteq	r0, pc, lsr r0
    40c4:	3ffc5300 	svccc	0x00fc5300
    40c8:	400e0000 	andmi	r0, lr, r0
    40cc:	00020000 	andeq	r0, r2, r0
    40d0:	400e9f31 	andmi	r9, lr, r1, lsr pc
    40d4:	40200000 	eormi	r0, r0, r0
    40d8:	00010000 	andeq	r0, r1, r0
    40dc:	00000053 	andeq	r0, r0, r3, asr r0
    40e0:	00000000 	andeq	r0, r0, r0
    40e4:	003fd200 	eorseq	sp, pc, r0, lsl #4
    40e8:	003fd800 	eorseq	sp, pc, r0, lsl #16
    40ec:	30000200 	andcc	r0, r0, r0, lsl #4
    40f0:	003fd89f 	mlaseq	pc, pc, r8, sp	; <UNPREDICTABLE>
    40f4:	00401400 	subeq	r1, r0, r0, lsl #8
    40f8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4104:	00004014 	andeq	r4, r0, r4, lsl r0
    4108:	00004018 	andeq	r4, r0, r8, lsl r0
    410c:	00720008 	rsbseq	r0, r2, r8
    4110:	00732440 	rsbseq	r2, r3, r0, asr #8
    4114:	40189f21 	andsmi	r9, r8, r1, lsr #30
    4118:	40200000 	eormi	r0, r0, r0
    411c:	00010000 	andeq	r0, r1, r0
    4120:	00000050 	andeq	r0, r0, r0, asr r0
    4124:	00000000 	andeq	r0, r0, r0
    4128:	00402a00 	subeq	r2, r0, r0, lsl #20
    412c:	00402e00 	subeq	r2, r0, r0, lsl #28
    4130:	70000a00 	andvc	r0, r0, r0, lsl #20
    4134:	381a3300 	ldmdacc	sl, {r8, r9, ip, sp}
    4138:	21007324 	tstcs	r0, r4, lsr #6
    413c:	0040329f 	umaaleq	r3, r0, pc, r2	; <UNPREDICTABLE>
    4140:	00403800 	subeq	r3, r0, r0, lsl #16
    4144:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4158:	00700007 	rsbseq	r0, r0, r7
    415c:	1a3fff0a 	bne	1003d8c <__ccfg+0xfe3de4>
    4160:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4164:	00000000 	andeq	r0, r0, r0
    4168:	00403c00 	subeq	r3, r0, r0, lsl #24
    416c:	00404000 	subeq	r4, r0, r0
    4170:	70000f00 	andvc	r0, r0, r0, lsl #30
    4174:	1afc0800 	bne	fff0617c <_estack+0xdff0117c>
    4178:	80110070 	andshi	r0, r1, r0, ror r0
    417c:	1a67f3f8 	bne	1a01164 <__ccfg+0x19e11bc>
    4180:	00009f21 	andeq	r9, r0, r1, lsr #30
    4184:	00000000 	andeq	r0, r0, r0
    4188:	403c0000 	eorsmi	r0, ip, r0
    418c:	40400000 	submi	r0, r0, r0
    4190:	00010000 	andeq	r0, r1, r0
    4194:	00000050 	andeq	r0, r0, r0, asr r0
    4198:	00000000 	andeq	r0, r0, r0
    419c:	00404c00 	subeq	r4, r0, r0, lsl #24
    41a0:	00405000 	subeq	r5, r0, r0
    41a4:	70000f00 	andvc	r0, r0, r0, lsl #30
    41a8:	1a3f0800 	bne	fc61b0 <__ccfg+0xfa6208>
    41ac:	c00c0070 	andgt	r0, ip, r0, ror r0
    41b0:	1a00fcff 	bne	435b4 <__ccfg+0x2360c>
    41b4:	00009f21 	andeq	r9, r0, r1, lsr #30
    41b8:	00000000 	andeq	r0, r0, r0
    41bc:	404c0000 	submi	r0, ip, r0
    41c0:	40500000 	subsmi	r0, r0, r0
    41c4:	00010000 	andeq	r0, r1, r0
    41c8:	00000050 	andeq	r0, r0, r0, asr r0
    41cc:	00000000 	andeq	r0, r0, r0
    41d0:	00405c00 	subeq	r5, r0, r0, lsl #24
    41d4:	0040b200 	subeq	fp, r0, r0, lsl #4
    41d8:	50000100 	andpl	r0, r0, r0, lsl #2
    41dc:	000040b2 	strheq	r4, [r0], -r2
    41e0:	000040c0 	andeq	r4, r0, r0, asr #1
    41e4:	01f30004 	mvnseq	r0, r4
    41e8:	00009f50 	andeq	r9, r0, r0, asr pc
    41ec:	00000000 	andeq	r0, r0, r0
    41f0:	409c0000 	addsmi	r0, ip, r0
    41f4:	40a40000 	adcmi	r0, r4, r0
    41f8:	00170000 	andseq	r0, r7, r0
    41fc:	000a0074 	andeq	r0, sl, r4, ror r0
    4200:	00741aff 	ldrshteq	r1, [r4], #-175	; 0xffffff51
    4204:	211af008 	tstcs	sl, r8	; <UNPREDICTABLE>
    4208:	24440072 	strbcs	r0, [r4], #-114	; 0xffffff8e
    420c:	40007321 	andmi	r7, r0, r1, lsr #6
    4210:	a89f2124 	ldmge	pc, {r2, r5, r8, sp}	; <UNPREDICTABLE>
    4214:	c0000040 	andgt	r0, r0, r0, asr #32
    4218:	01000040 	tsteq	r0, r0, asr #32
    421c:	00005300 	andeq	r5, r0, r0, lsl #6
    4220:	00000000 	andeq	r0, r0, r0
    4224:	40640000 	rsbmi	r0, r4, r0
    4228:	40ae0000 	adcmi	r0, lr, r0
    422c:	00010000 	andeq	r0, r1, r0
    4230:	00000054 	andeq	r0, r0, r4, asr r0
    4234:	00000000 	andeq	r0, r0, r0
    4238:	00406a00 	subeq	r6, r0, r0, lsl #20
    423c:	00407e00 	subeq	r7, r0, r0, lsl #28
    4240:	52000100 	andpl	r0, r0, #0, 2
    4244:	0000407e 	andeq	r4, r0, lr, ror r0
    4248:	0000408a 	andeq	r4, r0, sl, lsl #1
    424c:	00740006 	rsbseq	r0, r4, r6
    4250:	9f24ec09 	svcls	0x0024ec09
    4254:	0000409c 	muleq	r0, ip, r0
    4258:	000040a4 	andeq	r4, r0, r4, lsr #1
    425c:	00520001 	subseq	r0, r2, r1
    4260:	00000000 	andeq	r0, r0, r0
    4264:	72000000 	andvc	r0, r0, #0
    4268:	90000040 	andls	r0, r0, r0, asr #32
    426c:	01000040 	tsteq	r0, r0, asr #32
    4270:	40905300 	addsmi	r5, r0, r0, lsl #6
    4274:	409c0000 	addsmi	r0, ip, r0
    4278:	00060000 	andeq	r0, r6, r0
    427c:	f0090074 			; <UNDEFINED> instruction: 0xf0090074
    4280:	409c9f24 	addsmi	r9, ip, r4, lsr #30
    4284:	40a80000 	adcmi	r0, r8, r0
    4288:	00010000 	andeq	r0, r1, r0
    428c:	00000053 	andeq	r0, r0, r3, asr r0
    4290:	00000000 	andeq	r0, r0, r0
    4294:	00407c00 	subeq	r7, r0, r0, lsl #24
    4298:	00407e00 	subeq	r7, r0, r0, lsl #28
    429c:	76000600 	strvc	r0, [r0], -r0, lsl #12
    42a0:	22007200 	andcs	r7, r0, #0, 4
    42a4:	00407e9f 	umaaleq	r7, r0, pc, lr	; <UNPREDICTABLE>
    42a8:	00408600 	subeq	r8, r0, r0, lsl #12
    42ac:	52000100 	andpl	r0, r0, #0, 2
    42b0:	00004086 	andeq	r4, r0, r6, lsl #1
    42b4:	00004088 	andeq	r4, r0, r8, lsl #1
    42b8:	00740009 	rsbseq	r0, r4, r9
    42bc:	7624ec09 	strtvc	lr, [r4], -r9, lsl #24
    42c0:	889f2200 	ldmhi	pc, {r9, sp}	; <UNPREDICTABLE>
    42c4:	8a000040 	bhi	43cc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa8>
    42c8:	01000040 	tsteq	r0, r0, asr #32
    42cc:	408e5500 	addmi	r5, lr, r0, lsl #10
    42d0:	40900000 	addsmi	r0, r0, r0
    42d4:	00060000 	andeq	r0, r6, r0
    42d8:	00730071 	rsbseq	r0, r3, r1, ror r0
    42dc:	40909f22 	addsmi	r9, r0, r2, lsr #30
    42e0:	40980000 	addsmi	r0, r8, r0
    42e4:	00010000 	andeq	r0, r1, r0
    42e8:	00409853 	subeq	r9, r0, r3, asr r8
    42ec:	00409a00 	subeq	r9, r0, r0, lsl #20
    42f0:	74000900 	strvc	r0, [r0], #-2304	; 0xfffff700
    42f4:	24f00900 	ldrbtcs	r0, [r0], #2304	; 0x900
    42f8:	9f220071 	svcls	0x00220071
    42fc:	0000409a 	muleq	r0, sl, r0
    4300:	0000409c 	muleq	r0, ip, r0
    4304:	9f300002 	svcls	0x00300002
	...
    4310:	000040c0 	andeq	r4, r0, r0, asr #1
    4314:	000040c8 	andeq	r4, r0, r8, asr #1
    4318:	c8500001 	ldmdagt	r0, {r0}^
    431c:	d4000040 	strle	r0, [r0], #-64	; 0xffffffc0
    4320:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
    4324:	5001f300 	andpl	pc, r1, r0, lsl #6
    4328:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    432c:	00000000 	andeq	r0, r0, r0
    4330:	0040c000 	subeq	ip, r0, r0
    4334:	0040ce00 	subeq	ip, r0, r0, lsl #28
    4338:	30000200 	andcc	r0, r0, r0, lsl #4
    433c:	0040ce9f 	umaaleq	ip, r0, pc, lr	; <UNPREDICTABLE>
    4340:	0040d400 	subeq	sp, r0, r0, lsl #8
    4344:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4350:	000040c2 	andeq	r4, r0, r2, asr #1
    4354:	000040c8 	andeq	r4, r0, r8, asr #1
    4358:	c8500001 	ldmdagt	r0, {r0}^
    435c:	d4000040 	strle	r0, [r0], #-64	; 0xffffffc0
    4360:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
    4364:	5001f300 	andpl	pc, r1, r0, lsl #6
    4368:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    436c:	00000000 	andeq	r0, r0, r0
    4370:	0040cc00 	subeq	ip, r0, r0, lsl #24
    4374:	0040ce00 	subeq	ip, r0, r0, lsl #28
    4378:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4384:	000040d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    4388:	000040dc 	ldrdeq	r4, [r0], -ip
    438c:	dc500001 	mrrcle	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    4390:	e8000040 	stmda	r0, {r6}
    4394:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
    4398:	5001f300 	andpl	pc, r1, r0, lsl #6
    439c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    43a0:	00000000 	andeq	r0, r0, r0
    43a4:	0040d400 	subeq	sp, r0, r0, lsl #8
    43a8:	0040e200 	subeq	lr, r0, r0, lsl #4
    43ac:	31000200 	mrscc	r0, R8_usr
    43b0:	0040e29f 	umaaleq	lr, r0, pc, r2	; <UNPREDICTABLE>
    43b4:	0040e800 	subeq	lr, r0, r0, lsl #16
    43b8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    43c4:	000040d6 	ldrdeq	r4, [r0], -r6
    43c8:	000040dc 	ldrdeq	r4, [r0], -ip
    43cc:	dc500001 	mrrcle	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    43d0:	e8000040 	stmda	r0, {r6}
    43d4:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
    43d8:	5001f300 	andpl	pc, r1, r0, lsl #6
    43dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    43e0:	00000000 	andeq	r0, r0, r0
    43e4:	0040e000 	subeq	lr, r0, r0
    43e8:	0040e200 	subeq	lr, r0, r0, lsl #4
    43ec:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    43f8:	000040e8 	andeq	r4, r0, r8, ror #1
    43fc:	000040f0 	strdeq	r4, [r0], -r0
    4400:	f0500001 			; <UNDEFINED> instruction: 0xf0500001
    4404:	fc000040 	stc2	0, cr0, [r0], {64}	; 0x40
    4408:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
    440c:	5001f300 	andpl	pc, r1, r0, lsl #6
    4410:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4414:	00000000 	andeq	r0, r0, r0
    4418:	0040e800 	subeq	lr, r0, r0, lsl #16
    441c:	0040f600 	subeq	pc, r0, r0, lsl #12
    4420:	31000200 	mrscc	r0, R8_usr
    4424:	0040f69f 	umaaleq	pc, r0, pc, r6	; <UNPREDICTABLE>
    4428:	0040fc00 	subeq	pc, r0, r0, lsl #24
    442c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4438:	000040ea 	andeq	r4, r0, sl, ror #1
    443c:	000040f0 	strdeq	r4, [r0], -r0
    4440:	f0500001 			; <UNDEFINED> instruction: 0xf0500001
    4444:	fc000040 	stc2	0, cr0, [r0], {64}	; 0x40
    4448:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
    444c:	5001f300 	andpl	pc, r1, r0, lsl #6
    4450:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4454:	00000000 	andeq	r0, r0, r0
    4458:	0040f400 	subeq	pc, r0, r0, lsl #8
    445c:	0040f600 	subeq	pc, r0, r0, lsl #12
    4460:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    446c:	000040fc 	strdeq	r4, [r0], -ip
    4470:	00004108 	andeq	r4, r0, r8, lsl #2
    4474:	08500001 	ldmdaeq	r0, {r0}^
    4478:	24000041 	strcs	r0, [r0], #-65	; 0xffffffbf
    447c:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
    4480:	5001f300 	andpl	pc, r1, r0, lsl #6
    4484:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4488:	00000000 	andeq	r0, r0, r0
    448c:	0040fc00 	subeq	pc, r0, r0, lsl #24
    4490:	00411e00 	subeq	r1, r1, r0, lsl #28
    4494:	30000200 	andcc	r0, r0, r0, lsl #4
    4498:	00411e9f 	umaaleq	r1, r1, pc, lr	; <UNPREDICTABLE>
    449c:	00412400 	subeq	r2, r1, r0, lsl #8
    44a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    44ac:	000040fe 	strdeq	r4, [r0], -lr
    44b0:	00004108 	andeq	r4, r0, r8, lsl #2
    44b4:	08500001 	ldmdaeq	r0, {r0}^
    44b8:	24000041 	strcs	r0, [r0], #-65	; 0xffffffbf
    44bc:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
    44c0:	5001f300 	andpl	pc, r1, r0, lsl #6
    44c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    44c8:	00000000 	andeq	r0, r0, r0
    44cc:	00411000 	subeq	r1, r1, r0
    44d0:	00411800 	subeq	r1, r1, r0, lsl #16
    44d4:	73001000 	movwvc	r1, #0
    44d8:	24464c00 	strbcs	r4, [r6], #-3072	; 0xfffff400
    44dc:	3225481a 	eorcc	r4, r5, #1703936	; 0x1a0000
    44e0:	38007224 	stmdacc	r0, {r2, r5, r9, ip, sp, lr}
    44e4:	1a9f2124 	bne	fe7cc97c <_estack+0xde7c797c>
    44e8:	1e000041 	cdpne	0, 0, cr0, cr0, cr1, {2}
    44ec:	01000041 	tsteq	r0, r1, asr #32
    44f0:	00005000 	andeq	r5, r0, r0
    44f4:	00000000 	andeq	r0, r0, r0
    44f8:	41040000 	mrsmi	r0, (UNDEF: 4)
    44fc:	41180000 	tstmi	r8, r0
    4500:	00010000 	andeq	r0, r1, r0
    4504:	00000053 	andeq	r0, r0, r3, asr r0
    4508:	00000000 	andeq	r0, r0, r0
    450c:	00412800 	subeq	r2, r1, r0, lsl #16
    4510:	00412c00 	subeq	r2, r1, r0, lsl #24
    4514:	70000900 	andvc	r0, r0, r0, lsl #18
    4518:	24404800 	strbcs	r4, [r0], #-2048	; 0xfffff800
    451c:	9f25431a 	svcls	0x0025431a
	...
    4528:	00004134 	andeq	r4, r0, r4, lsr r1
    452c:	00004140 	andeq	r4, r0, r0, asr #2
    4530:	40500001 	subsmi	r0, r0, r1
    4534:	60000041 	andvs	r0, r0, r1, asr #32
    4538:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
    453c:	5001f300 	andpl	pc, r1, r0, lsl #6
    4540:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4544:	00000000 	andeq	r0, r0, r0
    4548:	00413400 	subeq	r3, r1, r0, lsl #8
    454c:	00415600 	subeq	r5, r1, r0, lsl #12
    4550:	0c000600 	stceq	6, cr0, [r0], {-0}
    4554:	403f8000 	eorsmi	r8, pc, r0
    4558:	0041569f 	umaaleq	r5, r1, pc, r6	; <UNPREDICTABLE>
    455c:	00416000 	subeq	r6, r1, r0
    4560:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    456c:	00004136 	andeq	r4, r0, r6, lsr r1
    4570:	00004140 	andeq	r4, r0, r0, asr #2
    4574:	40500001 	subsmi	r0, r0, r1
    4578:	60000041 	andvs	r0, r0, r1, asr #32
    457c:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
    4580:	5001f300 	andpl	pc, r1, r0, lsl #6
    4584:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4588:	00000000 	andeq	r0, r0, r0
    458c:	00414400 	subeq	r4, r1, r0, lsl #8
    4590:	00414a00 	subeq	r4, r1, r0, lsl #20
    4594:	73001000 	movwvc	r1, #0
    4598:	03f00a00 	mvnseq	r0, #0, 20
    459c:	4025341a 	eormi	r3, r5, sl, lsl r4
    45a0:	46007224 	strmi	r7, [r0], -r4, lsr #4
    45a4:	549f2124 	ldrpl	r2, [pc], #292	; 45ac <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    45a8:	56000041 	strpl	r0, [r0], -r1, asr #32
    45ac:	01000041 	tsteq	r0, r1, asr #32
    45b0:	00005000 	andeq	r5, r0, r0
    45b4:	00000000 	andeq	r0, r0, r0
    45b8:	413c0000 	teqmi	ip, r0
    45bc:	414a0000 	mrsmi	r0, (UNDEF: 74)
    45c0:	00010000 	andeq	r0, r1, r0
    45c4:	00000053 	andeq	r0, r0, r3, asr r0
    45c8:	00000000 	andeq	r0, r0, r0
    45cc:	00416000 	subeq	r6, r1, r0
    45d0:	00416800 	subeq	r6, r1, r0, lsl #16
    45d4:	50000100 	andpl	r0, r0, r0, lsl #2
    45d8:	00004168 	andeq	r4, r0, r8, ror #2
    45dc:	00004174 	andeq	r4, r0, r4, ror r1
    45e0:	01f30004 	mvnseq	r0, r4
    45e4:	00009f50 	andeq	r9, r0, r0, asr pc
    45e8:	00000000 	andeq	r0, r0, r0
    45ec:	41600000 	cmnmi	r0, r0
    45f0:	416e0000 	cmnmi	lr, r0
    45f4:	00020000 	andeq	r0, r2, r0
    45f8:	416e9f30 	cmnmi	lr, r0, lsr pc
    45fc:	41740000 	cmnmi	r4, r0
    4600:	00010000 	andeq	r0, r1, r0
    4604:	00000050 	andeq	r0, r0, r0, asr r0
    4608:	00000000 	andeq	r0, r0, r0
    460c:	00416200 	subeq	r6, r1, r0, lsl #4
    4610:	00416800 	subeq	r6, r1, r0, lsl #16
    4614:	50000100 	andpl	r0, r0, r0, lsl #2
    4618:	00004168 	andeq	r4, r0, r8, ror #2
    461c:	00004174 	andeq	r4, r0, r4, ror r1
    4620:	01f30004 	mvnseq	r0, r4
    4624:	00009f50 	andeq	r9, r0, r0, asr pc
    4628:	00000000 	andeq	r0, r0, r0
    462c:	416c0000 	cmnmi	ip, r0
    4630:	416e0000 	cmnmi	lr, r0
    4634:	00010000 	andeq	r0, r1, r0
    4638:	00000050 	andeq	r0, r0, r0, asr r0
    463c:	00000000 	andeq	r0, r0, r0
    4640:	00417400 	subeq	r7, r1, r0, lsl #8
    4644:	00417c00 	subeq	r7, r1, r0, lsl #24
    4648:	50000100 	andpl	r0, r0, r0, lsl #2
    464c:	0000417c 	andeq	r4, r0, ip, ror r1
    4650:	00004188 	andeq	r4, r0, r8, lsl #3
    4654:	01f30004 	mvnseq	r0, r4
    4658:	00009f50 	andeq	r9, r0, r0, asr pc
    465c:	00000000 	andeq	r0, r0, r0
    4660:	41740000 	cmnmi	r4, r0
    4664:	41820000 	orrmi	r0, r2, r0
    4668:	00020000 	andeq	r0, r2, r0
    466c:	41829f30 	orrmi	r9, r2, r0, lsr pc
    4670:	41880000 	orrmi	r0, r8, r0
    4674:	00010000 	andeq	r0, r1, r0
    4678:	00000050 	andeq	r0, r0, r0, asr r0
    467c:	00000000 	andeq	r0, r0, r0
    4680:	00417600 	subeq	r7, r1, r0, lsl #12
    4684:	00417c00 	subeq	r7, r1, r0, lsl #24
    4688:	50000100 	andpl	r0, r0, r0, lsl #2
    468c:	0000417c 	andeq	r4, r0, ip, ror r1
    4690:	00004188 	andeq	r4, r0, r8, lsl #3
    4694:	01f30004 	mvnseq	r0, r4
    4698:	00009f50 	andeq	r9, r0, r0, asr pc
    469c:	00000000 	andeq	r0, r0, r0
    46a0:	41800000 	orrmi	r0, r0, r0
    46a4:	41820000 	orrmi	r0, r2, r0
    46a8:	00010000 	andeq	r0, r1, r0
    46ac:	00000050 	andeq	r0, r0, r0, asr r0
    46b0:	00000000 	andeq	r0, r0, r0
    46b4:	00418800 	subeq	r8, r1, r0, lsl #16
    46b8:	00418e00 	subeq	r8, r1, r0, lsl #28
    46bc:	50000100 	andpl	r0, r0, r0, lsl #2
    46c0:	0000418e 	andeq	r4, r0, lr, lsl #3
    46c4:	00004278 	andeq	r4, r0, r8, ror r2
    46c8:	78550001 	ldmdavc	r5, {r0}^
    46cc:	98000042 	stmdals	r0, {r1, r6}
    46d0:	04000042 	streq	r0, [r0], #-66	; 0xffffffbe
    46d4:	5001f300 	andpl	pc, r1, r0, lsl #6
    46d8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    46dc:	00000000 	andeq	r0, r0, r0
    46e0:	00418800 	subeq	r8, r1, r0, lsl #16
    46e4:	00419100 	subeq	r9, r1, r0, lsl #2
    46e8:	51000100 	mrspl	r0, (UNDEF: 16)
    46ec:	00004191 	muleq	r0, r1, r1
    46f0:	00004298 	muleq	r0, r8, r2
    46f4:	01f30004 	mvnseq	r0, r4
    46f8:	00009f51 	andeq	r9, r0, r1, asr pc
    46fc:	00000000 	andeq	r0, r0, r0
    4700:	41960000 	orrsmi	r0, r6, r0
    4704:	419a0000 	orrsmi	r0, sl, r0
    4708:	00010000 	andeq	r0, r1, r0
    470c:	00419a50 	subeq	r9, r1, r0, asr sl
    4710:	00419d00 	subeq	r9, r1, r0, lsl #26
    4714:	52000100 	andpl	r0, r0, #0, 2
    4718:	000041a2 	andeq	r4, r0, r2, lsr #3
    471c:	000041a6 	andeq	r4, r0, r6, lsr #3
    4720:	d0500001 	subsle	r0, r0, r1
    4724:	d2000041 	andle	r0, r0, #65	; 0x41
    4728:	01000041 	tsteq	r0, r1, asr #32
    472c:	41d25000 	bicsmi	r5, r2, r0
    4730:	41d50000 	bicsmi	r0, r5, r0
    4734:	00010000 	andeq	r0, r1, r0
    4738:	0041de52 	subeq	sp, r1, r2, asr lr
    473c:	0041e000 	subeq	lr, r1, r0
    4740:	50000100 	andpl	r0, r0, r0, lsl #2
    4744:	000041e0 	andeq	r4, r0, r0, ror #3
    4748:	000041e3 	andeq	r4, r0, r3, ror #3
    474c:	ee520001 	cdp	0, 5, cr0, cr2, cr1, {0}
    4750:	f0000041 			; <UNDEFINED> instruction: 0xf0000041
    4754:	01000041 	tsteq	r0, r1, asr #32
    4758:	41f05000 	mvnsmi	r5, r0
    475c:	41f30000 	mvnsmi	r0, r0
    4760:	00010000 	andeq	r0, r1, r0
    4764:	0041fa52 	subeq	pc, r1, r2, asr sl	; <UNPREDICTABLE>
    4768:	0041fc00 	subeq	pc, r1, r0, lsl #24
    476c:	50000100 	andpl	r0, r0, r0, lsl #2
    4770:	0000420c 	andeq	r4, r0, ip, lsl #4
    4774:	00004210 	andeq	r4, r0, r0, lsl r2
    4778:	1e500001 	cdpne	0, 5, cr0, cr0, cr1, {0}
    477c:	20000042 	andcs	r0, r0, r2, asr #32
    4780:	01000042 	tsteq	r0, r2, asr #32
    4784:	42205000 	eormi	r5, r0, #0
    4788:	42230000 	eormi	r0, r3, #0
    478c:	00010000 	andeq	r0, r1, r0
    4790:	00422a52 	subeq	r2, r2, r2, asr sl
    4794:	00422c00 	subeq	r2, r2, r0, lsl #24
    4798:	50000100 	andpl	r0, r0, r0, lsl #2
    479c:	0000423c 	andeq	r4, r0, ip, lsr r2
    47a0:	0000423e 	andeq	r4, r0, lr, lsr r2
    47a4:	4e500001 	cdpmi	0, 5, cr0, cr0, cr1, {0}
    47a8:	52000042 	andpl	r0, r0, #66	; 0x42
    47ac:	01000042 	tsteq	r0, r2, asr #32
    47b0:	42665000 	rsbmi	r5, r6, #0
    47b4:	42680000 	rsbmi	r0, r8, #0
    47b8:	00010000 	andeq	r0, r1, r0
    47bc:	00426850 	subeq	r6, r2, r0, asr r8
    47c0:	00426b00 	subeq	r6, r2, r0, lsl #22
    47c4:	52000100 	andpl	r0, r0, #0, 2
	...
    47d0:	000041be 			; <UNDEFINED> instruction: 0x000041be
    47d4:	000041c4 	andeq	r4, r0, r4, asr #3
    47d8:	00720007 	rsbseq	r0, r2, r7
    47dc:	1a3fff0a 	bne	100440c <__ccfg+0xfe4464>
    47e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    47e4:	00000000 	andeq	r0, r0, r0
    47e8:	0042b200 	subeq	fp, r2, r0, lsl #4
    47ec:	0042bc00 	subeq	fp, r2, r0, lsl #24
    47f0:	73000900 	movwvc	r0, #2304	; 0x900
    47f4:	00040c00 	andeq	r0, r4, r0, lsl #24
    47f8:	9f212000 	svcls	0x00212000
	...
    4804:	000042fc 	strdeq	r4, [r0], -ip
    4808:	00004304 	andeq	r4, r0, r4, lsl #6
    480c:	04500001 	ldrbeq	r0, [r0], #-1
    4810:	24000043 	strcs	r0, [r0], #-67	; 0xffffffbd
    4814:	04000043 	streq	r0, [r0], #-67	; 0xffffffbd
    4818:	5001f300 	andpl	pc, r1, r0, lsl #6
    481c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4820:	00000000 	andeq	r0, r0, r0
    4824:	00432400 	subeq	r2, r3, r0, lsl #8
    4828:	00434c00 	subeq	r4, r3, r0, lsl #24
    482c:	50000100 	andpl	r0, r0, r0, lsl #2
    4830:	0000434c 	andeq	r4, r0, ip, asr #6
    4834:	0000438c 	andeq	r4, r0, ip, lsl #7
    4838:	8c540001 	mrrchi	0, 0, r0, r4, cr1
    483c:	94000043 	strls	r0, [r0], #-67	; 0xffffffbd
    4840:	01000043 	tsteq	r0, r3, asr #32
    4844:	43945000 	orrsmi	r5, r4, #0
    4848:	43de0000 	bicsmi	r0, lr, #0
    484c:	00010000 	andeq	r0, r1, r0
    4850:	0043de54 	subeq	sp, r3, r4, asr lr
    4854:	00441a00 	subeq	r1, r4, r0, lsl #20
    4858:	f3000400 	vshl.u8	d0, d0, d0
    485c:	1a9f5001 	bne	fe7d8868 <_estack+0xde7d3868>
    4860:	1e000044 	cdpne	0, 0, cr0, cr0, cr4, {2}
    4864:	01000044 	tsteq	r0, r4, asr #32
    4868:	441e5400 	ldrmi	r5, [lr], #-1024	; 0xfffffc00
    486c:	44740000 	ldrbtmi	r0, [r4], #-0
    4870:	00040000 	andeq	r0, r4, r0
    4874:	9f5001f3 	svcls	0x005001f3
	...
    4880:	0000433a 	andeq	r4, r0, sl, lsr r3
    4884:	0000437c 	andeq	r4, r0, ip, ror r3
    4888:	00530001 	subseq	r0, r3, r1
    488c:	00000000 	andeq	r0, r0, r0
    4890:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    4894:	b4000043 	strlt	r0, [r0], #-67	; 0xffffffbd
    4898:	01000043 	tsteq	r0, r3, asr #32
    489c:	00005000 	andeq	r5, r0, r0
    48a0:	00000000 	andeq	r0, r0, r0
    48a4:	43de0000 	bicsmi	r0, lr, #0
    48a8:	43e00000 	mvnmi	r0, #0
    48ac:	00010000 	andeq	r0, r1, r0
    48b0:	0043e050 	subeq	lr, r3, r0, asr r0
    48b4:	0043f400 	subeq	pc, r3, r0, lsl #8
    48b8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    48c4:	000043f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    48c8:	00004414 	andeq	r4, r0, r4, lsl r4
    48cc:	00540001 	subseq	r0, r4, r1
	...
    48dc:	01000000 	mrseq	r0, (UNDEF: 0)
    48e0:	00005500 	andeq	r5, r0, r0, lsl #10
    48e4:	00000000 	andeq	r0, r0, r0
    48e8:	00030000 	andeq	r0, r3, r0
    48ec:	009f7f75 	addseq	r7, pc, r5, ror pc	; <UNPREDICTABLE>
    48f0:	00000000 	andeq	r0, r0, r0
    48f4:	01000000 	mrseq	r0, (UNDEF: 0)
    48f8:	00005500 	andeq	r5, r0, r0, lsl #10
    48fc:	00000000 	andeq	r0, r0, r0
    4900:	44740000 	ldrbtmi	r0, [r4], #-0
    4904:	44930000 	ldrmi	r0, [r3], #0
    4908:	00010000 	andeq	r0, r1, r0
    490c:	00449350 	subeq	r9, r4, r0, asr r3
    4910:	00455400 	subeq	r5, r5, r0, lsl #8
    4914:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    4918:	00004554 	andeq	r4, r0, r4, asr r5
    491c:	00004694 	muleq	r0, r4, r6
    4920:	01f30004 	mvnseq	r0, r4
    4924:	00009f50 	andeq	r9, r0, r0, asr pc
    4928:	00000000 	andeq	r0, r0, r0
    492c:	44940000 	ldrmi	r0, [r4], #0
    4930:	46140000 	ldrmi	r0, [r4], -r0
    4934:	00010000 	andeq	r0, r1, r0
    4938:	00461650 	subeq	r1, r6, r0, asr r6
    493c:	00465000 	subeq	r5, r6, r0
    4940:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    494c:	0000453c 	andeq	r4, r0, ip, lsr r5
    4950:	00004540 	andeq	r4, r0, r0, asr #10
    4954:	71700003 	cmnvc	r0, r3
    4958:	0045409f 	umaaleq	r4, r5, pc, r0	; <UNPREDICTABLE>
    495c:	00454600 	subeq	r4, r5, r0, lsl #12
    4960:	51000100 	mrspl	r0, (UNDEF: 16)
    4964:	00004546 	andeq	r4, r0, r6, asr #10
    4968:	00004566 	andeq	r4, r0, r6, ror #10
    496c:	54910002 	ldrpl	r0, [r1], #2
    4970:	00004566 	andeq	r4, r0, r6, ror #10
    4974:	00004572 	andeq	r4, r0, r2, ror r5
    4978:	72510001 	subsvc	r0, r1, #1
    497c:	74000045 	strvc	r0, [r0], #-69	; 0xffffffbb
    4980:	02000045 	andeq	r0, r0, #69	; 0x45
    4984:	74549100 	ldrbvc	r9, [r4], #-256	; 0xffffff00
    4988:	76000045 	strvc	r0, [r0], -r5, asr #32
    498c:	01000045 	tsteq	r0, r5, asr #32
    4990:	45765100 	ldrbmi	r5, [r6, #-256]!	; 0xffffff00
    4994:	461c0000 	ldrmi	r0, [ip], -r0
    4998:	00020000 	andeq	r0, r2, r0
    499c:	00005491 	muleq	r0, r1, r4
    49a0:	00000000 	andeq	r0, r0, r0
    49a4:	44a00000 	strtmi	r0, [r0], #0
    49a8:	44fa0000 	ldrbtmi	r0, [sl], #0
    49ac:	00010000 	andeq	r0, r1, r0
    49b0:	00450251 	subeq	r0, r5, r1, asr r2
    49b4:	00450400 	subeq	r0, r5, r0, lsl #8
    49b8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    49c4:	000044f2 	strdeq	r4, [r0], -r2
    49c8:	00004500 	andeq	r4, r0, r0, lsl #10
    49cc:	02520001 	subseq	r0, r2, #1
    49d0:	e4000045 	str	r0, [r0], #-69	; 0xffffffbb
    49d4:	01000045 	tsteq	r0, r5, asr #32
    49d8:	00005200 	andeq	r5, r0, r0, lsl #4
    49dc:	00000000 	andeq	r0, r0, r0
    49e0:	44f20000 	ldrbtmi	r0, [r2], #0
    49e4:	45da0000 	ldrbmi	r0, [sl]
    49e8:	00010000 	andeq	r0, r1, r0
    49ec:	00000053 	andeq	r0, r0, r3, asr r0
    49f0:	00000000 	andeq	r0, r0, r0
    49f4:	00449800 	subeq	r9, r4, r0, lsl #16
    49f8:	0045ee00 	subeq	lr, r5, r0, lsl #28
    49fc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    4a08:	00004494 	muleq	r0, r4, r4
    4a0c:	0000451c 	andeq	r4, r0, ip, lsl r5
    4a10:	9f300002 	svcls	0x00300002
    4a14:	0000451c 	andeq	r4, r0, ip, lsl r5
    4a18:	00004650 	andeq	r4, r0, r0, asr r6
    4a1c:	00540001 	subseq	r0, r4, r1
    4a20:	00000000 	andeq	r0, r0, r0
    4a24:	14000000 	strne	r0, [r0], #-0
    4a28:	1e000045 	cdpne	0, 0, cr0, cr0, cr5, {2}
    4a2c:	01000045 	tsteq	r0, r5, asr #32
    4a30:	00005100 	andeq	r5, r0, r0, lsl #2
    4a34:	00000000 	andeq	r0, r0, r0
    4a38:	453c0000 	ldrmi	r0, [ip, #-0]!
    4a3c:	458c0000 	strmi	r0, [ip]
    4a40:	00020000 	andeq	r0, r2, r0
    4a44:	458c9f30 	strmi	r9, [ip, #3888]	; 0xf30
    4a48:	45ac0000 	strmi	r0, [ip, #0]!
    4a4c:	00010000 	andeq	r0, r1, r0
    4a50:	0045ac51 	subeq	sl, r5, r1, asr ip
    4a54:	0045b200 	subeq	fp, r5, r0, lsl #4
    4a58:	30000200 	andcc	r0, r0, r0, lsl #4
    4a5c:	0045b29f 	umaaleq	fp, r5, pc, r2	; <UNPREDICTABLE>
    4a60:	0045ec00 	subeq	lr, r5, r0, lsl #24
    4a64:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4a70:	00004568 	andeq	r4, r0, r8, ror #10
    4a74:	0000456c 	andeq	r4, r0, ip, ror #10
    4a78:	745e0001 	ldrbvc	r0, [lr], #-1
    4a7c:	76000045 	strvc	r0, [r0], -r5, asr #32
    4a80:	01000045 	tsteq	r0, r5, asr #32
    4a84:	45765e00 	ldrbmi	r5, [r6, #-3584]!	; 0xfffff200
    4a88:	457c0000 	ldrbmi	r0, [ip, #-0]!
    4a8c:	00010000 	andeq	r0, r1, r0
    4a90:	00457c51 	subeq	r7, r5, r1, asr ip
    4a94:	00458400 	subeq	r8, r5, r0, lsl #8
    4a98:	71000300 	mrsvc	r0, LR_irq
    4a9c:	00009f7f 	andeq	r9, r0, pc, ror pc
    4aa0:	00000000 	andeq	r0, r0, r0
    4aa4:	453c0000 	ldrmi	r0, [ip, #-0]!
    4aa8:	45660000 	strbmi	r0, [r6, #-0]!
    4aac:	00020000 	andeq	r0, r2, r0
    4ab0:	45669f30 	strbmi	r9, [r6, #-3888]!	; 0xfffff0d0
    4ab4:	45700000 	ldrbmi	r0, [r0, #-0]!
    4ab8:	00010000 	andeq	r0, r1, r0
    4abc:	0045705e 	subeq	r7, r5, lr, asr r0
    4ac0:	00457200 	subeq	r7, r5, r0, lsl #4
    4ac4:	71000500 	tstvc	r0, r0, lsl #10
    4ac8:	9f263800 	svcls	0x00263800
    4acc:	00004572 	andeq	r4, r0, r2, ror r5
    4ad0:	00004574 	andeq	r4, r0, r4, ror r5
    4ad4:	54910006 	ldrpl	r0, [r1], #6
    4ad8:	9f263806 	svcls	0x00263806
    4adc:	00004574 	andeq	r4, r0, r4, ror r5
    4ae0:	00004576 	andeq	r4, r0, r6, ror r5
    4ae4:	765e0001 	ldrbvc	r0, [lr], -r1
    4ae8:	ac000045 	stcge	0, cr0, [r0], {69}	; 0x45
    4aec:	06000045 	streq	r0, [r0], -r5, asr #32
    4af0:	06549100 	ldrbeq	r9, [r4], -r0, lsl #2
    4af4:	ac9f2638 	ldcge	6, cr2, [pc], {56}	; 0x38
    4af8:	b2000045 	andlt	r0, r0, #69	; 0x45
    4afc:	02000045 	andeq	r0, r0, #69	; 0x45
    4b00:	b29f3000 	addslt	r3, pc, #0
    4b04:	1c000045 	stcne	0, cr0, [r0], {69}	; 0x45
    4b08:	01000046 	tsteq	r0, r6, asr #32
    4b0c:	00005e00 	andeq	r5, r0, r0, lsl #28
    4b10:	00000000 	andeq	r0, r0, r0
    4b14:	45880000 	strmi	r0, [r8]
    4b18:	45ac0000 	strmi	r0, [ip, #0]!
    4b1c:	00010000 	andeq	r0, r1, r0
    4b20:	0000005c 	andeq	r0, r0, ip, asr r0
    4b24:	00000000 	andeq	r0, r0, r0
    4b28:	0045b600 	subeq	fp, r5, r0, lsl #12
    4b2c:	00461c00 	subeq	r1, r6, r0, lsl #24
    4b30:	5a000100 	bpl	4f38 <port_confs+0x30>
	...
    4b3c:	000045ba 			; <UNDEFINED> instruction: 0x000045ba
    4b40:	000045f6 	strdeq	r4, [r0], -r6
    4b44:	f65c0001 			; <UNDEFINED> instruction: 0xf65c0001
    4b48:	fa000045 	blx	4c64 <__aeabi_lmul+0x360>
    4b4c:	01000045 	tsteq	r0, r5, asr #32
    4b50:	00005100 	andeq	r5, r0, r0, lsl #2
    4b54:	00000000 	andeq	r0, r0, r0
    4b58:	45fa0000 	ldrbmi	r0, [sl, #0]!
    4b5c:	46040000 	strmi	r0, [r4], -r0
    4b60:	00170000 	andseq	r0, r7, r0
    4b64:	40120071 	andsmi	r0, r2, r1, ror r0
    4b68:	0a22244b 	beq	88dc9c <__ccfg+0x86dcf4>
    4b6c:	1416ffff 	ldrne	pc, [r6], #-4095	; 0xfffff001
    4b70:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4b74:	0001282d 	andeq	r2, r1, sp, lsr #16
    4b78:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    4b7c:	00000000 	andeq	r0, r0, r0
    4b80:	24000000 	strcs	r0, [r0], #-0
    4b84:	30000046 	andcc	r0, r0, r6, asr #32
    4b88:	02000046 	andeq	r0, r0, #70	; 0x46
    4b8c:	309f3000 	addscc	r3, pc, r0
    4b90:	50000046 	andpl	r0, r0, r6, asr #32
    4b94:	01000046 	tsteq	r0, r6, asr #32
    4b98:	00005100 	andeq	r5, r0, r0, lsl #2
    4b9c:	00000000 	andeq	r0, r0, r0
    4ba0:	46260000 	strtmi	r0, [r6], -r0
    4ba4:	46280000 	strtmi	r0, [r8], -r0
    4ba8:	00010000 	andeq	r0, r1, r0
    4bac:	00462853 	subeq	r2, r6, r3, asr r8
    4bb0:	00463000 	subeq	r3, r6, r0
    4bb4:	4f000200 	svcmi	0x00000200
    4bb8:	0046309f 	umaaleq	r3, r6, pc, r0	; <UNPREDICTABLE>
    4bbc:	00464000 	subeq	r4, r6, r0
    4bc0:	53000100 	movwpl	r0, #256	; 0x100
    4bc4:	00004640 	andeq	r4, r0, r0, asr #12
    4bc8:	00004644 	andeq	r4, r0, r4, asr #12
    4bcc:	00730005 	rsbseq	r0, r3, r5
    4bd0:	449f2534 	ldrmi	r2, [pc], #1332	; 4bd8 <__aeabi_lmul+0x2d4>
    4bd4:	48000046 	stmdami	r0, {r1, r2, r6}
    4bd8:	01000046 	tsteq	r0, r6, asr #32
    4bdc:	00005300 	andeq	r5, r0, r0, lsl #6
    4be0:	00000000 	andeq	r0, r0, r0
    4be4:	453c0000 	ldrmi	r0, [ip, #-0]!
    4be8:	461c0000 	ldrmi	r0, [ip], -r0
    4bec:	00060000 	andeq	r0, r6, r0
    4bf0:	00139c0c 	andseq	r9, r3, ip, lsl #24
    4bf4:	00009f50 	andeq	r9, r0, r0, asr pc
    4bf8:	00000000 	andeq	r0, r0, r0
    4bfc:	44a80000 	strtmi	r0, [r8], #0
    4c00:	44b40000 	ldrtmi	r0, [r4], #0
    4c04:	00010000 	andeq	r0, r1, r0
    4c08:	00000053 	andeq	r0, r0, r3, asr r0
    4c0c:	00000000 	andeq	r0, r0, r0
    4c10:	0044c800 	subeq	ip, r4, r0, lsl #16
    4c14:	0044d400 	subeq	sp, r4, r0, lsl #8
    4c18:	52000100 	andpl	r0, r0, #0, 2
	...
    4c24:	000044de 	ldrdeq	r4, [r0], -lr
    4c28:	000044ea 	andeq	r4, r0, sl, ror #9
    4c2c:	00520001 	subseq	r0, r2, r1
    4c30:	00000000 	andeq	r0, r0, r0
    4c34:	ea000000 	b	4c3c <__aeabi_lmul+0x338>
    4c38:	da000044 	ble	4d50 <__aeabi_lmul+0x44c>
    4c3c:	01000045 	tsteq	r0, r5, asr #32
    4c40:	00005300 	andeq	r5, r0, r0, lsl #6
    4c44:	00000000 	andeq	r0, r0, r0
    4c48:	46a20000 	strtmi	r0, [r2], r0
    4c4c:	46ac0000 	strtmi	r0, [ip], r0
    4c50:	00010000 	andeq	r0, r1, r0
    4c54:	0046ac50 	subeq	sl, r6, r0, asr ip
    4c58:	0046b600 	subeq	fp, r6, r0, lsl #12
    4c5c:	70000e00 	andvc	r0, r0, r0, lsl #28
    4c60:	80091200 	andhi	r1, r9, r0, lsl #4
    4c64:	282b1416 	stmdacs	fp!, {r1, r2, r4, sl, ip}
    4c68:	13160001 	tstne	r6, #1
    4c6c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4c70:	00000000 	andeq	r0, r0, r0
    4c74:	00469c00 	subeq	r9, r6, r0, lsl #24
    4c78:	0046c800 	subeq	ip, r6, r0, lsl #16
    4c7c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4c88:	000046cc 	andeq	r4, r0, ip, asr #13
    4c8c:	000046d2 	ldrdeq	r4, [r0], -r2
    4c90:	00730015 	rsbseq	r0, r3, r5, lsl r0
    4c94:	244b4012 	strbcs	r4, [fp], #-18	; 0xffffffee
    4c98:	14164f22 	ldrne	r4, [r6], #-3874	; 0xfffff0de
    4c9c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4ca0:	0001282d 	andeq	r2, r1, sp, lsr #16
    4ca4:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    4ca8:	00000000 	andeq	r0, r0, r0
    4cac:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    4cb0:	e2000046 	and	r0, r0, #70	; 0x46
    4cb4:	17000046 	strne	r0, [r0, -r6, asr #32]
    4cb8:	12007400 	andne	r7, r0, #0, 8
    4cbc:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4cc0:	16ffff0a 	ldrbtne	pc, [pc], sl, lsl #30	; <UNPREDICTABLE>
    4cc4:	244b4014 	strbcs	r4, [fp], #-20	; 0xffffffec
    4cc8:	01282d22 			; <UNDEFINED> instruction: 0x01282d22
    4ccc:	9f131600 	svcls	0x00131600
	...
    4ce0:	00520001 	subseq	r0, r2, r1
	...
    4cf0:	01000000 	mrseq	r0, (UNDEF: 0)
    4cf4:	00005000 	andeq	r5, r0, r0
	...
    4d04:	00010000 	andeq	r0, r1, r0
    4d08:	00000051 	andeq	r0, r0, r1, asr r0
	...
    4d18:	53000100 	movwpl	r0, #256	; 0x100
	...
    4d2c:	00700016 	rsbseq	r0, r0, r6, lsl r0
    4d30:	0070ff08 	rsbseq	pc, r0, r8, lsl #30
    4d34:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4d38:	0000050c 	andeq	r0, r0, ip, lsl #10
    4d3c:	01282d80 	smlawbeq	r8, r0, sp, r2
    4d40:	9f131600 	svcls	0x00131600
	...
    4d4c:	0000470c 	andeq	r4, r0, ip, lsl #14
    4d50:	0000474e 	andeq	r4, r0, lr, asr #14
    4d54:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    4d58:	00474e9f 	umaaleq	r4, r7, pc, lr	; <UNPREDICTABLE>
    4d5c:	00475800 	subeq	r5, r7, r0, lsl #16
    4d60:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4d6c:	00004718 	andeq	r4, r0, r8, lsl r7
    4d70:	00004726 	andeq	r4, r0, r6, lsr #14
    4d74:	2a500001 	bcs	1404d80 <__ccfg+0x13e4dd8>
    4d78:	46000047 	strmi	r0, [r0], -r7, asr #32
    4d7c:	01000047 	tsteq	r0, r7, asr #32
    4d80:	47485000 	strbmi	r5, [r8, -r0]
    4d84:	474a0000 	strbmi	r0, [sl, -r0]
    4d88:	00010000 	andeq	r0, r1, r0
    4d8c:	00474c50 	subeq	r4, r7, r0, asr ip
    4d90:	00474e00 	subeq	r4, r7, r0, lsl #28
    4d94:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4da8:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    4dac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4db0:	00000000 	andeq	r0, r0, r0
    4db4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4dc8:	00540001 	subseq	r0, r4, r1
    4dcc:	00000000 	andeq	r0, r0, r0
    4dd0:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    4dd4:	92000047 	andls	r0, r0, #71	; 0x47
    4dd8:	03000047 	movweq	r0, #71	; 0x47
    4ddc:	9fff0900 	svcls	0x00ff0900
    4de0:	00004792 	muleq	r0, r2, r7
    4de4:	00004796 	muleq	r0, r6, r7
    4de8:	9f440002 	svcls	0x00440002
    4dec:	00004796 	muleq	r0, r6, r7
    4df0:	0000479a 	muleq	r0, sl, r7
    4df4:	9f450002 	svcls	0x00450002
    4df8:	0000479a 	muleq	r0, sl, r7
    4dfc:	000047b8 			; <UNDEFINED> instruction: 0x000047b8
    4e00:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    4e04:	0047b89f 	umaaleq	fp, r7, pc, r8	; <UNPREDICTABLE>
    4e08:	0047ba00 	subeq	fp, r7, r0, lsl #20
    4e0c:	50000100 	andpl	r0, r0, r0, lsl #2
    4e10:	000047ba 			; <UNDEFINED> instruction: 0x000047ba
    4e14:	000047bc 			; <UNDEFINED> instruction: 0x000047bc
    4e18:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    4e1c:	0047bc9f 	umaaleq	fp, r7, pc, ip	; <UNPREDICTABLE>
    4e20:	0047c400 	subeq	ip, r7, r0, lsl #8
    4e24:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4e30:	00004768 	andeq	r4, r0, r8, ror #14
    4e34:	000047c0 	andeq	r4, r0, r0, asr #15
    4e38:	00540001 	subseq	r0, r4, r1
    4e3c:	00000000 	andeq	r0, r0, r0
    4e40:	dc000000 	stcle	0, cr0, [r0], {-0}
    4e44:	e5000047 	str	r0, [r0, #-71]	; 0xffffffb9
    4e48:	01000047 	tsteq	r0, r7, asr #32
    4e4c:	47e55000 	strbmi	r5, [r5, r0]!
    4e50:	47fa0000 	ldrbmi	r0, [sl, r0]!
    4e54:	00010000 	andeq	r0, r1, r0
    4e58:	0047fa54 	subeq	pc, r7, r4, asr sl	; <UNPREDICTABLE>
    4e5c:	0047fe00 	subeq	pc, r7, r0, lsl #28
    4e60:	f3000400 	vshl.u8	d0, d0, d0
    4e64:	fe9f5001 	cdp2	0, 9, cr5, cr15, cr1, {0}
    4e68:	00000047 	andeq	r0, r0, r7, asr #32
    4e6c:	01000048 	tsteq	r0, r8, asr #32
    4e70:	48005400 	stmdami	r0, {sl, ip, lr}
    4e74:	48040000 	stmdami	r4, {}	; <UNPREDICTABLE>
    4e78:	00040000 	andeq	r0, r4, r0
    4e7c:	9f5001f3 	svcls	0x005001f3
	...
    4e88:	000047dc 	ldrdeq	r4, [r0], -ip
    4e8c:	000047e5 	andeq	r4, r0, r5, ror #15
    4e90:	e5510001 	ldrb	r0, [r1, #-1]
    4e94:	fa000047 	blx	4fb8 <__pi_hex_enc_table+0x43>
    4e98:	01000047 	tsteq	r0, r7, asr #32
    4e9c:	47fa5500 	ldrbmi	r5, [sl, r0, lsl #10]!
    4ea0:	47fe0000 	ldrbmi	r0, [lr, r0]!
    4ea4:	00040000 	andeq	r0, r4, r0
    4ea8:	9f5101f3 	svcls	0x005101f3
    4eac:	000047fe 	strdeq	r4, [r0], -lr
    4eb0:	00004800 	andeq	r4, r0, r0, lsl #16
    4eb4:	00550001 	subseq	r0, r5, r1
    4eb8:	04000048 	streq	r0, [r0], #-72	; 0xffffffb8
    4ebc:	04000048 	streq	r0, [r0], #-72	; 0xffffffb8
    4ec0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4ec4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4ec8:	00000000 	andeq	r0, r0, r0
    4ecc:	0047e600 	subeq	lr, r7, r0, lsl #12
    4ed0:	0047fd00 	subeq	pc, r7, r0, lsl #26
    4ed4:	70000500 	andvc	r0, r0, r0, lsl #10
    4ed8:	9f293000 	svcls	0x00293000
    4edc:	000047fe 	strdeq	r4, [r0], -lr
    4ee0:	00004804 	andeq	r4, r0, r4, lsl #16
    4ee4:	00700005 	rsbseq	r0, r0, r5
    4ee8:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
    4eec:	00000000 	andeq	r0, r0, r0
    4ef0:	04000000 	streq	r0, [r0], #-0
    4ef4:	06000048 	streq	r0, [r0], -r8, asr #32
    4ef8:	01000048 	tsteq	r0, r8, asr #32
    4efc:	48065000 	stmdami	r6, {ip, lr}
    4f00:	480c0000 	stmdami	ip, {}	; <UNPREDICTABLE>
    4f04:	00040000 	andeq	r0, r4, r0
    4f08:	9f5001f3 	svcls	0x005001f3
	...
    4f14:	00004804 	andeq	r4, r0, r4, lsl #16
    4f18:	00004808 	andeq	r4, r0, r8, lsl #16
    4f1c:	08510001 	ldmdaeq	r1, {r0}^
    4f20:	0c000048 	stceq	0, cr0, [r0], {72}	; 0x48
    4f24:	04000048 	streq	r0, [r0], #-72	; 0xffffffb8
    4f28:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4f2c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4f30:	00000000 	andeq	r0, r0, r0
    4f34:	00480400 	subeq	r0, r8, r0, lsl #8
    4f38:	00480b00 	subeq	r0, r8, r0, lsl #22
    4f3c:	52000100 	andpl	r0, r0, #0, 2
    4f40:	0000480b 	andeq	r4, r0, fp, lsl #16
    4f44:	0000480c 	andeq	r4, r0, ip, lsl #16
    4f48:	01f30004 	mvnseq	r0, r4
    4f4c:	00009f52 	andeq	r9, r0, r2, asr pc
	...
    4f5c:	00010000 	andeq	r0, r1, r0
    4f60:	00000050 	andeq	r0, r0, r0, asr r0
    4f64:	00000000 	andeq	r0, r0, r0
    4f68:	f3000400 	vshl.u8	d0, d0, d0
    4f6c:	009f5001 	addseq	r5, pc, r1
	...
    4f7c:	01000000 	mrseq	r0, (UNDEF: 0)
    4f80:	00005100 	andeq	r5, r0, r0, lsl #2
    4f84:	00000000 	andeq	r0, r0, r0
    4f88:	00040000 	andeq	r0, r4, r0
    4f8c:	9f5101f3 	svcls	0x005101f3
	...
    4fa0:	00520001 	subseq	r0, r2, r1
    4fa4:	00000000 	andeq	r0, r0, r0
    4fa8:	04000000 	streq	r0, [r0], #-0
    4fac:	5201f300 	andpl	pc, r1, #0, 6
    4fb0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4fb4:	00000000 	andeq	r0, r0, r0
    4fb8:	52000100 	andpl	r0, r0, #0, 2
	...
    4fc4:	01f30015 	mvnseq	r0, r5, lsl r0
    4fc8:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    4fcc:	01f35201 	mvnseq	r5, r1, lsl #4
    4fd0:	30254052 	eorcc	r4, r5, r2, asr r0
    4fd4:	0001282e 	andeq	r2, r1, lr, lsr #16
    4fd8:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    4fe8:	01000000 	mrseq	r0, (UNDEF: 0)
    4fec:	00005300 	andeq	r5, r0, r0, lsl #6
    4ff0:	00000000 	andeq	r0, r0, r0
    4ff4:	00040000 	andeq	r0, r4, r0
    4ff8:	9f5301f3 	svcls	0x005301f3
	...
    500c:	80700004 	rsbshi	r0, r0, r4
    5010:	00009f04 	andeq	r9, r0, r4, lsl #30
    5014:	00000000 	andeq	r0, r0, r0
    5018:	000d0000 	andeq	r0, sp, r0
    501c:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    5020:	5001f324 	andpl	pc, r1, r4, lsr #6
    5024:	04802322 	streq	r2, [r0], #802	; 0x322
    5028:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    502c:	00000000 	andeq	r0, r0, r0
    5030:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    503c:	01f30052 	mvnseq	r0, r2, asr r0
    5040:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    5044:	23225001 			; <UNDEFINED> instruction: 0x23225001
    5048:	01f30480 	mvnseq	r0, r0, lsl #9
    504c:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    5050:	f3225001 	vhadd.u32	d5, d2, d1
    5054:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    5058:	01282930 			; <UNDEFINED> instruction: 0x01282930
    505c:	23131600 	tstcs	r3, #0, 12
    5060:	01f30484 	mvnseq	r0, r4, lsl #9
    5064:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    5068:	23225001 			; <UNDEFINED> instruction: 0x23225001
    506c:	01f30480 	mvnseq	r0, r0, lsl #9
    5070:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    5074:	f3225001 	vhadd.u32	d5, d2, d1
    5078:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    507c:	01282930 			; <UNDEFINED> instruction: 0x01282930
    5080:	f3131600 	vmax.u16	d1, d3, d0
    5084:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    5088:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    508c:	9f131600 	svcls	0x00131600
	...
    50a0:	00510001 	subseq	r0, r1, r1
    50a4:	00000000 	andeq	r0, r0, r0
    50a8:	2f000000 	svccs	0x00000000
    50ac:	01f33000 	mvnseq	r3, r0
    50b0:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    50b4:	01f35201 	mvnseq	r5, r1, lsl #4
    50b8:	30254052 	eorcc	r4, r5, r2, asr r0
    50bc:	0001282e 	andeq	r2, r1, lr, lsr #16
    50c0:	01f31316 	mvnseq	r1, r6, lsl r3
    50c4:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    50c8:	2e305301 	cdpcs	3, 3, cr5, cr0, cr1, {0}
    50cc:	16000128 	strne	r0, [r0], -r8, lsr #2
    50d0:	5301f313 	movwpl	pc, #4883	; 0x1313	; <UNPREDICTABLE>
    50d4:	01282930 			; <UNDEFINED> instruction: 0x01282930
    50d8:	9f131600 	svcls	0x00131600
	...
    50ec:	00500001 	subseq	r0, r0, r1
    50f0:	00000000 	andeq	r0, r0, r0
    50f4:	04000000 	streq	r0, [r0], #-0
    50f8:	5001f300 	andpl	pc, r1, r0, lsl #6
    50fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    510c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    5118:	01f30004 	mvnseq	r0, r4
    511c:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    512c:	00010000 	andeq	r0, r1, r0
    5130:	00000052 	andeq	r0, r0, r2, asr r0
    5134:	00000000 	andeq	r0, r0, r0
    5138:	f3000400 	vshl.u8	d0, d0, d0
    513c:	009f5201 	addseq	r5, pc, r1, lsl #4
    5140:	00000000 	andeq	r0, r0, r0
    5144:	01000000 	mrseq	r0, (UNDEF: 0)
    5148:	00005200 	andeq	r5, r0, r0, lsl #4
    514c:	00000000 	andeq	r0, r0, r0
    5150:	001b0000 	andseq	r0, fp, r0
    5154:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    5158:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    515c:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    5160:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    5164:	8000000f 	andhi	r0, r0, pc
    5168:	0001282b 	andeq	r2, r1, fp, lsr #16
    516c:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    517c:	01000000 	mrseq	r0, (UNDEF: 0)
    5180:	00005300 	andeq	r5, r0, r0, lsl #6
    5184:	00000000 	andeq	r0, r0, r0
    5188:	00040000 	andeq	r0, r4, r0
    518c:	9f5301f3 	svcls	0x005301f3
	...
    5198:	00530001 	subseq	r0, r3, r1
    519c:	00000000 	andeq	r0, r0, r0
    51a0:	1b000000 	blne	51a8 <patchGenfskRfe+0x108>
    51a4:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    51a8:	01f31c40 	mvnseq	r1, r0, asr #24
    51ac:	5301f353 	movwpl	pc, #4947	; 0x1353	; <UNPREDICTABLE>
    51b0:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    51b4:	00000f0c 	andeq	r0, r0, ip, lsl #30
    51b8:	01282b80 	smlawbeq	r8, r0, fp, r2
    51bc:	9f131600 	svcls	0x00131600
	...
    51d0:	00910002 	addseq	r0, r1, r2
	...
    51dc:	007d0002 	rsbseq	r0, sp, r2
	...
    51f0:	80700004 	rsbshi	r0, r0, r4
    51f4:	00009f04 	andeq	r9, r0, r4, lsl #30
    51f8:	00000000 	andeq	r0, r0, r0
    51fc:	000d0000 	andeq	r0, sp, r0
    5200:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    5204:	5001f324 	andpl	pc, r1, r4, lsr #6
    5208:	04802322 	streq	r2, [r0], #802	; 0x322
    520c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5210:	00000000 	andeq	r0, r0, r0
    5214:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    5220:	01f30064 	mvnseq	r0, r4, rrx
    5224:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    5228:	23225001 			; <UNDEFINED> instruction: 0x23225001
    522c:	01f30480 	mvnseq	r0, r0, lsl #9
    5230:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    5234:	f3225001 	vhadd.u32	d5, d2, d1
    5238:	4b405301 	blmi	1019e44 <__ccfg+0xff9e9c>
    523c:	0f0c2224 	svceq	0x000c2224
    5240:	2c800000 	stccs	0, cr0, [r0], {0}
    5244:	16000128 	strne	r0, [r0], -r8, lsr #2
    5248:	04842313 	streq	r2, [r4], #787	; 0x313
    524c:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    5250:	5001f324 	andpl	pc, r1, r4, lsr #6
    5254:	04802322 	streq	r2, [r0], #802	; 0x322
    5258:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    525c:	5001f324 	andpl	pc, r1, r4, lsr #6
    5260:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    5264:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    5268:	00000f0c 	andeq	r0, r0, ip, lsl #30
    526c:	01282c80 	smlawbeq	r8, r0, ip, r2
    5270:	f3131600 	vmax.u16	d1, d3, d0
    5274:	4b405301 	blmi	1019e80 <__ccfg+0xff9ed8>
    5278:	0f0c2224 	svceq	0x000c2224
    527c:	2b800000 	blcs	fe005284 <_estack+0xde000284>
    5280:	16000128 	strne	r0, [r0], -r8, lsr #2
    5284:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    5294:	000a0000 	andeq	r0, sl, r0
    5298:	ff0a0074 			; <UNDEFINED> instruction: 0xff0a0074
    529c:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
    52a0:	00009f24 	andeq	r9, r0, r4, lsr #30
    52a4:	00000000 	andeq	r0, r0, r0
    52a8:	000c0000 	andeq	r0, ip, r0
    52ac:	0294007d 	addseq	r0, r4, #125	; 0x7d
    52b0:	1affff0a 	bne	4ee0 <__aeabi_lmul+0x5dc>
    52b4:	9f240073 	svcls	0x00240073
	...
    52c0:	007d0024 	rsbseq	r0, sp, r4, lsr #32
    52c4:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    52c8:	01f31aff 	ldrsheq	r1, [r3, #175]!	; 0xaf
    52cc:	f31c4053 	vqadd.u16	q2, q6, <illegal reg q1.5>
    52d0:	01f35301 	mvnseq	r5, r1, lsl #6
    52d4:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    52d8:	000f0c22 	andeq	r0, pc, r2, lsr #24
    52dc:	282b8000 	stmdacs	fp!, {pc}
    52e0:	13160001 	tstne	r6, #1
    52e4:	00009f24 	andeq	r9, r0, r4, lsr #30
	...
    52f4:	00010000 	andeq	r0, r1, r0
    52f8:	00000050 	andeq	r0, r0, r0, asr r0
    52fc:	00000000 	andeq	r0, r0, r0
    5300:	f3000400 	vshl.u8	d0, d0, d0
    5304:	009f5001 	addseq	r5, pc, r1
	...
    5314:	01000000 	mrseq	r0, (UNDEF: 0)
    5318:	00005100 	andeq	r5, r0, r0, lsl #2
    531c:	00000000 	andeq	r0, r0, r0
    5320:	00040000 	andeq	r0, r4, r0
    5324:	9f5101f3 	svcls	0x005101f3
	...
    5338:	00520001 	subseq	r0, r2, r1
    533c:	00000000 	andeq	r0, r0, r0
    5340:	01000000 	mrseq	r0, (UNDEF: 0)
    5344:	00005400 	andeq	r5, r0, r0, lsl #8
    5348:	00000000 	andeq	r0, r0, r0
    534c:	00150000 	andseq	r0, r5, r0
    5350:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    5354:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    5358:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    535c:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    5360:	13160001 	tstne	r6, #1
    5364:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5374:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    5380:	01f3001d 	mvnseq	r0, sp, lsl r0
    5384:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    5388:	f3022322 	vcgt.u8	d2, d2, d18
    538c:	01f35001 	mvnseq	r5, r1
    5390:	01f32251 	mvnseq	r2, r1, asr r2
    5394:	30254052 	eorcc	r4, r5, r2, asr r0
    5398:	0001282e 	andeq	r2, r1, lr, lsr #16
    539c:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    53ac:	06000000 	streq	r0, [r0], -r0
    53b0:	74007500 	strvc	r7, [r0], #-1280	; 0xfffffb00
    53b4:	009f1a00 	addseq	r1, pc, r0, lsl #20
	...
    53c4:	01000000 	mrseq	r0, (UNDEF: 0)
    53c8:	00005500 	andeq	r5, r0, r0, lsl #10
    53cc:	00000000 	andeq	r0, r0, r0
    53d0:	001d0000 	andseq	r0, sp, r0
    53d4:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    53d8:	23225101 			; <UNDEFINED> instruction: 0x23225101
    53dc:	5001f302 	andpl	pc, r1, r2, lsl #6
    53e0:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    53e4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    53e8:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    53ec:	13160001 	tstne	r6, #1
    53f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5400:	75000700 	strvc	r0, [r0, #-1792]	; 0xfffff900
    5404:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    5408:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
    5418:	00050000 	andeq	r0, r5, r0
    541c:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    5420:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5430:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    543c:	01f30004 	mvnseq	r0, r4
    5440:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    5450:	00010000 	andeq	r0, r1, r0
    5454:	00000051 	andeq	r0, r0, r1, asr r0
    5458:	00000000 	andeq	r0, r0, r0
    545c:	f3000400 	vshl.u8	d0, d0, d0
    5460:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    5470:	01000000 	mrseq	r0, (UNDEF: 0)
    5474:	00005200 	andeq	r5, r0, r0, lsl #4
    5478:	00000000 	andeq	r0, r0, r0
    547c:	00010000 	andeq	r0, r1, r0
    5480:	00000054 	andeq	r0, r0, r4, asr r0
    5484:	00000000 	andeq	r0, r0, r0
    5488:	f3001b00 	vqrdmulh.s<illegal width 8>	d1, d0, d0
    548c:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    5490:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    5494:	4b405301 	blmi	101a0a0 <__ccfg+0xffa0f8>
    5498:	0f0c2224 	svceq	0x000c2224
    549c:	2b800000 	blcs	fe0054a4 <_estack+0xde0004a4>
    54a0:	16000128 	strne	r0, [r0], -r8, lsr #2
    54a4:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    54b4:	00010000 	andeq	r0, r1, r0
    54b8:	00000053 	andeq	r0, r0, r3, asr r0
    54bc:	00000000 	andeq	r0, r0, r0
    54c0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    54cc:	01f3001b 	mvnseq	r0, fp, lsl r0
    54d0:	f31c4053 	vqadd.u16	q2, q6, <illegal reg q1.5>
    54d4:	01f35301 	mvnseq	r5, r1, lsl #6
    54d8:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    54dc:	000f0c22 	andeq	r0, pc, r2, lsr #24
    54e0:	282b8000 	stmdacs	fp!, {pc}
    54e4:	13160001 	tstne	r6, #1
    54e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    54f8:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    5504:	00700006 	rsbseq	r0, r0, r6
    5508:	9f220071 	svcls	0x00220071
	...
    5514:	00560001 	subseq	r0, r6, r1
    5518:	00000000 	andeq	r0, r0, r0
    551c:	23000000 	movwcs	r0, #0
    5520:	5001f300 	andpl	pc, r1, r0, lsl #6
    5524:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    5528:	01f30223 	mvnseq	r0, r3, lsr #4
    552c:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    5530:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    5534:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    5538:	00000f0c 	andeq	r0, r0, ip, lsl #30
    553c:	01282b80 	smlawbeq	r8, r0, fp, r2
    5540:	9f131600 	svcls	0x00131600
	...
    5554:	00760006 	rsbseq	r0, r6, r6
    5558:	9f1a0074 	svcls	0x001a0074
	...
    5564:	00500001 	subseq	r0, r0, r1
	...
    5574:	01000000 	mrseq	r0, (UNDEF: 0)
    5578:	00005600 	andeq	r5, r0, r0, lsl #12
    557c:	00000000 	andeq	r0, r0, r0
    5580:	00230000 	eoreq	r0, r3, r0
    5584:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    5588:	23225101 			; <UNDEFINED> instruction: 0x23225101
    558c:	5001f302 	andpl	pc, r1, r2, lsl #6
    5590:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    5594:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    5598:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    559c:	8000000f 	andhi	r0, r0, pc
    55a0:	0001282b 	andeq	r2, r1, fp, lsr #16
    55a4:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    55b4:	07000000 	streq	r0, [r0, -r0]
    55b8:	0a007600 	beq	22dc0 <__ccfg+0x2e18>
    55bc:	9f1affff 	svcls	0x001affff
	...
    55d0:	00700005 	rsbseq	r0, r0, r5
    55d4:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
	...
    55ec:	52000000 	andpl	r0, r0, #0
    55f0:	01000000 	mrseq	r0, (UNDEF: 0)
    55f4:	00525100 	subseq	r5, r2, r0, lsl #2
    55f8:	00960000 	addseq	r0, r6, r0
    55fc:	00040000 	andeq	r0, r4, r0
    5600:	9f5101f3 	svcls	0x005101f3
    5604:	00000096 	muleq	r0, r6, r0
    5608:	00000098 	muleq	r0, r8, r0
    560c:	98510001 	ldmdals	r1, {r0}^
    5610:	a0000000 	andge	r0, r0, r0
    5614:	04000000 	streq	r0, [r0], #-0
    5618:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    561c:	0000a09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5620:	0000a600 	andeq	sl, r0, r0, lsl #12
    5624:	51000100 	mrspl	r0, (UNDEF: 16)
    5628:	000000a6 	andeq	r0, r0, r6, lsr #1
    562c:	000000aa 	andeq	r0, r0, sl, lsr #1
    5630:	01f30004 	mvnseq	r0, r4
    5634:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    5640:	00020200 	andeq	r0, r2, r0, lsl #4
    5644:	00000000 	andeq	r0, r0, r0
    5648:	00010100 	andeq	r0, r1, r0, lsl #2
	...
    5668:	002a0000 	eoreq	r0, sl, r0
    566c:	00010000 	andeq	r0, r1, r0
    5670:	00002a52 	andeq	r2, r0, r2, asr sl
    5674:	00004000 	andeq	r4, r0, r0
    5678:	71000900 	tstvc	r0, r0, lsl #18
    567c:	22007200 	andcs	r7, r0, #0, 4
    5680:	9f1c0074 	svcls	0x001c0074
    5684:	00000040 	andeq	r0, r0, r0, asr #32
    5688:	00000042 	andeq	r0, r0, r2, asr #32
    568c:	0071000b 	rsbseq	r0, r1, fp
    5690:	74220072 	strtvc	r0, [r2], #-114	; 0xffffff8e
    5694:	1c401c00 	mcrrne	12, 0, r1, r0, cr0
    5698:	0000429f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    569c:	00004c00 	andeq	r4, r0, r0, lsl #24
    56a0:	71000900 	tstvc	r0, r0, lsl #18
    56a4:	22007200 	andcs	r7, r0, #0, 4
    56a8:	9f1c0074 	svcls	0x001c0074
    56ac:	00000056 	andeq	r0, r0, r6, asr r0
    56b0:	0000005a 	andeq	r0, r0, sl, asr r0
    56b4:	5a530001 	bpl	14c56c0 <__ccfg+0x14a5718>
    56b8:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    56bc:	06000000 	streq	r0, [r0], -r0
    56c0:	76007300 	strvc	r7, [r0], -r0, lsl #6
    56c4:	5e9f1c00 	cdppl	12, 9, cr1, cr15, cr0, {0}
    56c8:	60000000 	andvs	r0, r0, r0
    56cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    56d0:	76007300 	strvc	r7, [r0], -r0, lsl #6
    56d4:	1c341c00 	ldcne	12, cr1, [r4], #-0
    56d8:	0000609f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    56dc:	00006a00 	andeq	r6, r0, r0, lsl #20
    56e0:	73000600 	movwvc	r0, #1536	; 0x600
    56e4:	1c007600 	stcne	6, cr7, [r0], {-0}
    56e8:	00006a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    56ec:	00007200 	andeq	r7, r0, r0, lsl #4
    56f0:	72000800 	andvc	r0, r0, #0, 16
    56f4:	761a3f00 	ldrvc	r3, [sl], -r0, lsl #30
    56f8:	729f1c00 	addsvc	r1, pc, #0, 24
    56fc:	76000000 	strvc	r0, [r0], -r0
    5700:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5704:	5201f300 	andpl	pc, r1, #0, 6
    5708:	00761a3f 	rsbseq	r1, r6, pc, lsr sl
    570c:	00769f1c 	rsbseq	r9, r6, ip, lsl pc
    5710:	00780000 	rsbseq	r0, r8, r0
    5714:	00010000 	andeq	r0, r1, r0
    5718:	00007852 	andeq	r7, r0, r2, asr r8
    571c:	00008000 	andeq	r8, r0, r0
    5720:	56000100 	strpl	r0, [r0], -r0, lsl #2
    5724:	00000080 	andeq	r0, r0, r0, lsl #1
    5728:	00000082 	andeq	r0, r0, r2, lsl #1
    572c:	00730007 	rsbseq	r0, r3, r7
    5730:	22007620 	andcs	r7, r0, #32, 12	; 0x2000000
    5734:	0000829f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    5738:	00008800 	andeq	r8, r0, r0, lsl #16
    573c:	76000600 	strvc	r0, [r0], -r0, lsl #12
    5740:	1c007300 	stcne	3, cr7, [r0], {-0}
    5744:	0000889f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    5748:	00008c00 	andeq	r8, r0, r0, lsl #24
    574c:	73000700 	movwvc	r0, #1792	; 0x700
    5750:	00762000 	rsbseq	r2, r6, r0
    5754:	00969f22 	addseq	r9, r6, r2, lsr #30
    5758:	009a0000 	addseq	r0, sl, r0
    575c:	00010000 	andeq	r0, r1, r0
    5760:	00009a52 	andeq	r9, r0, r2, asr sl
    5764:	0000a000 	andeq	sl, r0, r0
    5768:	56000100 	strpl	r0, [r0], -r0, lsl #2
    576c:	000000a0 	andeq	r0, r0, r0, lsr #1
    5770:	000000a2 	andeq	r0, r0, r2, lsr #1
    5774:	a2520001 	subsge	r0, r2, #1
    5778:	a6000000 	strge	r0, [r0], -r0
    577c:	01000000 	mrseq	r0, (UNDEF: 0)
    5780:	00a65600 	adceq	r5, r6, r0, lsl #12
    5784:	00aa0000 	adceq	r0, sl, r0
    5788:	00010000 	andeq	r0, r1, r0
    578c:	00000053 	andeq	r0, r0, r3, asr r0
    5790:	00000000 	andeq	r0, r0, r0
    5794:	00000200 	andeq	r0, r0, r0, lsl #4
    5798:	00000000 	andeq	r0, r0, r0
    579c:	00000101 	andeq	r0, r0, r1, lsl #2
	...
    57a8:	00007600 	andeq	r7, r0, r0, lsl #12
    57ac:	50000100 	andpl	r0, r0, r0, lsl #2
    57b0:	00000076 	andeq	r0, r0, r6, ror r0
    57b4:	00000080 	andeq	r0, r0, r0, lsl #1
    57b8:	80550001 	subshi	r0, r5, r1
    57bc:	82000000 	andhi	r0, r0, #0
    57c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    57c4:	73007500 	movwvc	r7, #1280	; 0x500
    57c8:	01232200 			; <UNDEFINED> instruction: 0x01232200
    57cc:	0000829f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    57d0:	00008200 	andeq	r8, r0, r0, lsl #4
    57d4:	75000600 	strvc	r0, [r0, #-1536]	; 0xfffffa00
    57d8:	22007300 	andcs	r7, r0, #0, 6
    57dc:	0000829f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    57e0:	00008c00 	andeq	r8, r0, r0, lsl #24
    57e4:	75000800 	strvc	r0, [r0, #-2048]	; 0xfffff800
    57e8:	22007300 	andcs	r7, r0, #0, 6
    57ec:	969f0123 	ldrls	r0, [pc], r3, lsr #2
    57f0:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    57f4:	01000000 	mrseq	r0, (UNDEF: 0)
    57f8:	00985000 	addseq	r5, r8, r0
    57fc:	00a00000 	adceq	r0, r0, r0
    5800:	00010000 	andeq	r0, r1, r0
    5804:	0000a055 	andeq	sl, r0, r5, asr r0
    5808:	0000aa00 	andeq	sl, r0, r0, lsl #20
    580c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    5818:	00000003 	andeq	r0, r0, r3
    581c:	00000000 	andeq	r0, r0, r0
    5820:	00010100 	andeq	r0, r1, r0, lsl #2
	...
    582c:	00000052 	andeq	r0, r0, r2, asr r0
    5830:	52510001 	subspl	r0, r1, #1
    5834:	76000000 	strvc	r0, [r0], -r0
    5838:	04000000 	streq	r0, [r0], #-0
    583c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5840:	0000769f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    5844:	00008000 	andeq	r8, r0, r0
    5848:	51000100 	mrspl	r0, (UNDEF: 16)
    584c:	00000080 	andeq	r0, r0, r0, lsl #1
    5850:	00000082 	andeq	r0, r0, r2, lsl #1
    5854:	00710008 	rsbseq	r0, r1, r8
    5858:	23220073 			; <UNDEFINED> instruction: 0x23220073
    585c:	00829f01 	addeq	r9, r2, r1, lsl #30
    5860:	00820000 	addeq	r0, r2, r0
    5864:	00060000 	andeq	r0, r6, r0
    5868:	00730071 	rsbseq	r0, r3, r1, ror r0
    586c:	00829f22 	addeq	r9, r2, r2, lsr #30
    5870:	008c0000 	addeq	r0, ip, r0
    5874:	00080000 	andeq	r0, r8, r0
    5878:	00730071 	rsbseq	r0, r3, r1, ror r0
    587c:	9f012322 	svcls	0x00012322
    5880:	00000096 	muleq	r0, r6, r0
    5884:	000000a6 	andeq	r0, r0, r6, lsr #1
    5888:	a6510001 	ldrbge	r0, [r1], -r1
    588c:	aa000000 	bge	5894 <patchImageGenfsk+0x140>
    5890:	04000000 	streq	r0, [r0], #-0
    5894:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5898:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    589c:	00000000 	andeq	r0, r0, r0
    58a0:	01010000 	mrseq	r0, (UNDEF: 1)
    58a4:	02020101 	andeq	r0, r2, #1073741824	; 0x40000000
    58a8:	00000101 	andeq	r0, r0, r1, lsl #2
    58ac:	00000000 	andeq	r0, r0, r0
    58b0:	00000101 	andeq	r0, r0, r1, lsl #2
    58b4:	00000000 	andeq	r0, r0, r0
    58b8:	00002a00 	andeq	r2, r0, r0, lsl #20
    58bc:	00002c00 	andeq	r2, r0, r0, lsl #24
    58c0:	70000900 	andvc	r0, r0, r0, lsl #18
    58c4:	1c007100 	stfnes	f7, [r0], {-0}
    58c8:	9f220074 	svcls	0x00220074
    58cc:	0000002c 	andeq	r0, r0, ip, lsr #32
    58d0:	0000003a 	andeq	r0, r0, sl, lsr r0
    58d4:	0070000b 	rsbseq	r0, r0, fp
    58d8:	741c0071 	ldrvc	r0, [ip], #-113	; 0xffffff8f
    58dc:	04232200 	strteq	r2, [r3], #-512	; 0xfffffe00
    58e0:	00003a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    58e4:	00003a00 	andeq	r3, r0, r0, lsl #20
    58e8:	70000b00 	andvc	r0, r0, r0, lsl #22
    58ec:	1c007100 	stfnes	f7, [r0], {-0}
    58f0:	23220074 			; <UNDEFINED> instruction: 0x23220074
    58f4:	003a9f08 	eorseq	r9, sl, r8, lsl #30
    58f8:	00400000 	subeq	r0, r0, r0
    58fc:	000b0000 	andeq	r0, fp, r0
    5900:	00710070 	rsbseq	r0, r1, r0, ror r0
    5904:	2200741c 	andcs	r7, r0, #28, 8	; 0x1c000000
    5908:	409f0c23 	addsmi	r0, pc, r3, lsr #24
    590c:	42000000 	andmi	r0, r0, #0
    5910:	0b000000 	bleq	5918 <patchImageGenfsk+0x1c4>
    5914:	71007000 	mrsvc	r7, (UNDEF: 0)
    5918:	00741c00 	rsbseq	r1, r4, r0, lsl #24
    591c:	9f102322 	svcls	0x00102322
    5920:	00000042 	andeq	r0, r0, r2, asr #32
    5924:	0000004c 	andeq	r0, r0, ip, asr #32
    5928:	00700009 	rsbseq	r0, r0, r9
    592c:	741c0071 	ldrvc	r0, [ip], #-113	; 0xffffff8f
    5930:	569f2200 	ldrpl	r2, [pc], r0, lsl #4
    5934:	5a000000 	bpl	593c <patchImageGenfsk+0x1e8>
    5938:	01000000 	mrseq	r0, (UNDEF: 0)
    593c:	005a5500 	subseq	r5, sl, r0, lsl #10
    5940:	005a0000 	subseq	r0, sl, r0
    5944:	00060000 	andeq	r0, r6, r0
    5948:	00760075 	rsbseq	r0, r6, r5, ror r0
    594c:	005a9f22 	subseq	r9, sl, r2, lsr #30
    5950:	00600000 	rsbeq	r0, r0, r0
    5954:	00080000 	andeq	r0, r8, r0
    5958:	00760075 	rsbseq	r0, r6, r5, ror r0
    595c:	9f042322 	svcls	0x00042322
    5960:	00000060 	andeq	r0, r0, r0, rrx
    5964:	00000074 	andeq	r0, r0, r4, ror r0
    5968:	00750006 	rsbseq	r0, r5, r6
    596c:	9f220076 	svcls	0x00220076
    5970:	00000074 	andeq	r0, r0, r4, ror r0
    5974:	00000078 	andeq	r0, r0, r8, ror r0
    5978:	017c000b 	cmneq	ip, fp
    597c:	00702434 	rsbseq	r2, r0, r4, lsr r4
    5980:	22007622 	andcs	r7, r0, #35651584	; 0x2200000
    5984:	0000a69f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    5988:	0000aa00 	andeq	sl, r0, r0, lsl #20
    598c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    5998:	01010100 	mrseq	r0, (UNDEF: 17)
    599c:	01020201 	tsteq	r2, r1, lsl #4
    59a0:	00000001 	andeq	r0, r0, r1
    59a4:	01000000 	mrseq	r0, (UNDEF: 0)
    59a8:	00000001 	andeq	r0, r0, r1
    59ac:	00000000 	andeq	r0, r0, r0
    59b0:	0000002a 	andeq	r0, r0, sl, lsr #32
    59b4:	0000002c 	andeq	r0, r0, ip, lsr #32
    59b8:	2c540001 	mrrccs	0, 0, r0, r4, cr1
    59bc:	3a000000 	bcc	59c4 <patchImageGenfsk+0x270>
    59c0:	03000000 	movweq	r0, #0
    59c4:	9f047400 	svcls	0x00047400
    59c8:	0000003a 	andeq	r0, r0, sl, lsr r0
    59cc:	0000003a 	andeq	r0, r0, sl, lsr r0
    59d0:	08740003 	ldmdaeq	r4!, {r0, r1}^
    59d4:	00003a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    59d8:	00004000 	andeq	r4, r0, r0
    59dc:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
    59e0:	00409f0c 	subeq	r9, r0, ip, lsl #30
    59e4:	00420000 	subeq	r0, r2, r0
    59e8:	00030000 	andeq	r0, r3, r0
    59ec:	429f1074 	addsmi	r1, pc, #116	; 0x74
    59f0:	4c000000 	stcmi	0, cr0, [r0], {-0}
    59f4:	01000000 	mrseq	r0, (UNDEF: 0)
    59f8:	00545400 	subseq	r5, r4, r0, lsl #8
    59fc:	005a0000 	subseq	r0, sl, r0
    5a00:	00010000 	andeq	r0, r1, r0
    5a04:	00005a51 	andeq	r5, r0, r1, asr sl
    5a08:	00005a00 	andeq	r5, r0, r0, lsl #20
    5a0c:	71000600 	tstvc	r0, r0, lsl #12
    5a10:	22007600 	andcs	r7, r0, #0, 12
    5a14:	00005a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    5a18:	00006000 	andeq	r6, r0, r0
    5a1c:	71000800 	tstvc	r0, r0, lsl #16
    5a20:	22007600 	andcs	r7, r0, #0, 12
    5a24:	609f0423 	addsvs	r0, pc, r3, lsr #8
    5a28:	76000000 	strvc	r0, [r0], -r0
    5a2c:	06000000 	streq	r0, [r0], -r0
    5a30:	76007100 	strvc	r7, [r0], -r0, lsl #2
    5a34:	769f2200 	ldrvc	r2, [pc], r0, lsl #4
    5a38:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    5a3c:	0c000000 	stceq	0, cr0, [r0], {-0}
    5a40:	34017c00 	strcc	r7, [r1], #-3072	; 0xfffff400
    5a44:	5101f324 	tstpl	r1, r4, lsr #6	; <UNPREDICTABLE>
    5a48:	22007622 	andcs	r7, r0, #35651584	; 0x2200000
    5a4c:	0000a69f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    5a50:	0000aa00 	andeq	sl, r0, r0, lsl #20
    5a54:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    5a64:	001a0100 	andseq	r0, sl, r0, lsl #2
    5a68:	001c0000 	andseq	r0, ip, r0
    5a6c:	00010000 	andeq	r0, r1, r0
    5a70:	00001c54 	andeq	r1, r0, r4, asr ip
    5a74:	00002400 	andeq	r2, r0, r0, lsl #8
    5a78:	73000200 	movwvc	r0, #512	; 0x200
    5a7c:	00002700 	andeq	r2, r0, r0, lsl #14
    5a80:	00003800 	andeq	r3, r0, r0, lsl #16
    5a84:	74000400 	strvc	r0, [r0], #-1024	; 0xfffffc00
    5a88:	009f7ed8 			; <UNDEFINED> instruction: 0x009f7ed8
	...
    5a94:	04000000 	streq	r0, [r0], #-0
    5a98:	06000000 	streq	r0, [r0], -r0
    5a9c:	02000000 	andeq	r0, r0, #0
    5aa0:	06007300 	streq	r7, [r0], -r0, lsl #6
    5aa4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5aa8:	01000000 	mrseq	r0, (UNDEF: 0)
    5aac:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    5abc:	000e0000 	andeq	r0, lr, r0
    5ac0:	00060000 	andeq	r0, r6, r0
    5ac4:	51049350 	tstpl	r4, r0, asr r3
    5ac8:	000e0493 	muleq	lr, r3, r4
    5acc:	00540000 	subseq	r0, r4, r0
    5ad0:	00060000 	andeq	r0, r6, r0
    5ad4:	00f503f3 	ldrshteq	r0, [r5], #51	; 0x33
    5ad8:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    5ae8:	003e0000 	eorseq	r0, lr, r0
    5aec:	00060000 	andeq	r0, r6, r0
    5af0:	53049352 	movwpl	r9, #17234	; 0x4352
    5af4:	003e0493 	mlaseq	lr, r3, r4, r0
    5af8:	00540000 	subseq	r0, r4, r0
    5afc:	00060000 	andeq	r0, r6, r0
    5b00:	02f503f3 	rscseq	r0, r5, #-872415229	; 0xcc000003
    5b04:	00009f25 	andeq	r9, r0, r5, lsr #30
    5b08:	00000000 	andeq	r0, r0, r0
    5b0c:	02000000 	andeq	r0, r0, #0
    5b10:	0000001a 	andeq	r0, r0, sl, lsl r0
    5b14:	0000004a 	andeq	r0, r0, sl, asr #32
    5b18:	00560001 	subseq	r0, r6, r1
    5b1c:	00000000 	andeq	r0, r0, r0
    5b20:	01000000 	mrseq	r0, (UNDEF: 0)
    5b24:	00000000 	andeq	r0, r0, r0
    5b28:	00001a00 	andeq	r1, r0, r0, lsl #20
    5b2c:	00001e00 	andeq	r1, r0, r0, lsl #28
    5b30:	70000600 	andvc	r0, r0, r0, lsl #12
    5b34:	1e007400 	cfcpysne	mvf7, mvf0
    5b38:	00001e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    5b3c:	00002200 	andeq	r2, r0, r0, lsl #4
    5b40:	50000100 	andpl	r0, r0, r0, lsl #2
    5b44:	00000026 	andeq	r0, r0, r6, lsr #32
    5b48:	00000044 	andeq	r0, r0, r4, asr #32
    5b4c:	00540001 	subseq	r0, r4, r1
	...
    5b58:	1c000000 	stcne	0, cr0, [r0], {-0}
    5b5c:	36000000 	strcc	r0, [r0], -r0
    5b60:	01000000 	mrseq	r0, (UNDEF: 0)
    5b64:	00365500 	eorseq	r5, r6, r0, lsl #10
    5b68:	003e0000 	eorseq	r0, lr, r0
    5b6c:	000c0000 	andeq	r0, ip, r0
    5b70:	24400072 	strbcs	r0, [r0], #-114	; 0xffffff8e
    5b74:	007c2540 	rsbseq	r2, ip, r0, asr #10
    5b78:	9f1e2540 	svcls	0x001e2540
	...
    5b84:	00200000 	eoreq	r0, r0, r0
    5b88:	003c0000 	eorseq	r0, ip, r0
    5b8c:	00010000 	andeq	r0, r1, r0
    5b90:	00000051 	andeq	r0, r0, r1, asr r0
	...
    5b9c:	00001200 	andeq	r1, r0, r0, lsl #4
    5ba0:	00001e00 	andeq	r1, r0, r0, lsl #28
    5ba4:	50000100 	andpl	r0, r0, r0, lsl #2
    5ba8:	0000001e 	andeq	r0, r0, lr, lsl r0
    5bac:	00000054 	andeq	r0, r0, r4, asr r0
    5bb0:	007c0007 	rsbseq	r0, ip, r7
    5bb4:	25402440 	strbcs	r2, [r0, #-1088]	; 0xfffffbc0
    5bb8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5bc4:	00001600 	andeq	r1, r0, r0, lsl #12
    5bc8:	00001c00 	andeq	r1, r0, r0, lsl #24
    5bcc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    5bd0:	0000001c 	andeq	r0, r0, ip, lsl r0
    5bd4:	0000003e 	andeq	r0, r0, lr, lsr r0
    5bd8:	00720007 	rsbseq	r0, r2, r7
    5bdc:	25402440 	strbcs	r2, [r0, #-1088]	; 0xfffffbc0
    5be0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5bec:	00001400 	andeq	r1, r0, r0, lsl #8
    5bf0:	00002000 	andeq	r2, r0, r0
    5bf4:	51000100 	mrspl	r0, (UNDEF: 16)
    5bf8:	00000020 	andeq	r0, r0, r0, lsr #32
    5bfc:	00000054 	andeq	r0, r0, r4, asr r0
    5c00:	007c0005 	rsbseq	r0, ip, r5
    5c04:	009f2540 	addseq	r2, pc, r0, asr #10
    5c08:	00000000 	andeq	r0, r0, r0
    5c0c:	01000000 	mrseq	r0, (UNDEF: 0)
    5c10:	16000000 	strne	r0, [r0], -r0
    5c14:	24000000 	strcs	r0, [r0], #-0
    5c18:	01000000 	mrseq	r0, (UNDEF: 0)
    5c1c:	00245400 	eoreq	r5, r4, r0, lsl #8
    5c20:	003e0000 	eorseq	r0, lr, r0
    5c24:	00050000 	andeq	r0, r5, r0
    5c28:	25400072 	strbcs	r0, [r0, #-114]	; 0xffffff8e
    5c2c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5c30:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000008c 	andeq	r0, r0, ip, lsl #1
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
    return node->data_base.item_array[index];
  10:	000000c8 	andeq	r0, r0, r8, asr #1
  14:	000000a4 	andeq	r0, r0, r4, lsr #1
  18:	00000000 	andeq	r0, r0, r0
};
  1c:	00000006 	andeq	r0, r0, r6
  20:	00000000 	andeq	r0, r0, r0
  24:	00000006 	andeq	r0, r0, r6
  28:	00000000 	andeq	r0, r0, r0
  2c:	00000008 	andeq	r0, r0, r8
  30:	0000016c 	andeq	r0, r0, ip, ror #2
  34:	00000014 	andeq	r0, r0, r4, lsl r0
  38:	00000180 	andeq	r0, r0, r0, lsl #3
  3c:	00000024 	andeq	r0, r0, r4, lsr #32
			i = k;
  40:	000001a4 	andeq	r0, r0, r4, lsr #3
				j->Next = k;
  44:	00000012 	andeq	r0, r0, r2, lsl r0
  48:	00000000 	andeq	r0, r0, r0
}
  4c:	0000000c 	andeq	r0, r0, ip
  50:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
  54:	00000016 	andeq	r0, r0, r6, lsl r0
		release;
  58:	000001cc 	andeq	r0, r0, ip, asr #3
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
			nq++;
  60:	000001e8 	andeq	r0, r0, r8, ror #3
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
  64:	00000344 	andeq	r0, r0, r4, asr #6
  68:	00000000 	andeq	r0, r0, r0
  6c:	0000001e 	andeq	r0, r0, lr, lsl r0
  70:	0000052c 	andeq	r0, r0, ip, lsr #10
  74:	00000026 	andeq	r0, r0, r6, lsr #32
  78:	00000000 	andeq	r0, r0, r0
  7c:	00000012 	andeq	r0, r0, r2, lsl r0
  80:	00000554 	andeq	r0, r0, r4, asr r5
  84:	0000057c 	andeq	r0, r0, ip, ror r5
	...
	if (!button_still_pressed (__button_list [pbutton]))
  90:	000000e4 	andeq	r0, r0, r4, ror #1
  94:	1cb20002 	ldcne	0, cr0, [r2], #8
  98:	00040000 	andeq	r0, r4, r0
	if (baction == NULL)
  9c:	00000000 	andeq	r0, r0, r0
  a0:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	(*baction) (pbutton);
  a4:	0000000c 	andeq	r0, r0, ip
endthread
  a8:	00000adc 	ldrdeq	r0, [r0], -ip
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
  ac:	0000002c 	andeq	r0, r0, ip, lsr #32
  b0:	00000b08 	andeq	r0, r0, r8, lsl #22
endthread
  b4:	0000002a 	andeq	r0, r0, sl, lsr #32
  b8:	00000b34 	andeq	r0, r0, r4, lsr fp
  bc:	0000003c 	andeq	r0, r0, ip, lsr r0
  c0:	00000b70 	andeq	r0, r0, r0, ror fp
  c4:	00000040 	andeq	r0, r0, r0, asr #32
fsm sender(struct ResponseMessage *message) {
  c8:	00000000 	andeq	r0, r0, r0
  cc:	00000020 	andeq	r0, r0, r0, lsr #32
  d0:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
}
  d4:	00000054 	andeq	r0, r0, r4, asr r0
  d8:	00000c04 	andeq	r0, r0, r4, lsl #24
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  dc:	00000040 	andeq	r0, r0, r0, asr #32
  e0:	00000c44 	andeq	r0, r0, r4, asr #24
  e4:	00000028 	andeq	r0, r0, r8, lsr #32
  e8:	00000c6c 	andeq	r0, r0, ip, ror #24
		packet[0] = 0;
  ec:	00000114 	andeq	r0, r0, r4, lsl r1
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  f0:	00000d80 	andeq	r0, r0, r0, lsl #27
		*p = message->tpe;p++;
  f4:	00000050 	andeq	r0, r0, r0, asr r0
  f8:	00000dd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  fc:	00000054 	andeq	r0, r0, r4, asr r0
		*p = message->sender_id;p++;
 100:	00000e24 	andeq	r0, r0, r4, lsr #28
		*p = message->receiver_id;p++;
 104:	00000038 	andeq	r0, r0, r8, lsr r0
		switch(message->tpe) {
 108:	00000e5c 	andeq	r0, r0, ip, asr lr
 10c:	00000110 	andeq	r0, r0, r0, lsl r1
 110:	00000000 	andeq	r0, r0, r0
		tcv_endp(packet);
 114:	0000000c 	andeq	r0, r0, ip
 118:	00000f6c 	andeq	r0, r0, ip, ror #30
		ser_out(CONFIRM_message, "Message sent\r\n");
 11c:	000000c0 	andeq	r0, r0, r0, asr #1
 120:	0000102c 	andeq	r1, r0, ip, lsr #32
}
 124:	00000044 	andeq	r0, r0, r4, asr #32
		finish;
 128:	00001070 	andeq	r1, r0, r0, ror r0
 12c:	0000003c 	andeq	r0, r0, ip, lsr r0
				*p = message->status;p++;
 130:	000010ac 	andeq	r1, r0, ip, lsr #1
 134:	000000a4 	andeq	r0, r0, r4, lsr #1
				strncpy(p, message->record, sizeof(message->record));
 138:	00001150 	andeq	r1, r0, r0, asr r1
				*p = message->padding;p++;
 13c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
				strncpy(p, message->record, sizeof(message->record));
 140:	00001308 	andeq	r1, r0, r8, lsl #6
				strncpy(p, message->record, sizeof(message->record));
 144:	00000024 	andeq	r0, r0, r4, lsr #32
 148:	00000000 	andeq	r0, r0, r0
				strncpy(p, message->record, sizeof(message->record));
 14c:	00000028 	andeq	r0, r0, r8, lsr #32
				*p = message->record_index;p++;
 150:	0000132c 	andeq	r1, r0, ip, lsr #6
				*p = message->padding;
 154:	00000258 	andeq	r0, r0, r8, asr r2
				break;
 158:	00001584 	andeq	r1, r0, r4, lsl #11
 15c:	00000030 	andeq	r0, r0, r0, lsr r0
 160:	00000000 	andeq	r0, r0, r0
 164:	0000005c 	andeq	r0, r0, ip, asr r0
 168:	000015b4 			; <UNDEFINED> instruction: 0x000015b4
		node->nnodes[i] = 0;
 16c:	00000060 	andeq	r0, r0, r0, rrx
	...
 178:	00000154 	andeq	r0, r0, r4, asr r1
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
 17c:	31420002 	cmpcc	r2, r2
bool init_node(struct Node* node){
 180:	00040000 	andeq	r0, r4, r0
    node->id  = 0;                  // default id value 0
 184:	00000000 	andeq	r0, r0, r0
    node->index = 0;                // default entry count 0
 188:	00001614 	andeq	r1, r0, r4, lsl r6
    node->data_base.item_count = 0; // default no items in array
 18c:	0000003c 	andeq	r0, r0, ip, lsr r0
	reset_array(node);
 190:	00001650 	andeq	r1, r0, r0, asr r6
    DEBUG_PRINT("Error initializing node...\n");
 194:	00000080 	andeq	r0, r0, r0, lsl #1
 198:	000016d0 	ldrdeq	r1, [r0], -r0
};
 19c:	00000018 	andeq	r0, r0, r8, lsl r0
 1a0:	00000000 	andeq	r0, r0, r0
uint8_t generate_request_num(void){
 1a4:	00000024 	andeq	r0, r0, r4, lsr #32
    return (uint8_t) (rand() % 255);
 1a8:	000016e8 	andeq	r1, r0, r8, ror #13
 1ac:	00000010 	andeq	r0, r0, r0, lsl r0
 1b0:	000016f8 	strdeq	r1, [r0], -r8
}
 1b4:	0000002c 	andeq	r0, r0, ip, lsr #32
            node->nnodes[i] = 0; // set to null byte
 1b8:	00000000 	andeq	r0, r0, r0
 1bc:	0000004c 	andeq	r0, r0, ip, asr #32
 1c0:	00001724 	andeq	r1, r0, r4, lsr #14
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
 1c4:	00000006 	andeq	r0, r0, r6
};
 1c8:	0000172c 	andeq	r1, r0, ip, lsr #14
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
 1cc:	000000cc 	andeq	r0, r0, ip, asr #1
 1d0:	000017f8 	strdeq	r1, [r0], -r8
        node->data_base.item_array[index].data_entry[0] = '\0';
 1d4:	00000014 	andeq	r0, r0, r4, lsl r0
 1d8:	0000180c 	andeq	r1, r0, ip, lsl #16
 1dc:	00000034 	andeq	r0, r0, r4, lsr r0
        node->data_base.item_count -= 1;
 1e0:	00001840 	andeq	r1, r0, r0, asr #16
};
 1e4:	00000034 	andeq	r0, r0, r4, lsr r0
fsm receiver(struct Node* node_db) {
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	0000002c 	andeq	r0, r0, ip, lsr #32
 1f0:	00001874 	andeq	r1, r0, r4, ror r8
 1f4:	00000024 	andeq	r0, r0, r4, lsr #32
 1f8:	00001898 	muleq	r0, r8, r8
 1fc:	00000038 	andeq	r0, r0, r8, lsr r0
 200:	00000000 	andeq	r0, r0, r0
 204:	00000014 	andeq	r0, r0, r4, lsl r0
		incoming_packet = tcv_rnp(receiving, sfd);
 208:	00000000 	andeq	r0, r0, r0
 20c:	00000040 	andeq	r0, r0, r0, asr #32
 210:	00000000 	andeq	r0, r0, r0
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
 214:	00000018 	andeq	r0, r0, r8, lsl r0
 218:	000018d0 	ldrdeq	r1, [r0], -r0
 21c:	00000024 	andeq	r0, r0, r4, lsr #32
 220:	00000000 	andeq	r0, r0, r0
		switch (tpe){
 224:	00000020 	andeq	r0, r0, r0, lsr #32
 228:	000018f4 	strdeq	r1, [r0], -r4
 22c:	0000000e 	andeq	r0, r0, lr
 230:	00001902 	andeq	r1, r0, r2, lsl #18
 234:	00000010 	andeq	r0, r0, r0, lsl r0
 238:	00001912 	andeq	r1, r0, r2, lsl r9
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
				DEBUG_PRINT("\r\nRECEIVED GID: %u", discovery_request_message->gid);
 240:	00000000 	andeq	r0, r0, r0
 244:	00000010 	andeq	r0, r0, r0, lsl r0
				DEBUG_PRINT("\rRECEIVED TYPE: %u", discovery_request_message->tpe);
 248:	00000000 	andeq	r0, r0, r0
 24c:	00000006 	andeq	r0, r0, r6
				DEBUG_PRINT("\r\nRECEIVED REQ NUM: %u", discovery_request_message->request_number);
 250:	0000192e 	andeq	r1, r0, lr, lsr #18
 254:	00000014 	andeq	r0, r0, r4, lsl r0
				DEBUG_PRINT("\r\nRECEIVED SID: %u", discovery_request_message->sender_id);
 258:	00001942 	andeq	r1, r0, r2, asr #18
 25c:	0000000e 	andeq	r0, r0, lr
				DEBUG_PRINT("\r\nRECEIVED RID: %u", discovery_request_message->receiver_id);
 260:	00001950 	andeq	r1, r0, r0, asr r9
 264:	00000024 	andeq	r0, r0, r4, lsr #32
				if (discovery_request_message->gid == node_db->gid){
 268:	00001974 	andeq	r1, r0, r4, ror r9
 26c:	0000009c 	muleq	r0, ip, r0
					response_message_0->gid = discovery_request_message->gid;
 270:	00001a10 	andeq	r1, r0, r0, lsl sl
					response_message_0->tpe = DISCOVERY_RESPONSE;
 274:	00000050 	andeq	r0, r0, r0, asr r0
					response_message_0->request_number = discovery_request_message->request_number;
 278:	00001a60 	andeq	r1, r0, r0, ror #20
					response_message_0->sender_id = node_db->id;
 27c:	00000048 	andeq	r0, r0, r8, asr #32
					response_message_0->receiver_id = discovery_request_message->sender_id;
 280:	00001aa8 	andeq	r1, r0, r8, lsr #21
					call sender(response_message_0, done_case);
 284:	00000050 	andeq	r0, r0, r0, asr r0
 288:	00000000 	andeq	r0, r0, r0
 28c:	00000058 	andeq	r0, r0, r8, asr r0
 290:	00001af8 	strdeq	r1, [r0], -r8
 294:	000000a8 	andeq	r0, r0, r8, lsr #1
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
 298:	00001ba0 	andeq	r1, r0, r0, lsr #23
 29c:	00000034 	andeq	r0, r0, r4, lsr r0
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
 2a0:	00001bd4 	ldrdeq	r1, [r0], -r4
 2a4:	00000018 	andeq	r0, r0, r8, lsl r0
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
 2a8:	00000000 	andeq	r0, r0, r0
 2ac:	00000030 	andeq	r0, r0, r0, lsr r0
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	00000038 	andeq	r0, r0, r8, lsr r0
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
 2b8:	00001bec 	andeq	r1, r0, ip, ror #23
 2bc:	0000013c 	andeq	r0, r0, ip, lsr r1
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
 2c0:	00001d28 	andeq	r1, r0, r8, lsr #26
 2c4:	00000024 	andeq	r0, r0, r4, lsr #32
	...
 2d0:	00000104 	andeq	r0, r0, r4, lsl #2
 2d4:	43650002 	cmnmi	r5, #2
 2d8:	00040000 	andeq	r0, r4, r0
 2dc:	00000000 	andeq	r0, r0, r0
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
 2e0:	00001d4c 	andeq	r1, r0, ip, asr #26
 2e4:	00000016 	andeq	r0, r0, r6, lsl r0
					node_db->index+=1;
 2e8:	00001d62 	andeq	r1, r0, r2, ror #26
		tcv_endp(incoming_packet);
 2ec:	0000001a 	andeq	r0, r0, sl, lsl r0
 2f0:	00001d7c 	andeq	r1, r0, ip, ror sp
		proceed receiving;
 2f4:	0000000e 	andeq	r0, r0, lr
 2f8:	00001d8c 	andeq	r1, r0, ip, lsl #27
		ser_out(response_1_create, "\r\nData Saved");
 2fc:	0000004c 	andeq	r0, r0, ip, asr #32
 300:	00001dd8 	ldrdeq	r1, [r0], -r8
		proceed receiving;
 304:	0000008c 	andeq	r0, r0, ip, lsl #1
		ser_out(response_1_delete, "\r\nRecord Deleted");
 308:	00001e64 	andeq	r1, r0, r4, ror #28
 30c:	00000070 	andeq	r0, r0, r0, ror r0
		proceed receiving;
 310:	00001ed4 	ldrdeq	r1, [r0], -r4
 314:	000000c0 	andeq	r0, r0, r0, asr #1
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
 318:	00000000 	andeq	r0, r0, r0
 31c:	0000006c 	andeq	r0, r0, ip, rrx
 320:	00001f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
 324:	00000024 	andeq	r0, r0, r4, lsr #32
		proceed receiving;
 328:	00001fb8 			; <UNDEFINED> instruction: 0x00001fb8
 32c:	00000080 	andeq	r0, r0, r0, lsl #1
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
 330:	00000000 	andeq	r0, r0, r0
 334:	00000070 	andeq	r0, r0, r0, ror r0
 338:	00000000 	andeq	r0, r0, r0
		proceed receiving;
 33c:	00000078 	andeq	r0, r0, r8, ror r0
 340:	00002038 	andeq	r2, r0, r8, lsr r0
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
 344:	000000bc 	strheq	r0, [r0], -ip
 348:	000020f4 	strdeq	r2, [r0], -r4
 34c:	0000003a 	andeq	r0, r0, sl, lsr r0
		proceed receiving;
 350:	00000000 	andeq	r0, r0, r0
 354:	00000038 	andeq	r0, r0, r8, lsr r0
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
 358:	00000000 	andeq	r0, r0, r0
 35c:	0000000a 	andeq	r0, r0, sl
 360:	00002130 	andeq	r2, r0, r0, lsr r1
		proceed receiving;
 364:	0000002c 	andeq	r0, r0, ip, lsr #32
 368:	0000215c 	andeq	r2, r0, ip, asr r1
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
 36c:	00000060 	andeq	r0, r0, r0, rrx
		proceed receiving;
 370:	00000000 	andeq	r0, r0, r0
 374:	00000040 	andeq	r0, r0, r0, asr #32
}
 378:	00000000 	andeq	r0, r0, r0
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
 37c:	0000002c 	andeq	r0, r0, ip, lsr #32
 380:	00000000 	andeq	r0, r0, r0
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
 384:	0000003c 	andeq	r0, r0, ip, lsr r0
 388:	00000000 	andeq	r0, r0, r0
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
 38c:	00000006 	andeq	r0, r0, r6
 390:	000021bc 			; <UNDEFINED> instruction: 0x000021bc
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
 394:	00000068 	andeq	r0, r0, r8, rrx
 398:	00002224 	andeq	r2, r0, r4, lsr #4
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
 39c:	00000050 	andeq	r0, r0, r0, asr r0
 3a0:	00002274 	andeq	r2, r0, r4, ror r2
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
 3a4:	0000009c 	muleq	r0, ip, r0
 3a8:	00002310 	andeq	r2, r0, r0, lsl r3
 3ac:	00000040 	andeq	r0, r0, r0, asr #32
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
 3b0:	00002350 	andeq	r2, r0, r0, asr r3
 3b4:	00000034 	andeq	r0, r0, r4, lsr r0
 3b8:	00002384 	andeq	r2, r0, r4, lsl #7
		strncpy(response_message->record, rec, 20);
 3bc:	0000003c 	andeq	r0, r0, ip, lsr r0
 3c0:	00000000 	andeq	r0, r0, r0
 3c4:	0000003c 	andeq	r0, r0, ip, lsr r0
					call sender(response_message_4, done_case);
 3c8:	000023c0 	andeq	r2, r0, r0, asr #7
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
 3cc:	00000002 	andeq	r0, r0, r2
	...
 3d8:	00000034 	andeq	r0, r0, r4, lsr r0
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
 3dc:	569c0002 	ldrpl	r0, [ip], r2
 3e0:	00040000 	andeq	r0, r4, r0
					if (delete_record(node_db, delete_record_message->record_index)){
 3e4:	00000000 	andeq	r0, r0, r0
 3e8:	000023c2 	andeq	r2, r0, r2, asr #7
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
 3ec:	00000002 	andeq	r0, r0, r2
 3f0:	000023c4 	andeq	r2, r0, r4, asr #7
 3f4:	00000002 	andeq	r0, r0, r2
 3f8:	000023c6 	andeq	r2, r0, r6, asr #7
 3fc:	00000002 	andeq	r0, r0, r2
 400:	000023c8 	andeq	r2, r0, r8, asr #7
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
 404:	00000044 	andeq	r0, r0, r4, asr #32
	...
    return node->data_base.item_array[index];
 410:	00000014 	andeq	r0, r0, r4, lsl r0
 414:	58140002 	ldmdapl	r4, {r1}
 418:	00040000 	andeq	r0, r4, r0
	...
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
 428:	00000024 	andeq	r0, r0, r4, lsr #32
 42c:	5d4f0002 	stclpl	0, cr0, [pc, #-8]	; 42c <receiver+0x244>
 430:	00040000 	andeq	r0, r4, r0
	...
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
 43c:	00000002 	andeq	r0, r0, r2
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
 440:	00000000 	andeq	r0, r0, r0
 444:	00000058 	andeq	r0, r0, r8, asr r0
	...
 450:	00000024 	andeq	r0, r0, r4, lsr #32
 454:	62530002 	subsvs	r0, r3, #2
				if(!response_flag){
 458:	00040000 	andeq	r0, r4, r0
	...
				switch(response_message_5->status){
 464:	000000cc 	andeq	r0, r0, ip, asr #1
 468:	00000000 	andeq	r0, r0, r0
 46c:	00000038 	andeq	r0, r0, r8, lsr r0
	...
 478:	0000008c 	andeq	r0, r0, ip, lsl #1
 47c:	674d0002 	strbvs	r0, [sp, -r2]
 480:	00040000 	andeq	r0, r4, r0
 484:	00000000 	andeq	r0, r0, r0
 488:	00002414 	andeq	r2, r0, r4, lsl r4
 48c:	00000034 	andeq	r0, r0, r4, lsr r0
 490:	00002448 	andeq	r2, r0, r8, asr #8
 494:	00000030 	andeq	r0, r0, r0, lsr r0
 498:	00002478 	andeq	r2, r0, r8, ror r4
 49c:	00000018 	andeq	r0, r0, r8, lsl r0
 4a0:	00002490 	muleq	r0, r0, r4
 4a4:	00000054 	andeq	r0, r0, r4, asr r0
 4a8:	000024e4 	andeq	r2, r0, r4, ror #9
 4ac:	00000040 	andeq	r0, r0, r0, asr #32
 4b0:	00002524 	andeq	r2, r0, r4, lsr #10
 4b4:	00000024 	andeq	r0, r0, r4, lsr #32
 4b8:	00002548 	andeq	r2, r0, r8, asr #10
 4bc:	00000014 	andeq	r0, r0, r4, lsl r0
 4c0:	0000255c 	andeq	r2, r0, ip, asr r5
 4c4:	00000014 	andeq	r0, r0, r4, lsl r0
 4c8:	00000000 	andeq	r0, r0, r0
 4cc:	00000064 	andeq	r0, r0, r4, rrx
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	00000128 	andeq	r0, r0, r8, lsr #2
 4d8:	00000000 	andeq	r0, r0, r0
						if (response_checker[0] == response_message_5->request_number){
 4dc:	000000ec 	andeq	r0, r0, ip, ror #1
 4e0:	00000000 	andeq	r0, r0, r0
 4e4:	00000002 	andeq	r0, r0, r2
							switch(response_checker[1]){
 4e8:	00000000 	andeq	r0, r0, r0
 4ec:	00000004 	andeq	r0, r0, r4
 4f0:	00000000 	andeq	r0, r0, r0
 4f4:	00000014 	andeq	r0, r0, r4, lsl r0
									proceed response_1_create;
 4f8:	00000000 	andeq	r0, r0, r0
						proceed response_2;
 4fc:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
						proceed response_3;
 50c:	71f80002 	mvnsvc	r0, r2
						proceed response_4;
 510:	00040000 	andeq	r0, r4, r0
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
 514:	00000000 	andeq	r0, r0, r0
 518:	00002570 	andeq	r2, r0, r0, ror r5
}
 51c:	0000006c 	andeq	r0, r0, ip, rrx
	...
 528:	0000001c 	andeq	r0, r0, ip, lsl r0
bool delete_all(struct Node *node){
 52c:	761a0002 	ldrvc	r0, [sl], -r2
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
 530:	00040000 	andeq	r0, r4, r0
        for(int i = 0; i <= node->data_base.item_count; i++){
 534:	00000000 	andeq	r0, r0, r0
            node->data_base.item_array[i].data_entry[0] = '\0';
 538:	000025dc 	ldrdeq	r2, [r0], -ip
        for(int i = 0; i <= node->data_base.item_count; i++){
 53c:	00000078 	andeq	r0, r0, r8, ror r0
	...
    node->data_base.item_count = 0;
 548:	0000001c 	andeq	r0, r0, ip, lsl r0
}
 54c:	7a300002 	bvc	c0055c <__ccfg+0xbe05b4>
        return true;
 550:	00040000 	andeq	r0, r4, r0
fsm root {
 554:	00000000 	andeq	r0, r0, r0
 558:	00002654 	andeq	r2, r0, r4, asr r6
 55c:	00000054 	andeq	r0, r0, r4, asr r0
	...
 568:	0000001c 	andeq	r0, r0, ip, lsl r0
 56c:	7e800002 	cdpvc	0, 8, cr0, cr0, cr2, {0}
 570:	00040000 	andeq	r0, r4, r0
 574:	00000000 	andeq	r0, r0, r0
 578:	000026a8 	andeq	r2, r0, r8, lsr #13
 57c:	00000060 	andeq	r0, r0, r0, rrx
	...
 588:	0000006c 	andeq	r0, r0, ip, rrx
 58c:	82d00002 	sbcshi	r0, r0, #2
 590:	00040000 	andeq	r0, r4, r0
 594:	00000000 	andeq	r0, r0, r0
 598:	00002708 	andeq	r2, r0, r8, lsl #14
 59c:	00000020 	andeq	r0, r0, r0, lsr #32
 5a0:	00002728 	andeq	r2, r0, r8, lsr #14
		node_db = (struct Node *)umalloc(sizeof(struct Node));
 5a4:	00000190 	muleq	r0, r0, r1
 5a8:	000028b8 			; <UNDEFINED> instruction: 0x000028b8
 5ac:	00000048 	andeq	r0, r0, r8, asr #32
		init_node(node_db);
 5b0:	00002900 	andeq	r2, r0, r0, lsl #18
		phys_cc1350(0, MAX_PKT_LEN);
 5b4:	00000024 	andeq	r0, r0, r4, lsr #32
 5b8:	00002924 	andeq	r2, r0, r4, lsr #18
		tcv_plug (0, &plug_null);
 5bc:	0000005c 	andeq	r0, r0, ip, asr r0
 5c0:	00002980 	andeq	r2, r0, r0, lsl #19
		sfd = tcv_open (WNONE, 0, 0);
 5c4:	00000038 	andeq	r0, r0, r8, lsr r0
 5c8:	000029b8 			; <UNDEFINED> instruction: 0x000029b8
 5cc:	00000180 	andeq	r0, r0, r0, lsl #3
 5d0:	00002b38 	andeq	r2, r0, r8, lsr fp
 5d4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
			diag("Cannot open tcv interface");
 5d8:	00002c08 	andeq	r2, r0, r8, lsl #24
 5dc:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
			halt();
 5e0:	00002df8 	strdeq	r2, [r0], -r8
		tcv_control(sfd, PHYSOPT_ON, NULL);
 5e4:	00000070 	andeq	r0, r0, r0, ror r0
 5e8:	00002e68 	andeq	r2, r0, r8, ror #28
		runfsm receiver(node_db);
 5ec:	00000174 	andeq	r0, r0, r4, ror r1
	...
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
 5f8:	00000044 	andeq	r0, r0, r4, asr #32
 5fc:	a7480002 	strbge	r0, [r8, -r2]
 600:	00040000 	andeq	r0, r4, r0
 604:	00000000 	andeq	r0, r0, r0
 608:	00002fdc 	ldrdeq	r2, [r0], -ip
		ser_inf(get_choice, "%c", &CHOICE);
 60c:	00000024 	andeq	r0, r0, r4, lsr #32
 610:	00003000 	andeq	r3, r0, r0
 614:	00000024 	andeq	r0, r0, r4, lsr #32
		switch(CHOICE) {
 618:	00003024 	andeq	r3, r0, r4, lsr #32
 61c:	00000008 	andeq	r0, r0, r8
 620:	0000302c 	andeq	r3, r0, ip, lsr #32
 624:	00000004 	andeq	r0, r0, r4
 628:	00003030 	andeq	r3, r0, r0, lsr r0
 62c:	00000004 	andeq	r0, r0, r4
 630:	00003034 	andeq	r3, r0, r4, lsr r0
 634:	00000048 	andeq	r0, r0, r8, asr #32
	...
 640:	0000001c 	andeq	r0, r0, ip, lsl r0
 644:	ae7d0002 	cdpge	0, 7, cr0, cr13, cr2, {0}
				proceed menu;
 648:	00040000 	andeq	r0, r4, r0
 64c:	00000000 	andeq	r0, r0, r0
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
 650:	0000307c 	andeq	r3, r0, ip, ror r0
 654:	00000070 	andeq	r0, r0, r0, ror r0
	...
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
 660:	0000001c 	andeq	r0, r0, ip, lsl r0
		DEBUG_PRINT("setting node group ID");
 664:	b2ae0002 	adclt	r0, lr, #2
		if (!set_node_gid(node_db, NEW_NODE_GID)){
 668:	00040000 	andeq	r0, r4, r0
    node->gid = gid; 
 66c:	00000000 	andeq	r0, r0, r0
		proceed menu;
 670:	000030ec 	andeq	r3, r0, ip, ror #1
 674:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
		if (!set_node_id(node_db, NEW_NODE_ID)) {
 680:	0000002c 	andeq	r0, r0, ip, lsr #32
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
 684:	b6f20002 	ldrbtlt	r0, [r2], r2
 688:	00040000 	andeq	r0, r4, r0
		if (!set_node_id(node_db, NEW_NODE_ID)) {
 68c:	00000000 	andeq	r0, r0, r0
 690:	00003208 	andeq	r3, r0, r8, lsl #4
		if((node_db->id < 1) || (node_db->id > 25)){
 694:	00000020 	andeq	r0, r0, r0, lsr #32
 698:	00003228 	andeq	r3, r0, r8, lsr #4
 69c:	00000230 	andeq	r0, r0, r0, lsr r2
			strncpy(reason, "Out of Range", 50);
 6a0:	00003458 	andeq	r3, r0, r8, asr r4
 6a4:	00000050 	andeq	r0, r0, r0, asr r0
	...
				strncpy(reason, "ID is already in use", 50);
 6b0:	0000001c 	andeq	r0, r0, ip, lsl r0
		for(int i = 0; i < node_db->index; i++){
 6b4:	bce60002 	stcllt	0, cr0, [r6], #8
 6b8:	00040000 	andeq	r0, r4, r0
 6bc:	00000000 	andeq	r0, r0, r0
		proceed menu;
 6c0:	000034a8 	andeq	r3, r0, r8, lsr #9
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
 6c4:	00000390 	muleq	r0, r0, r3
	...
 6d0:	00000014 	andeq	r0, r0, r4, lsl r0
		proceed get_new_node_id;
 6d4:	c2790002 	rsbsgt	r0, r9, #2
 6d8:	00040000 	andeq	r0, r4, r0
	...
			strncpy(reason, "Error Clearing Node Array", 50);
 6e8:	00000024 	andeq	r0, r0, r4, lsr #32
 6ec:	e2670002 	rsb	r0, r7, #2
			proceed error;
 6f0:	00040000 	andeq	r0, r4, r0
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 6f4:	00000000 	andeq	r0, r0, r0
 6f8:	00003838 	andeq	r3, r0, r8, lsr r8
		request_packet->gid = node_db->gid;
 6fc:	00000028 	andeq	r0, r0, r8, lsr #32
 700:	00000000 	andeq	r0, r0, r0
		request_packet->tpe = DISCOVERY_REQUEST;
 704:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
		call sender(request_packet, wait_discovery);
 710:	0000001c 	andeq	r0, r0, ip, lsl r0
 714:	e3f50002 	mvns	r0, #2
		request_packet->receiver_id=0;
 718:	00040000 	andeq	r0, r4, r0
		call sender(request_packet, wait_discovery);
 71c:	00000000 	andeq	r0, r0, r0
 720:	00003860 	andeq	r3, r0, r0, ror #16
 724:	00000030 	andeq	r0, r0, r0, lsr r0
	...
				proceed clear_neighbour_array;
 730:	00000024 	andeq	r0, r0, r4, lsr #32
				proceed create_proto_start;
 734:	e4ce0002 	strb	r0, [lr], #2
				proceed start_delete_proto;
 738:	00040000 	andeq	r0, r4, r0
				proceed retrieve_proto;
 73c:	00000000 	andeq	r0, r0, r0
				proceed display_db;
 740:	00003890 	muleq	r0, r0, r8
				proceed del_local;
 744:	00000020 	andeq	r0, r0, r0, lsr #32
			if(node_db->id == node_db->nnodes[i]){
 748:	000038b0 			; <UNDEFINED> instruction: 0x000038b0
 74c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
				strncpy(reason, "ID is already in use", 50);
 758:	0000003c 	andeq	r0, r0, ip, lsr r0
				proceed invalid_node_id;
 75c:	e6150002 	ldr	r0, [r5], -r2
 760:	00040000 	andeq	r0, r4, r0
		for(int i = 0; i < node_db->index; i++){
 764:	00000000 	andeq	r0, r0, r0
		if (discovery_wait_flag == 0){
 768:	000038c8 	andeq	r3, r0, r8, asr #17
			discovery_wait_flag=1;
 76c:	00000008 	andeq	r0, r0, r8
 770:	00000000 	andeq	r0, r0, r0
			delay(3000, find_proto_start);
 774:	00000006 	andeq	r0, r0, r6
 778:	000038d0 	ldrdeq	r3, [r0], -r0
		if (discovery_wait_flag == 1){
 77c:	00000008 	andeq	r0, r0, r8
			discovery_wait_flag=0;
 780:	00000000 	andeq	r0, r0, r0
 784:	00000006 	andeq	r0, r0, r6
			delay(3000, display_neighbour_nodes);
 788:	00000000 	andeq	r0, r0, r0
 78c:	00000008 	andeq	r0, r0, r8
	...
 798:	00000064 	andeq	r0, r0, r4, rrx
 79c:	e74f0002 	strb	r0, [pc, -r2]
 7a0:	00040000 	andeq	r0, r4, r0
 7a4:	00000000 	andeq	r0, r0, r0
 7a8:	000038d8 	ldrdeq	r3, [r0], -r8
 7ac:	0000005c 	andeq	r0, r0, ip, asr r0
 7b0:	00003934 	andeq	r3, r0, r4, lsr r9
 7b4:	0000002c 	andeq	r0, r0, ip, lsr #32
 7b8:	00000000 	andeq	r0, r0, r0
 7bc:	00000090 	muleq	r0, r0, r0
 7c0:	00003960 	andeq	r3, r0, r0, ror #18
 7c4:	00000018 	andeq	r0, r0, r8, lsl r0
 7c8:	00003978 	andeq	r3, r0, r8, ror r9
 7cc:	00000060 	andeq	r0, r0, r0, rrx
 7d0:	000039d8 	ldrdeq	r3, [r0], -r8
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
 7d4:	00000034 	andeq	r0, r0, r4, lsr r0
 7d8:	00000000 	andeq	r0, r0, r0
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
 7dc:	00000038 	andeq	r0, r0, r8, lsr r0
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
 7e0:	00000000 	andeq	r0, r0, r0
			if (node_db->nnodes[i] == 0) break;
 7e4:	0000000c 	andeq	r0, r0, ip
 7e8:	00000000 	andeq	r0, r0, r0
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
 7ec:	00000034 	andeq	r0, r0, r4, lsr r0
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
 7f0:	00000000 	andeq	r0, r0, r0
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
 7f4:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
 800:	00000054 	andeq	r0, r0, r4, asr r0
 804:	f0120002 			; <UNDEFINED> instruction: 0xf0120002
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
 808:	00040000 	andeq	r0, r4, r0
	...
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
 814:	00000014 	andeq	r0, r0, r4, lsl r0
 818:	00003a0c 	andeq	r3, r0, ip, lsl #20
			strncpy(reason, "Error: improper ID", 50);
 81c:	00000028 	andeq	r0, r0, r8, lsr #32
 820:	00003a34 	andeq	r3, r0, r4, lsr sl
 824:	0000004c 	andeq	r0, r0, ip, asr #32
			proceed error;
 828:	00003a80 	andeq	r3, r0, r0, lsl #21
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
 82c:	00000150 	andeq	r0, r0, r0, asr r1
 830:	00003bd0 	ldrdeq	r3, [r0], -r0
		ser_in(get_record_to_create, user_provided_record, 20);
 834:	00000118 	andeq	r0, r0, r8, lsl r1
 838:	00003ce8 	andeq	r3, r0, r8, ror #25
 83c:	00000020 	andeq	r0, r0, r0, lsr #32
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 840:	00000000 	andeq	r0, r0, r0
		create_message->gid = node_db->gid;
 844:	00000060 	andeq	r0, r0, r0, rrx
 848:	00003d08 	andeq	r3, r0, r8, lsl #26
 84c:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
		create_message->sender_id = node_db->id;
 858:	00000024 	andeq	r0, r0, r4, lsr #32
 85c:	faca0002 	blx	ff28086c <_estack+0xdf27b86c>
 860:	00040000 	andeq	r0, r4, r0
		strncpy(create_message->record, user_provided_record, 20);
 864:	00000000 	andeq	r0, r0, r0
		create_message->receiver_id = user_provided_receiver_id;
 868:	00003d24 	andeq	r3, r0, r4, lsr #26
		strncpy(create_message->record, user_provided_record, 20);
 86c:	000000d4 	ldrdeq	r0, [r0], -r4
		response_checker[0] = create_message->request_number;
 870:	00003df8 	strdeq	r3, [r0], -r8
		call sender(create_message, wait);
 874:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
 880:	000000b4 	strheq	r0, [r0], -r4
 884:	fcd50002 	ldc2l	0, cr0, [r5], {2}
 888:	00040000 	andeq	r0, r4, r0
 88c:	00000000 	andeq	r0, r0, r0
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
 890:	00003e9c 	muleq	r0, ip, lr
 894:	0000007c 	andeq	r0, r0, ip, ror r0
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
 898:	00003f18 	andeq	r3, r0, r8, lsl pc
 89c:	000000ac 	andeq	r0, r0, ip, lsr #1
 8a0:	00003fc4 	andeq	r3, r0, r4, asr #31
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
 8a4:	0000005c 	andeq	r0, r0, ip, asr r0
 8a8:	00004020 	andeq	r4, r0, r0, lsr #32
			strncpy(reason, "Error: improper node ID", 50);
 8ac:	00000018 	andeq	r0, r0, r8, lsl r0
 8b0:	00000000 	andeq	r0, r0, r0
			proceed error;
 8b4:	00000010 	andeq	r0, r0, r0, lsl r0
 8b8:	00004038 	andeq	r4, r0, r8, lsr r0
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
 8bc:	00000010 	andeq	r0, r0, r0, lsl r0
 8c0:	00004048 	andeq	r4, r0, r8, asr #32
		ser_inf(get_index_for_delete, "%d", &user_provided_index);
 8c4:	00000014 	andeq	r0, r0, r4, lsl r0
 8c8:	0000405c 	andeq	r4, r0, ip, asr r0
 8cc:	00000064 	andeq	r0, r0, r4, rrx
		if (user_provided_index < 0 || user_provided_index > 40){
 8d0:	000040c0 	andeq	r4, r0, r0, asr #1
			strncpy(reason, "Error: invalid index", 50);
 8d4:	00000014 	andeq	r0, r0, r4, lsl r0
 8d8:	000040d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
 8dc:	00000014 	andeq	r0, r0, r4, lsl r0
			proceed error;
 8e0:	000040e8 	andeq	r4, r0, r8, ror #1
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
 8e4:	00000014 	andeq	r0, r0, r4, lsl r0
 8e8:	000040fc 	strdeq	r4, [r0], -ip
		delete_record->gid = node_db->gid;
 8ec:	00000028 	andeq	r0, r0, r8, lsr #32
 8f0:	00004124 	andeq	r4, r0, r4, lsr #2
 8f4:	00000010 	andeq	r0, r0, r0, lsl r0
		delete_record->tpe = DELETE_RECORD;
 8f8:	00004134 	andeq	r4, r0, r4, lsr r1
		delete_record->request_number = generate_request_num();
 8fc:	0000002c 	andeq	r0, r0, ip, lsr #32
 900:	00004160 	andeq	r4, r0, r0, ror #2
		delete_record->sender_id = node_db->id;
 904:	00000014 	andeq	r0, r0, r4, lsl r0
		response_checker[0] = delete_record->request_number;
 908:	00004174 	andeq	r4, r0, r4, ror r1
		delete_record->receiver_id = user_provided_receiver_id;
 90c:	00000014 	andeq	r0, r0, r4, lsl r0
 910:	00004188 	andeq	r4, r0, r8, lsl #3
		delete_record->record_index = user_provided_index;
 914:	00000110 	andeq	r0, r0, r0, lsl r1
 918:	00004298 	muleq	r0, r8, r2
		response_checker[0] = delete_record->request_number;
 91c:	00000064 	andeq	r0, r0, r4, rrx
		call sender(&delete_record, wait);
 920:	000042fc 	strdeq	r4, [r0], -ip
 924:	00000028 	andeq	r0, r0, r8, lsr #32
 928:	00004324 	andeq	r4, r0, r4, lsr #6
 92c:	00000150 	andeq	r0, r0, r0, asr r1
	...
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
 938:	0000003c 	andeq	r0, r0, ip, lsr r0
		ser_inf(get_id_for_retrieve, "%d", &user_provided_receiver_id);
 93c:	07f00002 	ldrbeq	r0, [r0, r2]!
 940:	00040001 	andeq	r0, r4, r1
	...
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
 94c:	000000f4 	strdeq	r0, [r0], -r4
			strncpy(reason, "Error: improper node ID", 50);
 950:	00004474 	andeq	r4, r0, r4, ror r4
 954:	00000220 	andeq	r0, r0, r0, lsr #4
 958:	00004694 	muleq	r0, r4, r6
			proceed error;
 95c:	00000060 	andeq	r0, r0, r0, rrx
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
 960:	00000000 	andeq	r0, r0, r0
 964:	00000078 	andeq	r0, r0, r8, ror r0
		ser_inf(get_index_for_retrieve, "%d", &user_provided_index);
 968:	000046f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
 96c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
		if (user_provided_index < 0 || user_provided_index > 40){
 978:	00000044 	andeq	r0, r0, r4, asr #32
			strncpy(reason, "Error: invalid index", 50);
 97c:	11170002 	tstne	r7, r2
 980:	00040001 	andeq	r0, r4, r1
	...
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
 98c:	00000010 	andeq	r0, r0, r0, lsl r0
		retrieve_record->tpe = RETRIEVE_RECORD;
 990:	00000000 	andeq	r0, r0, r0
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
 994:	00000018 	andeq	r0, r0, r8, lsl r0
		retrieve_record->gid = node_db->gid;
 998:	0000470c 	andeq	r4, r0, ip, lsl #14
		retrieve_record->tpe = RETRIEVE_RECORD;
 99c:	0000004c 	andeq	r0, r0, ip, asr #32
		retrieve_record->request_number = generate_request_num();
 9a0:	00000000 	andeq	r0, r0, r0
 9a4:	00000030 	andeq	r0, r0, r0, lsr r0
		retrieve_record->sender_id = node_db->id;
 9a8:	00004758 	andeq	r4, r0, r8, asr r7
 9ac:	0000006c 	andeq	r0, r0, ip, rrx
 9b0:	000047c4 	andeq	r4, r0, r4, asr #15
		call sender(&retrieve_record, wait);
 9b4:	00000016 	andeq	r0, r0, r6, lsl r0
	...
		response_checker[0] = retrieve_record->request_number;
 9c0:	00000044 	andeq	r0, r0, r4, asr #32
		response_checker[1] = retrieve_record->tpe;
 9c4:	14e70002 	strbtne	r0, [r7], #2
 9c8:	00040001 	andeq	r0, r4, r1
		call sender(&retrieve_record, wait);
 9cc:	00000000 	andeq	r0, r0, r0
 9d0:	000047dc 	ldrdeq	r4, [r0], -ip
 9d4:	00000028 	andeq	r0, r0, r8, lsr #32
 9d8:	00004804 	andeq	r4, r0, r4, lsl #16
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
 9dc:	00000008 	andeq	r0, r0, r8
 9e0:	00000000 	andeq	r0, r0, r0
		if(node_db->data_base.item_count != 0){
 9e4:	00000022 	andeq	r0, r0, r2, lsr #32
 9e8:	00000000 	andeq	r0, r0, r0
		ser_out(loop_through_data, "\r\n");
 9ec:	0000002e 	andeq	r0, r0, lr, lsr #32
 9f0:	00000000 	andeq	r0, r0, r0
		proceed menu;
 9f4:	00000034 	andeq	r0, r0, r4, lsr r0
 9f8:	00000000 	andeq	r0, r0, r0
		delete_all(node_db);
 9fc:	00000040 	andeq	r0, r0, r0, asr #32
	...
		delay(3000, timeout);
 a08:	0000001c 	andeq	r0, r0, ip, lsl r0
 a0c:	1a920002 	bne	fe480a1c <_estack+0xde47ba1c>
 a10:	00040001 	andeq	r0, r4, r1
		when(&response_flag, menu);
 a14:	00000000 	andeq	r0, r0, r0
 a18:	0000480c 	andeq	r4, r0, ip, lsl #16
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
 a1c:	000000aa 	andeq	r0, r0, sl, lsr #1
	...
 a28:	0000001c 	andeq	r0, r0, ip, lsl r0
 a2c:	29c70002 	stmibcs	r7, {r1}^
 a30:	00040001 	andeq	r0, r4, r1
 a34:	00000000 	andeq	r0, r0, r0
			for(int i = 0; i <= node_db->data_base.item_count; i++){
 a38:	000048b8 			; <UNDEFINED> instruction: 0x000048b8
 a3c:	0000004c 	andeq	r0, r0, ip, asr #32
	...
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
 a48:	00000014 	andeq	r0, r0, r4, lsl r0
 a4c:	33410002 	movtcc	r0, #4098	; 0x1002
		ser_out(timeout, "\r\nFailed to reach the destination");
 a50:	00040001 	andeq	r0, r4, r1
	...
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
 a60:	0000001c 	andeq	r0, r0, ip, lsl r0
 a64:	3c6b0002 	stclcc	0, cr0, [fp], #-8
		proceed menu;
 a68:	00040001 	andeq	r0, r4, r1
}
 a6c:	00000000 	andeq	r0, r0, r0
 a70:	00004904 	andeq	r4, r0, r4, lsl #18
 a74:	00000054 	andeq	r0, r0, r4, asr r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	000000d2 	ldrdeq	r0, [r0], -r2
       4:	000000d2 	ldrdeq	r0, [r0], -r2
       8:	000000d6 	ldrdeq	r0, [r0], -r6
       c:	000000da 	ldrdeq	r0, [r0], -sl
    return node->data_base.item_array[index];
      10:	000000dc 	ldrdeq	r0, [r0], -ip
      14:	000000de 	ldrdeq	r0, [r0], -lr
      18:	000000e0 	andeq	r0, r0, r0, ror #1
};
      1c:	000000e2 	andeq	r0, r0, r2, ror #1
      20:	000000e4 	andeq	r0, r0, r4, ror #1
      24:	00000122 	andeq	r0, r0, r2, lsr #2
      28:	00000126 	andeq	r0, r0, r6, lsr #2
      2c:	0000016c 	andeq	r0, r0, ip, ror #2
	...
      38:	000000dc 	ldrdeq	r0, [r0], -ip
      3c:	000000de 	ldrdeq	r0, [r0], -lr
			i = k;
      40:	000000e0 	andeq	r0, r0, r0, ror #1
				j->Next = k;
      44:	000000e2 	andeq	r0, r0, r2, ror #1
      48:	000000e4 	andeq	r0, r0, r4, ror #1
}
      4c:	0000011a 	andeq	r0, r0, sl, lsl r1
      50:	0000012c 	andeq	r0, r0, ip, lsr #2
      54:	0000016c 	andeq	r0, r0, ip, ror #2
	...
			nq++;
      60:	00000206 	andeq	r0, r0, r6, lsl #4
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	00000376 	andeq	r0, r0, r6, ror r3
      68:	0000037a 	andeq	r0, r0, sl, ror r3
      6c:	00000520 	andeq	r0, r0, r0, lsr #10
	...
      78:	00000214 	andeq	r0, r0, r4, lsl r2
      7c:	000002ec 	andeq	r0, r0, ip, ror #5
      80:	0000037a 	andeq	r0, r0, sl, ror r3
      84:	0000051c 	andeq	r0, r0, ip, lsl r5
	...
	if (!button_still_pressed (__button_list [pbutton]))
      90:	0000023e 	andeq	r0, r0, lr, lsr r2
      94:	000002ec 	andeq	r0, r0, ip, ror #5
      98:	0000037a 	andeq	r0, r0, sl, ror r3
	if (baction == NULL)
      9c:	0000051a 	andeq	r0, r0, sl, lsl r5
      a0:	0000051a 	andeq	r0, r0, sl, lsl r5
	(*baction) (pbutton);
      a4:	0000051c 	andeq	r0, r0, ip, lsl r5
	...
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      b0:	000003c0 	andeq	r0, r0, r0, asr #7
endthread
      b4:	000003c6 	andeq	r0, r0, r6, asr #7
      b8:	00000432 	andeq	r0, r0, r2, lsr r4
      bc:	0000043a 	andeq	r0, r0, sl, lsr r4
	...
fsm sender(struct ResponseMessage *message) {
      c8:	0000040c 	andeq	r0, r0, ip, lsl #8
      cc:	0000041e 	andeq	r0, r0, lr, lsl r4
      d0:	00000422 	andeq	r0, r0, r2, lsr #8
}
      d4:	00000426 	andeq	r0, r0, r6, lsr #8
	...
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      e0:	000005a4 	andeq	r0, r0, r4, lsr #11
      e4:	000006ae 	andeq	r0, r0, lr, lsr #13
      e8:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
		packet[0] = 0;
      ec:	00000a6c 	andeq	r0, r0, ip, ror #20
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	00000a70 	andeq	r0, r0, r0, ror sl
		*p = message->tpe;p++;
      f4:	00000a74 	andeq	r0, r0, r4, ror sl
	...
		*p = message->sender_id;p++;
     100:	0000066a 	andeq	r0, r0, sl, ror #12
		*p = message->receiver_id;p++;
     104:	0000066e 	andeq	r0, r0, lr, ror #12
		switch(message->tpe) {
     108:	00000670 	andeq	r0, r0, r0, ror r6
     10c:	00000670 	andeq	r0, r0, r0, ror r6
     110:	00000672 	andeq	r0, r0, r2, ror r6
		tcv_endp(packet);
     114:	00000674 	andeq	r0, r0, r4, ror r6
	...
		ser_out(CONFIRM_message, "Message sent\r\n");
     120:	00000680 	andeq	r0, r0, r0, lsl #13
}
     124:	000006ae 	andeq	r0, r0, lr, lsr #13
		finish;
     128:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
     12c:	000006c4 	andeq	r0, r0, r4, asr #13
				*p = message->status;p++;
     130:	00000746 	andeq	r0, r0, r6, asr #14
     134:	00000766 	andeq	r0, r0, r6, ror #14
	...
				strncpy(p, message->record, sizeof(message->record));
     140:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
				strncpy(p, message->record, sizeof(message->record));
     144:	000006be 			; <UNDEFINED> instruction: 0x000006be
     148:	00000746 	andeq	r0, r0, r6, asr #14
				strncpy(p, message->record, sizeof(message->record));
     14c:	00000766 	andeq	r0, r0, r6, ror #14
	...
				break;
     158:	000006f4 	strdeq	r0, [r0], -r4
     15c:	00000726 	andeq	r0, r0, r6, lsr #14
     160:	00000766 	andeq	r0, r0, r6, ror #14
     164:	00000766 	andeq	r0, r0, r6, ror #14
	...
		node->nnodes[i] = 0;
     170:	000000c8 	andeq	r0, r0, r8, asr #1
     174:	0000016c 	andeq	r0, r0, ip, ror #2
     178:	00000001 	andeq	r0, r0, r1
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     17c:	00000001 	andeq	r0, r0, r1
bool init_node(struct Node* node){
     180:	00000001 	andeq	r0, r0, r1
    node->id  = 0;                  // default id value 0
     184:	00000001 	andeq	r0, r0, r1
    node->index = 0;                // default entry count 0
     188:	00000001 	andeq	r0, r0, r1
    node->data_base.item_count = 0; // default no items in array
     18c:	00000001 	andeq	r0, r0, r1
	reset_array(node);
     190:	0000016c 	andeq	r0, r0, ip, ror #2
    DEBUG_PRINT("Error initializing node...\n");
     194:	00000180 	andeq	r0, r0, r0, lsl #3
     198:	00000180 	andeq	r0, r0, r0, lsl #3
};
     19c:	000001a4 	andeq	r0, r0, r4, lsr #3
     1a0:	000001a4 	andeq	r0, r0, r4, lsr #3
uint8_t generate_request_num(void){
     1a4:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    return (uint8_t) (rand() % 255);
     1a8:	00000001 	andeq	r0, r0, r1
     1ac:	00000001 	andeq	r0, r0, r1
     1b0:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
}
     1b4:	000001cc 	andeq	r0, r0, ip, asr #3
            node->nnodes[i] = 0; // set to null byte
     1b8:	000001cc 	andeq	r0, r0, ip, asr #3
     1bc:	000001e8 	andeq	r0, r0, r8, ror #3
     1c0:	000001e8 	andeq	r0, r0, r8, ror #3
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1c4:	0000052c 	andeq	r0, r0, ip, lsr #10
};
     1c8:	00000001 	andeq	r0, r0, r1
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1cc:	00000001 	andeq	r0, r0, r1
     1d0:	0000052c 	andeq	r0, r0, ip, lsr #10
        node->data_base.item_array[index].data_entry[0] = '\0';
     1d4:	00000552 	andeq	r0, r0, r2, asr r5
     1d8:	00000001 	andeq	r0, r0, r1
     1dc:	00000001 	andeq	r0, r0, r1
        node->data_base.item_count -= 1;
     1e0:	00000554 	andeq	r0, r0, r4, asr r5
};
     1e4:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
fsm receiver(struct Node* node_db) {
     1f0:	00000bbe 			; <UNDEFINED> instruction: 0x00000bbe
     1f4:	00000bc4 	andeq	r0, r0, r4, asr #23
     1f8:	00000bc4 	andeq	r0, r0, r4, asr #23
     1fc:	00000bc4 	andeq	r0, r0, r4, asr #23
     200:	00000bc8 	andeq	r0, r0, r8, asr #23
     204:	00000bca 	andeq	r0, r0, sl, asr #23
	...
		incoming_packet = tcv_rnp(receiving, sfd);
     210:	00000bc4 	andeq	r0, r0, r4, asr #23
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     214:	00000bc6 	andeq	r0, r0, r6, asr #23
     218:	00000bca 	andeq	r0, r0, sl, asr #23
     21c:	00000bcc 	andeq	r0, r0, ip, asr #23
	...
		switch (tpe){
     228:	00000bdc 	ldrdeq	r0, [r0], -ip
     22c:	00000bde 	ldrdeq	r0, [r0], -lr
     230:	00000be0 	andeq	r0, r0, r0, ror #23
     234:	00000be2 	andeq	r0, r0, r2, ror #23
	...
				DEBUG_PRINT("\r\nRECEIVED GID: %u", discovery_request_message->gid);
     240:	00000c16 	andeq	r0, r0, r6, lsl ip
     244:	00000c1a 	andeq	r0, r0, sl, lsl ip
				DEBUG_PRINT("\rRECEIVED TYPE: %u", discovery_request_message->tpe);
     248:	00000c1c 	andeq	r0, r0, ip, lsl ip
     24c:	00000c1e 	andeq	r0, r0, lr, lsl ip
				DEBUG_PRINT("\r\nRECEIVED REQ NUM: %u", discovery_request_message->request_number);
     250:	00000c20 	andeq	r0, r0, r0, lsr #24
     254:	00000c28 	andeq	r0, r0, r8, lsr #24
	...
				DEBUG_PRINT("\r\nRECEIVED RID: %u", discovery_request_message->receiver_id);
     260:	00000c4c 	andeq	r0, r0, ip, asr #24
     264:	00000c52 	andeq	r0, r0, r2, asr ip
				if (discovery_request_message->gid == node_db->gid){
     268:	00000c54 	andeq	r0, r0, r4, asr ip
     26c:	00000c5a 	andeq	r0, r0, sl, asr ip
	...
					response_message_0->request_number = discovery_request_message->request_number;
     278:	00000c7c 	andeq	r0, r0, ip, ror ip
					response_message_0->sender_id = node_db->id;
     27c:	00000d02 	andeq	r0, r0, r2, lsl #26
					response_message_0->receiver_id = discovery_request_message->sender_id;
     280:	00000d28 	andeq	r0, r0, r8, lsr #26
					call sender(response_message_0, done_case);
     284:	00000d80 	andeq	r0, r0, r0, lsl #27
	...
     290:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     294:	00000df2 	strdeq	r0, [r0], -r2
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
     298:	00000df4 	strdeq	r0, [r0], -r4
     29c:	00000e08 	andeq	r0, r0, r8, lsl #28
	...
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
     2a8:	00000e24 	andeq	r0, r0, r4, lsr #28
     2ac:	00000e26 	andeq	r0, r0, r6, lsr #28
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
     2b0:	00000e28 	andeq	r0, r0, r8, lsr #28
     2b4:	00000e30 	andeq	r0, r0, r0, lsr lr
	...
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2c0:	00000f6c 	andeq	r0, r0, ip, ror #30
     2c4:	00000f70 	andeq	r0, r0, r0, ror pc
     2c8:	00000f72 	andeq	r0, r0, r2, ror pc
     2cc:	00000f74 	andeq	r0, r0, r4, ror pc
     2d0:	00000f76 	andeq	r0, r0, r6, ror pc
     2d4:	00000f78 	andeq	r0, r0, r8, ror pc
	...
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     2e0:	00000fd4 	ldrdeq	r0, [r0], -r4
     2e4:	00000fd8 	ldrdeq	r0, [r0], -r8
					node_db->index+=1;
     2e8:	00000fea 	andeq	r0, r0, sl, ror #31
		tcv_endp(incoming_packet);
     2ec:	00001016 	andeq	r1, r0, r6, lsl r0
	...
		proceed receiving;
     2f8:	0000102c 	andeq	r1, r0, ip, lsr #32
		ser_out(response_1_create, "\r\nData Saved");
     2fc:	0000102c 	andeq	r1, r0, ip, lsr #32
     300:	0000102e 	andeq	r1, r0, lr, lsr #32
		proceed receiving;
     304:	00001030 	andeq	r1, r0, r0, lsr r0
	...
		proceed receiving;
     310:	00001030 	andeq	r1, r0, r0, lsr r0
     314:	00001032 	andeq	r1, r0, r2, lsr r0
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     318:	00001034 	andeq	r1, r0, r4, lsr r0
     31c:	00001036 	andeq	r1, r0, r6, lsr r0
     320:	0000103c 	andeq	r1, r0, ip, lsr r0
     324:	00001042 	andeq	r1, r0, r2, asr #32
		proceed receiving;
     328:	0000104c 	andeq	r1, r0, ip, asr #32
     32c:	0000104e 	andeq	r1, r0, lr, asr #32
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     330:	0000105a 	andeq	r1, r0, sl, asr r0
     334:	0000105c 	andeq	r1, r0, ip, asr r0
	...
		proceed receiving;
     340:	00001070 	andeq	r1, r0, r0, ror r0
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     344:	00001070 	andeq	r1, r0, r0, ror r0
     348:	00001072 	andeq	r1, r0, r2, ror r0
     34c:	00001074 	andeq	r1, r0, r4, ror r0
	...
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     358:	00001076 	andeq	r1, r0, r6, ror r0
     35c:	00001078 	andeq	r1, r0, r8, ror r0
     360:	0000107a 	andeq	r1, r0, sl, ror r0
		proceed receiving;
     364:	0000107c 	andeq	r1, r0, ip, ror r0
     368:	00001086 	andeq	r1, r0, r6, lsl #1
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     36c:	0000108a 	andeq	r1, r0, sl, lsl #1
		proceed receiving;
     370:	00001094 	muleq	r0, r4, r0
     374:	00001096 	muleq	r0, r6, r0
	...
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     380:	0000117a 	andeq	r1, r0, sl, ror r1
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     384:	0000117c 	andeq	r1, r0, ip, ror r1
     388:	0000117e 	andeq	r1, r0, lr, ror r1
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
     38c:	00001182 	andeq	r1, r0, r2, lsl #3
     390:	00001192 	muleq	r0, r2, r1
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     394:	00001194 	muleq	r0, r4, r1
	...
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     3a0:	0000117c 	andeq	r1, r0, ip, ror r1
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     3a4:	0000117e 	andeq	r1, r0, lr, ror r1
     3a8:	00001182 	andeq	r1, r0, r2, lsl #3
     3ac:	00001192 	muleq	r0, r2, r1
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     3b0:	00001194 	muleq	r0, r4, r1
     3b4:	000011ce 	andeq	r1, r0, lr, asr #3
	...
		strncpy(response_message->record, rec, 20);
     3c0:	00001186 	andeq	r1, r0, r6, lsl #3
     3c4:	0000118a 	andeq	r1, r0, sl, lsl #3
					call sender(response_message_4, done_case);
     3c8:	000011b2 			; <UNDEFINED> instruction: 0x000011b2
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3cc:	000011ba 			; <UNDEFINED> instruction: 0x000011ba
	...
     3d8:	0000118a 	andeq	r1, r0, sl, lsl #3
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     3dc:	0000118e 	andeq	r1, r0, lr, lsl #3
     3e0:	000011c6 	andeq	r1, r0, r6, asr #3
					if (delete_record(node_db, delete_record_message->record_index)){
     3e4:	000011ca 	andeq	r1, r0, sl, asr #3
	...
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3f0:	0000118e 	andeq	r1, r0, lr, lsl #3
     3f4:	00001192 	muleq	r0, r2, r1
     3f8:	000011c0 	andeq	r1, r0, r0, asr #3
     3fc:	000011c6 	andeq	r1, r0, r6, asr #3
	...
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     408:	000011ce 	andeq	r1, r0, lr, asr #3
    return node->data_base.item_array[index];
     40c:	000011d0 	ldrdeq	r1, [r0], -r0
     410:	000011d2 	ldrdeq	r1, [r0], -r2
     414:	000011d4 	ldrdeq	r1, [r0], -r4
     418:	000011d6 	ldrdeq	r1, [r0], -r6
     41c:	000011d8 	ldrdeq	r1, [r0], -r8
	...
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     428:	000011d0 	ldrdeq	r1, [r0], -r0
     42c:	000011d2 	ldrdeq	r1, [r0], -r2
     430:	000011d8 	ldrdeq	r1, [r0], -r8
		strncpy(response_message->record, rec, 20);
     434:	000011da 	ldrdeq	r1, [r0], -sl
	...
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     440:	000011ea 	andeq	r1, r0, sl, ror #3
     444:	000011ec 	andeq	r1, r0, ip, ror #3
     448:	000011ee 	andeq	r1, r0, lr, ror #3
     44c:	000011f0 	strdeq	r1, [r0], -r0
	...
				if(!response_flag){
     458:	00001202 	andeq	r1, r0, r2, lsl #4
					response_flag=1;
     45c:	00001204 	andeq	r1, r0, r4, lsl #4
					trigger(&response_flag);
     460:	00001206 	andeq	r1, r0, r6, lsl #4
				switch(response_message_5->status){
     464:	00001208 	andeq	r1, r0, r8, lsl #4
	...
     470:	0000124a 	andeq	r1, r0, sl, asr #4
     474:	0000124a 	andeq	r1, r0, sl, asr #4
     478:	0000124e 	andeq	r1, r0, lr, asr #4
     47c:	00001250 	andeq	r1, r0, r0, asr r2
	...
     488:	00001280 	andeq	r1, r0, r0, lsl #5
     48c:	00001282 	andeq	r1, r0, r2, lsl #5
     490:	00001284 	andeq	r1, r0, r4, lsl #5
     494:	0000128c 	andeq	r1, r0, ip, lsl #5
	...
     4a0:	0000132c 	andeq	r1, r0, ip, lsr #6
     4a4:	0000132c 	andeq	r1, r0, ip, lsr #6
     4a8:	00001332 	andeq	r1, r0, r2, lsr r3
     4ac:	00001334 	andeq	r1, r0, r4, lsr r3
     4b0:	00001336 	andeq	r1, r0, r6, lsr r3
     4b4:	0000133a 	andeq	r1, r0, sl, lsr r3
	...
     4c0:	00001346 	andeq	r1, r0, r6, asr #6
     4c4:	00001348 	andeq	r1, r0, r8, asr #6
     4c8:	0000135e 	andeq	r1, r0, lr, asr r3
     4cc:	00001360 	andeq	r1, r0, r0, ror #6
     4d0:	00001372 	andeq	r1, r0, r2, ror r3
     4d4:	0000138e 	andeq	r1, r0, lr, lsl #7
     4d8:	000013b2 			; <UNDEFINED> instruction: 0x000013b2
						if (response_checker[0] == response_message_5->request_number){
     4dc:	0000150c 	andeq	r1, r0, ip, lsl #10
	...
							switch(response_checker[1]){
     4e8:	00001346 	andeq	r1, r0, r6, asr #6
     4ec:	00001348 	andeq	r1, r0, r8, asr #6
     4f0:	000013e6 	andeq	r1, r0, r6, ror #7
     4f4:	000013ea 	andeq	r1, r0, sl, ror #7
	...
									proceed response_1_delete;
     500:	000013ea 	andeq	r1, r0, sl, ror #7
									proceed response_1_retrieve;
     504:	000013ea 	andeq	r1, r0, sl, ror #7
						proceed response_2;
     508:	000013ee 	andeq	r1, r0, lr, ror #7
						proceed response_3;
     50c:	000013f2 	strdeq	r1, [r0], -r2
						proceed response_4;
     510:	000013f6 	strdeq	r1, [r0], -r6
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     514:	000013f8 	strdeq	r1, [r0], -r8
	...
}
     520:	000013ea 	andeq	r1, r0, sl, ror #7
     524:	000013ee 	andeq	r1, r0, lr, ror #7
     528:	00001404 	andeq	r1, r0, r4, lsl #8
bool delete_all(struct Node *node){
     52c:	00001406 	andeq	r1, r0, r6, lsl #8
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     530:	0000140a 	andeq	r1, r0, sl, lsl #8
        for(int i = 0; i <= node->data_base.item_count; i++){
     534:	0000140e 	andeq	r1, r0, lr, lsl #8
	...
            node->data_base.item_array[i].timestamp = 0;
     540:	000013f2 	strdeq	r1, [r0], -r2
        for(int i = 0; i <= node->data_base.item_count; i++){
     544:	000013f6 	strdeq	r1, [r0], -r6
    node->data_base.item_count = 0;
     548:	000013f8 	strdeq	r1, [r0], -r8
}
     54c:	000013fa 	strdeq	r1, [r0], -sl
        return true;
     550:	000013fe 	strdeq	r1, [r0], -lr
fsm root {
     554:	00001402 	andeq	r1, r0, r2, lsl #8
	...
     560:	00001406 	andeq	r1, r0, r6, lsl #8
     564:	0000140a 	andeq	r1, r0, sl, lsl #8
     568:	00001424 	andeq	r1, r0, r4, lsr #8
     56c:	00001428 	andeq	r1, r0, r8, lsr #8
     570:	0000142a 	andeq	r1, r0, sl, lsr #8
     574:	00001432 	andeq	r1, r0, r2, lsr r4
	...
     580:	0000141c 	andeq	r1, r0, ip, lsl r4
     584:	0000141e 	andeq	r1, r0, lr, lsl r4
     588:	00001420 	andeq	r1, r0, r0, lsr #8
     58c:	00001424 	andeq	r1, r0, r4, lsr #8
	...
     598:	00001460 	andeq	r1, r0, r0, ror #8
     59c:	00001464 	andeq	r1, r0, r4, ror #8
     5a0:	00001466 	andeq	r1, r0, r6, ror #8
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     5a4:	0000146e 	andeq	r1, r0, lr, ror #8
	...
		init_node(node_db);
     5b0:	00001464 	andeq	r1, r0, r4, ror #8
		phys_cc1350(0, MAX_PKT_LEN);
     5b4:	00001466 	andeq	r1, r0, r6, ror #8
     5b8:	00001472 	andeq	r1, r0, r2, ror r4
		tcv_plug (0, &plug_null);
     5bc:	00001474 	andeq	r1, r0, r4, ror r4
	...
		sfd = tcv_open (WNONE, 0, 0);
     5c8:	00001492 	muleq	r0, r2, r4
     5cc:	00001494 	muleq	r0, r4, r4
     5d0:	00001496 	muleq	r0, r6, r4
     5d4:	00001498 	muleq	r0, r8, r4
	...
			halt();
     5e0:	00001494 	muleq	r0, r4, r4
		tcv_control(sfd, PHYSOPT_ON, NULL);
     5e4:	00001496 	muleq	r0, r6, r4
     5e8:	00001498 	muleq	r0, r8, r4
		runfsm receiver(node_db);
     5ec:	0000149c 	muleq	r0, ip, r4
	...
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     5f8:	000014f2 	strdeq	r1, [r0], -r2
     5fc:	000014f4 	strdeq	r1, [r0], -r4
     600:	000014f4 	strdeq	r1, [r0], -r4
     604:	000014f6 	strdeq	r1, [r0], -r6
	...
		ser_inf(get_choice, "%c", &CHOICE);
     610:	000014fa 	strdeq	r1, [r0], -sl
     614:	000014fe 	strdeq	r1, [r0], -lr
		switch(CHOICE) {
     618:	00001500 	andeq	r1, r0, r0, lsl #10
     61c:	00001502 	andeq	r1, r0, r2, lsl #10
	...
     628:	00000001 	andeq	r0, r0, r1
     62c:	00000001 	andeq	r0, r0, r1
     630:	00000001 	andeq	r0, r0, r1
     634:	00000001 	andeq	r0, r0, r1
	...
     640:	000015b4 			; <UNDEFINED> instruction: 0x000015b4
     644:	000015b4 			; <UNDEFINED> instruction: 0x000015b4
				proceed menu;
     648:	000015b8 			; <UNDEFINED> instruction: 0x000015b8
     64c:	000015c4 	andeq	r1, r0, r4, asr #11
	...
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     658:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     65c:	00000adc 	ldrdeq	r0, [r0], -ip
     660:	00000adc 	ldrdeq	r0, [r0], -ip
		DEBUG_PRINT("setting node group ID");
     664:	00000b08 	andeq	r0, r0, r8, lsl #22
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     668:	00000b08 	andeq	r0, r0, r8, lsl #22
    node->gid = gid; 
     66c:	00000b32 	andeq	r0, r0, r2, lsr fp
		proceed menu;
     670:	00000b34 	andeq	r0, r0, r4, lsr fp
     674:	00000b70 	andeq	r0, r0, r0, ror fp
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     678:	00000b70 	andeq	r0, r0, r0, ror fp
     67c:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     680:	00000001 	andeq	r0, r0, r1
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     684:	00000001 	andeq	r0, r0, r1
     688:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     68c:	00000c04 	andeq	r0, r0, r4, lsl #24
     690:	00000c04 	andeq	r0, r0, r4, lsl #24
		if((node_db->id < 1) || (node_db->id > 25)){
     694:	00000c44 	andeq	r0, r0, r4, asr #24
     698:	00000c44 	andeq	r0, r0, r4, asr #24
     69c:	00000c6c 	andeq	r0, r0, ip, ror #24
			strncpy(reason, "Out of Range", 50);
     6a0:	00000c6c 	andeq	r0, r0, ip, ror #24
     6a4:	00000d80 	andeq	r0, r0, r0, lsl #27
			proceed invalid_node_id;
     6a8:	00000d80 	andeq	r0, r0, r0, lsl #27
     6ac:	00000dd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
				strncpy(reason, "ID is already in use", 50);
     6b0:	00000dd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		for(int i = 0; i < node_db->index; i++){
     6b4:	00000e24 	andeq	r0, r0, r4, lsr #28
     6b8:	00000e24 	andeq	r0, r0, r4, lsr #28
     6bc:	00000e5c 	andeq	r0, r0, ip, asr lr
		proceed menu;
     6c0:	00000e5c 	andeq	r0, r0, ip, asr lr
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     6c4:	00000f6c 	andeq	r0, r0, ip, ror #30
     6c8:	00000001 	andeq	r0, r0, r1
     6cc:	00000001 	andeq	r0, r0, r1
     6d0:	00000f6c 	andeq	r0, r0, ip, ror #30
		proceed get_new_node_id;
     6d4:	0000102c 	andeq	r1, r0, ip, lsr #32
     6d8:	0000102c 	andeq	r1, r0, ip, lsr #32
		if (!clear_node_neighbour_array(node_db)){
     6dc:	00001070 	andeq	r1, r0, r0, ror r0
     6e0:	00001070 	andeq	r1, r0, r0, ror r0
			strncpy(reason, "Error Clearing Node Array", 50);
     6e4:	000010ac 	andeq	r1, r0, ip, lsr #1
     6e8:	000010ac 	andeq	r1, r0, ip, lsr #1
     6ec:	00001150 	andeq	r1, r0, r0, asr r1
			proceed error;
     6f0:	00001150 	andeq	r1, r0, r0, asr r1
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     6f4:	00001308 	andeq	r1, r0, r8, lsl #6
     6f8:	00001308 	andeq	r1, r0, r8, lsl #6
		request_packet->gid = node_db->gid;
     6fc:	0000132c 	andeq	r1, r0, ip, lsr #6
     700:	00000001 	andeq	r0, r0, r1
		request_packet->tpe = DISCOVERY_REQUEST;
     704:	00000001 	andeq	r0, r0, r1
		request_packet->request_number = generate_request_num();
     708:	0000132c 	andeq	r1, r0, ip, lsr #6
     70c:	00001584 	andeq	r1, r0, r4, lsl #11
		call sender(request_packet, wait_discovery);
     710:	00001584 	andeq	r1, r0, r4, lsl #11
     714:	000015b4 			; <UNDEFINED> instruction: 0x000015b4
		request_packet->receiver_id=0;
     718:	00000001 	andeq	r0, r0, r1
		call sender(request_packet, wait_discovery);
     71c:	00000001 	andeq	r0, r0, r1
     720:	000015b4 			; <UNDEFINED> instruction: 0x000015b4
     724:	00001614 	andeq	r1, r0, r4, lsl r6
	...
				proceed clear_neighbour_array;
     730:	000016d0 	ldrdeq	r1, [r0], -r0
				proceed create_proto_start;
     734:	000016d2 	ldrdeq	r1, [r0], -r2
				proceed start_delete_proto;
     738:	000016d2 	ldrdeq	r1, [r0], -r2
				proceed retrieve_proto;
     73c:	000016d4 	ldrdeq	r1, [r0], -r4
	...
			if(node_db->id == node_db->nnodes[i]){
     748:	0000173a 	andeq	r1, r0, sl, lsr r7
     74c:	000017dc 	ldrdeq	r1, [r0], -ip
     750:	000017e0 	andeq	r1, r0, r0, ror #15
				strncpy(reason, "ID is already in use", 50);
     754:	000017e4 	andeq	r1, r0, r4, ror #15
	...
				proceed invalid_node_id;
     760:	00001bb0 			; <UNDEFINED> instruction: 0x00001bb0
		for(int i = 0; i < node_db->index; i++){
     764:	00001bb2 			; <UNDEFINED> instruction: 0x00001bb2
		if (discovery_wait_flag == 0){
     768:	00001bb6 			; <UNDEFINED> instruction: 0x00001bb6
			discovery_wait_flag=1;
     76c:	00001bb8 			; <UNDEFINED> instruction: 0x00001bb8
     770:	00001bbc 			; <UNDEFINED> instruction: 0x00001bbc
			delay(3000, find_proto_start);
     774:	00001bc0 	andeq	r1, r0, r0, asr #23
     778:	00001bc2 	andeq	r1, r0, r2, asr #23
		if (discovery_wait_flag == 1){
     77c:	00001bcc 	andeq	r1, r0, ip, asr #23
	...
			delay(3000, display_neighbour_nodes);
     788:	00001bfe 	strdeq	r1, [r0], -lr
     78c:	00001c00 	andeq	r1, r0, r0, lsl #24
     790:	00001c02 	andeq	r1, r0, r2, lsl #24
     794:	00001c06 	andeq	r1, r0, r6, lsl #24
     798:	00001c96 	muleq	r0, r6, ip
     79c:	00001cf8 	strdeq	r1, [r0], -r8
     7a0:	00001cfc 	strdeq	r1, [r0], -ip
     7a4:	00001d00 	andeq	r1, r0, r0, lsl #26
     7a8:	00001d02 	andeq	r1, r0, r2, lsl #26
     7ac:	00001d04 	andeq	r1, r0, r4, lsl #26
	...
     7b8:	00001c1a 	andeq	r1, r0, sl, lsl ip
     7bc:	00001c1c 	andeq	r1, r0, ip, lsl ip
     7c0:	00001c1c 	andeq	r1, r0, ip, lsl ip
     7c4:	00001c1e 	andeq	r1, r0, lr, lsl ip
	...
     7d0:	00001614 	andeq	r1, r0, r4, lsl r6
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     7d4:	00001650 	andeq	r1, r0, r0, asr r6
     7d8:	00001650 	andeq	r1, r0, r0, asr r6
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7dc:	000016d0 	ldrdeq	r1, [r0], -r0
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     7e0:	000016d0 	ldrdeq	r1, [r0], -r0
			if (node_db->nnodes[i] == 0) break;
     7e4:	000016e8 	andeq	r1, r0, r8, ror #13
     7e8:	00000001 	andeq	r0, r0, r1
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     7ec:	00000001 	andeq	r0, r0, r1
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7f0:	000016e8 	andeq	r1, r0, r8, ror #13
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     7f4:	000016f8 	strdeq	r1, [r0], -r8
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7f8:	000016f8 	strdeq	r1, [r0], -r8
		proceed menu;
     7fc:	00001724 	andeq	r1, r0, r4, lsr #14
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     800:	00000001 	andeq	r0, r0, r1
     804:	00000001 	andeq	r0, r0, r1
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     808:	00001724 	andeq	r1, r0, r4, lsr #14
     80c:	0000172a 	andeq	r1, r0, sl, lsr #14
     810:	0000172c 	andeq	r1, r0, ip, lsr #14
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     814:	000017f8 	strdeq	r1, [r0], -r8
     818:	000017f8 	strdeq	r1, [r0], -r8
			strncpy(reason, "Error: improper ID", 50);
     81c:	0000180c 	andeq	r1, r0, ip, lsl #16
     820:	0000180c 	andeq	r1, r0, ip, lsl #16
     824:	00001840 	andeq	r1, r0, r0, asr #16
			proceed error;
     828:	00001840 	andeq	r1, r0, r0, asr #16
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     82c:	00001874 	andeq	r1, r0, r4, ror r8
     830:	00000001 	andeq	r0, r0, r1
		ser_in(get_record_to_create, user_provided_record, 20);
     834:	00000001 	andeq	r0, r0, r1
     838:	00001874 	andeq	r1, r0, r4, ror r8
     83c:	00001898 	muleq	r0, r8, r8
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     840:	00001898 	muleq	r0, r8, r8
		create_message->gid = node_db->gid;
     844:	000018d0 	ldrdeq	r1, [r0], -r0
     848:	00000001 	andeq	r0, r0, r1
     84c:	00000001 	andeq	r0, r0, r1
		create_message->tpe = 2;
     850:	00000001 	andeq	r0, r0, r1
		create_message->request_number = generate_request_num();
     854:	00000001 	andeq	r0, r0, r1
		create_message->sender_id = node_db->id;
     858:	00000001 	andeq	r0, r0, r1
     85c:	00000001 	andeq	r0, r0, r1
     860:	000018d0 	ldrdeq	r1, [r0], -r0
		strncpy(create_message->record, user_provided_record, 20);
     864:	000018f4 	strdeq	r1, [r0], -r4
		create_message->receiver_id = user_provided_receiver_id;
     868:	00000001 	andeq	r0, r0, r1
		strncpy(create_message->record, user_provided_record, 20);
     86c:	00000001 	andeq	r0, r0, r1
		response_checker[0] = create_message->request_number;
     870:	000018f4 	strdeq	r1, [r0], -r4
		call sender(create_message, wait);
     874:	00001902 	andeq	r1, r0, r2, lsl #18
		response_checker[1] = create_message->tpe;
     878:	00001902 	andeq	r1, r0, r2, lsl #18
     87c:	00001912 	andeq	r1, r0, r2, lsl r9
		call sender(create_message, wait);
     880:	00001912 	andeq	r1, r0, r2, lsl r9
     884:	0000192e 	andeq	r1, r0, lr, lsr #18
     888:	00000001 	andeq	r0, r0, r1
     88c:	00000001 	andeq	r0, r0, r1
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     890:	00000001 	andeq	r0, r0, r1
     894:	00000001 	andeq	r0, r0, r1
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     898:	0000192e 	andeq	r1, r0, lr, lsr #18
     89c:	00001942 	andeq	r1, r0, r2, asr #18
     8a0:	00001942 	andeq	r1, r0, r2, asr #18
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     8a4:	00001950 	andeq	r1, r0, r0, asr r9
     8a8:	00001950 	andeq	r1, r0, r0, asr r9
			strncpy(reason, "Error: improper node ID", 50);
     8ac:	00001974 	andeq	r1, r0, r4, ror r9
     8b0:	00001974 	andeq	r1, r0, r4, ror r9
			proceed error;
     8b4:	00001a10 	andeq	r1, r0, r0, lsl sl
     8b8:	00001a10 	andeq	r1, r0, r0, lsl sl
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     8bc:	00001a60 	andeq	r1, r0, r0, ror #20
     8c0:	00001a60 	andeq	r1, r0, r0, ror #20
		ser_inf(get_index_for_delete, "%d", &user_provided_index);
     8c4:	00001aa8 	andeq	r1, r0, r8, lsr #21
     8c8:	00001aa8 	andeq	r1, r0, r8, lsr #21
     8cc:	00001af8 	strdeq	r1, [r0], -r8
		if (user_provided_index < 0 || user_provided_index > 40){
     8d0:	00000001 	andeq	r0, r0, r1
			strncpy(reason, "Error: invalid index", 50);
     8d4:	00000001 	andeq	r0, r0, r1
     8d8:	00001af8 	strdeq	r1, [r0], -r8
     8dc:	00001ba0 	andeq	r1, r0, r0, lsr #23
			proceed error;
     8e0:	00001ba0 	andeq	r1, r0, r0, lsr #23
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     8e4:	00001bd4 	ldrdeq	r1, [r0], -r4
     8e8:	00001bd4 	ldrdeq	r1, [r0], -r4
		delete_record->gid = node_db->gid;
     8ec:	00001bec 	andeq	r1, r0, ip, ror #23
     8f0:	00000001 	andeq	r0, r0, r1
     8f4:	00000001 	andeq	r0, r0, r1
		delete_record->tpe = DELETE_RECORD;
     8f8:	00000001 	andeq	r0, r0, r1
		delete_record->request_number = generate_request_num();
     8fc:	00000001 	andeq	r0, r0, r1
     900:	00001bec 	andeq	r1, r0, ip, ror #23
		delete_record->sender_id = node_db->id;
     904:	00001d28 	andeq	r1, r0, r8, lsr #26
		response_checker[0] = delete_record->request_number;
     908:	00001d28 	andeq	r1, r0, r8, lsr #26
		delete_record->receiver_id = user_provided_receiver_id;
     90c:	00001d4c 	andeq	r1, r0, ip, asr #26
	...
		delete_record->record_index = user_provided_index;
     918:	00001e0c 	andeq	r1, r0, ip, lsl #28
		response_checker[0] = delete_record->request_number;
     91c:	00001e12 	andeq	r1, r0, r2, lsl lr
		call sender(&delete_record, wait);
     920:	00001e18 	andeq	r1, r0, r8, lsl lr
     924:	00001e1c 	andeq	r1, r0, ip, lsl lr
     928:	00001e24 	andeq	r1, r0, r4, lsr #28
     92c:	00001e44 	andeq	r1, r0, r4, asr #28
	...
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     938:	00000001 	andeq	r0, r0, r1
		ser_inf(get_id_for_retrieve, "%d", &user_provided_receiver_id);
     93c:	00000001 	andeq	r0, r0, r1
     940:	00000001 	andeq	r0, r0, r1
     944:	00000001 	andeq	r0, r0, r1
	...
			strncpy(reason, "Error: improper node ID", 50);
     950:	00001d4c 	andeq	r1, r0, ip, asr #26
     954:	00001d62 	andeq	r1, r0, r2, ror #26
     958:	00001d62 	andeq	r1, r0, r2, ror #26
			proceed error;
     95c:	00001d7c 	andeq	r1, r0, ip, ror sp
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     960:	00001d7c 	andeq	r1, r0, ip, ror sp
     964:	00001d8a 	andeq	r1, r0, sl, lsl #27
		ser_inf(get_index_for_retrieve, "%d", &user_provided_index);
     968:	00001d8c 	andeq	r1, r0, ip, lsl #27
     96c:	00001dd8 	ldrdeq	r1, [r0], -r8
     970:	00001dd8 	ldrdeq	r1, [r0], -r8
		if (user_provided_index < 0 || user_provided_index > 40){
     974:	00001e64 	andeq	r1, r0, r4, ror #28
     978:	00001e64 	andeq	r1, r0, r4, ror #28
			strncpy(reason, "Error: invalid index", 50);
     97c:	00001ed4 	ldrdeq	r1, [r0], -r4
     980:	00001ed4 	ldrdeq	r1, [r0], -r4
			proceed error;
     984:	00001f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
     988:	00000001 	andeq	r0, r0, r1
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     98c:	00000001 	andeq	r0, r0, r1
		retrieve_record->tpe = RETRIEVE_RECORD;
     990:	00001f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     994:	00001fb8 			; <UNDEFINED> instruction: 0x00001fb8
		retrieve_record->gid = node_db->gid;
     998:	00001fb8 			; <UNDEFINED> instruction: 0x00001fb8
		retrieve_record->tpe = RETRIEVE_RECORD;
     99c:	00002038 	andeq	r2, r0, r8, lsr r0
		retrieve_record->request_number = generate_request_num();
     9a0:	00000001 	andeq	r0, r0, r1
     9a4:	00000001 	andeq	r0, r0, r1
		retrieve_record->sender_id = node_db->id;
     9a8:	00000001 	andeq	r0, r0, r1
     9ac:	00000001 	andeq	r0, r0, r1
     9b0:	00002038 	andeq	r2, r0, r8, lsr r0
		call sender(&retrieve_record, wait);
     9b4:	000020f4 	strdeq	r2, [r0], -r4
		retrieve_record->receiver_id = user_provided_receiver_id;
     9b8:	000020f4 	strdeq	r2, [r0], -r4
		retrieve_record->record_index = user_provided_index;
     9bc:	0000212e 	andeq	r2, r0, lr, lsr #2
		response_checker[0] = retrieve_record->request_number;
     9c0:	00000001 	andeq	r0, r0, r1
		response_checker[1] = retrieve_record->tpe;
     9c4:	00000001 	andeq	r0, r0, r1
     9c8:	00000001 	andeq	r0, r0, r1
		call sender(&retrieve_record, wait);
     9cc:	00000001 	andeq	r0, r0, r1
     9d0:	00002130 	andeq	r2, r0, r0, lsr r1
     9d4:	0000215c 	andeq	r2, r0, ip, asr r1
     9d8:	0000215c 	andeq	r2, r0, ip, asr r1
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     9dc:	000021bc 			; <UNDEFINED> instruction: 0x000021bc
     9e0:	00000001 	andeq	r0, r0, r1
		if(node_db->data_base.item_count != 0){
     9e4:	00000001 	andeq	r0, r0, r1
     9e8:	00000001 	andeq	r0, r0, r1
		ser_out(loop_through_data, "\r\n");
     9ec:	00000001 	andeq	r0, r0, r1
     9f0:	00000001 	andeq	r0, r0, r1
		proceed menu;
     9f4:	00000001 	andeq	r0, r0, r1
     9f8:	00000001 	andeq	r0, r0, r1
		delete_all(node_db);
     9fc:	00000001 	andeq	r0, r0, r1
     a00:	000021bc 			; <UNDEFINED> instruction: 0x000021bc
		proceed menu;
     a04:	00002224 	andeq	r2, r0, r4, lsr #4
		delay(3000, timeout);
     a08:	00002224 	andeq	r2, r0, r4, lsr #4
     a0c:	00002274 	andeq	r2, r0, r4, ror r2
     a10:	00002274 	andeq	r2, r0, r4, ror r2
		when(&response_flag, menu);
     a14:	00002310 	andeq	r2, r0, r0, lsl r3
     a18:	00002310 	andeq	r2, r0, r0, lsl r3
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a1c:	00002350 	andeq	r2, r0, r0, asr r3
     a20:	00002350 	andeq	r2, r0, r0, asr r3
     a24:	00002384 	andeq	r2, r0, r4, lsl #7
     a28:	00002384 	andeq	r2, r0, r4, lsl #7
     a2c:	000023c0 	andeq	r2, r0, r0, asr #7
     a30:	00000001 	andeq	r0, r0, r1
     a34:	00000001 	andeq	r0, r0, r1
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     a38:	000023c0 	andeq	r2, r0, r0, asr #7
     a3c:	000023c2 	andeq	r2, r0, r2, asr #7
	...
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a48:	000023c2 	andeq	r2, r0, r2, asr #7
     a4c:	000023c4 	andeq	r2, r0, r4, asr #7
		ser_out(timeout, "\r\nFailed to reach the destination");
     a50:	000023c4 	andeq	r2, r0, r4, asr #7
     a54:	000023c6 	andeq	r2, r0, r6, asr #7
		proceed menu;
     a58:	000023c6 	andeq	r2, r0, r6, asr #7
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     a5c:	000023c8 	andeq	r2, r0, r8, asr #7
     a60:	000023c8 	andeq	r2, r0, r8, asr #7
     a64:	0000240c 	andeq	r2, r0, ip, lsl #8
	...
}
     a70:	00000001 	andeq	r0, r0, r1
     a74:	00000001 	andeq	r0, r0, r1
     a78:	00000001 	andeq	r0, r0, r1
     a7c:	00000001 	andeq	r0, r0, r1
     a80:	00000001 	andeq	r0, r0, r1
     a84:	00000001 	andeq	r0, r0, r1
     a88:	00000001 	andeq	r0, r0, r1
     a8c:	00000001 	andeq	r0, r0, r1
	...
     a98:	00000001 	andeq	r0, r0, r1
     a9c:	00000001 	andeq	r0, r0, r1
     aa0:	00000001 	andeq	r0, r0, r1
     aa4:	00000001 	andeq	r0, r0, r1
	...
     ab0:	00000001 	andeq	r0, r0, r1
     ab4:	00000001 	andeq	r0, r0, r1
     ab8:	00000001 	andeq	r0, r0, r1
     abc:	00000001 	andeq	r0, r0, r1
     ac0:	00000001 	andeq	r0, r0, r1
     ac4:	00000001 	andeq	r0, r0, r1
     ac8:	00000001 	andeq	r0, r0, r1
     acc:	00000001 	andeq	r0, r0, r1
	...
	adddevfunc (ioreq_uart_a, devnum);
     ad8:	00000001 	andeq	r0, r0, r1
void udelay (volatile word n) {
     adc:	00000001 	andeq	r0, r0, r1
     ae0:	00000001 	andeq	r0, r0, r1
	while (n) {
     ae4:	00000001 	andeq	r0, r0, r1
	...
	while (n--);
     af0:	00000001 	andeq	r0, r0, r1
     af4:	00000001 	andeq	r0, r0, r1
     af8:	00000001 	andeq	r0, r0, r1
		n--;
     afc:	00000001 	andeq	r0, r0, r1
     b00:	00000001 	andeq	r0, r0, r1
     b04:	00000001 	andeq	r0, r0, r1
	...
	while (n) {
     b10:	00000001 	andeq	r0, r0, r1
     b14:	00000001 	andeq	r0, r0, r1
}
     b18:	00000001 	andeq	r0, r0, r1
		udelay (999);
     b1c:	00000001 	andeq	r0, r0, r1
	...
		n--;
     b28:	00002418 	andeq	r2, r0, r8, lsl r4
     b2c:	0000241c 	andeq	r2, r0, ip, lsl r4
     b30:	00002422 	andeq	r2, r0, r2, lsr #8
void __pi_ondomain (lword d) {
     b34:	00002424 	andeq	r2, r0, r4, lsr #8
     b38:	00002432 	andeq	r2, r0, r2, lsr r4
		if (__pi_systat.effpdm > 1)
     b3c:	00002432 	andeq	r2, r0, r2, lsr r4
     b40:	00002434 	andeq	r2, r0, r4, lsr r4
			__pi_systat.effpdm = 1;
     b44:	00002436 	andeq	r2, r0, r6, lsr r4
	...
	PRCMPowerDomainOn (d);
     b50:	0000241e 	andeq	r2, r0, lr, lsl r4
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     b54:	00002420 	andeq	r2, r0, r0, lsr #8
     b58:	00002436 	andeq	r2, r0, r6, lsr r4
     b5c:	00002438 	andeq	r2, r0, r8, lsr r4
	...
}
     b68:	00002420 	andeq	r2, r0, r0, lsr #8
     b6c:	00002422 	andeq	r2, r0, r2, lsr #8
void __pi_offdomain (lword d) {
     b70:	00002424 	andeq	r2, r0, r4, lsr #8
     b74:	00002426 	andeq	r2, r0, r6, lsr #8
	PRCMPowerDomainOff (d);
     b78:	0000242c 	andeq	r2, r0, ip, lsr #8
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     b7c:	0000242c 	andeq	r2, r0, ip, lsr #8
	...
	if (d & PRCM_DOMAIN_RFCORE) {
     b88:	00002450 	andeq	r2, r0, r0, asr r4
     b8c:	00002458 	andeq	r2, r0, r8, asr r4
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     b90:	00002462 	andeq	r2, r0, r2, ror #8
     b94:	00002462 	andeq	r2, r0, r2, ror #8
			__pi_systat.effpdm = __pi_systat.reqpdm;
     b98:	00002466 	andeq	r2, r0, r6, ror #8
     b9c:	00002468 	andeq	r2, r0, r8, ror #8
	...
}
     ba8:	00002468 	andeq	r2, r0, r8, ror #8
     bac:	00002468 	andeq	r2, r0, r8, ror #8
void __pi_syserror (word ec, const char *m) {
     bb0:	0000246a 	andeq	r2, r0, sl, ror #8
	diag ("SYSERR: %x, %s", ec, m);
     bb4:	0000246c 	andeq	r2, r0, ip, ror #8
	...
     bc0:	00002478 	andeq	r2, r0, r8, ror r4
     bc4:	0000247a 	andeq	r2, r0, sl, ror r4
     bc8:	0000247c 	andeq	r2, r0, ip, ror r4
		all_leds_blink;
     bcc:	00002480 	andeq	r2, r0, r0, lsl #9
	...
     bd8:	00002498 	muleq	r0, r8, r4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     bdc:	0000249a 	muleq	r0, sl, r4
     be0:	0000249e 	muleq	r0, lr, r4
     be4:	000024a0 	andeq	r2, r0, r0, lsr #9
     be8:	000024a6 	andeq	r2, r0, r6, lsr #9
     bec:	000024b6 			; <UNDEFINED> instruction: 0x000024b6
	...
	while (1) {
     bf8:	00002498 	muleq	r0, r8, r4
     bfc:	0000249a 	muleq	r0, sl, r4
     c00:	0000249e 	muleq	r0, lr, r4
void tci_run_delay_timer () {
     c04:	000024a0 	andeq	r2, r0, r0, lsr #9
	setdel = __pi_mintk - __pi_old;
     c08:	000024a6 	andeq	r2, r0, r6, lsr #9
     c0c:	000024a6 	andeq	r2, r0, r6, lsr #9
     c10:	000024a8 	andeq	r2, r0, r8, lsr #9
     c14:	000024aa 	andeq	r2, r0, sl, lsr #9
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c20:	000024fe 	strdeq	r2, [r0], -lr
     c24:	00002502 	andeq	r2, r0, r2, lsl #10
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     c28:	00002504 	andeq	r2, r0, r4, lsl #10
	sti_tim;
     c2c:	00002506 	andeq	r2, r0, r6, lsl #10
	...
}
     c38:	0000250a 	andeq	r2, r0, sl, lsl #10
     c3c:	0000250a 	andeq	r2, r0, sl, lsl #10
     c40:	0000250c 	andeq	r2, r0, ip, lsl #10
	cli_aux;
     c44:	0000250e 	andeq	r2, r0, lr, lsl #10
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c50:	00000001 	andeq	r0, r0, r1
     c54:	00000001 	andeq	r0, r0, r1
     c58:	00000001 	andeq	r0, r0, r1
	sti_aux;
     c5c:	00000001 	andeq	r0, r0, r1
	...
}
     c68:	00000001 	andeq	r0, r0, r1
void AONRTCIntHandler () {
     c6c:	00000001 	andeq	r0, r0, r1
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     c70:	00000001 	andeq	r0, r0, r1
     c74:	00000001 	andeq	r0, r0, r1
	...
		if (__pi_utims [0] == 0)
     c80:	00000001 	andeq	r0, r0, r1
		if (*(__pi_utims [0])) {
     c84:	00000001 	andeq	r0, r0, r1
     c88:	00000001 	andeq	r0, r0, r1
			(*(__pi_utims [0]))--;
     c8c:	00000001 	andeq	r0, r0, r1
	...
			aux_timer_inactive = 0;
     c98:	00000001 	andeq	r0, r0, r1
			(*(__pi_utims [1]))--;
     c9c:	00000001 	andeq	r0, r0, r1
		if (__pi_utims [2] == 0)
     ca0:	00000001 	andeq	r0, r0, r1
		if (*(__pi_utims [2])) {
     ca4:	00000001 	andeq	r0, r0, r1
	...
			if (*(__pi_utims [3])) {
     cb0:	00002414 	andeq	r2, r0, r4, lsl r4
				aux_timer_inactive = 0;
     cb4:	00002448 	andeq	r2, r0, r8, asr #8
				(*(__pi_utims [3]))--;
     cb8:	00002448 	andeq	r2, r0, r8, asr #8
	if (__pi_systat.ledsts) {
     cbc:	00002478 	andeq	r2, r0, r8, ror r4
     cc0:	00002478 	andeq	r2, r0, r8, ror r4
		if (__pi_systat.ledblc++ == 0) {
     cc4:	00002490 	muleq	r0, r0, r4
     cc8:	00002490 	muleq	r0, r0, r4
			if (__pi_systat.ledblk) {
     ccc:	000024e4 	andeq	r2, r0, r4, ror #9
     cd0:	000024e4 	andeq	r2, r0, r4, ror #9
     cd4:	00002524 	andeq	r2, r0, r4, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     cd8:	00002524 	andeq	r2, r0, r4, lsr #10
     cdc:	00002548 	andeq	r2, r0, r8, asr #10
				if (__pi_systat.ledsts & 0x2)
     ce0:	00002548 	andeq	r2, r0, r8, asr #10
     ce4:	0000255c 	andeq	r2, r0, ip, asr r5
     ce8:	0000255c 	andeq	r2, r0, ip, asr r5
				if (__pi_systat.ledsts & 0x4)
     cec:	00002570 	andeq	r2, r0, r0, ror r5
				__pi_systat.ledblk = 0;
     cf0:	00000001 	andeq	r0, r0, r1
     cf4:	00000001 	andeq	r0, r0, r1
			if (__pi_systat.fstblk)
     cf8:	00000001 	andeq	r0, r0, r1
     cfc:	00000001 	andeq	r0, r0, r1
				__pi_systat.ledblc = 200;
     d00:	00000001 	andeq	r0, r0, r1
	if (events & AON_RTC_EVFLAGS_CH0) {
     d04:	00000001 	andeq	r0, r0, r1
		cli_tim;
     d08:	00000001 	andeq	r0, r0, r1
		__pi_new += setdel;
     d0c:	00000001 	andeq	r0, r0, r1
     d10:	00000001 	andeq	r0, r0, r1
		setdel = 0;
     d14:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
     d18:	00000001 	andeq	r0, r0, r1
		__pi_new += setdel;
     d1c:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
     d20:	00000001 	andeq	r0, r0, r1
     d24:	00000001 	andeq	r0, r0, r1
	...
				if (__pi_systat.ledsts & 0x1)
     d30:	00002570 	andeq	r2, r0, r0, ror r5
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d34:	000025dc 	ldrdeq	r2, [r0], -ip
	...
     d40:	000025dc 	ldrdeq	r2, [r0], -ip
     d44:	00002654 	andeq	r2, r0, r4, asr r6
	...
				__pi_systat.ledblk = 1;
     d50:	00002654 	andeq	r2, r0, r4, asr r6
		if (aux_timer_inactive) {
     d54:	000026a8 	andeq	r2, r0, r8, lsr #13
	...
			cli_aux;
     d60:	000026a8 	andeq	r2, r0, r8, lsr #13
     d64:	00002708 	andeq	r2, r0, r8, lsl #14
	...
     d70:	0000292e 	andeq	r2, r0, lr, lsr #18
     d74:	00002930 	andeq	r2, r0, r0, lsr r9
     d78:	00002944 	andeq	r2, r0, r4, asr #18
     d7c:	00002946 	andeq	r2, r0, r6, asr #18
word tci_update_delay_ticks (Boolean force) {
     d80:	00002948 	andeq	r2, r0, r8, asr #18
	cli_tim;
     d84:	0000294a 	andeq	r2, r0, sl, asr #18
	...
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d90:	000029b8 			; <UNDEFINED> instruction: 0x000029b8
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     d94:	000029be 			; <UNDEFINED> instruction: 0x000029be
     d98:	000029c2 	andeq	r2, r0, r2, asr #19
     d9c:	000029c4 	andeq	r2, r0, r4, asr #19
	...
	return NO;
     da8:	000029e6 	andeq	r2, r0, r6, ror #19
			setdel = 0;
     dac:	000029ec 	andeq	r2, r0, ip, ror #19
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     db0:	000029ee 	andeq	r2, r0, lr, ror #19
     db4:	000029f0 	strdeq	r2, [r0], -r0
	...
		return YES;
     dc0:	000029f4 	strdeq	r2, [r0], -r4
     dc4:	00002a00 	andeq	r2, r0, r0, lsl #20
     dc8:	00002a00 	andeq	r2, r0, r0, lsl #20
     dcc:	00002a04 	andeq	r2, r0, r4, lsl #20
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     dd0:	00002a06 	andeq	r2, r0, r6, lsl #20
	UARTDisable (UART0_BASE);
     dd4:	00002a2a 	andeq	r2, r0, sl, lsr #20
	...
	UARTConfigSetExpClk (UART0_BASE,
     de0:	00002a04 	andeq	r2, r0, r4, lsl #20
     de4:	00002a06 	andeq	r2, r0, r6, lsl #20
     de8:	00002a2a 	andeq	r2, r0, sl, lsr #20
     dec:	00002a64 	andeq	r2, r0, r4, ror #20
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     df0:	00002a66 	andeq	r2, r0, r6, ror #20
     df4:	00002a78 	andeq	r2, r0, r8, ror sl
	...
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     e00:	00002b38 	andeq	r2, r0, r8, lsr fp
     e04:	00002b38 	andeq	r2, r0, r8, lsr fp
	urates [0] = rate;
     e08:	00002b3c 	andeq	r2, r0, ip, lsr fp
}
     e0c:	00002b56 	andeq	r2, r0, r6, asr fp
     e10:	00002b58 	andeq	r2, r0, r8, asr fp
     e14:	00002b5a 	andeq	r2, r0, sl, asr fp
     e18:	00002b5c 	andeq	r2, r0, ip, asr fp
     e1c:	00002b5e 	andeq	r2, r0, lr, asr fp
     e20:	00002b62 	andeq	r2, r0, r2, ror #22
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e24:	00002b6c 	andeq	r2, r0, ip, ror #22
	...
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     e30:	00002c7e 	andeq	r2, r0, lr, ror ip
     e34:	00002c82 	andeq	r2, r0, r2, lsl #25
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     e38:	00002c9e 	muleq	r0, lr, ip
     e3c:	00002ca2 	andeq	r2, r0, r2, lsr #25
	...
	__pi_uart_setrate (urates [0], __pi_uart);
     e48:	00002c82 	andeq	r2, r0, r2, lsl #25
     e4c:	00002c9e 	muleq	r0, lr, ip
     e50:	00002ca2 	andeq	r2, r0, r2, lsr #25
     e54:	00002caa 	andeq	r2, r0, sl, lsr #25
	...
static int ioreq_uart_a (int operation, char *buf, int len) {
     e60:	00002e16 	andeq	r2, r0, r6, lsl lr
     e64:	00002e18 	andeq	r2, r0, r8, lsl lr
     e68:	00002e1a 	andeq	r2, r0, sl, lsl lr
     e6c:	00002e1e 	andeq	r2, r0, lr, lsl lr
	...
				*buf++ = uart_a_read;
     e78:	00002e18 	andeq	r2, r0, r8, lsl lr
			while (len && uart_a_char_available) {
     e7c:	00002e1a 	andeq	r2, r0, sl, lsl lr
     e80:	00002e1e 	andeq	r2, r0, lr, lsl lr
     e84:	00002e44 	andeq	r2, r0, r4, asr #28
	...
}
     e90:	00002e8c 	andeq	r2, r0, ip, lsl #29
			uart_a_disable_int;
     e94:	00002e8e 	andeq	r2, r0, lr, lsl #29
			if (uart_a_char_available) {
     e98:	00002e92 	muleq	r0, r2, lr
				*buf++ = uart_a_read;
     e9c:	00002e98 	muleq	r0, r8, lr
			uart_a_disable_int;
     ea0:	00002e9a 	muleq	r0, sl, lr
     ea4:	00002ee6 	andeq	r2, r0, r6, ror #29
			if (uart_a_char_available) {
     ea8:	00002ee8 	andeq	r2, r0, r8, ror #29
     eac:	00002eec 	andeq	r2, r0, ip, ror #29
				uart_a_enable_int;
     eb0:	00002eee 	andeq	r2, r0, lr, ror #29
     eb4:	00002efe 	strdeq	r2, [r0], -lr
				goto Redo_rx;
     eb8:	00002f02 	andeq	r2, r0, r2, lsl #30
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     ebc:	00002f06 	andeq	r2, r0, r6, lsl #30
     ec0:	00002f38 	andeq	r2, r0, r8, lsr pc
			return -2;
     ec4:	00002f3c 	andeq	r2, r0, ip, lsr pc
	...
				uart_a_write (*buf);
     ed0:	00002f42 	andeq	r2, r0, r2, asr #30
			while (len && uart_a_room_in_tx) {
     ed4:	00002f44 	andeq	r2, r0, r4, asr #30
     ed8:	00002f46 	andeq	r2, r0, r6, asr #30
     edc:	00002f74 	andeq	r2, r0, r4, ror pc
	...
			uart_a_disable_int;
     ee8:	00002708 	andeq	r2, r0, r8, lsl #14
			if (uart_a_room_in_tx) {
     eec:	00002728 	andeq	r2, r0, r8, lsr #14
     ef0:	00002728 	andeq	r2, r0, r8, lsr #14
				uart_a_enable_int;
     ef4:	000028b8 			; <UNDEFINED> instruction: 0x000028b8
     ef8:	000028b8 			; <UNDEFINED> instruction: 0x000028b8
				*buf++ = uart_a_read;
     efc:	00002900 	andeq	r2, r0, r0, lsl #18
			if (uart_a_room_in_tx) {
     f00:	00002900 	andeq	r2, r0, r0, lsl #18
				uart_a_write (*buf);
     f04:	00002924 	andeq	r2, r0, r4, lsr #18
     f08:	00002924 	andeq	r2, r0, r4, lsr #18
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     f0c:	00002980 	andeq	r2, r0, r0, lsl #19
     f10:	00002980 	andeq	r2, r0, r0, lsl #19
			uart_a_enable_int;
     f14:	000029b8 			; <UNDEFINED> instruction: 0x000029b8
     f18:	000029b8 			; <UNDEFINED> instruction: 0x000029b8
     f1c:	00002b38 	andeq	r2, r0, r8, lsr fp
			return 0;
     f20:	00002b38 	andeq	r2, r0, r8, lsr fp
			if (len == UART_CNTRL_SETRATE) {
     f24:	00002c08 	andeq	r2, r0, r8, lsl #24
				if (__pi_uart_setrate (*((word*)buf),
     f28:	00002c08 	andeq	r2, r0, r8, lsl #24
     f2c:	00002df8 	strdeq	r2, [r0], -r8
     f30:	00002df8 	strdeq	r2, [r0], -r8
				syserror (EREQPAR, "uar");
     f34:	00002e68 	andeq	r2, r0, r8, ror #28
			syserror (ENOOPER, "uai");
     f38:	00002e68 	andeq	r2, r0, r8, ror #28
			if (len == UART_CNTRL_GETRATE) {
     f3c:	00002fdc 	ldrdeq	r2, [r0], -ip
	...
			syserror (ENOOPER, "uai");
     f48:	00002fdc 	ldrdeq	r2, [r0], -ip
     f4c:	00003000 	andeq	r3, r0, r0
     f50:	00003000 	andeq	r3, r0, r0
     f54:	00003024 	andeq	r3, r0, r4, lsr #32
     f58:	00003024 	andeq	r3, r0, r4, lsr #32
     f5c:	0000302c 	andeq	r3, r0, ip, lsr #32
     f60:	0000302c 	andeq	r3, r0, ip, lsr #32
     f64:	00003030 	andeq	r3, r0, r0, lsr r0
     f68:	00003030 	andeq	r3, r0, r0, lsr r0
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     f6c:	00003034 	andeq	r3, r0, r4, lsr r0
void UART0IntHandler () {
     f70:	00003034 	andeq	r3, r0, r4, lsr r0
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     f74:	0000307c 	andeq	r3, r0, ip, ror r0
	...
     f80:	0000308a 	andeq	r3, r0, sl, lsl #1
     f84:	0000308a 	andeq	r3, r0, sl, lsl #1
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     f88:	00003090 	muleq	r0, r0, r0
     f8c:	000030ec 	andeq	r3, r0, ip, ror #1
	...
		i_trigger (devevent (UART_A, READ));
     f98:	0000307c 	andeq	r3, r0, ip, ror r0
     f9c:	000030ec 	andeq	r3, r0, ip, ror #1
	...
     fa8:	00003100 	andeq	r3, r0, r0, lsl #2
     fac:	000031e4 	andeq	r3, r0, r4, ror #3
     fb0:	000031ea 	andeq	r3, r0, sl, ror #3
     fb4:	000031ee 	andeq	r3, r0, lr, ror #3
     fb8:	000031f4 	strdeq	r3, [r0], -r4
     fbc:	00003208 	andeq	r3, r0, r8, lsl #4
	...
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     fc8:	000030ec 	andeq	r3, r0, ip, ror #1
     fcc:	00003208 	andeq	r3, r0, r8, lsl #4
	...
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     fd8:	00003234 	andeq	r3, r0, r4, lsr r2
     fdc:	00003236 	andeq	r3, r0, r6, lsr r2
		RISE_N_SHINE;
     fe0:	00003304 	andeq	r3, r0, r4, lsl #6
     fe4:	00003328 	andeq	r3, r0, r8, lsr #6
     fe8:	0000332a 	andeq	r3, r0, sl, lsr #6
		i_trigger (devevent (UART_A, WRITE));
     fec:	00003372 	andeq	r3, r0, r2, ror r3
     ff0:	0000339c 	muleq	r0, ip, r3
     ff4:	0000339e 	muleq	r0, lr, r3
	...
    1000:	00003236 	andeq	r3, r0, r6, lsr r2
    1004:	00003238 	andeq	r3, r0, r8, lsr r2
    1008:	000032da 	ldrdeq	r3, [r0], -sl
    100c:	00003304 	andeq	r3, r0, r4, lsl #6
    1010:	00003328 	andeq	r3, r0, r8, lsr #6
    1014:	0000332a 	andeq	r3, r0, sl, lsr #6
	...
}
    1020:	00003276 	andeq	r3, r0, r6, ror r2
    1024:	0000327e 	andeq	r3, r0, lr, ror r2
    1028:	00003422 	andeq	r3, r0, r2, lsr #8
void __buttons_setirq (int val) {
    102c:	0000342e 	andeq	r3, r0, lr, lsr #8
	...
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1038:	0000337c 	andeq	r3, r0, ip, ror r3
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    103c:	0000339c 	muleq	r0, ip, r3
    1040:	0000339e 	muleq	r0, lr, r3
		bn = BUTTON_GPIO (__button_list [i]);
    1044:	000033e2 	andeq	r3, r0, r2, ror #7
	...
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1050:	00003208 	andeq	r3, r0, r8, lsl #4
    1054:	00003228 	andeq	r3, r0, r8, lsr #4
    1058:	00003228 	andeq	r3, r0, r8, lsr #4
    105c:	00003458 	andeq	r3, r0, r8, asr r4
}
    1060:	00003458 	andeq	r3, r0, r8, asr r4
    1064:	000034a8 	andeq	r3, r0, r8, lsr #9
	...
void __pinlist_setirq (int val) {
    1070:	000034bc 			; <UNDEFINED> instruction: 0x000034bc
	for (i = 0; i < N_PINLIST; i++) {
    1074:	000034c0 	andeq	r3, r0, r0, asr #9
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1078:	0000379a 	muleq	r0, sl, r7
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    107c:	000037e2 	andeq	r3, r0, r2, ror #15
	...
    1088:	000034c0 	andeq	r3, r0, r0, asr #9
    108c:	000034c6 	andeq	r3, r0, r6, asr #9
    1090:	000034fe 	strdeq	r3, [r0], -lr
    1094:	0000356a 	andeq	r3, r0, sl, ror #10
	for (i = 0; i < N_PINLIST; i++) {
    1098:	000037fe 	strdeq	r3, [r0], -lr
}
    109c:	0000381e 	andeq	r3, r0, lr, lsl r8
	...
    10a8:	00003622 	andeq	r3, r0, r2, lsr #12
void GPIOIntHandler () {
    10ac:	0000369c 	muleq	r0, ip, r6
if (buttons_int) {
    10b0:	00003826 	andeq	r3, r0, r6, lsr #16
    10b4:	0000382e 	andeq	r3, r0, lr, lsr #16
	...
	i_trigger ((aword)&__button_list);
    10c0:	000036b4 			; <UNDEFINED> instruction: 0x000036b4
    10c4:	0000370a 	andeq	r3, r0, sl, lsl #14
    10c8:	00003780 	andeq	r3, r0, r0, lsl #15
    10cc:	0000379a 	muleq	r0, sl, r7
	...
    10d8:	00003710 	andeq	r3, r0, r0, lsl r7
    10dc:	00003780 	andeq	r3, r0, r0, lsl #15
    10e0:	000037e2 	andeq	r3, r0, r2, ror #15
    10e4:	000037ea 	andeq	r3, r0, sl, ror #15
    10e8:	0000382e 	andeq	r3, r0, lr, lsr #16
	RISE_N_SHINE;
    10ec:	00003838 	andeq	r3, r0, r8, lsr r8
	...
if (pin_sensor_int) {
    10f8:	000034a8 	andeq	r3, r0, r8, lsr #9
    10fc:	00003838 	andeq	r3, r0, r8, lsr r8
	...
	i_trigger ((aword)(&__input_pins));
    1108:	00003838 	andeq	r3, r0, r8, lsr r8
    110c:	00003860 	andeq	r3, r0, r0, ror #16
    1110:	00000001 	andeq	r0, r0, r1
    1114:	00000001 	andeq	r0, r0, r1
	...
    1120:	00003860 	andeq	r3, r0, r0, ror #16
    1124:	00003890 	muleq	r0, r0, r8
	...
	RISE_N_SHINE;
    1130:	00003890 	muleq	r0, r0, r8
    1134:	000038b0 			; <UNDEFINED> instruction: 0x000038b0
    1138:	000038b0 			; <UNDEFINED> instruction: 0x000038b0
}
    113c:	000038c8 	andeq	r3, r0, r8, asr #17
	...
    1148:	000038c8 	andeq	r3, r0, r8, asr #17
    114c:	000038d0 	ldrdeq	r3, [r0], -r0
void system_init () {
    1150:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1154:	00000001 	andeq	r0, r0, r1
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    1158:	000038d0 	ldrdeq	r3, [r0], -r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    115c:	000038d8 	ldrdeq	r3, [r0], -r8
    1160:	00000001 	andeq	r0, r0, r1
    1164:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1168:	00000001 	andeq	r0, r0, r1
    116c:	00000001 	andeq	r0, r0, r1
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1178:	0000393a 	andeq	r3, r0, sl, lsr r9
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    117c:	0000394a 	andeq	r3, r0, sl, asr #18
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1180:	00003950 	andeq	r3, r0, r0, asr r9
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1184:	00003952 	andeq	r3, r0, r2, asr r9
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1190:	000038d8 	ldrdeq	r3, [r0], -r8
		pin = (port_confs [i] >> 19) & 0x1f;
    1194:	00003934 	andeq	r3, r0, r4, lsr r9
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1198:	00003934 	andeq	r3, r0, r4, lsr r9
		pin = (port_confs [i] >> 19) & 0x1f;
    119c:	00003960 	andeq	r3, r0, r0, ror #18
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    11a0:	00000001 	andeq	r0, r0, r1
    11a4:	00000001 	andeq	r0, r0, r1
    11a8:	00003960 	andeq	r3, r0, r0, ror #18
    11ac:	00003978 	andeq	r3, r0, r8, ror r9
		if (port_confs [i] & 0x80)
    11b0:	00003978 	andeq	r3, r0, r8, ror r9
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    11b4:	000039d8 	ldrdeq	r3, [r0], -r8
    11b8:	000039d8 	ldrdeq	r3, [r0], -r8
		if (port_confs [i] & 0x40)
    11bc:	00003a0c 	andeq	r3, r0, ip, lsl #20
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11c0:	00000001 	andeq	r0, r0, r1
    11c4:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11c8:	00000001 	andeq	r0, r0, r1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    11cc:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11d0:	00000001 	andeq	r0, r0, r1
	all_leds_blink;
    11d4:	00000001 	andeq	r0, r0, r1
    11d8:	00000001 	andeq	r0, r0, r1
    11dc:	00000001 	andeq	r0, r0, r1
	...
    11e8:	00000001 	andeq	r0, r0, r1
    11ec:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11f0:	00003a0c 	andeq	r3, r0, ip, lsl #20
    11f4:	00003a34 	andeq	r3, r0, r4, lsr sl
    11f8:	00003a34 	andeq	r3, r0, r4, lsr sl
    11fc:	00003a80 	andeq	r3, r0, r0, lsl #21
    1200:	00003a80 	andeq	r3, r0, r0, lsl #21
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1204:	00003bd0 	ldrdeq	r3, [r0], -r0
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1208:	00003bd0 	ldrdeq	r3, [r0], -r0
    120c:	00003ce8 	andeq	r3, r0, r8, ror #25
	IntEnable (INT_AON_RTC_COMB);
    1210:	00003ce8 	andeq	r3, r0, r8, ror #25
    1214:	00003d08 	andeq	r3, r0, r8, lsl #26
    1218:	00000001 	andeq	r0, r0, r1
	__pi_malloc_init ();
    121c:	00000001 	andeq	r0, r0, r1
	IntEnable (INT_AON_GPIO_EDGE);
    1220:	00003d08 	andeq	r3, r0, r8, lsl #26
    1224:	00003d24 	andeq	r3, r0, r4, lsr #26
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1230:	00003d24 	andeq	r3, r0, r4, lsr #26
    1234:	00003df8 	strdeq	r3, [r0], -r8
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1238:	00003df8 	strdeq	r3, [r0], -r8
    123c:	00003e9c 	muleq	r0, ip, lr
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1248:	00003eaa 	andeq	r3, r0, sl, lsr #29
	urates [0] = UART_RATE / 100;
    124c:	00003eac 	andeq	r3, r0, ip, lsr #29
    1250:	00003eb0 			; <UNDEFINED> instruction: 0x00003eb0
	reinit_uart ();
    1254:	00003eb4 			; <UNDEFINED> instruction: 0x00003eb4
	...
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    1260:	000041b8 			; <UNDEFINED> instruction: 0x000041b8
    1264:	000041ba 			; <UNDEFINED> instruction: 0x000041ba
    1268:	000041bc 			; <UNDEFINED> instruction: 0x000041bc
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    126c:	000041be 			; <UNDEFINED> instruction: 0x000041be
	...
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1278:	00003e9c 	muleq	r0, ip, lr
			devinit [i] . init (devinit [i] . param);
    127c:	00003f18 	andeq	r3, r0, r8, lsl pc
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1280:	00003f18 	andeq	r3, r0, r8, lsl pc
    1284:	00003fc4 	andeq	r3, r0, r4, asr #31
    1288:	00003fc4 	andeq	r3, r0, r4, asr #31
	IntEnable (INT_UART0_COMB);
    128c:	00004020 	andeq	r4, r0, r0, lsr #32
    1290:	00004020 	andeq	r4, r0, r0, lsr #32
}
    1294:	00004038 	andeq	r4, r0, r8, lsr r0
	tci_run_auxiliary_timer ();
    1298:	00000001 	andeq	r0, r0, r1
		diag ("");
    129c:	00000001 	andeq	r0, r0, r1
    12a0:	00004038 	andeq	r4, r0, r8, lsr r0
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    12a4:	00004048 	andeq	r4, r0, r8, asr #32
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    12a8:	00004048 	andeq	r4, r0, r8, asr #32
		diag ("Leftover RAM: %d bytes",
    12ac:	0000405c 	andeq	r4, r0, ip, asr r0
    12b0:	0000405c 	andeq	r4, r0, ip, asr r0
    12b4:	000040c0 	andeq	r4, r0, r0, asr #1
    12b8:	000040c0 	andeq	r4, r0, r0, asr #1
    12bc:	000040d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    12c0:	000040d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    12c4:	000040e8 	andeq	r4, r0, r8, ror #1
    12c8:	000040e8 	andeq	r4, r0, r8, ror #1
    12cc:	000040fc 	strdeq	r4, [r0], -ip
    12d0:	000040fc 	strdeq	r4, [r0], -ip
    12d4:	00004124 	andeq	r4, r0, r4, lsr #2
    12d8:	00004124 	andeq	r4, r0, r4, lsr #2
    12dc:	00004134 	andeq	r4, r0, r4, lsr r1
    12e0:	00004134 	andeq	r4, r0, r4, lsr r1
    12e4:	00004160 	andeq	r4, r0, r0, ror #2
    12e8:	00004160 	andeq	r4, r0, r0, ror #2
    12ec:	00004174 	andeq	r4, r0, r4, ror r1
    12f0:	00004174 	andeq	r4, r0, r4, ror r1
    12f4:	00004188 	andeq	r4, r0, r8, lsl #3
    12f8:	00004188 	andeq	r4, r0, r8, lsl #3
    12fc:	00004298 	muleq	r0, r8, r2
    1300:	00004298 	muleq	r0, r8, r2
    1304:	000042fc 	strdeq	r4, [r0], -ip
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1308:	000042fc 	strdeq	r4, [r0], -ip
    130c:	00004324 	andeq	r4, r0, r4, lsr #6
    1310:	00004324 	andeq	r4, r0, r4, lsr #6
    1314:	00004474 	andeq	r4, r0, r4, ror r4
	...
    1320:	00000001 	andeq	r0, r0, r1
    1324:	00000001 	andeq	r0, r0, r1
}
    1328:	00000001 	andeq	r0, r0, r1
__attribute__ ((noreturn)) void __pi_release () {
    132c:	00000001 	andeq	r0, r0, r1
	...
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1338:	000044ea 	andeq	r4, r0, sl, ror #9
	check_stack_overflow;
    133c:	000044ec 	andeq	r4, r0, ip, ror #9
    1340:	000044ee 	andeq	r4, r0, lr, ror #9
    1344:	000044f2 	strdeq	r4, [r0], -r2
	...
	update_n_wake (MAX_WORD, NO);
    1350:	00000001 	andeq	r0, r0, r1
	for_all_tasks (__pi_curr) {
    1354:	00000001 	andeq	r0, r0, r1
    1358:	00004474 	andeq	r4, r0, r4, ror r4
    135c:	00004694 	muleq	r0, r4, r6
  __ASM volatile ("cpsid i" : : : "memory");
    1360:	00004694 	muleq	r0, r4, r6
	__SLEEP;
    1364:	000046f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    1368:	00000001 	andeq	r0, r0, r1
    136c:	00000001 	andeq	r0, r0, r1
    1370:	000046f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
	system_event_count ++;
    1374:	0000470c 	andeq	r4, r0, ip, lsl #14
	...
	switch (__pi_systat.effpdm) {
    1380:	0000475a 	andeq	r4, r0, sl, asr r7
    1384:	0000475e 	andeq	r4, r0, lr, asr r7
    1388:	00004764 	andeq	r4, r0, r4, ror #14
			__WFI ();
    138c:	00004766 	andeq	r4, r0, r6, ror #14
	...
	check_stack_overflow;
    1398:	0000475e 	andeq	r4, r0, lr, asr r7
    139c:	00004764 	andeq	r4, r0, r4, ror #14
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    13a0:	00004766 	andeq	r4, r0, r6, ror #14
    13a4:	0000476e 	andeq	r4, r0, lr, ror #14
	...
	for_all_tasks (__pi_curr) {
    13b0:	00000001 	andeq	r0, r0, r1
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    13b4:	00000001 	andeq	r0, r0, r1
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    13b8:	00000001 	andeq	r0, r0, r1
    13bc:	00000001 	andeq	r0, r0, r1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    13c0:	0000470c 	andeq	r4, r0, ip, lsl #14
    13c4:	00004758 	andeq	r4, r0, r8, asr r7
    13c8:	00000001 	andeq	r0, r0, r1
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    13cc:	00000001 	andeq	r0, r0, r1
    13d0:	00004758 	andeq	r4, r0, r8, asr r7
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    13d4:	000047c4 	andeq	r4, r0, r4, asr #15
    13d8:	000047c4 	andeq	r4, r0, r4, asr #15
			__WFI ();
    13dc:	000047da 	ldrdeq	r4, [r0], -sl
	...
}
    13e8:	000047dc 	ldrdeq	r4, [r0], -ip
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    13ec:	00004804 	andeq	r4, r0, r4, lsl #16
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    13f0:	00004804 	andeq	r4, r0, r4, lsl #16
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    13f4:	0000480c 	andeq	r4, r0, ip, lsl #16
    13f8:	00000001 	andeq	r0, r0, r1
			PRCMPowerDomainOff (__pi_systat.ondmns |
    13fc:	00000001 	andeq	r0, r0, r1
    1400:	00000001 	andeq	r0, r0, r1
    1404:	00000001 	andeq	r0, r0, r1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1408:	00000001 	andeq	r0, r0, r1
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    140c:	00000001 	andeq	r0, r0, r1
    1410:	00000001 	andeq	r0, r0, r1
    1414:	00000001 	andeq	r0, r0, r1
	...
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1428:	00000004 	andeq	r0, r0, r4
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    142c:	00000006 	andeq	r0, r0, r6
    1430:	0000000a 	andeq	r0, r0, sl
    1434:	00000026 	andeq	r0, r0, r6, lsr #32
    1438:	00000028 	andeq	r0, r0, r8, lsr #32
			SysCtrlSetRechargeBeforePowerDown
    143c:	00000038 	andeq	r0, r0, r8, lsr r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1440:	0000003e 	andeq	r0, r0, lr, lsr r0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1444:	00000040 	andeq	r0, r0, r0, asr #32
    1448:	00000042 	andeq	r0, r0, r2, asr #32
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    144c:	00000048 	andeq	r0, r0, r8, asr #32
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000cc1 	andeq	r0, r0, r1, asr #25
       4:	02760003 	rsbseq	r0, r6, #3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
    return node->data_base.item_array[index];
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
};
      1c:	2f727375 	svccs	0x00727375
      20:	2f62696c 	svccs	0x0062696c
      24:	2f636367 	svccs	0x00636367
      28:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      2c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
      30:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      34:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
      38:	2f312e32 	svccs	0x00312e32
      3c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
			i = k;
      40:	00656475 	rsbeq	r6, r5, r5, ror r4
				j->Next = k;
      44:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      48:	636e692f 	cmnvs	lr, #770048	; 0xbc000
}
      4c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      50:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
      54:	2f62696c 	svccs	0x0062696c
		release;
      58:	00737973 	rsbseq	r7, r3, r3, ror r9
      5c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffa8 <_estack+0xdfffafa8>
			nq++;
      60:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
      68:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      6c:	6f746b73 	svcvs	0x00746b73
      70:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
      74:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      78:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      7c:	2f534f43 	svccs	0x00534f43
      80:	4f636950 	svcmi	0x00636950
      84:	43432f53 	movtmi	r2, #16211	; 0x3f53
      88:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
      8c:	6f682f00 	svcvs	0x00682f00
	if (!button_still_pressed (__button_list [pbutton]))
      90:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
      94:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
      98:	442f6e65 	strtmi	r6, [pc], #-3685	; a0 <g_pfnVectors+0xa0>
	if (baction == NULL)
      9c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
      a0:	4f2f706f 	svcmi	0x002f706f
	(*baction) (pbutton);
      a4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
endthread
      a8:	502f5445 	eorpl	r5, pc, r5, asr #8
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	534f4349 	movtpl	r4, #62281	; 0xf349
      b0:	6369502f 	cmnvs	r9, #47	; 0x2f
endthread
      b4:	2f00534f 	svccs	0x0000534f
      b8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      bc:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
      c0:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
      c4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
fsm sender(struct ResponseMessage *message) {
      c8:	706f746b 	rsbvc	r7, pc, fp, ror #8
      cc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
      d0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
}
      d4:	4349502f 	movtmi	r5, #36911	; 0x902f
      d8:	502f534f 	eorpl	r5, pc, pc, asr #6
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	534f6369 	movtpl	r6, #62313	; 0xf369
      e0:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
      e4:	562f7362 	strtpl	r7, [pc], -r2, ror #6
      e8:	4974654e 	ldmdbmi	r4!, {r1, r2, r3, r6, r8, sl, sp, lr}^
		packet[0] = 0;
      ec:	6f682f00 	svcvs	0x00682f00
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
		*p = message->tpe;p++;
      f4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
      f8:	442f6e65 	strtmi	r6, [pc], #-3685	; 100 <_Min_Stack_Size>
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      fc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		*p = message->sender_id;p++;
     100:	4f2f706f 	svcmi	0x002f706f
		*p = message->receiver_id;p++;
     104:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
		switch(message->tpe) {
     108:	502f5445 	eorpl	r5, pc, r5, asr #8
     10c:	534f4349 	movtpl	r4, #62281	; 0xf349
     110:	6369502f 	cmnvs	r9, #47	; 0x2f
		tcv_endp(packet);
     114:	6b2f534f 	blvs	bd4e58 <__ccfg+0xbb4eb0>
     118:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
		ser_out(CONFIRM_message, "Message sent\r\n");
     11c:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
     120:	2f656d6f 	svccs	0x00656d6f
}
     124:	70657473 	rsbvc	r7, r5, r3, ror r4
		finish;
     128:	2f6e6568 	svccs	0x006e6568
     12c:	6b736544 	blvs	1cd9644 <__ccfg+0x1cb969c>
				*p = message->status;p++;
     130:	2f706f74 	svccs	0x00706f74
     134:	4f534c4f 	svcmi	0x00534c4f
				strncpy(p, message->record, sizeof(message->record));
     138:	2f54454e 	svccs	0x0054454e
				*p = message->padding;p++;
     13c:	4f434950 	svcmi	0x00434950
				strncpy(p, message->record, sizeof(message->record));
     140:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
				strncpy(p, message->record, sizeof(message->record));
     144:	2f534f63 	svccs	0x00534f63
     148:	62694c56 	rsbvs	r4, r9, #22016	; 0x5600
				strncpy(p, message->record, sizeof(message->record));
     14c:	6c502f73 	mrrcvs	15, 7, r2, r0, cr3
				*p = message->record_index;p++;
     150:	754e6775 	strbvc	r6, [lr, #-1909]	; 0xfffff88b
				*p = message->padding;
     154:	2e006c6c 	cdpcs	12, 0, cr6, cr0, cr12, {3}
				break;
     158:	6f682f00 	svcvs	0x00682f00
     15c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
     160:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     164:	442f6e65 	strtmi	r6, [pc], #-3685	; 16c <reset_array>
     168:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		node->nnodes[i] = 0;
     16c:	4f2f706f 	svcmi	0x002f706f
     170:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     174:	502f5445 	eorpl	r5, pc, r5, asr #8
     178:	534f4349 	movtpl	r4, #62281	; 0xf349
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     17c:	6369502f 	cmnvs	r9, #47	; 0x2f
bool init_node(struct Node* node){
     180:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    node->id  = 0;                  // default id value 0
     184:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    node->index = 0;                // default entry count 0
     188:	43432f58 	movtmi	r2, #16216	; 0x3f58
    node->data_base.item_count = 0; // default no items in array
     18c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
	reset_array(node);
     190:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    DEBUG_PRINT("Error initializing node...\n");
     194:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
     198:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
};
     19c:	00006269 	andeq	r6, r0, r9, ror #4
     1a0:	2e707061 	cdpcs	0, 7, cr7, cr0, cr1, {3}
uint8_t generate_request_num(void){
     1a4:	00006363 	andeq	r6, r0, r3, ror #6
    return (uint8_t) (rand() % 255);
     1a8:	74730000 	ldrbtvc	r0, [r3], #-0
     1ac:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     1b0:	0100682e 	tsteq	r0, lr, lsr #16
}
     1b4:	745f0000 	ldrbvc	r0, [pc], #-0	; 1bc <clear_node_neighbour_array+0x6>
            node->nnodes[i] = 0; // set to null byte
     1b8:	73657079 	cmnvc	r5, #121	; 0x79
     1bc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1c0:	65720000 	ldrbvs	r0, [r2, #-0]!
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1c4:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
};
     1c8:	00020068 	andeq	r0, r2, r8, rrx
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1cc:	636f6c00 	cmnvs	pc, #0, 24
     1d0:	00682e6b 	rsbeq	r2, r8, fp, ror #28
        node->data_base.item_array[index].data_entry[0] = '\0';
     1d4:	73000002 	movwvc	r0, #2
     1d8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     1dc:	00682e74 	rsbeq	r2, r8, r4, ror lr
        node->data_base.item_count -= 1;
     1e0:	73000001 	movwvc	r0, #1
};
     1e4:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
fsm receiver(struct Node* node_db) {
     1e8:	00682e67 	rsbeq	r2, r8, r7, ror #28
     1ec:	61000001 	tstvs	r0, r1
     1f0:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
     1f4:	00030068 	andeq	r0, r3, r8, rrx
     1f8:	63616d00 	cmnvs	r1, #0, 26
     1fc:	00682e68 	rsbeq	r2, r8, r8, ror #28
     200:	70000003 	andvc	r0, r0, r3
     204:	5f736e69 	svcpl	0x00736e69
		incoming_packet = tcv_rnp(receiving, sfd);
     208:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
     20c:	00030068 	andeq	r0, r3, r8, rrx
     210:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     214:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
     218:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
     21c:	0300682e 	movweq	r6, #2094	; 0x82e
     220:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
		switch (tpe){
     224:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
     228:	00040068 	andeq	r0, r4, r8, rrx
     22c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     230:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     234:	00682e73 	rsbeq	r2, r8, r3, ror lr
     238:	6b000005 	blvs	254 <receiver+0x6c>
     23c:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
				DEBUG_PRINT("\r\nRECEIVED GID: %u", discovery_request_message->gid);
     240:	00682e6c 	rsbeq	r2, r8, ip, ror #28
     244:	70000006 	andvc	r0, r0, r6
				DEBUG_PRINT("\rRECEIVED TYPE: %u", discovery_request_message->tpe);
     248:	5f67756c 	svcpl	0x0067756c
     24c:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
				DEBUG_PRINT("\r\nRECEIVED REQ NUM: %u", discovery_request_message->request_number);
     250:	0700682e 	streq	r6, [r0, -lr, lsr #16]
     254:	65680000 	strbvs	r0, [r8, #-0]!
				DEBUG_PRINT("\r\nRECEIVED SID: %u", discovery_request_message->sender_id);
     258:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
     25c:	7070682e 	rsbsvc	r6, r0, lr, lsr #16
				DEBUG_PRINT("\r\nRECEIVED RID: %u", discovery_request_message->receiver_id);
     260:	00000800 	andeq	r0, r0, r0, lsl #16
     264:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
				if (discovery_request_message->gid == node_db->gid){
     268:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
     26c:	00003e6e 	andeq	r3, r0, lr, ror #28
					response_message_0->gid = discovery_request_message->gid;
     270:	6f610000 	svcvs	0x00610000
					response_message_0->tpe = DISCOVERY_RESPONSE;
     274:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
					response_message_0->request_number = discovery_request_message->request_number;
     278:	00682e63 	rsbeq	r2, r8, r3, ror #28
					response_message_0->sender_id = node_db->id;
     27c:	00000009 	andeq	r0, r0, r9
					response_message_0->receiver_id = discovery_request_message->sender_id;
     280:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
					call sender(response_message_0, done_case);
     284:	0000c802 	andeq	ip, r0, r2, lsl #16
     288:	01b50300 			; <UNDEFINED> instruction: 0x01b50300
     28c:	011e0501 	tsteq	lr, r1, lsl #10
     290:	05016e05 	streq	r6, [r1, #-3589]	; 0xfffff1fb
     294:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
     298:	1305206e 	movwne	r2, #20590	; 0x506e
     29c:	4a370306 	bmi	dc0ebc <__ccfg+0xda0f14>
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
     2a0:	01060105 	tsteq	r6, r5, lsl #2
     2a4:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
     2a8:	2e490365 	cdpcs	3, 4, cr0, cr9, cr5, {3}
     2ac:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
     2b0:	207a0365 	rsbscs	r0, sl, r5, ror #6
     2b4:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
     2b8:	207a0337 	rsbscs	r0, sl, r7, lsr r3
     2bc:	21060205 	tstcs	r6, r5, lsl #4
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2c0:	15030514 	strne	r0, [r3, #-1300]	; 0xfffffaec
     2c4:	01060c05 	tsteq	r6, r5, lsl #24
     2c8:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
     2cc:	0a052306 	beq	148eec <__ccfg+0x128f44>
     2d0:	2406051c 	strcs	r0, [r6], #-1308	; 0xfffffae4
     2d4:	05220f05 	streq	r0, [r2, #-3845]!	; 0xfffff0fb
     2d8:	0f052e06 	svceq	0x00052e06
     2dc:	030a0521 	movweq	r0, #42273	; 0xa521
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     2e0:	03052079 	movweq	r2, #20601	; 0x5079
     2e4:	14132106 	ldrne	r2, [r3], #-262	; 0xfffffefa
					node_db->index+=1;
     2e8:	15051313 	strne	r1, [r5, #-787]	; 0xfffffced
		tcv_endp(incoming_packet);
     2ec:	13030501 	movwne	r0, #13569	; 0x3501
     2f0:	01060605 	tsteq	r6, r5, lsl #12
		proceed receiving;
     2f4:	20062005 	andcs	r2, r6, r5
     2f8:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
		ser_out(response_1_create, "\r\nData Saved");
     2fc:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
     300:	1b052006 	blne	148320 <__ccfg+0x128378>
		proceed receiving;
     304:	03052006 	movweq	r2, #20486	; 0x5006
		ser_out(response_1_delete, "\r\nRecord Deleted");
     308:	060f0513 			; <UNDEFINED> instruction: 0x060f0513
     30c:	20060501 	andcs	r0, r6, r1, lsl #10
		proceed receiving;
     310:	20061d05 	andcs	r1, r6, r5, lsl #26
     314:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     318:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
     31c:	1f030603 	svcne	0x00030603
     320:	054c4066 	strbeq	r4, [ip, #-102]	; 0xffffff9a
     324:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
		proceed receiving;
     328:	05052d03 	streq	r2, [r5, #-3331]	; 0xfffff2fd
     32c:	586e0306 	stmdapl	lr!, {r1, r2, r8, r9}^
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     330:	01061105 	tsteq	r6, r5, lsl #2
     334:	05230505 	streq	r0, [r3, #-1285]!	; 0xfffffafb
     338:	1a051d08 	bne	147760 <__ccfg+0x1277b8>
		proceed receiving;
     33c:	05052006 	streq	r2, [r5, #-6]
     340:	06110513 			; <UNDEFINED> instruction: 0x06110513
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     344:	22050501 	andcs	r0, r5, #4194304	; 0x400000
     348:	052c0805 	streq	r0, [ip, #-2053]!	; 0xfffff7fb
     34c:	0520061b 	streq	r0, [r0, #-1563]!	; 0xfffff9e5
		proceed receiving;
     350:	6f031405 	svcvs	0x00031405
     354:	1103062e 	tstne	r3, lr, lsr #12
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     358:	032f064a 			; <UNDEFINED> instruction: 0x032f064a
     35c:	11052075 	tstne	r5, r5, ror r0
     360:	08050106 	stmdaeq	r5, {r1, r2, r8}
		proceed receiving;
     364:	06200520 	strteq	r0, [r0], -r0, lsr #10
     368:	13050520 	movwne	r0, #21792	; 0x5520
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     36c:	01061105 	tsteq	r6, r5, lsl #2
		proceed receiving;
     370:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
     374:	02210605 	eoreq	r0, r1, #5242880	; 0x500000
}
     378:	0101000a 	tsteq	r1, sl
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     37c:	05002f05 	streq	r2, [r0, #-3845]	; 0xfffff0fb
     380:	00000002 	andeq	r0, r0, r2
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     384:	01230300 			; <UNDEFINED> instruction: 0x01230300
     388:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
     38c:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
     390:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     394:	02130601 	andseq	r0, r3, #1048576	; 0x100000
     398:	01010002 	tsteq	r1, r2
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     39c:	05003205 	streq	r3, [r0, #-517]	; 0xfffffdfb
     3a0:	00000002 	andeq	r0, r0, r2
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     3a4:	01280300 			; <UNDEFINED> instruction: 0x01280300
     3a8:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
     3ac:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     3b0:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
     3b4:	02130601 	andseq	r0, r3, #1048576	; 0x100000
     3b8:	01010002 	tsteq	r1, r2
		strncpy(response_message->record, rec, 20);
     3bc:	05003e05 	streq	r3, [r0, #-3589]	; 0xfffff1fb
     3c0:	00000002 	andeq	r0, r0, r2
     3c4:	012e0300 			; <UNDEFINED> instruction: 0x012e0300
					call sender(response_message_4, done_case);
     3c8:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3cc:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
     3d0:	052f0605 	streq	r0, [pc, #-1541]!	; fffffdd3 <_estack+0xdfffadd3>
     3d4:	02130601 	andseq	r0, r3, #1048576	; 0x100000
     3d8:	01010002 	tsteq	r1, r2
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     3dc:	05002505 	streq	r2, [r0, #-1285]	; 0xfffffafb
     3e0:	00016c02 	andeq	r6, r1, r2, lsl #24
					if (delete_record(node_db, delete_record_message->record_index)){
     3e4:	01350300 	teqeq	r5, r0, lsl #6
     3e8:	05130205 	ldreq	r0, [r3, #-517]	; 0xfffffdfb
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3ec:	10050107 	andne	r0, r5, r7, lsl #2
     3f0:	06130501 	ldreq	r0, [r3], -r1, lsl #10
     3f4:	06030513 			; <UNDEFINED> instruction: 0x06030513
     3f8:	06130558 			; <UNDEFINED> instruction: 0x06130558
     3fc:	06160501 	ldreq	r0, [r6], -r1, lsl #10
     400:	0110052d 	tsteq	r0, sp, lsr #10
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     404:	01060205 	tsteq	r6, r5, lsl #4
     408:	02310105 	eorseq	r0, r1, #1073741825	; 0x40000001
    return node->data_base.item_array[index];
     40c:	01010001 	tsteq	r1, r1
     410:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
     414:	00018002 	andeq	r8, r1, r2
     418:	01100300 	tsteq	r0, r0, lsl #6
     41c:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     420:	05110621 	ldreq	r0, [r1, #-1569]	; 0xfffff9df
    return node->data_base.item_array[index];
     424:	0505210e 	streq	r2, [r5, #-270]	; 0xfffffef2
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     428:	0f052f06 	svceq	0x00052f06
     42c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     430:	11052106 	tstne	r5, r6, lsl #2
		strncpy(response_message->record, rec, 20);
     434:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     438:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     43c:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     440:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
     444:	3d153305 	ldccc	3, cr3, [r5, #-20]	; 0xffffffec
     448:	13060105 	movwne	r0, #24837	; 0x6105
     44c:	01000502 	tsteq	r0, r2, lsl #10
     450:	00230501 	eoreq	r0, r3, r1, lsl #10
     454:	01a40205 			; <UNDEFINED> instruction: 0x01a40205
				if(!response_flag){
     458:	3c030000 	stccc	0, cr0, [r3], {-0}
					response_flag=1;
     45c:	13050501 	movwne	r0, #21761	; 0x5501
					trigger(&response_flag);
     460:	11062305 	tstne	r6, r5, lsl #6
				switch(response_message_5->status){
     464:	05211705 	streq	r1, [r1, #-1797]!	; 0xfffff8fb
     468:	01052e1e 	tsteq	r5, lr, lsl lr
     46c:	0002024b 	andeq	r0, r2, fp, asr #4
     470:	48050101 	stmdami	r5, {r0, r8}
     474:	00020500 	andeq	r0, r2, r0, lsl #10
     478:	03000000 	movweq	r0, #0
     47c:	050100c1 	streq	r0, [r1, #-193]	; 0xffffff3f
     480:	05151505 	ldreq	r1, [r5, #-1285]	; 0xfffffafb
     484:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     488:	2e170301 	cdpcs	3, 1, cr0, cr7, cr1, {0}
     48c:	01000402 	tsteq	r0, r2, lsl #8
     490:	00320501 	eorseq	r0, r2, r1, lsl #10
     494:	01b60205 			; <UNDEFINED> instruction: 0x01b60205
     498:	e1030000 	mrs	r0, (UNDEF: 3)
     49c:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
     4a0:	15090514 	strne	r0, [r9, #-1300]	; 0xfffffaec
     4a4:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
     4a8:	1d050119 	stfnes	f0, [r5, #-100]	; 0xffffff9c
     4ac:	0d051306 	stceq	3, cr1, [r5, #-24]	; 0xffffffe8
     4b0:	1d055806 	stcne	8, cr5, [r5, #-24]	; 0xffffffe8
     4b4:	21050106 	tstcs	r5, r6, lsl #2
     4b8:	19052d06 	stmdbne	r5, {r1, r2, r8, sl, fp, sp}
     4bc:	06090501 	streq	r0, [r9], -r1, lsl #10
     4c0:	060a0501 	streq	r0, [sl], -r1, lsl #10
     4c4:	13090530 	movwne	r0, #38192	; 0x9530
     4c8:	17060105 	strne	r0, [r6, -r5, lsl #2]
     4cc:	01000202 	tsteq	r0, r2, lsl #4
     4d0:	00340501 	eorseq	r0, r4, r1, lsl #10
     4d4:	01cc0205 	biceq	r0, ip, r5, lsl #4
     4d8:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
						if (response_checker[0] == response_message_5->request_number){
     4dc:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
     4e0:	06180515 			; <UNDEFINED> instruction: 0x06180515
     4e4:	2e080501 	cfsh32cs	mvfx0, mvfx8, #1
							switch(response_checker[1]){
     4e8:	24060905 	strcs	r0, [r6], #-2309	; 0xfffff6fb
     4ec:	01063905 	tsteq	r6, r5, lsl #18
     4f0:	054c2405 	strbeq	r2, [ip, #-1029]	; 0xfffffbfb
     4f4:	09051e39 	stmdbeq	r5, {r0, r3, r4, r5, r9, sl, fp, ip}
									proceed response_1_create;
     4f8:	35052106 	strcc	r2, [r5, #-262]	; 0xfffffefa
						proceed response_2;
     4fc:	09050106 	stmdbeq	r5, {r1, r2, r8}
									proceed response_1_delete;
     500:	24052106 	strcs	r2, [r5], #-262	; 0xfffffefa
									proceed response_1_retrieve;
     504:	06050106 	streq	r0, [r5], -r6, lsl #2
						proceed response_2;
     508:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
						proceed response_3;
     50c:	13060515 	movwne	r0, #25877	; 0x6515
						proceed response_4;
     510:	15060105 	strne	r0, [r6, #-261]	; 0xfffffefb
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     514:	01000202 	tsteq	r0, r2, lsl #4
     518:	001e0501 	andseq	r0, lr, r1, lsl #10
}
     51c:	01e80205 	mvneq	r0, r5, lsl #4
     520:	ef030000 	svc	0x00030000
     524:	20050101 	andcs	r0, r5, r1, lsl #2
     528:	061e0501 	ldreq	r0, [lr], -r1, lsl #10
bool delete_all(struct Node *node){
     52c:	20510501 	subscs	r0, r1, r1, lsl #10
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     530:	05201e05 	streq	r1, [r0, #-3589]!	; 0xfffff1fb
        for(int i = 0; i <= node->data_base.item_count; i++){
     534:	5a052051 	bpl	148680 <__ccfg+0x1286d8>
            node->data_base.item_array[i].data_entry[0] = '\0';
     538:	02052e06 	andeq	r2, r5, #6, 28	; 0x60
        for(int i = 0; i <= node->data_base.item_count; i++){
     53c:	0513149f 	ldreq	r1, [r3, #-1183]	; 0xfffffb61
            node->data_base.item_array[i].timestamp = 0;
     540:	15051603 	strne	r1, [r5, #-1539]	; 0xfffff9fd
        for(int i = 0; i <= node->data_base.item_count; i++){
     544:	13050106 	movwne	r0, #20742	; 0x5106
    node->data_base.item_count = 0;
     548:	06030558 			; <UNDEFINED> instruction: 0x06030558
}
     54c:	18051330 	stmdane	r5, {r4, r5, r8, r9, ip}
        return true;
     550:	03050106 	movweq	r0, #20742	; 0x5106
fsm root {
     554:	05148406 	ldreq	r8, [r4, #-1030]	; 0xfffffbfa
     558:	03050104 	movweq	r0, #20740	; 0x5104
     55c:	031c0514 	tsteq	ip, #20, 10	; 0x5000000
     560:	0505c80e 	streq	ip, [r5, #-2062]	; 0xfffff7f2
     564:	72051414 	andvc	r1, r5, #20, 8	; 0x14000000
     568:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     56c:	4b4b2306 	blmi	12c918c <__ccfg+0x12a91e4>
     570:	054d4b4b 	strbeq	r4, [sp, #-2891]	; 0xfffff4b5
     574:	05010622 	streq	r0, [r1, #-1570]	; 0xfffff9de
     578:	06052008 	streq	r2, [r5], -r8
     57c:	1e053d06 	cdpne	13, 0, cr3, cr5, cr6, {0}
     580:	06050106 	streq	r0, [r5], -r6, lsl #2
     584:	1e052f06 	cdpne	15, 0, cr2, cr5, cr6, {0}
     588:	06050106 	streq	r0, [r5], -r6, lsl #2
     58c:	44052f06 	strmi	r2, [r5], #-3846	; 0xfffff0fa
     590:	29050106 	stmdbcs	r5, {r1, r2, r8}
     594:	06060520 	streq	r0, [r6], -r0, lsr #10
     598:	062d0521 	strteq	r0, [sp], -r1, lsr #10
     59c:	20240501 	eorcs	r0, r4, r1, lsl #10
     5a0:	21060605 	tstcs	r6, r5, lsl #12
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     5a4:	01064105 	tsteq	r6, r5, lsl #2
     5a8:	05202605 	streq	r2, [r0, #-1541]!	; 0xfffff9fb
     5ac:	05230606 	streq	r0, [r3, #-1542]!	; 0xfffff9fa
		init_node(node_db);
     5b0:	0f05010b 	svceq	0x0005010b
		phys_cc1350(0, MAX_PKT_LEN);
     5b4:	0e050106 	adfeqs	f0, f5, f6
     5b8:	06590566 	ldrbeq	r0, [r9], -r6, ror #10
		tcv_plug (0, &plug_null);
     5bc:	031d0520 	tsteq	sp, #32, 10	; 0x8000000
     5c0:	05052e0d 	streq	r2, [r5, #-3597]	; 0xfffff1f3
		sfd = tcv_open (WNONE, 0, 0);
     5c4:	066d0514 			; <UNDEFINED> instruction: 0x066d0514
     5c8:	06050501 	streq	r0, [r5], -r1, lsl #10
     5cc:	4b4b4b23 	blmi	12d3260 <__ccfg+0x12b32b8>
     5d0:	25054c4b 	strcs	r4, [r5, #-3147]	; 0xfffff3b5
     5d4:	64050106 	strvs	r0, [r5], #-262	; 0xfffffefa
			diag("Cannot open tcv interface");
     5d8:	20750566 	rsbscs	r0, r5, r6, ror #10
     5dc:	3c3c2505 	cfldr32cc	mvfx2, [ip], #-20	; 0xffffffec
			halt();
     5e0:	3e060505 	cfsh32cc	mvfx0, mvfx6, #5
		tcv_control(sfd, PHYSOPT_ON, NULL);
     5e4:	01060805 	tsteq	r6, r5, lsl #16
     5e8:	3d060605 	stccc	6, cr0, [r6, #-20]	; 0xffffffec
		runfsm receiver(node_db);
     5ec:	01061405 	tsteq	r6, r5, lsl #8
     5f0:	03060305 	movweq	r0, #25349	; 0x6305
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     5f4:	4b3c019a 	blmi	f00c64 <__ccfg+0xee0cbc>
     5f8:	4b3e4b40 	blmi	f93300 <__ccfg+0xf73358>
     5fc:	0656053e 			; <UNDEFINED> instruction: 0x0656053e
     600:	20030501 	andcs	r0, r3, r1, lsl #10
     604:	05205605 	streq	r5, [r0, #-1541]!	; 0xfffff9fb
     608:	67062003 	strvs	r2, [r6, -r3]
		ser_inf(get_choice, "%c", &CHOICE);
     60c:	06560540 	ldrbeq	r0, [r6], -r0, asr #10
     610:	20030501 	andcs	r0, r3, r1, lsl #10
     614:	05205605 	streq	r5, [r0, #-1541]!	; 0xfffff9fb
		switch(CHOICE) {
     618:	4b062003 	blmi	18862c <__ccfg+0x168684>
     61c:	0657053e 			; <UNDEFINED> instruction: 0x0657053e
     620:	20030501 	andcs	r0, r3, r1, lsl #10
     624:	05205705 	streq	r5, [r0, #-1797]!	; 0xfffff8fb
     628:	4b062003 	blmi	18863c <__ccfg+0x168694>
     62c:	0656053e 			; <UNDEFINED> instruction: 0x0656053e
     630:	20030501 	andcs	r0, r3, r1, lsl #10
     634:	05205605 	streq	r5, [r0, #-1541]!	; 0xfffff9fb
     638:	4b062003 	blmi	18864c <__ccfg+0x1686a4>
     63c:	01053f40 	tsteq	r5, r0, asr #30
     640:	0318053e 	tsteq	r8, #260046848	; 0xf800000
     644:	052e7ece 	streq	r7, [lr, #-3790]!	; 0xfffff132
				proceed menu;
     648:	05131305 	ldreq	r1, [r3, #-773]	; 0xfffffcfb
     64c:	05010666 	streq	r0, [r1, #-1638]	; 0xfffff99a
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     650:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
     654:	4b151305 	blmi	545270 <__ccfg+0x5252c8>
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     658:	4b4b4b4b 	blmi	12d338c <__ccfg+0x12b33e4>
     65c:	0636055b 			; <UNDEFINED> instruction: 0x0636055b
     660:	20080501 	andcs	r0, r8, r1, lsl #10
		DEBUG_PRINT("setting node group ID");
     664:	053c3b05 	ldreq	r3, [ip, #-2821]!	; 0xfffff4fb
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     668:	25030607 	strcs	r0, [r3, #-1543]	; 0xfffff9f9
    node->gid = gid; 
     66c:	1406053c 	strne	r0, [r6], #-1340	; 0xfffffac4
		proceed menu;
     670:	a4030205 	strge	r0, [r3], #-517	; 0xfffffdfb
     674:	1314017e 	tstne	r4, #-2147483617	; 0x8000001f
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     678:	13131313 	tstne	r3, #1275068416	; 0x4c000000
     67c:	14030513 	strne	r0, [r3], #-1299	; 0xfffffaed
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     680:	05130205 	ldreq	r0, [r3, #-517]	; 0xfffffdfb
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     684:	05591303 	ldrbeq	r1, [r9, #-771]	; 0xfffffcfd
     688:	07051402 	streq	r1, [r5, -r2, lsl #8]
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     68c:	0101ea03 	tsteq	r1, r3, lsl #20
     690:	05130605 	ldreq	r0, [r3, #-1541]	; 0xfffff9fb
		if((node_db->id < 1) || (node_db->id > 25)){
     694:	0f05010b 	svceq	0x0005010b
     698:	18050106 	stmdane	r5, {r1, r2, r8}
     69c:	2e4f0306 	cdpcs	3, 4, cr0, cr15, cr6, {0}
			strncpy(reason, "Out of Range", 50);
     6a0:	13130505 	tstne	r3, #20971520	; 0x1400000
     6a4:	01066605 	tsteq	r6, r5, lsl #12
			proceed invalid_node_id;
     6a8:	23060505 	movwcs	r0, #25861	; 0x6505
     6ac:	01060805 	tsteq	r6, r5, lsl #16
				strncpy(reason, "ID is already in use", 50);
     6b0:	054a3405 	strbeq	r3, [sl, #-1029]	; 0xfffffbfb
		for(int i = 0; i < node_db->index; i++){
     6b4:	054c0606 	strbeq	r0, [ip, #-1542]	; 0xfffff9fa
     6b8:	49051505 	stmdbmi	r5, {r0, r2, r8, sl, ip}
     6bc:	08050106 	stmdaeq	r5, {r1, r2, r8}
		proceed menu;
     6c0:	06060520 	streq	r0, [r6], -r0, lsr #10
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     6c4:	060a0531 			; <UNDEFINED> instruction: 0x060a0531
     6c8:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
     6cc:	054a0e03 	strbeq	r0, [sl, #-3587]	; 0xfffff1fd
     6d0:	13131305 	tstne	r3, #335544320	; 0x14000000
		proceed get_new_node_id;
     6d4:	06080515 			; <UNDEFINED> instruction: 0x06080515
     6d8:	66340501 	ldrtvs	r0, [r4], -r1, lsl #10
		if (!clear_node_neighbour_array(node_db)){
     6dc:	68060605 	stmdavs	r6, {r0, r2, r9, sl}
     6e0:	05150505 	ldreq	r0, [r5, #-1285]	; 0xfffffafb
			strncpy(reason, "Error Clearing Node Array", 50);
     6e4:	0501064d 	streq	r0, [r1, #-1613]	; 0xfffff9b3
     6e8:	06052e08 	streq	r2, [r5], -r8, lsl #28
     6ec:	05053d06 	streq	r3, [r5, #-3334]	; 0xfffff2fa
			proceed error;
     6f0:	017df703 	cmneq	sp, r3, lsl #14	; <UNPREDICTABLE>
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     6f4:	01062605 	tsteq	r6, r5, lsl #12
     6f8:	89031905 	stmdbhi	r3, {r0, r2, r8, fp, ip}
		request_packet->gid = node_db->gid;
     6fc:	26059002 	strcs	r9, [r5], -r2
     700:	2e7df703 	cdpcs	7, 7, cr15, cr13, cr3, {0}
		request_packet->tpe = DISCOVERY_REQUEST;
     704:	89031905 	stmdbhi	r3, {r0, r2, r8, fp, ip}
		request_packet->request_number = generate_request_num();
     708:	06052e02 	streq	r2, [r5], -r2, lsl #28
     70c:	07056706 	streq	r6, [r5, -r6, lsl #14]
		call sender(request_packet, wait_discovery);
     710:	02051317 	andeq	r1, r5, #1543503872	; 0x5c000000
     714:	017e8903 	cmneq	lr, r3, lsl #18
		request_packet->receiver_id=0;
     718:	13131314 	tstne	r3, #20, 6	; 0x50000000
		call sender(request_packet, wait_discovery);
     71c:	05131313 	ldreq	r1, [r3, #-787]	; 0xfffffced
     720:	02051403 	andeq	r1, r5, #50331648	; 0x3000000
     724:	13030513 	movwne	r0, #13587	; 0x3513
			release;
     728:	f3031305 	vcgt.u8	d1, d3, d5
				proceed get_new_node_id;
     72c:	05054a01 	streq	r4, [r5, #-2561]	; 0xfffff5ff
				proceed clear_neighbour_array;
     730:	06430513 			; <UNDEFINED> instruction: 0x06430513
				proceed create_proto_start;
     734:	20180501 	andscs	r0, r8, r1, lsl #10
				proceed start_delete_proto;
     738:	05204305 	streq	r4, [r0, #-773]!	; 0xfffffcfb
				proceed retrieve_proto;
     73c:	18052308 	stmdane	r5, {r3, r8, r9, sp}
				proceed display_db;
     740:	0605051d 			; <UNDEFINED> instruction: 0x0605051d
				proceed del_local;
     744:	06080523 	streq	r0, [r8], -r3, lsr #10
			if(node_db->id == node_db->nnodes[i]){
     748:	4a310501 	bmi	c41b54 <__ccfg+0xc21bac>
     74c:	5a060605 	bpl	181f68 <__ccfg+0x161fc0>
     750:	05140505 	ldreq	r0, [r4, #-1285]	; 0xfffffafb
				strncpy(reason, "ID is already in use", 50);
     754:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     758:	06052007 	streq	r2, [r5], -r7
				proceed invalid_node_id;
     75c:	13052f06 	movwne	r2, #24326	; 0x5f06
     760:	06050106 	streq	r0, [r5], -r6, lsl #2
		for(int i = 0; i < node_db->index; i++){
     764:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
		if (discovery_wait_flag == 0){
     768:	061e0531 			; <UNDEFINED> instruction: 0x061e0531
			discovery_wait_flag=1;
     76c:	06070501 	streq	r0, [r7], -r1, lsl #10
     770:	05173c02 	ldreq	r3, [r7, #-3074]	; 0xfffff3fe
			delay(3000, find_proto_start);
     774:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
     778:	0a052034 	beq	148850 <__ccfg+0x1288a8>
		if (discovery_wait_flag == 1){
     77c:	06080520 	streq	r0, [r8], -r0, lsr #10
			discovery_wait_flag=0;
     780:	061f054b 	ldreq	r0, [pc], -fp, asr #10
     784:	060a0501 	streq	r0, [sl], -r1, lsl #10
			delay(3000, display_neighbour_nodes);
     788:	06070584 	streq	r0, [r7], -r4, lsl #11
     78c:	06200e03 	strteq	r0, [r0], -r3, lsl #28
     790:	030a052f 	movweq	r0, #42287	; 0xa52f
     794:	05312074 	ldreq	r2, [r1, #-116]!	; 0xffffff8c
     798:	31313607 	teqcc	r1, r7, lsl #12
     79c:	0b030505 	bleq	c1bb8 <__ccfg+0xa1c10>
     7a0:	04053d2e 	streq	r3, [r5], #-3374	; 0xfffff2d2
     7a4:	06050514 			; <UNDEFINED> instruction: 0x06050514
     7a8:	06130510 			; <UNDEFINED> instruction: 0x06130510
     7ac:	05202403 	streq	r2, [r0, #-1027]!	; 0xfffffbfd
     7b0:	022e0601 	eoreq	r0, lr, #1048576	; 0x100000
     7b4:	01010006 	tsteq	r1, r6
     7b8:	05004005 	streq	r4, [r0, #-5]
     7bc:	00000002 	andeq	r0, r0, r2
     7c0:	01850300 	orreq	r0, r5, r0, lsl #6
     7c4:	15050501 	strne	r0, [r5, #-1281]	; 0xfffffaff
     7c8:	0f064005 	svceq	0x00064005
     7cc:	05232605 	streq	r2, [r3, #-1541]!	; 0xfffff9fb
     7d0:	26052b40 	strcs	r2, [r5], -r0, asr #22
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     7d4:	92010523 	andls	r0, r1, #146800640	; 0x8c00000
     7d8:	01000202 	tsteq	r0, r2, lsl #4
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7dc:	00220501 	eoreq	r0, r2, r1, lsl #10
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     7e0:	052c0205 	streq	r0, [ip, #-517]!	; 0xfffffdfb
			if (node_db->nnodes[i] == 0) break;
     7e4:	8d030000 	stchi	0, cr0, [r3, #-0]
     7e8:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     7ec:	06220515 			; <UNDEFINED> instruction: 0x06220515
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7f0:	2318050f 	tstcs	r8, #62914560	; 0x3c00000
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     7f4:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7f8:	39052311 	stmdbcc	r5, {r0, r4, r8, r9, sp}
		proceed menu;
     7fc:	060d052f 	streq	r0, [sp], -pc, lsr #10
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     800:	063a0520 	ldrteq	r0, [sl], -r0, lsr #10
     804:	20090511 	andcs	r0, r9, r1, lsl r5
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     808:	05213905 	streq	r3, [r1, #-2309]!	; 0xfffff6fb
     80c:	0521060d 	streq	r0, [r1, #-1549]!	; 0xfffff9f3
     810:	05010635 	streq	r0, [r1, #-1589]	; 0xfffff9cb
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     814:	052c0639 	streq	r0, [ip, #-1593]!	; 0xfffff9c7
     818:	09050118 	stmdbeq	r5, {r3, r4, r8}
			strncpy(reason, "Error: improper ID", 50);
     81c:	06050106 	streq	r0, [r5], -r6, lsl #2
     820:	05052406 	streq	r2, [r5, #-1030]	; 0xfffffbfa
     824:	06200513 			; <UNDEFINED> instruction: 0x06200513
			proceed error;
     828:	06050501 	streq	r0, [r5], -r1, lsl #10
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     82c:	13060530 	movwne	r0, #25904	; 0x6530
     830:	01060c05 	tsteq	r6, r5, lsl #24
		ser_in(get_record_to_create, user_provided_record, 20);
     834:	05230105 	streq	r0, [r3, #-261]!	; 0xfffffefb
     838:	2073030f 	rsbscs	r0, r3, pc, lsl #6
     83c:	01000202 	tsteq	r0, r2, lsl #4
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     840:	01af0501 			; <UNDEFINED> instruction: 0x01af0501
		create_message->gid = node_db->gid;
     844:	00020500 	andeq	r0, r2, r0, lsl #10
     848:	03000000 	movweq	r0, #0
     84c:	050101a0 	streq	r0, [r1, #-416]	; 0xfffffe60
		create_message->tpe = 2;
     850:	13141302 	tstne	r4, #134217728	; 0x8000000
		create_message->request_number = generate_request_num();
     854:	13131313 	tstne	r3, #1275068416	; 0x4c000000
		create_message->sender_id = node_db->id;
     858:	14030513 	strne	r0, [r3], #-1299	; 0xfffffaed
     85c:	05130205 	ldreq	r0, [r3, #-517]	; 0xfffffdfb
     860:	030601af 	movweq	r0, #25007	; 0x61af
		strncpy(create_message->record, user_provided_record, 20);
     864:	05200174 	streq	r0, [r0, #-372]!	; 0xfffffe8c
		create_message->receiver_id = user_provided_receiver_id;
     868:	200c0305 	andcs	r0, ip, r5, lsl #6
		strncpy(create_message->record, user_provided_record, 20);
     86c:	21060305 	tstcs	r6, r5, lsl #6
		response_checker[0] = create_message->request_number;
     870:	1402054b 	strne	r0, [r2], #-1355	; 0xfffffab5
		call sender(create_message, wait);
     874:	14060105 	strne	r0, [r6], #-261	; 0xfffffefb
		response_checker[1] = create_message->tpe;
     878:	01000202 	tsteq	r0, r2, lsl #4
     87c:	001a0501 	andseq	r0, sl, r1, lsl #10
		call sender(create_message, wait);
     880:	05540205 	ldrbeq	r0, [r4, #-517]	; 0xfffffdfb
     884:	fb030000 	blx	c088e <__ccfg+0xa08e6>
     888:	1c050103 	stfnes	f0, [r5], {3}
     88c:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     890:	06020501 	streq	r0, [r2], -r1, lsl #10
     894:	13182802 	tstne	r8, #131072	; 0x20000
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     898:	03051313 	movweq	r1, #21267	; 0x5313
     89c:	0626051a 			; <UNDEFINED> instruction: 0x0626051a
     8a0:	4a0b0501 	bmi	2c1cac <__ccfg+0x2a1d04>
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     8a4:	31060305 	tstcc	r6, r5, lsl #6
     8a8:	4a0e0330 	bmi	381570 <__ccfg+0x3615c8>
			strncpy(reason, "Error: improper node ID", 50);
     8ac:	054a1103 	strbeq	r1, [sl, #-259]	; 0xfffffefd
     8b0:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
			proceed error;
     8b4:	06056607 	streq	r6, [r5], -r7, lsl #12
     8b8:	1e070522 	cfsh32ne	mvfx0, mvfx7, #18
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     8bc:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
     8c0:	01060605 	tsteq	r6, r5, lsl #12
		ser_inf(get_index_for_delete, "%d", &user_provided_index);
     8c4:	21060405 	tstcs	r6, r5, lsl #8
     8c8:	03052f3d 	movweq	r2, #24381	; 0x5f3d
     8cc:	054d4c1a 	strbeq	r4, [sp, #-3098]	; 0xfffff3e6
		if (user_provided_index < 0 || user_provided_index > 40){
     8d0:	2006029e 	mulcs	r6, lr, r2
			strncpy(reason, "Error: invalid index", 50);
     8d4:	062e0305 	strteq	r0, [lr], -r5, lsl #6
     8d8:	050567a1 	streq	r6, [r5, #-1953]	; 0xfffff85f
     8dc:	66082303 	strvs	r2, [r8], -r3, lsl #6
			proceed error;
     8e0:	062e6003 	strteq	r6, [lr], -r3
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     8e4:	06202003 	strteq	r2, [r0], -r3
     8e8:	1603052f 	strne	r0, [r3], -pc, lsr #10
		delete_record->gid = node_db->gid;
     8ec:	3e5a134e 	cdpcc	3, 5, cr1, cr10, cr14, {2}
     8f0:	01060805 	tsteq	r6, r5, lsl #16
     8f4:	b2030f05 	andlt	r0, r3, #5, 30
		delete_record->tpe = DELETE_RECORD;
     8f8:	0805207b 	stmdaeq	r5, {r0, r1, r3, r4, r5, r6, sp}
		delete_record->request_number = generate_request_num();
     8fc:	2e04ce03 	cdpcs	14, 0, cr12, cr4, cr3, {0}
     900:	03060505 	movweq	r0, #25861	; 0x6505
		delete_record->sender_id = node_db->id;
     904:	05207bb2 	streq	r7, [r0, #-2994]!	; 0xfffff44e
		response_checker[0] = delete_record->request_number;
     908:	d4030603 	strle	r0, [r3], #-1539	; 0xfffff9fd
		delete_record->receiver_id = user_provided_receiver_id;
     90c:	0f050104 	svceq	0x00050104
     910:	207bac03 	rsbscs	sl, fp, r3, lsl #24
		delete_record->record_index = user_provided_index;
     914:	21060505 	tstcs	r6, r5, lsl #10
     918:	d1030405 	tstle	r3, r5, lsl #8
		response_checker[0] = delete_record->request_number;
     91c:	03050104 	movweq	r0, #20740	; 0x5104
		call sender(&delete_record, wait);
     920:	134d3114 	movtne	r3, #53524	; 0xd114
     924:	15060805 	strne	r0, [r6, #-2053]	; 0xfffff7fb
     928:	061d0305 	ldreq	r0, [sp], -r5, lsl #6
     92c:	0608055b 			; <UNDEFINED> instruction: 0x0608055b
     930:	06050501 	streq	r0, [r5], -r1, lsl #10
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     934:	3c7b9d03 	ldclcc	13, cr9, [fp], #-12
     938:	01060e05 	tsteq	r6, r5, lsl #28
		ser_inf(get_id_for_retrieve, "%d", &user_provided_receiver_id);
     93c:	21060505 	tstcs	r6, r5, lsl #10
     940:	e5030405 	str	r0, [r3, #-1029]	; 0xfffffbfb
     944:	03050104 	movweq	r0, #20740	; 0x5104
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     948:	060e0515 			; <UNDEFINED> instruction: 0x060e0515
     94c:	20180501 	andscs	r0, r8, r1, lsl #10
			strncpy(reason, "Error: improper node ID", 50);
     950:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
     954:	593d0604 	ldmdbpl	sp!, {r2, r9, sl}
     958:	03061a05 	movweq	r1, #27141	; 0x6a05
			proceed error;
     95c:	053c7eec 	ldreq	r7, [ip, #-3820]!	; 0xfffff114
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     960:	019a0305 	orrseq	r0, sl, r5, lsl #6
     964:	06120520 	ldreq	r0, [r2], -r0, lsr #10
		ser_inf(get_index_for_retrieve, "%d", &user_provided_index);
     968:	061d052c 	ldreq	r0, [sp], -ip, lsr #10
     96c:	3c030501 	cfstr32cc	mvfx0, [r3], {1}
     970:	33060405 	movwcc	r0, #25605	; 0x6405
		if (user_provided_index < 0 || user_provided_index > 40){
     974:	41140305 	tstmi	r4, r5, lsl #6
     978:	01065605 	tsteq	r6, r5, lsl #12
			strncpy(reason, "Error: invalid index", 50);
     97c:	05200305 	streq	r0, [r0, #-773]!	; 0xfffffcfb
     980:	03052056 	movweq	r2, #20566	; 0x5056
			proceed error;
     984:	03590620 	cmpeq	r9, #32, 12	; 0x2000000
     988:	08053c0e 	stmdaeq	r5, {r1, r2, r3, sl, fp, ip, sp}
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     98c:	06050106 	streq	r0, [r5], -r6, lsl #2
		retrieve_record->tpe = RETRIEVE_RECORD;
     990:	0604054a 	streq	r0, [r4], -sl, asr #10
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     994:	053d5921 	ldreq	r5, [sp, #-2337]!	; 0xfffff6df
		retrieve_record->gid = node_db->gid;
     998:	05131603 	ldreq	r1, [r3, #-1539]	; 0xfffff9fd
		retrieve_record->tpe = RETRIEVE_RECORD;
     99c:	05010637 	streq	r0, [r1, #-1591]	; 0xfffff9c9
		retrieve_record->request_number = generate_request_num();
     9a0:	20053f17 	andcs	r3, r5, r7, lsl pc
     9a4:	1e37051f 	mrcne	5, 1, r0, cr7, cr15, {0}
		retrieve_record->sender_id = node_db->id;
     9a8:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
     9ac:	01062005 	tsteq	r6, r5
     9b0:	1f2f1705 	svcne	0x002f1705
		call sender(&retrieve_record, wait);
     9b4:	21060305 	tstcs	r6, r5, lsl #6
		retrieve_record->receiver_id = user_provided_receiver_id;
     9b8:	06240513 			; <UNDEFINED> instruction: 0x06240513
		retrieve_record->record_index = user_provided_index;
     9bc:	2e220501 	cfsh64cs	mvdx0, mvdx2, #1
		response_checker[0] = retrieve_record->request_number;
     9c0:	21060305 	tstcs	r6, r5, lsl #6
		response_checker[1] = retrieve_record->tpe;
     9c4:	01062605 	tsteq	r6, r5, lsl #12
     9c8:	05230c05 	streq	r0, [r3, #-3077]!	; 0xfffff3fb
		call sender(&retrieve_record, wait);
     9cc:	0c051d26 	stceq	13, cr1, [r5], {38}	; 0x26
     9d0:	1d1d0523 	cfldr32ne	mvfx0, [sp, #-140]	; 0xffffff74
     9d4:	21060305 	tstcs	r6, r5, lsl #6
     9d8:	01061e05 	tsteq	r6, r5, lsl #28
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     9dc:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
     9e0:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
		if(node_db->data_base.item_count != 0){
     9e4:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
     9e8:	0405580b 	streq	r5, [r5], #-2059	; 0xfffff7f5
		ser_out(loop_through_data, "\r\n");
     9ec:	05052606 	streq	r2, [r5, #-1542]	; 0xfffff9fa
     9f0:	2e7f8903 	vaddcs.f16	s17, s30, s6	; <UNPREDICTABLE>
		proceed menu;
     9f4:	32333232 	eorscc	r3, r3, #536870915	; 0x20000003
     9f8:	04053232 	streq	r3, [r5], #-562	; 0xfffffdce
		delete_all(node_db);
     9fc:	052e2e03 	streq	r2, [lr, #-3587]!	; 0xfffff1fd
     a00:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
		proceed menu;
     a04:	05052006 	streq	r2, [r5, #-6]
		delay(3000, timeout);
     a08:	3d595906 	vldrcc.16	s11, [r9, #-12]	; <UNPREDICTABLE>
     a0c:	050e2605 	streq	r2, [lr, #-1541]	; 0xfffff9fb
     a10:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
		when(&response_flag, menu);
     a14:	2b030670 	blcs	c23dc <__ccfg+0xa2434>
     a18:	1503052e 	strne	r0, [r3, #-1326]	; 0xfffffad2
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a1c:	01061b05 	tsteq	r6, r5, lsl #22
     a20:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
     a24:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
     a28:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
     a2c:	17052104 	strne	r2, [r5, -r4, lsl #2]
     a30:	0604051f 			; <UNDEFINED> instruction: 0x0604051f
     a34:	5b030521 	blpl	c1ec0 <__ccfg+0xa1f18>
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     a38:	01060605 	tsteq	r6, r5, lsl #12
     a3c:	2f060405 	svccs	0x00060405
     a40:	01061705 	tsteq	r6, r5, lsl #14
     a44:	05210405 	streq	r0, [r1, #-1029]!	; 0xfffffbfb
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a48:	04051f17 	streq	r1, [r5], #-3863	; 0xfffff0e9
     a4c:	03052106 	movweq	r2, #20742	; 0x5106
		ser_out(timeout, "\r\nFailed to reach the destination");
     a50:	4b172702 	blmi	5ca660 <__ccfg+0x5aa6b8>
     a54:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
		proceed menu;
     a58:	0c050111 	stfeqs	f0, [r5], {17}
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     a5c:	17050106 	strne	r0, [r5, -r6, lsl #2]
     a60:	21040521 	tstcs	r4, r1, lsr #10
     a64:	17051f06 	strne	r1, [r5, -r6, lsl #30]
		proceed menu;
     a68:	07050106 	streq	r0, [r5, -r6, lsl #2]
}
     a6c:	0604054a 	streq	r0, [r4], -sl, asr #10
     a70:	06180521 	ldreq	r0, [r8], -r1, lsr #10
     a74:	2204052c 	andcs	r0, r4, #44, 10	; 0xb000000
     a78:	2c061705 	stccs	7, cr1, [r6], {5}
     a7c:	05011105 	streq	r1, [r1, #-261]	; 0xfffffefb
     a80:	06010603 	streq	r0, [r1], -r3, lsl #12
     a84:	3c0d0332 	stccc	3, cr0, [sp], {50}	; 0x32
     a88:	2705684d 	strcs	r6, [r5, -sp, asr #16]
     a8c:	06050106 	streq	r0, [r5], -r6, lsl #2
     a90:	06040520 	streq	r0, [r4], -r0, lsr #10
     a94:	053d593d 	ldreq	r5, [sp, #-2365]!	; 0xfffff6c3
     a98:	5c4d1503 	cfstr64pl	mvdx1, [sp], {3}
     a9c:	06370513 			; <UNDEFINED> instruction: 0x06370513
     aa0:	3d200501 	cfstr32cc	mvfx0, [r0, #-4]!
     aa4:	051f3705 	ldreq	r3, [pc, #-1797]	; 3a7 <receiver+0x1bf>
     aa8:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
     aac:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
     ab0:	03052e17 	movweq	r2, #24087	; 0x5e17
     ab4:	17052106 	strne	r2, [r5, -r6, lsl #2]
     ab8:	03050106 	movweq	r0, #20742	; 0x5106
     abc:	24052f06 	strcs	r2, [r5], #-3846	; 0xfffff0fa
     ac0:	22050106 	andcs	r0, r5, #-2147483647	; 0x80000001
     ac4:	0603052e 	streq	r0, [r3], -lr, lsr #10
     ac8:	06260521 	strteq	r0, [r6], -r1, lsr #10
     acc:	22030501 	andcs	r0, r3, #4194304	; 0x400000
static void devinit_uart (int devnum) {
     ad0:	051e2605 	ldreq	r2, [lr, #-1541]	; 0xfffff9fb
	adddevfunc (ioreq_uart_a, devnum);
     ad4:	1d052203 	sfmne	f2, 4, [r5, #-12]
     ad8:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
void udelay (volatile word n) {
     adc:	061f0521 	ldreq	r0, [pc], -r1, lsr #10
     ae0:	21030501 	tstcs	r3, r1, lsl #10
	while (n) {
     ae4:	052d1f05 	streq	r1, [sp, #-3845]!	; 0xfffff0fb
     ae8:	312f0603 			; <UNDEFINED> instruction: 0x312f0603
}
     aec:	01062705 	tsteq	r6, r5, lsl #14
	while (n--);
     af0:	05201705 	streq	r1, [r0, #-1797]!	; 0xfffff8fb
     af4:	2705230c 	strcs	r2, [r5, -ip, lsl #6]
     af8:	0603051d 			; <UNDEFINED> instruction: 0x0603051d
		n--;
     afc:	06270521 	strteq	r0, [r7], -r1, lsr #10
     b00:	220c0501 	andcs	r0, ip, #4194304	; 0x400000
     b04:	051e2705 	ldreq	r2, [lr, #-1797]	; 0xfffff8fb
void mdelay (volatile word n) {
     b08:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
     b0c:	0c050108 	stfeqs	f0, [r5], {8}
	while (n) {
     b10:	0b050106 	bleq	140f30 <__ccfg+0x120f88>
     b14:	06660558 			; <UNDEFINED> instruction: 0x06660558
}
     b18:	0303053c 	movweq	r0, #13628	; 0x353c
		udelay (999);
     b1c:	684d010c 	stmdavs	sp, {r2, r3, r8}^
     b20:	01062705 	tsteq	r6, r5, lsl #14
		n--;
     b24:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
     b28:	593d0604 	ldmdbpl	sp!, {r2, r9, sl}
     b2c:	1503053d 	strne	r0, [r3, #-1341]	; 0xfffffac3
     b30:	0605684d 	streq	r6, [r5], -sp, asr #16
void __pi_ondomain (lword d) {
     b34:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     b38:	3d593d06 	ldclcc	13, cr3, [r9, #-24]	; 0xffffffe8
		if (__pi_systat.effpdm > 1)
     b3c:	13160305 	tstne	r6, #335544320	; 0x14000000
     b40:	01063705 	tsteq	r6, r5, lsl #14
			__pi_systat.effpdm = 1;
     b44:	053e1605 	ldreq	r1, [lr, #-1541]!	; 0xfffff9fb
	PRCMPowerDomainOn (d);
     b48:	11051f1f 	tstne	r5, pc, lsl pc
     b4c:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
     b50:	061f0521 	ldreq	r0, [pc], -r1, lsr #10
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     b54:	2e160501 	cfmul32cs	mvfx0, mvfx6, mvfx1
     b58:	21060305 	tstcs	r6, r5, lsl #6
     b5c:	01061605 	tsteq	r6, r5, lsl #12
	__pi_systat.ondmns |= d;
     b60:	2f060305 	svccs	0x00060305
     b64:	01061005 	tsteq	r6, r5
}
     b68:	05202305 	streq	r2, [r0, #-773]!	; 0xfffffcfb
     b6c:	03052e21 	movweq	r2, #24097	; 0x5e21
void __pi_offdomain (lword d) {
     b70:	25052106 	strcs	r2, [r5, #-262]	; 0xfffffefa
     b74:	10050106 	andne	r0, r5, r6, lsl #2
	PRCMPowerDomainOff (d);
     b78:	20250520 	eorcs	r0, r5, r0, lsr #10
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     b7c:	05262605 	streq	r2, [r6, #-1541]!	; 0xfffff9fb
     b80:	207a031c 	rsbscs	r0, sl, ip, lsl r3
     b84:	21060305 	tstcs	r6, r5, lsl #6
	if (d & PRCM_DOMAIN_RFCORE) {
     b88:	01061e05 	tsteq	r6, r5, lsl #28
     b8c:	05280c05 	streq	r0, [r8, #-3077]!	; 0xfffff3fb
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     b90:	2078031e 	rsbscs	r0, r8, lr, lsl r3
     b94:	2f060305 	svccs	0x00060305
			__pi_systat.effpdm = __pi_systat.reqpdm;
     b98:	01061f05 	tsteq	r6, r5, lsl #30
     b9c:	40060305 	andmi	r0, r6, r5, lsl #6
	__pi_systat.ondmns &= ~d;
     ba0:	01061705 	tsteq	r6, r5, lsl #14
     ba4:	05202605 	streq	r2, [r0, #-1541]!	; 0xfffff9fb
}
     ba8:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
     bac:	05010626 	streq	r0, [r1, #-1574]	; 0xfffff9da
void __pi_syserror (word ec, const char *m) {
     bb0:	2605220c 	strcs	r2, [r5], -ip, lsl #4
	diag ("SYSERR: %x, %s", ec, m);
     bb4:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
     bb8:	01080522 	tsteq	r8, r2, lsr #10
     bbc:	01060c05 	tsteq	r6, r5, lsl #24
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     bc0:	05580b05 	ldrbeq	r0, [r8, #-2821]	; 0xfffff4fb
     bc4:	0c030603 	stceq	6, cr0, [r3], {3}
     bc8:	05684d3c 	strbeq	r4, [r8, #-3388]!	; 0xfffff2c4
		all_leds_blink;
     bcc:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
     bd0:	04052006 	streq	r2, [r5], #-6
     bd4:	3d593d06 	ldclcc	13, cr3, [r9, #-24]	; 0xffffffe8
     bd8:	4d150305 	ldcmi	3, cr0, [r5, #-20]	; 0xffffffec
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     bdc:	06060568 	streq	r0, [r6], -r8, ror #10
     be0:	06040501 	streq	r0, [r4], -r1, lsl #10
     be4:	053d593d 	ldreq	r5, [sp, #-2365]!	; 0xfffff6c3
     be8:	05131603 	ldreq	r1, [r3, #-1539]	; 0xfffff9fd
     bec:	05010639 	streq	r0, [r1, #-1593]	; 0xfffff9c7
     bf0:	21053e18 	tstcs	r5, r8, lsl lr
	while (1) {
     bf4:	1f13051f 	svcne	0x0013051f
     bf8:	21060305 	tstcs	r6, r5, lsl #6
     bfc:	01062105 	tsteq	r6, r5, lsl #2
     c00:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
void tci_run_delay_timer () {
     c04:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
	setdel = __pi_mintk - __pi_old;
     c08:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
     c0c:	052f0603 	streq	r0, [pc, #-1539]!	; 611 <root+0xbd>
     c10:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     c14:	23052025 	movwcs	r2, #20517	; 0x5025
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c18:	0603052e 	streq	r0, [r3], -lr, lsr #10
     c1c:	06270521 	strteq	r0, [r7], -r1, lsr #10
     c20:	20120501 	andscs	r0, r2, r1, lsl #10
     c24:	05202705 	streq	r2, [r0, #-1797]!	; 0xfffff8fb
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     c28:	1e052628 	cfmadd32ne	mvax1, mvfx2, mvfx5, mvfx8
	sti_tim;
     c2c:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
}
     c30:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
     c34:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
     c38:	2005280c 	andcs	r2, r5, ip, lsl #16
     c3c:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
     c40:	052f0603 	streq	r0, [pc, #-1539]!	; 645 <root+0xf1>
	cli_aux;
     c44:	05010621 	streq	r0, [r1, #-1569]	; 0xfffff9df
     c48:	05400603 	strbeq	r0, [r0, #-1539]	; 0xfffff9fd
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c4c:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
     c50:	03052028 	movweq	r2, #20520	; 0x5028
     c54:	28052106 	stmdacs	r5, {r1, r2, r8, sp}
     c58:	0c050106 	stfeqs	f0, [r5], {6}
	sti_aux;
     c5c:	1e280522 	cfsh64ne	mvdx0, mvdx8, #18
}
     c60:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
     c64:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
     c68:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
void AONRTCIntHandler () {
     c6c:	0305580b 	movweq	r5, #22539	; 0x580b
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     c70:	054d3f06 	strbeq	r3, [sp, #-3846]	; 0xfffff0fa
     c74:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     c78:	03052e05 	movweq	r2, #24069	; 0x5e05
		if (__pi_utims [0] == 0)
     c7c:	3f4b4106 	svccc	0x004b4106
     c80:	4b593f4b 	blmi	16509b4 <__ccfg+0x1630a0c>
		if (*(__pi_utims [0])) {
     c84:	73030505 	movwvc	r0, #13573	; 0x3505
     c88:	01b50520 			; <UNDEFINED> instruction: 0x01b50520
			(*(__pi_utims [0]))--;
     c8c:	05053c06 	streq	r3, [r5, #-3078]	; 0xfffff3fa
		if (__pi_utims [1] == 0)
     c90:	0637052e 	ldrteq	r0, [r7], -lr, lsr #10
		if (*(__pi_utims [1])) {
     c94:	0638058f 	ldrteq	r0, [r8], -pc, lsl #11
			aux_timer_inactive = 0;
     c98:	06130501 	ldreq	r0, [r3], -r1, lsl #10
			(*(__pi_utims [1]))--;
     c9c:	061f0520 	ldreq	r0, [pc], -r0, lsr #10
		if (__pi_utims [2] == 0)
     ca0:	202a0501 	eorcs	r0, sl, r1, lsl #10
		if (*(__pi_utims [2])) {
     ca4:	052e0405 	streq	r0, [lr, #-1029]!	; 0xfffffbfb
			(*(__pi_utims [2]))--;
     ca8:	05053c0c 	streq	r3, [r5, #-3084]	; 0xfffff3f4
		if (__pi_utims [3] != 0) {
     cac:	06030521 	streq	r0, [r3], -r1, lsr #10
			if (*(__pi_utims [3])) {
     cb0:	4b3c1003 	blmi	f04cc4 <__ccfg+0xee4d1c>
				aux_timer_inactive = 0;
     cb4:	01055940 	tsteq	r5, r0, asr #18
				(*(__pi_utims [3]))--;
     cb8:	2e13053d 	mrccs	5, 0, r0, cr3, cr13, {1}
	if (__pi_systat.ledsts) {
     cbc:	2e060105 	adfcss	f0, f6, f5
     cc0:	01002e02 	tsteq	r0, r2, lsl #28
		if (__pi_systat.ledblc++ == 0) {
     cc4:	00156201 	andseq	r6, r5, r1, lsl #4
     cc8:	a1000300 	mrsge	r0, LR_irq
			if (__pi_systat.ledblk) {
     ccc:	02000002 	andeq	r0, r0, #2
     cd0:	0d0efb01 	vstreq	d15, [lr, #-4]
     cd4:	01010100 	mrseq	r0, (UNDEF: 17)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     cd8:	00000001 	andeq	r0, r0, r1
     cdc:	01000001 	tsteq	r0, r1
				if (__pi_systat.ledsts & 0x2)
     ce0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; c2c <tci_run_delay_timer+0x28>
     ce4:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
     ce8:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
				if (__pi_systat.ledsts & 0x4)
     cec:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
				__pi_systat.ledblk = 0;
     cf0:	6f746b73 	svcvs	0x00746b73
     cf4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
			if (__pi_systat.fstblk)
     cf8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
     cfc:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
				__pi_systat.ledblc = 200;
     d00:	2f534f43 	svccs	0x00534f43
	if (events & AON_RTC_EVFLAGS_CH0) {
     d04:	4f636950 	svcmi	0x00636950
		cli_tim;
     d08:	43432f53 	movtmi	r2, #16211	; 0x3f53
		__pi_new += setdel;
     d0c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
     d10:	6f682f00 	svcvs	0x00682f00
		setdel = 0;
     d14:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
		RISE_N_SHINE;
     d18:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
		__pi_new += setdel;
     d1c:	442f6e65 	strtmi	r6, [pc], #-3685	; d24 <AONRTCIntHandler+0xb8>
		RISE_N_SHINE;
     d20:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     d24:	4f2f706f 	svcmi	0x002f706f
		aux_timer_inactive = 1;
     d28:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     d2c:	502f5445 	eorpl	r5, pc, r5, asr #8
				if (__pi_systat.ledsts & 0x1)
     d30:	534f4349 	movtpl	r4, #62281	; 0xf349
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d34:	6369502f 	cmnvs	r9, #47	; 0x2f
     d38:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
				if (__pi_systat.ledsts & 0x2)
     d3c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
     d40:	43432f58 	movtmi	r2, #16216	; 0x3f58
     d44:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
				if (__pi_systat.ledsts & 0x8)
     d48:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
				__pi_systat.ledblk = 1;
     d4c:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
     d50:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
		if (aux_timer_inactive) {
     d54:	2f006269 	svccs	0x00006269
			cli_aux;
     d58:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     d5c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
     d60:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
     d64:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     d68:	706f746b 	rsbvc	r7, pc, fp, ror #8
     d6c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     d70:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     d74:	4349502f 	movtmi	r5, #36911	; 0x902f
     d78:	502f534f 	eorpl	r5, pc, pc, asr #6
     d7c:	534f6369 	movtpl	r6, #62313	; 0xf369
word tci_update_delay_ticks (Boolean force) {
     d80:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
	cli_tim;
     d84:	492f7362 	stmdbmi	pc!, {r1, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
     d88:	682f004f 	stmdavs	pc!, {r0, r1, r2, r3, r6}	; <UNPREDICTABLE>
	if (setdel) {
     d8c:	2f656d6f 	svccs	0x00656d6f
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d90:	70657473 	rsbvc	r7, r5, r3, ror r4
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     d94:	2f6e6568 	svccs	0x006e6568
     d98:	6b736544 	blvs	1cda2b0 <__ccfg+0x1cba308>
     d9c:	2f706f74 	svccs	0x00706f74
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     da0:	4f534c4f 	svcmi	0x00534c4f
				AON_RTC_O_CH0CMP)) - gettav ());
     da4:	2f54454e 	svccs	0x0054454e
	return NO;
     da8:	4f434950 	svcmi	0x00434950
			setdel = 0;
     dac:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     db0:	2f534f63 	svccs	0x00534f63
     db4:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
}
     db8:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
		sti_tim;
     dbc:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
		return YES;
     dc0:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
     dc4:	2f656d6f 	svccs	0x00656d6f
     dc8:	70657473 	rsbvc	r7, r5, r3, ror r4
     dcc:	2f6e6568 	svccs	0x006e6568
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     dd0:	6b736544 	blvs	1cda2e8 <__ccfg+0x1cba340>
	UARTDisable (UART0_BASE);
     dd4:	2f706f74 	svccs	0x00706f74
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     dd8:	4f534c4f 	svcmi	0x00534c4f
	UARTDisable (UART0_BASE);
     ddc:	2f54454e 	svccs	0x0054454e
	UARTConfigSetExpClk (UART0_BASE,
     de0:	4f434950 	svcmi	0x00434950
     de4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
     de8:	2f534f63 	svccs	0x00534f63
     dec:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     df0:	2f006c65 	svccs	0x00006c65
     df4:	2f727375 	svccs	0x00727375
     df8:	2f62696c 	svccs	0x0062696c
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     dfc:	2f636367 	svccs	0x00636367
     e00:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     e04:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
	urates [0] = rate;
     e08:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
}
     e0c:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
     e10:	2f312e32 	svccs	0x00312e32
     e14:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     e18:	00656475 	rsbeq	r6, r5, r5, ror r4
     e1c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; d68 <AONRTCIntHandler+0xfc>
     e20:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e24:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
     e28:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
     e2c:	6f746b73 	svcvs	0x00746b73
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     e30:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
     e34:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     e38:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
     e3c:	2f534f43 	svccs	0x00534f43
	__pi_uart_setrate (urates [0], __pi_uart);
     e40:	4f636950 	svcmi	0x00636950
     e44:	6d000053 	stcvs	0, cr0, [r0, #-332]	; 0xfffffeb4
     e48:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
     e4c:	00010063 	andeq	r0, r1, r3, rrx
     e50:	73797300 	cmnvc	r9, #0, 6
     e54:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
     e58:	00682e6c 	rsbeq	r2, r8, ip, ror #28
	switch (operation) {
     e5c:	63000002 	movwvs	r0, #2
static int ioreq_uart_a (int operation, char *buf, int len) {
     e60:	7369736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     e64:	6363675f 	cmnvs	r3, #24903680	; 0x17c0000
     e68:	0100682e 	tsteq	r0, lr, lsr #16
     e6c:	70670000 	rsbvc	r0, r7, r0
     e70:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
				*buf++ = uart_a_read;
     e74:	00000200 	andeq	r0, r0, r0, lsl #4
     e78:	5f717269 	svcpl	0x00717269
			while (len && uart_a_char_available) {
     e7c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     e80:	656c5f72 	strbvs	r5, [ip, #-3954]!	; 0xfffff08e
     e84:	682e7364 	stmdavs	lr!, {r2, r5, r6, r8, r9, ip, sp, lr}
			if (len != operation) {
     e88:	00000300 	andeq	r0, r0, r0, lsl #6
}
     e8c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     e90:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
			uart_a_disable_int;
     e94:	72690000 	rsbvc	r0, r9, #0
			if (uart_a_char_available) {
     e98:	75625f71 	strbvc	r5, [r2, #-3953]!	; 0xfffff08f
				*buf++ = uart_a_read;
     e9c:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
			uart_a_disable_int;
     ea0:	00682e73 	rsbeq	r2, r8, r3, ror lr
     ea4:	69000003 	stmdbvs	r0, {r0, r1}
			if (uart_a_char_available) {
     ea8:	705f7172 	subsvc	r7, pc, r2, ror r1	; <UNPREDICTABLE>
     eac:	735f6e69 	cmpvc	pc, #1680	; 0x690
				uart_a_enable_int;
     eb0:	6f736e65 	svcvs	0x00736e65
     eb4:	00682e72 	rsbeq	r2, r8, r2, ror lr
				goto Redo_rx;
     eb8:	70000004 	andvc	r0, r0, r4
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     ebc:	2e6d6372 	mcrcs	3, 3, r6, cr13, cr2, {3}
     ec0:	00020068 	andeq	r0, r2, r8, rrx
			return -2;
     ec4:	6e6f6100 	powvse	f6, f7, f0
     ec8:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
				uart_a_write (*buf);
     ecc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     ed0:	77700000 	ldrbvc	r0, [r0, -r0]!
			while (len && uart_a_room_in_tx) {
     ed4:	74635f72 	strbtvc	r5, [r3], #-3954	; 0xfffff08e
     ed8:	682e6c72 	stmdavs	lr!, {r1, r4, r5, r6, sl, fp, sp, lr}
     edc:	00000200 	andeq	r0, r0, r0, lsl #4
			if (len != operation) {
     ee0:	5f6e6f61 	svcpl	0x006e6f61
			uart_a_disable_int;
     ee4:	2e636f69 	cdpcs	15, 6, cr6, cr3, cr9, {3}
     ee8:	00020068 	andeq	r0, r2, r8, rrx
			if (uart_a_room_in_tx) {
     eec:	68637300 	stmdavs	r3!, {r8, r9, ip, sp, lr}^
     ef0:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
				uart_a_enable_int;
     ef4:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
     ef8:	00000500 	andeq	r0, r0, r0, lsl #10
				*buf++ = uart_a_read;
     efc:	5f6e6f61 	svcpl	0x006e6f61
			if (uart_a_room_in_tx) {
     f00:	2e637577 	mcrcs	5, 3, r7, cr3, cr7, {3}
				uart_a_write (*buf);
     f04:	00020068 	andeq	r0, r2, r8, rrx
     f08:	6e6f6100 	powvse	f6, f7, f0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     f0c:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
     f10:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
			uart_a_enable_int;
     f14:	00020068 	andeq	r0, r2, r8, rrx
     f18:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     f1c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
			return 0;
     f20:	00060068 	andeq	r0, r6, r8, rrx
			if (len == UART_CNTRL_SETRATE) {
     f24:	63726100 	cmnvs	r2, #0, 2
				if (__pi_uart_setrate (*((word*)buf),
     f28:	00682e68 	rsbeq	r2, r8, r8, ror #28
     f2c:	6d000001 	stcvs	0, cr0, [r0, #-4]
     f30:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
				syserror (EREQPAR, "uar");
     f34:	00010068 	andeq	r0, r1, r8, rrx
			syserror (ENOOPER, "uai");
     f38:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
			if (len == UART_CNTRL_GETRATE) {
     f3c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
				return 1;
     f40:	00682e73 	rsbeq	r2, r8, r3, ror lr
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     f44:	62000001 	andvs	r0, r0, #1
			syserror (ENOOPER, "uai");
     f48:	6f747475 	svcvs	0x00747475
     f4c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
     f50:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
     f54:	00000100 	andeq	r0, r0, r0, lsl #2
     f58:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     f5c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     f60:	6b000007 	blvs	f84 <UART0IntHandler+0x18>
     f64:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     f68:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     f6c:	00000005 	andeq	r0, r0, r5
void UART0IntHandler () {
     f70:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     f74:	000ad002 	andeq	sp, sl, r2
     f78:	06fc0300 	ldrbteq	r0, [ip], r0, lsl #6
     f7c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
     f80:	10062705 	andne	r2, r6, r5, lsl #14
     f84:	02220205 	eoreq	r0, r2, #1342177280	; 0x50000000
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     f88:	01010005 	tsteq	r1, r5
     f8c:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
		RISE_N_SHINE;
     f90:	000adc02 	andeq	sp, sl, r2, lsl #24
     f94:	01180300 	tsteq	r8, r0, lsl #6
		i_trigger (devevent (UART_A, READ));
     f98:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
     f9c:	09050108 	stmdbeq	r5, {r3, r8}
     fa0:	08050106 	stmdaeq	r5, {r1, r2, r8}
     fa4:	2401053c 	strcs	r0, [r1], #-1340	; 0xfffffac4
     fa8:	2b060305 	blcs	181bc4 <__ccfg+0x161c1c>
     fac:	051b0205 	ldreq	r0, [fp, #-517]	; 0xfffffdfb
     fb0:	0805010d 	stmdaeq	r5, {r0, r2, r3, r8}
     fb4:	060a0501 	streq	r0, [sl], -r1, lsl #10
     fb8:	3c080501 	cfstr32cc	mvfx0, [r8], {1}
     fbc:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
     fc0:	01060405 	tsteq	r6, r5, lsl #8
     fc4:	01000702 	tsteq	r0, r2, lsl #14
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     fc8:	001f0501 	andseq	r0, pc, r1, lsl #10
     fcc:	0b080205 	bleq	2017e8 <__ccfg+0x1e1840>
     fd0:	1f030000 	svcne	0x00030000
		i_trigger (devevent (UART_A, WRITE));
     fd4:	3d020501 	cfstr32cc	mvfx0, [r2, #-4]
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     fd8:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
     fdc:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
		RISE_N_SHINE;
     fe0:	01053c08 	tsteq	r5, r8, lsl #24
     fe4:	06030524 	streq	r0, [r3], -r4, lsr #10
     fe8:	04054b39 	streq	r4, [r5], #-2873	; 0xfffff4c7
		i_trigger (devevent (UART_A, WRITE));
     fec:	07020106 	streq	r0, [r2, -r6, lsl #2]
     ff0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     ff4:	0205001e 	andeq	r0, r5, #30
     ff8:	00000b34 	andeq	r0, r0, r4, lsr fp
     ffc:	05012a03 	streq	r2, [r1, #-2563]	; 0xfffff5fd
    1000:	1e051602 	cfmadd32ne	mvax0, mvfx1, mvfx5, mvfx2
    1004:	05050e06 	streq	r0, [r5, #-3590]	; 0xfffff1fa
    1008:	1c1e0524 	cfldr32ne	mvfx0, [lr], {36}	; 0x24
    100c:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
    1010:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    1014:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
}
    1018:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    101c:	17052106 	strne	r2, [r5, -r6, lsl #2]
    1020:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1024:	05593f06 	ldrbeq	r3, [r9, #-3846]	; 0xfffff0fa
    1028:	0805013b 	stmdaeq	r5, {r0, r1, r3, r4, r5, r8}
void __buttons_setirq (int val) {
    102c:	06090501 	streq	r0, [r9], -r1, lsl #10
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1030:	4a080501 	bmi	20243c <__ccfg+0x1e2494>
    1034:	30060205 	andcc	r0, r6, r5, lsl #4
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1038:	01061505 	tsteq	r6, r5, lsl #10
    103c:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
    1040:	01010005 	tsteq	r1, r5
		bn = BUTTON_GPIO (__button_list [i]);
    1044:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1048:	000b7002 	andeq	r7, fp, r2
    104c:	013a0300 	teqeq	sl, r0, lsl #6
    1050:	05170205 	ldreq	r0, [r7, #-517]	; 0xfffffdfb
    1054:	050d061f 	streq	r0, [sp, #-1567]	; 0xfffff9e1
    1058:	1f052502 	svcne	0x00052502
    105c:	2502051b 	strcs	r0, [r2, #-1307]	; 0xfffffae5
}
    1060:	3c053d06 	stccc	13, cr3, [r5], {6}
    1064:	01080501 	tsteq	r8, r1, lsl #10
    1068:	01060905 	tsteq	r6, r5, lsl #18
    106c:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
void __pinlist_setirq (int val) {
    1070:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
	for (i = 0; i < N_PINLIST; i++) {
    1074:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1078:	054b0603 	strbeq	r0, [fp, #-1539]	; 0xfffff9fd
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    107c:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
	for (i = 0; i < N_PINLIST; i++) {
    1080:	06052027 	streq	r2, [r5], -r7, lsr #32
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1084:	06040520 	streq	r0, [r4], -r0, lsr #10
    1088:	06240521 	strteq	r0, [r4], -r1, lsr #10
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    108c:	3c170501 	cfldr32cc	mvfx0, [r7], {1}
    1090:	23060205 	movwcs	r0, #25093	; 0x6205
    1094:	01061505 	tsteq	r6, r5, lsl #10
	for (i = 0; i < N_PINLIST; i++) {
    1098:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
}
    109c:	01010005 	tsteq	r1, r5
    10a0:	05001305 	streq	r1, [r0, #-773]	; 0xfffffcfb
    10a4:	00000002 	andeq	r0, r0, r2
    10a8:	00ce0300 	sbceq	r0, lr, r0, lsl #6
void GPIOIntHandler () {
    10ac:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
if (buttons_int) {
    10b0:	1e061305 	cdpne	3, 0, cr1, cr6, cr5, {0}
    10b4:	06220205 	strteq	r0, [r2], -r5, lsl #4
	buttons_disable ();
    10b8:	03053633 	movweq	r3, #22067	; 0x5633
    10bc:	05020413 	streq	r0, [r2, #-1043]	; 0xfffffbed
	i_trigger ((aword)&__button_list);
    10c0:	01f00304 	mvnseq	r0, r4, lsl #6
    10c4:	5c053001 	stcpl	0, cr3, [r5], {1}
    10c8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    10cc:	05143e06 	ldreq	r3, [r4, #-3590]	; 0xfffff1fa
    10d0:	0502100a 	streq	r1, [r2, #-10]
    10d4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    10d8:	0205002d 	andeq	r0, r5, #45	; 0x2d
    10dc:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
    10e0:	01019703 	tsteq	r1, r3, lsl #14
    10e4:	01140205 	tsteq	r4, r5, lsl #4
    10e8:	2d051701 	stccs	7, cr1, [r5, #-4]
	RISE_N_SHINE;
    10ec:	01790306 	cmneq	r9, r6, lsl #6
    10f0:	06350205 	ldrteq	r0, [r5], -r5, lsl #4
    10f4:	044a0903 	strbeq	r0, [sl], #-2307	; 0xfffff6fd
if (pin_sensor_int) {
    10f8:	03030503 	movweq	r0, #13571	; 0x3503
    10fc:	04017fb5 	streq	r7, [r1], #-4021	; 0xfffff04b
	i_trigger ((aword)(&__input_pins));
    1100:	062d0504 	strteq	r0, [sp], -r4, lsl #10
    1104:	2001cb03 	andcs	ip, r1, r3, lsl #22
    1108:	02050104 	andeq	r0, r5, #4, 2
    110c:	7f8f0306 	svcvc	0x008f0306
    1110:	1303053c 	movwne	r0, #13628	; 0x353c
    1114:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
    1118:	eb032905 	bl	cb534 <__ccfg+0xab58c>
    111c:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    1120:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    1124:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1128:	7f900303 	svcvc	0x00900303
	__pinsen_disable_and_clear;
    112c:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
	RISE_N_SHINE;
    1130:	00f0032d 	rscseq	r0, r0, sp, lsr #6
    1134:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1138:	90030603 	andls	r0, r3, r3, lsl #12
}
    113c:	0404207f 	streq	r2, [r4], #-127	; 0xffffff81
    1140:	eb032905 	bl	cb55c <__ccfg+0xab5b4>
    1144:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    1148:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    114c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
void system_init () {
    1150:	90030603 	andls	r0, r3, r3, lsl #12
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1154:	0101207f 	tsteq	r1, pc, ror r0
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    1158:	01010101 	tsteq	r1, r1, lsl #2
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    115c:	012e0166 			; <UNDEFINED> instruction: 0x012e0166
    1160:	29050404 	stmdbcs	r5, {r2, sl}
    1164:	0101a103 	tsteq	r1, r3, lsl #2
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1168:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    116c:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1170:	03030501 	movweq	r0, #13569	; 0x3501
    1174:	04207eda 	strteq	r7, [r0], #-3802	; 0xfffff126
    1178:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    117c:	042001a6 	strteq	r0, [r0], #-422	; 0xfffffe5a
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1180:	06030501 	streq	r0, [r3], -r1, lsl #10
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1184:	207eda03 	rsbscs	sp, lr, r3, lsl #20
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1188:	29050404 	stmdbcs	r5, {r2, sl}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    118c:	0101a103 	tsteq	r1, r3, lsl #2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1190:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
		pin = (port_confs [i] >> 19) & 0x1f;
    1194:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1198:	06030501 	streq	r0, [r3], -r1, lsl #10
		pin = (port_confs [i] >> 19) & 0x1f;
    119c:	207eda03 	rsbscs	sp, lr, r3, lsl #20
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    11a0:	01010101 	tsteq	r1, r1, lsl #2
    11a4:	01580101 	cmpeq	r8, r1, lsl #2
    11a8:	1108052e 	tstne	r8, lr, lsr #10
    11ac:	01000902 	tsteq	r0, r2, lsl #18
		if (port_confs [i] & 0x80)
    11b0:	001d0501 	andseq	r0, sp, r1, lsl #10
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    11b4:	0c040205 	sfmeq	f0, 4, [r4], {5}
    11b8:	9d030000 	stcls	0, cr0, [r3, #-0]
		if (port_confs [i] & 0x40)
    11bc:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11c0:	061d0516 			; <UNDEFINED> instruction: 0x061d0516
    11c4:	2416050e 	ldrcs	r0, [r6], #-1294	; 0xfffffaf2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11c8:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    11cc:	09052016 	stmdbeq	r5, {r1, r2, r4, sp}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11d0:	0602052e 	streq	r0, [r2], -lr, lsr #10
	all_leds_blink;
    11d4:	01760323 	cmneq	r6, r3, lsr #6
    11d8:	01061105 	tsteq	r6, r5, lsl #2
    11dc:	0d030205 	sfmeq	f0, 4, [r3, #-20]	; 0xffffffec
    11e0:	032f052e 			; <UNDEFINED> instruction: 0x032f052e
    11e4:	2a052073 	bcs	1493b8 <__ccfg+0x129410>
    11e8:	05200a03 	streq	r0, [r0, #-2563]!	; 0xfffff5fd
    11ec:	2076032f 	rsbscs	r0, r6, pc, lsr #6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11f0:	052e3605 	streq	r3, [lr, #-1541]!	; 0xfffff9fb
    11f4:	2e0a032a 	cdpcs	3, 0, cr0, cr10, cr10, {1}
    11f8:	23060205 	movwcs	r0, #25093	; 0x6205
    11fc:	2f060105 	svccs	0x00060105
    1200:	01000b02 	tsteq	r0, r2, lsl #22
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1204:	00210501 	eoreq	r0, r1, r1, lsl #10
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1208:	0c440205 	sfmeq	f0, 2, [r4], {5}
    120c:	aa030000 	bge	c1214 <__ccfg+0xa126c>
	IntEnable (INT_AON_RTC_COMB);
    1210:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    1214:	06210517 			; <UNDEFINED> instruction: 0x06210517
    1218:	2502051b 	strcs	r0, [r2, #-1307]	; 0xfffffae5
	__pi_malloc_init ();
    121c:	2e060905 	vmlacs.f16	s0, s12, s10	; <UNPREDICTABLE>
	IntEnable (INT_AON_GPIO_EDGE);
    1220:	03140205 	tsteq	r4, #1342177280	; 0x50000000
    1224:	11050169 	tstne	r5, r9, ror #2
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1228:	2f050106 	svccs	0x00050106
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    122c:	032a052e 			; <UNDEFINED> instruction: 0x032a052e
    1230:	2f052017 	svccs	0x00052017
    1234:	05206903 	streq	r6, [r0, #-2307]!	; 0xfffff6fd
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1238:	2a052e36 	bcs	14cb18 <__ccfg+0x12cb70>
    123c:	05201703 	streq	r1, [r0, #-1795]!	; 0xfffff8fd
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1240:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    1244:	01052e09 	tsteq	r5, r9, lsl #28
    1248:	06021306 	streq	r1, [r2], -r6, lsl #6
	urates [0] = UART_RATE / 100;
    124c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1250:	0205001a 	andeq	r0, r5, #26
	reinit_uart ();
    1254:	00000c6c 	andeq	r0, r0, ip, ror #24
	EXTRA_INITIALIZERS;
    1258:	0102b703 	tsteq	r2, r3, lsl #14
    125c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    1260:	0e061a05 	vmlaeq.f32	s2, s12, s10
    1264:	05240b05 	streq	r0, [r4, #-2821]!	; 0xfffff4fb
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    1268:	02052e09 	andeq	r2, r5, #9, 28	; 0x90
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    126c:	05053206 	streq	r3, [r5, #-518]	; 0xfffffdfa
    1270:	2b051406 	blcs	146290 <__ccfg+0x1262e8>
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1274:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
    1278:	06050522 	streq	r0, [r5], -r2, lsr #10
			devinit [i] . init (devinit [i] . param);
    127c:	06030501 	streq	r0, [r3], -r1, lsl #10
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1280:	05151825 	ldreq	r1, [r5, #-2085]	; 0xfffff7db
    1284:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1288:	03052e06 	movweq	r2, #24070	; 0x5e06
	IntEnable (INT_UART0_COMB);
    128c:	07053006 	streq	r3, [r5, -r6]
    1290:	06050106 	streq	r0, [r5], -r6, lsl #2
}
    1294:	06040520 	streq	r0, [r4], -r0, lsr #10
	tci_run_auxiliary_timer ();
    1298:	0617052f 	ldreq	r0, [r7], -pc, lsr #10
		diag ("");
    129c:	06040501 	streq	r0, [r4], -r1, lsl #10
    12a0:	0617052f 	ldreq	r0, [r7], -pc, lsr #10
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    12a4:	06030501 	streq	r0, [r3], -r1, lsl #10
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    12a8:	06120522 	ldreq	r0, [r2], -r2, lsr #10
		diag ("Leftover RAM: %d bytes",
    12ac:	20060501 	andcs	r0, r6, r1, lsl #10
    12b0:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    12b4:	01060705 	tsteq	r6, r5, lsl #14
    12b8:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    12bc:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    12c0:	1f130617 	svcne	0x00130617
    12c4:	2f060405 	svccs	0x00060405
    12c8:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
    12cc:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    12d0:	03052006 	movweq	r2, #20486	; 0x5006
    12d4:	07052206 	streq	r2, [r5, -r6, lsl #4]
    12d8:	06050106 	streq	r0, [r5], -r6, lsl #2
    12dc:	06040520 	streq	r0, [r4], -r0, lsr #10
    12e0:	06170521 	ldreq	r0, [r7], -r1, lsr #10
    12e4:	04051f13 	streq	r1, [r5], #-3859	; 0xfffff0ed
    12e8:	03052f06 	movweq	r2, #24326	; 0x5f06
    12ec:	06120514 			; <UNDEFINED> instruction: 0x06120514
    12f0:	20060501 	andcs	r0, r6, r1, lsl #10
    12f4:	21060405 	tstcs	r6, r5, lsl #8
    12f8:	01060805 	tsteq	r6, r5, lsl #16
    12fc:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    1300:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    1304:	1f130618 	svcne	0x00130618
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1308:	2f060505 	svccs	0x00060505
    130c:	02050504 	andeq	r0, r5, #4, 10	; 0x1000000
    1310:	017da303 	cmneq	sp, r3, lsl #6
    1314:	01061105 	tsteq	r6, r5, lsl #2
    1318:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    131c:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    1320:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1324:	06052019 			; <UNDEFINED> instruction: 0x06052019
}
    1328:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
__attribute__ ((noreturn)) void __pi_release () {
    132c:	06130521 	ldreq	r0, [r3], -r1, lsr #10
    1330:	20070501 	andcs	r0, r7, r1, lsl #10
    1334:	052f1405 	streq	r1, [pc, #-1029]!	; f37 <ioreq_uart_a+0xdb>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1338:	05051f07 	streq	r1, [r5, #-3847]	; 0xfffff0f9
	check_stack_overflow;
    133c:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
    1340:	06050106 	streq	r0, [r5], -r6, lsl #2
    1344:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
	update_n_wake (MAX_WORD, NO);
    1348:	96032905 	strls	r2, [r3], -r5, lsl #18
    134c:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    1350:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
	for_all_tasks (__pi_curr) {
    1354:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
    1358:	e6030605 	str	r0, [r3], -r5, lsl #12
    135c:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
  __ASM volatile ("cpsid i" : : : "memory");
    1360:	08050106 	stmdaeq	r5, {r1, r2, r8}
	__SLEEP;
    1364:	06060520 	streq	r0, [r6], -r0, lsr #10
    1368:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
    136c:	02940329 	addseq	r0, r4, #-1543503872	; 0xa4000000
    1370:	17050501 	strne	r0, [r5, -r1, lsl #10]
	system_event_count ++;
    1374:	01062d05 	tsteq	r6, r5, lsl #26
    1378:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
	switch (__pi_systat.effpdm) {
    137c:	7de80306 	stclvc	3, cr0, [r8, #24]!
    1380:	0614054a 	ldreq	r0, [r4], -sl, asr #10
    1384:	06060501 	streq	r0, [r6], -r1, lsl #10
    1388:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
			__WFI ();
    138c:	14051305 	strne	r1, [r5], #-773	; 0xfffffcfb
    1390:	06050106 	streq	r0, [r5], -r6, lsl #2
    1394:	01012106 	tsteq	r1, r6, lsl #2
	check_stack_overflow;
    1398:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
    139c:	03010618 	movweq	r0, #5656	; 0x1618
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    13a0:	04053c0a 	streq	r3, [r5], #-3082	; 0xfffff3f6
    13a4:	13052206 	movwne	r2, #20998	; 0x5206
			(__pi_curr->code) (tstate (__pi_curr));
    13a8:	07050106 	streq	r0, [r5, -r6, lsl #2]
			goto Redo;
    13ac:	06050520 	streq	r0, [r5], -r0, lsr #10
	for_all_tasks (__pi_curr) {
    13b0:	0618052f 	ldreq	r0, [r8], -pc, lsr #10
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    13b4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    13b8:	cd03060b 	stcgt	6, cr0, [r3, #-44]	; 0xffffffd4
    13bc:	02052e02 	andeq	r2, r5, #2, 28
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    13c0:	0605051a 			; <UNDEFINED> instruction: 0x0605051a
    13c4:	06030501 	streq	r0, [r3], -r1, lsl #10
    13c8:	060c0534 			; <UNDEFINED> instruction: 0x060c0534
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    13cc:	2c030530 	cfstr32cs	mvfx0, [r3], {48}	; 0x30
    13d0:	0c052206 	sfmeq	f2, 4, [r5], {6}
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    13d4:	0a050106 	beq	1417f4 <__ccfg+0x12184c>
    13d8:	1f0c052f 	svcne	0x000c052f
			__WFI ();
    13dc:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    13e0:	03051e0c 	movweq	r1, #24076	; 0x5e0c
    13e4:	01132f06 	tsteq	r3, r6, lsl #30
}
    13e8:	1902054a 	stmdbne	r2, {r1, r3, r6, r8, sl}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    13ec:	13060105 	movwne	r0, #24837	; 0x6105
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    13f0:	45031605 	strmi	r1, [r3, #-1541]	; 0xfffff9fb
    13f4:	05050420 	streq	r0, [r5, #-1056]	; 0xfffffbe0
    13f8:	c9030605 	stmdbgt	r3, {r0, r2, r9, sl}
			PRCMPowerDomainOff (__pi_systat.ondmns |
    13fc:	08054a7d 	stmdaeq	r5, {r0, r2, r3, r4, r5, r6, r9, fp, lr}
    1400:	06050106 	streq	r0, [r5], -r6, lsl #2
    1404:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1408:	c2032905 	andgt	r2, r3, #81920	; 0x14000
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    140c:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    1410:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    1414:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
    1418:	ba030605 	blt	c2c34 <__ccfg+0xa2c8c>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    141c:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
    1420:	08050106 	stmdaeq	r5, {r1, r2, r8}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1424:	06060520 	streq	r0, [r6], -r0, lsr #10
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1428:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
    142c:	02c00329 	sbceq	r0, r0, #-1543503872	; 0xa4000000
    1430:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1434:	01062d05 	tsteq	r6, r5, lsl #26
    1438:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
			SysCtrlSetRechargeBeforePowerDown
    143c:	7dbc0306 	ldcvc	3, cr0, [ip, #24]!
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1440:	0614054a 	ldreq	r0, [r4], -sl, asr #10
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1444:	06060501 	streq	r0, [r6], -r1, lsl #10
    1448:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    144c:	14051305 	strne	r1, [r5], #-773	; 0xfffffcfb
    1450:	06050106 	streq	r0, [r5], -r6, lsl #2
    1454:	01012106 	tsteq	r1, r6, lsl #2
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    1458:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
    145c:	04010618 	streq	r0, [r1], #-1560	; 0xfffff9e8
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1460:	06030501 	streq	r0, [r3], -r1, lsl #10
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1464:	4a02ce03 	bmi	b4c78 <__ccfg+0x94cd0>
    1468:	01060605 	tsteq	r6, r5, lsl #12
    146c:	30060405 	andcc	r0, r6, r5, lsl #8
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1470:	01001502 	tsteq	r0, r2, lsl #10
			while (!(AONWUCPowerStatusGet () &
    1474:	002d0501 	eoreq	r0, sp, r1, lsl #10
			PRCMPowerDomainOn (__pi_systat.ondmns);
    1478:	0d800205 	sfmeq	f0, 4, [r0, #20]
    147c:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
    1480:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    1484:	062d0516 			; <UNDEFINED> instruction: 0x062d0516
    1488:	2402050e 	strcs	r0, [r2], #-1294	; 0xfffffaf2
    148c:	052f0605 	streq	r0, [pc, #-1541]!	; e8f <ioreq_uart_a+0x33>
    1490:	21061f02 	tstcs	r6, r2, lsl #30
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1494:	01060605 	tsteq	r6, r5, lsl #12
    1498:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    149c:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
    14a0:	06060520 	streq	r0, [r6], -r0, lsr #10
			SysCtrlAdjustRechargeAfterPowerDown ();
    14a4:	06040501 	streq	r0, [r4], -r1, lsl #10
			reinit_uart ();
    14a8:	061a0523 	ldreq	r0, [sl], -r3, lsr #10
    14ac:	06020501 	streq	r0, [r2], -r1, lsl #10
    14b0:	2e7ef903 	vaddcs.f16	s31, s28, s6	; <UNPREDICTABLE>
}
    14b4:	01061005 	tsteq	r6, r5
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    14b8:	052e2e05 	streq	r2, [lr, #-3589]!	; 0xfffff1fb
    14bc:	0187031a 	orreq	r0, r7, sl, lsl r3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    14c0:	18052f3c 	stmdane	r5, {r2, r3, r4, r5, r8, r9, sl, fp, sp}
    14c4:	1f170520 	svcne	0x00170520
    14c8:	0a030905 	beq	c38e4 <__ccfg+0xa393c>
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    14cc:	030d0520 	movweq	r0, #54560	; 0xd520
    14d0:	0b052076 	bleq	1496b0 <__ccfg+0x129708>
    14d4:	1d0d0523 	cfstr32ne	mvfx0, [sp, #-140]	; 0xffffff74
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    14d8:	4d060405 	cfstrsmi	mvf0, [r6, #-20]	; 0xffffffec
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    14dc:	06010513 			; <UNDEFINED> instruction: 0x06010513
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    14e0:	06030519 			; <UNDEFINED> instruction: 0x06030519
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    14e4:	0a052f29 	beq	14d190 <__ccfg+0x12d1e8>
    14e8:	09020106 	stmdbeq	r2, {r1, r2, r8}
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    14ec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    14f0:	02050033 	andeq	r0, r5, #51	; 0x33
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    14f4:	00000dd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    14f8:	0105d303 	tsteq	r5, r3, lsl #6
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    14fc:	17140205 	ldrne	r0, [r4, -r5, lsl #4]
    1500:	03063305 	movweq	r3, #25349	; 0x6305
			PRCMPowerDomainOff (
    1504:	02050179 	andeq	r0, r5, #1073741854	; 0x4000001e
    1508:	03330527 	teqeq	r3, #163577856	; 0x9c00000
	__SLEEP;
    150c:	02053c79 	andeq	r3, r5, #30976	; 0x7900
    1510:	043e0627 	ldrteq	r0, [lr], #-1575	; 0xfffff9d9
  __ASM volatile ("cpsie i" : : : "memory");
    1514:	03050502 	movweq	r0, #21762	; 0x5502
	goto Redo;
    1518:	04017bd5 	streq	r7, [r1], #-3029	; 0xfffff42b
    151c:	06020501 	streq	r0, [r2], -r1, lsl #10
    1520:	0104ab03 	tsteq	r4, r3, lsl #22
    1524:	82090306 	andhi	r0, r9, #402653184	; 0x18000000
    1528:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
    152c:	017dd903 	cmneq	sp, r3, lsl #18
    1530:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    1534:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
    1538:	03010501 	movweq	r0, #5377	; 0x1501
    153c:	042002a5 	strteq	r0, [r0], #-677	; 0xfffffd5b
    1540:	03230506 			; <UNDEFINED> instruction: 0x03230506
    1544:	05207ddb 	streq	r7, [r0, #-3547]!	; 0xfffff225
    1548:	054f0605 	strbeq	r0, [pc, #-1541]	; f4b <ioreq_uart_a+0xef>
    154c:	04010622 	streq	r0, [r1], #-1570	; 0xfffff9de
    1550:	06020501 	streq	r0, [r2], -r1, lsl #10
    1554:	66029e03 	strvs	r9, [r2], -r3, lsl #28
    1558:	01060d05 	tsteq	r6, r5, lsl #26
    155c:	2f060205 	svccs	0x00060205
    1560:	13060105 	movwne	r0, #24837	; 0x6105
    1564:	01000c02 	tsteq	r0, r2, lsl #24
    1568:	001c0501 	andseq	r0, ip, r1, lsl #10
    156c:	0e240205 	cdpeq	2, 2, cr0, cr4, cr5, {0}
    1570:	ef030000 	svc	0x00030000
    1574:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
    1578:	05060417 	streq	r0, [r6, #-1047]	; 0xfffffbe9
    157c:	7df70324 	ldclvc	3, cr0, [r7, #144]!	; 0x90
    1580:	17050501 	strne	r0, [r5, -r1, lsl #10]
	cli_tim;
    1584:	01062305 	tsteq	r6, r5, lsl #6
    1588:	02050104 	andeq	r0, r5, #4, 2
    158c:	20028803 	andcs	r8, r2, r3, lsl #16
	diag ("PicOS halted");
    1590:	23050604 	movwcs	r0, #22020	; 0x5604
	mdelay (500);
    1594:	207df803 	rsbscs	pc, sp, r3, lsl #16
    1598:	02050104 	andeq	r0, r5, #4, 2
	setpowermode (2);
    159c:	02850306 	addeq	r0, r5, #402653184	; 0x18000000
	__PCB = NULL;
    15a0:	0506044a 	streq	r0, [r6, #-1098]	; 0xfffffbb6
	release;
    15a4:	7cc90324 	stclvc	3, cr0, [r9], {36}	; 0x24
    15a8:	172d0501 	strne	r0, [sp, -r1, lsl #10]!
    15ac:	17050517 	smladne	r5, r7, r5, r0
    15b0:	01062305 	tsteq	r6, r5, lsl #6
int main (void) {
    15b4:	02050104 	andeq	r0, r5, #4, 2
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    15b8:	03a90306 			; <UNDEFINED> instruction: 0x03a90306
    15bc:	0506043c 	streq	r0, [r6, #-1084]	; 0xfffffbc4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    15c0:	02ce0327 	sbceq	r0, lr, #-1677721600	; 0x9c000000
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    15c4:	14050501 	strne	r0, [r5], #-1281	; 0xfffffaff
	system_init ();
    15c8:	01062405 	tsteq	r6, r5, lsl #8
	tcv_init ();
    15cc:	02050104 	andeq	r0, r5, #4, 2
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    15d0:	7db20306 	ldcvc	3, cr0, [r2, #24]!
    15d4:	000e0258 	andeq	r0, lr, r8, asr r2
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    15d8:	3d050101 	stfccs	f0, [r5, #-4]
    15dc:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
    15e0:	0300000e 	movweq	r0, #14
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    15e4:	0501068f 	streq	r0, [r1, #-1679]	; 0xfffff971
    15e8:	3d051402 	cfstrscc	mvf1, [r5, #-8]
	delay (16, 0);
    15ec:	052e1e06 	streq	r1, [lr, #-3590]!	; 0xfffff1fa
    15f0:	0b030605 	bleq	c2e0c <__ccfg+0xa2e64>
    15f4:	060e0582 	streq	r0, [lr], -r2, lsl #11
	__pi_release ();
    15f8:	2f080501 	svccs	0x00080501
    15fc:	051f0e05 	ldreq	r0, [pc, #-3589]	; 7ff <root+0x2ab>
    1600:	052f0605 	streq	r0, [pc, #-1541]!	; 1003 <UART0IntHandler+0x97>
    1604:	12050f0a 	andne	r0, r5, #10, 30	; 0x28
    1608:	0f052006 	svceq	0x00052006
    160c:	0604052e 	streq	r0, [r4], -lr, lsr #10
    1610:	06070534 			; <UNDEFINED> instruction: 0x06070534
static void killev (__pi_pcb_t *pid) {
    1614:	06050501 	streq	r0, [r5], -r1, lsl #10
	wfun = (aword)(pid->code);
    1618:	052e2803 	streq	r2, [lr, #-2051]!	; 0xfffff7fd
	for_all_tasks (i) {
    161c:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
		for (j = 0; j < nevents (i); j++) {
    1620:	20340301 	eorscs	r0, r4, r1, lsl #6
    1624:	a0030905 	andge	r0, r3, r5, lsl #18
    1628:	04053c7f 	streq	r3, [r5], #-3199	; 0xfffff381
			    || i->Events [j] . Event == wfun
    162c:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
		for (j = 0; j < nevents (i); j++) {
    1630:	0e052108 	adfeqs	f2, f5, #0.0
			if (i->Events [j] . Event == (aword)pid
    1634:	052e7403 	streq	r7, [lr, #-1027]!	; 0xfffffbfd
    1638:	0b030604 	bleq	c2e50 <__ccfg+0xa2ea8>
    163c:	08054b3c 	stmdaeq	r5, {r2, r3, r4, r5, r8, r9, fp, lr}
				wakeupev (i, j);
    1640:	07050106 	streq	r0, [r5, -r6, lsl #2]
    1644:	0605052e 	streq	r0, [r5], -lr, lsr #10
	for_all_tasks (i) {
    1648:	04054b30 	streq	r4, [r5], #-2864	; 0xfffff4d0
}
    164c:	060b0524 	streq	r0, [fp], -r4, lsr #10
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1650:	054a2403 	strbeq	r2, [sl, #-1027]	; 0xfffffbfd
static void qfree (aword *ch) {
    1654:	21062d04 	tstcs	r6, r4, lsl #26
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1658:	01060b05 	tsteq	r6, r5, lsl #22
	cc = (aword*)(mpools + MA_NP);
    165c:	03060505 	movweq	r0, #25861	; 0x6505
	m_setnextp (ch, chunk);
    1660:	0805206e 	stmdaeq	r5, {r1, r2, r3, r5, r6, sp}
	m_setnextp (cc, ch);
    1664:	05053006 	streq	r3, [r5, #-6]
}
    1668:	132f061e 			; <UNDEFINED> instruction: 0x132f061e
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    166c:	050e0a05 	streq	r0, [lr, #-2565]	; 0xfffff5fb
    1670:	05200612 	streq	r0, [r0, #-1554]!	; 0xfffff9ee
    1674:	04052e0f 	streq	r2, [r5], #-3599	; 0xfffff1f1
			m_setnextp (cc, m_nextp (chunk));
    1678:	07053506 	streq	r3, [r5, -r6, lsl #10]
			m_size (chunk) += m_hdrlen + m_size (ch);
    167c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1680:	054b3406 	strbeq	r3, [fp, #-1030]	; 0xfffffbfa
    1684:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    1688:	05052e07 	streq	r2, [r5, #-3591]	; 0xfffff1f9
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    168c:	054b2f06 	strbeq	r2, [fp, #-3846]	; 0xfffff0fa
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    1690:	4d030609 	stcmi	6, cr0, [r3, #-36]	; 0xffffffdc
    1694:	03040520 	movweq	r0, #17696	; 0x4520
    1698:	08052030 	stmdaeq	r5, {r4, r5, sp}
			m_setnextp (cc, m_nextp (chunk));
    169c:	03050521 	movweq	r0, #21793	; 0x5521
			m_size (ch) += m_hdrlen + m_size (chunk);
    16a0:	04052e74 	streq	r2, [r5], #-3700	; 0xfffff18c
    16a4:	3c110306 	ldccc	3, cr0, [r1], {6}
    16a8:	060b055e 			; <UNDEFINED> instruction: 0x060b055e
    16ac:	1f04053d 	svcne	0x0004053d
    16b0:	0b052f06 	bleq	14d2d0 <__ccfg+0x12d328>
    16b4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
			if (m_size (chunk) >= m_size (ch))
    16b8:	07052506 	streq	r2, [r5, -r6, lsl #10]
    16bc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    16c0:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
		chunk = m_nextp (chunk))
    16c4:	08050106 	stmdaeq	r5, {r1, r2, r8}
    16c8:	0605054a 	streq	r0, [r5], -sl, asr #10
    16cc:	06040531 			; <UNDEFINED> instruction: 0x06040531
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    16d0:	062e1603 	strteq	r1, [lr], -r3, lsl #12
	diag_wait (a);
    16d4:	052e6d03 	streq	r6, [lr, #-3331]!	; 0xfffff2fd
	diag_wchar (c, a);
    16d8:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    16dc:	052f0605 	streq	r0, [pc, #-1541]!	; 10df <GPIOIntHandler+0x33>
}
    16e0:	7f880302 	svcvc	0x00880302
    16e4:	06100501 	ldreq	r0, [r0], -r1, lsl #10
	syserror (ESTATE, "state");
    16e8:	030c0501 	movweq	r0, #50433	; 0xc501
    16ec:	052000f9 	streq	r0, [r0, #-249]!	; 0xffffff07
    16f0:	05051f13 	streq	r1, [r5, #-3859]	; 0xfffff0ed
    16f4:	0c052f06 	stceq	15, cr2, [r5], {6}
	for (i = 0; i < MAX_UTIMERS; i++)
    16f8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
void utimer_add (address ut) {
    16fc:	20110306 	andscs	r0, r1, r6, lsl #6
    1700:	01001202 	tsteq	r0, r2, lsl #4
		if (__pi_utims [i] == NULL)
    1704:	002b0501 	eoreq	r0, fp, r1, lsl #10
	for (i = 0; i < MAX_UTIMERS; i++)
    1708:	00000205 	andeq	r0, r0, r5, lsl #4
    170c:	ea030000 	b	c1714 <__ccfg+0xa176c>
		syserror (ERESOURCE, "ut a");
    1710:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
	__pi_utims [i] = ut;
    1714:	06010514 			; <UNDEFINED> instruction: 0x06010514
}
    1718:	00060213 	andeq	r0, r6, r3, lsl r2
    171c:	19050101 	stmdbne	r5, {r0, r8}
    1720:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
	*t = v;
    1724:	0300000f 	movweq	r0, #15
	TCI_RUN_AUXILIARY_TIMER;
    1728:	05010781 	streq	r0, [r1, #-1921]	; 0xfffff87f
void update_n_wake (word min, Boolean force) {
    172c:	06041402 	streq	r1, [r4], -r2, lsl #8
	if (TCI_UPDATE_DELAY_TICKS (force))
    1730:	12032405 	andne	r2, r3, #83886080	; 0x5000000
    1734:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1738:	01062205 	tsteq	r6, r5, lsl #4
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    173c:	19050104 	stmdbne	r5, {r2, r8}
    1740:	042e6703 	strteq	r6, [lr], #-1795	; 0xfffff8fd
    1744:	03220506 			; <UNDEFINED> instruction: 0x03220506
    1748:	01042019 	tsteq	r4, r9, lsl r0
    174c:	6b030605 	blvs	c2f68 <__ccfg+0xa2fc0>
    1750:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
    1754:	20150322 	andscs	r0, r5, r2, lsr #6
    1758:	02050104 	andeq	r0, r5, #4, 2
    175c:	206b0306 	rsbcs	r0, fp, r6, lsl #6
    1760:	01060605 	tsteq	r6, r5, lsl #12
    1764:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    1768:	1c052e29 	stcne	14, cr2, [r5], {41}	; 0x29
    176c:	0603052e 	streq	r0, [r3], -lr, lsr #10
		for_all_tasks (i) {
    1770:	58014b2f 	stmdapl	r1, {r0, r1, r2, r3, r5, r8, r9, fp, lr}
	__pi_mintk = znew + min;
    1774:	01010113 	tsteq	r1, r3, lsl r1
    1778:	0620062e 	strteq	r0, [r0], -lr, lsr #12
			if (!twaiting (i))
    177c:	4a662e66 	bmi	198d11c <__ccfg+0x196d174>
    1780:	02052e01 	andeq	r2, r5, #1, 28
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1784:	06060515 			; <UNDEFINED> instruction: 0x06060515
    1788:	20050501 	andcs	r0, r5, r1, lsl #10
    178c:	052e2505 	streq	r2, [lr, #-1285]!	; 0xfffffafb
    1790:	03052e18 	movweq	r2, #24088	; 0x5e18
    1794:	14062f06 	strne	r2, [r6], #-3846	; 0xfffff0fa
    1798:	014b062c 	cmpeq	fp, ip, lsr #12
    179c:	01011358 	tsteq	r1, r8, asr r3
    17a0:	20062e01 	andcs	r2, r6, r1, lsl #28
    17a4:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
    17a8:	0105014a 	tsteq	r5, sl, asr #2
    17ac:	0b023206 	bleq	8dfcc <__ccfg+0x6e024>
    17b0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
				wakeuptm (i);
    17b4:	02050021 	andeq	r0, r5, #33	; 0x21
    17b8:	0000102c 	andeq	r1, r0, ip, lsr #32
		for_all_tasks (i) {
    17bc:	0107d903 	tsteq	r7, r3, lsl #18
				d = i->Timer - znew;
    17c0:	13140205 	tstne	r4, #1342177280	; 0x50000000
    17c4:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
    17c8:	78fe0303 	ldmvc	lr!, {r0, r1, r8, r9}^
		if ((word)(__pi_mintk - znew) < min) 
    17cc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    17d0:	fd030621 	stc2	6, cr0, [r3, #-132]	; 0xffffff7c
    17d4:	03040106 	movweq	r0, #16646	; 0x4106
	__pi_old = znew;
    17d8:	83030305 	movwhi	r0, #13061	; 0x3305
}
    17dc:	01042079 	tsteq	r4, r9, ror r0
	TCI_RUN_DELAY_TIMER;
    17e0:	03060205 	movweq	r0, #25093	; 0x6205
}
    17e4:	05200783 	streq	r0, [r0, #-1923]!	; 0xfffff87d
    17e8:	0305010e 	movweq	r0, #20750	; 0x510e
    17ec:	05040413 	streq	r0, [r4, #-1043]	; 0xfffffbed
    17f0:	ad030633 	stcge	6, cr0, [r3, #-204]	; 0xffffff34
    17f4:	0104017d 	tsteq	r4, sp, ror r1
void proceed (word state) {
    17f8:	d3030805 	movwle	r0, #14341	; 0x3805
	prcdstate (__pi_curr, state);
    17fc:	04042002 	streq	r2, [r4], #-2
    1800:	ad032d05 	stcge	13, cr2, [r3, #-20]	; 0xffffffec
	release;
    1804:	0104207d 	tsteq	r4, sp, ror r0
    1808:	d3030805 	movwle	r0, #14341	; 0x3805
void __pi_wait (aword event, word state) {
    180c:	03052002 	movweq	r2, #20482	; 0x5002
	sint j = nevents (__pi_curr);
    1810:	1e080522 	cfsh32ne	mvfx0, mvfx8, #18
	if (j >= MAX_EVENTS_PER_TASK)
    1814:	21060305 	tstcs	r6, r5, lsl #6
    1818:	29050404 	stmdbcs	r5, {r2, sl}
    181c:	017da703 	cmneq	sp, r3, lsl #14
		syserror (ENEVENTS, "sw");
    1820:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    1824:	05010633 	streq	r0, [r1, #-1587]	; 0xfffff9cd
	setestate (__pi_curr->Events [j], state, event);
    1828:	01042e2d 	tsteq	r4, sp, lsr #28
	incwait (__pi_curr);
    182c:	03060305 	movweq	r0, #25349	; 0x6305
	setestate (__pi_curr->Events [j], state, event);
    1830:	052002d5 	streq	r0, [r0, #-725]!	; 0xfffffd2b
}
    1834:	051e0608 	ldreq	r0, [lr, #-1544]	; 0xfffff9f8
    1838:	08052203 	stmdaeq	r5, {r0, r1, r9, sp}
    183c:	0504042c 	streq	r0, [r4, #-1068]	; 0xfffffbd4
void __pi_trigger (aword event) {
    1840:	7dad0333 	stcvc	3, cr0, [sp, #204]!	; 0xcc
	for_all_tasks (i) {
    1844:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
		for (j = 0; j < nevents (i); j++) {
    1848:	02d50303 	sbcseq	r0, r5, #201326592	; 0xc000000
    184c:	58410520 	stmdapl	r1, {r5, r8, sl}^
    1850:	1d061d05 	stcne	13, cr1, [r6, #-20]	; 0xffffffec
    1854:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
			if (i->Events [j] . Event == event) {
    1858:	04131303 	ldreq	r1, [r3], #-771	; 0xfffffcfd
    185c:	03290504 			; <UNDEFINED> instruction: 0x03290504
    1860:	05017da7 	streq	r7, [r1, #-3495]	; 0xfffff259
				wakeupev (i, j);
    1864:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    1868:	01040106 	tsteq	r4, r6, lsl #2
	for_all_tasks (i) {
    186c:	03060305 	movweq	r0, #25349	; 0x6305
}
    1870:	052002d5 	streq	r0, [r0, #-725]!	; 0xfffffd2b
aword __pi_join (aword pid, word st) {
    1874:	05010641 	streq	r0, [r1, #-1601]	; 0xfffff9bf
	for_all_tasks (i) {
    1878:	051d061d 	ldreq	r0, [sp, #-1565]	; 0xfffff9e3
    187c:	0205010e 	andeq	r0, r5, #-2147483645	; 0x80000003
	return 0;
    1880:	05030418 	streq	r0, [r3, #-1048]	; 0xfffffbe8
		if ((aword)i == pid) {
    1884:	78ec0303 	stmiavc	ip!, {r0, r1, r8, r9}^
			__pi_wait (pid, st);
    1888:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
}
    188c:	95030601 	strls	r0, [r3, #-1537]	; 0xfffff9ff
	for_all_tasks (i) {
    1890:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
    1894:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
void delay (word d, word state) {
    1898:	02050021 	andeq	r0, r5, #33	; 0x21
	settstate (__pi_curr, state);
    189c:	00001070 	andeq	r1, r0, r0, ror r0
    18a0:	0107ec03 	tsteq	r7, r3, lsl #24
    18a4:	13140205 	tstne	r4, #1342177280	; 0x50000000
    18a8:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
	update_n_wake (d, YES);
    18ac:	78eb0303 	stmiavc	fp!, {r0, r1, r8, r9}^
    18b0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	__pi_curr->Timer = __pi_old + d;
    18b4:	90030621 	andls	r0, r3, r1, lsr #12
    18b8:	03040107 	movweq	r0, #16647	; 0x4107
	inctimer (__pi_curr);
    18bc:	f0030305 			; <UNDEFINED> instruction: 0xf0030305
    18c0:	01042078 	tsteq	r4, r8, ror r0
    18c4:	03060205 	movweq	r0, #25093	; 0x6205
}
    18c8:	05200796 	streq	r0, [r0, #-1942]!	; 0xfffff86a
    18cc:	0905010e 	stmdbeq	r5, {r1, r2, r3, r8}
	if (fun == NULL)
    18d0:	04040106 	streq	r0, [r4], #-262	; 0xfffffefa
		return (int) __pi_curr;
    18d4:	9b033305 	blls	ce4f0 <__ccfg+0xae548>
    18d8:	0104207d 	tsteq	r4, sp, ror r0
	for_all_tasks (i)
    18dc:	e6030805 	str	r0, [r3], -r5, lsl #16
}
    18e0:	04042002 	streq	r2, [r4], #-2
		if (i->code == fun)
    18e4:	9a032d05 	bls	ccd00 <__ccfg+0xacd58>
	for_all_tasks (i)
    18e8:	0104207d 	tsteq	r4, sp, ror r0
    18ec:	e8030305 	stmda	r3, {r0, r2, r8, r9}
    18f0:	1e062002 	cdpne	0, 0, cr2, cr6, cr2, {0}
int __pi_strlen (const char *s) {
    18f4:	01060805 	tsteq	r6, r5, lsl #16
	for (i = 0; *(s+i) != '\0'; i++);
    18f8:	051f1e05 	ldreq	r1, [pc, #-3589]	; afb <udelay+0x1f>
}
    18fc:	03052106 	movweq	r2, #20742	; 0x5106
	for (i = 0; *(s+i) != '\0'; i++);
    1900:	04042f06 	streq	r2, [r4], #-3846	; 0xfffff0fa
	while ((Boolean)(*d++ = *s++));
    1904:	94032905 	strls	r2, [r3], #-2309	; 0xfffff6fb
    1908:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
    190c:	06330517 			; <UNDEFINED> instruction: 0x06330517
}
    1910:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	while (n-- && (*s != '\0'))
    1914:	02e80303 	rsceq	r0, r8, #201326592	; 0xc000000
    1918:	4702052e 	strmi	r0, [r2, -lr, lsr #10]
	*d = '\0';
    191c:	2d050404 	cfstrscs	mvf0, [r5, #-16]
	while (n-- && (*s != '\0'))
    1920:	207d9b03 	rsbscs	r9, sp, r3, lsl #22
    1924:	03050104 	movweq	r0, #20740	; 0x5104
		*d++ = *s++;
    1928:	02e80306 	rsceq	r0, r8, #402653184	; 0x18000000
    192c:	06410520 	strbeq	r0, [r1], -r0, lsr #10
	while (n--)
    1930:	061d0501 	ldreq	r0, [sp], -r1, lsl #10
    1934:	010e051d 	tsteq	lr, sp, lsl r5
		*dest++ = *src++;
    1938:	01060205 	tsteq	r6, r5, lsl #4
    193c:	03042606 	movweq	r2, #17926	; 0x4606
    1940:	d9030305 	stmdble	r3, {r0, r2, r8, r9}
	while (n--)
    1944:	01040178 	tsteq	r4, r8, ror r1
}
    1948:	03060105 	movweq	r0, #24837	; 0x6105
		*dest++ = c;
    194c:	022007a8 	eoreq	r0, r0, #168, 14	; 0x2a00000
void adddevfunc (devreqfun_t rf, int loc) {
    1950:	01010008 	tsteq	r1, r8
		syserror (EREQPAR, "addv");
    1954:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
		syserror (ERESOURCE, "addv");
    1958:	0010ac02 	andseq	sl, r0, r2, lsl #24
	if (ioreq [loc] != NULL)
    195c:	07c50300 	strbeq	r0, [r5, r0, lsl #6]
    1960:	05070401 	streq	r0, [r7, #-1025]	; 0xfffffbff
		syserror (ERESOURCE, "addv");
    1964:	78bb0301 	ldmvc	fp!, {r0, r8, r9}
	ioreq [loc] = rf;
    1968:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
}
    196c:	c5030618 	strgt	r0, [r3, #-1560]	; 0xfffff9e8
    1970:	07040107 	streq	r0, [r4, -r7, lsl #2]
sint io (word retry, word dev, word operation, char *buf, word len) {
    1974:	bb030505 	bllt	c2d90 <__ccfg+0xa2de8>
    1978:	04052078 	streq	r2, [r5], #-120	; 0xffffff88
    197c:	0602052e 	streq	r0, [r2], -lr, lsr #10
    1980:	01013d3d 	tsteq	r1, sp, lsr sp
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1984:	20063c01 	andcs	r3, r6, r1, lsl #24
    1988:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
    198c:	132e014a 			; <UNDEFINED> instruction: 0x132e014a
		syserror (ENODEVICE, "io");
    1990:	08045801 	stmdaeq	r4, {r0, fp, ip, lr}
    1994:	050f0105 	streq	r0, [pc, #-261]	; 1897 <__pi_join+0x23>
	if (len == 0)
    1998:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
	ret = (ioreq [dev]) (operation, buf, len);
    199c:	02052004 	andeq	r2, r5, #4
    19a0:	01013d06 	tsteq	r1, r6, lsl #26
	if (ret >= 0)
    19a4:	20063c01 	andcs	r3, r6, r1, lsl #24
	if (ret == -1) {
    19a8:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
    19ac:	132e014a 			; <UNDEFINED> instruction: 0x132e014a
		if (retry == WNONE)
    19b0:	0458012f 	ldrbeq	r0, [r8], #-303	; 0xfffffed1
		iowait (dev, operation, retry);
    19b4:	06010501 	streq	r0, [r1], -r1, lsl #10
    19b8:	0107d003 	tsteq	r7, r3
    19bc:	01000b02 	tsteq	r0, r2, lsl #22
			release;
    19c0:	00150501 	andseq	r0, r5, r1, lsl #10
	if (ret == -2) {
    19c4:	11500205 	cmpne	r0, r5, lsl #4
		if (retry != WNONE) {
    19c8:	80030000 	andhi	r0, r3, r0
    19cc:	02050108 	andeq	r0, r5, #8, 2
			iowait (dev, operation, retry);
    19d0:	06150514 			; <UNDEFINED> instruction: 0x06150514
    19d4:	32020510 	andcc	r0, r2, #16, 10	; 0x4000000
			(ioreq [dev]) (NONE, buf, len);
    19d8:	593e061e 	ldmdbpl	lr!, {r1, r2, r3, r4, r9, sl}
    19dc:	09045959 	stmdbeq	r4, {r0, r3, r4, r6, r8, fp, ip, lr}
    19e0:	a7030505 	strge	r0, [r3, -r5, lsl #10]
		(ioreq [dev]) (NONE, buf, len);
    19e4:	3105017c 	tstcc	r5, ip, ror r1
    19e8:	01040106 	tsteq	r4, r6, lsl #2
    19ec:	c5030b05 	strgt	r0, [r3, #-2821]	; 0xfffff4fb
}
    19f0:	0904207d 	stmdbeq	r4, {r0, r2, r3, r4, r5, r6, sp}
	if (retry != WNONE) {
    19f4:	bb033105 	bllt	cde10 <__ccfg+0xade68>
		delay (-ret - 2, retry);
    19f8:	01042002 	tsteq	r4, r2
    19fc:	c8033205 	stmdagt	r3, {r0, r2, r9, ip, sp}
    1a00:	04042e7d 	streq	r2, [r4], #-3709	; 0xfffff183
    1a04:	9b030505 	blls	c2e20 <__ccfg+0xa2e78>
		release;
    1a08:	2d052e02 	stccs	14, cr2, [r5, #-8]
    1a0c:	2e7ecc03 	cdpcs	12, 7, cr12, cr14, cr3, {0}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1a10:	042e4a03 	strteq	r4, [lr], #-2563	; 0xfffff5fd
    1a14:	03310509 	teqeq	r1, #37748736	; 0x2400000
    1a18:	042e0287 	strteq	r0, [lr], #-647	; 0xfffffd79
    1a1c:	06020501 	streq	r0, [r2], -r1, lsl #10
    1a20:	2003dc03 	andcs	sp, r3, r3, lsl #24
		syserror (ERESOURCE, "mal1");
    1a24:	0179e703 	cmneq	r9, r3, lsl #14
    1a28:	01070514 	tsteq	r7, r4, lsl r5
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1a2c:	05011205 	streq	r1, [r1, #-517]	; 0xfffffdfb
    1a30:	15051403 	strne	r1, [r5, #-1027]	; 0xfffffbfd
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a34:	3d050106 	stfccs	f0, [r5, #-24]	; 0xffffffe8
	m_size (mpools [0]) = mlen - m_hdrlen;
    1a38:	2207052c 	andcs	r0, r7, #44, 10	; 0xb000000
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a3c:	2f060305 	svccs	0x00060305
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1a40:	58063205 	stmdapl	r6, {r0, r2, r9, ip, sp}
    1a44:	052e2105 	streq	r2, [lr, #-261]!	; 0xfffffefb
}
    1a48:	052f0603 	streq	r0, [pc, #-1539]!	; 144d <__pi_release+0x121>
    1a4c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1a50:	04220604 	strteq	r0, [r2], #-1540	; 0xfffff9fc
    1a54:	03290504 			; <UNDEFINED> instruction: 0x03290504
    1a58:	05010291 	streq	r0, [r1, #-657]	; 0xfffffd6f
    1a5c:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
void __pi_free (aword *ch) {
    1a60:	06380517 			; <UNDEFINED> instruction: 0x06380517
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1a64:	0501043c 	streq	r0, [r1, #-1084]	; 0xfffffbc4
    1a68:	e9030603 	stmdb	r3, {r0, r1, r9, sl}
		syserror (EMALLOC, "malg");
    1a6c:	0605207d 			; <UNDEFINED> instruction: 0x0605207d
    1a70:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
	mcfree [MA_NP] += m_size (ch);
    1a74:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
		m_size (ch) ^= MALLOC_UMASK;
    1a78:	27032905 	strcs	r2, [r3, -r5, lsl #18]
    1a7c:	17050501 	strne	r0, [r5, -r1, lsl #10]
	mcfree [MA_NP] += m_size (ch);
    1a80:	01062d05 	tsteq	r6, r5, lsl #26
	QFREE;
    1a84:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
	if (mevent [MA_NP] . nwait) {
    1a88:	3c560306 	mrrccc	3, 0, r0, r6, cr6
    1a8c:	29050404 	stmdbcs	r5, {r2, sl}
		trigger ((aword)(&(mevent [MA_NP])));
    1a90:	0100db03 	tsteq	r0, r3, lsl #22
		mevent [MA_NP] . nwait --;
    1a94:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
}
    1a98:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    1a9c:	063c0501 	ldrteq	r0, [ip], -r1, lsl #10
    1aa0:	2e7f9603 	cdpcs	6, 7, cr9, cr15, cr3, {0}
    1aa4:	05011205 	streq	r1, [r1, #-517]	; 0xfffffdfb
void kill (aword pid) {
    1aa8:	06010602 	streq	r0, [r1], -r2, lsl #12
		pid = (aword) __pi_curr;
    1aac:	2e069a03 	vmlacs.f32	s18, s12, s6
	j = NULL;
    1ab0:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
	for_all_tasks (i) {
    1ab4:	95032905 	strls	r2, [r3, #-2309]	; 0xfffff6fb
	syserror (EREQPAR, "kpi");
    1ab8:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
    1abc:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
		if ((aword)i == pid) {
    1ac0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1ac4:	05e60302 	strbeq	r0, [r6, #770]!	; 0x302
				__PCB = i->Next;
    1ac8:	0504043c 	streq	r0, [r4, #-1084]	; 0xfffffbc4
			killev (i);
    1acc:	7a9a032d 	bvc	fe682788 <_estack+0xde67d788>
			ufree (i);
    1ad0:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
			if (i == __pi_curr)
    1ad4:	e6030602 	str	r0, [r3], -r2, lsl #12
    1ad8:	04042005 	streq	r2, [r4], #-5
				release;
    1adc:	95032905 	strls	r2, [r3, #-2309]	; 0xfffff6fb
				j->Next = i->Next;
    1ae0:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
    1ae4:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    1ae8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
}
    1aec:	e6030602 	str	r0, [r3], -r2, lsl #12
    1af0:	01012005 	tsteq	r1, r5
    1af4:	01010101 	tsteq	r1, r1, lsl #2
	if (size < 8)
    1af8:	012e0166 			; <UNDEFINED> instruction: 0x012e0166
		_size = 2;
    1afc:	29050404 	stmdbcs	r5, {r2, sl}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1b00:	017acb03 	cmneq	sl, r3, lsl #22
		_size = (((aword)size) + 3) >> 2;
    1b04:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b08:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
		_size = (((aword)size) + 3) >> 2;
    1b0c:	03020501 	movweq	r0, #9473	; 0x2501
		if (mevent [MA_NP] . nfail != 255)
    1b10:	042005b0 	strteq	r0, [r0], #-1456	; 0xfffffa50
    1b14:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
			mevent [MA_NP] . nfail ++;
    1b18:	04207ad0 	strteq	r7, [r0], #-2768	; 0xfffff530
		mnfree [MA_NP] = 0;
    1b1c:	06020501 	streq	r0, [r2], -r1, lsl #10
    1b20:	2005b003 	andcs	fp, r5, r3
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b24:	29050404 	stmdbcs	r5, {r2, sl}
    1b28:	017acb03 	cmneq	sl, r3, lsl #22
			syserror (EMALLOC, "malc");
    1b2c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    1b30:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
		if (m_size (chunk) >= _size)
    1b34:	06020501 	streq	r0, [r2], -r1, lsl #10
    1b38:	2005b003 	andcs	fp, r5, r3
		chunk = m_nextp (chunk)) {
    1b3c:	01010101 	tsteq	r1, r1, lsl #2
		m_setnextp (cc, m_nextp (chunk));
    1b40:	23050101 	movwcs	r0, #20737	; 0x5101
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1b44:	01100306 	tsteq	r0, r6, lsl #6
    1b48:	70030205 	andvc	r0, r3, r5, lsl #4
			m_size (chunk) = _size;
    1b4c:	01580620 	cmpeq	r8, r0, lsr #12
			cc = chunk + _size + m_hdrlen;
    1b50:	010d032e 	tsteq	sp, lr, lsr #6
    1b54:	05050a04 	streq	r0, [r5, #-2564]	; 0xfffff5fc
			m_size (cc) = waste - m_hdrlen;
    1b58:	017ecd03 	cmneq	lr, r3, lsl #26
			QFREE;
    1b5c:	01062f05 	tsteq	r6, r5, lsl #30
		mevent [MA_NP] . nfail = 0;
    1b60:	27050104 	strcs	r0, [r5, -r4, lsl #2]
		mcfree [MA_NP] -= m_size (chunk);
    1b64:	2001ba03 	andcs	fp, r1, r3, lsl #20
    1b68:	2f050a04 	svccs	0x00050a04
    1b6c:	207ec603 	rsbscs	ip, lr, r3, lsl #12
    1b70:	02050104 	andeq	r0, r5, #4, 2
		m_size (chunk) |= MALLOC_UMASK;
    1b74:	01b50306 			; <UNDEFINED> instruction: 0x01b50306
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1b78:	06230520 	strteq	r0, [r3], -r0, lsr #10
		m_size (chunk) |= MALLOC_UMASK;
    1b7c:	03020513 	movweq	r0, #9491	; 0x2513
			mnfree [MA_NP] = mcfree [MA_NP];
    1b80:	2305200c 	movwcs	r2, #20492	; 0x500c
}
    1b84:	05207403 	streq	r7, [r0, #-1027]!	; 0xfffffbfd
    1b88:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    1b8c:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
    1b90:	27052802 	strcs	r2, [r5, -r2, lsl #16]
    1b94:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
    1b98:	3f280602 	svccc	0x00280602
    1b9c:	4a0a0331 	bmi	282868 <__ccfg+0x2628c0>
aword __pi_fork (fsmcode func, aword data) {
    1ba0:	7dc00340 	stclvc	3, cr0, [r0, #256]	; 0x100
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1ba4:	59595901 	ldmdbpl	r9, {r0, r8, fp, ip, lr}^
    1ba8:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
    1bac:	017eae03 	cmneq	lr, r3, lsl #28
		if ((j = __PCB) == NULL)
    1bb0:	0d050104 	stfeqs	f0, [r5, #-16]
	i->Next = NULL;
    1bb4:	01d40306 	bicseq	r0, r4, r6, lsl #6
	i->data = data;
    1bb8:	05090401 	streq	r0, [r9, #-1025]	; 0xfffffbff
		if ((j = __PCB) == NULL)
    1bbc:	7eac0331 	mcrvc	3, 5, r0, cr12, cr1, {1}
}
    1bc0:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
			for (; j->Next != NULL; j = j->Next);
    1bc4:	d4030602 	strle	r0, [r3], #-1538	; 0xfffff9fe
    1bc8:	0d052001 	stceq	0, cr2, [r5, #-4]
	return (aword) i;
    1bcc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1bd0:	c7032206 	strgt	r2, [r3, -r6, lsl #4]
	if (mevent [MA_NP] . nwait != 255)
    1bd4:	2e012e02 	cdpcs	14, 0, cr2, cr1, cr2, {0}
    1bd8:	0605152e 	streq	r1, [r5], -lr, lsr #10
    1bdc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
		mevent [MA_NP] . nwait ++;
    1be0:	0603052e 	streq	r0, [r3], -lr, lsr #10
	wait ((aword)(&(mevent [MA_NP])), state);
    1be4:	050b0430 	streq	r0, [fp, #-1072]	; 0xfffffbd0
    1be8:	79c30305 	stmibvc	r3, {r0, r2, r8, r9}^
void diag (const char *mess, ...) {
    1bec:	030c0401 	movweq	r0, #50177	; 0xc401
    1bf0:	2e05015e 	mcrcs	1, 0, r0, cr5, cr14, {2}
    1bf4:	0b040106 	bleq	102014 <__ccfg+0xe206c>
	diag_disable_int (a, is);
    1bf8:	03060505 	movweq	r0, #25861	; 0x6505
    1bfc:	34052e23 	strcc	r2, [r5], #-3619	; 0xfffff1dd
    1c00:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
				d = (bc == 16) ? 10000 : 1000000000;
    1c04:	01044b06 	tsteq	r4, r6, lsl #22
	diag_disable_int (a, is);
    1c08:	d5031505 	strle	r1, [r3, #-1285]	; 0xfffffafb
	while (*mess != '\0') {
    1c0c:	03054a06 	movweq	r4, #23046	; 0x5a06
	dgout ('\r');
    1c10:	13040513 	movwne	r0, #17683	; 0x4513
	dgout ('\n');
    1c14:	053a1505 	ldreq	r1, [sl, #-1285]!	; 0xfffffafb
    1c18:	cb031902 	blgt	c8028 <__ccfg+0xa8080>
    1c1c:	0604017e 			; <UNDEFINED> instruction: 0x0604017e
	diag_wait (a);
    1c20:	d4032405 	strle	r2, [r3], #-1029	; 0xfffffbfb
	diag_enable_int (a, is);
    1c24:	0505017e 	streq	r0, [r5, #-382]	; 0xfffffe82
    1c28:	06230517 			; <UNDEFINED> instruction: 0x06230517
}
    1c2c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1c30:	02dd0302 	sbcseq	r0, sp, #134217728	; 0x8000000
    1c34:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
		if (*mess == '%') {
    1c38:	7da30323 	stcvc	3, cr0, [r3, #140]!	; 0x8c
    1c3c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
			if (*mess == 'l') {
    1c40:	dd030602 	stcle	6, cr0, [r3, #-8]
    1c44:	054e4a02 	strbeq	r4, [lr, #-2562]	; 0xfffff5fe
				mess++;
    1c48:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
				val = va_arg (ap, lword);
    1c4c:	03052d02 	movweq	r2, #23810	; 0x5d02
				bc = 32;
    1c50:	2e5f0306 	cdpcs	3, 5, cr0, cr15, cr6, {0}
				bc = 16;
    1c54:	04054141 	streq	r4, [r5], #-321	; 0xfffffebf
			switch (*mess) {
    1c58:	03051306 	movweq	r1, #21254	; 0x5306
    1c5c:	002f021f 	eoreq	r0, pc, pc, lsl r2	; <UNPREDICTABLE>
    1c60:	1f050101 	svcne	0x00050101
				dgout ('%');
    1c64:	08020500 	stmdaeq	r2, {r8, sl}
    1c68:	03000013 	movweq	r0, #19
				dgout (*mess);
    1c6c:	050108fd 	streq	r0, [r1, #-2301]	; 0xfffff703
    1c70:	05161702 	ldreq	r1, [r6, #-1794]	; 0xfffff8fe
			switch (*mess) {
    1c74:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
					v = __pi_hex_enc_table [
    1c78:	2c056615 	stccs	6, cr6, [r5], {21}
					i += 4;
    1c7c:	20150520 	andscs	r0, r5, r0, lsr #10
					(val >> (bc - i)) & 0xf];
    1c80:	05211205 	streq	r1, [r1, #-517]!	; 0xfffffdfb
    1c84:	054a1f15 	strbeq	r1, [sl, #-3861]	; 0xfffff0eb
					dgout (v);
    1c88:	03022301 	movweq	r2, #8961	; 0x2301
    1c8c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
				while (i < bc) {
    1c90:	0205001c 	andeq	r0, r5, #28
			mess++;
    1c94:	00000000 	andeq	r0, r0, r0
					d /= 10;
    1c98:	010adb03 	tsteq	sl, r3, lsl #22
				if ((val >> (bc - 1)) & 1) {
    1c9c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    1ca0:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
					dgout ('-');
    1ca4:	050e061c 	streq	r0, [lr, #-1564]	; 0xfffff9e4
    1ca8:	07052506 	streq	r2, [r5, -r6, lsl #10]
						val |= 0xffff0000;
    1cac:	58060520 	stmdapl	r6, {r5, r8, sl}
    1cb0:	2e060305 	cdpcs	3, 0, cr0, cr6, cr5, {0}
    1cb4:	01060605 	tsteq	r6, r5, lsl #12
				d = (bc == 16) ? 10000 : 1000000000;
    1cb8:	2d063105 	stfcss	f3, [r6, #-20]	; 0xffffffec
    1cbc:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    1cc0:	06200602 	strteq	r0, [r0], -r2, lsl #12
					v = (word) (val / d);
    1cc4:	0601054d 	streq	r0, [r1], -sp, asr #10
					if (v || d == 1) break;
    1cc8:	00040213 	andeq	r0, r4, r3, lsl r2
    1ccc:	31050101 	tstcc	r5, r1, lsl #2
					d /= 10;
    1cd0:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
				d = (bc == 16) ? 10000 : 1000000000;
    1cd4:	03000013 	movweq	r0, #19
					dgout (v + '0');
    1cd8:	05010ae7 	streq	r0, [r1, #-2791]	; 0xfffff519
    1cdc:	03041402 	movweq	r1, #17410	; 0x4402
    1ce0:	b2030305 	andlt	r0, r3, #335544320	; 0x14000000
					d /= 10;
    1ce4:	01040177 	tsteq	r4, r7, ror r1
					val = val - (v * d);
    1ce8:	03063105 	movweq	r3, #24837	; 0x6105
					if (d == 0) break;
    1cec:	040108cc 	streq	r0, [r1], #-2252	; 0xfffff734
					v = (word) (val / d);
    1cf0:	03030503 	movweq	r0, #13571	; 0x3503
    1cf4:	043c77b4 	ldrteq	r7, [ip], #-1972	; 0xfffff84c
				if (bc == 16)
    1cf8:	03310501 	teqeq	r1, #4194304	; 0x400000
				d = (bc == 16) ? 10000 : 1000000000;
    1cfc:	042008cc 	strteq	r0, [r0], #-2252	; 0xfffff734
					val &= 0xffff;
    1d00:	03030503 	movweq	r0, #13571	; 0x3503
					dgout (*s);
    1d04:	042077b4 	strteq	r7, [r0], #-1972	; 0xfffff84c
					s++;
    1d08:	06020501 	streq	r0, [r2], -r1, lsl #10
				while (*s != '\0') {
    1d0c:	2e08d003 	cdpcs	0, 0, cr13, cr8, cr3, {0}
    1d10:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
			dgout (*mess++);
    1d14:	dd030605 	stcle	6, cr0, [r3, #-20]	; 0xffffffec
    1d18:	01046676 	tsteq	r4, r6, ror r6
    1d1c:	03060205 	movweq	r0, #25093	; 0x6205
    1d20:	042009a3 	strteq	r0, [r0], #-2467	; 0xfffff65d
    1d24:	759b030d 	ldrvc	r0, [fp, #781]	; 0x30d
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1d28:	19010101 	stmdbne	r1, {r0, r8}
    1d2c:	01044a5b 	tsteq	r4, fp, asr sl
    1d30:	03061a05 	movweq	r1, #27141	; 0x6a05
    1d34:	042e099d 	strteq	r0, [lr], #-2461	; 0xfffff663
	^ entropy
    1d38:	0602050d 	streq	r0, [r2], -sp, lsl #10
}
    1d3c:	2076f903 	rsbscs	pc, r6, r3, lsl #18
    1d40:	01010101 	tsteq	r1, r1, lsl #2
    1d44:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    1d48:	01360303 	teqeq	r6, r3, lsl #6
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1d4c:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
	word cs = size + hblenb;
    1d50:	82204a03 	eorhi	r4, r0, #12288	; 0x3000
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1d54:	eb030104 	bl	c216c <__ccfg+0xa21c4>
    1d58:	15050108 	strne	r0, [r5, #-264]	; 0xfffffef8
	p -> length = size;
    1d5c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
}
    1d60:	15054c06 	strne	r4, [r5, #-3078]	; 0xfffff3fa
	if (p->attributes.b.queued) {
    1d64:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1d68:	20150520 	andscs	r0, r5, r0, lsr #10
    1d6c:	05200205 	streq	r0, [r0, #-517]!	; 0xfffffdfb
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1d70:	216a0604 	cmncs	sl, r4, lsl #12
		p->attributes.b.queued = 0;
    1d74:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
    1d78:	01778e03 	cmneq	r7, r3, lsl #28
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1d7c:	03050304 	movweq	r0, #21252	; 0x5304
	deq (p);	// Remove from queue
    1d80:	04012b03 	streq	r2, [r1], #-2819	; 0xfffff4fd
}
    1d84:	0302050d 	movweq	r0, #9485	; 0x250d
	tfree ((address)p);
    1d88:	20202055 	eorcs	r2, r0, r5, asr r0
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1d8c:	c5030104 	strgt	r0, [r3, #-260]	; 0xfffffefc
    1d90:	0d04200a 	stceq	0, cr2, [r4, #-40]	; 0xffffffd8
    1d94:	a6030305 	strge	r0, [r3], -r5, lsl #6
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1d98:	10054a75 	andne	r4, r5, r5, ror sl
    1d9c:	06050106 	streq	r0, [r5], -r6, lsl #2
	if (q_empty (q))
    1da0:	20230520 	eorcs	r0, r3, r0, lsr #10
    1da4:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
		trigger (q);
    1da8:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
	if (p->attributes.b.urgent) {
    1dac:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
		p->u.bqueue.next = q->next;
    1db0:	052f0604 	streq	r0, [pc, #-1540]!	; 17b4 <update_n_wake+0x88>
		p->u.bqueue.prev = q;
    1db4:	01041c02 	tsteq	r4, r2, lsl #24
		q->next->prev = (qitem_t*) p;
    1db8:	8f030405 	svchi	0x00030405
	p->attributes.b.queued = 1;
    1dbc:	2a052e09 	bcs	14d5e8 <__ccfg+0x12d640>
    1dc0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
}
    1dc4:	032a0527 			; <UNDEFINED> instruction: 0x032a0527
		p->u.bqueue.prev = q->prev;
    1dc8:	04052079 	streq	r2, [r5], #-121	; 0xffffff87
		q->prev->next = (qitem_t*) p;
    1dcc:	09044e06 	stmdbeq	r4, {r1, r2, r9, sl, fp, lr}
		q->prev = (qitem_t*) p;
    1dd0:	017fb203 	cmneq	pc, r3, lsl #4
    1dd4:	01062905 	tsteq	r6, r5, lsl #18
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1dd8:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
	deq (p);	// Soft dequeue, timer and hook left intact
    1ddc:	00d10306 	sbcseq	r0, r1, r6, lsl #6
	switch (dv) {
    1de0:	02044d66 	andeq	r4, r4, #6528	; 0x1980
    1de4:	9f030505 	svcls	0x00030505
    1de8:	01040178 	tsteq	r4, r8, ror r1
    1dec:	e5030405 	str	r0, [r3, #-1029]	; 0xfffffbfb
			p->attributes.b.urgent = 1;
    1df0:	1a052007 	bne	149e14 <__ccfg+0x129e6c>
    1df4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
			verify_ses (p, "dispose ses");
    1df8:	05214b06 	streq	r4, [r1, #-2822]!	; 0xfffff4fa
    1dfc:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    1e00:	044d0604 	strbeq	r0, [sp], #-1540	; 0xfffff9fc
    1e04:	03050502 	movweq	r0, #21762	; 0x5502
    1e08:	05017896 	streq	r7, [r1, #-2198]	; 0xfffff76a
			verify_phy (p, "dispose phy");
    1e0c:	04210601 	strteq	r0, [r1], #-1537	; 0xfffff9ff
    1e10:	06040501 	streq	r0, [r4], -r1, lsl #10
}
    1e14:	2007f103 	andcs	pc, r7, r3, lsl #2
			enq (oqueues [p->attributes.b.phys], p);
    1e18:	05050c04 	streq	r0, [r5, #-3076]	; 0xfffff3fc
			p->attributes.b.urgent = 1;
    1e1c:	0178a003 	cmneq	r8, r3
    1e20:	31050904 	tstcc	r5, r4, lsl #18
			verify_phy (p, "dispose phy");
    1e24:	02d40306 	sbcseq	r0, r4, #402653184	; 0x18000000
    1e28:	050c0401 	streq	r0, [ip, #-1025]	; 0xfffffbff
    1e2c:	7dac032e 	stcvc	3, cr0, [ip, #184]!	; 0xb8
    1e30:	050e042e 	streq	r0, [lr, #-1070]	; 0xfffffbd2
    1e34:	02880352 	addeq	r0, r8, #1207959553	; 0x48000001
    1e38:	050c042e 	streq	r0, [ip, #-1070]	; 0xfffffbd2
			enq (oqueues [p->attributes.b.phys], p);
    1e3c:	7df8032e 	ldclvc	3, cr0, [r8, #184]!	; 0xb8
    1e40:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
}
    1e44:	e5030604 	str	r0, [r3, #-1540]	; 0xfffff9fc
			rlp (p);
    1e48:	0e042007 	cdpeq	0, 0, cr2, cr4, cr7, {0}
}
    1e4c:	a0033105 	andge	r3, r3, r5, lsl #2
    1e50:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
    1e54:	06520515 			; <UNDEFINED> instruction: 0x06520515
    1e58:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1e5c:	05e50304 	strbeq	r0, [r5, #772]!	; 0x304
    1e60:	050e0420 	streq	r0, [lr, #-1056]	; 0xfffffbe0
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1e64:	7a9b0352 	bvc	fe6c2bb4 <_estack+0xde6bdbb4>
	if (b->attributes.b.outgoing) {
    1e68:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
	b = header (p);
    1e6c:	e0030604 	and	r0, r3, r4, lsl #12
	if (b->attributes.b.outgoing) {
    1e70:	02042e05 	andeq	r2, r4, #5, 28	; 0x50
		verify_ses (b, "tcv02");
    1e74:	86030505 	strhi	r0, [r3], -r5, lsl #10
    1e78:	01040178 	tsteq	r4, r8, ror r1
    1e7c:	fc030405 	stc2	4, cr0, [r3], {5}
    1e80:	09042007 	stmdbeq	r4, {r0, r1, r2, sp}
    1e84:	ea030505 	b	c32a0 <__ccfg+0xa32f8>
		verify_plg (b, tcv_out, "tcv03");
    1e88:	3105017a 	tstcc	r5, sl, ror r1
    1e8c:	29050106 	stmdbcs	r5, {r1, r2, r8}
    1e90:	2004b603 	andcs	fp, r4, r3, lsl #12
    1e94:	ca033105 	bgt	ce2b0 <__ccfg+0xae308>
    1e98:	01042e7b 	tsteq	r4, fp, ror lr
    1e9c:	03060405 	movweq	r0, #25605	; 0x6405
    1ea0:	052e0599 	streq	r0, [lr, #-1433]!	; 0xfffffa67
    1ea4:	05010623 	streq	r0, [r1, #-1571]	; 0xfffff9dd
    1ea8:	6a062004 	bvs	189ec0 <__ccfg+0x169f18>
		dispose (b, plugins [b->attributes.b.plugin] ->
    1eac:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
}
    1eb0:	01799f03 	cmneq	r9, r3, lsl #30
		dispose (b, plugins [b->attributes.b.plugin] ->
    1eb4:	01063f05 	tsteq	r6, r5, lsl #30
		rlp (b);
    1eb8:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
}
    1ebc:	2006ed03 	andcs	lr, r6, r3, lsl #26
		rlp (b);
    1ec0:	3f050904 	svccc	0x00050904
    1ec4:	20799303 	rsbscs	r9, r9, r3, lsl #6
    1ec8:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1ecc:	06ea0306 	strbteq	r0, [sl], r6, lsl #6
    1ed0:	0309042e 	movweq	r0, #37934	; 0x942e
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1ed4:	05017f90 	streq	r7, [r1, #-3984]	; 0xfffff070
    1ed8:	04010629 	streq	r0, [r1], #-1577	; 0xfffff9d7
    1edc:	03040501 	movweq	r0, #17665	; 0x4501
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1ee0:	042e00f3 	strteq	r0, [lr], #-243	; 0xffffff0d
	va_start (ap, plid);
    1ee4:	03290509 			; <UNDEFINED> instruction: 0x03290509
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1ee8:	04207f8d 	strteq	r7, [r0], #-3981	; 0xfffff073
    1eec:	06040501 	streq	r0, [r4], -r1, lsl #10
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1ef0:	4a00f303 	bmi	3eb04 <__ccfg+0x1eb5c>
    1ef4:	0204404d 	andeq	r4, r4, #77	; 0x4d
    1ef8:	ea030505 	b	c3314 <__ccfg+0xa336c>
    1efc:	01040177 	tsteq	r4, r7, ror r1
			syserror (ENODEVICE, "tcv04");
    1f00:	99030405 	stmdbls	r3, {r0, r2, sl}
		syserror (EMALLOC, "tcv05");
    1f04:	1a052008 	bne	149f2c <__ccfg+0x129f84>
	attp.b.outgoing = 1;
    1f08:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1f0c:	05214b06 	streq	r4, [r1, #-2822]!	; 0xfffff4fa
    1f10:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    1f14:	1a052304 	bne	14ab2c <__ccfg+0x12ab84>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f18:	0604051d 			; <UNDEFINED> instruction: 0x0604051d
		if (descriptors [fd] == NULL)
    1f1c:	0904593f 	stmdbeq	r4, {r0, r1, r2, r3, r4, r5, r8, fp, ip, lr}
    1f20:	017eee03 	cmneq	lr, r3, lsl #28
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f24:	01062905 	tsteq	r6, r5, lsl #18
		return ERROR;
    1f28:	0d050e04 	stceq	14, cr0, [r5, #-16]
}
    1f2c:	2e7bdb03 	vaddcs.f64	d29, d11, d3
    1f30:	29050904 	stmdbcs	r5, {r2, r8, fp}
    1f34:	2004a503 	andcs	sl, r4, r3, lsl #10
	s->attpattern.b.session = fd;
    1f38:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1f3c:	01970306 	orrseq	r0, r7, r6, lsl #6
	descriptors [fd] = s;
    1f40:	050e044a 	streq	r0, [lr, #-1098]	; 0xfffffbb6
	q_init (&(s->rqueue));
    1f44:	79f30331 	ldmibvc	r3!, {r0, r4, r5, r8, r9}^
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1f48:	15050501 	strne	r0, [r5, #-1281]	; 0xfffffaff
    1f4c:	01065205 	tsteq	r6, r5, lsl #4
    1f50:	1a050104 	bne	142368 <__ccfg+0x1223c0>
    1f54:	068c0306 	streq	r0, [ip], r6, lsl #6
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1f58:	110a052e 	tstne	sl, lr, lsr #10
    1f5c:	05050e04 	streq	r0, [r5, #-3588]	; 0xfffff1fc
    1f60:	017ac303 	cmneq	sl, r3, lsl #6
	descriptors [fd] = s;
    1f64:	01060d05 	tsteq	r6, r5, lsl #26
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1f68:	0a050104 	beq	142380 <__ccfg+0x1223d8>
    1f6c:	2005bd03 	andcs	fp, r5, r3, lsl #26
	if (s == NULL)
    1f70:	32060405 	andcc	r0, r6, #83886080	; 0x5000000
		syserror (EMALLOC, "tcv05");
    1f74:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
    1f78:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
    1f7c:	110a0521 	tstne	sl, r1, lsr #10
    1f80:	01060b05 	tsteq	r6, r5, lsl #22
    1f84:	05580a05 	ldrbeq	r0, [r8, #-2565]	; 0xfffff5fb
    1f88:	04320604 	ldrteq	r0, [r2], #-1540	; 0xfffff9fc
    1f8c:	03050509 	movweq	r0, #21769	; 0x5509
    1f90:	05017ab8 	streq	r7, [r1, #-2744]	; 0xfffff548
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1f94:	05010631 	streq	r0, [r1, #-1585]	; 0xfffff9cf
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1f98:	7ebc033f 	mrcvc	3, 5, r0, cr12, cr15, {1}
    1f9c:	03310520 	teqeq	r1, #32, 10	; 0x8000000
    1fa0:	042001c4 	strteq	r0, [r0], #-452	; 0xfffffe3c
	plugins [ord] = pl;
    1fa4:	06040501 	streq	r0, [r4], -r1, lsl #10
	return 0;
    1fa8:	2005cb03 	andcs	ip, r5, r3, lsl #22
		return ERROR;
    1fac:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
}
    1fb0:	0178f103 	cmneq	r8, r3, lsl #2	; <UNPREDICTABLE>
    1fb4:	01063f05 	tsteq	r6, r5, lsl #30
	verify_fds (fd, "tcv10");
    1fb8:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    1fbc:	07920306 	ldreq	r0, [r2, r6, lsl #6]
	verify_fds (fd, "tcv10");
    1fc0:	050c042e 	streq	r0, [ip, #-1070]	; 0xfffffbd2
    1fc4:	77f50305 	ldrbvc	r0, [r5, r5, lsl #6]!
    1fc8:	062e0501 	strteq	r0, [lr], -r1, lsl #10
	verify_plg (b, tcv_frm, "tcv11");
    1fcc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	b = q_first (rq);
    1fd0:	8e030604 	cfmadd32hi	mvax0, mvfx0, mvfx3, mvfx4
	if (q_end (b, rq)) {
    1fd4:	02042e08 	andeq	r2, r4, #8, 28	; 0x80
		if (state != WNONE) {
    1fd8:	c9030505 	stmdbgt	r3, {r0, r2, r8, sl}
    1fdc:	01040177 	tsteq	r4, r7, ror r1
			when (rq, state);
    1fe0:	ba030405 	blt	c2ffc <__ccfg+0xa3054>
			release;
    1fe4:	09032008 	stmdbeq	r3, {r3, sp}
	deq (b);	// Dequeue the packet ...
    1fe8:	02052f2e 	andeq	r2, r5, #46, 30	; 0xb8
    1fec:	017db003 	cmneq	sp, r3
	p = ((address)(b + 1));
    1ff0:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
	verify_plg (b, tcv_frm, "tcv11");
    1ff4:	017ed403 	cmneq	lr, r3, lsl #8
    1ff8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    1ffc:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
    2000:	03010501 	movweq	r0, #5377	; 0x1501
    2004:	055801a8 	ldrbeq	r0, [r8, #-424]	; 0xfffffe58
    2008:	f0030604 			; <UNDEFINED> instruction: 0xf0030604
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    200c:	055b2002 	ldrbeq	r2, [fp, #-2]
    2010:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2014:	2c052732 	stccs	7, cr2, [r5], {50}	; 0x32
    2018:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
	b->u.pointers.tail =
    201c:	054c0604 	strbeq	r0, [ip, #-1540]	; 0xfffff9fc
}
    2020:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
		return NULL;
    2024:	055d0604 	ldrbeq	r0, [sp, #-1540]	; 0xfffff9fc
    2028:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
    202c:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    2030:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
    2034:	04240604 	strteq	r0, [r4], #-1540	; 0xfffff9fc
	verify_fds (fd, "tcv16");
    2038:	03050502 	movweq	r0, #21762	; 0x5502
								Boolean urg) {
    203c:	0401778b 	streq	r7, [r1], #-1931	; 0xfffff875
    2040:	03040501 	movweq	r0, #17665	; 0x4501
	verify_fds (fd, "tcv16");
    2044:	042008f8 	strteq	r0, [r0], #-2296	; 0xfffff708
    2048:	0305050e 	movweq	r0, #21774	; 0x550e
    204c:	05017a88 	streq	r7, [r1, #-2696]	; 0xfffff578
	verify_pld (s, tcv_frm, "tcv17");
    2050:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
    2054:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
    2058:	0501064d 	streq	r0, [r1, #-1613]	; 0xfffff9b3
    205c:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
    2060:	0401062e 	streq	r0, [r1], #-1582	; 0xfffff9d2
    2064:	06040501 	streq	r0, [r4], -r1, lsl #10
    2068:	3c05f703 	stccc	7, cr15, [r5], {3}
    206c:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
	ptrs.head = (word) fd;
    2070:	01778503 	cmneq	r7, r3, lsl #10
	ptrs.tail = (word) urg;
    2074:	0d050e04 	stceq	14, cr0, [r5, #-16]
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    2078:	02e80306 	rsceq	r0, r8, #402653184	; 0x18000000
    207c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
		if (state != WNONE) {
    2080:	96030639 			; <UNDEFINED> instruction: 0x96030639
    2084:	0a052006 	beq	14a0a4 <__ccfg+0x12a0fc>
}
    2088:	050e0401 	streq	r0, [lr, #-1025]	; 0xfffffbff
			when (eid, state);
    208c:	79ea0305 	stmibvc	sl!, {r0, r2, r8, r9}^
    2090:	060d0501 	streq	r0, [sp], -r1, lsl #10
			release;
    2094:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    2098:	0696030a 	ldreq	r0, [r6], sl, lsl #6
    209c:	06040520 	streq	r0, [r4], -r0, lsr #10
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    20a0:	05090432 	streq	r0, [r9, #-1074]	; 0xfffffbce
    20a4:	77ec0305 	strbvc	r0, [ip, r5, lsl #6]!
    20a8:	06410501 	strbeq	r0, [r1], -r1, lsl #10
    20ac:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    20b0:	08970304 	ldmeq	r7, {r2, r8, r9}
    20b4:	0509042e 	streq	r0, [r9, #-1070]	; 0xfffffbd2
		if (state != WNONE) {
    20b8:	77e90341 	strbvc	r0, [r9, r1, asr #6]!
    20bc:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
			tmwait (state);
    20c0:	97030604 	strls	r0, [r3, -r4, lsl #12]
    20c4:	04522008 	ldrbeq	r2, [r2], #-8
	b->attributes = s->attpattern;
    20c8:	0302050d 	movweq	r0, #9485	; 0x250d
		b->attributes.b.urgent = 1;
    20cc:	4a2075d1 	bmi	81f818 <__ccfg+0x7ff870>
    20d0:	04010101 	streq	r0, [r1], #-257	; 0xfffffeff
	b->u.pointers.head = ptrs.head;
    20d4:	03030503 	movweq	r0, #13571	; 0x3503
	b->u.pointers.tail = length;
    20d8:	0d04012b 	stfeqs	f0, [r4, #-172]	; 0xffffff54
	return (address) (b + 1);
    20dc:	55030205 	strpl	r0, [r3, #-517]	; 0xfffffdfb
    20e0:	37021620 	strcc	r1, [r2, -r0, lsr #12]
    20e4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    20e8:	02050012 	andeq	r0, r5, #18
    20ec:	00001584 	andeq	r1, r0, r4, lsl #11
    20f0:	0100e103 	tsteq	r0, r3, lsl #2
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    20f4:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
	if (len >= b->u.pointers.tail)
    20f8:	051e0612 	ldreq	r0, [lr, #-1554]	; 0xfffff9ee
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    20fc:	1f212202 	svcne	0x00212202
    2100:	4b2f2106 	blmi	bca520 <__ccfg+0xbaa578>
	if (len > 0) {
    2104:	0608053f 			; <UNDEFINED> instruction: 0x0608053f
		memcpy ((char*)buf, ((char*)p) + b->u.pointers.head, len);
    2108:	06020501 	streq	r0, [r2], -r1, lsl #10
    210c:	0008022f 	andeq	r0, r8, pc, lsr #4
    2110:	3a050101 	bcc	14251c <__ccfg+0x122574>
		b->u.pointers.tail -= len;
    2114:	00020500 	andeq	r0, r2, r0, lsl #10
    2118:	03000000 	movweq	r0, #0
    211c:	050100f1 	streq	r0, [r1, #-241]	; 0xffffff0f
		b->u.pointers.head += len;
    2120:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    2124:	200e063a 	andcs	r0, lr, sl, lsr r6
    2128:	05240605 	streq	r0, [r4, #-1541]!	; 0xfffff9fb
}
    212c:	05051c3a 	streq	r1, [r5, #-3130]	; 0xfffff3c6
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2130:	06030524 	streq	r0, [r3], -r4, lsr #10
    2134:	0606053f 			; <UNDEFINED> instruction: 0x0606053f
    2138:	06040501 	streq	r0, [r4], -r1, lsl #10
	verify_fph (phy, "tcv23");
    213c:	06120530 			; <UNDEFINED> instruction: 0x06120530
    2140:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
    2144:	25060305 	strcs	r0, [r6, #-773]	; 0xfffffcfb
    2148:	01060905 	tsteq	r6, r5, lsl #18
}
    214c:	2f050f04 	svccs	0x00050f04
	return (physical [phy]) (opt, arg);
    2150:	04201503 	strteq	r1, [r0], #-1283	; 0xfffffafd
    2154:	03090501 	movweq	r0, #38145	; 0x9501
    2158:	0305206b 	movweq	r2, #20587	; 0x506b
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    215c:	0f042106 	svceq	0x00042106
	if (opt < 0) {
    2160:	14030505 	strne	r0, [r3], #-1285	; 0xfffffafb
		if (fd < 0)
    2164:	062f0501 	strteq	r0, [pc], -r1, lsl #10
		if (opt == PHYSOPT_PLUGINFO) {
    2168:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			if (fd >= TCV_MAX_PLUGS)
    216c:	207a0301 	rsbscs	r0, sl, r1, lsl #6
			if ((p = plugins [fd]) == NULL)
    2170:	03060405 	movweq	r0, #25605	; 0x6405
    2174:	0f04206f 	svceq	0x0004206f
}
    2178:	c3030505 	movwgt	r0, #13573	; 0x3505
		if (fd >= TCV_MAX_PHYS)
    217c:	05140100 	ldreq	r0, [r4, #-256]	; 0xffffff00
		return physinfo [fd];
    2180:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
    2184:	04330605 	ldrteq	r0, [r3], #-1541	; 0xfffff9fb
	verify_fds (fd, "tcv22");
    2188:	060b0501 	streq	r0, [fp], -r1, lsl #10
    218c:	017fb603 	cmneq	pc, r3, lsl #12
    2190:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
    2194:	05050f04 	streq	r0, [r5, #-3844]	; 0xfffff0fc
    2198:	062f050e 	strteq	r0, [pc], -lr, lsl #10
}
    219c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    21a0:	05410603 	strbeq	r0, [r1, #-1539]	; 0xfffff9fd
    21a4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
			return 0;
    21a8:	06053f04 	streq	r3, [r5], -r4, lsl #30
    21ac:	0604052b 	streq	r0, [r4], -fp, lsr #10
    21b0:	03052f23 	movweq	r2, #24355	; 0x5f23
    21b4:	05130622 	ldreq	r0, [r3, #-1570]	; 0xfffff9de
    21b8:	03051f09 	movweq	r1, #24329	; 0x5f09
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    21bc:	022f2106 	eoreq	r2, pc, #-2147483647	; 0x80000001
    21c0:	01010009 	tsteq	r1, r9
	if (dsp != TCV_DSP_PASS) {
    21c4:	05001105 	streq	r1, [r0, #-261]	; 0xfffffefb
		if (ses == NONE)
    21c8:	0015b402 	andseq	fp, r5, r2, lsl #8
			syserror (EREQPAR, "tcv26");
    21cc:	0af10300 	beq	ffc42dd4 <_estack+0xdfc3ddd4>
		verify_fds (ses, "tcv27");
    21d0:	16030501 	strne	r0, [r3], -r1, lsl #10
    21d4:	010f0513 	tsteq	pc, r3, lsl r5	; <UNPREDICTABLE>
    21d8:	0d061105 	stfeqs	f1, [r6, #-20]	; 0xffffffec
    21dc:	26250520 	strtcs	r0, [r5], -r0, lsr #10
    21e0:	051f0305 	ldreq	r0, [pc, #-773]	; 1ee3 <tcv_open+0xf>
		if ((p = apb (size)) != NULL) {
    21e4:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    21e8:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
		return NULL;
    21ec:	052d0637 	streq	r0, [sp, #-1591]!	; 0xfffff9c9
			p->attributes = descriptors [ses] -> attpattern;
    21f0:	0305010f 	movweq	r0, #20751	; 0x510f
			dispose (p, dsp);
    21f4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
			p->attributes = descriptors [ses] -> attpattern;
    21f8:	19063206 	stmdbne	r6, {r1, r2, r9, ip, sp}
			p->attributes.b.outgoing = 0;
    21fc:	06207903 	strteq	r7, [r0], -r3, lsl #18
			dispose (p, dsp);
    2200:	5b5b3231 	blpl	16ceacc <__ccfg+0x16aeb24>
			return (address)(p + 1);
    2204:	01061c05 	tsteq	r6, r5, lsl #24
    2208:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
	if ((p = apb (size)) != NULL)
    220c:	0c052302 	stceq	3, cr2, [r5], {2}
    2210:	0602051d 			; <UNDEFINED> instruction: 0x0602051d
		return (address)(p + 1);
    2214:	03043e23 	movweq	r3, #20003	; 0x4e23
    2218:	c5030305 	strgt	r0, [r3, #-773]	; 0xfffffcfb
    221c:	01040175 	tsteq	r4, r5, ror r1
    2220:	bd030205 	sfmlt	f0, 4, [r3, #-20]	; 0xffffffec
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2224:	0e02200a 	cdpeq	0, 0, cr2, cr2, cr10, {0}
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2228:	e4010100 	str	r0, [r1], #-256	; 0xffffff00
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    222c:	0300000e 	movweq	r0, #14
    2230:	00019400 	andeq	r9, r1, r0, lsl #8
		syserror (EREQPAR, "tcv28");
    2234:	fb010200 	blx	42a3e <__ccfg+0x22a96>
		syserror (EMALLOC, "tcv29");
    2238:	01000d0e 	tsteq	r0, lr, lsl #26
	physical [phy] = ps;
    223c:	00010101 	andeq	r0, r1, r1, lsl #2
	physinfo [phy] = info;
    2240:	00010000 	andeq	r0, r1, r0
    2244:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2248:	2f656d6f 	svccs	0x00656d6f
    224c:	70657473 	rsbvc	r7, r5, r3, ror r4
    2250:	2f6e6568 	svccs	0x006e6568
		syserror (EMALLOC, "tcv29");
    2254:	6b736544 	blvs	1cdb76c <__ccfg+0x1cbb7c4>
    2258:	2f706f74 	svccs	0x00706f74
	q_init (q);
    225c:	4f534c4f 	svcmi	0x00534c4f
}
    2260:	2f54454e 	svccs	0x0054454e
    2264:	4f434950 	svcmi	0x00434950
    2268:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    226c:	2f534f63 	svccs	0x00534f63
    2270:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2274:	2f006c65 	svccs	0x00006c65
	verify_fph (phy, "tcv30");
    2278:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    227c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    2280:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
	verify_fph (phy, "tcv30");
    2284:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2288:	706f746b 	rsbvc	r7, pc, fp, ror #8
    228c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2290:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    2294:	4349502f 	movtmi	r5, #36911	; 0x902f
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2298:	502f534f 	eorpl	r5, pc, pc, asr #6
    229c:	534f6369 	movtpl	r6, #62313	; 0xf369
		if (plugins [plg] == NULL)
    22a0:	3143432f 	cmpcc	r3, pc, lsr #6
    22a4:	2f585833 	svccs	0x00585833
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    22a8:	33314343 	teqcc	r1, #201326593	; 0xc000001
}
    22ac:	41575858 	cmpmi	r7, r8, asr r8
    22b0:	642f4552 	strtvs	r4, [pc], #-1362	; 22b8 <tcvphy_rcv+0x44>
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    22b4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    22b8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    22bc:	73752f00 	cmnvc	r5, #0, 30
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    22c0:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    22c4:	63672f62 	cmnvs	r7, #392	; 0x188
    22c8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    22cc:	6f6e2d6d 	svcvs	0x006e2d6d
    22d0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    22d4:	2f696261 	svccs	0x00696261
	len -= (ap.head + ap.tail);
    22d8:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    22dc:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    22e0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    22e4:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    22e8:	2f656d6f 	svccs	0x00656d6f
    22ec:	70657473 	rsbvc	r7, r5, r3, ror r4
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    22f0:	2f6e6568 	svccs	0x006e6568
    22f4:	6b736544 	blvs	1cdb80c <__ccfg+0x1cbb864>
    22f8:	2f706f74 	svccs	0x00706f74
	return 1;
    22fc:	4f534c4f 	svcmi	0x00534c4f
    2300:	2f54454e 	svccs	0x0054454e
    2304:	4f434950 	svcmi	0x00434950
    2308:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    230c:	2f534f63 	svccs	0x00534f63
	verify_fph (phy, "tcv32");
    2310:	33314343 	teqcc	r1, #201326593	; 0xc000001
    2314:	2f005858 	svccs	0x00005858
    2318:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    231c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    2320:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    2324:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
	oq = oqueues [phy];
    2328:	706f746b 	rsbvc	r7, pc, fp, ror #8
	b = q_first (oq);
    232c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
	if (q_end (b, oq)) {
    2330:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	*len = b->length;
    2334:	4349502f 	movtmi	r5, #36911	; 0x902f
	deq (b);	// Dequeue the packet ...
    2338:	502f534f 	eorpl	r5, pc, pc, asr #6
}
    233c:	534f6369 	movtpl	r6, #62313	; 0xf369
		return NULL;
    2340:	656b0000 	strbvs	r0, [fp, #-0]!
    2344:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    2348:	0100632e 	tsteq	r0, lr, lsr #6
    234c:	61750000 	cmnvs	r5, r0
	verify_fph (phy, "tcv33");
    2350:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
    2354:	00000200 	andeq	r0, r0, r0, lsl #4
    2358:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    235c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    2360:	00000300 	andeq	r0, r0, r0, lsl #6
    2364:	61647473 	smcvs	18243	; 0x4743
	oq = oqueues [phy];
    2368:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
	b = q_first (oq);
    236c:	00000300 	andeq	r0, r0, r0, lsl #6
		return NULL;
    2370:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
	return (address)(b + 1);
    2374:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
}
    2378:	616d0000 	cmnvs	sp, r0
    237c:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    2380:	00000400 	andeq	r0, r0, r0, lsl #8
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    2384:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
	verify_plg (b, tcv_xmt, "tcv34");
    2388:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
	hblock_t *b = header (pkt);
    238c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
	verify_plg (b, tcv_xmt, "tcv34");
    2390:	75620000 	strbvc	r0, [r2, #-0]!
    2394:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    2398:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    239c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    23a0:	73000004 	movwvc	r0, #4
    23a4:	6f697379 	svcvs	0x00697379
    23a8:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
	dispose (b, plugins [b->attributes.b.plugin] ->
    23ac:	656b0000 	strbvs	r0, [fp, #-0]!
}
    23b0:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
	dispose (b, plugins [b->attributes.b.plugin] ->
    23b4:	0100682e 	tsteq	r0, lr, lsr #16
    23b8:	623c0000 	eorsvs	r0, ip, #0
    23bc:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
}
    23c0:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    while(1)
    23c4:	00000000 	andeq	r0, r0, r0
{
    23c8:	00260500 	eoreq	r0, r6, r0, lsl #10
    SetupTrimDevice();
    23cc:	16140205 	ldrne	r0, [r4], -r5, lsl #4
    pui32Src = &_etext;
    23d0:	c3030000 	movwgt	r0, #12288	; 0x3000
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    23d4:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    __asm("    ldr     r0, =_bss\n"
    23d8:	14131316 	ldrne	r1, [r3], #-790	; 0xfffffcea
    23dc:	03062605 	movweq	r2, #26117	; 0x6605
    23e0:	02050178 	andeq	r0, r5, #120, 2
    23e4:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    23e8:	02051f07 	andeq	r1, r5, #7, 30
   main();
    23ec:	05202106 	streq	r2, [r0, #-262]!	; 0xfffffefa
    FaultISR();
    23f0:	05210613 	streq	r0, [r1, #-1555]!	; 0xfffff9ed
        *pui32Dest++ = *pui32Src++;
    23f4:	13053c0a 	movwne	r3, #23562	; 0x5c0a
    23f8:	3e080520 	cfsh32cc	mvfx0, mvfx8, #16
    23fc:	2c060f05 	stccs	15, cr0, [r6], {5}
    2400:	01060305 	tsteq	r6, r5, lsl #6
    2404:	2f060405 	svccs	0x00060405
    2408:	01061605 	tsteq	r6, r5, lsl #12
    240c:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
    2410:	4b310605 	blmi	c43c2c <__ccfg+0xc23c84>
static byte get_byte () {
    2414:	7a030205 	bvc	c2c30 <__ccfg+0xa2c88>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2418:	06010501 	streq	r0, [r1], -r1, lsl #10
    241c:	022e0a03 	eoreq	r0, lr, #12288	; 0x3000
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2420:	01010003 	tsteq	r1, r3
    2424:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
		if (ee_inp)
    2428:	00165002 	andseq	r5, r6, r2
			b |= 1;
    242c:	06c90300 	strbeq	r0, [r9], r0, lsl #6
    2430:	03020501 	movweq	r0, #9473	; 0x2501
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2434:	1314010d 	tstne	r4, #1073741827	; 0x40000003
	for (b = 0, i = 0; i < 8; i++) {
    2438:	01060d05 	tsteq	r6, r5, lsl #26
}
    243c:	70031f05 	andvc	r1, r3, r5, lsl #30
    2440:	030d0520 	movweq	r0, #54560	; 0xd520
    2444:	1f052e10 	svcne	0x00052e10
static void put_byte (byte b) {
    2448:	02052006 	andeq	r2, r5, #6
    244c:	03060106 	movweq	r0, #24838	; 0x6106
    2450:	05132011 	ldreq	r2, [r3, #-17]	; 0xffffffef
    2454:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
		if (b & 0x80)
    2458:	1f051f05 	svcne	0x00051f05
    245c:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2460:	25060106 	strcs	r0, [r6, #-262]	; 0xfffffefa
	for (i = 0; i < 8; i++) {
    2464:	060f0521 	streq	r0, [pc], -r1, lsr #10
		b <<= 1;
    2468:	1d020515 	cfstr32ne	mvfx0, [r2, #-84]	; 0xffffffac
	for (i = 0; i < 8; i++) {
    246c:	0f052306 	svceq	0x00052306
}
    2470:	01050106 	tsteq	r5, r6, lsl #2
    2474:	06030524 	streq	r0, [r3], -r4, lsr #10
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2478:	05206203 	streq	r6, [r0, #-515]!	; 0xfffffdfd
    247c:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
	put_byte (cmd);
    2480:	04055806 	streq	r5, [r5], #-2054	; 0xfffff7fa
    2484:	05213006 	streq	r3, [r1, #-6]!
}
    2488:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    248c:	05910604 	ldreq	r0, [r1, #1540]	; 0x604
static void wwait (word st, word del) {
    2490:	36050d2e 	strcc	r0, [r5], -lr, lsr #26
    2494:	0a050106 	beq	1428b4 <__ccfg+0x12290c>
    2498:	1f053406 	svcne	0x00053406
	while (dopen && (rdsr () & 1)) {
    249c:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    24a0:	06040558 			; <UNDEFINED> instruction: 0x06040558
    24a4:	10052f22 	andne	r2, r5, r2, lsr #30
    24a8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	put_byte (CMD_RDSR);
    24ac:	ac0b0306 	stcge	3, cr0, [fp], {6}
	r = get_byte ();
    24b0:	01060705 	tsteq	r6, r5, lsl #14
    24b4:	64062e05 	strvs	r2, [r6], #-3589	; 0xfffff1fb
	while (dopen && (rdsr () & 1)) {
    24b8:	13060905 	movwne	r0, #26885	; 0x6905
}
    24bc:	01000702 	tsteq	r0, r2, lsl #14
		if (st == WNONE)
    24c0:	001c0501 	andseq	r0, ip, r1, lsl #10
    24c4:	16d00205 	ldrbne	r0, [r0], r5, lsl #4
			mdelay (1);
    24c8:	c6030000 	strgt	r0, [r3], -r0
    24cc:	02050108 	andeq	r0, r5, #8, 2
			delay (del, st);
    24d0:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    24d4:	df03060d 	svcle	0x0003060d
			release;
    24d8:	0104017c 	tsteq	r4, ip, ror r1
    24dc:	03060f05 	movweq	r0, #28421	; 0x6f05
    24e0:	052003a1 	streq	r0, [r0, #-929]!	; 0xfffffc5f
static void ready () {
    24e4:	02040102 	andeq	r0, r4, #-2147483648	; 0x80000000
	if (dopen) {
    24e8:	da032405 	ble	cb504 <__ccfg+0xab55c>
		wwait (WNONE, 1);
    24ec:	0505017c 	streq	r0, [r5, #-380]	; 0xfffffe84
    24f0:	060d0517 			; <UNDEFINED> instruction: 0x060d0517
    24f4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	dstat = 0;
    24f8:	03a10302 			; <UNDEFINED> instruction: 0x03a10302
}
    24fc:	052f0620 	streq	r0, [pc, #-1568]!	; 1ee4 <tcv_open+0x10>
    2500:	023d0601 	eorseq	r0, sp, #1048576	; 0x100000
    2504:	01010005 	tsteq	r1, r5
	udelay (1);
    2508:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
    250c:	00000002 	andeq	r0, r0, r2
	udelay (1);
    2510:	00de0300 	sbcseq	r0, lr, r0, lsl #6
		dopen = DOPEN_TEMP;
    2514:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2518:	06270514 			; <UNDEFINED> instruction: 0x06270514
    251c:	2402050e 	strcs	r0, [r2], #-1294	; 0xfffffaf2
    2520:	051c2705 	ldreq	r2, [ip, #-1797]	; 0xfffff8fb
static void cclose () {
    2524:	20062402 	andcs	r2, r6, r2, lsl #8
	if (dopen == DOPEN_TEMP) {
    2528:	48030523 	stmdami	r3, {r0, r1, r5, r8, sl}
    252c:	01060605 	tsteq	r6, r5, lsl #12
		wwait (WNONE, 1);
    2530:	2d060205 	sfmcs	f0, 4, [r6, #-20]	; 0xffffffec
    2534:	32060105 	andcc	r0, r6, #1073741825	; 0x40000001
	cmd_0 (CMD_DP);
    2538:	01000502 	tsteq	r0, r2, lsl #10
    253c:	001b0501 	andseq	r0, fp, r1, lsl #10
		dopen = 0;
    2540:	16e80205 	strbtne	r0, [r8], r5, lsl #4
}
    2544:	fa030000 	blx	c254c <__ccfg+0xa25a4>
word ee_open () {
    2548:	02050100 	andeq	r0, r5, #0, 2
	ready ();
    254c:	061b0513 			; <UNDEFINED> instruction: 0x061b0513
	dopen = DOPEN_PERM;
    2550:	2102051f 	tstcs	r2, pc, lsl r5
    2554:	01000602 	tsteq	r0, r2, lsl #12
}
    2558:	001e0501 	andseq	r0, lr, r1, lsl #10
	if (dopen) {
    255c:	16f80205 	ldrbtne	r0, [r8], r5, lsl #4
    2560:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
		dopen = DOPEN_TEMP;
    2564:	02050100 	andeq	r0, r5, #0, 2
		cclose ();
    2568:	0e051416 	cfmvdlreq	mvd5, r1
}
    256c:	061e0501 	ldreq	r0, [lr], -r1, lsl #10
int ser_out (word st, const char *m) {
    2570:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
	if ((prcs = running (__outserial)) != 0) {
    2574:	1e053409 	cdpne	4, 0, cr3, cr5, cr9, {0}
    2578:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    257c:	05270603 	streq	r0, [r7, #-1539]!	; 0xfffff9fd
		join (prcs, st);
    2580:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
		release;
    2584:	1f052e06 	svcne	0x00052e06
	if (*m)
    2588:	20051f06 	andcs	r1, r5, r6, lsl #30
		prcs = strlen (m) +1;
    258c:	0e050106 	adfeqs	f0, f5, f6
    2590:	02052006 	andeq	r2, r5, #6
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    2594:	32060106 	andcc	r0, r6, #-2147483647	; 0x80000001
    2598:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    259c:	05153b02 	ldreq	r3, [r5, #-2818]	; 0xfffff4fe
		umwait (st);
    25a0:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    25a4:	06022f01 	streq	r2, [r2], -r1, lsl #30
		prcs =  m [1] + 3;
    25a8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	if (*m)
    25ac:	02050021 	andeq	r0, r5, #33	; 0x21
		strcpy (buf, m);
    25b0:	00000000 	andeq	r0, r0, r0
    25b4:	01018e03 	tsteq	r1, r3, lsl #28
	if (runstrand (__outserial, buf) == 0) {
    25b8:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    25bc:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
		ufree (buf);
    25c0:	05200609 	streq	r0, [r0, #-1545]!	; 0xfffff9f7
    25c4:	2e7a0321 	cdpcs	3, 7, cr0, cr10, cr1, {1}
		memcpy (buf, m, prcs);
    25c8:	27060305 	strcs	r0, [r6, -r5, lsl #6]
    25cc:	01061205 	tsteq	r6, r5, lsl #4
    25d0:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
}
    25d4:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    25d8:	06054b03 	streq	r4, [r5], -r3, lsl #22
int ser_in (word st, char *buf, int len) {
    25dc:	1f050106 	svcne	0x00050106
    25e0:	20052b06 	andcs	r2, r5, r6, lsl #22
	if (len == 0)
    25e4:	0e050106 	adfeqs	f0, f5, f6
	if (__inpline == NULL) {
    25e8:	02052006 	andeq	r2, r5, #6
		if ((prcs = running (__inserial)) == 0) {
    25ec:	34060106 	strcc	r0, [r6], #-262	; 0xfffffefa
    25f0:	05580b05 	ldrbeq	r0, [r8, #-2821]	; 0xfffff4fb
			prcs = runthread (__inserial);
    25f4:	08051302 	stmdaeq	r5, {r1, r8, r9, ip}
    25f8:	2f030501 	svccs	0x00030501
			if (prcs == 0) {
    25fc:	01061f05 	tsteq	r6, r5, lsl #30
				npwait (st);
    2600:	05202105 	streq	r2, [r0, #-261]!	; 0xfffffefb
		release;
    2604:	03052012 	movweq	r2, #20498	; 0x5012
		join (prcs, st);
    2608:	06052f06 	streq	r2, [r5], -r6, lsl #30
    260c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
	if (*__inpline == NULL) // bin cmd
    2610:	0b053206 	bleq	14ee30 <__ccfg+0x12ee88>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2614:	0601052e 	streq	r0, [r1], -lr, lsr #10
	if (prcs >= len)
    2618:	00070213 	andeq	r0, r7, r3, lsl r2
		prcs = len-1;
    261c:	2a050101 	bcs	142a28 <__ccfg+0x122a80>
	memcpy (buf, __inpline, prcs);
    2620:	24020500 	strcs	r0, [r2], #-1280	; 0xfffffb00
    2624:	03000017 	movweq	r0, #23
    2628:	050101a6 	streq	r0, [r1, #-422]	; 0xfffffe5a
	ufree (__inpline);
    262c:	05051402 	streq	r1, [r5, #-1026]	; 0xfffffbfe
	__inpline = NULL;
    2630:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
	if (*buf) // if it's NULL, it's a bin cmd
    2634:	02022106 	andeq	r2, r2, #-2147483647	; 0x80000001
		buf [prcs] = '\0';
    2638:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
}
    263c:	0205002e 	andeq	r0, r5, #46	; 0x2e
		prcs = strlen (__inpline);
    2640:	0000172c 	andeq	r1, r0, ip, lsr #14
    2644:	0101ae03 	tsteq	r1, r3, lsl #28
		return 0;
    2648:	02052006 	andeq	r2, r5, #6
    264c:	200e0306 	andcs	r0, lr, r6, lsl #6
    2650:	01100313 	tsteq	r0, r3, lsl r3
int ser_outf (word st, const char *m, ...) {
    2654:	01060605 	tsteq	r6, r5, lsl #12
    2658:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
	if ((prcs = running (__outserial)) != 0) {
    265c:	09030602 	stmdbeq	r3, {r1, r9, sl}
    2660:	0606052e 	streq	r0, [r6], -lr, lsr #10
		join (prcs, st);
    2664:	58050501 	stmdapl	r5, {r0, r8, sl}
    2668:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
		release;
    266c:	27080603 	strcs	r0, [r8, -r3, lsl #12]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2670:	0302052e 	movweq	r0, #9518	; 0x252e
    2674:	14052029 	strne	r2, [r5], #-41	; 0xffffffd7
    2678:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
		umwait (st);
    267c:	0604052e 	streq	r0, [r4], -lr, lsr #10
    2680:	052e5903 	streq	r5, [lr, #-2307]!	; 0xfffff6fd
	if (runstrand (__outserial, buf) == 0) {
    2684:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2688:	04052007 	streq	r2, [r5], #-7
    268c:	08053106 	stmdaeq	r5, {r1, r2, r8, ip, sp}
		ufree (buf);
    2690:	07050106 	streq	r0, [r5, -r6, lsl #2]
		npwait (st);
    2694:	2e08053c 	mcrcs	5, 0, r0, cr8, cr12, {1}
}
    2698:	08060505 	stmdaeq	r6, {r0, r2, r8, sl}
    269c:	0303053e 	movweq	r0, #13630	; 0x353e
    26a0:	05053c79 	streq	r3, [r5, #-3193]	; 0xfffff387
    26a4:	052e0b03 	streq	r0, [lr, #-2819]!	; 0xfffff4fd
int ser_inf (word st, const char *fmt, ...) {
    26a8:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    26ac:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
	if (fmt == NULL)
    26b0:	05110607 	ldreq	r0, [r1, #-1543]	; 0xfffff9f9
	if (__inpline == NULL) {
    26b4:	17030603 	strne	r0, [r3, -r3, lsl #12]
		if ((prcs = running (__inserial)) == 0) {
    26b8:	06070566 	streq	r0, [r7], -r6, ror #10
    26bc:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
			prcs = runthread (__inserial);
    26c0:	03060205 	movweq	r0, #25093	; 0x6205
    26c4:	0b053c16 	bleq	151724 <__ccfg+0x13177c>
			if (prcs == 0) {
    26c8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
				npwait (st);
    26cc:	01054006 	tsteq	r5, r6
		release;
    26d0:	010d0306 	tsteq	sp, r6, lsl #6
		join (prcs, st);
    26d4:	73030205 	movwvc	r0, #12805	; 0x3205
    26d8:	0301052e 	movweq	r0, #5422	; 0x152e
	va_start (ap, fmt);
    26dc:	0a022e0d 	beq	8df18 <__ccfg+0x6df70>
	prcs = vscan (__inpline, fmt, ap);
    26e0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    26e4:	0205001b 	andeq	r0, r5, #27
	ufree (__inpline);
    26e8:	000017f8 	strdeq	r1, [r0], -r8
	__inpline = NULL;
    26ec:	0102d203 	tsteq	r2, r3, lsl #4
}
    26f0:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    26f4:	0510061b 	ldreq	r0, [r0, #-1563]	; 0xfffff9e5
    26f8:	4b062202 	blmi	18af08 <__ccfg+0x16af60>
		return 0;
    26fc:	01000502 	tsteq	r0, r2, lsl #10
    2700:	002a0501 	eoreq	r0, sl, r1, lsl #10
    2704:	180c0205 	stmdane	ip, {r0, r2, r9}
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2708:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    270c:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    2710:	062a0516 			; <UNDEFINED> instruction: 0x062a0516
	RF_cmdFs.frequency = 
    2714:	240b050e 	strcs	r0, [fp], #-1294	; 0xfffffaf2
}
    2718:	053e0505 	ldreq	r0, [lr, #-1285]!	; 0xfffffafb
    271c:	054a0602 	strbeq	r0, [sl, #-1538]	; 0xfffff9fe
    2720:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2724:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
static int option (int opt, address val) {
    2728:	06014c02 	streq	r4, [r1], -r2, lsl #24
    272c:	20061f3d 	andcs	r1, r6, sp, lsr pc
    2730:	01051320 	tsteq	r5, r0, lsr #6
    2734:	06022106 	streq	r2, [r2], -r6, lsl #2
    2738:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    273c:	02050021 	andeq	r0, r5, #33	; 0x21
    2740:	00001840 	andeq	r1, r0, r0, asr #16
    2744:	0102e503 	tsteq	r2, r3, lsl #10
    2748:	13160205 	tstne	r6, #1342177280	; 0x50000000
    274c:	06210514 			; <UNDEFINED> instruction: 0x06210514
    2750:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    2754:	2e062702 	cdpcs	7, 0, cr2, cr6, cr2, {0}
    2758:	21061305 	tstcs	r6, r5, lsl #6
			goto RVal;
    275c:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
			_BIS (dstate, DSTATE_RXON);
    2760:	0f052013 	svceq	0x00052013
    2764:	03054a06 	movweq	r4, #23046	; 0x5a06
	int ret = 0;
    2768:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
			p_trigger (drvprcs, qevent);
    276c:	07052f06 	streq	r2, [r5, -r6, lsl #30]
    2770:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2774:	054b5a06 	strbeq	r5, [fp, #-2566]	; 0xfffff5fa
    2778:	01050d02 	tsteq	r5, r2, lsl #26
    277c:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
    2780:	01000302 	tsteq	r0, r2, lsl #6
    2784:	002d0501 	eoreq	r0, sp, r1, lsl #10
    2788:	00000205 	andeq	r0, r0, r5, lsl #4
    278c:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    2790:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
}
    2794:	05141316 	ldreq	r1, [r4, #-790]	; 0xfffffcea
			_BIC (dstate, DSTATE_RXON);
    2798:	7903062d 	stmdbvc	r3, {r0, r2, r3, r5, r9, sl}
    279c:	02052001 	andeq	r2, r5, #1
			statid = (val == NULL) ? 0 : *val;
    27a0:	05300627 	ldreq	r0, [r0, #-1575]!	; 0xfffff9d9
    27a4:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
	int ret = 0;
    27a8:	052e060e 	streq	r0, [lr, #-1550]!	; 0xfffff9f2
			ret = (int) statid;
    27ac:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
	if (val != NULL)
    27b0:	01053c02 	tsteq	r5, r2, lsl #24
		*val = ret;
    27b4:	06030533 			; <UNDEFINED> instruction: 0x06030533
			ret = rbuffl + 2;
    27b8:	0606051c 			; <UNDEFINED> instruction: 0x0606051c
    27bc:	1f200501 	svcne	0x00200501
			if (val != NULL) {
    27c0:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
				memcpy (val, &rxstat,
    27c4:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    27c8:	0102641f 	tsteq	r2, pc, lsl r4
				memset (&rxstat, 0, 
    27cc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    27d0:	02050026 	andeq	r0, r5, #38	; 0x26
			if (val == NULL)
    27d4:	00001874 	andeq	r1, r0, r4, ror r8
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    27d8:	01038703 	tsteq	r3, r3, lsl #14
    27dc:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
				utimer_set (bckf_timer, *val);
    27e0:	0e062605 	cfmadd32eq	mvax0, mvfx2, mvfx6, mvfx5
    27e4:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    27e8:	09052e06 	stmdbeq	r5, {r1, r2, r9, sl, fp, sp}
			for (ret = 0; ret < 8; ret++)
    27ec:	03052806 	movweq	r2, #22534	; 0x5806
				if (RF_cmdPropRadioDivSetup.txPower
    27f0:	2e790306 	cdpcs	3, 7, cr0, cr9, cr6, {0}
					== patable [ret])
    27f4:	01060605 	tsteq	r6, r5, lsl #12
				if (RF_cmdPropRadioDivSetup.txPower
    27f8:	30060405 	andcc	r0, r6, r5, lsl #8
			for (ret = 0; ret < 8; ret++)
    27fc:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
    2800:	06020517 			; <UNDEFINED> instruction: 0x06020517
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2804:	022e7703 	eoreq	r7, lr, #786432	; 0xc0000
    2808:	01010004 	tsteq	r1, r4
    280c:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2810:	00189802 	andseq	r9, r8, r2, lsl #16
    2814:	03990300 	orrseq	r0, r9, #0, 6
			_BIS (dstate, DSTATE_IRST);
    2818:	16020501 	strne	r0, [r2], -r1, lsl #10
    281c:	0e062105 	adfeqs	f2, f6, f5
    2820:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
			ret = (int) channel;
    2824:	053e8506 	ldreq	r8, [lr, #-1286]!	; 0xfffffafa
			goto RVal;
    2828:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
				(*val > 7) ? 7 : *val;
    282c:	1e052e0b 	cdpne	14, 0, cr2, cr5, cr11, {0}
    2830:	20130520 	andscs	r0, r3, r0, lsr #10
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2834:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    2838:	59060105 	stmdbpl	r6, {r0, r2, r8}
			plugch ();
    283c:	01000502 	tsteq	r0, r2, lsl #10
			_BIS (dstate, DSTATE_IRST);
    2840:	00140501 	andseq	r0, r4, r1, lsl #10
    2844:	00000205 	andeq	r0, r0, r5, lsl #4
			ret = (int) vrate;
    2848:	a7030000 	strge	r0, [r3, -r0]
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    284c:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    2850:	06010516 			; <UNDEFINED> instruction: 0x06010516
    2854:	00040267 	andeq	r0, r4, r7, ror #4
    2858:	18050101 	stmdane	r5, {r0, r8}
    285c:	00020500 	andeq	r0, r2, r0, lsl #10
    2860:	03000000 	movweq	r0, #0
    2864:	050103b2 	streq	r0, [r1, #-946]	; 0xfffffc4e
    2868:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    286c:	200e0618 	andcs	r0, lr, r8, lsl r6
    2870:	06240205 	strteq	r0, [r4], -r5, lsl #4
    2874:	0605055a 			; <UNDEFINED> instruction: 0x0605055a
    2878:	06030501 	streq	r0, [r3], -r1, lsl #10
			syserror (EREQPAR, "cc13 op");
    287c:	06050521 	streq	r0, [r5], -r1, lsr #10
    2880:	06020501 	streq	r0, [r2], -r1, lsl #10
    2884:	06120535 			; <UNDEFINED> instruction: 0x06120535
    2888:	59010501 	stmdbpl	r1, {r0, r8, sl}
    288c:	03060305 	movweq	r0, #25349	; 0x6305
    2890:	053d207a 	ldreq	r2, [sp, #-122]!	; 0xffffff86
    2894:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2898:	0b052e17 	bleq	14e0fc <__ccfg+0x12e154>
    289c:	0008023d 	andeq	r0, r8, sp, lsr r2
    28a0:	1d050101 	stfnes	f0, [r5, #-4]
    28a4:	00020500 	andeq	r0, r2, r0, lsl #10
    28a8:	03000000 	movweq	r0, #0
    28ac:	05010492 	streq	r0, [r1, #-1170]	; 0xfffffb6e
    28b0:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    28b4:	050e061d 	streq	r0, [lr, #-1565]	; 0xfffff9e3
static void issue_cmd (lword cmd) {
    28b8:	03052405 	movweq	r2, #21509	; 0x5405
    28bc:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    28c0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    28c4:	01053206 	tsteq	r5, r6, lsl #4
    28c8:	03051306 	movweq	r1, #21254	; 0x5306
		if (res != 0x86)
    28cc:	06022b06 	streq	r2, [r2], -r6, lsl #22
			syserror (EHARDWARE, "hang ic0");
    28d0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    28d4:	0205001d 	andeq	r0, r5, #29
		if (cnt-- == 0) {
    28d8:	000018d0 	ldrdeq	r1, [r0], -r0
			diag ("HUP %lx %lx", cmd, res);
    28dc:	01049e03 	tsteq	r4, r3, lsl #28
    28e0:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
			syserror (EHARDWARE, "hang ic0");
    28e4:	01060505 	tsteq	r6, r5, lsl #10
		udelay (1);
    28e8:	2f060305 	svccs	0x00060305
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    28ec:	01060a05 	tsteq	r6, r5, lsl #20
}
    28f0:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    28f4:	0601052e 	streq	r0, [r1], -lr, lsr #10
    28f8:	06030525 	streq	r0, [r3], -r5, lsr #10
    28fc:	0606051c 			; <UNDEFINED> instruction: 0x0606051c
static void rx_de () {
    2900:	06020501 	streq	r0, [r2], -r1, lsl #10
	if ((dstate & DSTATE_RXAC) == 0)
    2904:	0006023b 	andeq	r0, r6, fp, lsr r2
    2908:	1d050101 	stfnes	f0, [r5, #-4]
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    290c:	00020500 	andeq	r0, r2, r0, lsl #10
	_BIC (dstate, DSTATE_RXAC);
    2910:	03000000 	movweq	r0, #0
    2914:	050104ac 	streq	r0, [r1, #-1196]	; 0xfffffb54
}
    2918:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    291c:	061d0513 			; <UNDEFINED> instruction: 0x061d0513
    2920:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
static void rf_off () {
    2924:	02052504 	andeq	r2, r5, #4, 10	; 0x1000000
	if ((dstate & DSTATE_RFON) == 0)
    2928:	052e0621 	streq	r0, [lr, #-1569]!	; 0xfffff9df
    292c:	05240601 	streq	r0, [r4, #-1537]!	; 0xfffff9ff
	IntDisable (INT_RFC_CPE_0);
    2930:	051d0603 	ldreq	r0, [sp, #-1539]	; 0xfffff9fd
    2934:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2938:	06051f02 	streq	r1, [r5], -r2, lsl #30
	RFCAdi3VcoLdoVoltageMode (false);
    293c:	06040521 	streq	r0, [r4], -r1, lsr #10
	RFCSynthPowerDown ();
    2940:	06050521 	streq	r0, [r5], -r1, lsr #10
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2944:	06020501 	streq	r0, [r2], -r1, lsl #10
    2948:	0004023a 	andeq	r0, r4, sl, lsr r2
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    294c:	21050101 	tstcs	r5, r1, lsl #2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2950:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2954:	03000018 	movweq	r0, #24
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2958:	050104b8 	streq	r0, [r1, #-1208]	; 0xfffffb48
    295c:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    2960:	050e0621 	streq	r0, [lr, #-1569]	; 0xfffff9df
	_BIC (dstate, DSTATE_RFON);
    2964:	0e052409 	cdpeq	4, 0, cr2, cr5, cr9, {0}
    2968:	02052006 	andeq	r2, r5, #6
}
    296c:	01050106 	tsteq	r5, r6, lsl #2
    2970:	06220531 			; <UNDEFINED> instruction: 0x06220531
    2974:	011e051d 	tsteq	lr, sp, lsl r5
    2978:	01061f05 	tsteq	r6, r5, lsl #30
    297c:	01000202 	tsteq	r0, r2, lsl #4
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2980:	002b0501 	eoreq	r0, fp, r1, lsl #10
    2984:	19020205 	stmdbne	r2, {r0, r2, r9}
    2988:	c1030000 	mrsgt	r0, (UNDEF: 3)
		if (cmd->status == tstat)
    298c:	02050104 	andeq	r0, r5, #4, 2
		if (timeout-- == 0) {
    2990:	20200514 	eorcs	r0, r0, r4, lsl r5
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2994:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    2998:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    299c:	08052e18 	stmdaeq	r5, {r3, r4, r9, sl, fp, sp}
			syserror (EHARDWARE, "rt2");
    29a0:	2f01052e 	svccs	0x0001052e
    29a4:	01000102 	tsteq	r0, r2, lsl #2
		udelay (1);
    29a8:	00330501 	eorseq	r0, r3, r1, lsl #10
		if (cmd->status == tstat)
    29ac:	19120205 	ldmdbne	r2, {r0, r2, r9}
}
    29b0:	c6030000 	strgt	r0, [r3], -r0
    29b4:	02050104 	andeq	r0, r5, #4, 2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    29b8:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
    29bc:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
static void rf_on () {
    29c0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    29c4:	11052f01 	tstne	r5, r1, lsl #30
	OSCHF_TurnOnXosc();
    29c8:	2e0d051d 	mcrcs	5, 0, r0, cr13, cr13, {0}
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    29cc:	2f060305 	svccs	0x00060305
    29d0:	01060805 	tsteq	r6, r5, lsl #16
    29d4:	01000302 	tsteq	r0, r2, lsl #6
    29d8:	002b0501 	eoreq	r0, fp, r1, lsl #10
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    29dc:	00000205 	andeq	r0, r0, r5, lsl #4
    29e0:	cd030000 	stcgt	0, cr0, [r3, #-0]
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    29e4:	02050104 	andeq	r0, r5, #4, 2
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    29e8:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
	issue_cmd (
    29ec:	024b0205 	subeq	r0, fp, #1342177280	; 0x50000000
    29f0:	01010002 	tsteq	r1, r2
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    29f4:	05003305 	streq	r3, [r0, #-773]	; 0xfffffcfb
    29f8:	00000002 	andeq	r0, r0, r2
    29fc:	04d30300 	ldrbeq	r0, [r3], #768	; 0x300
   pPatchTab[80] = 0;
    2a00:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
   } while (--nIterations);
    2a04:	01000302 	tsteq	r0, r2, lsl #6
   pPatchTab[53] = 2;
    2a08:	00370501 	eorseq	r0, r7, r1, lsl #10
    2a0c:	192e0205 	stmdbne	lr!, {r0, r2, r9}
   pPatchTab[55] = 3;
    2a10:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
   pPatchTab[110] = 4;
    2a14:	02050104 	andeq	r0, r5, #4, 2
   pPatchTab[107] = 5;
    2a18:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
   pPatchTab[65] = 6;
    2a1c:	30060105 	andcc	r0, r6, r5, lsl #2
    2a20:	1f060305 	svcne	0x00060305
   pPatchTab[57] = 1;
    2a24:	01060d05 	tsteq	r6, r5, lsl #26
   pIrqPatch[1] = _IRQ_PATCH_0;
    2a28:	022e0b05 	eoreq	r0, lr, #5120	; 0x1400
   const uint32_t *pS = patchGenfskRfe;
    2a2c:	01010003 	tsteq	r1, r3
      t2 = *pS++;
    2a30:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
      t4 = *pS++;
    2a34:	00194202 	andseq	r4, r9, r2, lsl #4
      t6 = *pS++;
    2a38:	04de0300 	ldrbeq	r0, [lr], #768	; 0x300
      t8 = *pS++;
    2a3c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
      *pD++ = t1;
    2a40:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
      *pD++ = t2;
    2a44:	05300601 	ldreq	r0, [r0, #-1537]!	; 0xfffff9ff
      *pD++ = t3;
    2a48:	051f0603 	ldreq	r0, [pc, #-1539]	; 244d <put_byte+0x5>
      *pD++ = t5;
    2a4c:	0201060b 	andeq	r0, r1, #11534336	; 0xb00000
      *pD++ = t7;
    2a50:	01010003 	tsteq	r1, r3
   } while (--nIterations);
    2a54:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
    2a58:	00195002 	andseq	r5, r9, r2
      *pD++ = t8;
    2a5c:	04e80300 	strbteq	r0, [r8], #768	; 0x300
   } while (--nIterations);
    2a60:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2a64:	10062b05 	andne	r2, r6, r5, lsl #22
   *pD++ = t2;
    2a68:	05220505 	streq	r0, [r2, #-1285]!	; 0xfffffafb
   *pD++ = t3;
    2a6c:	06210603 	strteq	r0, [r1], -r3, lsl #12
   *pD++ = t4;
    2a70:	06020531 			; <UNDEFINED> instruction: 0x06020531
   *pD++ = t5;
    2a74:	060c052d 	streq	r0, [ip], -sp, lsr #10
    2a78:	20050501 	andcs	r0, r5, r1, lsl #10
	RFCAdi3VcoLdoVoltageMode (true);
    2a7c:	2f060305 	svccs	0x00060305
    2a80:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
       	RFCRfTrimSet (&rfTrim);
    2a84:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2a88:	05022101 	streq	r2, [r2, #-257]	; 0xfffffeff
    2a8c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2a90:	02050045 	andeq	r0, r5, #69	; 0x45
    2a94:	00001974 	andeq	r1, r0, r4, ror r9
	issue_cmd ((lword)&cmd_srt);
    2a98:	0104f803 	tsteq	r4, r3, lsl #16	; <UNPREDICTABLE>
    2a9c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
	issue_cmd ((lword)&RF_cmdFs);
    2aa0:	0e064505 	cfsh32eq	mvfx4, mvfx6, #5
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2aa4:	5c05052e 	cfstr32pl	mvfx0, [r5], {46}	; 0x2e
    2aa8:	05202205 	streq	r2, [r0, #-517]!	; 0xfffffdfb
    2aac:	03054a19 	movweq	r4, #23065	; 0x5a19
	IntEnable (INT_RFC_CPE_0);
    2ab0:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
	_BIC (dstate, DSTATE_IRST);
    2ab4:	0605054c 	streq	r0, [r5], -ip, asr #10
    2ab8:	06020501 	streq	r0, [r2], -r1, lsl #10
    2abc:	060f0540 	streq	r0, [pc], -r0, asr #10
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2ac0:	06020501 	streq	r0, [r2], -r1, lsl #10
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2ac4:	0605054c 	streq	r0, [r5], -ip, asr #10
	IntEnable (INT_RFC_CPE_0);
    2ac8:	06020501 	streq	r0, [r2], -r1, lsl #10
    2acc:	06050531 			; <UNDEFINED> instruction: 0x06050531
}
    2ad0:	06030501 	streq	r0, [r3], -r1, lsl #10
	IntEnable (INT_RFC_CPE_0);
    2ad4:	0606054f 	streq	r0, [r6], -pc, asr #10
    2ad8:	06030501 	streq	r0, [r3], -r1, lsl #10
    2adc:	04055930 	streq	r5, [r5], #-2352	; 0xfffff6d0
    2ae0:	05010d03 	streq	r0, [r1, #-3331]	; 0xfffff2fd
    2ae4:	2e760302 	cdpcs	3, 7, cr0, cr6, cr2, {0}
    2ae8:	01060505 	tsteq	r6, r5, lsl #10
    2aec:	35060305 	strcc	r0, [r6, #-773]	; 0xfffffcfb
    2af0:	01060605 	tsteq	r6, r5, lsl #12
    2af4:	4b060405 	blmi	183b10 <__ccfg+0x163b68>
    2af8:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
    2afc:	06030501 	streq	r0, [r3], -r1, lsl #10
    2b00:	060a0569 	streq	r0, [sl], -r9, ror #10
    2b04:	06030501 	streq	r0, [r3], -r1, lsl #10
    2b08:	060a0559 			; <UNDEFINED> instruction: 0x060a0559
    2b0c:	05016103 	streq	r6, [r1, #-259]	; 0xfffffefd
    2b10:	20290301 	eorcs	r0, r9, r1, lsl #6
    2b14:	03060205 	movweq	r0, #25093	; 0x6205
    2b18:	05052e7a 	streq	r2, [r5, #-3706]	; 0xfffff186
    2b1c:	03050106 	movweq	r0, #20742	; 0x5106
    2b20:	02752f06 	rsbseq	r2, r5, #6, 30
    2b24:	01010005 	tsteq	r1, r5
    2b28:	05001a05 	streq	r1, [r0, #-2565]	; 0xfffff5fb
    2b2c:	001a1002 	andseq	r1, sl, r2
    2b30:	05ef0300 	strbeq	r0, [pc, #768]!	; 2e38 <RFCCPE0IntHandler+0x40>
    2b34:	17020501 	strne	r0, [r2, -r1, lsl #10]
static void rx_int_enable () {
    2b38:	05011303 	streq	r1, [r1, #-771]	; 0xfffffcfd
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2b3c:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    2b40:	2068031a 	rsbcs	r0, r8, sl, lsl r3
    2b44:	18031505 	stmdane	r3, {r0, r2, r8, sl, ip}
    2b48:	580c0520 	stmdapl	ip, {r5, r8, sl}
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2b4c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2b50:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    2b54:	0d055202 	sfmeq	f5, 4, [r5, #-8]
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2b58:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2b5c:	17053e06 	strne	r3, [r5, -r6, lsl #28]
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2b60:	1d051506 	cfstr32ne	mvfx1, [r5, #-24]	; 0xffffffe8
    2b64:	2016052b 	andscs	r0, r6, fp, lsr #10
    2b68:	21060205 	tstcs	r6, r5, lsl #4
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2b6c:	14061705 	strne	r1, [r6], #-1797	; 0xfffff8fb
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2b70:	31060205 	tstcc	r6, r5, lsl #4
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2b74:	01061a05 	tsteq	r6, r5, lsl #20
		if (db->status == DATA_ENTRY_FINISHED) {
    2b78:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2b7c:	2e2c0301 	cdpcs	3, 2, cr0, cr12, cr1, {0}
    2b80:	01000d02 	tsteq	r0, r2, lsl #26
			nr++;
    2b84:	001c0501 	andseq	r0, ip, r1, lsl #10
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2b88:	1a600205 	bne	18033a4 <__ccfg+0x17e33fc>
    2b8c:	fb030000 	blx	c2b96 <__ccfg+0xa2bee>
    2b90:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2b94:	05010c03 	streq	r0, [r1, #-3075]	; 0xfffff3fd
				__dp [pl + 1] = __dp [pl] - 128;
    2b98:	7403061c 	strvc	r0, [r3], #-1564	; 0xfffff9e4
				pl = __dp [1] + 2;
    2b9c:	03050501 	movweq	r0, #21761	; 0x5501
				__dp [pl + 1] = __dp [pl] - 128;
    2ba0:	0205200c 	andeq	r2, r5, #12
    2ba4:	07052506 	streq	r2, [r5, -r6, lsl #10]
				__dp [pl] = 0;
    2ba8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2bac:	0603052e 	streq	r0, [r3], -lr, lsr #10
    2bb0:	11054c2f 	tstne	r5, pc, lsr #24
    2bb4:	0f051606 	svceq	0x00051606
			db->status = DATA_ENTRY_PENDING;
    2bb8:	3211051c 	andscc	r0, r1, #28, 10	; 0x7000000
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2bbc:	051c0f05 	ldreq	r0, [ip, #-3845]	; 0xfffff0fb
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2bc0:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
				diag ("BAD RX");
    2bc4:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    2bc8:	30300602 	eorscc	r0, r0, r2, lsl #12
	if (nr) {
    2bcc:	01061505 	tsteq	r6, r5, lsl #10
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2bd0:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
}
    2bd4:	2f2f0603 	svccs	0x002f0603
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2bd8:	01061a05 	tsteq	r6, r5, lsl #20
    2bdc:	02420105 	subeq	r0, r2, #1073741825	; 0x40000001
    2be0:	01010008 	tsteq	r1, r8
}
    2be4:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    2be8:	001aa802 	andseq	sl, sl, r2, lsl #16
    2bec:	03d80300 	bicseq	r0, r8, #0, 6
    2bf0:	16020501 	strne	r0, [r2], -r1, lsl #10
    2bf4:	06170514 			; <UNDEFINED> instruction: 0x06170514
    2bf8:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    2bfc:	03052605 	movweq	r2, #22021	; 0x5605
    2c00:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    2c04:	07050106 	streq	r0, [r5, -r6, lsl #2]
thread (cc1350_driver)
    2c08:	06020520 	streq	r0, [r2], -r0, lsr #10
    2c0c:	04051322 	streq	r1, [r5], #-802	; 0xfffffcde
    2c10:	02051106 	andeq	r1, r5, #-2147483647	; 0x80000001
    2c14:	032e0621 			; <UNDEFINED> instruction: 0x032e0621
    2c18:	0305200f 	movweq	r2, #20495	; 0x500f
		if (dstate & DSTATE_IRST) {
    2c1c:	054a7203 	strbeq	r7, [sl, #-515]	; 0xfffffdfd
    2c20:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2c24:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
			rf_off ();
    2c28:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
			_BIC (dstate,
    2c2c:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    2c30:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
		if (dstate & DSTATE_RXAC) {
    2c34:	3d230604 	stccc	6, cr0, [r3, #-16]!
    2c38:	060a052f 	streq	r0, [sl], -pc, lsr #10
			if ((dstate & DSTATE_RXON) == 0)
    2c3c:	20070501 	andcs	r0, r7, r1, lsl #10
				rx_de ();
    2c40:	3d060505 	cfstr32cc	mvfx0, [r6, #-20]	; 0xffffffec
		if (paylen == 0) {
    2c44:	060d052a 	streq	r0, [sp], -sl, lsr #10
    2c48:	03010501 	movweq	r0, #5377	; 0x1501
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2c4c:	0702580a 	streq	r5, [r2, -sl, lsl #16]
    2c50:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2c54:	0205001c 	andeq	r0, r5, #28
    2c58:	00000000 	andeq	r0, r0, r0
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2c5c:	0103f403 	tsteq	r3, r3, lsl #8	; <UNPREDICTABLE>
    2c60:	13160205 	tstne	r6, #1342177280	; 0x50000000
    2c64:	05131314 	ldreq	r1, [r3, #-788]	; 0xfffffcec
    2c68:	7703061c 	smladvc	r3, ip, r6, r0
    2c6c:	36040501 	strcc	r0, [r4], -r1, lsl #10
    2c70:	051f0605 	ldreq	r0, [pc, #-1541]	; 2673 <ser_outf+0x1f>
    2c74:	1c052209 	sfmne	f2, 4, [r5], {9}
    2c78:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
		} else if (dstate & DSTATE_RXON) {
    2c7c:	2010030a 	andscs	r0, r0, sl, lsl #6
	if (dstate & DSTATE_RFON)
    2c80:	79030905 	stmdbvc	r3, {r0, r2, r8, fp}
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2c84:	0612052e 	ldreq	r0, [r2], -lr, lsr #10
		re->status = DATA_ENTRY_PENDING;
    2c88:	06020520 	streq	r0, [r2], -r0, lsr #10
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2c8c:	11030601 	tstne	r3, r1, lsl #12
	issue_cmd ((lword)&RF_cmdPropRx);
    2c90:	06050520 	streq	r0, [r5], -r0, lsr #10
	_BIS (dstate, DSTATE_RXAC);
    2c94:	06030501 	streq	r0, [r3], -r1, lsl #10
    2c98:	2e6f0321 	cdpcs	3, 6, cr0, cr15, cr1, {1}
    2c9c:	01060605 	tsteq	r6, r5, lsl #12
    2ca0:	59060405 	stmdbpl	r6, {r0, r2, sl}
	if (dstate & DSTATE_RXAC)
    2ca4:	06070513 			; <UNDEFINED> instruction: 0x06070513
    2ca8:	06050501 	streq	r0, [r5], -r1, lsl #10
				if (statid != 0xffff)
    2cac:	060b0521 	streq	r0, [fp], -r1, lsr #10
    2cb0:	06040501 	streq	r0, [r4], -r1, lsl #10
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2cb4:	06070531 			; <UNDEFINED> instruction: 0x06070531
				RF_cmdPropTx.pktLen = (byte) paylen;
    2cb8:	2f090501 	svccs	0x00090501
		if (paylen == 0) {
    2cbc:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
			wait (qevent, DR_LOOP);
    2cc0:	05052f2f 	streq	r2, [r5, #-3887]	; 0xfffff0d1
    2cc4:	060d0545 	streq	r0, [sp], -r5, asr #10
			if (dstate & DSTATE_RXAC) {
    2cc8:	03010501 	movweq	r0, #5377	; 0x1501
    2ccc:	07023c0d 	streq	r3, [r2, -sp, lsl #24]
				rx_int_enable ();
    2cd0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			release;
    2cd4:	02050020 	andeq	r0, r5, #32
			} else if (dstate & DSTATE_RFON) {
    2cd8:	00001af8 	strdeq	r1, [r0], -r8
				delay (offdelay, DR_GOOF);
    2cdc:	0107a203 	tsteq	r7, r3, lsl #4
    2ce0:	161a0205 	ldrne	r0, [sl], -r5, lsl #4
    2ce4:	06050514 			; <UNDEFINED> instruction: 0x06050514
		if (bckf_timer) {
    2ce8:	06030501 	streq	r0, [r3], -r1, lsl #10
			wait (qevent, DR_LOOP);
    2cec:	06090525 	streq	r0, [r9], -r5, lsr #10
    2cf0:	0320050f 			; <UNDEFINED> instruction: 0x0320050f
    2cf4:	0d052e70 	stceq	14, cr2, [r5, #-448]	; 0xfffffe40
			delay (bckf_timer, DR_LOOP);
    2cf8:	05202303 	streq	r2, [r0, #-771]!	; 0xfffffcfd
    2cfc:	2070031a 	rsbscs	r0, r0, sl, lsl r3
			if (dstate & DSTATE_RXAC)
    2d00:	10030d05 	andne	r0, r3, r5, lsl #26
    2d04:	2306052e 	movwcs	r0, #25902	; 0x652e
	if (dstate & DSTATE_RFON)
    2d08:	6d030905 	vstrvs.16	s0, [r3, #-10]	; <UNPREDICTABLE>
    2d0c:	06020520 	streq	r0, [r2], -r0, lsr #10
		rx_de ();
    2d10:	132e0f03 			; <UNDEFINED> instruction: 0x132e0f03
		RF_cmdPropTx . status = 0;
    2d14:	05011f05 	streq	r1, [r1, #-3845]	; 0xfffff0fb
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2d18:	06010602 	streq	r0, [r1], -r2, lsl #12
    2d1c:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    2d20:	01190303 	tsteq	r9, r3, lsl #6
		issue_cmd ((lword)&cmd_cs);
    2d24:	01061605 	tsteq	r6, r5, lsl #12
		if (dstate & DSTATE_IRST)
    2d28:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    2d2c:	052f0604 	streq	r0, [pc, #-1540]!	; 2730 <option+0x8>
    2d30:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2d34:	0d030603 	stceq	6, cr0, [r3, #-12]
    2d38:	0612052e 	ldreq	r0, [r2], -lr, lsr #10
			delay (1, DR_XMIT);
    2d3c:	06020501 	streq	r0, [r2], -r1, lsl #10
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2d40:	06090540 	streq	r0, [r9], -r0, asr #10
    2d44:	06030501 	streq	r0, [r3], -r1, lsl #10
    2d48:	05204f03 	streq	r4, [r0, #-3843]!	; 0xfffff0fd
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2d4c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2d50:	053d0604 	ldreq	r0, [sp, #-1540]!	; 0xfffff9fc
				RF_cmdPropTx . status = 0;
    2d54:	06054c03 	streq	r4, [r5], -r3, lsl #24
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2d58:	2e050106 	adfcss	f0, f5, f6
				issue_cmd ((lword)&RF_cmdPropTx);
    2d5c:	4a7a0306 	bmi	1e8397c <__ccfg+0x1e639d4>
				proceed (DR_XMIT);
    2d60:	13060905 	movwne	r0, #26885	; 0x6905
    2d64:	44060205 	strmi	r0, [r6], #-517	; 0xfffffdfb
			txtries++;
    2d68:	22140305 	andscs	r0, r4, #335544320	; 0x14000000
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2d6c:	01060e05 	tsteq	r6, r5, lsl #28
    2d70:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    2d74:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2d78:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
		goto DR_LOOP__;
    2d7c:	052f0604 	streq	r0, [pc, #-1540]!	; 2780 <option+0x58>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2d80:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
		paylen = 0;
    2d84:	04052007 	streq	r2, [r5], #-7
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2d88:	18052f06 	stmdane	r5, {r1, r2, r8, r9, sl, fp, sp}
		txtries = 0;
    2d8c:	10050106 	andne	r0, r5, r6, lsl #2
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2d90:	06040520 	streq	r0, [r4], -r0, lsr #10
    2d94:	2e090530 	cfmv64hrcs	mvdx9, r0
    2d98:	05150305 	ldreq	r0, [r5, #-773]	; 0xfffffcfb
    2d9c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2da0:	1a053012 	bne	14edf0 <__ccfg+0x12ee48>
		    tcvphy_top (physid) == NULL)
    2da4:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
    2da8:	06150522 	ldreq	r0, [r5], -r2, lsr #10
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2dac:	2e120501 	cfmul32cs	mvfx0, mvfx2, mvfx1
    2db0:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
			rf_off ();
    2db4:	01060e05 	tsteq	r6, r5, lsl #28
endthread
    2db8:	05251205 	streq	r1, [r5, #-517]!	; 0xfffffdfb
    2dbc:	12052906 	andne	r2, r5, #98304	; 0x18000
    2dc0:	29060525 	stmdbcs	r6, {r0, r2, r5, r8, sl}
    2dc4:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    2dc8:	01061305 	tsteq	r6, r5, lsl #6
    2dcc:	31060305 	tstcc	r6, r5, lsl #6
    2dd0:	03060105 	movweq	r0, #24837	; 0x6105
    2dd4:	0e02011b 	mcreq	1, 0, r0, cr2, cr11, {0}
    2dd8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2ddc:	0205002c 	andeq	r0, r5, #44	; 0x2c
    2de0:	00001ba0 	andeq	r1, r0, r0, lsr #23
    2de4:	0102ab03 	tsteq	r2, r3, lsl #22
    2de8:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    2dec:	0e062c05 	cdpeq	12, 0, cr2, cr6, cr5, {0}
    2df0:	24190520 	ldrcs	r0, [r9], #-1312	; 0xfffffae0
    2df4:	051c2c05 	ldreq	r2, [ip, #-3077]	; 0xfffff3fb
void RFCCPE0IntHandler (void) {
    2df8:	05052419 	streq	r2, [r5, #-1049]	; 0xfffffbe7
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2dfc:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
		_BIS (dstate, DSTATE_IRST);
    2e00:	060a0523 	streq	r0, [sl], -r3, lsr #10
    2e04:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    2e08:	2077030c 	rsbscs	r0, r7, ip, lsl #6
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2e0c:	23260a05 			; <UNDEFINED> instruction: 0x23260a05
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2e10:	05207603 	streq	r7, [r0, #-1539]!	; 0xfffff9fd
    2e14:	182f0602 	stmdane	pc!, {r1, r9, sl}	; <UNPREDICTABLE>
	p_trigger (drvprcs, qevent);
    2e18:	13140305 	tstne	r4, #335544320	; 0x14000000
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2e1c:	01060605 	tsteq	r6, r5, lsl #12
    2e20:	21060405 	tstcs	r6, r5, lsl #8
    2e24:	01060a05 	tsteq	r6, r5, lsl #20
    2e28:	0f030105 	svceq	0x00030105
    2e2c:	060b0520 	streq	r0, [fp], -r0, lsr #10
    2e30:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
    2e34:	0520060c 	streq	r0, [r0, #-1548]!	; 0xfffff9f4
    2e38:	2f062004 	svccs	0x00062004
    2e3c:	01060c05 	tsteq	r6, r5, lsl #24
    2e40:	03060205 	movweq	r0, #25093	; 0x6205
	RISE_N_SHINE;
    2e44:	0905200b 	stmdbeq	r5, {r0, r1, r3, sp}
    2e48:	04020106 	streq	r0, [r2], #-262	; 0xfffffefa
    2e4c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
}
    2e50:	02050020 	andeq	r0, r5, #32
    2e54:	00001bd4 	ldrdeq	r1, [r0], -r4
    2e58:	01088103 	tsteq	r8, r3, lsl #2
    2e5c:	09030205 	stmdbeq	r3, {r0, r2, r9}
    2e60:	06150501 	ldreq	r0, [r5], -r1, lsl #10
    2e64:	03200501 			; <UNDEFINED> instruction: 0x03200501
void phys_cc1350 (int phy, int mbs) {
    2e68:	15052077 	strne	r2, [r5, #-119]	; 0xffffff89
	if (rbuffl != 0)
    2e6c:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    2e70:	05052302 	streq	r2, [r5, #-770]	; 0xfffffcfe
		syserror (ETOOMANY, "cc13");
    2e74:	0603051d 			; <UNDEFINED> instruction: 0x0603051d
		syserror (EREQPAR, "cc13 mb");
    2e78:	061a0521 	ldreq	r0, [sl], -r1, lsr #10
	if (mbs == 0)
    2e7c:	06020501 	streq	r0, [r2], -r1, lsl #10
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2e80:	0004023e 	andeq	r0, r4, lr, lsr r2
		syserror (EREQPAR, "cc13 mb");
    2e84:	21050101 	tstcs	r5, r1, lsl #2
    2e88:	00020500 	andeq	r0, r2, r0, lsl #10
	i = 0;
    2e8c:	03000000 	movweq	r0, #0
	rbuffl = (byte) mbs;
    2e90:	05010894 	streq	r0, [r1, #-2196]	; 0xfffff76c
		db->config.type = 0;	// General (data in structure)
    2e94:	01090302 	tsteq	r9, r2, lsl #6
	rbuffl = (byte) mbs;
    2e98:	03062105 	movweq	r2, #24837	; 0x6105
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2e9c:	05050177 	streq	r0, [r5, #-375]	; 0xfffffe89
    2ea0:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
		if (db == NULL)
    2ea4:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
			syserror (EMALLOC, "cc13");
    2ea8:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    2eac:	08052e0a 	stmdaeq	r5, {r1, r3, r9, sl, fp, sp}
    2eb0:	22120520 	andscs	r0, r2, #32, 10	; 0x8000000
		db->status = DATA_ENTRY_PENDING;
    2eb4:	051e0805 	ldreq	r0, [lr, #-2053]	; 0xfffff7fb
		if (i)
    2eb8:	054c0603 	strbeq	r0, [ip, #-1539]	; 0xfffff9fd
			da->pNextEntry = (byte*) db;
    2ebc:	09051402 	stmdbeq	r5, {r1, sl, ip}
		db->length = rbuffl + 2;
    2ec0:	01050106 	tsteq	r5, r6, lsl #2
    2ec4:	0006025a 	andeq	r0, r6, sl, asr r2
		db->config.type = 0;	// General (data in structure)
    2ec8:	20050101 	andcs	r0, r5, r1, lsl #2
		db->length = rbuffl + 2;
    2ecc:	00020500 	andeq	r0, r2, r0, lsl #10
	db->pNextEntry = (byte*) re;
    2ed0:	03000000 	movweq	r0, #0
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2ed4:	050108a7 	streq	r0, [r1, #-2215]	; 0xfffff759
    2ed8:	01090302 	tsteq	r9, r2, lsl #6
	if (rbuffs == NULL)
    2edc:	20051413 	andcs	r1, r5, r3, lsl r4
	rbuffs->pCurrEntry = (byte*) re;
    2ee0:	01740306 	cmneq	r4, r6, lsl #6
	rbuffs->pLastEntry = NULL;
    2ee4:	0c031d05 	stceq	13, cr1, [r3], {5}
    2ee8:	2e120520 	cfmul64cs	mvdx0, mvdx2, mvdx0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2eec:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2ef0:	0520062f 	streq	r0, [r0, #-1583]!	; 0xfffff9d1
    2ef4:	06010602 	streq	r0, [r1], -r2, lsl #12
    2ef8:	06050524 	streq	r0, [r5], -r4, lsr #10
	rbuffl -= 2;
    2efc:	0603052e 	streq	r0, [r3], -lr, lsr #10
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f00:	06070521 	streq	r0, [r7], -r1, lsr #10
	rbuffl -= 2;
    2f04:	06020501 	streq	r0, [r2], -r1, lsl #10
	physid = phy;
    2f08:	0609054c 	streq	r0, [r9], -ip, asr #10
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f0c:	3e010501 	cfsh32cc	mvfx0, mvfx1, #1
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f10:	03060305 	movweq	r0, #25349	; 0x6305
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f14:	23052e79 	movwcs	r2, #24185	; 0x5e79
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f18:	06052d06 	streq	r2, [r5], -r6, lsl #26
    2f1c:	0e054a06 	vmlaeq.f32	s8, s10, s12
	utimer_add (&bckf_timer);
    2f20:	04020106 	streq	r0, [r2], #-262	; 0xfffffefa
	drvprcs = runthread (cc1350_driver);
    2f24:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2f28:	02050023 	andeq	r0, r5, #35	; 0x23
    2f2c:	00001bec 	andeq	r1, r0, ip, ror #23
	if (drvprcs == 0)
    2f30:	01098103 	tsteq	r9, r3, lsl #2
		syserror (ERESOURCE, "cc13");
    2f34:	13410205 	movtne	r0, #4613	; 0x1205
    2f38:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2f3c:	03062305 	movweq	r2, #25349	; 0x6305
    2f40:	02050175 	andeq	r0, r5, #1073741853	; 0x4000001d
    2f44:	1f3c0c03 	svcne	0x003c0c03
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2f48:	01012106 	tsteq	r1, r6, lsl #2
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2f4c:	03060805 	movweq	r0, #26629	; 0x6805
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2f50:	02052028 	andeq	r2, r5, #40	; 0x28
    2f54:	05205803 	streq	r5, [r0, #-2051]!	; 0xfffff7fd
    2f58:	2023031c 	eorcs	r0, r3, ip, lsl r3
    2f5c:	5d030205 	sfmpl	f0, 4, [r3, #-20]	; 0xffffffec
    2f60:	142e062e 	strtne	r0, [lr], #-1582	; 0xfffff9d2
    2f64:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    2f68:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2f6c:	02052008 	andeq	r2, r5, #8
    2f70:	00c70306 	sbceq	r0, r7, r6, lsl #6
	plugch ();
    2f74:	043d3d20 	ldrteq	r3, [sp], #-3360	; 0xfffff2e0
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2f78:	060d0502 	streq	r0, [sp], -r2, lsl #10
    2f7c:	017bcf03 	cmneq	fp, r3, lsl #30
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2f80:	0f050104 	svceq	0x00050104
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2f84:	04b10306 	ldrteq	r0, [r1], #774	; 0x306
    2f88:	01020520 	tsteq	r2, r0, lsr #10
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2f8c:	24050204 	strcs	r0, [r5], #-516	; 0xfffffdfc
}
    2f90:	017bca03 	cmneq	fp, r3, lsl #20
    2f94:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    2f98:	0401060d 	streq	r0, [r1], #-1549	; 0xfffff9f3
    2f9c:	03020501 	movweq	r0, #9473	; 0x2501
    2fa0:	062004b1 			; <UNDEFINED> instruction: 0x062004b1
    2fa4:	5801012f 	stmdapl	r1, {r0, r1, r2, r3, r5, r8}
    2fa8:	13060105 	movwne	r0, #24837	; 0x6105
    2fac:	03060305 	movweq	r0, #25349	; 0x6305
    2fb0:	05587fb6 	ldrbeq	r7, [r8, #-4022]	; 0xfffff04a
    2fb4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2fb8:	134b0604 	movtne	r0, #46596	; 0xb604
    2fbc:	20060705 	andcs	r0, r6, r5, lsl #14
    2fc0:	4b060505 	blmi	1843dc <__ccfg+0x164434>
    2fc4:	09051313 	stmdbeq	r5, {r0, r1, r4, r8, r9, ip}
    2fc8:	052d0106 	streq	r0, [sp, #-262]!	; 0xfffffefa
    2fcc:	0805280c 	stmdaeq	r5, {r2, r3, fp, sp}
    2fd0:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    2fd4:	15320605 	ldrne	r0, [r2, #-1541]!	; 0xfffff9fb
    2fd8:	0f060805 	svceq	0x00060805
    2fdc:	25060405 	strcs	r0, [r6, #-1029]	; 0xfffffbfb
    2fe0:	31030505 	tstcc	r3, r5, lsl #10
    2fe4:	04053d74 	streq	r3, [r5], #-3444	; 0xfffff28c
    2fe8:	4a4e0306 	bmi	1383c08 <__ccfg+0x1363c60>
    2fec:	05411d05 	strbeq	r1, [r1, #-3333]	; 0xfffff2fb
    2ff0:	052d0606 	streq	r0, [sp, #-1542]!	; 0xfffff9fa
    2ff4:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    2ff8:	14210606 	strtne	r0, [r1], #-1542	; 0xfffff9fa
    2ffc:	11060b05 	tstne	r6, r5, lsl #22
    3000:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
    3004:	0b052f06 	bleq	14ec24 <__ccfg+0x12ec7c>
    3008:	04054606 	streq	r4, [r5], #-1542	; 0xfffff9fa
    300c:	052e3103 	streq	r3, [lr, #-259]!	; 0xfffffefd
    3010:	03010608 	movweq	r0, #5640	; 0x1608
    3014:	0505206a 	streq	r2, [r5, #-106]	; 0xffffff96
    3018:	2e6e0306 	cdpcs	3, 6, cr0, cr14, cr6, {0}
    301c:	06150513 			; <UNDEFINED> instruction: 0x06150513
    3020:	200e0501 	andcs	r0, lr, r1, lsl #10
    3024:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    3028:	3d2f0606 	stccc	6, cr0, [pc, #-24]!	; 3018 <tcv_rcv_null+0x18>
    302c:	01060905 	tsteq	r6, r5, lsl #18
    3030:	21060705 	tstcs	r6, r5, lsl #14
    3034:	01060b05 	tsteq	r6, r5, lsl #22
    3038:	59060605 	stmdbpl	r6, {r0, r2, r9, sl}
    303c:	01060a05 	tsteq	r6, r5, lsl #20
    3040:	23060505 	movwcs	r0, #25861	; 0x6505
    3044:	01061c05 	tsteq	r6, r5, lsl #24
    3048:	59060505 	stmdbpl	r6, {r0, r2, r8, sl}
    304c:	05140605 	ldreq	r0, [r4, #-1541]	; 0xfffff9fb
    3050:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    3054:	06052e08 	streq	r2, [r5], -r8, lsl #28
    3058:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    305c:	0c050106 	stfeqs	f0, [r5], {6}
    3060:	06060520 	streq	r0, [r6], -r0, lsr #10
    3064:	0608052f 	streq	r0, [r8], -pc, lsr #10
    3068:	060b0501 	streq	r0, [fp], -r1, lsl #10
    306c:	0608052a 	streq	r0, [r8], -sl, lsr #10
    3070:	1d1c0514 	cfldr32ne	mvfx0, [ip, #-80]	; 0xffffffb0
    3074:	35060505 	strcc	r0, [r6, #-1285]	; 0xfffffafb
    3078:	59130605 	ldmdbpl	r3, {r0, r2, r9, sl}
strand (__outserial, const char*)
    307c:	14060905 	strne	r0, [r6], #-2309	; 0xfffff6fb
    3080:	051f0805 	ldreq	r0, [pc, #-2053]	; 2883 <option+0x15b>
    3084:	06052d0a 	streq	r2, [r5], -sl, lsl #26
    3088:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
endstrand
    308c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    3090:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
	ptr = data;
    3094:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    3098:	05222c08 	streq	r2, [r2, #-3080]!	; 0xfffff3f8
	if (*ptr)
    309c:	051b060b 	ldreq	r0, [fp, #-1547]	; 0xfffff9f5
		len = strlen (ptr);
    30a0:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    30a4:	09030605 	stmdbeq	r3, {r0, r2, r9, sl}
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    30a8:	06080520 	streq	r0, [r8], -r0, lsr #10
    30ac:	06060501 	streq	r0, [r6], -r1, lsl #10
    30b0:	061c052f 	ldreq	r0, [ip], -pc, lsr #10
    30b4:	05016e03 	streq	r6, [r1, #-3587]	; 0xfffff1fd
    30b8:	2e12030a 	cdpcs	3, 1, cr0, cr2, cr10, {0}
	len -= quant;
    30bc:	03060505 	movweq	r0, #25861	; 0x6505
    30c0:	0605206e 	streq	r2, [r5], -lr, rrx
    30c4:	2f201703 	svccs	0x00201703
	if (len == 0) {
    30c8:	01060705 	tsteq	r6, r5, lsl #14
		ufree (data);
    30cc:	1e060b05 	vmlane.f64	d0, d6, d5
		finish;
    30d0:	01060c05 	tsteq	r6, r5, lsl #24
    30d4:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    30d8:	0c030604 	stceq	6, cr0, [r3], {4}
    30dc:	000b023c 	andeq	r0, fp, ip, lsr r2
    30e0:	0f050101 	svceq	0x00050101
    30e4:	28020500 	stmdacs	r2, {r8, sl}
    30e8:	0300001d 	movweq	r0, #29
strand (__inserial, address)
    30ec:	05010aae 	streq	r0, [r1, #-2734]	; 0xfffff552
    30f0:	25051302 	strcs	r1, [r5, #-770]	; 0xfffffcfe
    30f4:	18050106 	stmdane	r5, {r1, r2, r8}
    30f8:	2025052e 	eorcs	r0, r5, lr, lsr #10
    30fc:	05201805 	streq	r1, [r0, #-2053]!	; 0xfffff7fb
	if (__inpline != NULL)
    3100:	0c052025 	stceq	0, cr2, [r5], {37}	; 0x25
    3104:	0602052e 	streq	r0, [r2], -lr, lsr #10
		finish;
    3108:	05140621 	ldreq	r0, [r4, #-1569]	; 0xfffff9df
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    310c:	08023101 	stmdaeq	r2, {r0, r8, ip, sp}
    3110:	bb010100 	bllt	43518 <__ccfg+0x23570>
    3114:	0300000c 	movweq	r0, #12
    3118:	0001a500 	andeq	sl, r1, r0, lsl #10
		umwait (IM_INIT);
    311c:	fb010200 	blx	43926 <__ccfg+0x2397e>
		release;
    3120:	01000d0e 	tsteq	r0, lr, lsl #26
	savedata (data);
    3124:	00010101 	andeq	r0, r1, r1, lsl #2
	len = MAX_LINE_LENGTH;
    3128:	00010000 	andeq	r0, r1, r0
	io (IM_READ, __cport, READ, ptr, 1);
    312c:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    3130:	2f656d6f 	svccs	0x00656d6f
    3134:	70657473 	rsbvc	r7, r5, r3, ror r4
    3138:	2f6e6568 	svccs	0x006e6568
	if (ptr == (char*) data) { // new line
    313c:	6b736544 	blvs	1cdc654 <__ccfg+0x1cbc6ac>
    3140:	2f706f74 	svccs	0x00706f74
		if (*ptr == '\0') { // bin cmd
    3144:	4f534c4f 	svcmi	0x00534c4f
			proceed (IM_BIN);
    3148:	2f54454e 	svccs	0x0054454e
    314c:	4f434950 	svcmi	0x00434950
		if (*ptr < 0x20)
    3150:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3154:	2f534f63 	svccs	0x00534f63
			proceed (IM_READ);
    3158:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    315c:	4e562f73 	mrcmi	15, 2, r2, cr6, cr3, {3}
	if (*ptr == '\n' || *ptr == '\r') {
    3160:	00497465 	subeq	r7, r9, r5, ror #8
    3164:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3168:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
		*ptr = '\0';
    316c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
		__inpline = (char*)data;
    3170:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
		finish;
    3174:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
	if (len) {
    3178:	61652d65 	cmnvs	r5, r5, ror #26
		ptr++;
    317c:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    3180:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
		len--;
    3184:	636e692f 	cmnvs	lr, #770048	; 0xbc000
	proceed (IM_READ);
    3188:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
	io (IM_BIN, __cport, READ, ptr, 1);
    318c:	6f682f00 	svcvs	0x00682f00
    3190:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    3194:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    3198:	442f6e65 	strtmi	r6, [pc], #-3685	; 31a0 <__inserial+0xb4>
    319c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	len -= 2;
    31a0:	4f2f706f 	svcmi	0x002f706f
	if (len > *ptr + 1) // 1 for 0x04
    31a4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    31a8:	502f5445 	eorpl	r5, pc, r5, asr #8
		len = *ptr + 1;
    31ac:	534f4349 	movtpl	r4, #62281	; 0xf349
    31b0:	6369502f 	cmnvs	r9, #47	; 0x2f
	ptr++;
    31b4:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
	quant = io (IM_BINL, __cport, READ, ptr, len);
    31b8:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    31bc:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    31c0:	2f656d6f 	svccs	0x00656d6f
    31c4:	70657473 	rsbvc	r7, r5, r3, ror r4
    31c8:	2f6e6568 	svccs	0x006e6568
    31cc:	6b736544 	blvs	1cdc6e4 <__ccfg+0x1cbc73c>
	len -= quant;
    31d0:	2f706f74 	svccs	0x00706f74
		__inpline = (char*)data;
    31d4:	4f534c4f 	svcmi	0x00534c4f
		finish;
    31d8:	2f54454e 	svccs	0x0054454e
	ptr += quant;
    31dc:	4f434950 	svcmi	0x00434950
    31e0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
endstrand
    31e4:	00534f63 	subseq	r4, r3, r3, ror #30
    31e8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3134 <__inserial+0x48>
	proceed (IM_BINL);
    31ec:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
endstrand
    31f0:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    31f4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    31f8:	6f746b73 	svcvs	0x00746b73
    31fc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3200:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3204:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
		if (res && (d < n))
    3208:	2f534f43 	svccs	0x00534f43
    320c:	4f636950 	svcmi	0x00636950
    3210:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    3214:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
			res [d] = (char) c;
    3218:	63740000 	cmnvs	r4, #0
		d++;
    321c:	00632e76 	rsbeq	r2, r3, r6, ror lr
    3220:	73000001 	movwvc	r0, #1
    3224:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3228:	00682e74 	rsbeq	r2, r8, r4, ror lr
    322c:	73000002 	movwvc	r0, #2
    3230:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
				enci (10000);
    3234:	00682e67 	rsbeq	r2, r8, r7, ror #28
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3238:	61000002 	tstvs	r0, r2
    323c:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
	d = 0;
    3240:	00030068 	andeq	r0, r3, r8, rrx
		c = *fm++;
    3244:	63616d00 	cmnvs	r1, #0, 26
		if (c == '\\') {
    3248:	00682e68 	rsbeq	r2, r8, r8, ror #28
			if ((c = *fm++) == '\0') {
    324c:	70000003 	andvc	r0, r0, r3
    3250:	5f736e69 	svcpl	0x00736e69
				outc ('\\');
    3254:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
			if ((c = *fm++) == '\0') {
    3258:	00030068 	andeq	r0, r3, r8, rrx
				outc ('\\');
    325c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    3260:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
			outc (c);
    3264:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    3268:	0300682e 	movweq	r6, #2094	; 0x82e
			if (c == '\0')
    326c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    3270:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
			outc (c);
    3274:	00040068 	andeq	r0, r4, r8, rrx
				outc (val);
    3278:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
				val = (word) va_arg (ap, aword);
    327c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
		if (c == '%') {
    3280:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3284:	6b000001 	blvs	3290 <__pi_vfparse+0x68>
			c = *fm++;
    3288:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
			switch (c) {
    328c:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    3290:	74000005 	strvc	r0, [r0], #-5
    3294:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
    3298:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    329c:	00000100 	andeq	r0, r0, r0, lsl #2
    32a0:	5f766374 	svcpl	0x00766374
    32a4:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    32a8:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
				outc ('%');
    32ac:	00682e61 	rsbeq	r2, r8, r1, ror #28
    32b0:	3c000001 	stccc	0, cr0, [r0], {1}
				outc (c);
    32b4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    32b8:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    32bc:	0000003e 	andeq	r0, r0, lr, lsr r0
				if (c == '\0')
    32c0:	31050000 	mrscc	r0, (UNDEF: 5)
				return d;
    32c4:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
}
    32c8:	0300001d 	movweq	r0, #29
    32cc:	05010293 	streq	r0, [r1, #-659]	; 0xfffffd6d
			switch (c) {
    32d0:	14131702 	ldrne	r1, [r3], #-1794	; 0xfffff8fe
    32d4:	03063105 	movweq	r3, #24837	; 0x6105
    32d8:	05200178 	streq	r0, [r0, #-376]!	; 0xfffffe88
				for (i = 12; ; i -= 4) {
    32dc:	16052607 	strne	r2, [r5], -r7, lsl #12
				val = (word) va_arg (ap, aword);
    32e0:	3c050522 	cfstr32cc	mvfx0, [r5], {34}	; 0x22
						[ (val >> i) & 0xf ]);
    32e4:	26060205 	strcs	r0, [r6], -r5, lsl #4
    32e8:	13061a05 	movwne	r1, #27141	; 0x6a05
    32ec:	051f0e05 	ldreq	r0, [pc, #-3589]	; 24ef <ready+0xb>
					outc (__pi_hex_enc_table
    32f0:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    32f4:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
					if (i == 0)
    32f8:	0c030602 	stceq	6, cr0, [r3], {2}
    32fc:	06010520 	streq	r0, [r1], -r0, lsr #10
				for (i = 12; ; i -= 4) {
    3300:	00010216 	andeq	r0, r1, r6, lsl r2
				val = (word) va_arg (ap, aword);
    3304:	2e050101 	adfcss	f0, f5, f1
				if (c == 'd' && (val & 0x8000) != 0) {
    3308:	62020500 	andvs	r0, r2, #0, 10
				val = (word) va_arg (ap, aword);
    330c:	0300001d 	movweq	r0, #29
				if (c == 'd' && (val & 0x8000) != 0) {
    3310:	050100fe 	streq	r0, [r1, #-254]	; 0xffffff02
    3314:	06051602 	streq	r1, [r5], -r2, lsl #12
					outc ('-');
    3318:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    331c:	06030520 	streq	r0, [r3], -r0, lsr #10
					val = (~val) + 1;
    3320:	0629052f 	strteq	r0, [r9], -pc, lsr #10
    3324:	2e1c0501 	cfmul32cs	mvfx0, mvfx12, mvfx1
				for (i = 12; ; i -= 4) {
    3328:	21060305 	tstcs	r6, r5, lsl #6
				enci (10000);
    332c:	01062905 	tsteq	r6, r5, lsl #18
    3330:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
    3334:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3338:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    333c:	01024c01 	tsteq	r2, r1, lsl #24
    3340:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3344:	0205002e 	andeq	r0, r5, #46	; 0x2e
    3348:	00001d7c 	andeq	r1, r0, ip, ror sp
    334c:	01028303 	tsteq	r2, r3, lsl #6
    3350:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    3354:	050e062e 	streq	r0, [lr, #-1582]	; 0xfffff9d2
    3358:	2f062402 	svccs	0x00062402
    335c:	01130101 	tsteq	r3, r1, lsl #2
    3360:	01051401 	tsteq	r5, r1, lsl #8
    3364:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
    3368:	0002022d 	andeq	r0, r2, sp, lsr #4
    336c:	3a050101 	bcc	143778 <__ccfg+0x1237d0>
    3370:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
				if (c == 'd' || c == 'u') {
    3374:	0300001d 	movweq	r0, #29
    3378:	050101a7 	streq	r0, [r1, #-423]	; 0xfffffe59
					if (c == 'd' &&
    337c:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
					val = va_arg (ap, lword);
    3380:	02051c3a 	andeq	r1, r5, #14848	; 0x3a00
					fm++;
    3384:	05012406 	streq	r2, [r1, #-1030]	; 0xfffffbfa
					if (c == 'd' &&
    3388:	051c063a 	ldreq	r0, [ip, #-1594]	; 0xfffff9c6
    338c:	20062402 	andcs	r2, r6, r2, lsl #8
						outc ('-');
    3390:	0505134a 	streq	r1, [r5, #-842]	; 0xfffffcb6
    3394:	03050106 	movweq	r0, #20742	; 0x5106
						val = (~val) + 1;
    3398:	02053d06 	andeq	r3, r5, #384	; 0x180
				enci (10000);
    339c:	0606052f 	streq	r0, [r6], -pc, lsr #10
					enci (1000000000UL);
    33a0:	20050501 	andcs	r0, r5, r1, lsl #10
    33a4:	30060305 	andcc	r0, r6, r5, lsl #6
    33a8:	01061705 	tsteq	r6, r5, lsl #14
    33ac:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
    33b0:	052f0603 	streq	r0, [pc, #-1539]!	; 2db5 <cc1350_driver+0x1ad>
    33b4:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    33b8:	03052011 	movweq	r2, #20497	; 0x5011
    33bc:	0b052106 	bleq	14b7dc <__ccfg+0x12b834>
    33c0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    33c4:	19052806 	stmdbne	r5, {r1, r2, fp, sp}
    33c8:	01050106 	tsteq	r5, r6, lsl #2
    33cc:	0603054b 	streq	r0, [r3], -fp, asr #10
    33d0:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    33d4:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
    33d8:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    33dc:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    33e0:	03052014 	movweq	r2, #20500	; 0x5014
				} else if (c == 'x') {
    33e4:	11052106 	tstne	r5, r6, lsl #2
					for (i = 28; ; i -= 4) {
    33e8:	03050106 	movweq	r0, #20742	; 0x5106
					val = va_arg (ap, lword);
    33ec:	0b052106 	bleq	14b80c <__ccfg+0x12b864>
							[ (val >> i) & 0xf ]);
    33f0:	05020106 	streq	r0, [r2, #-262]	; 0xfffffefa
    33f4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
						outc (__pi_hex_enc_table
    33f8:	0205003a 	andeq	r0, r5, #58	; 0x3a
    33fc:	00001dd8 	ldrdeq	r1, [r0], -r8
    3400:	0101df03 	tsteq	r1, r3, lsl #30
						if (i == 0)
    3404:	02052006 	andeq	r2, r5, #6
    3408:	20090306 	andcs	r0, r9, r6, lsl #6
					for (i = 28; ; i -= 4) {
    340c:	84040530 	strhi	r0, [r4], #-1328	; 0xfffffad0
					outc ('%');
    3410:	01061b05 	tsteq	r6, r5, lsl #22
    3414:	4c060405 	cfstrsmi	mvf0, [r6], {5}
    3418:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
					outc ('l');
    341c:	0627064a 	strteq	r0, [r7], -sl, asr #12
    3420:	133c7903 	teqne	ip, #49152	; 0xc000
				val = (word) va_arg (ap, aword);
    3424:	03060105 	movweq	r0, #24837	; 0x6105
				outc (val);
    3428:	04052012 	streq	r2, [r5], #-18	; 0xffffffee
    342c:	062e7503 	strteq	r7, [lr], -r3, lsl #10
				while (*st != '\0') {
    3430:	061b052b 	ldreq	r0, [fp], -fp, lsr #10
    3434:	06040501 	streq	r0, [r4], -r1, lsl #10
    3438:	2e90014c 	fmlcssm	f0, f0, #4.0
    343c:	01055b13 	tsteq	r5, r3, lsl fp
					outc (*st);
    3440:	04051a06 	streq	r1, [r5], #-2566	; 0xfffff5fa
    3444:	052e7803 	streq	r7, [lr, #-2051]!	; 0xfffff7fd
					st++;
    3448:	0c023601 	stceq	6, cr3, [r2], {1}
		c = *fm++;
    344c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3450:	02050031 	andeq	r0, r5, #49	; 0x31
    3454:	00001e64 	andeq	r1, r0, r4, ror #28
char *vform (char *res, const char *fm, va_list aq) {
    3458:	0102ba03 	tsteq	r2, r3, lsl #20
    345c:	14180205 	ldrne	r0, [r8], #-517	; 0xfffffdfb
	if (res != NULL) {
    3460:	03063105 	movweq	r3, #24837	; 0x6105
		__pi_vfparse (res, MAX_WORD, fm, aq);
    3464:	06050178 			; <UNDEFINED> instruction: 0x06050178
    3468:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    346c:	02052d04 	andeq	r2, r5, #4, 26	; 0x100
}
    3470:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
    3474:	03050106 	movweq	r0, #20742	; 0x5106
	fml = strlen (fm) + 17;
    3478:	06012f06 	streq	r2, [r1], -r6, lsl #30
    347c:	064a0666 	strbeq	r0, [sl], -r6, ror #12
    3480:	133b0621 	teqne	fp, #34603008	; 0x2100000
	if ((res = (char*) umalloc (fml)) == NULL)
    3484:	4a660601 	bmi	1984c90 <__ccfg+0x1964ce8>
    3488:	132e2e06 			; <UNDEFINED> instruction: 0x132e2e06
    348c:	03060105 	movweq	r0, #24837	; 0x6105
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    3490:	03053c09 	movweq	r3, #23561	; 0x5c09
    3494:	062e7703 	strteq	r7, [lr], -r3, lsl #14
    3498:	06010536 			; <UNDEFINED> instruction: 0x06010536
    349c:	2d030521 	cfstr32cs	mvfx0, [r3, #-132]	; 0xffffff7c
		ufree (res);
    34a0:	01000b02 	tsteq	r0, r2, lsl #22
		goto Again;
    34a4:	004a0501 	subeq	r0, sl, r1, lsl #10
	if (buf == NULL || fmt == NULL)
    34a8:	1ed40205 	cdpne	2, 13, cr0, cr4, cr5, {0}
int vscan (const char *buf, const char *fmt, va_list ap) {
    34ac:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
	if (buf == NULL || fmt == NULL)
    34b0:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    34b4:	14131314 	ldrne	r1, [r3], #-788	; 0xfffffcec
    34b8:	064a0513 			; <UNDEFINED> instruction: 0x064a0513
		    	    case 'u': scanu (lword); break;
    34bc:	3c017903 			; <UNDEFINED> instruction: 0x3c017903
			while (isspace (*buf)) buf++;
    34c0:	0b030505 	bleq	c48dc <__ccfg+0xa4934>
    34c4:	034a053c 	movteq	r0, #42300	; 0xa53c
	while (*fmt != '\0') {
    34c8:	02052075 	andeq	r2, r5, #117	; 0x75
		if (*fmt++ != '%')
    34cc:	05240627 	streq	r0, [r4, #-1575]!	; 0xfffff9d9
		switch (*fmt++) {
    34d0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    34d4:	25052030 	strcs	r2, [r5, #-48]	; 0xffffffd0
    34d8:	3d0c0520 	cfstr32cc	mvfx0, [ip, #-128]	; 0xffffff80
    34dc:	053c3005 	ldreq	r3, [ip, #-5]!
    34e0:	04052025 	streq	r2, [r5], #-37	; 0xffffffdb
    34e4:	03054b06 	movweq	r4, #23302	; 0x5b06
    34e8:	2e150306 	cdpcs	3, 1, cr0, cr5, cr6, {0}
}
    34ec:	03060205 	movweq	r0, #25093	; 0x6205
		switch (*fmt++) {
    34f0:	13132e6e 	tstne	r3, #1760	; 0x6e0
    34f4:	06120517 			; <UNDEFINED> instruction: 0x06120517
    34f8:	06020501 	streq	r0, [r2], -r1, lsl #10
    34fc:	010f0576 	tsteq	pc, r6, ror r5	; <UNPREDICTABLE>
			while (isspace (*buf)) buf++;
    3500:	20060a05 	andcs	r0, r6, r5, lsl #20
    3504:	2f060305 	svccs	0x00060305
    3508:	01061305 	tsteq	r6, r5, lsl #6
    350c:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    3510:	051f0622 	ldreq	r0, [pc, #-1570]	; 2ef6 <phys_cc1350+0x8e>
    3514:	05010624 	streq	r0, [r1, #-1572]	; 0xfffff9dc
			if (*buf == '\0')
    3518:	0520060f 	streq	r0, [r0, #-1551]!	; 0xfffff9f1
			if (*buf != ',') {
    351c:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
			sap = va_arg (ap, char*);
    3520:	0105330a 	tsteq	r5, sl, lsl #6
			nc++;
    3524:	052e1303 	streq	r1, [lr, #-771]!	; 0xfffffcfd
			if (*buf != ',') {
    3528:	73030602 	movwvc	r0, #13826	; 0x3602
				while (!isspace (*buf) && *buf != ',' &&
    352c:	061a0566 	ldreq	r0, [sl], -r6, ror #10
    3530:	39130515 	ldmdbcc	r3, {r0, r2, r4, r8, sl}
    3534:	2f060205 	svccs	0x00060205
    3538:	14061a05 	strne	r1, [r6], #-2565	; 0xfffff5fb
    353c:	061e0205 	ldreq	r0, [lr], -r5, lsl #4
    3540:	0114132f 	tsteq	r4, pc, lsr #6
    3544:	05143c4a 	ldreq	r3, [r4, #-3146]	; 0xfffff3b6
			while (isspace (*buf)) buf++;
    3548:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    354c:	02054a05 	andeq	r4, r5, #20480	; 0x5000
    3550:	13053206 	movwne	r3, #20998	; 0x5206
    3554:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3558:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
			if (*buf == ',') buf++;
    355c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3560:	206d0306 	rsbcs	r0, sp, r6, lsl #6
			*sap = '\0';
    3564:	06130515 			; <UNDEFINED> instruction: 0x06130515
			break;
    3568:	06020501 	streq	r0, [r2], -r1, lsl #10
		    case 'd': scani (word); break;
    356c:	0605053d 			; <UNDEFINED> instruction: 0x0605053d
    3570:	06030501 	streq	r0, [r3], -r1, lsl #10
    3574:	0010023d 	andseq	r0, r0, sp, lsr r2
    3578:	3a050101 	bcc	143984 <__ccfg+0x1239dc>
    357c:	00020500 	andeq	r0, r2, r0, lsl #10
    3580:	03000000 	movweq	r0, #0
    3584:	050104a8 	streq	r0, [r1, #-1192]	; 0xfffffb58
    3588:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    358c:	063a0501 	ldrteq	r0, [sl], -r1, lsl #10
    3590:	0205201b 	andeq	r2, r5, #27
    3594:	4a062025 	bmi	18b630 <__ccfg+0x16b688>
    3598:	03062706 	movweq	r2, #26374	; 0x6706
    359c:	14143c79 	ldrne	r3, [r4], #-3193	; 0xfffff387
    35a0:	58060115 	stmdapl	r6, {r0, r2, r4, r8}
    35a4:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    35a8:	06060514 			; <UNDEFINED> instruction: 0x06060514
    35ac:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    35b0:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
    35b4:	13410603 	movtne	r0, #5635	; 0x1603
    35b8:	052b0805 	streq	r0, [fp, #-2053]!	; 0xfffff7fb
    35bc:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    35c0:	02052008 	andeq	r2, r5, #8
    35c4:	053d3306 	ldreq	r3, [sp, #-774]!	; 0xfffffcfa
    35c8:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    35cc:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    35d0:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    35d4:	0101000b 	tsteq	r1, fp
    35d8:	05004305 	streq	r4, [r0, #-773]	; 0xfffffcfb
		    case 'u': scanu (word); break;
    35dc:	001f9402 	andseq	r9, pc, r2, lsl #8
    35e0:	04c90300 	strbeq	r0, [r9], #768	; 0x300
    35e4:	16020501 	strne	r0, [r2], -r1, lsl #10
    35e8:	01060505 	tsteq	r6, r5, lsl #10
    35ec:	052f0f05 	streq	r0, [pc, #-3845]!	; 26ef <ser_inf+0x47>
    35f0:	1d053b26 	vstrne	d3, [r5, #-152]	; 0xffffff68
    35f4:	06020521 	streq	r0, [r2], -r1, lsr #10
    35f8:	06100531 			; <UNDEFINED> instruction: 0x06100531
    35fc:	06020501 	streq	r0, [r2], -r1, lsl #10
    3600:	0609052f 	streq	r0, [r9], -pc, lsr #10
    3604:	2b0a0501 	blcs	284a10 <__ccfg+0x264a68>
    3608:	02320105 	eorseq	r0, r2, #1073741825	; 0x40000001
    360c:	01010004 	tsteq	r1, r4
    3610:	05003c05 	streq	r3, [r0, #-3077]	; 0xfffff3fb
    3614:	001fb802 	andseq	fp, pc, r2, lsl #16
    3618:	04d50300 	ldrbeq	r0, [r5], #768	; 0x300
    361c:	19020501 	stmdbne	r2, {r0, r8, sl}
    3620:	01141313 	tsteq	r4, r3, lsl r3
		    case 'x': scanx (word); break;
    3624:	03063c05 	movweq	r3, #27653	; 0x6c05
    3628:	05202075 	streq	r2, [r0, #-117]!	; 0xffffff8b
    362c:	200b0302 	andcs	r0, fp, r2, lsl #6
    3630:	064a0620 	strbeq	r0, [sl], -r0, lsr #12
    3634:	06201303 	strteq	r1, [r0], -r3, lsl #6
    3638:	143c6d03 	ldrtne	r6, [ip], #-3331	; 0xfffff2fd
    363c:	06040513 			; <UNDEFINED> instruction: 0x06040513
    3640:	06020501 	streq	r0, [r2], -r1, lsl #10
    3644:	06050521 	streq	r0, [r5], -r1, lsr #10
    3648:	06030501 	streq	r0, [r3], -r1, lsl #10
    364c:	06060530 			; <UNDEFINED> instruction: 0x06060530
    3650:	06040501 	streq	r0, [r4], -r1, lsl #10
    3654:	02053d4b 	andeq	r3, r5, #4800	; 0x12c0
    3658:	01013d33 	tsteq	r1, r3, lsr sp
    365c:	05140615 	ldreq	r0, [r4, #-1557]	; 0xfffff9eb
    3660:	02051e04 	andeq	r1, r5, #4, 28	; 0x40
    3664:	06013006 	streq	r3, [r1], -r6
    3668:	2e064a4a 	vmlscs.f32	s8, s12, s20
    366c:	053e132e 	ldreq	r1, [lr, #-814]!	; 0xfffffcd2
    3670:	05130622 	ldreq	r0, [r3, #-1570]	; 0xfffff9de
    3674:	02055715 	andeq	r5, r5, #5505024	; 0x540000
    3678:	01052306 	tsteq	r5, r6, lsl #6
    367c:	0a051306 	beq	14829c <__ccfg+0x1282f4>
    3680:	022e7003 	eoreq	r7, lr, #3
    3684:	0101000b 	tsteq	r1, fp
    3688:	05003805 	streq	r3, [r0, #-2053]	; 0xfffff7fb
    368c:	00000002 	andeq	r0, r0, r2
    3690:	04fc0300 	ldrbteq	r0, [ip], #768	; 0x300
    3694:	16020501 	strne	r0, [r2], -r1, lsl #10
    3698:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
			switch (*fmt++) {
    369c:	06380501 	ldrteq	r0, [r8], -r1, lsl #10
    36a0:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    36a4:	20090302 	andcs	r0, r9, r2, lsl #6
    36a8:	054a0620 	strbeq	r0, [sl, #-1568]	; 0xfffff9e0
    36ac:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
    36b0:	0602052e 	streq	r0, [r2], -lr, lsr #10
		    	    case 'd': scani (lword); break;
    36b4:	142e7703 	strtne	r7, [lr], #-1795	; 0xfffff8fd
    36b8:	061a0514 			; <UNDEFINED> instruction: 0x061a0514
    36bc:	20050501 	andcs	r0, r5, r1, lsl #10
    36c0:	2f060305 	svccs	0x00060305
    36c4:	13190205 	tstne	r9, #1342177280	; 0x50000000
    36c8:	01061b05 	tsteq	r6, r5, lsl #22
    36cc:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    36d0:	0a030603 	beq	c4ee4 <__ccfg+0xa4f3c>
    36d4:	06050520 	streq	r0, [r5], -r0, lsr #10
    36d8:	05017503 	streq	r7, [r1, #-1283]	; 0xfffffafd
    36dc:	200b030a 	andcs	r0, fp, sl, lsl #6
    36e0:	20061a05 	andcs	r1, r6, r5, lsl #20
    36e4:	01060305 	tsteq	r6, r5, lsl #6
    36e8:	2f060405 	svccs	0x00060405
    36ec:	11062c05 	tstne	r6, r5, lsl #24
    36f0:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    36f4:	051f062a 	ldreq	r0, [pc, #-1578]	; 30d2 <__outserial+0x56>
    36f8:	206f0309 	rsbcs	r0, pc, r9, lsl #6
    36fc:	01062105 	tsteq	r6, r5, lsl #2
    3700:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
    3704:	052f0603 	streq	r0, [pc, #-1539]!	; 3109 <__inserial+0x1d>
    3708:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    370c:	20052006 	andcs	r2, r5, r6
		    	    case 'x': scanx (lword); break;
    3710:	20060520 	andcs	r0, r6, r0, lsr #10
    3714:	33060205 	movwcc	r0, #25093	; 0x6205
    3718:	06050513 			; <UNDEFINED> instruction: 0x06050513
    371c:	06030501 	streq	r0, [r3], -r1, lsl #10
    3720:	0505422a 	streq	r4, [r5, #-554]	; 0xfffffdd6
    3724:	0a050f06 	beq	147344 <__ccfg+0x12739c>
    3728:	061a0523 	ldreq	r0, [sl], -r3, lsr #10
    372c:	06030520 	streq	r0, [r3], -r0, lsr #10
    3730:	03010501 	movweq	r0, #5377	; 0x1501
    3734:	04052e0d 	streq	r2, [r5], #-3597	; 0xfffff1f3
    3738:	20740306 	rsbscs	r0, r4, r6, lsl #6
    373c:	01060805 	tsteq	r6, r5, lsl #16
    3740:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    3744:	052f0605 	streq	r0, [pc, #-1541]!	; 3147 <__inserial+0x5b>
    3748:	0510062c 	ldreq	r0, [r0, #-1580]	; 0xfffff9d4
    374c:	2a052207 	bcs	14bf70 <__ccfg+0x12bfc8>
    3750:	0a021e06 	beq	8af70 <__ccfg+0x6afc8>
    3754:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3758:	02050038 	andeq	r0, r5, #56	; 0x38
    375c:	00000000 	andeq	r0, r0, r0
    3760:	0105a303 	tsteq	r5, r3, lsl #6
    3764:	13160205 	tstne	r6, #1342177280	; 0x50000000
    3768:	01141313 	tsteq	r4, r3, lsl r3
    376c:	03063805 	movweq	r3, #26629	; 0x6805
    3770:	02052077 	andeq	r2, r5, #119	; 0x77
    3774:	20200903 	eorcs	r0, r0, r3, lsl #18
    3778:	03054a06 	movweq	r4, #23046	; 0x5a06
    377c:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
		    	    case 'd': scani (lword); break;
    3780:	03060205 	movweq	r0, #25093	; 0x6205
    3784:	14142e77 	ldrne	r2, [r4], #-3703	; 0xfffff189
    3788:	01061a05 	tsteq	r6, r5, lsl #20
    378c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    3790:	052f0603 	streq	r0, [pc, #-1539]!	; 3195 <__inserial+0xa9>
    3794:	05051902 	streq	r1, [r5, #-2306]	; 0xfffff6fe
    3798:	1b050106 	blne	143bb8 <__ccfg+0x123c10>
		    	    case 'u': scanu (lword); break;
    379c:	03380520 	teqeq	r8, #32, 10	; 0x8000000
    37a0:	0305206b 	movweq	r2, #20587	; 0x506b
    37a4:	7cb30306 	ldcvc	3, cr0, [r3], #24
    37a8:	06050520 	streq	r0, [r5], -r0, lsr #10
    37ac:	06030501 	streq	r0, [r3], -r1, lsl #10
    37b0:	06060521 	streq	r0, [r6], -r1, lsr #10
    37b4:	06030501 	streq	r0, [r3], -r1, lsl #10
    37b8:	29110531 	ldmdbcs	r1, {r0, r4, r5, r8, sl}
    37bc:	01061305 	tsteq	r6, r5, lsl #6
    37c0:	20060f05 	andcs	r0, r6, r5, lsl #30
    37c4:	13060505 	movwne	r0, #25861	; 0x6505
    37c8:	03060905 	movweq	r0, #26885	; 0x6905
    37cc:	052003dc 	streq	r0, [r0, #-988]!	; 0xfffffc24
    37d0:	05010621 	streq	r0, [r1, #-1569]	; 0xfffff9df
    37d4:	0305200c 	movweq	r2, #20492	; 0x500c
    37d8:	20052f06 	andcs	r2, r5, r6, lsl #30
    37dc:	06050106 	streq	r0, [r5], -r6, lsl #2
    37e0:	20200520 	eorcs	r0, r0, r0, lsr #10
		    	    case 'x': scanx (lword); break;
    37e4:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    37e8:	05330602 	ldreq	r0, [r3, #-1538]!	; 0xfffff9fe
			if ((c = *buf++) == '\0')
    37ec:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    37f0:	052b0603 	streq	r0, [fp, #-1539]!	; 0xfffff9fd
			sap = va_arg (ap, char*);
    37f4:	0a030601 	beq	c5000 <__ccfg+0xa5058>
			nc++;
    37f8:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
			break;
    37fc:	06090521 	streq	r0, [r9], -r1, lsr #10
			while (isspace (*buf)) buf++;
    3800:	06190501 	ldreq	r0, [r9], -r1, lsl #10
    3804:	06020520 	streq	r0, [r2], -r0, lsr #10
    3808:	03010501 	movweq	r0, #5377	; 0x1501
						*sap++ = *buf++;
    380c:	03052e0a 	movweq	r2, #24074	; 0x5e0a
    3810:	2e770306 	cdpcs	3, 7, cr0, cr7, cr6, {0}
			while (isspace (*buf)) buf++;
    3814:	01061e05 	tsteq	r6, r5, lsl #28
    3818:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    381c:	2f300604 	svccs	0x00300604
		return 0;
    3820:	01060605 	tsteq	r6, r5, lsl #12
    3824:	21060405 	tstcs	r6, r5, lsl #8
		    case 'x': scanx (word); break;
    3828:	051b2905 	ldreq	r2, [fp, #-2309]	; 0xfffff6fb
    382c:	0201062b 	andeq	r0, r1, #45088768	; 0x2b00000
		    	    case 'x': scanx (lword); break;
    3830:	0101000a 	tsteq	r1, sl
    3834:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
    3838:	00203802 	eoreq	r3, r0, r2, lsl #16
    383c:	05cd0300 	strbeq	r0, [sp, #768]	; 0x300
    3840:	13020501 	movwne	r0, #9473	; 0x2501
    3844:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    3848:	06160501 	ldreq	r0, [r6], -r1, lsl #10
    384c:	20207a03 	eorcs	r7, r0, r3, lsl #20
    3850:	20420205 	subcs	r0, r2, r5, lsl #4
    3854:	24064a06 	strcs	r4, [r6], #-2566	; 0xfffff5fa
    3858:	14143806 	ldrne	r3, [r4], #-2054	; 0xfffff7fa
    385c:	4a580601 	bmi	1605068 <__ccfg+0x15e50c0>
    3860:	162e2e06 	strtne	r2, [lr], -r6, lsl #28
    3864:	01060e05 	tsteq	r6, r5, lsl #28
    3868:	2f060205 	svccs	0x00060205
    386c:	14060d05 	strne	r0, [r6], #-3333	; 0xfffff2fb
    3870:	051e0e05 	ldreq	r0, [lr, #-3589]	; 0xfffff1fb
    3874:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    3878:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    387c:	03052e05 	movweq	r2, #24069	; 0x5e05
    3880:	06052206 	streq	r2, [r5], -r6, lsl #4
    3884:	0a050106 	beq	143ca4 <__ccfg+0x123cfc>
    3888:	0301054e 	movweq	r0, #5454	; 0x154e
    388c:	04052021 	streq	r2, [r5], #-33	; 0xffffffdf
    3890:	2e5c0306 	cdpcs	3, 5, cr0, cr12, cr6, {0}
    3894:	0117033d 	tsteq	r7, sp, lsr r3
    3898:	6e030205 	cdpvs	2, 0, cr0, cr3, cr5, {0}
    389c:	2e3c012e 	rsfcsep	f0, f4, #0.5
    38a0:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    38a4:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    38a8:	0b054a17 	bleq	15610c <__ccfg+0x136164>
    38ac:	58050520 	stmdapl	r5, {r5, r8, sl}
    38b0:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    38b4:	01060605 	tsteq	r6, r5, lsl #12
    38b8:	4e060405 	cdpmi	4, 0, cr0, cr6, cr5, {0}
    38bc:	05500205 	ldrbeq	r0, [r0, #-517]	; 0xfffffdfb
    38c0:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    38c4:	052f0602 	streq	r0, [pc, #-1538]!	; 32ca <__pi_vfparse+0xa2>
    38c8:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    38cc:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    38d0:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    38d4:	054b0602 	strbeq	r0, [fp, #-1538]	; 0xfffff9fe
    38d8:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    38dc:	051f2f15 	ldreq	r2, [pc, #-3861]	; 29cf <rf_on.part.0+0x17>
    38e0:	14210602 	strtne	r0, [r1], #-1538	; 0xfffff9fe
    38e4:	01060905 	tsteq	r6, r5, lsl #18
    38e8:	01000c02 	tsteq	r0, r2, lsl #24
    38ec:	00440501 	subeq	r0, r4, r1, lsl #10
    38f0:	20f40205 	rscscs	r0, r4, r5, lsl #4
    38f4:	87030000 	strhi	r0, [r3, -r0]
    38f8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    38fc:	06440516 			; <UNDEFINED> instruction: 0x06440516
    3900:	0205200e 	andeq	r2, r5, #14
    3904:	1a052606 	bne	14d124 <__ccfg+0x12d17c>
    3908:	44050106 	strmi	r0, [r5], #-262	; 0xfffffefa
    390c:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    3910:	09030602 	stmdbeq	r3, {r1, r9, sl}
    3914:	0605054a 	streq	r0, [r5], -sl, asr #10
    3918:	06030501 	streq	r0, [r3], -r1, lsl #10
    391c:	1605672f 	strne	r6, [r5], -pc, lsr #14
    3920:	03050106 	movweq	r0, #20742	; 0x5106
    3924:	16056706 	strne	r6, [r5], -r6, lsl #14
    3928:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    392c:	01055b06 	tsteq	r5, r6, lsl #22
    3930:	02021306 	andeq	r1, r2, #402653184	; 0x18000000
    3934:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3938:	0205004b 	andeq	r0, r5, #75	; 0x4b
    393c:	00000000 	andeq	r0, r0, r0
    3940:	01069903 	tsteq	r6, r3, lsl #18
    3944:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    3948:	03064b05 	movweq	r4, #27397	; 0x6b05
    394c:	1a05017a 	bne	143f3c <__ccfg+0x123f94>
    3950:	034b0526 	movteq	r0, #46374	; 0xb526
    3954:	02052e7a 	andeq	r2, r5, #1952	; 0x7a0
    3958:	4a090306 	bmi	244578 <__ccfg+0x2245d0>
    395c:	01060505 	tsteq	r6, r5, lsl #10
    3960:	2f060305 	svccs	0x00060305
    3964:	06160567 	ldreq	r0, [r6], -r7, ror #10
    3968:	06030501 	streq	r0, [r3], -r1, lsl #10
    396c:	06160567 	ldreq	r0, [r6], -r7, ror #10
    3970:	06020501 	streq	r0, [r2], -r1, lsl #10
    3974:	0601055a 			; <UNDEFINED> instruction: 0x0601055a
    3978:	00020213 	andeq	r0, r2, r3, lsl r2
    397c:	31050101 	tstcc	r5, r1, lsl #2
    3980:	00020500 	andeq	r0, r2, r0, lsl #10
    3984:	03000000 	movweq	r0, #0
    3988:	050106aa 	streq	r0, [r1, #-1706]	; 0xfffff956
    398c:	05051602 	streq	r1, [r5, #-1538]	; 0xfffff9fe
    3990:	03050106 	movweq	r0, #20742	; 0x5106
    3994:	01052106 	tsteq	r5, r6, lsl #2
    3998:	01023d06 	tsteq	r2, r6, lsl #26
    399c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    39a0:	02050048 	andeq	r0, r5, #72	; 0x48
    39a4:	00002130 	andeq	r2, r0, r0, lsr r1
    39a8:	0106d103 	tsteq	r6, r3, lsl #2
    39ac:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    39b0:	051c4805 	ldreq	r4, [ip, #-2053]	; 0xfffff7fb
    39b4:	01240602 			; <UNDEFINED> instruction: 0x01240602
    39b8:	0e064805 	cdpeq	8, 0, cr4, cr6, cr5, {0}
    39bc:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    39c0:	4a4a0620 	bmi	1285248 <__ccfg+0x12652a0>
    39c4:	06010513 			; <UNDEFINED> instruction: 0x06010513
    39c8:	2d130513 	cfldr32cs	mvfx0, [r3, #-76]	; 0xffffffb4
    39cc:	01000602 	tsteq	r0, r2, lsl #12
    39d0:	00460501 	subeq	r0, r6, r1, lsl #10
    39d4:	215c0205 	cmpcs	ip, r5, lsl #4
    39d8:	b2030000 	andlt	r0, r3, #0
    39dc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    39e0:	06460517 			; <UNDEFINED> instruction: 0x06460517
    39e4:	2505050d 	strcs	r0, [r5, #-1293]	; 0xfffffaf3
    39e8:	2f060305 	svccs	0x00060305
    39ec:	01060605 	tsteq	r6, r5, lsl #12
    39f0:	30060305 	andcc	r0, r6, r5, lsl #6
    39f4:	01060605 	tsteq	r6, r5, lsl #12
    39f8:	2f060405 	svccs	0x00060405
    39fc:	06070513 			; <UNDEFINED> instruction: 0x06070513
    3a00:	06040501 	streq	r0, [r4], -r1, lsl #10
    3a04:	060b0530 			; <UNDEFINED> instruction: 0x060b0530
    3a08:	3c070501 	cfstr32cc	mvfx0, [r7], {1}
    3a0c:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    3a10:	01060c05 	tsteq	r6, r5, lsl #24
    3a14:	09030105 	stmdbeq	r3, {r0, r2, r8}
    3a18:	06030520 	streq	r0, [r3], -r0, lsr #10
    3a1c:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    3a20:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3a24:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    3a28:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    3a2c:	014c0602 	cmpeq	ip, r2, lsl #12
    3a30:	4a062e06 	bmi	18f250 <__ccfg+0x16f2a8>
    3a34:	3705134a 	strcc	r1, [r5, -sl, asr #6]
    3a38:	01050106 	tsteq	r5, r6, lsl #2
    3a3c:	2d090521 	cfstr32cs	mvfx0, [r9, #-132]	; 0xffffff7c
    3a40:	71030b05 	tstvc	r3, r5, lsl #22
    3a44:	000b023c 	andeq	r0, fp, ip, lsr r2
    3a48:	3d050101 	stfccs	f0, [r5, #-4]
    3a4c:	00020500 	andeq	r0, r2, r0, lsl #10
    3a50:	03000000 	movweq	r0, #0
    3a54:	050106d9 	streq	r0, [r1, #-1753]	; 0xfffff927
    3a58:	05011602 	streq	r1, [r1, #-1538]	; 0xfffff9fe
    3a5c:	051c063d 	ldreq	r0, [ip, #-1597]	; 0xfffff9c3
    3a60:	06202402 	strteq	r2, [r0], -r2, lsl #8
    3a64:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    3a68:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    3a6c:	05670602 	strbeq	r0, [r7, #-1538]!	; 0xfffff9fe
    3a70:	05010643 	streq	r0, [r1, #-1603]	; 0xfffff9bd
    3a74:	43052e22 	movwmi	r2, #24098	; 0x5e22
    3a78:	2e22052e 	cfsh64cs	mvdx0, mvdx2, #30
    3a7c:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
    3a80:	01010005 	tsteq	r1, r5
    3a84:	05003d05 	streq	r3, [r0, #-3333]	; 0xfffff2fb
    3a88:	00000002 	andeq	r0, r0, r2
    3a8c:	06e20300 	strbteq	r0, [r2], r0, lsl #6
    3a90:	16020501 	strne	r0, [r2], -r1, lsl #10
    3a94:	063d0501 	ldrteq	r0, [sp], -r1, lsl #10
    3a98:	2402051c 	strcs	r0, [r2], #-1308	; 0xfffffae4
    3a9c:	4a4a0620 	bmi	1285324 <__ccfg+0x126537c>
    3aa0:	06220513 			; <UNDEFINED> instruction: 0x06220513
    3aa4:	67010501 	strvs	r0, [r1, -r1, lsl #10]
    3aa8:	01000502 	tsteq	r0, r2, lsl #10
    3aac:	00400501 	subeq	r0, r0, r1, lsl #10
    3ab0:	00000205 	andeq	r0, r0, r5, lsl #4
    3ab4:	ea030000 	b	c3abc <__ccfg+0xa3b14>
    3ab8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3abc:	40051416 	andmi	r1, r5, r6, lsl r4
    3ac0:	017a0306 	cmneq	sl, r6, lsl #6
    3ac4:	260c0520 	strcs	r0, [ip], -r0, lsr #10
    3ac8:	7a034005 	bvc	d3ae4 <__ccfg+0xb3b3c>
    3acc:	260c052e 	strcs	r0, [ip], -lr, lsr #10
    3ad0:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    3ad4:	84330602 	ldrthi	r0, [r3], #-1538	; 0xfffff9fe
    3ad8:	01061105 	tsteq	r6, r5, lsl #2
    3adc:	05310205 	ldreq	r0, [r1, #-517]!	; 0xfffffdfb
    3ae0:	02051d11 	andeq	r1, r5, #1088	; 0x440
    3ae4:	05132106 	ldreq	r2, [r3, #-262]	; 0xfffffefa
    3ae8:	0511061a 	ldreq	r0, [r1, #-1562]	; 0xfffff9e6
    3aec:	3d3e0602 	ldccc	6, cr0, [lr, #-8]!
    3af0:	01060905 	tsteq	r6, r5, lsl #18
    3af4:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    3af8:	01010002 	tsteq	r1, r2
    3afc:	05003e05 	streq	r3, [r0, #-3589]	; 0xfffff1fb
    3b00:	00000002 	andeq	r0, r0, r2
    3b04:	06fe0300 	ldrbteq	r0, [lr], r0, lsl #6
    3b08:	16020501 	strne	r0, [r2], -r1, lsl #10
    3b0c:	01000302 	tsteq	r0, r2, lsl #6
    3b10:	00450501 	subeq	r0, r5, r1, lsl #10
    3b14:	21bc0205 			; <UNDEFINED> instruction: 0x21bc0205
    3b18:	85030000 	strhi	r0, [r3, #-0]
    3b1c:	02050107 	andeq	r0, r5, #-1073741823	; 0xc0000001
    3b20:	45051416 	strmi	r1, [r5, #-1046]	; 0xfffffbea
    3b24:	017a0306 	cmneq	sl, r6, lsl #6
    3b28:	2605052e 	strcs	r0, [r5], -lr, lsr #10
    3b2c:	31060305 	tstcc	r6, r5, lsl #6
    3b30:	01060605 	tsteq	r6, r5, lsl #12
    3b34:	2f060405 	svccs	0x00060405
    3b38:	2f060305 	svccs	0x00060305
    3b3c:	06012e06 	streq	r2, [r1], -r6, lsl #28
    3b40:	3c4a062e 	mcrrcc	6, 2, r0, sl, cr14
    3b44:	05011d03 	streq	r1, [r1, #-3331]	; 0xfffff2fd
    3b48:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    3b4c:	0a052e06 	beq	14f36c <__ccfg+0x12f3c4>
    3b50:	27010535 	smladxcs	r1, r5, r5, r0
    3b54:	03060405 	movweq	r0, #25605	; 0x6405
    3b58:	20052073 	andcs	r2, r5, r3, ror r0
    3b5c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3b60:	1d120531 	cfldr32ne	mvfx0, [r2, #-196]	; 0xffffff3c
    3b64:	30060405 	andcc	r0, r6, r5, lsl #8
    3b68:	01061d05 	tsteq	r6, r5, lsl #26
    3b6c:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
    3b70:	060b052f 	streq	r0, [fp], -pc, lsr #10
    3b74:	06020501 	streq	r0, [r2], -r1, lsl #10
    3b78:	060b0541 	streq	r0, [fp], -r1, asr #10
    3b7c:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    3b80:	2f060305 	svccs	0x00060305
    3b84:	01060a05 	tsteq	r6, r5, lsl #20
    3b88:	01000902 	tsteq	r0, r2, lsl #18
    3b8c:	00480501 	subeq	r0, r8, r1, lsl #10
    3b90:	22240205 	eorcs	r0, r4, #1342177280	; 0x50000000
    3b94:	86030000 	strhi	r0, [r3], -r0
    3b98:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3b9c:	05051418 	streq	r1, [r5, #-1048]	; 0xfffffbe8
    3ba0:	48050106 	stmdami	r5, {r1, r2, r8}
    3ba4:	20207803 	eorcs	r7, r0, r3, lsl #16
    3ba8:	05280505 	streq	r0, [r8, #-1285]!	; 0xfffffafb
    3bac:	25052031 	strcs	r2, [r5, #-49]	; 0xffffffcf
    3bb0:	06030520 	streq	r0, [r3], -r0, lsr #10
    3bb4:	0535063d 	ldreq	r0, [r5, #-1597]!	; 0xfffff9c3
    3bb8:	05290602 	streq	r0, [r9, #-1538]!	; 0xfffff9fe
    3bbc:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    3bc0:	052f0602 	streq	r0, [pc, #-1538]!	; 35c6 <vscan+0x11e>
    3bc4:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    3bc8:	11052221 	tstne	r5, r1, lsr #4
    3bcc:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
    3bd0:	06210530 			; <UNDEFINED> instruction: 0x06210530
    3bd4:	2e100501 	cfmul32cs	mvfx0, mvfx0, mvfx1
    3bd8:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    3bdc:	01060505 	tsteq	r6, r5, lsl #10
    3be0:	21060305 	tstcs	r6, r5, lsl #6
    3be4:	343d0205 	ldrtcc	r0, [sp], #-517	; 0xfffffdfb
    3be8:	13060105 	movwne	r0, #24837	; 0x6105
    3bec:	01000b02 	tsteq	r0, r2, lsl #22
    3bf0:	00440501 	subeq	r0, r4, r1, lsl #10
    3bf4:	22740205 	rsbscs	r0, r4, #1342177280	; 0x50000000
    3bf8:	a0030000 	andge	r0, r3, r0
    3bfc:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3c00:	14131317 	ldrne	r1, [r3], #-791	; 0xfffffce9
    3c04:	06440501 	strbeq	r0, [r4], -r1, lsl #10
    3c08:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    3c0c:	2e090302 	cdpcs	3, 0, cr0, cr9, cr2, {0}
    3c10:	77034405 	strvc	r4, [r3, -r5, lsl #8]
    3c14:	03020520 	movweq	r0, #9504	; 0x2520
    3c18:	06204a09 	strteq	r4, [r0], -r9, lsl #20
    3c1c:	0603054a 	streq	r0, [r3], -sl, asr #10
    3c20:	05200d03 	streq	r0, [r0, #-3331]!	; 0xfffff2fd
    3c24:	03054b0e 	movweq	r4, #23310	; 0x5b0e
    3c28:	0f054706 	svceq	0x00054706
    3c2c:	06050106 	streq	r0, [r5], -r6, lsl #2
    3c30:	0628053c 			; <UNDEFINED> instruction: 0x0628053c
    3c34:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
    3c38:	0205011e 	andeq	r0, r5, #-2147483641	; 0x80000007
    3c3c:	0a050106 	beq	14405c <__ccfg+0x1240b4>
    3c40:	052e1603 	streq	r1, [lr, #-1539]!	; 0xfffff9fd
    3c44:	200d0301 	andcs	r0, sp, r1, lsl #6
    3c48:	03060305 	movweq	r0, #25349	; 0x6305
    3c4c:	58013c67 	stmdapl	r1, {r0, r1, r2, r5, r6, sl, fp, ip, sp}
    3c50:	0e05132e 	cdpeq	3, 0, cr1, cr5, cr14, {1}
    3c54:	06050106 	streq	r0, [r5], -r6, lsl #2
    3c58:	06020574 			; <UNDEFINED> instruction: 0x06020574
    3c5c:	06050542 	streq	r0, [r5], -r2, asr #10
    3c60:	06020501 	streq	r0, [r2], -r1, lsl #10
    3c64:	060c0536 			; <UNDEFINED> instruction: 0x060c0536
    3c68:	2e160501 	cfmul32cs	mvfx0, mvfx6, mvfx1
    3c6c:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    3c70:	02052006 	andeq	r2, r5, #6
    3c74:	0b052306 	bleq	14c894 <__ccfg+0x12c8ec>
    3c78:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3c7c:	0602054a 	streq	r0, [r2], -sl, asr #10
    3c80:	09056832 	stmdbeq	r5, {r1, r4, r5, fp, sp, lr}
    3c84:	0a020106 	beq	840a4 <__ccfg+0x640fc>
    3c88:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3c8c:	0205003e 	andeq	r0, r5, #62	; 0x3e
    3c90:	00002310 	andeq	r2, r0, r0, lsl r3
    3c94:	0109d103 	tsteq	r9, r3, lsl #2
    3c98:	13170205 	tstne	r7, #1342177280	; 0x50000000
    3c9c:	3e050114 	mcrcc	1, 0, r0, cr5, cr4, {0}
    3ca0:	20780306 	rsbscs	r0, r8, r6, lsl #6
    3ca4:	20280205 	eorcs	r0, r8, r5, lsl #4
    3ca8:	144a4a06 	strbne	r4, [sl], #-2566	; 0xfffff5fa
    3cac:	01060505 	tsteq	r6, r5, lsl #10
    3cb0:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    3cb4:	01060405 	tsteq	r6, r5, lsl #8
    3cb8:	21060205 	tstcs	r6, r5, lsl #4
    3cbc:	01060505 	tsteq	r6, r5, lsl #10
    3cc0:	33060205 	movwcc	r0, #25093	; 0x6205
    3cc4:	01060a05 	tsteq	r6, r5, lsl #20
    3cc8:	2f060205 	svccs	0x00060205
    3ccc:	1301012f 	movwne	r0, #4399	; 0x112f
    3cd0:	01060905 	tsteq	r6, r5, lsl #18
    3cd4:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
    3cd8:	2079030a 	rsbscs	r0, r9, sl, lsl #6
    3cdc:	01000902 	tsteq	r0, r2, lsl #18
    3ce0:	00340501 	eorseq	r0, r4, r1, lsl #10
    3ce4:	23500205 	cmpcs	r0, #1342177280	; 0x50000000
    3ce8:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    3cec:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3cf0:	01141316 	tsteq	r4, r6, lsl r3
    3cf4:	03063405 	movweq	r3, #25605	; 0x6405
    3cf8:	02052079 	andeq	r2, r5, #121	; 0x79
    3cfc:	4a062027 	bmi	18bda0 <__ccfg+0x16bdf8>
    3d00:	0505144a 	streq	r1, [r5, #-1098]	; 0xfffffbb6
    3d04:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3d08:	04053d06 	streq	r3, [r5], #-3334	; 0xfffff2fa
    3d0c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3d10:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    3d14:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3d18:	0a052306 	beq	14c938 <__ccfg+0x12c990>
    3d1c:	09051006 	stmdbeq	r5, {r1, r2, ip}
    3d20:	21010530 	tstcs	r1, r0, lsr r5
    3d24:	01000702 	tsteq	r0, r2, lsl #14
    3d28:	00350501 	eorseq	r0, r5, r1, lsl #10
    3d2c:	23840205 	orrcs	r0, r4, #1342177280	; 0x50000000
    3d30:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    3d34:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3d38:	06350516 			; <UNDEFINED> instruction: 0x06350516
    3d3c:	2602050e 	strcs	r0, [r2], -lr, lsl #10
    3d40:	052c0c05 	streq	r0, [ip, #-3077]!	; 0xfffff3fb
    3d44:	01300602 	teqeq	r0, r2, lsl #12
    3d48:	064a4a06 	strbeq	r4, [sl], -r6, lsl #20
    3d4c:	05134a2e 	ldreq	r4, [r3, #-2606]	; 0xfffff5d2
    3d50:	053e0601 	ldreq	r0, [lr, #-1537]!	; 0xfffff9ff
    3d54:	06022c02 	streq	r2, [r2], -r2, lsl #24
    3d58:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3d5c:	02050032 	andeq	r0, r5, #50	; 0x32
    3d60:	00000000 	andeq	r0, r0, r0
    3d64:	010a8403 	tsteq	sl, r3, lsl #8
    3d68:	01160205 	tsteq	r6, r5, lsl #4
    3d6c:	1c063205 	sfmne	f3, 4, [r6], {5}
    3d70:	20240205 	eorcs	r0, r4, r5, lsl #4
    3d74:	134a4a06 	movtne	r4, #43526	; 0xaa06
    3d78:	03060a05 	movweq	r0, #27141	; 0x6a05
    3d7c:	050177cc 	streq	r7, [r1, #-1996]	; 0xfffff834
    3d80:	08b40309 	ldmeq	r4!, {r0, r3, r8, r9}
    3d84:	06020520 	streq	r0, [r2], -r0, lsr #10
    3d88:	3c77c903 			; <UNDEFINED> instruction: 0x3c77c903
    3d8c:	03051413 	movweq	r1, #21523	; 0x5413
    3d90:	06050513 			; <UNDEFINED> instruction: 0x06050513
    3d94:	06030501 	streq	r0, [r3], -r1, lsl #10
    3d98:	06060521 	streq	r0, [r6], -r1, lsr #10
    3d9c:	06030501 	streq	r0, [r3], -r1, lsl #10
    3da0:	29110531 	ldmdbcs	r1, {r0, r4, r5, r8, sl}
    3da4:	01061305 	tsteq	r6, r5, lsl #6
    3da8:	20060f05 	andcs	r0, r6, r5, lsl #30
    3dac:	13060505 	movwne	r0, #25861	; 0x6505
    3db0:	b4030105 	strlt	r0, [r3], #-261	; 0xfffffefb
    3db4:	08022008 	stmdaeq	r2, {r3, sp}
    3db8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3dbc:	02050028 	andeq	r0, r5, #40	; 0x28
    3dc0:	000023c0 	andeq	r2, r0, r0, asr #7
    3dc4:	010a8c03 	tsteq	sl, r3, lsl #24
    3dc8:	1a030105 	bne	c41e4 <__ccfg+0xa423c>
    3dcc:	00010201 	andeq	r0, r1, r1, lsl #4
    3dd0:	01240101 			; <UNDEFINED> instruction: 0x01240101
    3dd4:	00030000 	andeq	r0, r3, r0
    3dd8:	0000008a 	andeq	r0, r0, sl, lsl #1
    3ddc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3de0:	0101000d 	tsteq	r1, sp
    3de4:	00000101 	andeq	r0, r0, r1, lsl #2
    3de8:	00000100 	andeq	r0, r0, r0, lsl #2
    3dec:	6f682f01 	svcvs	0x00682f01
    3df0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    3df4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    3df8:	442f6e65 	strtmi	r6, [pc], #-3685	; 3e00 <NOROM_SetupTrimDevice+0x8>
    3dfc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3e00:	4f2f706f 	svcmi	0x002f706f
    3e04:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3e08:	502f5445 	eorpl	r5, pc, r5, asr #8
    3e0c:	534f4349 	movtpl	r4, #62281	; 0xf349
    3e10:	6369502f 	cmnvs	r9, #47	; 0x2f
    3e14:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3e18:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3e1c:	752f0058 	strvc	r0, [pc, #-88]!	; 3dcc <TrimAfterColdResetWakeupFromShutDown+0xa8>
    3e20:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 3c5c <NOROM_RFCRTrim+0x8c>
    3e24:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    3e28:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    3e2c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3e30:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3e34:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3e38:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    3e3c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    3e40:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3e44:	00006564 	andeq	r6, r0, r4, ror #10
    3e48:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    3e4c:	5f707574 	svcpl	0x00707574
    3e50:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    3e54:	00010063 	andeq	r0, r1, r3, rrx
    3e58:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    3e5c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3e60:	00020068 	andeq	r0, r2, r8, rrx
    3e64:	01050000 	mrseq	r0, (UNDEF: 5)
    3e68:	c2020500 	andgt	r0, r2, #0, 10
    3e6c:	03000023 	movweq	r0, #35	; 0x23
    3e70:	05010284 	streq	r0, [r1, #-644]	; 0xfffffd7c
    3e74:	05141605 	ldreq	r1, [r4, #-1541]	; 0xfffff9fb
    3e78:	0102100a 	tsteq	r2, sl
    3e7c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3e80:	02050001 	andeq	r0, r5, #1
    3e84:	000023c4 	andeq	r2, r0, r4, asr #7
    3e88:	01029603 	tsteq	r2, r3, lsl #12
    3e8c:	14160505 	ldrne	r0, [r6], #-1285	; 0xfffffafb
    3e90:	02100a05 	andseq	r0, r0, #20480	; 0x5000
    3e94:	01010001 	tsteq	r1, r1
    3e98:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    3e9c:	0023c602 	eoreq	ip, r3, r2, lsl #12
    3ea0:	02a80300 	adceq	r0, r8, #0, 6
    3ea4:	16050501 	strne	r0, [r5], -r1, lsl #10
    3ea8:	100a0514 	andne	r0, sl, r4, lsl r5
    3eac:	01000102 	tsteq	r0, r2, lsl #2
    3eb0:	00010501 	andeq	r0, r1, r1, lsl #10
    3eb4:	23c80205 	biccs	r0, r8, #1342177280	; 0x50000000
    3eb8:	d2030000 	andle	r0, r3, #0
    3ebc:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    3ec0:	01051713 	tsteq	r5, r3, lsl r7
    3ec4:	017a0306 	cmneq	sl, r6, lsl #6
    3ec8:	06260505 	strteq	r0, [r6], -r5, lsl #10
    3ecc:	0e051333 	mcreq	3, 0, r1, cr5, cr3, {1}
    3ed0:	05051f06 	streq	r1, [r5, #-3846]	; 0xfffff0fa
    3ed4:	061d0521 	ldreq	r0, [sp], -r1, lsr #10
    3ed8:	06050520 	streq	r0, [r5], -r0, lsr #10
    3edc:	05360601 	ldreq	r0, [r6, #-1537]!	; 0xfffff9ff
    3ee0:	900d0304 	andls	r0, sp, r4, lsl #6
    3ee4:	05330505 	ldreq	r0, [r3, #-1285]!	; 0xfffffafb
    3ee8:	052f0601 	streq	r0, [pc, #-1537]!	; 38ef <NOROM_OSCClockSourceSet+0x17>
    3eec:	67030609 	strvs	r0, [r3, -r9, lsl #12]
    3ef0:	06160520 	ldreq	r0, [r6], -r0, lsr #10
    3ef4:	00100201 	andseq	r0, r0, r1, lsl #4
    3ef8:	01890101 	orreq	r0, r9, r1, lsl #2
    3efc:	00030000 	andeq	r0, r3, r0
    3f00:	00000183 	andeq	r0, r0, r3, lsl #3
    3f04:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3f08:	0101000d 	tsteq	r1, sp
    3f0c:	00000101 	andeq	r0, r0, r1, lsl #2
    3f10:	00000100 	andeq	r0, r0, r0, lsl #2
    3f14:	73752f01 	cmnvc	r5, #1, 30
    3f18:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    3f1c:	63672f62 	cmnvs	r7, #392	; 0x188
    3f20:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    3f24:	6f6e2d6d 	svcvs	0x006e2d6d
    3f28:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3f2c:	2f696261 	svccs	0x00696261
    3f30:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    3f34:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    3f38:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3f3c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    3f40:	2f656d6f 	svccs	0x00656d6f
    3f44:	70657473 	rsbvc	r7, r5, r3, ror r4
    3f48:	2f6e6568 	svccs	0x006e6568
    3f4c:	6b736544 	blvs	1cdd464 <__ccfg+0x1cbd4bc>
    3f50:	2f706f74 	svccs	0x00706f74
    3f54:	4f534c4f 	svcmi	0x00534c4f
    3f58:	2f54454e 	svccs	0x0054454e
    3f5c:	4f434950 	svcmi	0x00434950
    3f60:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3f64:	2f534f63 	svccs	0x00534f63
    3f68:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3f6c:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    3f70:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3f74:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    3f78:	6e692f45 	cdpvs	15, 6, cr2, cr9, cr5, {2}
    3f7c:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
    3f80:	2f656d6f 	svccs	0x00656d6f
    3f84:	70657473 	rsbvc	r7, r5, r3, ror r4
    3f88:	2f6e6568 	svccs	0x006e6568
    3f8c:	6b736544 	blvs	1cdd4a4 <__ccfg+0x1cbd4fc>
    3f90:	2f706f74 	svccs	0x00706f74
    3f94:	4f534c4f 	svcmi	0x00534c4f
    3f98:	2f54454e 	svccs	0x0054454e
    3f9c:	4f434950 	svcmi	0x00434950
    3fa0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3fa4:	2f534f63 	svccs	0x00534f63
    3fa8:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3fac:	2f005858 	svccs	0x00005858
    3fb0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3fb4:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    3fb8:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    3fbc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3fc0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3fc4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3fc8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3fcc:	4349502f 	movtmi	r5, #36911	; 0x902f
    3fd0:	502f534f 	eorpl	r5, pc, pc, asr #6
    3fd4:	534f6369 	movtpl	r6, #62313	; 0xf369
    3fd8:	6f682f00 	svcvs	0x00682f00
    3fdc:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    3fe0:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    3fe4:	442f6e65 	strtmi	r6, [pc], #-3685	; 3fec <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    3fe8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3fec:	4f2f706f 	svcmi	0x002f706f
    3ff0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3ff4:	502f5445 	eorpl	r5, pc, r5, asr #8
    3ff8:	534f4349 	movtpl	r4, #62281	; 0xf349
    3ffc:	6369502f 	cmnvs	r9, #47	; 0x2f
    4000:	6b2f534f 	blvs	bd8d44 <__ccfg+0xbb8d9c>
    4004:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    4008:	7300006c 	movwvc	r0, #108	; 0x6c
    400c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4010:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4014:	68000001 	stmdavs	r0, {r0}
    4018:	63635f77 	cmnvs	r3, #476	; 0x1dc
    401c:	735f6766 	cmpvc	pc, #26738688	; 0x1980000
    4020:	6c706d69 	ldclvs	13, cr6, [r0], #-420	; 0xfffffe5c
    4024:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
    4028:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    402c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4030:	72610000 	rsbvc	r0, r1, #0
    4034:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4038:	00000300 	andeq	r0, r0, r0, lsl #6
    403c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4040:	0300682e 	movweq	r6, #2094	; 0x82e
    4044:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    4048:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    404c:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4050:	00000300 	andeq	r0, r0, r0, lsl #6
    4054:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    4058:	5f736e6f 	svcpl	0x00736e6f
    405c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4060:	00030068 	andeq	r0, r3, r8, rrx
    4064:	73797300 	cmnvc	r9, #0, 6
    4068:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    406c:	00000400 	andeq	r0, r0, r0, lsl #8
    4070:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    4074:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    4078:	00000500 	andeq	r0, r0, r0, lsl #10
    407c:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    4080:	0300632e 	movweq	r6, #814	; 0x32e
    4084:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    4088:	03000002 	movweq	r0, #2
    408c:	0001c500 	andeq	ip, r1, r0, lsl #10
    4090:	fb010200 	blx	4489a <__ccfg+0x248f2>
    4094:	01000d0e 	tsteq	r0, lr, lsl #26
    4098:	00010101 	andeq	r0, r1, r1, lsl #2
    409c:	00010000 	andeq	r0, r1, r0
    40a0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    40a4:	2f656d6f 	svccs	0x00656d6f
    40a8:	70657473 	rsbvc	r7, r5, r3, ror r4
    40ac:	2f6e6568 	svccs	0x006e6568
    40b0:	6b736544 	blvs	1cdd5c8 <__ccfg+0x1cbd620>
    40b4:	2f706f74 	svccs	0x00706f74
    40b8:	4f534c4f 	svcmi	0x00534c4f
    40bc:	2f54454e 	svccs	0x0054454e
    40c0:	4f434950 	svcmi	0x00434950
    40c4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    40c8:	2f534f63 	svccs	0x00534f63
    40cc:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    40d0:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    40d4:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
    40d8:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    40dc:	2f656d6f 	svccs	0x00656d6f
    40e0:	70657473 	rsbvc	r7, r5, r3, ror r4
    40e4:	2f6e6568 	svccs	0x006e6568
    40e8:	6b736544 	blvs	1cdd600 <__ccfg+0x1cbd658>
    40ec:	2f706f74 	svccs	0x00706f74
    40f0:	4f534c4f 	svcmi	0x00534c4f
    40f4:	2f54454e 	svccs	0x0054454e
    40f8:	4f434950 	svcmi	0x00434950
    40fc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4100:	2f534f63 	svccs	0x00534f63
    4104:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4108:	2f005858 	svccs	0x00005858
    410c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4110:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4114:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    4118:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    411c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4120:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4124:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4128:	4349502f 	movtmi	r5, #36911	; 0x902f
    412c:	502f534f 	eorpl	r5, pc, pc, asr #6
    4130:	534f6369 	movtpl	r6, #62313	; 0xf369
    4134:	3143432f 	cmpcc	r3, pc, lsr #6
    4138:	2f585833 	svccs	0x00585833
    413c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4140:	41575858 	cmpmi	r7, r8, asr r8
    4144:	642f4552 	strtvs	r4, [pc], #-1362	; 414c <NOROM_SetupGetTrimForRadcExtCfg+0x18>
    4148:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    414c:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    4150:	73752f00 	cmnvc	r5, #0, 30
    4154:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4158:	63672f62 	cmnvs	r7, #392	; 0x188
    415c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    4160:	6f6e2d6d 	svcvs	0x006e2d6d
    4164:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4168:	2f696261 	svccs	0x00696261
    416c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    4170:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    4174:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4178:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    417c:	2f656d6f 	svccs	0x00656d6f
    4180:	70657473 	rsbvc	r7, r5, r3, ror r4
    4184:	2f6e6568 	svccs	0x006e6568
    4188:	6b736544 	blvs	1cdd6a0 <__ccfg+0x1cbd6f8>
    418c:	2f706f74 	svccs	0x00706f74
    4190:	4f534c4f 	svcmi	0x00534c4f
    4194:	2f54454e 	svccs	0x0054454e
    4198:	4f434950 	svcmi	0x00434950
    419c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    41a0:	00534f63 	subseq	r4, r3, r3, ror #30
    41a4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 40f0 <NOROM_SetupGetTrimForAdcShVbufEn+0x8>
    41a8:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    41ac:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    41b0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    41b4:	6f746b73 	svcvs	0x00746b73
    41b8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    41bc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    41c0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    41c4:	2f534f43 	svccs	0x00534f43
    41c8:	4f636950 	svcmi	0x00636950
    41cc:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    41d0:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    41d4:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    41d8:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    41dc:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
    41e0:	0100632e 	tsteq	r0, lr, lsr #6
    41e4:	6d630000 	stclvs	0, cr0, [r3, #-0]
    41e8:	5f736973 	svcpl	0x00736973
    41ec:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    41f0:	00020068 	andeq	r0, r2, r8, rrx
    41f4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    41f8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    41fc:	73000003 	movwvc	r0, #3
    4200:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4204:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4208:	61000004 	tstvs	r0, r4
    420c:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4210:	00020068 	andeq	r0, r2, r8, rrx
    4214:	63616d00 	cmnvs	r1, #0, 26
    4218:	00682e68 	rsbeq	r2, r8, r8, ror #28
    421c:	70000002 	andvc	r0, r0, r2
    4220:	5f736e69 	svcpl	0x00736e69
    4224:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4228:	00020068 	andeq	r0, r2, r8, rrx
    422c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4230:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4234:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4238:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    423c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4240:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4244:	00050068 	andeq	r0, r5, r8, rrx
    4248:	72656b00 	rsbvc	r6, r5, #0, 22
    424c:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    4250:	00060068 	andeq	r0, r6, r8, rrx
    4254:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
    4258:	00020500 	andeq	r0, r2, r0, lsl #10
    425c:	03000000 	movweq	r0, #0
    4260:	1b05010e 	blne	1446a0 <__ccfg+0x1246f8>
    4264:	05010101 	streq	r0, [r1, #-257]	; 0xfffffeff
    4268:	02010601 	andeq	r0, r1, #1048576	; 0x100000
    426c:	01010001 	tsteq	r1, r1
    4270:	05003f05 	streq	r3, [r0, #-3845]	; 0xfffff0fb
    4274:	00000002 	andeq	r0, r0, r2
    4278:	01100300 	tsteq	r0, r0, lsl #6
    427c:	13140205 	tstne	r4, #1342177280	; 0x50000000
    4280:	3f051413 	svccc	0x00051413
    4284:	017a0306 	cmneq	sl, r6, lsl #6
    4288:	26050520 	strcs	r0, [r5], -r0, lsr #10
    428c:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    4290:	01060605 	tsteq	r6, r5, lsl #12
    4294:	4d060305 	stcmi	3, cr0, [r6, #-20]	; 0xffffffec
    4298:	c1030204 	tstgt	r3, r4, lsl #4
    429c:	01040100 	mrseq	r0, (UNDEF: 20)
    42a0:	3d204003 	stccc	0, cr4, [r0, #-12]!
    42a4:	0302044b 	movweq	r0, #9291	; 0x244b
    42a8:	01040133 	tsteq	r4, r3, lsr r1
    42ac:	05204e03 	streq	r4, [r0, #-3587]!	; 0xfffff1fd
    42b0:	07053102 	streq	r3, [r5, -r2, lsl #2]
    42b4:	03040106 	movweq	r0, #16646	; 0x4106
    42b8:	8b030f05 	blhi	c7ed4 <__ccfg+0xa7f2c>
    42bc:	01042e01 	tsteq	r4, r1, lsl #28
    42c0:	f5030705 			; <UNDEFINED> instruction: 0xf5030705
    42c4:	0205207e 	andeq	r2, r5, #126	; 0x7e
    42c8:	0b052106 	bleq	14c6e8 <__ccfg+0x12c740>
    42cc:	13030513 	movwne	r0, #13587	; 0x3513
    42d0:	29050304 	stmdbcs	r5, {r2, r8, r9}
    42d4:	01018303 	tsteq	r1, r3, lsl #6
    42d8:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    42dc:	060b0501 	streq	r0, [fp], -r1, lsl #10
    42e0:	017ef803 	cmneq	lr, r3, lsl #16	; <UNPREDICTABLE>
    42e4:	0f050304 	svceq	0x00050304
    42e8:	20018803 	andcs	r8, r1, r3, lsl #16
    42ec:	0b050104 	bleq	144704 <__ccfg+0x12475c>
    42f0:	207ef803 	rsbscs	pc, lr, r3, lsl #16
    42f4:	33050304 	movwcc	r0, #21252	; 0x5304
    42f8:	2e018803 	cdpcs	8, 0, cr8, cr1, cr3, {0}
    42fc:	04204205 	strteq	r4, [r0], #-517	; 0xfffffdfb
    4300:	030b0501 	movweq	r0, #46337	; 0xb501
    4304:	052e7ef8 	streq	r7, [lr, #-3832]!	; 0xfffff108
    4308:	1f052e08 	svcne	0x00052e08
    430c:	2e080520 	cfsh32cs	mvfx0, mvfx8, #16
    4310:	051e0205 	ldreq	r0, [lr, #-517]	; 0xfffffdfb
    4314:	3a052208 	bcc	14cb3c <__ccfg+0x12cb94>
    4318:	0b051f06 	bleq	14bf38 <__ccfg+0x12bf90>
    431c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4320:	23010511 	movwcs	r0, #5393	; 0x1511
    4324:	01000602 	tsteq	r0, r2, lsl #12
    4328:	00034101 	andeq	r4, r3, r1, lsl #2
    432c:	ae000300 	cdpge	3, 0, cr0, cr0, cr0, {0}
    4330:	02000001 	andeq	r0, r0, #1
    4334:	0d0efb01 	vstreq	d15, [lr, #-4]
    4338:	01010100 	mrseq	r0, (UNDEF: 17)
    433c:	00000001 	andeq	r0, r0, r1
    4340:	01000001 	tsteq	r0, r1
    4344:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4290 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>
    4348:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    434c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    4350:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4354:	6f746b73 	svcvs	0x00746b73
    4358:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    435c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4360:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4364:	2f534f43 	svccs	0x00534f43
    4368:	4f636950 	svcmi	0x00636950
    436c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    4370:	2f736269 	svccs	0x00736269
    4374:	2f004f49 	svccs	0x00004f49
    4378:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    437c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4380:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    4384:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4388:	706f746b 	rsbvc	r7, pc, fp, ror #8
    438c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4390:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4394:	4349502f 	movtmi	r5, #36911	; 0x902f
    4398:	502f534f 	eorpl	r5, pc, pc, asr #6
    439c:	534f6369 	movtpl	r6, #62313	; 0xf369
    43a0:	3143432f 	cmpcc	r3, pc, lsr #6
    43a4:	2f585833 	svccs	0x00585833
    43a8:	33314343 	teqcc	r1, #201326593	; 0xc000001
    43ac:	41575858 	cmpmi	r7, r8, asr r8
    43b0:	642f4552 	strtvs	r4, [pc], #-1362	; 43b8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x94>
    43b4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    43b8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    43bc:	73752f00 	cmnvc	r5, #0, 30
    43c0:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    43c4:	63672f62 	cmnvs	r7, #392	; 0x188
    43c8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    43cc:	6f6e2d6d 	svcvs	0x006e2d6d
    43d0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    43d4:	2f696261 	svccs	0x00696261
    43d8:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    43dc:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    43e0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    43e4:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    43e8:	2f656d6f 	svccs	0x00656d6f
    43ec:	70657473 	rsbvc	r7, r5, r3, ror r4
    43f0:	2f6e6568 	svccs	0x006e6568
    43f4:	6b736544 	blvs	1cdd90c <__ccfg+0x1cbd964>
    43f8:	2f706f74 	svccs	0x00706f74
    43fc:	4f534c4f 	svcmi	0x00534c4f
    4400:	2f54454e 	svccs	0x0054454e
    4404:	4f434950 	svcmi	0x00434950
    4408:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    440c:	2f534f63 	svccs	0x00534f63
    4410:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4414:	2f005858 	svccs	0x00005858
    4418:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    441c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4420:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    4424:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4428:	706f746b 	rsbvc	r7, pc, fp, ror #8
    442c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4430:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4434:	4349502f 	movtmi	r5, #36911	; 0x902f
    4438:	502f534f 	eorpl	r5, pc, pc, asr #6
    443c:	534f6369 	movtpl	r6, #62313	; 0xf369
    4440:	6f682f00 	svcvs	0x00682f00
    4444:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    4448:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    444c:	442f6e65 	strtmi	r6, [pc], #-3685	; 4454 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>
    4450:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4454:	4f2f706f 	svcmi	0x002f706f
    4458:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    445c:	502f5445 	eorpl	r5, pc, r5, asr #8
    4460:	534f4349 	movtpl	r4, #62281	; 0xf349
    4464:	6369502f 	cmnvs	r9, #47	; 0x2f
    4468:	6b2f534f 	blvs	bd91ac <__ccfg+0xbb9204>
    446c:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    4470:	6200006c 	andvs	r0, r0, #108	; 0x6c
    4474:	6f747475 	svcvs	0x00747475
    4478:	632e736e 			; <UNDEFINED> instruction: 0x632e736e
    447c:	00000100 	andeq	r0, r0, r0, lsl #2
    4480:	6f697067 	svcvs	0x00697067
    4484:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4488:	74730000 	ldrbtvc	r0, [r3], #-0
    448c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    4490:	0300682e 	movweq	r6, #2094	; 0x82e
    4494:	72610000 	rsbvc	r0, r1, #0
    4498:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    449c:	00000400 	andeq	r0, r0, r0, lsl #8
    44a0:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    44a4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    44a8:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    44ac:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    44b0:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    44b4:	00000400 	andeq	r0, r0, r0, lsl #8
    44b8:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    44bc:	5f736e6f 	svcpl	0x00736e6f
    44c0:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    44c4:	00040068 	andeq	r0, r4, r8, rrx
    44c8:	73797300 	cmnvc	r9, #0, 6
    44cc:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    44d0:	00000500 	andeq	r0, r0, r0, lsl #10
    44d4:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    44d8:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    44dc:	00000600 	andeq	r0, r0, r0, lsl #12
    44e0:	00010500 	andeq	r0, r1, r0, lsl #10
    44e4:	00000205 	andeq	r0, r0, r5, lsl #4
    44e8:	1b030000 	blne	c44f0 <__ccfg+0xa4548>
    44ec:	2e060101 	adfcss	f0, f6, f1
    44f0:	6a060205 	bvs	184d0c <__ccfg+0x164d64>
    44f4:	01060e05 	tsteq	r6, r5, lsl #28
    44f8:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    44fc:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    4500:	0f054002 	svceq	0x00054002
    4504:	02040106 	andeq	r0, r4, #-2147483647	; 0x80000001
    4508:	2e018703 	cdpcs	7, 0, cr8, cr1, cr3, {0}
    450c:	07050104 	streq	r0, [r5, -r4, lsl #2]
    4510:	207efd03 	rsbscs	pc, lr, r3, lsl #26
    4514:	051c0f05 	ldreq	r0, [ip, #-3845]	; 0xfffff0fb
    4518:	05200614 	streq	r0, [r0, #-1556]!	; 0xfffff9ec
    451c:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
    4520:	03062002 	movweq	r2, #24578	; 0x6002
    4524:	3d4b2e11 	stclcc	14, cr2, [fp, #-68]	; 0xffffffbc
    4528:	71030305 	tstvc	r3, r5, lsl #6
    452c:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    4530:	00fe0329 	rscseq	r0, lr, r9, lsr #6
    4534:	17050501 	strne	r0, [r5, -r1, lsl #10]
    4538:	07050104 	streq	r0, [r5, -r4, lsl #2]
    453c:	7efd0306 	cdpvc	3, 15, cr0, cr13, cr6, {0}
    4540:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    4544:	0183030f 	orreq	r0, r3, pc, lsl #6
    4548:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    454c:	7efd0307 	cdpvc	3, 15, cr0, cr13, cr7, {0}
    4550:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4554:	01830333 	orreq	r0, r3, r3, lsr r3
    4558:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    455c:	7efd0306 	cdpvc	3, 15, cr0, cr13, cr6, {0}
    4560:	06040520 	streq	r0, [r4], -r0, lsr #10
    4564:	06050530 			; <UNDEFINED> instruction: 0x06050530
    4568:	06040501 	streq	r0, [r4], -r1, lsl #10
    456c:	06030540 	streq	r0, [r3], -r0, asr #10
    4570:	062e1203 	strteq	r1, [lr], -r3, lsl #4
    4574:	0306052f 	movweq	r0, #25903	; 0x652f
    4578:	0d052064 	stceq	0, cr2, [r5, #-400]	; 0xfffffe70
    457c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4580:	3c160306 	ldccc	3, cr0, [r6], {6}
    4584:	01060705 	tsteq	r6, r5, lsl #14
    4588:	29050204 	stmdbcs	r5, {r2, r9}
    458c:	00eb0306 	rsceq	r0, fp, r6, lsl #6
    4590:	17050558 	smlsdne	r5, r8, r5, r0
    4594:	01060f05 	tsteq	r6, r5, lsl #30
    4598:	07050104 	streq	r0, [r5, -r4, lsl #2]
    459c:	207f9003 	rsbscs	r9, pc, r3
    45a0:	0f050204 	svceq	0x00050204
    45a4:	2000f003 	andcs	pc, r0, r3
    45a8:	04203305 	strteq	r3, [r0], #-773	; 0xfffffcfb
    45ac:	03050501 	movweq	r0, #21761	; 0x5501
    45b0:	05207f90 	streq	r7, [r0, #-3984]!	; 0xfffff070
    45b4:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    45b8:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    45bc:	053e0603 	ldreq	r0, [lr, #-1539]!	; 0xfffff9fd
    45c0:	07055102 	streq	r5, [r5, -r2, lsl #2]
    45c4:	02040106 	andeq	r0, r4, #-2147483647	; 0x80000001
    45c8:	03062905 	movweq	r2, #26885	; 0x6905
    45cc:	053c00df 	ldreq	r0, [ip, #-223]!	; 0xffffff21
    45d0:	0f051705 	svceq	0x00051705
    45d4:	01040106 	tsteq	r4, r6, lsl #2
    45d8:	9c030705 	stcls	7, cr0, [r3], {5}
    45dc:	0204207f 	andeq	r2, r4, #127	; 0x7f
    45e0:	e4030f05 	str	r0, [r3], #-3845	; 0xfffff0fb
    45e4:	01042e00 	tsteq	r4, r0, lsl #28
    45e8:	9c030705 	stcls	7, cr0, [r3], {5}
    45ec:	0204207f 	andeq	r2, r4, #127	; 0x7f
    45f0:	e4033305 	str	r3, [r3], #-773	; 0xfffffcfb
    45f4:	01042000 	mrseq	r2, (UNDEF: 4)
    45f8:	9c030505 	cfstr32ls	mvfx0, [r3], {5}
    45fc:	0205207f 	andeq	r2, r5, #127	; 0x7f
    4600:	0e053106 	adfeqs	f3, f5, f6
    4604:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4608:	0602052e 	streq	r0, [r2], -lr, lsr #10
    460c:	06030531 			; <UNDEFINED> instruction: 0x06030531
    4610:	06020501 	streq	r0, [r2], -r1, lsl #10
    4614:	06010522 	streq	r0, [r1], -r2, lsr #10
    4618:	2c020522 	cfstr32cs	mvfx0, [r2], {34}	; 0x22
    461c:	4c060105 	stfmis	f0, [r6], {5}
    4620:	01000c02 	tsteq	r0, r2, lsl #24
    4624:	00290501 	eoreq	r0, r9, r1, lsl #10
    4628:	00000205 	andeq	r0, r0, r5, lsl #4
    462c:	d7030000 	strle	r0, [r3, -r0]
    4630:	02050100 	andeq	r0, r5, #0, 2
    4634:	060f0516 			; <UNDEFINED> instruction: 0x060f0516
    4638:	1c290501 	cfstr32ne	mvfx0, [r9], #-4
    463c:	05240f05 	streq	r0, [r4, #-3845]!	; 0xfffff0fb
    4640:	03052005 	movweq	r2, #20485	; 0x5005
    4644:	01052106 	tsteq	r5, r6, lsl #2
    4648:	03051a06 	movweq	r1, #23046	; 0x5a06
    464c:	052e7803 	streq	r7, [lr, #-2051]!	; 0xfffff7fd
    4650:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
    4654:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    4658:	03053c05 	movweq	r3, #23557	; 0x5c05
    465c:	052f2f06 	streq	r2, [pc, #-3846]!	; 375e <vscan+0x2b6>
    4660:	05220601 	streq	r0, [r2, #-1537]!	; 0xfffff9ff
    4664:	01052c03 	tsteq	r5, r3, lsl #24
    4668:	0006023e 	andeq	r0, r6, lr, lsr r2
    466c:	09360101 	ldmdbeq	r6!, {r0, r8}
    4670:	00030000 	andeq	r0, r3, r0
    4674:	000001d1 	ldrdeq	r0, [r0], -r1
    4678:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    467c:	0101000d 	tsteq	r1, sp
    4680:	00000101 	andeq	r0, r0, r1, lsl #2
    4684:	00000100 	andeq	r0, r0, r0, lsl #2
    4688:	6f682f01 	svcvs	0x00682f01
    468c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    4690:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    4694:	442f6e65 	strtmi	r6, [pc], #-3685	; 469c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x8>
    4698:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    469c:	4f2f706f 	svcmi	0x002f706f
    46a0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    46a4:	502f5445 	eorpl	r5, pc, r5, asr #8
    46a8:	534f4349 	movtpl	r4, #62281	; 0xf349
    46ac:	6369502f 	cmnvs	r9, #47	; 0x2f
    46b0:	502f534f 	eorpl	r5, pc, pc, asr #6
    46b4:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    46b8:	6f74532f 	svcvs	0x0074532f
    46bc:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    46c0:	6f682f00 	svcvs	0x00682f00
    46c4:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    46c8:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    46cc:	442f6e65 	strtmi	r6, [pc], #-3685	; 46d4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x40>
    46d0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    46d4:	4f2f706f 	svcmi	0x002f706f
    46d8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    46dc:	502f5445 	eorpl	r5, pc, r5, asr #8
    46e0:	534f4349 	movtpl	r4, #62281	; 0xf349
    46e4:	6369502f 	cmnvs	r9, #47	; 0x2f
    46e8:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    46ec:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    46f0:	43432f58 	movtmi	r2, #16216	; 0x3f58
    46f4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    46f8:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    46fc:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    4700:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    4704:	2f006269 	svccs	0x00006269
    4708:	2f727375 	svccs	0x00727375
    470c:	2f62696c 	svccs	0x0062696c
    4710:	2f636367 	svccs	0x00636367
    4714:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4718:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    471c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4720:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    4724:	2f312e32 	svccs	0x00312e32
    4728:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    472c:	00656475 	rsbeq	r6, r5, r5, ror r4
    4730:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 467c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>
    4734:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    4738:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    473c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4740:	6f746b73 	svcvs	0x00746b73
    4744:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4748:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    474c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4750:	2f534f43 	svccs	0x00534f43
    4754:	4f636950 	svcmi	0x00636950
    4758:	43432f53 	movtmi	r2, #16211	; 0x3f53
    475c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4760:	6f682f00 	svcvs	0x00682f00
    4764:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    4768:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    476c:	442f6e65 	strtmi	r6, [pc], #-3685	; 4774 <NOROM_ChipInfo_GetHwRevision+0x1c>
    4770:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4774:	4f2f706f 	svcmi	0x002f706f
    4778:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    477c:	502f5445 	eorpl	r5, pc, r5, asr #8
    4780:	534f4349 	movtpl	r4, #62281	; 0xf349
    4784:	6369502f 	cmnvs	r9, #47	; 0x2f
    4788:	2f00534f 	svccs	0x0000534f
    478c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4790:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4794:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    4798:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    479c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    47a0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    47a4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    47a8:	4349502f 	movtmi	r5, #36911	; 0x902f
    47ac:	502f534f 	eorpl	r5, pc, pc, asr #6
    47b0:	534f6369 	movtpl	r6, #62313	; 0xf369
    47b4:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    47b8:	006c656e 	rsbeq	r6, ip, lr, ror #10
    47bc:	6f747300 	svcvs	0x00747300
    47c0:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    47c4:	32786d5f 	rsbscc	r6, r8, #6080	; 0x17c0
    47c8:	30387235 	eorscc	r7, r8, r5, lsr r2
    47cc:	632e3533 			; <UNDEFINED> instruction: 0x632e3533
    47d0:	00000100 	andeq	r0, r0, r0, lsl #2
    47d4:	6f697067 	svcvs	0x00697067
    47d8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    47dc:	74730000 	ldrbtvc	r0, [r3], #-0
    47e0:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    47e4:	65655f65 	strbvs	r5, [r5, #-3941]!	; 0xfffff09b
    47e8:	6d6f7270 	sfmvs	f7, 2, [pc, #-448]!	; 4630 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1bc>
    47ec:	0100682e 	tsteq	r0, lr, lsr #16
    47f0:	74730000 	ldrbtvc	r0, [r3], #-0
    47f4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    47f8:	0300682e 	movweq	r6, #2094	; 0x82e
    47fc:	72610000 	rsbvc	r0, r1, #0
    4800:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4804:	00000400 	andeq	r0, r0, r0, lsl #8
    4808:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    480c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4810:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    4814:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4818:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    481c:	00000400 	andeq	r0, r0, r0, lsl #8
    4820:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    4824:	5f736e6f 	svcpl	0x00736e6f
    4828:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    482c:	00040068 	andeq	r0, r4, r8, rrx
    4830:	73797300 	cmnvc	r9, #0, 6
    4834:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    4838:	00000500 	andeq	r0, r0, r0, lsl #10
    483c:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    4840:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    4844:	00000600 	andeq	r0, r0, r0, lsl #12
    4848:	00190500 	andseq	r0, r9, r0, lsl #10
    484c:	24140205 	ldrcs	r0, [r4], #-517	; 0xfffffdfb
    4850:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    4854:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4858:	15051413 	strne	r1, [r5, #-1043]	; 0xfffffbed
    485c:	06190501 	ldreq	r0, [r9], -r1, lsl #10
    4860:	2509050d 	strcs	r0, [r9, #-1293]	; 0xfffffaf3
    4864:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    4868:	20028a03 	andcs	r8, r2, r3, lsl #20
    486c:	19050104 	stmdbne	r5, {r2, r8}
    4870:	2e7df103 	expcse	f7, f3
    4874:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    4878:	2002c503 	andcs	ip, r2, r3, lsl #10
    487c:	d0030f05 	andle	r0, r3, r5, lsl #30
    4880:	2d05207e 	stccs	0, cr2, [r5, #-504]	; 0xfffffe08
    4884:	2000fa03 	andcs	pc, r0, r3, lsl #20
    4888:	03050104 	movweq	r0, #20740	; 0x5104
    488c:	7df70306 	ldclvc	3, cr0, [r7, #24]!
    4890:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4894:	8f03060f 	svchi	0x0003060f
    4898:	01040101 	tsteq	r4, r1, lsl #2
    489c:	f1030505 			; <UNDEFINED> instruction: 0xf1030505
    48a0:	0605207e 			; <UNDEFINED> instruction: 0x0605207e
    48a4:	1f050521 	svcne	0x00050521
    48a8:	21060305 	tstcs	r6, r5, lsl #6
    48ac:	29050204 	stmdbcs	r5, {r2, r9}
    48b0:	01018903 	tsteq	r1, r3, lsl #18
    48b4:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    48b8:	03040501 	movweq	r0, #17665	; 0x4501
    48bc:	05017ef3 	streq	r7, [r1, #-3827]	; 0xfffff10d
    48c0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    48c4:	043d0603 	ldrteq	r0, [sp], #-1539	; 0xfffff9fd
    48c8:	03290502 			; <UNDEFINED> instruction: 0x03290502
    48cc:	05010281 	streq	r0, [r1, #-641]	; 0xfffffd7f
    48d0:	01041705 	tsteq	r4, r5, lsl #14
    48d4:	03060205 	movweq	r0, #25093	; 0x6205
    48d8:	04017df6 	streq	r7, [r1], #-3574	; 0xfffff20a
    48dc:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    48e0:	0420028a 	strteq	r0, [r0], #-650	; 0xfffffd76
    48e4:	06030501 	streq	r0, [r3], -r1, lsl #10
    48e8:	207dfb03 	rsbscs	pc, sp, r3, lsl #22
    48ec:	29050204 	stmdbcs	r5, {r2, r9}
    48f0:	0102b603 	tsteq	r2, r3, lsl #12
    48f4:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    48f8:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    48fc:	061c0501 	ldreq	r0, [ip], -r1, lsl #10
    4900:	207dc003 	rsbscs	ip, sp, r3
    4904:	05011505 	streq	r1, [r1, #-1285]	; 0xfffffafb
    4908:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    490c:	20090301 	andcs	r0, r9, r1, lsl #6
    4910:	01000702 	tsteq	r0, r2, lsl #14
    4914:	001f0501 	andseq	r0, pc, r1, lsl #10
    4918:	24480205 	strbcs	r0, [r8], #-517	; 0xfffffdfb
    491c:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    4920:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4924:	010e0514 	tsteq	lr, r4, lsl r5
    4928:	0e061f05 	cdpeq	15, 0, cr1, cr6, cr5, {0}
    492c:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4930:	01ff032d 	mvnseq	r0, sp, lsr #6
    4934:	0501043c 	streq	r0, [r1, #-1084]	; 0xfffffbc4
    4938:	86030603 	strhi	r0, [r3], -r3, lsl #12
    493c:	06054a7e 			; <UNDEFINED> instruction: 0x06054a7e
    4940:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4944:	02042f06 	andeq	r2, r4, #6, 30
    4948:	f4032905 	vst2.8	{d2,d4}, [r3], r5
    494c:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    4950:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    4954:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4958:	89030604 	stmdbhi	r3, {r2, r9, sl}
    495c:	02042e7e 	andeq	r2, r4, #2016	; 0x7e0
    4960:	a8032905 	stmdage	r3, {r0, r2, r8, fp, sp}
    4964:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    4968:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    496c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4970:	d4030603 	strle	r0, [r3], #-1539	; 0xfffff9fd
    4974:	0204207d 	andeq	r2, r4, #125	; 0x7d
    4978:	f1032905 			; <UNDEFINED> instruction: 0xf1032905
    497c:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    4980:	06010417 			; <UNDEFINED> instruction: 0x06010417
    4984:	017e8c03 	cmneq	lr, r3, lsl #24
    4988:	79030205 	stmdbvc	r3, {r0, r2, r9}
    498c:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4990:	01fb032d 	mvnseq	r0, sp, lsr #6
    4994:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4998:	8b030603 	blhi	c61ac <__ccfg+0xa6204>
    499c:	0204207e 	andeq	r2, r4, #126	; 0x7e
    49a0:	a6032905 	strge	r2, [r3], -r5, lsl #18
    49a4:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    49a8:	06010417 			; <UNDEFINED> instruction: 0x06010417
    49ac:	017dd603 	cmneq	sp, r3, lsl #12
    49b0:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    49b4:	2002aa03 	andcs	sl, r2, r3, lsl #20
    49b8:	03050104 	movweq	r0, #20740	; 0x5104
    49bc:	7dd60306 	ldclvc	3, cr0, [r6, #24]
    49c0:	03150520 	tsteq	r5, #32, 10	; 0x8000000
    49c4:	0e050179 	mcreq	1, 0, r0, cr5, cr9, {3}
    49c8:	06020501 	streq	r0, [r2], -r1, lsl #10
    49cc:	03010501 	movweq	r0, #5377	; 0x1501
    49d0:	05022009 	streq	r2, [r2, #-9]
    49d4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    49d8:	0205001e 	andeq	r0, r5, #30
    49dc:	00002478 	andeq	r2, r0, r8, ror r4
    49e0:	05013903 	streq	r3, [r1, #-2307]	; 0xfffff6fd
    49e4:	02041402 	andeq	r1, r4, #33554432	; 0x2000000
    49e8:	cf032905 	svcgt	0x00032905
    49ec:	3d050103 	stfccs	f0, [r5, #-12]
    49f0:	17050514 	smladne	r5, r4, r5, r0
    49f4:	01063805 	tsteq	r6, r5, lsl #16
    49f8:	1e050104 	adfnes	f0, f5, f4
    49fc:	207ca803 	rsbscs	sl, ip, r3, lsl #16
    4a00:	38050204 	stmdacc	r5, {r2, r9}
    4a04:	2003d803 	andcs	sp, r3, r3, lsl #16
    4a08:	02050104 	andeq	r0, r5, #4, 2
    4a0c:	7cab0306 	stcvc	3, cr0, [fp], #24
    4a10:	02042f2e 	andeq	r2, r4, #46, 30	; 0xb8
    4a14:	cd032905 	vstrgt.16	s4, [r3, #-10]	; <UNPREDICTABLE>
    4a18:	3d050103 	stfccs	f0, [r5, #-12]
    4a1c:	17050514 	smladne	r5, r4, r5, r0
    4a20:	01063805 	tsteq	r6, r5, lsl #16
    4a24:	01050104 	tsteq	r5, r4, lsl #2
    4a28:	2e7cad03 	cdpcs	13, 7, cr10, cr12, cr3, {0}
    4a2c:	01000402 	tsteq	r0, r2, lsl #8
    4a30:	00270501 	eoreq	r0, r7, r1, lsl #10
    4a34:	24900205 	ldrcs	r0, [r0], #517	; 0x205
    4a38:	d7030000 	strle	r0, [r3, -r0]
    4a3c:	02050100 	andeq	r0, r5, #0, 2
    4a40:	06270516 			; <UNDEFINED> instruction: 0x06270516
    4a44:	02042e0e 	andeq	r2, r4, #14, 28	; 0xe0
    4a48:	ba033805 	blt	d2a64 <__ccfg+0xb2abc>
    4a4c:	01042e03 	tsteq	r4, r3, lsl #28
    4a50:	ca030905 	bgt	c6e6c <__ccfg+0xa6ec4>
    4a54:	0204207c 	andeq	r2, r4, #124	; 0x7c
    4a58:	b6033805 	strlt	r3, [r3], -r5, lsl #16
    4a5c:	01042e03 	tsteq	r4, r3, lsl #28
    4a60:	03060805 	movweq	r0, #26629	; 0x6805
    4a64:	05207cca 	streq	r7, [r0, #-3274]!	; 0xfffff336
    4a68:	3c730302 	ldclcc	3, cr0, [r3], #-8
    4a6c:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    4a70:	03ba0329 			; <UNDEFINED> instruction: 0x03ba0329
    4a74:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4a78:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    4a7c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4a80:	017cc003 	cmneq	ip, r3
    4a84:	38050204 	stmdacc	r5, {r2, r9}
    4a88:	2003c003 	andcs	ip, r3, r3
    4a8c:	02050104 	andeq	r0, r5, #4, 2
    4a90:	7cc00306 	stclvc	3, cr0, [r0], {6}
    4a94:	06052f20 	streq	r2, [r5], -r0, lsr #30
    4a98:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4a9c:	02042f06 	andeq	r2, r4, #6, 30
    4aa0:	b7032905 	strlt	r2, [r3, -r5, lsl #18]
    4aa4:	3d050103 	stfccs	f0, [r5, #-12]
    4aa8:	17050514 	smladne	r5, r4, r5, r0
    4aac:	01063805 	tsteq	r6, r5, lsl #16
    4ab0:	02050104 	andeq	r0, r5, #4, 2
    4ab4:	7cc30306 	stclvc	3, cr0, [r3], {6}
    4ab8:	060f052e 	streq	r0, [pc], -lr, lsr #10
    4abc:	36010519 			; <UNDEFINED> instruction: 0x36010519
    4ac0:	03060305 	movweq	r0, #25349	; 0x6305
    4ac4:	06052e79 			; <UNDEFINED> instruction: 0x06052e79
    4ac8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4acc:	4b4c4b06 	blmi	13176ec <__ccfg+0x12f7744>
    4ad0:	01000702 	tsteq	r0, r2, lsl #14
    4ad4:	00160501 	andseq	r0, r6, r1, lsl #10
    4ad8:	24e40205 	strbtcs	r0, [r4], #517	; 0x205
    4adc:	81030000 	mrshi	r0, (UNDEF: 3)
    4ae0:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    4ae4:	06160516 			; <UNDEFINED> instruction: 0x06160516
    4ae8:	2406050e 	strcs	r0, [r6], #-1294	; 0xfffffaf2
    4aec:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4af0:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    4af4:	08055e02 	stmdaeq	r5, {r1, r9, sl, fp, ip, lr}
    4af8:	01050106 	tsteq	r5, r6, lsl #2
    4afc:	0603053d 			; <UNDEFINED> instruction: 0x0603053d
    4b00:	0302051b 	movweq	r0, #9499	; 0x251b
    4b04:	01010166 	tsteq	r1, r6, ror #2
    4b08:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    4b0c:	03990329 	orrseq	r0, r9, #-1543503872	; 0xa4000000
    4b10:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4b14:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4b18:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4b1c:	03020501 	movweq	r0, #9473	; 0x2501
    4b20:	042e7ce1 	strteq	r7, [lr], #-3297	; 0xfffff31f
    4b24:	03380502 	teqeq	r8, #8388608	; 0x800000
    4b28:	0420039f 	strteq	r0, [r0], #-927	; 0xfffffc61
    4b2c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4b30:	207ce103 	rsbscs	lr, ip, r3, lsl #2
    4b34:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    4b38:	03970329 	orrseq	r0, r7, #-1543503872	; 0xa4000000
    4b3c:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4b40:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    4b44:	06020501 	streq	r0, [r2], -r1, lsl #10
    4b48:	017ce303 	cmneq	ip, r3, lsl #6
    4b4c:	38050204 	stmdacc	r5, {r2, r9}
    4b50:	20039d03 	andcs	r9, r3, r3, lsl #26
    4b54:	02050104 	andeq	r0, r5, #4, 2
    4b58:	7ce30306 	stclvc	3, cr0, [r3], #24
    4b5c:	03030520 	movweq	r0, #13600	; 0x3520
    4b60:	09052e16 	stmdbeq	r5, {r1, r2, r4, r9, sl, fp, sp}
    4b64:	09020106 	stmdbeq	r2, {r1, r2, r8}
    4b68:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4b6c:	02050017 	andeq	r0, r5, #23
    4b70:	00002524 	andeq	r2, r0, r4, lsr #10
    4b74:	0100f703 	tsteq	r0, r3, lsl #14	; <UNPREDICTABLE>
    4b78:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    4b7c:	05100617 	ldreq	r0, [r0, #-1559]	; 0xfffff9e9
    4b80:	0505220c 	streq	r2, [r5, #-524]	; 0xfffffdf4
    4b84:	06030520 	streq	r0, [r3], -r0, lsr #10
    4b88:	0205593d 	andeq	r5, r5, #999424	; 0xf4000
    4b8c:	05016e03 	streq	r6, [r1, #-3587]	; 0xfffff1fd
    4b90:	3c130303 	ldccc	3, cr0, [r3], {3}
    4b94:	01060905 	tsteq	r6, r5, lsl #18
    4b98:	2f060305 	svccs	0x00060305
    4b9c:	01050101 	tsteq	r5, r1, lsl #2
    4ba0:	03021406 	movweq	r1, #9222	; 0x2406
    4ba4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4ba8:	02050011 	andeq	r0, r5, #17
    4bac:	00002548 	andeq	r2, r0, r8, asr #10
    4bb0:	01019203 	tsteq	r1, r3, lsl #4
    4bb4:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    4bb8:	050e0611 	streq	r0, [lr, #-1553]	; 0xfffff9ef
    4bbc:	2f062402 	svccs	0x00062402
    4bc0:	01060805 	tsteq	r6, r5, lsl #16
    4bc4:	0e030105 	adfeqs	f0, f3, f5
    4bc8:	0308052e 	movweq	r0, #34094	; 0x852e
    4bcc:	02052072 	andeq	r2, r5, #114	; 0x72
    4bd0:	200d0306 	andcs	r0, sp, r6, lsl #6
    4bd4:	13060105 	movwne	r0, #24837	; 0x6105
    4bd8:	01000302 	tsteq	r0, r2, lsl #6
    4bdc:	00120501 	andseq	r0, r2, r1, lsl #10
    4be0:	255c0205 	ldrbcs	r0, [ip, #-517]	; 0xfffffdfb
    4be4:	a7030000 	strge	r0, [r3, -r0]
    4be8:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    4bec:	06060514 			; <UNDEFINED> instruction: 0x06060514
    4bf0:	20050501 	andcs	r0, r5, r1, lsl #10
    4bf4:	2f060305 	svccs	0x00060305
    4bf8:	01060905 	tsteq	r6, r5, lsl #18
    4bfc:	2f060305 	svccs	0x00060305
    4c00:	30060105 	andcc	r0, r6, r5, lsl #2
    4c04:	01000302 	tsteq	r0, r2, lsl #6
    4c08:	002b0501 	eoreq	r0, fp, r1, lsl #10
    4c0c:	00000205 	andeq	r0, r0, r5, lsl #4
    4c10:	af030000 	svcge	0x00030000
    4c14:	20060101 	andcs	r0, r6, r1, lsl #2
    4c18:	30060205 	andcc	r0, r6, r5, lsl #4
    4c1c:	01060505 	tsteq	r6, r5, lsl #10
    4c20:	31060205 	tstcc	r6, r5, lsl #4
    4c24:	01060505 	tsteq	r6, r5, lsl #10
    4c28:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
    4c2c:	02052012 	andeq	r2, r5, #18
    4c30:	04303f06 	ldrteq	r3, [r0], #-3846	; 0xfffff0fa
    4c34:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4c38:	050102d1 	streq	r0, [r1, #-721]	; 0xfffffd2f
    4c3c:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4c40:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4c44:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4c48:	7daa0302 	stcvc	3, cr0, [sl, #8]!
    4c4c:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    4c50:	02d60338 	sbcseq	r0, r6, #56, 6	; 0xe0000000
    4c54:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4c58:	aa030602 	bge	c6468 <__ccfg+0xa64c0>
    4c5c:	4b2f207d 	blmi	bcce58 <__ccfg+0xbaceb0>
    4c60:	08053e4b 	stmdaeq	r5, {r0, r1, r3, r6, r9, sl, fp, ip, sp}
    4c64:	31020520 	tstcc	r2, r0, lsr #10
    4c68:	29050204 	stmdbcs	r5, {r2, r9}
    4c6c:	0102c703 	tsteq	r2, r3, lsl #14
    4c70:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4c74:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4c78:	01040106 	tsteq	r4, r6, lsl #2
    4c7c:	03060205 	movweq	r0, #25093	; 0x6205
    4c80:	302e7db4 	strhtcc	r7, [lr], -r4
    4c84:	13060105 	movwne	r0, #24837	; 0x6105
    4c88:	03060305 	movweq	r0, #25349	; 0x6305
    4c8c:	0a052e79 	beq	150678 <__ccfg+0x1306d0>
    4c90:	08050106 	stmdaeq	r5, {r1, r2, r8}
    4c94:	030a052e 	movweq	r0, #42286	; 0xa52e
    4c98:	05023c74 	streq	r3, [r2, #-3188]	; 0xfffff38c
    4c9c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4ca0:	02050031 	andeq	r0, r5, #49	; 0x31
    4ca4:	00000000 	andeq	r0, r0, r0
    4ca8:	0101ca03 	tsteq	r1, r3, lsl #20
    4cac:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    4cb0:	05100631 	ldreq	r0, [r0, #-1585]	; 0xfffff9cf
    4cb4:	3105220c 	tstcc	r5, ip, lsl #4
    4cb8:	2205051e 	andcs	r0, r5, #125829120	; 0x7800000
    4cbc:	051e3105 	ldreq	r3, [lr, #-261]	; 0xfffffefb
    4cc0:	03053005 	movweq	r3, #20485	; 0x5005
    4cc4:	06053206 	streq	r3, [r5], -r6, lsl #4
    4cc8:	17050106 	strne	r0, [r5, -r6, lsl #2]
    4ccc:	20060520 	andcs	r0, r6, r0, lsr #10
    4cd0:	30060305 	andcc	r0, r6, r5, lsl #6
    4cd4:	01060605 	tsteq	r6, r5, lsl #12
    4cd8:	053c1705 	ldreq	r1, [ip, #-1797]!	; 0xfffff8fb
    4cdc:	30320603 	eorscc	r0, r2, r3, lsl #12
    4ce0:	0a030405 	beq	c5cfc <__ccfg+0xa5d54>
    4ce4:	06100501 	ldreq	r0, [r0], -r1, lsl #10
    4ce8:	20090501 	andcs	r0, r9, r1, lsl #10
    4cec:	05201005 	streq	r1, [r0, #-5]!
    4cf0:	04052009 	streq	r2, [r5], #-9
    4cf4:	11052206 	tstne	r5, r6, lsl #4
    4cf8:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4cfc:	201f0520 	andscs	r0, pc, r0, lsr #10
    4d00:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    4d04:	05240604 	streq	r0, [r4, #-1540]!	; 0xfffff9fc
    4d08:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    4d0c:	05054a07 	streq	r4, [r5, #-2567]	; 0xfffff5f9
    4d10:	0b053106 	bleq	151130 <__ccfg+0x131188>
    4d14:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4d18:	052f2f06 	streq	r2, [pc, #-3846]!	; 3e1a <NOROM_SetupTrimDevice+0x22>
    4d1c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    4d20:	20310301 	eorscs	r0, r1, r1, lsl #6
    4d24:	03060405 	movweq	r0, #25605	; 0x6405
    4d28:	0e052052 	mcreq	0, 0, r2, cr5, cr2, {2}
    4d2c:	07050106 	streq	r0, [r5, -r6, lsl #2]
    4d30:	20250520 	eorcs	r0, r5, r0, lsr #10
    4d34:	05201d05 	streq	r1, [r0, #-3333]!	; 0xfffff2fb
    4d38:	053e0605 	ldreq	r0, [lr, #-1541]!	; 0xfffff9fb
    4d3c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    4d40:	0b052804 	bleq	14ed58 <__ccfg+0x12edb0>
    4d44:	0604051e 			; <UNDEFINED> instruction: 0x0604051e
    4d48:	02042f22 	andeq	r2, r4, #34, 30	; 0x88
    4d4c:	03063805 	movweq	r3, #26629	; 0x6805
    4d50:	04010296 	streq	r0, [r1], #-662	; 0xfffffd6a
    4d54:	03040501 	movweq	r0, #17665	; 0x4501
    4d58:	052e7dea 	streq	r7, [lr, #-3562]!	; 0xfffff216
    4d5c:	c7030602 	strgt	r0, [r3, -r2, lsl #12]
    4d60:	0204207e 	andeq	r2, r4, #126	; 0x7e
    4d64:	c8032905 	stmdagt	r3, {r0, r2, r8, fp, sp}
    4d68:	3d050103 	stfccs	f0, [r5, #-12]
    4d6c:	17050514 	smladne	r5, r4, r5, r0
    4d70:	01063805 	tsteq	r6, r5, lsl #16
    4d74:	02050104 	andeq	r0, r5, #4, 2
    4d78:	7cb20306 	ldcvc	3, cr0, [r2], #24
    4d7c:	4b4b2f20 	blmi	12d0a04 <__ccfg+0x12b0a5c>
    4d80:	0502043d 	streq	r0, [r2, #-1085]	; 0xfffffbc3
    4d84:	03c30329 	biceq	r0, r3, #-1543503872	; 0xa4000000
    4d88:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4d8c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4d90:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4d94:	06020501 	streq	r0, [r2], -r1, lsl #10
    4d98:	2e7dee03 	cdpcs	14, 7, cr14, cr13, cr3, {0}
    4d9c:	03060b05 	movweq	r0, #27397	; 0x6b05
    4da0:	09058255 	stmdbeq	r5, {r0, r2, r4, r6, r9, pc}
    4da4:	2e1f0306 	cdpcs	3, 1, cr0, cr15, cr6, {0}
    4da8:	01061305 	tsteq	r6, r5, lsl #6
    4dac:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    4db0:	2205202a 	andcs	r2, r5, #42	; 0x2a
    4db4:	06050520 	streq	r0, [r5], -r0, lsr #10
    4db8:	060b053e 			; <UNDEFINED> instruction: 0x060b053e
    4dbc:	06050501 	streq	r0, [r5], -r1, lsl #10
    4dc0:	060b0531 			; <UNDEFINED> instruction: 0x060b0531
    4dc4:	35020501 	strcc	r0, [r2, #-1281]	; 0xfffffaff
    4dc8:	03060405 	movweq	r0, #25605	; 0x6405
    4dcc:	05592e0a 	ldrbeq	r2, [r9, #-3594]	; 0xfffff1f6
    4dd0:	03010609 	movweq	r0, #5641	; 0x1609
    4dd4:	04054a0e 	streq	r4, [r5], #-2574	; 0xfffff5f2
    4dd8:	6b032106 	blvs	cd1f8 <__ccfg+0xad250>
    4ddc:	0b035920 	bleq	db264 <__ccfg+0xbb2bc>
    4de0:	09054b20 	stmdbeq	r5, {r5, r8, r9, fp, lr}
    4de4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4de8:	054b5e06 	strbeq	r5, [fp, #-3590]	; 0xfffff1fa
    4dec:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4df0:	ba030603 	blt	c6604 <__ccfg+0xa665c>
    4df4:	0605587f 			; <UNDEFINED> instruction: 0x0605587f
    4df8:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4dfc:	0100083b 	tsteq	r0, fp, lsr r8
    4e00:	003b0501 	eorseq	r0, fp, r1, lsl #10
    4e04:	00000205 	andeq	r0, r0, r5, lsl #4
    4e08:	a0030000 	andge	r0, r3, r0
    4e0c:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    4e10:	3b051414 	blcc	149e68 <__ccfg+0x129ec0>
    4e14:	0c050e06 	stceq	14, cr0, [r5], {6}
    4e18:	1c3b0532 	cfldr32ne	mvfx0, [fp], #-200	; 0xffffff38
    4e1c:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
    4e20:	05051c3b 	streq	r1, [r5, #-3131]	; 0xfffff3c5
    4e24:	06030532 			; <UNDEFINED> instruction: 0x06030532
    4e28:	06060532 			; <UNDEFINED> instruction: 0x06060532
    4e2c:	3c1a0501 	cfldr32cc	mvfx0, [sl], {1}
    4e30:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
    4e34:	053f0603 	ldreq	r0, [pc, #-1539]!	; 4839 <memcpy+0x2d>
    4e38:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4e3c:	052f0603 	streq	r0, [pc, #-1539]!	; 4841 <memcpy+0x35>
    4e40:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4e44:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
    4e48:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4e4c:	2f300603 	svccs	0x00300603
    4e50:	01060905 	tsteq	r6, r5, lsl #18
    4e54:	30060305 	andcc	r0, r6, r5, lsl #6
    4e58:	01060c05 	tsteq	r6, r5, lsl #24
    4e5c:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    4e60:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
    4e64:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    4e68:	2f210604 	svccs	0x00210604
    4e6c:	03060105 	movweq	r0, #24837	; 0x6105
    4e70:	03050122 	movweq	r0, #20770	; 0x5122
    4e74:	3c620306 	stclcc	3, cr0, [r2], #-24	; 0xffffffe8
    4e78:	01061105 	tsteq	r6, r5, lsl #2
    4e7c:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    4e80:	063e0603 	ldrteq	r0, [lr], -r3, lsl #12
    4e84:	304a0624 	subcc	r0, sl, r4, lsr #12
    4e88:	29050204 	stmdbcs	r5, {r2, r9}
    4e8c:	0101c803 	tsteq	r1, r3, lsl #16
    4e90:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4e94:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4e98:	01040106 	tsteq	r4, r6, lsl #2
    4e9c:	b3030305 	movwlt	r0, #13061	; 0x3305
    4ea0:	02043c7e 	andeq	r3, r4, #32256	; 0x7e00
    4ea4:	cd033805 	stcgt	8, cr3, [r3, #-20]	; 0xffffffec
    4ea8:	01042001 	tsteq	r4, r1
    4eac:	03060305 	movweq	r0, #25349	; 0x6305
    4eb0:	2f2e7eb3 	svccs	0x002e7eb3
    4eb4:	01061905 	tsteq	r6, r5, lsl #18
    4eb8:	062e0305 	strteq	r0, [lr], -r5, lsl #6
    4ebc:	053e4b4b 	ldreq	r4, [lr, #-2891]!	; 0xfffff4b5
    4ec0:	05310608 	ldreq	r0, [r1, #-1544]!	; 0xfffff9f8
    4ec4:	09052b0c 	stmdbeq	r5, {r2, r3, r8, r9, fp, sp}
    4ec8:	2308052e 	movwcs	r0, #34094	; 0x852e
    4ecc:	1d060905 	vstrne.16	s0, [r6, #-10]	; <UNPREDICTABLE>
    4ed0:	04260305 	strteq	r0, [r6], #-773	; 0xfffffcfb
    4ed4:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4ed8:	050101bb 	streq	r0, [r1, #-443]	; 0xfffffe45
    4edc:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4ee0:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4ee4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4ee8:	c1030602 	tstgt	r3, r2, lsl #12
    4eec:	05053c7e 	streq	r3, [r5, #-3198]	; 0xfffff382
    4ef0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4ef4:	054b4006 	strbeq	r4, [fp, #-6]
    4ef8:	20730304 	rsbscs	r0, r3, r4, lsl #6
    4efc:	01061305 	tsteq	r6, r5, lsl #6
    4f00:	063c0405 	ldrteq	r0, [ip], -r5, lsl #8
    4f04:	0608053d 			; <UNDEFINED> instruction: 0x0608053d
    4f08:	06040501 	streq	r0, [r4], -r1, lsl #10
    4f0c:	06080559 			; <UNDEFINED> instruction: 0x06080559
    4f10:	030b0501 	movweq	r0, #46337	; 0xb501
    4f14:	0d024a5d 	vstreq	s8, [r2, #-372]	; 0xfffffe8c
    4f18:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4f1c:	02050012 	andeq	r0, r5, #18
    4f20:	00000000 	andeq	r0, r0, r0
    4f24:	0102da03 	tsteq	r2, r3, lsl #20
    4f28:	02150105 	andseq	r0, r5, #1073741825	; 0x40000001
    4f2c:	01010001 	tsteq	r1, r1
    4f30:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
    4f34:	00000002 	andeq	r0, r0, r2
    4f38:	02df0300 	sbcseq	r0, pc, #0, 6
    4f3c:	15020501 	strne	r0, [r2, #-1281]	; 0xfffffaff
    4f40:	13060105 	movwne	r0, #24837	; 0x6105
    4f44:	01000202 	tsteq	r0, r2, lsl #4
    4f48:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    4f4c:	02050029 	andeq	r0, r5, #41	; 0x29
    4f50:	00000000 	andeq	r0, r0, r0
    4f54:	14020519 	strne	r0, [r2], #-1305	; 0xfffffae7
    4f58:	01060505 	tsteq	r6, r5, lsl #10
    4f5c:	21060305 	tstcs	r6, r5, lsl #6
    4f60:	01060705 	tsteq	r6, r5, lsl #14
    4f64:	30060205 	andcc	r0, r6, r5, lsl #4
    4f68:	01060505 	tsteq	r6, r5, lsl #10
    4f6c:	21060305 	tstcs	r6, r5, lsl #6
    4f70:	01060805 	tsteq	r6, r5, lsl #16
    4f74:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    4f78:	13060105 	movwne	r0, #24837	; 0x6105
    4f7c:	01000302 	tsteq	r0, r2, lsl #6
    4f80:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    4f84:	02050017 	andeq	r0, r5, #23
    4f88:	00000000 	andeq	r0, r0, r0
    4f8c:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    4f90:	17051402 	strne	r1, [r5, -r2, lsl #8]
    4f94:	02051006 	andeq	r1, r5, #6
    4f98:	672f0622 	strvs	r0, [pc, -r2, lsr #12]!
    4f9c:	13060105 	movwne	r0, #24837	; 0x6105
    4fa0:	022d0205 	eoreq	r0, sp, #1342177280	; 0x50000000
    4fa4:	01010002 	tsteq	r1, r2
    4fa8:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    4fac:	01250003 			; <UNDEFINED> instruction: 0x01250003
    4fb0:	01020000 	mrseq	r0, (UNDEF: 2)
    4fb4:	000d0efb 	strdeq	r0, [sp], -fp
    4fb8:	01010101 	tsteq	r1, r1, lsl #2
    4fbc:	01000000 	mrseq	r0, (UNDEF: 0)
    4fc0:	2f010000 	svccs	0x00010000
    4fc4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4fc8:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4fcc:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    4fd0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4fd4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4fd8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4fdc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4fe0:	4349502f 	movtmi	r5, #36911	; 0x902f
    4fe4:	502f534f 	eorpl	r5, pc, pc, asr #6
    4fe8:	534f6369 	movtpl	r6, #62313	; 0xf369
    4fec:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    4ff0:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    4ff4:	61697265 	cmnvs	r9, r5, ror #4
    4ff8:	752f006c 	strvc	r0, [pc, #-108]!	; 4f94 <__pi_hex_enc_table+0x1f>
    4ffc:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4e38 <__aeabi_lmul+0x534>
    5000:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    5004:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    5008:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    500c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5010:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5014:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    5018:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    501c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5020:	2f006564 	svccs	0x00006564
    5024:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5028:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    502c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    5030:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5034:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5038:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    503c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5040:	4349502f 	movtmi	r5, #36911	; 0x902f
    5044:	502f534f 	eorpl	r5, pc, pc, asr #6
    5048:	534f6369 	movtpl	r6, #62313	; 0xf369
    504c:	3143432f 	cmpcc	r3, pc, lsr #6
    5050:	00585833 	subseq	r5, r8, r3, lsr r8
    5054:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4fa0 <__pi_hex_enc_table+0x2b>
    5058:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    505c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    5060:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5064:	6f746b73 	svcvs	0x00746b73
    5068:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    506c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5070:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5074:	2f534f43 	svccs	0x00534f43
    5078:	4f636950 	svcmi	0x00636950
    507c:	73000053 	movwvc	r0, #83	; 0x53
    5080:	6f5f7265 	svcvs	0x005f7265
    5084:	632e7475 			; <UNDEFINED> instruction: 0x632e7475
    5088:	00000100 	andeq	r0, r0, r0, lsl #2
    508c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    5090:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    5094:	00000200 	andeq	r0, r0, r0, lsl #4
    5098:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    509c:	0300682e 	movweq	r6, #2094	; 0x82e
    50a0:	616d0000 	cmnvs	sp, r0
    50a4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    50a8:	00000300 	andeq	r0, r0, r0, lsl #6
    50ac:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    50b0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    50b4:	0300682e 	movweq	r6, #2094	; 0x82e
    50b8:	75620000 	strbvc	r0, [r2, #-0]!
    50bc:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    50c0:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    50c4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    50c8:	73000003 	movwvc	r0, #3
    50cc:	6f697379 	svcvs	0x00697379
    50d0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    50d4:	05000000 	streq	r0, [r0, #-0]
    50d8:	02050026 	andeq	r0, r5, #38	; 0x26
    50dc:	00002570 	andeq	r2, r0, r0, ror r5
    50e0:	05010a03 	streq	r0, [r1, #-2563]	; 0xfffff5fd
    50e4:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    50e8:	0d062605 	stceq	6, cr2, [r6, #-20]	; 0xffffffec
    50ec:	250e0520 	strcs	r0, [lr, #-1312]	; 0xfffffae0
    50f0:	051b2605 	ldreq	r2, [fp, #-1541]	; 0xfffff9fb
    50f4:	0505250e 	streq	r2, [r5, #-1294]	; 0xfffffaf2
    50f8:	0603052e 	streq	r0, [r3], -lr, lsr #10
    50fc:	0d033d22 	stceq	13, cr3, [r3, #-136]	; 0xffffff78
    5100:	03020501 	movweq	r0, #9473	; 0x2501
    5104:	05052e76 	streq	r2, [r5, #-3702]	; 0xfffff18a
    5108:	03050106 	movweq	r0, #20742	; 0x5106
    510c:	0a052f06 	beq	150d2c <__ccfg+0x130d84>
    5110:	08050106 	stmdaeq	r5, {r1, r2, r8}
    5114:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    5118:	06150524 	ldreq	r0, [r5], -r4, lsr #10
    511c:	3c050501 	cfstr32cc	mvfx0, [r5], {1}
    5120:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    5124:	054a7a03 	strbeq	r7, [sl, #-2563]	; 0xfffff5fd
    5128:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    512c:	02052008 	andeq	r2, r5, #8
    5130:	2e0a0306 	cdpcs	3, 0, cr0, cr10, cr6, {0}
    5134:	01060505 	tsteq	r6, r5, lsl #10
    5138:	2f060305 	svccs	0x00060305
    513c:	05400205 	strbeq	r0, [r0, #-517]	; 0xfffffdfb
    5140:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5144:	03054a05 	movweq	r4, #23045	; 0x5a05
    5148:	033e2206 	teqeq	lr, #1610612736	; 0x60000000
    514c:	0205207a 	andeq	r2, r5, #122	; 0x7a
    5150:	05580a03 	ldrbeq	r0, [r8, #-2563]	; 0xfffff5fd
    5154:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    5158:	01010005 	tsteq	r1, r5
    515c:	000001c4 	andeq	r0, r0, r4, asr #3
    5160:	01240003 			; <UNDEFINED> instruction: 0x01240003
    5164:	01020000 	mrseq	r0, (UNDEF: 2)
    5168:	000d0efb 	strdeq	r0, [sp], -fp
    516c:	01010101 	tsteq	r1, r1, lsl #2
    5170:	01000000 	mrseq	r0, (UNDEF: 0)
    5174:	2f010000 	svccs	0x00010000
    5178:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    517c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    5180:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    5184:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5188:	706f746b 	rsbvc	r7, pc, fp, ror #8
    518c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5190:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5194:	4349502f 	movtmi	r5, #36911	; 0x902f
    5198:	502f534f 	eorpl	r5, pc, pc, asr #6
    519c:	534f6369 	movtpl	r6, #62313	; 0xf369
    51a0:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    51a4:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    51a8:	61697265 	cmnvs	r9, r5, ror #4
    51ac:	752f006c 	strvc	r0, [pc, #-108]!	; 5148 <patchGenfskRfe+0xa8>
    51b0:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4fec <__pi_hex_enc_table+0x77>
    51b4:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    51b8:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    51bc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    51c0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    51c4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    51c8:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    51cc:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    51d0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    51d4:	2f006564 	svccs	0x00006564
    51d8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    51dc:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    51e0:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    51e4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    51e8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    51ec:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    51f0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    51f4:	4349502f 	movtmi	r5, #36911	; 0x902f
    51f8:	502f534f 	eorpl	r5, pc, pc, asr #6
    51fc:	534f6369 	movtpl	r6, #62313	; 0xf369
    5200:	3143432f 	cmpcc	r3, pc, lsr #6
    5204:	00585833 	subseq	r5, r8, r3, lsr r8
    5208:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5154 <patchGenfskRfe+0xb4>
    520c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    5210:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    5214:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5218:	6f746b73 	svcvs	0x00746b73
    521c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5220:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5224:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5228:	2f534f43 	svccs	0x00534f43
    522c:	4f636950 	svcmi	0x00636950
    5230:	73000053 	movwvc	r0, #83	; 0x53
    5234:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    5238:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    523c:	73000001 	movwvc	r0, #1
    5240:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    5244:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5248:	61000002 	tstvs	r0, r2
    524c:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    5250:	00030068 	andeq	r0, r3, r8, rrx
    5254:	63616d00 	cmnvs	r1, #0, 26
    5258:	00682e68 	rsbeq	r2, r8, r8, ror #28
    525c:	70000003 	andvc	r0, r0, r3
    5260:	5f736e69 	svcpl	0x00736e69
    5264:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    5268:	00030068 	andeq	r0, r3, r8, rrx
    526c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    5270:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    5274:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    5278:	0300682e 	movweq	r6, #2094	; 0x82e
    527c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    5280:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    5284:	00040068 	andeq	r0, r4, r8, rrx
    5288:	2a050000 	bcs	145290 <__ccfg+0x1252e8>
    528c:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
    5290:	03000025 	movweq	r0, #37	; 0x25
    5294:	0205010c 	andeq	r0, r5, #12, 2
    5298:	2a051416 	bcs	14a2f8 <__ccfg+0x12a350>
    529c:	017a0306 	cmneq	sl, r6, lsl #6
    52a0:	34050520 	strcc	r0, [r5], #-1312	; 0xfffffae0
    52a4:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
    52a8:	01061005 	tsteq	r6, r5
    52ac:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    52b0:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    52b4:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    52b8:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    52bc:	0b052106 	bleq	14d6dc <__ccfg+0x12d734>
    52c0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    52c4:	07054b06 	streq	r4, [r5, -r6, lsl #22]
    52c8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    52cc:	053d2106 	ldreq	r2, [sp, #-262]!	; 0xfffffefa
    52d0:	052d1603 	streq	r1, [sp, #-1539]!	; 0xfffff9fd
    52d4:	05054f02 	streq	r4, [r5, #-3842]	; 0xfffff0fe
    52d8:	03050106 	movweq	r0, #20742	; 0x5106
    52dc:	13052f06 	movwne	r2, #24326	; 0x5f06
    52e0:	08050106 	stmdaeq	r5, {r1, r2, r8}
    52e4:	06020520 	streq	r0, [r2], -r0, lsr #10
    52e8:	06050524 	streq	r0, [r5], -r4, lsr #10
    52ec:	06030501 	streq	r0, [r3], -r1, lsl #10
    52f0:	06080521 	streq	r0, [r8], -r1, lsr #10
    52f4:	06020501 	streq	r0, [r2], -r1, lsl #10
    52f8:	053d593e 	ldreq	r5, [sp, #-2366]!	; 0xfffff6c2
    52fc:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    5300:	052f0602 	streq	r0, [pc, #-1538]!	; 4d06 <__aeabi_lmul+0x402>
    5304:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5308:	052f0603 	streq	r0, [pc, #-1539]!	; 4d0d <__aeabi_lmul+0x409>
    530c:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    5310:	03052201 	movweq	r2, #20993	; 0x5201
    5314:	2e750306 	cdpcs	3, 7, cr0, cr5, cr6, {0}
    5318:	01060a05 	tsteq	r6, r5, lsl #20
    531c:	024a6e03 	subeq	r6, sl, #3, 28	; 0x30
    5320:	01010007 	tsteq	r1, r7
    5324:	000001a1 	andeq	r0, r0, r1, lsr #3
    5328:	01400003 	cmpeq	r0, r3
    532c:	01020000 	mrseq	r0, (UNDEF: 2)
    5330:	000d0efb 	strdeq	r0, [sp], -fp
    5334:	01010101 	tsteq	r1, r1, lsl #2
    5338:	01000000 	mrseq	r0, (UNDEF: 0)
    533c:	2f010000 	svccs	0x00010000
    5340:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5344:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    5348:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    534c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5350:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5354:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5358:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    535c:	4349502f 	movtmi	r5, #36911	; 0x902f
    5360:	502f534f 	eorpl	r5, pc, pc, asr #6
    5364:	534f6369 	movtpl	r6, #62313	; 0xf369
    5368:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    536c:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    5370:	61697265 	cmnvs	r9, r5, ror #4
    5374:	752f006c 	strvc	r0, [pc, #-108]!	; 5310 <patchGenfskRfe+0x270>
    5378:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 51b4 <patchGenfskRfe+0x114>
    537c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    5380:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    5384:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5388:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    538c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5390:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    5394:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    5398:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    539c:	2f006564 	svccs	0x00006564
    53a0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    53a4:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    53a8:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    53ac:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    53b0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    53b4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    53b8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    53bc:	4349502f 	movtmi	r5, #36911	; 0x902f
    53c0:	502f534f 	eorpl	r5, pc, pc, asr #6
    53c4:	534f6369 	movtpl	r6, #62313	; 0xf369
    53c8:	3143432f 	cmpcc	r3, pc, lsr #6
    53cc:	00585833 	subseq	r5, r8, r3, lsr r8
    53d0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 531c <patchGenfskRfe+0x27c>
    53d4:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    53d8:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    53dc:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    53e0:	6f746b73 	svcvs	0x00746b73
    53e4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    53e8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    53ec:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    53f0:	2f534f43 	svccs	0x00534f43
    53f4:	4f636950 	svcmi	0x00636950
    53f8:	73000053 	movwvc	r0, #83	; 0x53
    53fc:	6f5f7265 	svcvs	0x005f7265
    5400:	2e667475 	mcrcs	4, 3, r7, cr6, cr5, {3}
    5404:	00010063 	andeq	r0, r1, r3, rrx
    5408:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    540c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5410:	00020068 	andeq	r0, r2, r8, rrx
    5414:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5418:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    541c:	00020068 	andeq	r0, r2, r8, rrx
    5420:	63726100 	cmnvs	r2, #0, 2
    5424:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5428:	6d000003 	stcvs	0, cr0, [r0, #-12]
    542c:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    5430:	00030068 	andeq	r0, r3, r8, rrx
    5434:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    5438:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    543c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5440:	62000003 	andvs	r0, r0, #3
    5444:	6f747475 	svcvs	0x00747475
    5448:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    544c:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    5450:	00000300 	andeq	r0, r0, r0, lsl #6
    5454:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5458:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    545c:	3c000004 	stccc	0, cr0, [r0], {4}
    5460:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5464:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    5468:	0000003e 	andeq	r0, r0, lr, lsr r0
    546c:	2c050000 	stccs	0, cr0, [r5], {-0}
    5470:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
    5474:	03000026 	movweq	r0, #38	; 0x26
    5478:	0205010b 	andeq	r0, r5, #-1073741822	; 0xc0000002
    547c:	14131314 	ldrne	r1, [r3], #-788	; 0xfffffcec
    5480:	03062c05 	movweq	r2, #27653	; 0x6c05
    5484:	052e017a 	streq	r0, [lr, #-378]!	; 0xfffffe86
    5488:	0505260e 	streq	r2, [r5, #-1550]	; 0xfffff9f2
    548c:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    5490:	0a033d30 	beq	d4958 <__ccfg+0xb49b0>
    5494:	03020501 	movweq	r0, #9473	; 0x2501
    5498:	0d052e79 	stceq	14, cr2, [r5, #-484]	; 0xfffffe1c
    549c:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    54a0:	0522061e 	streq	r0, [r2, #-1566]!	; 0xfffff9e2
    54a4:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    54a8:	03052e05 	movweq	r2, #24069	; 0x5e05
    54ac:	02053206 	andeq	r3, r5, #1610612736	; 0x60000000
    54b0:	0606054e 	streq	r0, [r6], -lr, asr #10
    54b4:	4a050501 	bmi	1468c0 <__ccfg+0x126918>
    54b8:	21060305 	tstcs	r6, r5, lsl #6
    54bc:	2402053d 	strcs	r0, [r2], #-1341	; 0xfffffac3
    54c0:	13060105 	movwne	r0, #24837	; 0x6105
    54c4:	01000902 	tsteq	r0, r2, lsl #18
    54c8:	0001b201 	andeq	fp, r1, r1, lsl #4
    54cc:	3f000300 	svccc	0x00000300
    54d0:	02000001 	andeq	r0, r0, #1
    54d4:	0d0efb01 	vstreq	d15, [lr, #-4]
    54d8:	01010100 	mrseq	r0, (UNDEF: 17)
    54dc:	00000001 	andeq	r0, r0, r1
    54e0:	01000001 	tsteq	r0, r1
    54e4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5430 <patchGenfskRfe+0x390>
    54e8:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    54ec:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    54f0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    54f4:	6f746b73 	svcvs	0x00746b73
    54f8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    54fc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5500:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5504:	2f534f43 	svccs	0x00534f43
    5508:	4f636950 	svcmi	0x00636950
    550c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    5510:	2f736269 	svccs	0x00736269
    5514:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    5518:	2f006c61 	svccs	0x00006c61
    551c:	2f727375 	svccs	0x00727375
    5520:	2f62696c 	svccs	0x0062696c
    5524:	2f636367 	svccs	0x00636367
    5528:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    552c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5530:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5534:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    5538:	2f312e32 	svccs	0x00312e32
    553c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5540:	00656475 	rsbeq	r6, r5, r5, ror r4
    5544:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5490 <patchGenfskRfe+0x3f0>
    5548:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    554c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    5550:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5554:	6f746b73 	svcvs	0x00746b73
    5558:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    555c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5560:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5564:	2f534f43 	svccs	0x00534f43
    5568:	4f636950 	svcmi	0x00636950
    556c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    5570:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    5574:	6f682f00 	svcvs	0x00682f00
    5578:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    557c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    5580:	442f6e65 	strtmi	r6, [pc], #-3685	; 5588 <patchGenfskRfe+0x4e8>
    5584:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5588:	4f2f706f 	svcmi	0x002f706f
    558c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5590:	502f5445 	eorpl	r5, pc, r5, asr #8
    5594:	534f4349 	movtpl	r4, #62281	; 0xf349
    5598:	6369502f 	cmnvs	r9, #47	; 0x2f
    559c:	0000534f 	andeq	r5, r0, pc, asr #6
    55a0:	5f726573 	svcpl	0x00726573
    55a4:	2e666e69 	cdpcs	14, 6, cr6, cr6, cr9, {3}
    55a8:	00010063 	andeq	r0, r1, r3, rrx
    55ac:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    55b0:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    55b4:	00020068 	andeq	r0, r2, r8, rrx
    55b8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    55bc:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    55c0:	00020068 	andeq	r0, r2, r8, rrx
    55c4:	63726100 	cmnvs	r2, #0, 2
    55c8:	00682e68 	rsbeq	r2, r8, r8, ror #28
    55cc:	6d000003 	stcvs	0, cr0, [r0, #-12]
    55d0:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    55d4:	00030068 	andeq	r0, r3, r8, rrx
    55d8:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    55dc:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    55e0:	00682e73 	rsbeq	r2, r8, r3, ror lr
    55e4:	62000003 	andvs	r0, r0, #3
    55e8:	6f747475 	svcvs	0x00747475
    55ec:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    55f0:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    55f4:	00000300 	andeq	r0, r0, r0, lsl #6
    55f8:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    55fc:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    5600:	3c000004 	stccc	0, cr0, [r0], {4}
    5604:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5608:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    560c:	0000003e 	andeq	r0, r0, lr, lsr r0
    5610:	2d050000 	stccs	0, cr0, [r5, #-0]
    5614:	a8020500 	stmdage	r2, {r8, sl}
    5618:	03000026 	movweq	r0, #38	; 0x26
    561c:	0205010d 	andeq	r0, r5, #1073741827	; 0x40000003
    5620:	05141317 	ldreq	r1, [r4, #-791]	; 0xfffffce9
    5624:	7803062d 	stmdavc	r3, {r0, r2, r3, r5, r9, sl}
    5628:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
    562c:	06020536 			; <UNDEFINED> instruction: 0x06020536
    5630:	06100523 	ldreq	r0, [r0], -r3, lsr #10
    5634:	20050501 	andcs	r0, r5, r1, lsl #10
    5638:	2f060305 	svccs	0x00060305
    563c:	01060f05 	tsteq	r6, r5, lsl #30
    5640:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    5644:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    5648:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    564c:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    5650:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    5654:	3d210605 	stccc	6, cr0, [r1, #-20]!	; 0xffffffec
    5658:	2d160305 	ldccs	3, cr0, [r6, #-20]	; 0xffffffec
    565c:	304f0205 	subcc	r0, pc, r5, lsl #4
    5660:	01060905 	tsteq	r6, r5, lsl #18
    5664:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    5668:	060c053d 			; <UNDEFINED> instruction: 0x060c053d
    566c:	06020501 	streq	r0, [r2], -r1, lsl #10
    5670:	06010530 			; <UNDEFINED> instruction: 0x06010530
    5674:	030a0513 	movweq	r0, #42259	; 0xa513
    5678:	06026669 	streq	r6, [r2], -r9, ror #12
    567c:	ae010100 	adfges	f0, f1, f0
    5680:	0300000c 	movweq	r0, #12
    5684:	00029e00 	andeq	r9, r2, r0, lsl #28
    5688:	fb010200 	blx	45e92 <__ccfg+0x25eea>
    568c:	01000d0e 	tsteq	r0, lr, lsl #26
    5690:	00010101 	andeq	r0, r1, r1, lsl #2
    5694:	00010000 	andeq	r0, r1, r0
    5698:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    569c:	2f656d6f 	svccs	0x00656d6f
    56a0:	70657473 	rsbvc	r7, r5, r3, ror r4
    56a4:	2f6e6568 	svccs	0x006e6568
    56a8:	6b736544 	blvs	1cdebc0 <__ccfg+0x1cbec18>
    56ac:	2f706f74 	svccs	0x00706f74
    56b0:	4f534c4f 	svcmi	0x00534c4f
    56b4:	2f54454e 	svccs	0x0054454e
    56b8:	4f434950 	svcmi	0x00434950
    56bc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    56c0:	2f534f63 	svccs	0x00534f63
    56c4:	33314343 	teqcc	r1, #201326593	; 0xc000001
    56c8:	2f005858 	svccs	0x00005858
    56cc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    56d0:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    56d4:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    56d8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    56dc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    56e0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    56e4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    56e8:	4349502f 	movtmi	r5, #36911	; 0x902f
    56ec:	502f534f 	eorpl	r5, pc, pc, asr #6
    56f0:	534f6369 	movtpl	r6, #62313	; 0xf369
    56f4:	3143432f 	cmpcc	r3, pc, lsr #6
    56f8:	2f585833 	svccs	0x00585833
    56fc:	33314343 	teqcc	r1, #201326593	; 0xc000001
    5700:	41575858 	cmpmi	r7, r8, asr r8
    5704:	642f4552 	strtvs	r4, [pc], #-1362	; 570c <patchGenfskRfe+0x66c>
    5708:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    570c:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    5710:	6f682f00 	svcvs	0x00682f00
    5714:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    5718:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    571c:	442f6e65 	strtmi	r6, [pc], #-3685	; 5724 <patchGenfskRfe+0x684>
    5720:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5724:	4f2f706f 	svcmi	0x002f706f
    5728:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    572c:	502f5445 	eorpl	r5, pc, r5, asr #8
    5730:	534f4349 	movtpl	r4, #62281	; 0xf349
    5734:	6369502f 	cmnvs	r9, #47	; 0x2f
    5738:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    573c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    5740:	43432f58 	movtmi	r2, #16216	; 0x3f58
    5744:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    5748:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    574c:	5f66722f 	svcpl	0x0066722f
    5750:	63746170 	cmnvs	r4, #112, 2
    5754:	00736568 	rsbseq	r6, r3, r8, ror #10
    5758:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    575c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5760:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    5764:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    5768:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    576c:	61652d65 	cmnvs	r5, r5, ror #26
    5770:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    5774:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    5778:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    577c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5780:	73752f00 	cmnvc	r5, #0, 30
    5784:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    5788:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    578c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    5790:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5794:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    5798:	6f682f00 	svcvs	0x00682f00
    579c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    57a0:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    57a4:	442f6e65 	strtmi	r6, [pc], #-3685	; 57ac <patchImageGenfsk+0x58>
    57a8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    57ac:	4f2f706f 	svcmi	0x002f706f
    57b0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    57b4:	502f5445 	eorpl	r5, pc, r5, asr #8
    57b8:	534f4349 	movtpl	r4, #62281	; 0xf349
    57bc:	6369502f 	cmnvs	r9, #47	; 0x2f
    57c0:	2f00534f 	svccs	0x0000534f
    57c4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    57c8:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    57cc:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    57d0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    57d4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    57d8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    57dc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    57e0:	4349502f 	movtmi	r5, #36911	; 0x902f
    57e4:	502f534f 	eorpl	r5, pc, pc, asr #6
    57e8:	534f6369 	movtpl	r6, #62313	; 0xf369
    57ec:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    57f0:	006c656e 	rsbeq	r6, ip, lr, ror #10
    57f4:	70667200 	rsbvc	r7, r6, r0, lsl #4
    57f8:	2e706f72 	mrccs	15, 3, r6, cr0, cr2, {3}
    57fc:	00010063 	andeq	r0, r1, r3, rrx
    5800:	63667200 	cmnvs	r6, #0, 4
    5804:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5808:	70670000 	rsbvc	r0, r7, r0
    580c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    5810:	00000200 	andeq	r0, r0, r0, lsl #4
    5814:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    5818:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    581c:	6570635f 	ldrbvs	r6, [r0, #-863]!	; 0xfffffca1
    5820:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
    5824:	2e6b7366 	cdpcs	3, 6, cr7, cr11, cr6, {3}
    5828:	00030068 	andeq	r0, r3, r8, rrx
    582c:	5f667200 	svcpl	0x00667200
    5830:	63746170 	cmnvs	r4, #112, 2
    5834:	66725f68 	ldrbtvs	r5, [r2], -r8, ror #30
    5838:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    583c:	6b73666e 	blvs	1cdf1fc <__ccfg+0x1cbf254>
    5840:	0300682e 	movweq	r6, #2094	; 0x82e
    5844:	74730000 	ldrbtvc	r0, [r3], #-0
    5848:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    584c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    5850:	74730000 	ldrbtvc	r0, [r3], #-0
    5854:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    5858:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    585c:	745f0000 	ldrbvc	r0, [pc], #-0	; 5864 <patchImageGenfsk+0x110>
    5860:	73657079 	cmnvc	r5, #121	; 0x79
    5864:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    5868:	65720000 	ldrbvs	r0, [r2, #-0]!
    586c:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    5870:	00050068 	andeq	r0, r5, r8, rrx
    5874:	636f6c00 	cmnvs	pc, #0, 24
    5878:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    587c:	72000005 	andvc	r0, r0, #5
    5880:	616d5f66 	cmnvs	sp, r6, ror #30
    5884:	6f626c69 	svcvs	0x00626c69
    5888:	00682e78 	rsbeq	r2, r8, r8, ror lr
    588c:	72000002 	andvc	r0, r0, #2
    5890:	6f635f66 	svcvs	0x00635f66
    5894:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
    5898:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    589c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    58a0:	66720000 	ldrbtvs	r0, [r2], -r0
    58a4:	6f72705f 	svcvs	0x0072705f
    58a8:	6d635f70 	stclvs	15, cr5, [r3, #-448]!	; 0xfffffe40
    58ac:	00682e64 	rsbeq	r2, r8, r4, ror #28
    58b0:	72000002 	andvc	r0, r0, #2
    58b4:	61645f66 	cmnvs	r4, r6, ror #30
    58b8:	655f6174 	ldrbvs	r6, [pc, #-372]	; 574c <patchGenfskRfe+0x6ac>
    58bc:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    58c0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    58c4:	72610000 	rsbvc	r0, r1, #0
    58c8:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    58cc:	00000100 	andeq	r0, r0, r0, lsl #2
    58d0:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    58d4:	0100682e 	tsteq	r0, lr, lsr #16
    58d8:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    58dc:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    58e0:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    58e4:	00000100 	andeq	r0, r0, r0, lsl #2
    58e8:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    58ec:	5f736e6f 	svcpl	0x00736e6f
    58f0:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    58f4:	00010068 	andeq	r0, r1, r8, rrx
    58f8:	73797300 	cmnvc	r9, #0, 6
    58fc:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    5900:	00000600 	andeq	r0, r0, r0, lsl #12
    5904:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    5908:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    590c:	00000700 	andeq	r0, r0, r0, lsl #14
    5910:	72616d73 	rsbvc	r6, r1, #7360	; 0x1cc0
    5914:	5f667274 	svcpl	0x00667274
    5918:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
    591c:	73676e69 	cmnvc	r7, #1680	; 0x690
    5920:	0100682e 	tsteq	r0, lr, lsr #16
    5924:	05000000 	streq	r0, [r0, #-0]
    5928:	02050017 	andeq	r0, r5, #23
    592c:	00002708 	andeq	r2, r0, r8, lsl #14
    5930:	01039f03 	tsteq	r3, r3, lsl #30
    5934:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    5938:	05140638 	ldreq	r0, [r4, #-1592]	; 0xfffff9c8
    593c:	38052026 	stmdacc	r5, {r1, r2, r5, sp}
    5940:	3c260520 	cfstr32cc	mvfx0, [r6], #-128	; 0xffffff80
    5944:	051e1505 	ldreq	r1, [lr, #-1285]	; 0xfffffafb
    5948:	08023101 	stmdaeq	r2, {r0, r8, ip, sp}
    594c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5950:	0205002a 	andeq	r0, r5, #42	; 0x2a
    5954:	00002728 	andeq	r2, r0, r8, lsr #14
    5958:	0106c903 	tsteq	r6, r3, lsl #18
    595c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    5960:	0e062a05 	vmlaeq.f32	s4, s12, s10
    5964:	06040520 	streq	r0, [r4], -r0, lsr #10
    5968:	17054408 	strne	r4, [r5, -r8, lsl #8]
    596c:	0c050106 	stfeqs	f0, [r5], {6}
    5970:	03080520 	movweq	r0, #34080	; 0x8520
    5974:	04053c20 	streq	r3, [r5], #-3104	; 0xfffff3e0
    5978:	64032106 	strvs	r2, [r3], #-262	; 0xfffffefa
    597c:	06060520 	streq	r0, [r6], -r0, lsr #10
    5980:	05587503 	ldrbeq	r7, [r8, #-1283]	; 0xfffffafd
    5984:	0d030604 	stceq	6, cr0, [r3, #-16]
    5988:	9e010120 	adflssp	f0, f1, f0
    598c:	054a582e 	strbeq	r5, [sl, #-2094]	; 0xfffff7d2
    5990:	fa030601 	blx	c719c <__ccfg+0xa71f4>
    5994:	04050100 	streq	r0, [r5], #-256	; 0xffffff00
    5998:	7f900306 	svcvc	0x00900306
    599c:	0b055d20 	bleq	15ce24 <__ccfg+0x13ce7c>
    59a0:	20200106 	eorcs	r0, r0, r6, lsl #2
    59a4:	2f060405 	svccs	0x00060405
    59a8:	03060605 	movweq	r0, #26117	; 0x6605
    59ac:	04050163 	streq	r0, [r5], #-355	; 0xfffffe9d
    59b0:	2e210306 	cdpcs	3, 2, cr0, cr1, cr6, {0}
    59b4:	01060a05 	tsteq	r6, r5, lsl #20
    59b8:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    59bc:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    59c0:	00e20302 	rsceq	r0, r2, r2, lsl #6
    59c4:	06050501 	streq	r0, [r5], -r1, lsl #10
    59c8:	06030501 	streq	r0, [r3], -r1, lsl #10
    59cc:	0f02052f 	svceq	0x0002052f
    59d0:	15060805 	strne	r0, [r6, #-2053]	; 0xfffff7fb
    59d4:	051d0905 	ldreq	r0, [sp, #-2309]	; 0xfffff6fb
    59d8:	a4030604 	strge	r0, [r3], #-1540	; 0xfffff9fc
    59dc:	1105207f 	tstne	r5, pc, ror r0
    59e0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    59e4:	05054106 	streq	r4, [r5, #-262]	; 0xfffffefa
    59e8:	07051306 	streq	r1, [r5, -r6, lsl #6]
    59ec:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
    59f0:	04055b21 	streq	r5, [r5], #-2849	; 0xfffff4df
    59f4:	06070552 			; <UNDEFINED> instruction: 0x06070552
    59f8:	06050501 	streq	r0, [r5], -r1, lsl #10
    59fc:	06010122 	streq	r0, [r1], -r2, lsr #2
    5a00:	054a065a 	strbeq	r0, [sl, #-1626]	; 0xfffff9a6
    5a04:	0535060d 	ldreq	r0, [r5, #-1549]!	; 0xfffff9f3
    5a08:	05052120 	streq	r2, [r5, #-288]	; 0xfffffee0
    5a0c:	11053c06 	tstne	r5, r6, lsl #24
    5a10:	08051306 	stmdaeq	r5, {r1, r2, r8, r9, ip}
    5a14:	061b052d 	ldreq	r0, [fp], -sp, lsr #10
    5a18:	061e052d 	ldreq	r0, [lr], -sp, lsr #10
    5a1c:	06120501 	ldreq	r0, [r2], -r1, lsl #10
    5a20:	06040520 	streq	r0, [r4], -r0, lsr #10
    5a24:	10030601 	andne	r0, r3, r1, lsl #12
    5a28:	062e053c 			; <UNDEFINED> instruction: 0x062e053c
    5a2c:	21140501 	tstcs	r4, r1, lsl #10
    5a30:	051f2e05 	ldreq	r2, [pc, #-3589]	; 4c33 <__aeabi_lmul+0x32f>
    5a34:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    5a38:	0501062e 	streq	r0, [r1, #-1582]	; 0xfffff9d2
    5a3c:	04052024 	streq	r2, [r5], #-36	; 0xffffffdc
    5a40:	24594b06 	ldrbcs	r4, [r9], #-2822	; 0xfffff4fa
    5a44:	01060a05 	tsteq	r6, r5, lsl #20
    5a48:	0e030805 	cdpeq	8, 0, cr0, cr3, cr5, {0}
    5a4c:	06040520 	streq	r0, [r4], -r0, lsr #10
    5a50:	20750322 	rsbscs	r0, r5, r2, lsr #6
    5a54:	01060c05 	tsteq	r6, r5, lsl #24
    5a58:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
    5a5c:	0520490c 	streq	r4, [r0, #-2316]!	; 0xfffff6f4
    5a60:	03300604 	teqeq	r0, #4, 12	; 0x400000
    5a64:	032f0111 			; <UNDEFINED> instruction: 0x032f0111
    5a68:	0a055875 	beq	15bc44 <__ccfg+0x13bc9c>
    5a6c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5a70:	0a053606 	beq	153290 <__ccfg+0x1332e8>
    5a74:	06050106 	streq	r0, [r5], -r6, lsl #2
    5a78:	1f0a0521 	svcne	0x000a0521
    5a7c:	3c20202e 	stccc	0, cr2, [r0], #-184	; 0xffffff48
    5a80:	03060405 	movweq	r0, #25605	; 0x6405
    5a84:	0d056609 	stceq	6, cr6, [r5, #-36]	; 0xffffffdc
    5a88:	20200106 	eorcs	r0, r0, r6, lsl #2
    5a8c:	30060405 	andcc	r0, r6, r5, lsl #8
    5a90:	1e060d05 	cdpne	13, 0, cr0, cr6, cr5, {0}
    5a94:	42060405 	andmi	r0, r6, #83886080	; 0x5000000
    5a98:	01001f02 	tsteq	r0, r2, lsl #30
    5a9c:	00230501 	eoreq	r0, r3, r1, lsl #10
    5aa0:	28b80205 	ldmcs	r8!, {r0, r2, r9}
    5aa4:	c4030000 	strgt	r0, [r3], #-0
    5aa8:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    5aac:	23051517 	movwcs	r1, #21783	; 0x5517
    5ab0:	01780306 	cmneq	r8, r6, lsl #6
    5ab4:	06020520 	streq	r0, [r2], -r0, lsr #10
    5ab8:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
    5abc:	0e051303 	cdpeq	3, 0, cr1, cr5, cr3, {0}
    5ac0:	0c050106 	stfeqs	f0, [r5], {6}
    5ac4:	2006053c 	andcs	r0, r6, ip, lsr r5
    5ac8:	31060305 	tstcc	r6, r5, lsl #6
    5acc:	01060605 	tsteq	r6, r5, lsl #12
    5ad0:	30060405 	andcc	r0, r6, r5, lsl #8
    5ad4:	03052606 	movweq	r2, #22022	; 0x5606
    5ad8:	06053a06 	streq	r3, [r5], -r6, lsl #20
    5adc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5ae0:	054b2f06 	strbeq	r2, [fp, #-3846]	; 0xfffff0fa
    5ae4:	08053103 	stmdaeq	r5, {r0, r1, r8, ip, sp}
    5ae8:	053c7103 	ldreq	r7, [ip, #-259]!	; 0xfffffefd
    5aec:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    5af0:	20100301 	andscs	r0, r0, r1, lsl #6
    5af4:	01000902 	tsteq	r0, r2, lsl #18
    5af8:	00160501 	andseq	r0, r6, r1, lsl #10
    5afc:	29000205 	stmdbcs	r0, {r0, r2, r9}
    5b00:	94030000 	strls	r0, [r3], #-0
    5b04:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    5b08:	06160516 			; <UNDEFINED> instruction: 0x06160516
    5b0c:	240e050e 	strcs	r0, [lr], #-1294	; 0xfffffaf2
    5b10:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    5b14:	3d3f0602 	ldccc	6, cr0, [pc, #-8]!	; 5b14 <__exidx_end+0xf0>
    5b18:	4b060105 	blmi	185f34 <__ccfg+0x165f8c>
    5b1c:	01000602 	tsteq	r0, r2, lsl #12
    5b20:	00170501 	andseq	r0, r7, r1, lsl #10
    5b24:	29240205 	stmdbcs	r4!, {r0, r2, r9}
    5b28:	e0030000 	and	r0, r3, r0
    5b2c:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    5b30:	06170516 			; <UNDEFINED> instruction: 0x06170516
    5b34:	240e050e 	strcs	r0, [lr], #-1294	; 0xfffffaf2
    5b38:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    5b3c:	043f0602 	ldrteq	r0, [pc], #-1538	; 5b44 <__exidx_end+0x120>
    5b40:	06350502 	ldrteq	r0, [r5], -r2, lsl #10
    5b44:	017eb903 	cmneq	lr, r3, lsl #18
    5b48:	02050104 	andeq	r0, r5, #4, 2
    5b4c:	2001c703 	andcs	ip, r1, r3, lsl #14
    5b50:	303f5a06 	eorscc	r5, pc, r6, lsl #20
    5b54:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    5b58:	017eb203 	cmneq	lr, r3, lsl #4
    5b5c:	01063505 	tsteq	r6, r5, lsl #10
    5b60:	02050104 	andeq	r0, r5, #4, 2
    5b64:	2001d003 	andcs	sp, r1, r3
    5b68:	35050204 	strcc	r0, [r5, #-516]	; 0xfffffdfc
    5b6c:	207eb003 	rsbscs	fp, lr, r3
    5b70:	02050104 	andeq	r0, r5, #4, 2
    5b74:	01d00306 	bicseq	r0, r0, r6, lsl #6
    5b78:	48053120 	stmdami	r5, {r5, r8, ip, sp}
    5b7c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5b80:	01313106 	teqeq	r1, r6, lsl #2
    5b84:	29050304 	stmdbcs	r5, {r2, r8, r9}
    5b88:	05015f03 	streq	r5, [r1, #-3843]	; 0xfffff0fd
    5b8c:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    5b90:	01040106 	tsteq	r4, r6, lsl #2
    5b94:	03060205 	movweq	r0, #25093	; 0x6205
    5b98:	03044a1c 	movweq	r4, #18972	; 0x4a1c
    5b9c:	5f032905 	svcpl	0x00032905
    5ba0:	17050501 	strne	r0, [r5, -r1, lsl #10]
    5ba4:	01062d05 	tsteq	r6, r5, lsl #26
    5ba8:	02050104 	andeq	r0, r5, #4, 2
    5bac:	2e1c0306 	cdpcs	3, 1, cr0, cr12, cr6, {0}
    5bb0:	01014b14 	tsteq	r1, r4, lsl fp
    5bb4:	05010101 	streq	r0, [r1, #-257]	; 0xfffffeff
    5bb8:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    5bbc:	0101000b 	tsteq	r1, fp
    5bc0:	05000d05 	streq	r0, [r0, #-3333]	; 0xfffff2fb
    5bc4:	00298002 	eoreq	r8, r9, r2
    5bc8:	01e10300 	mvneq	r0, r0, lsl #6
    5bcc:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    5bd0:	054f0602 	strbeq	r0, [pc, #-1538]	; 55d6 <patchGenfskRfe+0x536>
    5bd4:	0a051303 	beq	14a7e8 <__ccfg+0x12a840>
    5bd8:	06050106 	streq	r0, [r5], -r6, lsl #2
    5bdc:	06030520 	streq	r0, [r3], -r0, lsr #10
    5be0:	06060531 			; <UNDEFINED> instruction: 0x06060531
    5be4:	06040501 	streq	r0, [r4], -r1, lsl #10
    5be8:	03055b30 	movweq	r5, #23344	; 0x5b30
    5bec:	0308054c 	movweq	r0, #34124	; 0x854c
    5bf0:	06053c75 			; <UNDEFINED> instruction: 0x06053c75
    5bf4:	01051306 	tsteq	r5, r6, lsl #6
    5bf8:	02200c03 	eoreq	r0, r0, #768	; 0x300
    5bfc:	01010005 	tsteq	r1, r5
    5c00:	05000d05 	streq	r0, [r0, #-3333]	; 0xfffff2fb
    5c04:	0029b802 	eoreq	fp, r9, r2, lsl #16
    5c08:	01fe0300 	mvnseq	r0, r0, lsl #6
    5c0c:	03020501 	movweq	r0, #9473	; 0x2501
    5c10:	04010109 	streq	r0, [r1], #-265	; 0xfffffef7
    5c14:	03290503 			; <UNDEFINED> instruction: 0x03290503
    5c18:	0505011b 	streq	r0, [r5, #-283]	; 0xfffffee5
    5c1c:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    5c20:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5c24:	3c57030d 	mrrccc	3, 0, r0, r7, cr13
    5c28:	2d050304 	stccs	3, cr0, [r5, #-16]
    5c2c:	042e2903 	strteq	r2, [lr], #-2307	; 0xfffff6fd
    5c30:	06020501 	streq	r0, [r2], -r1, lsl #10
    5c34:	04206003 	strteq	r6, [r0], #-3
    5c38:	03290503 			; <UNDEFINED> instruction: 0x03290503
    5c3c:	0505011b 	streq	r0, [r5, #-283]	; 0xfffffee5
    5c40:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    5c44:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5c48:	60030602 	andvs	r0, r3, r2, lsl #12
    5c4c:	052f192e 	streq	r1, [pc, #-2350]!	; 5326 <patchGenfskRfe+0x286>
    5c50:	1c050107 	stfnes	f0, [r5], {7}
    5c54:	061e053c 			; <UNDEFINED> instruction: 0x061e053c
    5c58:	2e020501 	cfsh32cs	mvfx0, mvfx2, #1
    5c5c:	48053106 	stmdami	r5, {r1, r2, r8, ip, sp}
    5c60:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5c64:	1c480532 	cfstr64ne	mvdx0, [r8], {50}	; 0x32
    5c68:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    5c6c:	05020431 	streq	r0, [r2, #-1073]	; 0xfffffbcf
    5c70:	7ee40305 	cdpvc	3, 14, cr0, cr4, cr5, {0}
    5c74:	06350501 	ldrteq	r0, [r5], -r1, lsl #10
    5c78:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5c7c:	019f0302 	orrseq	r0, pc, r2, lsl #6
    5c80:	0502043c 	streq	r0, [r2, #-1084]	; 0xfffffbc4
    5c84:	7ee10335 	mcrvc	3, 7, r0, cr1, cr5, {1}
    5c88:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    5c8c:	9f030602 	svcls	0x00030602
    5c90:	04322001 	ldrteq	r2, [r2], #-1
    5c94:	03040504 	movweq	r0, #17668	; 0x4504
    5c98:	73030110 	movwvc	r0, #12560	; 0x3110
    5c9c:	03010501 	movweq	r0, #5377	; 0x1501
    5ca0:	0405016b 	streq	r0, [r5], #-363	; 0xfffffe95
    5ca4:	03011603 	movweq	r1, #5635	; 0x1603
    5ca8:	03150161 	tsteq	r5, #1073741848	; 0x40000018
    5cac:	6d03661d 	stcvs	6, cr6, [r3, #-116]	; 0xffffff8c
    5cb0:	05151301 	ldreq	r1, [r5, #-769]	; 0xfffffcff
    5cb4:	04010612 	streq	r0, [r1], #-1554	; 0xfffff9ee
    5cb8:	03040505 	movweq	r0, #17669	; 0x4505
    5cbc:	042e01f1 	strteq	r0, [lr], #-497	; 0xfffffe0f
    5cc0:	03120504 	tsteq	r2, #4, 10	; 0x1000000
    5cc4:	05207e8f 	streq	r7, [r0, #-3727]!	; 0xfffff171
    5cc8:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    5ccc:	3d130612 	ldccc	6, cr0, [r3, #-72]	; 0xffffffb8
    5cd0:	2f3d1305 	svccs	0x003d1305
    5cd4:	052f1205 	streq	r1, [pc, #-517]!	; 5ad7 <__exidx_end+0xb3>
    5cd8:	12053e11 	andne	r3, r5, #272	; 0x110
    5cdc:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
    5ce0:	132f0604 			; <UNDEFINED> instruction: 0x132f0604
    5ce4:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    5ce8:	01061105 	tsteq	r6, r5, lsl #2
    5cec:	1c050504 	cfstr32ne	mvfx0, [r5], {4}
    5cf0:	2001d403 	andcs	sp, r1, r3, lsl #8
    5cf4:	051f1405 	ldreq	r1, [pc, #-1029]	; 58f7 <patchImageGenfsk+0x1a3>
    5cf8:	05250604 	streq	r0, [r5, #-1540]!	; 0xfffff9fc
    5cfc:	0a051307 	beq	14a920 <__ccfg+0x12a978>
    5d00:	051b1806 	ldreq	r1, [fp, #-2054]	; 0xfffff7fa
    5d04:	052f0607 	streq	r0, [pc, #-1543]!	; 5705 <patchGenfskRfe+0x665>
    5d08:	0513060a 	ldreq	r0, [r3, #-1546]	; 0xfffff9f6
    5d0c:	052f0607 	streq	r0, [pc, #-1543]!	; 570d <patchGenfskRfe+0x66d>
    5d10:	0513060a 	ldreq	r0, [r3, #-1546]	; 0xfffff9f6
    5d14:	132f0607 			; <UNDEFINED> instruction: 0x132f0607
    5d18:	01060a05 	tsteq	r6, r5, lsl #20
    5d1c:	2f210d05 	svccs	0x00210d05
    5d20:	21212f2f 			; <UNDEFINED> instruction: 0x21212f2f
    5d24:	30040521 	andcc	r0, r4, r1, lsr #10
    5d28:	03060705 	movweq	r0, #26373	; 0x6705
    5d2c:	13133c78 	tstne	r3, #120, 24	; 0x7800
    5d30:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    5d34:	060d0513 			; <UNDEFINED> instruction: 0x060d0513
    5d38:	060c052e 	streq	r0, [ip], -lr, lsr #10
    5d3c:	06040521 	streq	r0, [r4], -r1, lsr #10
    5d40:	13220601 			; <UNDEFINED> instruction: 0x13220601
    5d44:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    5d48:	01060a05 	tsteq	r6, r5, lsl #20
    5d4c:	09050104 	stmdbeq	r5, {r2, r8}
    5d50:	207e9503 	rsbscs	r9, lr, r3, lsl #10
    5d54:	0a050504 	beq	14716c <__ccfg+0x1271c4>
    5d58:	2001eb03 	andcs	lr, r1, r3, lsl #22
    5d5c:	21060405 	tstcs	r6, r5, lsl #8
    5d60:	01060a05 	tsteq	r6, r5, lsl #20
    5d64:	2f060405 	svccs	0x00060405
    5d68:	01060a05 	tsteq	r6, r5, lsl #20
    5d6c:	2f060405 	svccs	0x00060405
    5d70:	01060a05 	tsteq	r6, r5, lsl #20
    5d74:	2f060405 	svccs	0x00060405
    5d78:	01060a05 	tsteq	r6, r5, lsl #20
    5d7c:	09050104 	stmdbeq	r5, {r2, r8}
    5d80:	7e910306 	cdpvc	3, 9, cr0, cr1, cr6, {0}
    5d84:	3602052e 	strcc	r0, [r2], -lr, lsr #10
    5d88:	053f0905 	ldreq	r0, [pc, #-2309]!	; 548b <patchGenfskRfe+0x3eb>
    5d8c:	3c120302 	ldccc	3, cr0, [r2], {2}
    5d90:	3d435c3e 	stclcc	12, cr5, [r3, #-248]	; 0xffffff08
    5d94:	2506135a 	strcs	r1, [r6, #-858]	; 0xfffffca6
    5d98:	0569061b 	strbeq	r0, [r9, #-1563]!	; 0xfffff9e5
    5d9c:	05010630 	streq	r0, [r1, #-1584]	; 0xfffff9d0
    5da0:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    5da4:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
    5da8:	052f0602 	streq	r0, [pc, #-1538]!	; 57ae <patchImageGenfsk+0x5a>
    5dac:	051f062d 	ldreq	r0, [pc, #-1581]	; 5787 <patchImageGenfsk+0x33>
    5db0:	01052102 	tsteq	r5, r2, lsl #2
    5db4:	03020528 	movweq	r0, #9512	; 0x2528
    5db8:	33022e78 	movwcc	r2, #11896	; 0x2e78
    5dbc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5dc0:	0205001e 	andeq	r0, r5, #30
    5dc4:	00002b38 	andeq	r2, r0, r8, lsr fp
    5dc8:	0103b403 	tsteq	r3, r3, lsl #8
    5dcc:	13140205 	tstne	r4, #1342177280	; 0x50000000
    5dd0:	04010903 	streq	r0, [r1], #-2307	; 0xfffff6fd
    5dd4:	03030502 	movweq	r0, #13570	; 0x3502
    5dd8:	04017dee 	streq	r7, [r1], #-3566	; 0xfffff212
    5ddc:	061e0501 	ldreq	r0, [lr], -r1, lsl #10
    5de0:	01028603 	tsteq	r2, r3, lsl #12
    5de4:	30050204 	andcc	r0, r5, r4, lsl #4
    5de8:	2e7dfa03 	vaddcs.f32	s31, s26, s6
    5dec:	057b3205 	ldrbeq	r3, [fp, #-517]!	; 0xfffffdfb
    5df0:	05290603 	streq	r0, [r9, #-1539]!	; 0xfffff9fd
    5df4:	32051705 	andcc	r1, r5, #1310720	; 0x140000
    5df8:	09050106 	stmdbeq	r5, {r1, r2, r8}
    5dfc:	0a052106 	beq	14e21c <__ccfg+0x12e274>
    5e00:	03050106 	movweq	r0, #20742	; 0x5106
    5e04:	04330620 	ldrteq	r0, [r3], #-1568	; 0xfffff9e0
    5e08:	060a0501 	streq	r0, [sl], -r1, lsl #10
    5e0c:	01028b03 	tsteq	r2, r3, lsl #22
    5e10:	30050204 	andcc	r0, r5, r4, lsl #4
    5e14:	207df503 	rsbscs	pc, sp, r3, lsl #10
    5e18:	05050104 	streq	r0, [r5, #-260]	; 0xfffffefc
    5e1c:	20029e03 	andcs	r9, r2, r3, lsl #28
    5e20:	30050204 	andcc	r0, r5, r4, lsl #4
    5e24:	207de203 	rsbscs	lr, sp, r3, lsl #4
    5e28:	2d050104 	stfcss	f0, [r5, #-16]
    5e2c:	20029103 	andcs	r9, r2, r3, lsl #2
    5e30:	30050204 	andcc	r0, r5, r4, lsl #4
    5e34:	2e7def03 	cdpcs	15, 7, cr14, cr13, cr3, {0}
    5e38:	02050104 	andeq	r0, r5, #4, 2
    5e3c:	028b0306 	addeq	r0, fp, #402653184	; 0x18000000
    5e40:	06270558 			; <UNDEFINED> instruction: 0x06270558
    5e44:	03050501 	movweq	r0, #21761	; 0x5501
    5e48:	0a05200f 	beq	14de8c <__ccfg+0x12dee4>
    5e4c:	052e7103 	streq	r7, [lr, #-259]!	; 0xfffffefd
    5e50:	052f0606 	streq	r0, [pc, #-1542]!	; 5852 <patchImageGenfsk+0xfe>
    5e54:	06051303 	streq	r1, [r5], -r3, lsl #6
    5e58:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5e5c:	01013d06 	tsteq	r1, r6, lsl #26
    5e60:	06190513 			; <UNDEFINED> instruction: 0x06190513
    5e64:	200d0514 	andcs	r0, sp, r4, lsl r5
    5e68:	05201d05 	streq	r1, [r0, #-3333]!	; 0xfffff2fb
    5e6c:	06052007 	streq	r2, [r5], -r7
    5e70:	0604051e 			; <UNDEFINED> instruction: 0x0604051e
    5e74:	06070530 			; <UNDEFINED> instruction: 0x06070530
    5e78:	20210501 	eorcs	r0, r1, r1, lsl #10
    5e7c:	054a3705 	strbeq	r3, [sl, #-1797]	; 0xfffff8fb
    5e80:	053f0605 	ldreq	r0, [pc, #-1541]!	; 5883 <patchImageGenfsk+0x12f>
    5e84:	05160615 	ldreq	r0, [r6, #-1557]	; 0xfffff9eb
    5e88:	05052a08 	streq	r2, [r5, #-2568]	; 0xfffff5f8
    5e8c:	1f052406 	svcne	0x00052406
    5e90:	13050106 	movwne	r0, #20742	; 0x5106
    5e94:	201f0520 	andscs	r0, pc, r0, lsr #10
    5e98:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
    5e9c:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    5ea0:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    5ea4:	052f0605 	streq	r0, [pc, #-1541]!	; 58a7 <patchImageGenfsk+0x153>
    5ea8:	0f056e04 	svceq	0x00056e04
    5eac:	13050106 	movwne	r0, #20742	; 0x5106
    5eb0:	2e6a0306 	cdpcs	3, 6, cr0, cr10, cr6, {0}
    5eb4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5eb8:	05110602 	ldreq	r0, [r1, #-1538]	; 0xfffff9fe
    5ebc:	05052f1b 	streq	r2, [r5, #-3867]	; 0xfffff0e5
    5ec0:	3c120306 	ldccc	3, cr0, [r2], {6}
    5ec4:	0a030205 	beq	c66e0 <__ccfg+0xa6738>
    5ec8:	0605054a 	streq	r0, [r5], -sl, asr #10
    5ecc:	06030501 	streq	r0, [r3], -r1, lsl #10
    5ed0:	14010121 	strne	r0, [r1], #-289	; 0xfffffedf
    5ed4:	01050101 	tsteq	r5, r1, lsl #2
    5ed8:	03053106 	movweq	r3, #20742	; 0x5106
    5edc:	6901052b 	stmdbvs	r1, {r0, r1, r3, r5, r8, sl}
    5ee0:	01001302 	tsteq	r0, r2, lsl #6
    5ee4:	00010501 	andeq	r0, r1, r1, lsl #10
    5ee8:	2c080205 	sfmcs	f0, 4, [r8], {5}
    5eec:	8c030000 	stchi	0, cr0, [r3], {-0}
    5ef0:	06010104 	streq	r0, [r1], -r4, lsl #2
    5ef4:	0603052e 	streq	r0, [r3], -lr, lsr #10
    5ef8:	05820a03 	streq	r0, [r2, #2563]	; 0xa03
    5efc:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    5f00:	04052006 	streq	r2, [r5], #-6
    5f04:	05304c06 	ldreq	r4, [r0, #-3078]!	; 0xfffff3fa
    5f08:	0e054f03 	cdpeq	15, 0, cr4, cr5, cr3, {0}
    5f0c:	06050106 	streq	r0, [r5], -r6, lsl #2
    5f10:	06040520 	streq	r0, [r4], -r0, lsr #10
    5f14:	0607054b 	streq	r0, [r7], -fp, asr #10
    5f18:	06050501 	streq	r0, [r5], -r1, lsl #10
    5f1c:	36030521 	strcc	r0, [r3], -r1, lsr #10
    5f20:	01060e05 	tsteq	r6, r5, lsl #28
    5f24:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    5f28:	053d0604 	ldreq	r0, [sp, #-1540]!	; 0xfffff9fc
    5f2c:	05010624 	streq	r0, [r1, #-1572]	; 0xfffff9dc
    5f30:	0705581b 	smladeq	r5, fp, r8, r5
    5f34:	06050520 	streq	r0, [r5], -r0, lsr #10
    5f38:	05130633 	ldreq	r0, [r3, #-1587]	; 0xfffff9cd
    5f3c:	05051f0c 	streq	r1, [r5, #-3852]	; 0xfffff0f4
    5f40:	1f0c0521 	svcne	0x000c0521
    5f44:	05210505 	streq	r0, [r1, #-1285]!	; 0xfffffafb
    5f48:	05051f0c 	streq	r1, [r5, #-3852]	; 0xfffff0f4
    5f4c:	06012106 	streq	r2, [r1], -r6, lsl #2
    5f50:	2e062e20 	cdpcs	14, 0, cr2, cr6, cr0, {1}
    5f54:	72030a05 	andvc	r0, r3, #20480	; 0x5000
    5f58:	060d054a 	streq	r0, [sp], -sl, asr #10
    5f5c:	06040501 	streq	r0, [r4], -r1, lsl #10
    5f60:	03020530 	movweq	r0, #9520	; 0x2530
    5f64:	05017dde 	streq	r7, [r1, #-3550]	; 0xfffff222
    5f68:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5f6c:	88030602 	stmdahi	r3, {r1, r9, sl}
    5f70:	27052e01 	strcs	r2, [r5, -r1, lsl #28]
    5f74:	0a050106 	beq	146394 <__ccfg+0x1263ec>
    5f78:	06060520 	streq	r0, [r6], -r0, lsr #10
    5f7c:	1303052f 	movwne	r0, #13615	; 0x352f
    5f80:	01060e05 	tsteq	r6, r5, lsl #28
    5f84:	2d061305 	stccs	3, cr1, [r6, #-20]	; 0xffffffec
    5f88:	01061b05 	tsteq	r6, r5, lsl #22
    5f8c:	20060605 	andcs	r0, r6, r5, lsl #12
    5f90:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    5f94:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    5f98:	051f0613 	ldreq	r0, [pc, #-1555]	; 598d <patchImageGenfsk+0x239>
    5f9c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5fa0:	47033016 	smladmi	r3, r6, r0, r3
    5fa4:	05010174 	streq	r0, [r1, #-372]	; 0xfffffe8c
    5fa8:	01cd0304 	biceq	r0, sp, r4, lsl #6
    5fac:	03020501 	movweq	r0, #9473	; 0x2501
    5fb0:	13017ede 	movwne	r7, #7902	; 0x1ede
    5fb4:	06050514 			; <UNDEFINED> instruction: 0x06050514
    5fb8:	aa030601 	bge	c77c4 <__ccfg+0xa781c>
    5fbc:	01154a01 	tsteq	r5, r1, lsl #20
    5fc0:	08051401 	stmdaeq	r5, {r0, sl, ip}
    5fc4:	10050106 	andne	r0, r5, r6, lsl #2
    5fc8:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
    5fcc:	22060605 	andcs	r0, r6, #5242880	; 0x500000
    5fd0:	01062905 	tsteq	r6, r5, lsl #18
    5fd4:	31060505 	tstcc	r6, r5, lsl #10
    5fd8:	01061b05 	tsteq	r6, r5, lsl #22
    5fdc:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    5fe0:	01060605 	tsteq	r6, r5, lsl #12
    5fe4:	30060405 	andcc	r0, r6, r5, lsl #8
    5fe8:	060f054b 	streq	r0, [pc], -fp, asr #10
    5fec:	20070501 	andcs	r0, r7, r1, lsl #10
    5ff0:	30060505 	andcc	r0, r6, r5, lsl #10
    5ff4:	05350405 	ldreq	r0, [r5, #-1029]!	; 0xfffffbfb
    5ff8:	0e052a0b 	vmlaeq.f32	s4, s10, s22
    5ffc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6000:	03053006 	movweq	r3, #20486	; 0x5006
    6004:	0607056b 	streq	r0, [r7], -fp, ror #10
    6008:	20060501 	andcs	r0, r6, r1, lsl #10
    600c:	33060405 	movwcc	r0, #25605	; 0x6405
    6010:	07054b59 	smlsdeq	r5, r9, fp, r4
    6014:	03050106 	movweq	r0, #20742	; 0x5106
    6018:	4a100306 	bmi	406c38 <__ccfg+0x3e6c90>
    601c:	9e030205 	cdpls	2, 0, cr0, cr3, cr5, {0}
    6020:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
    6024:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6028:	00d60306 	sbcseq	r0, r6, r6, lsl #6
    602c:	05010158 	streq	r0, [r1, #-344]	; 0xfffffea8
    6030:	028d0303 	addeq	r0, sp, #201326592	; 0xc000000
    6034:	2e1e0301 	cdpcs	3, 1, cr0, cr14, cr1, {0}
    6038:	01061905 	tsteq	r6, r5, lsl #18
    603c:	05213105 	streq	r3, [r1, #-261]!	; 0xfffffefb
    6040:	03052d19 	movweq	r2, #23833	; 0x5d19
    6044:	31052106 	tstcc	r5, r6, lsl #2
    6048:	03050106 	movweq	r0, #20742	; 0x5106
    604c:	1e310522 	cdpne	5, 3, cr0, cr1, cr2, {1}
    6050:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    6054:	06070532 			; <UNDEFINED> instruction: 0x06070532
    6058:	20060501 	andcs	r0, r6, r1, lsl #10
    605c:	5b060305 	blpl	186c78 <__ccfg+0x166cd0>
    6060:	01060805 	tsteq	r6, r5, lsl #16
    6064:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    6068:	05310604 	ldreq	r0, [r1, #-1540]!	; 0xfffff9fc
    606c:	13054103 	movwne	r4, #20739	; 0x5103
    6070:	06050106 	streq	r0, [r5], -r6, lsl #2
    6074:	0604052e 	streq	r0, [r4], -lr, lsr #10
    6078:	0607054b 	streq	r0, [r7], -fp, asr #10
    607c:	06050501 	streq	r0, [r5], -r1, lsl #10
    6080:	061b0541 	ldreq	r0, [fp], -r1, asr #10
    6084:	06050501 	streq	r0, [r5], -r1, lsl #10
    6088:	0633052f 	ldrteq	r0, [r3], -pc, lsr #10
    608c:	06050501 	streq	r0, [r5], -r1, lsl #10
    6090:	04052f3e 	streq	r2, [r5], #-3902	; 0xfffff0c2
    6094:	060b053f 			; <UNDEFINED> instruction: 0x060b053f
    6098:	06040501 	streq	r0, [r4], -r1, lsl #10
    609c:	013c0903 	teqeq	ip, r3, lsl #18
    60a0:	06030501 	streq	r0, [r3], -r1, lsl #10
    60a4:	5800c303 	stmdapl	r0, {r0, r1, r8, r9, lr, pc}
    60a8:	6d034206 	sfmvs	f4, 4, [r3, #-24]	; 0xffffffe8
    60ac:	0a053d20 	beq	155534 <__ccfg+0x13558c>
    60b0:	03050106 	movweq	r0, #20742	; 0x5106
    60b4:	052e0c03 	streq	r0, [lr, #-3075]!	; 0xfffff3fd
    60b8:	2074030a 	rsbscs	r0, r4, sl, lsl #6
    60bc:	27060305 	strcs	r0, [r6, -r5, lsl #6]
    60c0:	01060b05 	tsteq	r6, r5, lsl #22
    60c4:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    60c8:	03150101 	tsteq	r5, #1073741824	; 0x40000000
    60cc:	0705200b 	streq	r2, [r5, -fp]
    60d0:	06050106 	streq	r0, [r5], -r6, lsl #2
    60d4:	581f052e 	ldmdapl	pc, {r1, r2, r3, r5, r8, sl}	; <UNPREDICTABLE>
    60d8:	053d0705 	ldreq	r0, [sp, #-1797]!	; 0xfffff8fb
    60dc:	0405493e 	streq	r4, [r5], #-2366	; 0xfffff6c2
    60e0:	01053e06 	tsteq	r5, r6, lsl #28
    60e4:	2002013f 	andcs	r0, r2, pc, lsr r1
    60e8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    60ec:	0205001f 	andeq	r0, r5, #31
    60f0:	00002df8 	strdeq	r2, [r0], -r8
    60f4:	0103eb03 	tsteq	r3, r3, lsl #22
    60f8:	05170205 	ldreq	r0, [r7, #-517]	; 0xfffffdfb
    60fc:	050d061f 	streq	r0, [sp, #-1567]	; 0xfffff9e1
    6100:	05052506 	streq	r2, [r5, #-1286]	; 0xfffffafa
    6104:	0603052e 	streq	r0, [r3], -lr, lsr #10
    6108:	05020423 	streq	r0, [r2, #-1059]	; 0xfffffbdd
    610c:	b0030630 	andlt	r0, r3, r0, lsr r6
    6110:	0305667e 	movweq	r6, #22142	; 0x567e
    6114:	05051b06 	streq	r1, [r5, #-2822]	; 0xfffff4fa
    6118:	06300517 			; <UNDEFINED> instruction: 0x06300517
    611c:	060a0501 	streq	r0, [sl], -r1, lsl #10
    6120:	060b0521 	streq	r0, [fp], -r1, lsr #10
    6124:	20030501 	andcs	r0, r3, r1, lsl #10
    6128:	02050104 	andeq	r0, r5, #4, 2
    612c:	01d60306 	bicseq	r0, r6, r6, lsl #6
    6130:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    6134:	7e810303 	cdpvc	3, 8, cr0, cr1, cr3, {0}
    6138:	06320501 	ldrteq	r0, [r2], -r1, lsl #10
    613c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    6140:	02820302 	addeq	r0, r2, #134217728	; 0x8000000
    6144:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    6148:	7dfe0332 	ldclvc	3, cr0, [lr, #200]!	; 0xc8
    614c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    6150:	02820302 	addeq	r0, r2, #134217728	; 0x8000000
    6154:	2e82062e 	cdpcs	6, 8, cr0, cr2, cr14, {1}
    6158:	14014a58 	strne	r4, [r1], #-2648	; 0xfffff5a8
    615c:	01055801 	tsteq	r5, r1, lsl #16
    6160:	0d021306 	stceq	3, cr1, [r2, #-24]	; 0xffffffe8
    6164:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    6168:	02050025 	andeq	r0, r5, #37	; 0x25
    616c:	00002e68 	andeq	r2, r0, r8, ror #28
    6170:	0107d603 	tsteq	r7, r3, lsl #12
    6174:	09030205 	stmdbeq	r3, {r0, r2, r9}
    6178:	06250501 	strteq	r0, [r5], -r1, lsl #10
    617c:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    6180:	2e09030d 	cdpcs	3, 0, cr0, cr9, cr13, {0}
    6184:	77032505 	strvc	r2, [r3, -r5, lsl #10]
    6188:	03050520 	movweq	r0, #21792	; 0x5520
    618c:	03052009 	movweq	r2, #20489	; 0x5009
    6190:	36063006 	strcc	r3, [r6], -r6
    6194:	03060205 	movweq	r0, #25093	; 0x6205
    6198:	05052e7a 	streq	r2, [r5, #-3706]	; 0xfffff186
    619c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    61a0:	0e052406 	cdpeq	4, 0, cr2, cr5, cr6, {0}
    61a4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    61a8:	06030520 	streq	r0, [r3], -r0, lsr #10
    61ac:	06070530 			; <UNDEFINED> instruction: 0x06070530
    61b0:	06020537 			; <UNDEFINED> instruction: 0x06020537
    61b4:	06040528 	streq	r0, [r4], -r8, lsr #10
    61b8:	017ea103 	cmneq	lr, r3, lsl #2
    61bc:	df030905 	svcle	0x00030905
    61c0:	0e052001 	cdpeq	0, 0, cr2, cr5, cr1, {0}
    61c4:	2e7eac03 	cdpcs	12, 7, cr10, cr14, cr3, {0}
    61c8:	05281305 	streq	r1, [r8, #-773]!	; 0xfffffcfb
    61cc:	01cc030b 	biceq	r0, ip, fp, lsl #6
    61d0:	0602052e 	streq	r0, [r2], -lr, lsr #10
    61d4:	7e9b0323 	cdpvc	3, 9, cr0, cr11, cr3, {1}
    61d8:	13141301 	tstne	r4, #67108864	; 0x4000000
    61dc:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    61e0:	05130604 	ldreq	r0, [r3, #-1540]	; 0xfffff9fc
    61e4:	055d0603 	ldrbeq	r0, [sp, #-1539]	; 0xfffff9fd
    61e8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    61ec:	052f0604 	streq	r0, [pc, #-1540]!	; 5bf0 <__exidx_end+0x1cc>
    61f0:	0e055a03 	vmlaeq.f32	s10, s10, s6
    61f4:	03050106 	movweq	r0, #20742	; 0x5106
    61f8:	06053006 	streq	r3, [r5], -r6
    61fc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    6200:	13053006 	movwne	r3, #20486	; 0x5006
    6204:	03050106 	movweq	r0, #20742	; 0x5106
    6208:	13133206 	tstne	r3, #1610612736	; 0x60000000
    620c:	14060605 	strne	r0, [r6], #-1541	; 0xfffff9fb
    6210:	051f1705 	ldreq	r1, [pc, #-1797]	; 5b13 <__exidx_end+0xef>
    6214:	17052106 	strne	r2, [r5, -r6, lsl #2]
    6218:	2b13051f 	blcs	4c769c <__ccfg+0x4a76f4>
    621c:	31060305 	tstcc	r6, r5, lsl #6
    6220:	01060e05 	tsteq	r6, r5, lsl #28
    6224:	21060305 	tstcs	r6, r5, lsl #6
    6228:	01060605 	tsteq	r6, r5, lsl #12
    622c:	26060205 	strcs	r0, [r6], -r5, lsl #4
    6230:	01061105 	tsteq	r6, r5, lsl #2
    6234:	23060205 	movwcs	r0, #25093	; 0x6205
    6238:	01061a05 	tsteq	r6, r5, lsl #20
    623c:	053c0905 	ldreq	r0, [ip, #-2309]!	; 0xfffff6fb
    6240:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    6244:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    6248:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    624c:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    6250:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    6254:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    6258:	0b052002 	bleq	14e268 <__ccfg+0x12e2c0>
    625c:	2001c003 	andcs	ip, r1, r3
    6260:	c0031505 	andgt	r1, r3, r5, lsl #10
    6264:	0205207e 	andeq	r2, r5, #126	; 0x7e
    6268:	19052306 	stmdbne	r5, {r1, r2, r8, r9, sp}
    626c:	0b050106 	bleq	14668c <__ccfg+0x1266e4>
    6270:	2001bd03 	andcs	fp, r1, r3, lsl #26
    6274:	c3031905 	movwgt	r1, #14597	; 0x3905
    6278:	0205207e 	andeq	r2, r5, #126	; 0x7e
    627c:	15132306 	ldrne	r2, [r3, #-774]	; 0xfffffcfa
    6280:	25051613 	strcs	r1, [r5, #-1555]	; 0xfffff9ed
    6284:	01770306 	cmneq	r7, r6, lsl #6
    6288:	03060205 	movweq	r0, #25093	; 0x6205
    628c:	0905660c 	stmdbeq	r5, {r2, r3, r9, sl, sp, lr}
    6290:	0b050106 	bleq	1466b0 <__ccfg+0x126708>
    6294:	2001ae03 	andcs	sl, r1, r3, lsl #28
    6298:	d2030905 	andle	r0, r3, #81920	; 0x14000
    629c:	02052e7e 	andeq	r2, r5, #2016	; 0x7e0
    62a0:	01ab0306 			; <UNDEFINED> instruction: 0x01ab0306
    62a4:	0609052e 	streq	r0, [r9], -lr, lsr #10
    62a8:	06020501 	streq	r0, [r2], -r1, lsl #10
    62ac:	060b0531 			; <UNDEFINED> instruction: 0x060b0531
    62b0:	2e090501 	cfsh32cs	mvfx0, mvfx9, #1
    62b4:	05270205 	streq	r0, [r7, #-517]!	; 0xfffffdfb
    62b8:	2e790309 	cdpcs	3, 7, cr0, cr9, cr9, {0}
    62bc:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    62c0:	01130101 	tsteq	r3, r1, lsl #2
    62c4:	01011301 	tsteq	r1, r1, lsl #6
    62c8:	053f4f15 	ldreq	r4, [pc, #-3861]!	; 53bb <patchGenfskRfe+0x31b>
    62cc:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    62d0:	02054a0a 	andeq	r4, r5, #40960	; 0xa000
    62d4:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
    62d8:	03050106 	movweq	r0, #20742	; 0x5106
    62dc:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    62e0:	06220560 	strteq	r0, [r2], -r0, ror #10
    62e4:	03440501 	movteq	r0, #17665	; 0x4501
    62e8:	053c7ba0 	ldreq	r7, [ip, #-2976]!	; 0xfffff460
    62ec:	04e00322 	strbteq	r0, [r0], #802	; 0x322
    62f0:	06020520 	streq	r0, [r2], -r0, lsr #10
    62f4:	7b9b0324 	blvc	fe6c6f8c <_estack+0xde6c1f8c>
    62f8:	063f0501 	ldrteq	r0, [pc], -r1, lsl #10
    62fc:	06020501 	streq	r0, [r2], -r1, lsl #10
    6300:	0644053d 			; <UNDEFINED> instruction: 0x0644053d
    6304:	2d2e0501 	cfstr32cs	mvfx0, [lr, #-4]!
    6308:	03060205 	movweq	r0, #25093	; 0x6205
    630c:	200804e7 	andcs	r0, r8, r7, ror #9
    6310:	06280532 			; <UNDEFINED> instruction: 0x06280532
    6314:	23020501 	movwcs	r0, #9473	; 0x2501
    6318:	051d2805 	ldreq	r2, [sp, #-2053]	; 0xfffff7fb
    631c:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    6320:	02052f09 	andeq	r2, r5, #9, 30	; 0x24
    6324:	0630054e 	ldrteq	r0, [r0], -lr, asr #10
    6328:	2f010501 	svccs	0x00010501
    632c:	01002702 	tsteq	r0, r2, lsl #14
    6330:	0002ab01 	andeq	sl, r2, r1, lsl #22
    6334:	4f000300 	svcmi	0x00000300
    6338:	02000001 	andeq	r0, r0, #1
    633c:	0d0efb01 	vstreq	d15, [lr, #-4]
    6340:	01010100 	mrseq	r0, (UNDEF: 17)
    6344:	00000001 	andeq	r0, r0, r1
    6348:	01000001 	tsteq	r0, r1
    634c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    6350:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6354:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    6358:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    635c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6360:	61652d65 	cmnvs	r5, r5, ror #26
    6364:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    6368:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    636c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6370:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6374:	6f682f00 	svcvs	0x00682f00
    6378:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    637c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6380:	442f6e65 	strtmi	r6, [pc], #-3685	; 6388 <__exidx_end+0x964>
    6384:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6388:	4f2f706f 	svcmi	0x002f706f
    638c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6390:	502f5445 	eorpl	r5, pc, r5, asr #8
    6394:	534f4349 	movtpl	r4, #62281	; 0xf349
    6398:	6369502f 	cmnvs	r9, #47	; 0x2f
    639c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    63a0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    63a4:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    63a8:	2f656d6f 	svccs	0x00656d6f
    63ac:	70657473 	rsbvc	r7, r5, r3, ror r4
    63b0:	2f6e6568 	svccs	0x006e6568
    63b4:	6b736544 	blvs	1cdf8cc <__ccfg+0x1cbf924>
    63b8:	2f706f74 	svccs	0x00706f74
    63bc:	4f534c4f 	svcmi	0x00534c4f
    63c0:	2f54454e 	svccs	0x0054454e
    63c4:	4f434950 	svcmi	0x00434950
    63c8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    63cc:	00534f63 	subseq	r4, r3, r3, ror #30
    63d0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 631c <__exidx_end+0x8f8>
    63d4:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    63d8:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    63dc:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    63e0:	6f746b73 	svcvs	0x00746b73
    63e4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    63e8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    63ec:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    63f0:	2f534f43 	svccs	0x00534f43
    63f4:	4f636950 	svcmi	0x00636950
    63f8:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    63fc:	2f736269 	svccs	0x00736269
    6400:	74654e56 	strbtvc	r4, [r5], #-3670	; 0xfffff1aa
    6404:	70000049 	andvc	r0, r0, r9, asr #32
    6408:	5f67756c 	svcpl	0x0067756c
    640c:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
    6410:	0063632e 	rsbeq	r6, r3, lr, lsr #6
    6414:	73000000 	movwvc	r0, #0
    6418:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    641c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6420:	73000001 	movwvc	r0, #1
    6424:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    6428:	00682e67 	rsbeq	r2, r8, r7, ror #28
    642c:	61000001 	tstvs	r0, r1
    6430:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    6434:	00020068 	andeq	r0, r2, r8, rrx
    6438:	63616d00 	cmnvs	r1, #0, 26
    643c:	00682e68 	rsbeq	r2, r8, r8, ror #28
    6440:	70000002 	andvc	r0, r0, r2
    6444:	5f736e69 	svcpl	0x00736e69
    6448:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    644c:	00020068 	andeq	r0, r2, r8, rrx
    6450:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    6454:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    6458:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    645c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6460:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    6464:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    6468:	00030068 	andeq	r0, r3, r8, rrx
    646c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    6470:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    6474:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6478:	3c000004 	stccc	0, cr0, [r0], {4}
    647c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    6480:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    6484:	0000003e 	andeq	r0, r0, lr, lsr r0
    6488:	2b050000 	blcs	146490 <__ccfg+0x1264e8>
    648c:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
    6490:	0300002f 	movweq	r0, #47	; 0x2f
    6494:	02050136 	andeq	r0, r5, #-2147483635	; 0x8000000d
    6498:	062b0516 			; <UNDEFINED> instruction: 0x062b0516
    649c:	2410050e 	ldrcs	r0, [r0], #-1294	; 0xfffffaf2
    64a0:	051c2b05 	ldreq	r2, [ip, #-2821]	; 0xfffff4fb
    64a4:	05052410 	streq	r2, [r5, #-1040]	; 0xfffffbf0
    64a8:	2015053c 	andscs	r0, r5, ip, lsr r5
    64ac:	3f060205 	svccc	0x00060205
    64b0:	01061205 	tsteq	r6, r5, lsl #4
    64b4:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    64b8:	01060905 	tsteq	r6, r5, lsl #18
    64bc:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    64c0:	01010004 	tsteq	r1, r4
    64c4:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    64c8:	00300002 	eorseq	r0, r0, r2
    64cc:	00c20300 	sbceq	r0, r2, r0, lsl #6
    64d0:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    64d4:	01061005 	tsteq	r6, r5
    64d8:	051e1f05 	ldreq	r1, [lr, #-3845]	; 0xfffff0fb
    64dc:	05052210 	streq	r2, [r5, #-528]	; 0xfffffdf0
    64e0:	210a0520 	tstcs	sl, r0, lsr #10
    64e4:	052d2a05 	streq	r2, [sp, #-2565]!	; 0xfffff5fb
    64e8:	15052e1e 	strne	r2, [r5, #-3614]	; 0xfffff1e2
    64ec:	06020520 	streq	r0, [r2], -r0, lsr #10
    64f0:	061e0531 			; <UNDEFINED> instruction: 0x061e0531
    64f4:	22090501 	andcs	r0, r9, #4194304	; 0x400000
    64f8:	051e1e05 	ldreq	r1, [lr, #-3589]	; 0xfffff1fb
    64fc:	0205200f 	andeq	r2, r5, #15
    6500:	01052206 	tsteq	r5, r6, lsl #4
    6504:	03021306 	movweq	r1, #8966	; 0x2306
    6508:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    650c:	02050037 	andeq	r0, r5, #55	; 0x37
    6510:	00003024 	andeq	r3, r0, r4, lsr #32
    6514:	0100cc03 	tsteq	r0, r3, lsl #24
    6518:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    651c:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    6520:	01052e16 	tsteq	r5, r6, lsl lr
    6524:	00010221 	andeq	r0, r1, r1, lsr #4
    6528:	25050101 	strcs	r0, [r5, #-257]	; 0xfffffeff
    652c:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    6530:	03000030 	movweq	r0, #48	; 0x30
    6534:	050100d1 	streq	r0, [r1, #-209]	; 0xffffff2f
    6538:	01051402 	tsteq	r5, r2, lsl #8
    653c:	02021406 	andeq	r1, r2, #100663296	; 0x6000000
    6540:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    6544:	02050025 	andeq	r0, r5, #37	; 0x25
    6548:	00003030 	andeq	r3, r0, r0, lsr r0
    654c:	0100d703 	tsteq	r0, r3, lsl #14
    6550:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    6554:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    6558:	01010002 	tsteq	r1, r2
    655c:	05003905 	streq	r3, [r0, #-2309]	; 0xfffff6fb
    6560:	00303402 	eorseq	r3, r0, r2, lsl #8
    6564:	01200300 			; <UNDEFINED> instruction: 0x01200300
    6568:	26061005 	strcs	r1, [r6], -r5
    656c:	7a033905 	bvc	d4988 <__ccfg+0xb49e0>
    6570:	06020520 	streq	r0, [r2], -r0, lsr #10
    6574:	05051424 	streq	r1, [r5, #-1060]	; 0xfffffbdc
    6578:	39050106 	stmdbcc	r5, {r1, r2, r8}
    657c:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    6580:	03052605 	movweq	r2, #22021	; 0x5605
    6584:	20052106 	andcs	r2, r5, r6, lsl #2
    6588:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    658c:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    6590:	06060521 	streq	r0, [r6], -r1, lsr #10
    6594:	060f0501 	streq	r0, [pc], -r1, lsl #10
    6598:	13040522 	movwne	r0, #17698	; 0x4522
    659c:	01061205 	tsteq	r6, r5, lsl #4
    65a0:	49061605 	stmdbmi	r6, {r0, r2, r9, sl, ip}
    65a4:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    65a8:	12051304 	andne	r1, r5, #4, 6	; 0x10000000
    65ac:	16050106 	strne	r0, [r5], -r6, lsl #2
    65b0:	0f051f06 	svceq	0x00051f06
    65b4:	17020501 	strne	r0, [r2, -r1, lsl #10]
    65b8:	01061005 	tsteq	r6, r5
    65bc:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    65c0:	053f0602 	ldreq	r0, [pc, #-1538]!	; 5fc6 <__exidx_end+0x5a2>
    65c4:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    65c8:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    65cc:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    65d0:	01051d0a 	tsteq	r5, sl, lsl #26
    65d4:	06040532 			; <UNDEFINED> instruction: 0x06040532
    65d8:	02207503 	eoreq	r7, r0, #12582912	; 0xc00000
    65dc:	01010009 	tsteq	r1, r9
    65e0:	000001a4 	andeq	r0, r0, r4, lsr #3
    65e4:	01290003 			; <UNDEFINED> instruction: 0x01290003
    65e8:	01020000 	mrseq	r0, (UNDEF: 2)
    65ec:	000d0efb 	strdeq	r0, [sp], -fp
    65f0:	01010101 	tsteq	r1, r1, lsl #2
    65f4:	01000000 	mrseq	r0, (UNDEF: 0)
    65f8:	2f010000 	svccs	0x00010000
    65fc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    6600:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    6604:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    6608:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    660c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    6610:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    6614:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    6618:	4349502f 	movtmi	r5, #36911	; 0x902f
    661c:	502f534f 	eorpl	r5, pc, pc, asr #6
    6620:	534f6369 	movtpl	r6, #62313	; 0xf369
    6624:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    6628:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    662c:	61697265 	cmnvs	r9, r5, ror #4
    6630:	752f006c 	strvc	r0, [pc, #-108]!	; 65cc <__exidx_end+0xba8>
    6634:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 6470 <__exidx_end+0xa4c>
    6638:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    663c:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    6640:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6644:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6648:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    664c:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    6650:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    6654:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6658:	2f006564 	svccs	0x00006564
    665c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    6660:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    6664:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    6668:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    666c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    6670:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    6674:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    6678:	4349502f 	movtmi	r5, #36911	; 0x902f
    667c:	502f534f 	eorpl	r5, pc, pc, asr #6
    6680:	534f6369 	movtpl	r6, #62313	; 0xf369
    6684:	3143432f 	cmpcc	r3, pc, lsr #6
    6688:	00585833 	subseq	r5, r8, r3, lsr r8
    668c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 65d8 <__exidx_end+0xbb4>
    6690:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    6694:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    6698:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    669c:	6f746b73 	svcvs	0x00746b73
    66a0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    66a4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    66a8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    66ac:	2f534f43 	svccs	0x00534f43
    66b0:	4f636950 	svcmi	0x00636950
    66b4:	5f000053 	svcpl	0x00000053
    66b8:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    66bc:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    66c0:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
    66c4:	00000100 	andeq	r0, r0, r0, lsl #2
    66c8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    66cc:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    66d0:	00000200 	andeq	r0, r0, r0, lsl #4
    66d4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    66d8:	0300682e 	movweq	r6, #2094	; 0x82e
    66dc:	616d0000 	cmnvs	sp, r0
    66e0:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    66e4:	00000300 	andeq	r0, r0, r0, lsl #6
    66e8:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    66ec:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    66f0:	0300682e 	movweq	r6, #2094	; 0x82e
    66f4:	75620000 	strbvc	r0, [r2, #-0]!
    66f8:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    66fc:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6700:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6704:	73000003 	movwvc	r0, #3
    6708:	6f697379 	svcvs	0x00697379
    670c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    6710:	05000000 	streq	r0, [r0, #-0]
    6714:	02050001 	andeq	r0, r5, #1
    6718:	0000307c 	andeq	r3, r0, ip, ror r0
    671c:	01011c03 	tsteq	r1, r3, lsl #24
    6720:	3c062006 	stccc	0, cr2, [r6], {6}
    6724:	013c2603 	teqeq	ip, r3, lsl #12
    6728:	5f030205 	svcpl	0x00030205
    672c:	15131358 	ldrne	r1, [r3, #-856]	; 0xfffffca8
    6730:	05130101 	ldreq	r0, [r3, #-257]	; 0xfffffeff
    6734:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6738:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    673c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    6740:	052f0603 	streq	r0, [pc, #-1539]!	; 6145 <__exidx_end+0x721>
    6744:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    6748:	0a053c07 	beq	15576c <__ccfg+0x1357c4>
    674c:	06020528 	streq	r0, [r2], -r8, lsr #10
    6750:	060a052e 	streq	r0, [sl], -lr, lsr #10
    6754:	06020501 	streq	r0, [r2], -r1, lsl #10
    6758:	06060583 	streq	r0, [r6], -r3, lsl #11
    675c:	211f2101 	tstcs	pc, r1, lsl #2
    6760:	0602051f 			; <UNDEFINED> instruction: 0x0602051f
    6764:	06060521 	streq	r0, [r6], -r1, lsr #10
    6768:	06020501 	streq	r0, [r2], -r1, lsl #10
    676c:	06050521 	streq	r0, [r5], -r1, lsr #10
    6770:	06030501 	streq	r0, [r3], -r1, lsl #10
    6774:	74033d30 	strvc	r3, [r3], #-3376	; 0xfffff2d0
    6778:	060d054a 	streq	r0, [sp], -sl, asr #10
    677c:	20110501 	andscs	r0, r1, r1, lsl #10
    6780:	02200705 	eoreq	r0, r0, #1310720	; 0x140000
    6784:	01010008 	tsteq	r1, r8
    6788:	0000024e 	andeq	r0, r0, lr, asr #4
    678c:	01280003 			; <UNDEFINED> instruction: 0x01280003
    6790:	01020000 	mrseq	r0, (UNDEF: 2)
    6794:	000d0efb 	strdeq	r0, [sp], -fp
    6798:	01010101 	tsteq	r1, r1, lsl #2
    679c:	01000000 	mrseq	r0, (UNDEF: 0)
    67a0:	2f010000 	svccs	0x00010000
    67a4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    67a8:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    67ac:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    67b0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    67b4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    67b8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    67bc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    67c0:	4349502f 	movtmi	r5, #36911	; 0x902f
    67c4:	502f534f 	eorpl	r5, pc, pc, asr #6
    67c8:	534f6369 	movtpl	r6, #62313	; 0xf369
    67cc:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    67d0:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    67d4:	61697265 	cmnvs	r9, r5, ror #4
    67d8:	752f006c 	strvc	r0, [pc, #-108]!	; 6774 <__exidx_end+0xd50>
    67dc:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 6618 <__exidx_end+0xbf4>
    67e0:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    67e4:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    67e8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    67ec:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    67f0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    67f4:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    67f8:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    67fc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6800:	2f006564 	svccs	0x00006564
    6804:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    6808:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    680c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    6810:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    6814:	706f746b 	rsbvc	r7, pc, fp, ror #8
    6818:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    681c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    6820:	4349502f 	movtmi	r5, #36911	; 0x902f
    6824:	502f534f 	eorpl	r5, pc, pc, asr #6
    6828:	534f6369 	movtpl	r6, #62313	; 0xf369
    682c:	3143432f 	cmpcc	r3, pc, lsr #6
    6830:	00585833 	subseq	r5, r8, r3, lsr r8
    6834:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6780 <__exidx_end+0xd5c>
    6838:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    683c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    6840:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6844:	6f746b73 	svcvs	0x00746b73
    6848:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    684c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    6850:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6854:	2f534f43 	svccs	0x00534f43
    6858:	4f636950 	svcmi	0x00636950
    685c:	5f000053 	svcpl	0x00000053
    6860:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    6864:	61697265 	cmnvs	r9, r5, ror #4
    6868:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    686c:	73000001 	movwvc	r0, #1
    6870:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    6874:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6878:	61000002 	tstvs	r0, r2
    687c:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    6880:	00030068 	andeq	r0, r3, r8, rrx
    6884:	63616d00 	cmnvs	r1, #0, 26
    6888:	00682e68 	rsbeq	r2, r8, r8, ror #28
    688c:	70000003 	andvc	r0, r0, r3
    6890:	5f736e69 	svcpl	0x00736e69
    6894:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    6898:	00030068 	andeq	r0, r3, r8, rrx
    689c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    68a0:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    68a4:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    68a8:	0300682e 	movweq	r6, #2094	; 0x82e
    68ac:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    68b0:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    68b4:	00040068 	andeq	r0, r4, r8, rrx
    68b8:	01050000 	mrseq	r0, (UNDEF: 5)
    68bc:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    68c0:	03000030 	movweq	r0, #48	; 0x30
    68c4:	06010122 	streq	r0, [r1], -r2, lsr #2
    68c8:	053c0620 	ldreq	r0, [ip, #-1568]!	; 0xfffff9e0
    68cc:	13136b02 	tstne	r3, #2048	; 0x800
    68d0:	06100516 			; <UNDEFINED> instruction: 0x06100516
    68d4:	20050501 	andcs	r0, r5, r1, lsl #10
    68d8:	30060305 	andcc	r0, r6, r5, lsl #6
    68dc:	053f0205 	ldreq	r0, [pc, #-517]!	; 66df <__exidx_end+0xcbb>
    68e0:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
    68e4:	1d053c0b 	stcne	12, cr3, [r5, #-44]	; 0xffffffd4
    68e8:	200b0520 	andcs	r0, fp, r0, lsr #10
    68ec:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    68f0:	2f240603 	svccs	0x00240603
    68f4:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
    68f8:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    68fc:	2f061f02 	svccs	0x00061f02
    6900:	01060605 	tsteq	r6, r5, lsl #12
    6904:	30060205 	andcc	r0, r6, r5, lsl #4
    6908:	83160101 	tsthi	r6, #1073741824	; 0x40000000
    690c:	01060505 	tsteq	r6, r5, lsl #10
    6910:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    6914:	01060605 	tsteq	r6, r5, lsl #12
    6918:	2f060405 	svccs	0x00060405
    691c:	01060705 	tsteq	r6, r5, lsl #14
    6920:	05210405 	streq	r0, [r1, #-1029]!	; 0xfffffbfb
    6924:	04051f07 	streq	r1, [r5], #-3847	; 0xfffff0f9
    6928:	03052106 	movweq	r2, #20742	; 0x5106
    692c:	06070531 			; <UNDEFINED> instruction: 0x06070531
    6930:	20060501 	andcs	r0, r6, r1, lsl #10
    6934:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    6938:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
    693c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6940:	13052e05 	movwne	r2, #24069	; 0x5e05
    6944:	0603052e 	streq	r0, [r3], -lr, lsr #10
    6948:	0608052f 	streq	r0, [r8], -pc, lsr #10
    694c:	06030501 	streq	r0, [r3], -r1, lsl #10
    6950:	060d052f 	streq	r0, [sp], -pc, lsr #10
    6954:	06030501 	streq	r0, [r3], -r1, lsl #10
    6958:	3102052f 	tstcc	r2, pc, lsr #10
    695c:	01060605 	tsteq	r6, r5, lsl #12
    6960:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    6964:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    6968:	21010606 	tstcs	r1, r6, lsl #12
    696c:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
    6970:	0606052f 	streq	r0, [r6], -pc, lsr #10
    6974:	06020501 	streq	r0, [r2], -r1, lsl #10
    6978:	05914023 	ldreq	r4, [r1, #35]	; 0x23
    697c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6980:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    6984:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    6988:	07053c11 	smladeq	r5, r1, ip, r3
    698c:	06020521 	streq	r0, [r2], -r1, lsr #10
    6990:	0605054b 	streq	r0, [r5], -fp, asr #10
    6994:	06020501 	streq	r0, [r2], -r1, lsl #10
    6998:	060a0524 	streq	r0, [sl], -r4, lsr #10
    699c:	9f060501 	svcls	0x00060501
    69a0:	051f0a05 	ldreq	r0, [pc, #-2565]	; 5fa3 <__exidx_end+0x57f>
    69a4:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    69a8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    69ac:	052f0602 	streq	r0, [pc, #-1538]!	; 63b2 <__exidx_end+0x98e>
    69b0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    69b4:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    69b8:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    69bc:	052f0603 	streq	r0, [pc, #-1539]!	; 63c1 <__exidx_end+0x99d>
    69c0:	06053002 	streq	r3, [r5], -r2
    69c4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    69c8:	01053d06 	tsteq	r5, r6, lsl #26
    69cc:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    69d0:	0601053a 			; <UNDEFINED> instruction: 0x0601053a
    69d4:	000d0230 	andeq	r0, sp, r0, lsr r2
    69d8:	03c00101 	biceq	r0, r0, #1073741824	; 0x40000000
    69dc:	00030000 	andeq	r0, r3, r0
    69e0:	0000013d 	andeq	r0, r0, sp, lsr r1
    69e4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    69e8:	0101000d 	tsteq	r1, sp
    69ec:	00000101 	andeq	r0, r0, r1, lsl #2
    69f0:	00000100 	andeq	r0, r0, r0, lsl #2
    69f4:	6f682f01 	svcvs	0x00682f01
    69f8:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    69fc:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6a00:	442f6e65 	strtmi	r6, [pc], #-3685	; 6a08 <__exidx_end+0xfe4>
    6a04:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6a08:	4f2f706f 	svcmi	0x002f706f
    6a0c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6a10:	502f5445 	eorpl	r5, pc, r5, asr #8
    6a14:	534f4349 	movtpl	r4, #62281	; 0xf349
    6a18:	6369502f 	cmnvs	r9, #47	; 0x2f
    6a1c:	502f534f 	eorpl	r5, pc, pc, asr #6
    6a20:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    6a24:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    6a28:	006c6169 	rsbeq	r6, ip, r9, ror #2
    6a2c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    6a30:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6a34:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    6a38:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    6a3c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6a40:	61652d65 	cmnvs	r5, r5, ror #26
    6a44:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    6a48:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    6a4c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6a50:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6a54:	6f682f00 	svcvs	0x00682f00
    6a58:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    6a5c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6a60:	442f6e65 	strtmi	r6, [pc], #-3685	; 6a68 <__exidx_end+0x1044>
    6a64:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6a68:	4f2f706f 	svcmi	0x002f706f
    6a6c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6a70:	502f5445 	eorpl	r5, pc, r5, asr #8
    6a74:	534f4349 	movtpl	r4, #62281	; 0xf349
    6a78:	6369502f 	cmnvs	r9, #47	; 0x2f
    6a7c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    6a80:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    6a84:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    6a88:	2f656d6f 	svccs	0x00656d6f
    6a8c:	70657473 	rsbvc	r7, r5, r3, ror r4
    6a90:	2f6e6568 	svccs	0x006e6568
    6a94:	6b736544 	blvs	1cdffac <__ccfg+0x1cc0004>
    6a98:	2f706f74 	svccs	0x00706f74
    6a9c:	4f534c4f 	svcmi	0x00534c4f
    6aa0:	2f54454e 	svccs	0x0054454e
    6aa4:	4f434950 	svcmi	0x00434950
    6aa8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    6aac:	00534f63 	subseq	r4, r3, r3, ror #30
    6ab0:	6f667600 	svcvs	0x00667600
    6ab4:	632e6d72 			; <UNDEFINED> instruction: 0x632e6d72
    6ab8:	00000100 	andeq	r0, r0, r0, lsl #2
    6abc:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6ac0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6ac4:	00000200 	andeq	r0, r0, r0, lsl #4
    6ac8:	61647473 	smcvs	18243	; 0x4743
    6acc:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    6ad0:	00000200 	andeq	r0, r0, r0, lsl #4
    6ad4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    6ad8:	0300682e 	movweq	r6, #2094	; 0x82e
    6adc:	616d0000 	cmnvs	sp, r0
    6ae0:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    6ae4:	00000300 	andeq	r0, r0, r0, lsl #6
    6ae8:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    6aec:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    6af0:	0300682e 	movweq	r6, #2094	; 0x82e
    6af4:	75620000 	strbvc	r0, [r2, #-0]!
    6af8:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    6afc:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6b00:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6b04:	73000003 	movwvc	r0, #3
    6b08:	6f697379 	svcvs	0x00697379
    6b0c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    6b10:	623c0000 	eorsvs	r0, ip, #0
    6b14:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    6b18:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    6b1c:	00000000 	andeq	r0, r0, r0
    6b20:	00150500 	andseq	r0, r5, r0, lsl #10
    6b24:	32080205 	andcc	r0, r8, #1342177280	; 0x50000000
    6b28:	0c030000 	stceq	0, cr0, [r3], {-0}
    6b2c:	13030501 	movwne	r0, #13569	; 0x3501
    6b30:	01060605 	tsteq	r6, r5, lsl #12
    6b34:	05580b05 	ldrbeq	r0, [r8, #-2821]	; 0xfffff4fb
    6b38:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    6b3c:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    6b40:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    6b44:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    6b48:	01025902 	tsteq	r2, r2, lsl #18
    6b4c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    6b50:	02050043 	andeq	r0, r5, #67	; 0x43
    6b54:	00003228 	andeq	r3, r0, r8, lsr #4
    6b58:	052e0619 	streq	r0, [lr, #-1561]!	; 0xfffff9e7
    6b5c:	04052006 	streq	r2, [r5], #-6
    6b60:	052e1d03 	streq	r1, [lr, #-3331]!	; 0xfffff2fd
    6b64:	20280305 	eorcs	r0, r8, r5, lsl #6
    6b68:	71030705 	tstvc	r3, r5, lsl #14
    6b6c:	03060520 	movweq	r0, #25888	; 0x6520
    6b70:	0205204a 	andeq	r2, r5, #74	; 0x4a
    6b74:	14133e06 	ldrne	r3, [r3], #-3590	; 0xfffff1fa
    6b78:	05180305 	ldreq	r0, [r8, #-773]	; 0xfffffcfb
    6b7c:	01120302 	tsteq	r2, r2, lsl #6
    6b80:	01060405 	tsteq	r6, r5, lsl #8
    6b84:	30060205 	andcc	r0, r6, r5, lsl #4
    6b88:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
    6b8c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    6b90:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    6b94:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6b98:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    6b9c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    6ba0:	05052e10 	streq	r2, [r5, #-3600]	; 0xfffff1f0
    6ba4:	2d070521 	cfstr32cs	mvfx0, [r7, #-132]	; 0xffffff7c
    6ba8:	3d060505 	cfstr32cc	mvfx0, [r6, #-20]	; 0xffffffec
    6bac:	0304053d 	movweq	r0, #17725	; 0x453d
    6bb0:	590100da 	stmdbpl	r1, {r1, r3, r4, r6, r7}
    6bb4:	01060705 	tsteq	r6, r5, lsl #14
    6bb8:	03060405 	movweq	r0, #25605	; 0x6405
    6bbc:	054a7fa7 	strbeq	r7, [sl, #-4007]	; 0xfffff059
    6bc0:	c2030605 	andgt	r0, r3, #5242880	; 0x500000
    6bc4:	2f062000 	svccs	0x00062000
    6bc8:	10061205 	andne	r1, r6, r5, lsl #4
    6bcc:	03060305 	movweq	r0, #25349	; 0x6305
    6bd0:	06052e43 	streq	r2, [r5], -r3, asr #28
    6bd4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    6bd8:	06054c06 	streq	r4, [r5], -r6, lsl #24
    6bdc:	0b050106 	bleq	146ffc <__ccfg+0x127054>
    6be0:	0604052e 	streq	r0, [r4], -lr, lsr #10
    6be4:	03050521 	movweq	r0, #21793	; 0x5521
    6be8:	59e400c9 	stmibpl	r4!, {r0, r3, r6, r7}^
    6bec:	06080559 			; <UNDEFINED> instruction: 0x06080559
    6bf0:	06050501 	streq	r0, [r5], -r1, lsl #10
    6bf4:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
    6bf8:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    6bfc:	04053101 	streq	r3, [r5], #-257	; 0xfffffeff
    6c00:	3c7fa903 			; <UNDEFINED> instruction: 0x3c7fa903
    6c04:	68060505 	stmdavs	r6, {r0, r2, r8, sl}
    6c08:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    6c0c:	0c051305 	stceq	3, cr1, [r5], {5}
    6c10:	12051306 	andne	r1, r5, #402653184	; 0x18000000
    6c14:	0605052d 	streq	r0, [r5], -sp, lsr #10
    6c18:	060e052f 	streq	r0, [lr], -pc, lsr #10
    6c1c:	06060514 			; <UNDEFINED> instruction: 0x06060514
    6c20:	060e052d 	streq	r0, [lr], -sp, lsr #10
    6c24:	2e140513 	mrccs	5, 0, r0, cr4, cr3, {0}
    6c28:	062d0605 	strteq	r0, [sp], -r5, lsl #12
    6c2c:	0609055a 			; <UNDEFINED> instruction: 0x0609055a
    6c30:	06140501 	ldreq	r0, [r4], -r1, lsl #10
    6c34:	06160539 			; <UNDEFINED> instruction: 0x06160539
    6c38:	06120501 	ldreq	r0, [r2], -r1, lsl #10
    6c3c:	0606052e 	streq	r0, [r6], -lr, lsr #10
    6c40:	06050513 			; <UNDEFINED> instruction: 0x06050513
    6c44:	13200903 			; <UNDEFINED> instruction: 0x13200903
    6c48:	01061205 	tsteq	r6, r5, lsl #4
    6c4c:	052f0805 	streq	r0, [pc, #-2053]!	; 644f <__exidx_end+0xa2b>
    6c50:	05052d09 	streq	r2, [r5, #-3337]	; 0xfffff2f7
    6c54:	08052f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    6c58:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    6c5c:	06060520 	streq	r0, [r6], -r0, lsr #10
    6c60:	0a055930 	beq	15d128 <__ccfg+0x13d180>
    6c64:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6c68:	0c054c06 	stceq	12, cr4, [r5], {6}
    6c6c:	016f0306 	cmneq	pc, r6, lsl #6
    6c70:	11030505 	tstne	r3, r5, lsl #10
    6c74:	012e0620 			; <UNDEFINED> instruction: 0x012e0620
    6c78:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    6c7c:	8274014a 	rsbshi	r0, r4, #-2147483630	; 0x80000012
    6c80:	204a2020 	subcs	r2, sl, r0, lsr #32
    6c84:	0705252e 	streq	r2, [r5, -lr, lsr #10]
    6c88:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6c8c:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
    6c90:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    6c94:	0606052e 	streq	r0, [r6], -lr, lsr #10
    6c98:	09051330 	stmdbeq	r5, {r4, r5, r8, r9, ip}
    6c9c:	0a051406 	beq	14bcbc <__ccfg+0x12bd14>
    6ca0:	2d08051f 	cfstr32cs	mvfx0, [r8, #-124]	; 0xffffff84
    6ca4:	2f060605 	svccs	0x00060605
    6ca8:	06090513 			; <UNDEFINED> instruction: 0x06090513
    6cac:	20130501 	andscs	r0, r3, r1, lsl #10
    6cb0:	3f060705 	svccc	0x00060705
    6cb4:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
    6cb8:	06060501 	streq	r0, [r6], -r1, lsl #10
    6cbc:	06050530 			; <UNDEFINED> instruction: 0x06050530
    6cc0:	05016f03 	streq	r6, [r1, #-3843]	; 0xfffff0fd
    6cc4:	20110306 	andscs	r0, r1, r6, lsl #6
    6cc8:	2e012e06 	cdpcs	14, 0, cr2, cr1, cr6, {0}
    6ccc:	4a063c06 	bmi	195cec <__ccfg+0x175d44>
    6cd0:	01666601 	cmneq	r6, r1, lsl #12
    6cd4:	2e20582e 	cdpcs	8, 2, cr5, cr0, cr14, {1}
    6cd8:	05210c05 	streq	r0, [r1, #-3077]!	; 0xfffff3fb
    6cdc:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    6ce0:	132f0606 			; <UNDEFINED> instruction: 0x132f0606
    6ce4:	060d0513 			; <UNDEFINED> instruction: 0x060d0513
    6ce8:	2d0a0514 	cfstr32cs	mvfx0, [sl, #-80]	; 0xffffffb0
    6cec:	052d0805 	streq	r0, [sp, #-2053]!	; 0xfffff7fb
    6cf0:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
    6cf4:	0f051407 	svceq	0x00051407
    6cf8:	15051306 	strne	r1, [r5, #-774]	; 0xfffffcfa
    6cfc:	2d07052e 	cfstr32cs	mvfx0, [r7, #-184]	; 0xffffff48
    6d00:	0a055a06 	beq	15d520 <__ccfg+0x13d578>
    6d04:	15050106 	strne	r0, [r5, #-262]	; 0xfffffefa
    6d08:	17054706 	strne	r4, [r5, -r6, lsl #14]
    6d0c:	13050106 	movwne	r0, #20742	; 0x5106
    6d10:	07052e06 	streq	r2, [r5, -r6, lsl #28]
    6d14:	06051306 	streq	r1, [r5], -r6, lsl #6
    6d18:	05592606 	ldrbeq	r2, [r9, #-1542]	; 0xfffff9fa
    6d1c:	13134f05 	tstne	r3, #5, 30
    6d20:	11060905 	tstne	r6, r5, lsl #18
    6d24:	062f0505 	strteq	r0, [pc], -r5, lsl #10
    6d28:	0513134f 	ldreq	r1, [r3, #-847]	; 0xfffffcb1
    6d2c:	0c054a0b 			; <UNDEFINED> instruction: 0x0c054a0b
    6d30:	0b050106 	bleq	147150 <__ccfg+0x1271a8>
    6d34:	0606052e 	streq	r0, [r6], -lr, lsr #10
    6d38:	0a054b3d 	beq	159a34 <__ccfg+0x139a8c>
    6d3c:	7fad0306 	svcvc	0x00ad0306
    6d40:	00070220 	andeq	r0, r7, r0, lsr #4
    6d44:	35050101 	strcc	r0, [r5, #-257]	; 0xfffffeff
    6d48:	58020500 	stmdapl	r2, {r8, sl}
    6d4c:	03000034 	movweq	r0, #52	; 0x34
    6d50:	05010190 	streq	r0, [r1, #-400]	; 0xfffffe70
    6d54:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    6d58:	2e0e0635 	mcrcs	6, 0, r0, cr14, cr5, {1}
    6d5c:	05320505 	ldreq	r0, [r2, #-1285]!	; 0xfffffafb
    6d60:	67300603 	ldrvs	r0, [r0, -r3, lsl #12]!
    6d64:	03060105 	movweq	r0, #24837	; 0x6105
    6d68:	02050112 	andeq	r0, r5, #-2147483644	; 0x80000004
    6d6c:	3c720306 	ldclcc	3, cr0, [r2], #-24	; 0xffffffe8
    6d70:	01060805 	tsteq	r6, r5, lsl #16
    6d74:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    6d78:	053f0602 	ldreq	r0, [pc, #-1538]!	; 677e <__exidx_end+0xd5a>
    6d7c:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    6d80:	02053c05 	andeq	r3, r5, #1280	; 0x500
    6d84:	0b054006 	bleq	156da4 <__ccfg+0x136dfc>
    6d88:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6d8c:	200b0558 	andcs	r0, fp, r8, asr r5
    6d90:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    6d94:	3d220603 	stccc	6, cr0, [r2, #-12]!
    6d98:	00020213 	andeq	r0, r2, r3, lsl r2
    6d9c:	02c90101 	sbceq	r0, r9, #1073741824	; 0x40000000
    6da0:	00030000 	andeq	r0, r3, r0
    6da4:	0000013d 	andeq	r0, r0, sp, lsr r1
    6da8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6dac:	0101000d 	tsteq	r1, sp
    6db0:	00000101 	andeq	r0, r0, r1, lsl #2
    6db4:	00000100 	andeq	r0, r0, r0, lsl #2
    6db8:	6f682f01 	svcvs	0x00682f01
    6dbc:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    6dc0:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6dc4:	442f6e65 	strtmi	r6, [pc], #-3685	; 6dcc <__exidx_end+0x13a8>
    6dc8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6dcc:	4f2f706f 	svcmi	0x002f706f
    6dd0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6dd4:	502f5445 	eorpl	r5, pc, r5, asr #8
    6dd8:	534f4349 	movtpl	r4, #62281	; 0xf349
    6ddc:	6369502f 	cmnvs	r9, #47	; 0x2f
    6de0:	502f534f 	eorpl	r5, pc, pc, asr #6
    6de4:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    6de8:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    6dec:	006c6169 	rsbeq	r6, ip, r9, ror #2
    6df0:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    6df4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6df8:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    6dfc:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    6e00:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6e04:	61652d65 	cmnvs	r5, r5, ror #26
    6e08:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    6e0c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    6e10:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6e14:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6e18:	6f682f00 	svcvs	0x00682f00
    6e1c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    6e20:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6e24:	442f6e65 	strtmi	r6, [pc], #-3685	; 6e2c <__exidx_end+0x1408>
    6e28:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6e2c:	4f2f706f 	svcmi	0x002f706f
    6e30:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6e34:	502f5445 	eorpl	r5, pc, r5, asr #8
    6e38:	534f4349 	movtpl	r4, #62281	; 0xf349
    6e3c:	6369502f 	cmnvs	r9, #47	; 0x2f
    6e40:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    6e44:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    6e48:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    6e4c:	2f656d6f 	svccs	0x00656d6f
    6e50:	70657473 	rsbvc	r7, r5, r3, ror r4
    6e54:	2f6e6568 	svccs	0x006e6568
    6e58:	6b736544 	blvs	1ce0370 <__ccfg+0x1cc03c8>
    6e5c:	2f706f74 	svccs	0x00706f74
    6e60:	4f534c4f 	svcmi	0x00534c4f
    6e64:	2f54454e 	svccs	0x0054454e
    6e68:	4f434950 	svcmi	0x00434950
    6e6c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    6e70:	00534f63 	subseq	r4, r3, r3, ror #30
    6e74:	63737600 	cmnvs	r3, #0, 12
    6e78:	632e6e61 			; <UNDEFINED> instruction: 0x632e6e61
    6e7c:	00000100 	andeq	r0, r0, r0, lsl #2
    6e80:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6e84:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6e88:	00000200 	andeq	r0, r0, r0, lsl #4
    6e8c:	61647473 	smcvs	18243	; 0x4743
    6e90:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    6e94:	00000200 	andeq	r0, r0, r0, lsl #4
    6e98:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    6e9c:	0300682e 	movweq	r6, #2094	; 0x82e
    6ea0:	616d0000 	cmnvs	sp, r0
    6ea4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    6ea8:	00000300 	andeq	r0, r0, r0, lsl #6
    6eac:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    6eb0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    6eb4:	0300682e 	movweq	r6, #2094	; 0x82e
    6eb8:	75620000 	strbvc	r0, [r2, #-0]!
    6ebc:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    6ec0:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6ec4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6ec8:	73000003 	movwvc	r0, #3
    6ecc:	6f697379 	svcvs	0x00697379
    6ed0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    6ed4:	623c0000 	eorsvs	r0, ip, #0
    6ed8:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    6edc:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    6ee0:	00000000 	andeq	r0, r0, r0
    6ee4:	003a0500 	eorseq	r0, sl, r0, lsl #10
    6ee8:	34a80205 	strtcc	r0, [r8], #517	; 0x205
    6eec:	05190000 	ldreq	r0, [r9, #-0]
    6ef0:	3a031402 	bcc	cbf00 <__ccfg+0xabf58>
    6ef4:	06050501 	streq	r0, [r5], -r1, lsl #10
    6ef8:	033a0501 	teqeq	sl, #4194304	; 0x400000
    6efc:	05052044 	streq	r2, [r5, #-68]	; 0xffffffbc
    6f00:	052e3c03 	streq	r3, [lr, #-3075]!	; 0xfffff3fd
    6f04:	05053c12 	streq	r3, [r5, #-3090]	; 0xfffff3ee
    6f08:	03160540 	tsteq	r6, #64, 10	; 0x10000000
    6f0c:	0b05200e 	bleq	14ef4c <__ccfg+0x12efa4>
    6f10:	052e1103 	streq	r1, [lr, #-259]!	; 0xfffffefd
    6f14:	62030608 	andvs	r0, r3, #8, 12	; 0x800000
    6f18:	0609053c 			; <UNDEFINED> instruction: 0x0609053c
    6f1c:	2e080501 	cfsh32cs	mvfx0, mvfx8, #1
    6f20:	21060305 	tstcs	r6, r5, lsl #6
    6f24:	01060605 	tsteq	r6, r5, lsl #12
    6f28:	30060305 	andcc	r0, r6, r5, lsl #6
    6f2c:	01060b05 	tsteq	r6, r5, lsl #22
    6f30:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
    6f34:	01052003 	tsteq	r5, r3
    6f38:	05ac2e03 	streq	r2, [ip, #3587]!	; 0xe03
    6f3c:	3c520303 	mrrccc	3, 0, r0, r2, cr3
    6f40:	1b030b05 	blne	c9b5c <__ccfg+0xa9bb4>
    6f44:	060a0574 			; <UNDEFINED> instruction: 0x060a0574
    6f48:	060b052e 	streq	r0, [fp], -lr, lsr #10
    6f4c:	06040501 	streq	r0, [r4], -r1, lsl #10
    6f50:	060705ad 	streq	r0, [r7], -sp, lsr #11
    6f54:	06040501 	streq	r0, [r4], -r1, lsl #10
    6f58:	06070530 			; <UNDEFINED> instruction: 0x06070530
    6f5c:	1e080515 	mcrne	5, 0, r0, cr8, cr5, {0}
    6f60:	052d0605 	streq	r0, [sp, #-1541]!	; 0xfffff9fb
    6f64:	142f0604 	strtne	r0, [pc], #-1540	; 6f6c <__exidx_end+0x1548>
    6f68:	01060705 	tsteq	r6, r5, lsl #14
    6f6c:	2f060b05 	svccs	0x00060b05
    6f70:	01060d05 	tsteq	r6, r5, lsl #26
    6f74:	05660c05 	strbeq	r0, [r6, #-3077]!	; 0xfffff3fb
    6f78:	2b052e1c 	blcs	1527f0 <__ccfg+0x132848>
    6f7c:	4e0b052e 	cfsh32mi	mvfx0, mvfx11, #30
    6f80:	3c060a05 			; <UNDEFINED> instruction: 0x3c060a05
    6f84:	01060b05 	tsteq	r6, r5, lsl #22
    6f88:	83060405 	movwhi	r0, #25605	; 0x6405
    6f8c:	01061805 	tsteq	r6, r5, lsl #16
    6f90:	4b060405 	blmi	187fac <__ccfg+0x168004>
    6f94:	01060905 	tsteq	r6, r5, lsl #18
    6f98:	2f060405 	svccs	0x00060405
    6f9c:	59031105 	stmdbpl	r3, {r0, r2, r8, ip}
    6fa0:	66063c20 	strvs	r3, [r6], -r0, lsr #24
    6fa4:	2e2e062e 	cfmadda32cs	mvax1, mvax0, mvfx14, mvfx14
    6fa8:	66063c06 	strvs	r3, [r6], -r6, lsl #24
    6fac:	0620013c 			; <UNDEFINED> instruction: 0x0620013c
    6fb0:	743c0601 	ldrtvc	r0, [ip], #-1537	; 0xfffff9ff
    6fb4:	064a063c 			; <UNDEFINED> instruction: 0x064a063c
    6fb8:	2e21743c 	mcrcs	4, 1, r7, cr1, cr12, {1}
    6fbc:	2e013c90 	mcrcs	12, 0, r3, cr1, cr0, {4}
    6fc0:	2e060106 	adfcss	f0, f6, f6
    6fc4:	4a219082 	bmi	86b1d4 <__ccfg+0x84b22c>
    6fc8:	58069006 	stmdapl	r6, {r1, r2, ip, pc}
    6fcc:	012e013c 			; <UNDEFINED> instruction: 0x012e013c
    6fd0:	3c062e06 	stccc	14, cr2, [r6], {6}
    6fd4:	06668206 	strbteq	r8, [r6], -r6, lsl #4
    6fd8:	3c3c3c3c 	ldccc	12, cr3, [ip], #-240	; 0xffffff10
    6fdc:	05770405 	ldrbeq	r0, [r7, #-1029]!	; 0xfffffbfb
    6fe0:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    6fe4:	16052010 			; <UNDEFINED> instruction: 0x16052010
    6fe8:	6606ae06 	strvs	sl, [r6], -r6, lsl #28
    6fec:	2e2e062e 	cfmadda32cs	mvax1, mvax0, mvfx14, mvfx14
    6ff0:	3c063c06 	stccc	12, cr3, [r6], {6}
    6ff4:	062e013c 			; <UNDEFINED> instruction: 0x062e013c
    6ff8:	823c0601 	eorshi	r0, ip, #1048576	; 0x100000
    6ffc:	9006923c 	andls	r9, r6, ip, lsr r2
    7000:	013c5806 	teqeq	ip, r6, lsl #16
    7004:	2e06012e 	adfcssp	f0, f6, #0.5
    7008:	74063c06 	strvc	r3, [r6], #-3078	; 0xfffff3fa
    700c:	3c3c0666 	ldccc	6, cr0, [ip], #-408	; 0xfffffe68
    7010:	06723c3c 			; <UNDEFINED> instruction: 0x06723c3c
    7014:	742e063c 	strtvc	r0, [lr], #-1596	; 0xfffff9c4
    7018:	3c903c21 	ldccc	12, cr3, [r0], {33}	; 0x21
    701c:	01062e01 	tsteq	r6, r1, lsl #28
    7020:	74902e06 	ldrvc	r2, [r0], #3590	; 0xe06
    7024:	4f040521 	svcmi	0x00040521
    7028:	060b0514 			; <UNDEFINED> instruction: 0x060b0514
    702c:	2e070501 	cfsh32cs	mvfx0, mvfx7, #1
    7030:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    7034:	13060805 	movwne	r0, #26629	; 0x6805
    7038:	052d0605 	streq	r0, [sp, #-1541]!	; 0xfffff9fb
    703c:	13210604 			; <UNDEFINED> instruction: 0x13210604
    7040:	01060905 	tsteq	r6, r5, lsl #18
    7044:	21060405 	tstcs	r6, r5, lsl #8
    7048:	24060b05 	strcs	r0, [r6], #-2821	; 0xfffff4fb
    704c:	03060705 	movweq	r0, #26373	; 0x6705
    7050:	0e057409 	cdpeq	4, 0, cr7, cr5, cr9, {0}
    7054:	0b050106 	bleq	147474 <__ccfg+0x1274cc>
    7058:	030a053e 	movweq	r0, #42302	; 0xa53e
    705c:	11056654 	tstne	r5, r4, asr r6
    7060:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
    7064:	05025116 	streq	r5, [r2, #-278]	; 0xfffffeea
    7068:	8e010100 	adfhis	f0, f1, f0
    706c:	03000002 	movweq	r0, #2
    7070:	00028800 	andeq	r8, r2, r0, lsl #16
    7074:	fb010200 	blx	4787e <__ccfg+0x278d6>
    7078:	01000d0e 	tsteq	r0, lr, lsl #26
    707c:	00010101 	andeq	r0, r1, r1, lsl #2
    7080:	00010000 	andeq	r0, r1, r0
    7084:	752f0100 	strvc	r0, [pc, #-256]!	; 6f8c <__exidx_end+0x1568>
    7088:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 6ec4 <__exidx_end+0x14a0>
    708c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    7090:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    7094:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7098:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    709c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    70a0:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    70a4:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    70a8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    70ac:	2f006564 	svccs	0x00006564
    70b0:	2f727375 	svccs	0x00727375
    70b4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    70b8:	2f656475 	svccs	0x00656475
    70bc:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    70c0:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    70c4:	2f007379 	svccs	0x00007379
    70c8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    70cc:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    70d0:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    70d4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    70d8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    70dc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    70e0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    70e4:	4349502f 	movtmi	r5, #36911	; 0x902f
    70e8:	502f534f 	eorpl	r5, pc, pc, asr #6
    70ec:	534f6369 	movtpl	r6, #62313	; 0xf369
    70f0:	3143432f 	cmpcc	r3, pc, lsr #6
    70f4:	2f585833 	svccs	0x00585833
    70f8:	33314343 	teqcc	r1, #201326593	; 0xc000001
    70fc:	41575858 	cmpmi	r7, r8, asr r8
    7100:	642f4552 	strtvs	r4, [pc], #-1362	; 7108 <__exidx_end+0x16e4>
    7104:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    7108:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    710c:	6f682f00 	svcvs	0x00682f00
    7110:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    7114:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    7118:	442f6e65 	strtmi	r6, [pc], #-3685	; 7120 <__exidx_end+0x16fc>
    711c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    7120:	4f2f706f 	svcmi	0x002f706f
    7124:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    7128:	502f5445 	eorpl	r5, pc, r5, asr #8
    712c:	534f4349 	movtpl	r4, #62281	; 0xf349
    7130:	6369502f 	cmnvs	r9, #47	; 0x2f
    7134:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    7138:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    713c:	43432f58 	movtmi	r2, #16216	; 0x3f58
    7140:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    7144:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    7148:	5f66722f 	svcpl	0x0066722f
    714c:	63746170 	cmnvs	r4, #112, 2
    7150:	00736568 	rsbseq	r6, r3, r8, ror #10
    7154:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 70a0 <__exidx_end+0x167c>
    7158:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    715c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    7160:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    7164:	6f746b73 	svcvs	0x00746b73
    7168:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    716c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    7170:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    7174:	2f534f43 	svccs	0x00534f43
    7178:	4f636950 	svcmi	0x00636950
    717c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    7180:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    7184:	6f682f00 	svcvs	0x00682f00
    7188:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    718c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    7190:	442f6e65 	strtmi	r6, [pc], #-3685	; 7198 <__exidx_end+0x1774>
    7194:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    7198:	4f2f706f 	svcmi	0x002f706f
    719c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    71a0:	502f5445 	eorpl	r5, pc, r5, asr #8
    71a4:	534f4349 	movtpl	r4, #62281	; 0xf349
    71a8:	6369502f 	cmnvs	r9, #47	; 0x2f
    71ac:	2f00534f 	svccs	0x0000534f
    71b0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    71b4:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    71b8:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    71bc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    71c0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    71c4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    71c8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    71cc:	4349502f 	movtmi	r5, #36911	; 0x902f
    71d0:	502f534f 	eorpl	r5, pc, pc, asr #6
    71d4:	534f6369 	movtpl	r6, #62313	; 0xf369
    71d8:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    71dc:	006c656e 	rsbeq	r6, ip, lr, ror #10
    71e0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    71e4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    71e8:	00010068 	andeq	r0, r1, r8, rrx
    71ec:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    71f0:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    71f4:	00010068 	andeq	r0, r1, r8, rrx
    71f8:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    71fc:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    7200:	00020068 	andeq	r0, r2, r8, rrx
    7204:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    7208:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    720c:	00000200 	andeq	r0, r0, r0, lsl #4
    7210:	6b636f6c 	blvs	18e2fc8 <__ccfg+0x18c3020>
    7214:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    7218:	66720000 	ldrbtvs	r0, [r2], -r0
    721c:	69616d5f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    7220:	786f626c 	stmdavc	pc!, {r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    7224:	0300682e 	movweq	r6, #2094	; 0x82e
    7228:	66720000 	ldrbtvs	r0, [r2], -r0
    722c:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 70b8 <__exidx_end+0x1694>
    7230:	5f6e6f6d 	svcpl	0x006e6f6d
    7234:	2e646d63 	cdpcs	13, 6, cr6, cr4, cr3, {3}
    7238:	00030068 	andeq	r0, r3, r8, rrx
    723c:	5f667200 	svcpl	0x00667200
    7240:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    7244:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    7248:	0300682e 	movweq	r6, #2094	; 0x82e
    724c:	66720000 	ldrbtvs	r0, [r2], -r0
    7250:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
    7254:	635f6863 	cmpvs	pc, #6488064	; 0x630000
    7258:	675f6570 			; <UNDEFINED> instruction: 0x675f6570
    725c:	73666e65 	cmnvc	r6, #1616	; 0x650
    7260:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    7264:	72000004 	andvc	r0, r0, #4
    7268:	61705f66 	cmnvs	r0, r6, ror #30
    726c:	5f686374 	svcpl	0x00686374
    7270:	5f656672 	svcpl	0x00656672
    7274:	666e6567 	strbtvs	r6, [lr], -r7, ror #10
    7278:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    727c:	00000400 	andeq	r0, r0, r0, lsl #8
    7280:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    7284:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    7288:	616d0000 	cmnvs	sp, r0
    728c:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    7290:	00000500 	andeq	r0, r0, r0, lsl #10
    7294:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    7298:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    729c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    72a0:	75620000 	strbvc	r0, [r2, #-0]!
    72a4:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    72a8:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    72ac:	00682e73 	rsbeq	r2, r8, r3, ror lr
    72b0:	73000005 	movwvc	r0, #5
    72b4:	6f697379 	svcvs	0x00697379
    72b8:	0600682e 	streq	r6, [r0], -lr, lsr #16
    72bc:	656b0000 	strbvs	r0, [fp, #-0]!
    72c0:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    72c4:	0700682e 	streq	r6, [r0, -lr, lsr #16]
    72c8:	6d730000 	ldclvs	0, cr0, [r3, #-0]
    72cc:	72747261 	rsbsvc	r7, r4, #268435462	; 0x10000006
    72d0:	65735f66 	ldrbvs	r5, [r3, #-3942]!	; 0xfffff09a
    72d4:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
    72d8:	682e7367 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}
    72dc:	00000500 	andeq	r0, r0, r0, lsl #10
    72e0:	72616d73 	rsbvc	r6, r1, #7360	; 0x1cc0
    72e4:	5f667274 	svcpl	0x00667274
    72e8:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
    72ec:	73676e69 	cmnvc	r7, #1680	; 0x690
    72f0:	5f706c5f 	svcpl	0x00706c5f
    72f4:	632e7268 			; <UNDEFINED> instruction: 0x632e7268
    72f8:	00000500 	andeq	r0, r0, r0, lsl #10
    72fc:	00019c00 	andeq	r9, r1, r0, lsl #24
    7300:	5f000200 	svcpl	0x00000200
    7304:	02000001 	andeq	r0, r0, #1
    7308:	0d0efb01 	vstreq	d15, [lr, #-4]
    730c:	01010100 	mrseq	r0, (UNDEF: 17)
    7310:	00000001 	andeq	r0, r0, r1
    7314:	01000001 	tsteq	r0, r1
    7318:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    731c:	2f2e2e2f 	svccs	0x002e2e2f
    7320:	642f2e2e 	strtvs	r2, [pc], #-3630	; 7328 <__exidx_end+0x1904>
    7324:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    7328:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    732c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7330:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7334:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7338:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    733c:	31303030 	teqcc	r0, r0, lsr r0
    7340:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7344:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7348:	61746562 	cmnvs	r4, r2, ror #10
    734c:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7350:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7354:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 718c <__exidx_end+0x1768>
    7358:	6f635c73 	svcvs	0x00635c73
    735c:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7360:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7364:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7368:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    736c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7370:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7374:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7378:	3130322d 	teqcc	r0, sp, lsr #4
    737c:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7380:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7384:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7388:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    738c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7390:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7394:	616d5c65 	cmnvs	sp, r5, ror #24
    7398:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    739c:	3a630065 	bcc	18c7538 <__ccfg+0x18a7590>
    73a0:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    73a4:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    73a8:	302e322e 	eorcc	r3, lr, lr, lsr #4
    73ac:	3030302e 	eorscc	r3, r0, lr, lsr #32
    73b0:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    73b4:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    73b8:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    73bc:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    73c0:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    73c4:	6f6f745c 	svcvs	0x006f745c
    73c8:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    73cc:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    73d0:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    73d4:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    73d8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    73dc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    73e0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    73e4:	5f342d69 	svcpl	0x00342d69
    73e8:	30322d39 	eorscc	r2, r2, r9, lsr sp
    73ec:	33713531 	cmncc	r1, #205520896	; 0xc400000
    73f0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    73f4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    73f8:	61652d65 	cmnvs	r5, r5, ror #26
    73fc:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7400:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7404:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    7408:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    740c:	2f2e2e2f 	svccs	0x002e2e2f
    7410:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7414:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    7418:	61000063 	tstvs	r0, r3, rrx
    741c:	632e6964 			; <UNDEFINED> instruction: 0x632e6964
    7420:	00000100 	andeq	r0, r0, r0, lsl #2
    7424:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    7428:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    742c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7430:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7434:	00000200 	andeq	r0, r0, r0, lsl #4
    7438:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    743c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    7440:	00030068 	andeq	r0, r3, r8, rrx
    7444:	5f776800 	svcpl	0x00776800
    7448:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    744c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7450:	72000004 	andvc	r0, r0, #4
    7454:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    7458:	00000100 	andeq	r0, r0, r0, lsl #2
    745c:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    7460:	00010068 	andeq	r0, r1, r8, rrx
    7464:	05000000 	streq	r0, [r0, #-0]
    7468:	00383802 	eorseq	r3, r8, r2, lsl #16
    746c:	01350300 	teqeq	r5, r0, lsl #6
    7470:	02002120 	andeq	r2, r0, #32, 2
    7474:	4b3d0104 	blmi	f4788c <__ccfg+0xf278e4>
    7478:	2c232f21 	stccs	15, cr2, [r3], #-132	; 0xffffff7c
    747c:	01000502 	tsteq	r0, r2, lsl #10
    7480:	02050001 	andeq	r0, r5, #1
    7484:	00000000 	andeq	r0, r0, r0
    7488:	0100c003 	tsteq	r0, r3
    748c:	02002f20 	andeq	r2, r0, #32, 30	; 0x80
    7490:	4b3d0104 	blmi	f478a8 <__ccfg+0xf27900>
    7494:	2c232f2f 	stccs	15, cr2, [r3], #-188	; 0xffffff44
    7498:	01000502 	tsteq	r0, r2, lsl #10
    749c:	00016701 	andeq	r6, r1, r1, lsl #14
    74a0:	47000200 	strmi	r0, [r0, -r0, lsl #4]
    74a4:	02000001 	andeq	r0, r0, #1
    74a8:	0d0efb01 	vstreq	d15, [lr, #-4]
    74ac:	01010100 	mrseq	r0, (UNDEF: 17)
    74b0:	00000001 	andeq	r0, r0, r1
    74b4:	01000001 	tsteq	r0, r1
    74b8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    74bc:	2f2e2e2f 	svccs	0x002e2e2f
    74c0:	642f2e2e 	strtvs	r2, [pc], #-3630	; 74c8 <__exidx_end+0x1aa4>
    74c4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    74c8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    74cc:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    74d0:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    74d4:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    74d8:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    74dc:	31303030 	teqcc	r0, r0, lsr r0
    74e0:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    74e4:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    74e8:	61746562 	cmnvs	r4, r2, ror #10
    74ec:	63635c32 	cmnvs	r3, #12800	; 0x3200
    74f0:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    74f4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 732c <__exidx_end+0x1908>
    74f8:	6f635c73 	svcvs	0x00635c73
    74fc:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7500:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7504:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7508:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    750c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7510:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7514:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7518:	3130322d 	teqcc	r0, sp, lsr #4
    751c:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7520:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7524:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7528:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    752c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7530:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7534:	616d5c65 	cmnvs	sp, r5, ror #24
    7538:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    753c:	3a630065 	bcc	18c76d8 <__ccfg+0x18a7730>
    7540:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    7544:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7548:	302e322e 	eorcc	r3, lr, lr, lsr #4
    754c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7550:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7554:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7558:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    755c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7560:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7564:	6f6f745c 	svcvs	0x006f745c
    7568:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    756c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7570:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7574:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7578:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    757c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7580:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7584:	5f342d69 	svcpl	0x00342d69
    7588:	30322d39 	eorscc	r2, r2, r9, lsr sp
    758c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7590:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    7594:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7598:	61652d65 	cmnvs	r5, r5, ror #26
    759c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    75a0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    75a4:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    75a8:	00007379 	andeq	r7, r0, r9, ror r3
    75ac:	5f6e6f61 	svcpl	0x006e6f61
    75b0:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    75b4:	632e6e6f 			; <UNDEFINED> instruction: 0x632e6e6f
    75b8:	00000100 	andeq	r0, r0, r0, lsl #2
    75bc:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    75c0:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    75c4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    75c8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    75cc:	00000200 	andeq	r0, r0, r0, lsl #4
    75d0:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    75d4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    75d8:	00030068 	andeq	r0, r3, r8, rrx
    75dc:	6e6f6100 	powvse	f6, f7, f0
    75e0:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    75e4:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    75e8:	00010068 	andeq	r0, r1, r8, rrx
    75ec:	05000000 	streq	r0, [r0, #-0]
    75f0:	00386002 	eorseq	r6, r8, r2
    75f4:	013c0300 	teqeq	ip, r0, lsl #6
    75f8:	032f361a 			; <UNDEFINED> instruction: 0x032f361a
    75fc:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
    7600:	023d4c2e 	eorseq	r4, sp, #11776	; 0x2e00
    7604:	01010009 	tsteq	r1, r9
    7608:	000001a9 	andeq	r0, r0, r9, lsr #3
    760c:	01410002 	cmpeq	r1, r2
    7610:	01020000 	mrseq	r0, (UNDEF: 2)
    7614:	000d0efb 	strdeq	r0, [sp], -fp
    7618:	01010101 	tsteq	r1, r1, lsl #2
    761c:	01000000 	mrseq	r0, (UNDEF: 0)
    7620:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    7624:	2f2e2e2f 	svccs	0x002e2e2f
    7628:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    762c:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    7630:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    7634:	0062696c 	rsbeq	r6, r2, ip, ror #18
    7638:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    763c:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7640:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7644:	302e302e 	eorcc	r3, lr, lr, lsr #32
    7648:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    764c:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7650:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7654:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7658:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    765c:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7660:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7664:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 74fc <__exidx_end+0x1ad8>
    7668:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    766c:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7670:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7674:	6f6e2d6d 	svcvs	0x006e2d6d
    7678:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    767c:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7680:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7684:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7688:	615c3371 	cmpvs	ip, r1, ror r3
    768c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7690:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7694:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7698:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    769c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    76a0:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    76a4:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    76a8:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    76ac:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    76b0:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    76b4:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    76b8:	31303030 	teqcc	r0, r0, lsr r0
    76bc:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    76c0:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    76c4:	61746562 	cmnvs	r4, r2, ror #10
    76c8:	63635c32 	cmnvs	r3, #12800	; 0x3200
    76cc:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    76d0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7508 <__exidx_end+0x1ae4>
    76d4:	6f635c73 	svcvs	0x00635c73
    76d8:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    76dc:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    76e0:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    76e4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    76e8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    76ec:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    76f0:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    76f4:	3130322d 	teqcc	r0, sp, lsr #4
    76f8:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    76fc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7700:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7704:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7708:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    770c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7710:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    7714:	61000073 	tstvs	r0, r3, ror r0
    7718:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
    771c:	632e6374 			; <UNDEFINED> instruction: 0x632e6374
    7720:	00000100 	andeq	r0, r0, r0, lsl #2
    7724:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    7728:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    772c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7730:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7734:	00000200 	andeq	r0, r0, r0, lsl #4
    7738:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    773c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    7740:	00030068 	andeq	r0, r3, r8, rrx
    7744:	6e6f6100 	powvse	f6, f7, f0
    7748:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
    774c:	0100682e 	tsteq	r0, lr, lsr #16
    7750:	00000000 	andeq	r0, r0, r0
    7754:	38900205 	ldmcc	r0, {r0, r2, r9}
    7758:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    775c:	04020001 	streq	r0, [r2], #-1
    7760:	010a0301 	tsteq	sl, r1, lsl #6
    7764:	01040200 	mrseq	r0, R12_usr
    7768:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    776c:	02001f01 	andeq	r1, r0, #1, 30
    7770:	00210104 	eoreq	r0, r1, r4, lsl #2
    7774:	21010402 	tstcs	r1, r2, lsl #8
    7778:	01040200 	mrseq	r0, R12_usr
    777c:	02213021 	eoreq	r3, r1, #33	; 0x21
    7780:	01010008 	tsteq	r1, r8
    7784:	b0020500 	andlt	r0, r2, r0, lsl #10
    7788:	03000038 	movweq	r0, #56	; 0x38
    778c:	000100d7 	ldrdeq	r0, [r1], -r7
    7790:	03010402 	movweq	r0, #5122	; 0x1402
    7794:	0200010c 	andeq	r0, r0, #12, 2
    7798:	00210104 	eoreq	r0, r1, r4, lsl #2
    779c:	1f010402 	svcne	0x00010402
    77a0:	01040200 	mrseq	r0, R12_usr
    77a4:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    77a8:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    77ac:	31210104 			; <UNDEFINED> instruction: 0x31210104
    77b0:	01000502 	tsteq	r0, r2, lsl #10
    77b4:	00019c01 	andeq	r9, r1, r1, lsl #24
    77b8:	39000200 	stmdbcc	r0, {r9}
    77bc:	02000001 	andeq	r0, r0, #1
    77c0:	0d0efb01 	vstreq	d15, [lr, #-4]
    77c4:	01010100 	mrseq	r0, (UNDEF: 17)
    77c8:	00000001 	andeq	r0, r0, r1
    77cc:	01000001 	tsteq	r0, r1
    77d0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    77d4:	2f2e2e2f 	svccs	0x002e2e2f
    77d8:	642f2e2e 	strtvs	r2, [pc], #-3630	; 77e0 <__exidx_end+0x1dbc>
    77dc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    77e0:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    77e4:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    77e8:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    77ec:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    77f0:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    77f4:	31303030 	teqcc	r0, r0, lsr r0
    77f8:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    77fc:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7800:	61746562 	cmnvs	r4, r2, ror #10
    7804:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7808:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    780c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7644 <__exidx_end+0x1c20>
    7810:	6f635c73 	svcvs	0x00635c73
    7814:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7818:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    781c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7820:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7824:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7828:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    782c:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7830:	3130322d 	teqcc	r0, sp, lsr #4
    7834:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7838:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    783c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7840:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7844:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7848:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    784c:	616d5c65 	cmnvs	sp, r5, ror #24
    7850:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    7854:	3a630065 	bcc	18c79f0 <__ccfg+0x18a7a48>
    7858:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    785c:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7860:	302e322e 	eorcc	r3, lr, lr, lsr #4
    7864:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7868:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    786c:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7870:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    7874:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7878:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    787c:	6f6f745c 	svcvs	0x006f745c
    7880:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    7884:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7888:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    788c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7890:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7894:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7898:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    789c:	5f342d69 	svcpl	0x00342d69
    78a0:	30322d39 	eorscc	r2, r2, r9, lsr sp
    78a4:	33713531 	cmncc	r1, #205520896	; 0xc400000
    78a8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    78ac:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    78b0:	61652d65 	cmnvs	r5, r5, ror #26
    78b4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    78b8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    78bc:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    78c0:	00007379 	andeq	r7, r0, r9, ror r3
    78c4:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    78c8:	00010063 	andeq	r0, r1, r3, rrx
    78cc:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    78d0:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    78d4:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    78d8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    78dc:	00020068 	andeq	r0, r2, r8, rrx
    78e0:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    78e4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    78e8:	0300682e 	movweq	r6, #2094	; 0x82e
    78ec:	70630000 	rsbvc	r0, r3, r0
    78f0:	00682e75 	rsbeq	r2, r8, r5, ror lr
    78f4:	00000001 	andeq	r0, r0, r1
    78f8:	c8020500 	stmdagt	r2, {r8, sl}
    78fc:	03000038 	movweq	r0, #56	; 0x38
    7900:	030100f5 	movweq	r0, #4341	; 0x10f5
    7904:	04020112 	streq	r0, [r2], #-274	; 0xfffffeee
    7908:	00010100 	andeq	r0, r1, r0, lsl #2
    790c:	00000205 	andeq	r0, r0, r5, lsl #4
    7910:	c0030000 	andgt	r0, r3, r0
    7914:	11030101 	tstne	r3, r1, lsl #2
    7918:	00030201 	andeq	r0, r3, r1, lsl #4
    791c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7920:	0038d002 	eorseq	sp, r8, r2
    7924:	028d0300 	addeq	r0, sp, #0, 6
    7928:	01120301 	tsteq	r2, r1, lsl #6
    792c:	01000402 	tsteq	r0, r2, lsl #8
    7930:	02050001 	andeq	r0, r5, #1
    7934:	00000000 	andeq	r0, r0, r0
    7938:	0102d803 	tsteq	r2, r3, lsl #16
    793c:	02011103 	andeq	r1, r1, #-1073741824	; 0xc0000000
    7940:	01010003 	tsteq	r1, r3
    7944:	00020500 	andeq	r0, r2, r0, lsl #10
    7948:	03000000 	movweq	r0, #0
    794c:	1601039e 			; <UNDEFINED> instruction: 0x1601039e
    7950:	01000402 	tsteq	r0, r2, lsl #8
    7954:	0002d601 	andeq	sp, r2, r1, lsl #12
    7958:	7c000200 	sfmvc	f0, 4, [r0], {-0}
    795c:	02000001 	andeq	r0, r0, #1
    7960:	0d0efb01 	vstreq	d15, [lr, #-4]
    7964:	01010100 	mrseq	r0, (UNDEF: 17)
    7968:	00000001 	andeq	r0, r0, r1
    796c:	01000001 	tsteq	r0, r1
    7970:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7974:	2f2e2e2f 	svccs	0x002e2e2f
    7978:	642f2e2e 	strtvs	r2, [pc], #-3630	; 7980 <__exidx_end+0x1f5c>
    797c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    7980:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    7984:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7988:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    798c:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7990:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7994:	31303030 	teqcc	r0, r0, lsr r0
    7998:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    799c:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    79a0:	61746562 	cmnvs	r4, r2, ror #10
    79a4:	63635c32 	cmnvs	r3, #12800	; 0x3200
    79a8:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    79ac:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 77e4 <__exidx_end+0x1dc0>
    79b0:	6f635c73 	svcvs	0x00635c73
    79b4:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    79b8:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    79bc:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    79c0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    79c4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    79c8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    79cc:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    79d0:	3130322d 	teqcc	r0, sp, lsr #4
    79d4:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    79d8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    79dc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    79e0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    79e4:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    79e8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    79ec:	616d5c65 	cmnvs	sp, r5, ror #24
    79f0:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    79f4:	3a630065 	bcc	18c7b90 <__ccfg+0x18a7be8>
    79f8:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    79fc:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7a00:	302e322e 	eorcc	r3, lr, lr, lsr #4
    7a04:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7a08:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7a0c:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7a10:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    7a14:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7a18:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7a1c:	6f6f745c 	svcvs	0x006f745c
    7a20:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    7a24:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7a28:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7a2c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7a30:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7a34:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7a38:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7a3c:	5f342d69 	svcpl	0x00342d69
    7a40:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7a44:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7a48:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    7a4c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7a50:	61652d65 	cmnvs	r5, r5, ror #26
    7a54:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7a58:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7a5c:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    7a60:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    7a64:	2f2e2e2f 	svccs	0x002e2e2f
    7a68:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7a6c:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    7a70:	6f000063 	svcvs	0x00000063
    7a74:	632e6373 			; <UNDEFINED> instruction: 0x632e6373
    7a78:	00000100 	andeq	r0, r0, r0, lsl #2
    7a7c:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    7a80:	00010068 	andeq	r0, r1, r8, rrx
    7a84:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    7a88:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    7a8c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    7a90:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    7a94:	00020068 	andeq	r0, r2, r8, rrx
    7a98:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    7a9c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    7aa0:	0300682e 	movweq	r6, #2094	; 0x82e
    7aa4:	77680000 	strbvc	r0, [r8, -r0]!
    7aa8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7aac:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7ab0:	00000400 	andeq	r0, r0, r0, lsl #8
    7ab4:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    7ab8:	00010068 	andeq	r0, r1, r8, rrx
    7abc:	6e6f6100 	powvse	f6, f7, f0
    7ac0:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
    7ac4:	0100682e 	tsteq	r0, lr, lsr #16
    7ac8:	6f610000 	svcvs	0x00610000
    7acc:	61625f6e 	cmnvs	r2, lr, ror #30
    7ad0:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    7ad4:	0100682e 	tsteq	r0, lr, lsr #16
    7ad8:	00000000 	andeq	r0, r0, r0
    7adc:	38d80205 	ldmcc	r8, {r0, r2, r9}^
    7ae0:	e5030000 	str	r0, [r3, #-0]
    7ae4:	03200100 	nopeq	{0}	; <UNPREDICTABLE>
    7ae8:	7103200f 	tstvc	r3, pc
    7aec:	200f0320 	andcs	r0, pc, r0, lsr #6
    7af0:	9e090325 	cdpls	3, 0, cr0, cr9, cr5, {1}
    7af4:	9e090330 	mcrls	3, 0, r0, cr9, cr0, {1}
    7af8:	0702a333 	smladxeq	r2, r3, r3, sl
    7afc:	00010100 	andeq	r0, r1, r0, lsl #2
    7b00:	39340205 	ldmdbcc	r4!, {r0, r2, r9}
    7b04:	a0030000 	andge	r0, r3, r0
    7b08:	0c030101 	stfeqs	f0, [r3], {1}
    7b0c:	0388222e 	orreq	r2, r8, #-536870910	; 0xe0000002
    7b10:	25263c7a 	strcs	r3, [r6, #-3194]!	; 0xfffff386
    7b14:	01000602 	tsteq	r0, r2, lsl #12
    7b18:	02050001 	andeq	r0, r5, #1
    7b1c:	00000000 	andeq	r0, r0, r0
    7b20:	0101c203 	tsteq	r1, r3, lsl #4
    7b24:	34912520 	ldrcc	r2, [r1], #1312	; 0x520
    7b28:	272e7903 	strcs	r7, [lr, -r3, lsl #18]!
    7b2c:	262e7a03 	strtcs	r7, [lr], -r3, lsl #20
    7b30:	01040200 	mrseq	r0, R12_usr
    7b34:	00207a03 	eoreq	r7, r0, r3, lsl #20
    7b38:	50010402 	andpl	r0, r1, r2, lsl #8
    7b3c:	1f302d30 	svcne	0x00302d30
    7b40:	1f3d4b24 	svcne	0x003d4b24
    7b44:	326c3d34 	rsbcc	r3, ip, #52, 26	; 0xd00
    7b48:	03666d03 	cmneq	r6, #3, 26	; 0xc0
    7b4c:	02263c10 	eoreq	r3, r6, #16, 24	; 0x1000
    7b50:	01010009 	tsteq	r1, r9
    7b54:	60020500 	andvs	r0, r2, r0, lsl #10
    7b58:	03000039 	movweq	r0, #57	; 0x39
    7b5c:	210101f3 	strdcs	r0, [r1, -r3]
    7b60:	0007024b 	andeq	r0, r7, fp, asr #4
    7b64:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7b68:	00397802 	eorseq	r7, r9, r2, lsl #16
    7b6c:	02800300 	addeq	r0, r0, #0, 6
    7b70:	02042401 	andeq	r2, r4, #16777216	; 0x1000000
    7b74:	04582203 	ldrbeq	r2, [r8], #-515	; 0xfffffdfd
    7b78:	82620301 	rsbhi	r0, r2, #67108864	; 0x4000000
    7b7c:	3c030204 	sfmcc	f0, 4, [r3], {4}
    7b80:	03010420 	movweq	r0, #5152	; 0x1420
    7b84:	1f3d4a4a 	svcne	0x003d4a4a
    7b88:	221f3d21 	andscs	r3, pc, #2112	; 0x840
    7b8c:	22301f30 	eorscs	r1, r0, #48, 30	; 0xc0
    7b90:	000c0223 	andeq	r0, ip, r3, lsr #4
    7b94:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7b98:	0039d802 	eorseq	sp, r9, r2, lsl #16
    7b9c:	02a30300 	adceq	r0, r3, #0, 6
    7ba0:	044f2501 	strbeq	r2, [pc], #-1281	; 7ba8 <__exidx_end+0x2184>
    7ba4:	4a170302 	bmi	5c87b4 <__ccfg+0x5a880c>
    7ba8:	6d030104 	stfvss	f0, [r3, #-16]
    7bac:	09024b4a 	stmdbeq	r2, {r1, r3, r6, r8, r9, fp, lr}
    7bb0:	00010100 	andeq	r0, r1, r0, lsl #2
    7bb4:	00000205 	andeq	r0, r0, r5, lsl #4
    7bb8:	bc030000 	stclt	0, cr0, [r3], {-0}
    7bbc:	03220102 			; <UNDEFINED> instruction: 0x03220102
    7bc0:	69032017 	stmdbvs	r3, {r0, r1, r2, r4, sp}
    7bc4:	10032820 	andne	r2, r3, r0, lsr #16
    7bc8:	2e6c033c 	mcrcs	3, 3, r0, cr12, cr12, {1}
    7bcc:	032e1503 			; <UNDEFINED> instruction: 0x032e1503
    7bd0:	1303586d 	movwne	r5, #14445	; 0x386d
    7bd4:	206f0320 	rsbcs	r0, pc, r0, lsr #6
    7bd8:	3f201103 	svccc	0x00201103
    7bdc:	01000602 	tsteq	r0, r2, lsl #12
    7be0:	02050001 	andeq	r0, r5, #1
    7be4:	00000000 	andeq	r0, r0, r0
    7be8:	0102e303 	tsteq	r2, r3, lsl #6
    7bec:	4d012103 	stfmis	f2, [r1, #-12]
    7bf0:	01000202 	tsteq	r0, r2, lsl #4
    7bf4:	02050001 	andeq	r0, r5, #1
    7bf8:	00000000 	andeq	r0, r0, r0
    7bfc:	01039003 	tsteq	r3, r3
    7c00:	21201003 			; <UNDEFINED> instruction: 0x21201003
    7c04:	0021211f 	eoreq	r2, r1, pc, lsl r1
    7c08:	3e010402 	cdpcc	4, 0, cr0, cr1, cr2, {0}
    7c0c:	01040200 	mrseq	r0, R12_usr
    7c10:	1d313d3d 	ldcne	13, cr3, [r1, #-244]!	; 0xffffff0c
    7c14:	00070234 	andeq	r0, r7, r4, lsr r2
    7c18:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7c1c:	00000002 	andeq	r0, r0, r2
    7c20:	03b50300 			; <UNDEFINED> instruction: 0x03b50300
    7c24:	2c311701 	ldccs	7, cr1, [r1], #-4
    7c28:	05023d33 	streq	r3, [r2, #-3379]	; 0xfffff2cd
    7c2c:	a7010100 	strge	r0, [r1, -r0, lsl #2]
    7c30:	02000003 	andeq	r0, r0, #3
    7c34:	00026500 	andeq	r6, r2, r0, lsl #10
    7c38:	fb010200 	blx	48442 <__ccfg+0x2849a>
    7c3c:	01000d0e 	tsteq	r0, lr, lsl #26
    7c40:	00010101 	andeq	r0, r1, r1, lsl #2
    7c44:	00010000 	andeq	r0, r1, r0
    7c48:	2f2e0100 	svccs	0x002e0100
    7c4c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7c50:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7c54:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    7c58:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    7c5c:	63006269 	movwvs	r6, #617	; 0x269
    7c60:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    7c64:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7c68:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7c6c:	30302e30 	eorscc	r2, r0, r0, lsr lr
    7c70:	5f393130 	svcpl	0x00393130
    7c74:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7c78:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7c7c:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    7c80:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7c84:	6f745c36 	svcvs	0x00745c36
    7c88:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7c8c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    7c90:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7c94:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7c98:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7c9c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7ca0:	61652d65 	cmnvs	r5, r5, ror #26
    7ca4:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    7ca8:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7cac:	71353130 	teqvc	r5, r0, lsr r1
    7cb0:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    7cb4:	6f6e2d6d 	svcvs	0x006e2d6d
    7cb8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7cbc:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    7cc0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7cc4:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    7cc8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    7ccc:	00656e69 	rsbeq	r6, r5, r9, ror #28
    7cd0:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7cd4:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7cd8:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7cdc:	302e302e 	eorcc	r3, lr, lr, lsr #32
    7ce0:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7ce4:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7ce8:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7cec:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7cf0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7cf4:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7cf8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7cfc:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7b94 <__exidx_end+0x2170>
    7d00:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7d04:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7d08:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7d0c:	6f6e2d6d 	svcvs	0x006e2d6d
    7d10:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7d14:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7d18:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7d1c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7d20:	615c3371 	cmpvs	ip, r1, ror r3
    7d24:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7d28:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7d2c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7d30:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7d34:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7d38:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    7d3c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7d40:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7d44:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7d48:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7d4c:	31303030 	teqcc	r0, r0, lsr r0
    7d50:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7d54:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7d58:	61746562 	cmnvs	r4, r2, ror #10
    7d5c:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7d60:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7d64:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7b9c <__exidx_end+0x2178>
    7d68:	6f635c73 	svcvs	0x00635c73
    7d6c:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7d70:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7d74:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7d78:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7d7c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7d80:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7d84:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7d88:	3130322d 	teqcc	r0, sp, lsr #4
    7d8c:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7d90:	5c62696c 			; <UNDEFINED> instruction: 0x5c62696c
    7d94:	5c636367 	stclpl	3, cr6, [r3], #-412	; 0xfffffe64
    7d98:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7d9c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7da0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7da4:	2e345c69 	cdpcs	12, 3, cr5, cr4, cr9, {3}
    7da8:	5c332e39 	ldcpl	14, cr2, [r3], #-228	; 0xffffff1c
    7dac:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7db0:	00656475 	rsbeq	r6, r5, r5, ror r4
    7db4:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7db8:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7dbc:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7dc0:	302e302e 	eorcc	r3, lr, lr, lsr #32
    7dc4:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7dc8:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7dcc:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7dd0:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7dd4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7dd8:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7ddc:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7de0:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7c78 <__exidx_end+0x2254>
    7de4:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7de8:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7dec:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7df0:	6f6e2d6d 	svcvs	0x006e2d6d
    7df4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7df8:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7dfc:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7e00:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7e04:	615c3371 	cmpvs	ip, r1, ror r3
    7e08:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7e0c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7e10:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7e14:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7e18:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7e1c:	66720000 	ldrbtvs	r0, [r2], -r0
    7e20:	00632e63 	rsbeq	r2, r3, r3, ror #28
    7e24:	72000001 	andvc	r0, r0, #1
    7e28:	682e6366 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, sp, lr}
    7e2c:	00000100 	andeq	r0, r0, r0, lsl #2
    7e30:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    7e34:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    7e38:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7e3c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7e40:	00000200 	andeq	r0, r0, r0, lsl #4
    7e44:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    7e48:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    7e4c:	00030068 	andeq	r0, r3, r8, rrx
    7e50:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    7e54:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    7e58:	00040068 	andeq	r0, r4, r8, rrx
    7e5c:	5f667200 	svcpl	0x00667200
    7e60:	6c69616d 	stfvse	f6, [r9], #-436	; 0xfffffe4c
    7e64:	2e786f62 	cdpcs	15, 7, cr6, cr8, cr2, {3}
    7e68:	00010068 	andeq	r0, r1, r8, rrx
    7e6c:	5f667200 	svcpl	0x00667200
    7e70:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    7e74:	635f6e6f 	cmpvs	pc, #1776	; 0x6f0
    7e78:	682e646d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, sp, lr}
    7e7c:	00000100 	andeq	r0, r0, r0, lsl #2
    7e80:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    7e84:	5f706f72 	svcpl	0x00706f72
    7e88:	2e646d63 	cdpcs	13, 6, cr6, cr4, cr3, {3}
    7e8c:	00010068 	andeq	r0, r1, r8, rrx
    7e90:	72747300 	rsbsvc	r7, r4, #0, 6
    7e94:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    7e98:	00050068 	andeq	r0, r5, r8, rrx
    7e9c:	05000000 	streq	r0, [r0, #-0]
    7ea0:	00000002 	andeq	r0, r0, r2
    7ea4:	00e80300 	rsceq	r0, r8, r0, lsl #6
    7ea8:	02001301 	andeq	r1, r0, #67108864	; 0x4000000
    7eac:	00310104 	eorseq	r0, r1, r4, lsl #2
    7eb0:	2f010402 	svccs	0x00010402
    7eb4:	0003023f 	andeq	r0, r3, pc, lsr r2
    7eb8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7ebc:	003a0c02 	eorseq	r0, sl, r2, lsl #24
    7ec0:	00fa0300 	rscseq	r0, sl, r0, lsl #6
    7ec4:	04020001 	streq	r0, [r2], #-1
    7ec8:	02041301 	andeq	r1, r4, #67108864	; 0x4000000
    7ecc:	4a01c703 	bmi	79ae0 <__ccfg+0x59b38>
    7ed0:	bd030104 	stflts	f0, [r3, #-16]
    7ed4:	02002e7e 	andeq	r2, r0, #2016	; 0x7e0
    7ed8:	04220104 	strteq	r0, [r2], #-260	; 0xfffffefc
    7edc:	01c10302 	biceq	r0, r1, r2, lsl #6
    7ee0:	0301043c 	movweq	r0, #5180	; 0x143c
    7ee4:	2f3c7ec2 	svccs	0x003c7ec2
    7ee8:	01000502 	tsteq	r0, r2, lsl #10
    7eec:	02050001 	andeq	r0, r5, #1
    7ef0:	00003a34 	andeq	r3, r0, r4, lsr sl
    7ef4:	01018f03 	tsteq	r1, r3, lsl #30
    7ef8:	251d2314 	ldrcs	r2, [sp, #-788]	; 0xfffffcec
    7efc:	2f3d761b 	svccs	0x003d761b
    7f00:	222f211f 	eorcs	r2, pc, #-1073741817	; 0xc0000007
    7f04:	2121212d 			; <UNDEFINED> instruction: 0x2121212d
    7f08:	01000c02 	tsteq	r0, r2, lsl #24
    7f0c:	02050001 	andeq	r0, r5, #1
    7f10:	00003a80 	andeq	r3, r0, r0, lsl #21
    7f14:	0101a403 	tsteq	r1, r3, lsl #8
    7f18:	1c2f9615 	stcne	6, cr9, [pc], #-84	; 7ecc <__exidx_end+0x24a8>
    7f1c:	21252521 			; <UNDEFINED> instruction: 0x21252521
    7f20:	0a032f1f 	beq	d3ba4 <__ccfg+0xb3bfc>
    7f24:	2f3d3d66 	svccs	0x003d3d66
    7f28:	03587303 	cmpeq	r8, #201326592	; 0xc000000
    7f2c:	3d3d6618 	ldccc	6, cr6, [sp, #-96]!	; 0xffffffa0
    7f30:	5868032f 	stmdapl	r8!, {r0, r1, r2, r3, r5, r8, r9}^
    7f34:	032f3d3d 			; <UNDEFINED> instruction: 0x032f3d3d
    7f38:	3d3d580b 	ldccc	8, cr5, [sp, #-44]!	; 0xffffffd4
    7f3c:	580b032f 	stmdapl	fp, {r0, r1, r2, r3, r5, r8, r9}
    7f40:	5c2f3d3d 	stcpl	13, cr3, [pc], #-244	; 7e54 <__exidx_end+0x2430>
    7f44:	5c2f3d3d 	stcpl	13, cr3, [pc], #-244	; 7e58 <__exidx_end+0x2434>
    7f48:	492f3e3d 	stmdbmi	pc!, {r0, r2, r3, r4, r5, r9, sl, fp, ip, sp}	; <UNPREDICTABLE>
    7f4c:	01002f02 	tsteq	r0, r2, lsl #30
    7f50:	02050001 	andeq	r0, r5, #1
    7f54:	00003bd0 	ldrdeq	r3, [r0], -r0
    7f58:	0101f303 	tsteq	r1, r3, lsl #6	; <UNPREDICTABLE>
    7f5c:	03010903 	movweq	r0, #6403	; 0x1903
    7f60:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
    7f64:	2121af20 			; <UNDEFINED> instruction: 0x2121af20
    7f68:	22221f23 	eorcs	r1, r2, #35, 30	; 0x8c
    7f6c:	0b03262f 	bleq	d1830 <__ccfg+0xb1888>
    7f70:	5a2f2d4a 	bpl	bd34a0 <__ccfg+0xbb34f8>
    7f74:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
    7f78:	2e760302 	cdpcs	3, 7, cr0, cr6, cr2, {0}
    7f7c:	033c1103 	teqeq	ip, #-1073741824	; 0xc0000000
    7f80:	6f03f214 	svcvs	0x0003f214
    7f84:	4a23032e 	bmi	8c8c44 <__ccfg+0x8a8c9c>
    7f88:	4c3c6203 	lfmmi	f6, 4, [ip], #-12
    7f8c:	32363222 	eorscc	r3, r6, #536870914	; 0x20000002
    7f90:	0350224c 	cmpeq	r0, #76, 4	; 0xc0000004
    7f94:	595eac09 	ldmdbpl	lr, {r0, r3, sl, fp, sp, pc}^
    7f98:	62033626 	andvs	r3, r3, #39845888	; 0x2600000
    7f9c:	00160266 	andseq	r0, r6, r6, ror #4
    7fa0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7fa4:	003ce802 	eorseq	lr, ip, r2, lsl #16
    7fa8:	02f70300 	rscseq	r0, r7, #0, 6
    7fac:	02ad2f01 	adceq	r2, sp, #1, 30
    7fb0:	01010003 	tsteq	r1, r3
    7fb4:	00020500 	andeq	r0, r2, r0, lsl #10
    7fb8:	03000000 	movweq	r0, #0
    7fbc:	24010382 	strcs	r0, [r1], #-898	; 0xfffffc7e
    7fc0:	002a025d 	eoreq	r0, sl, sp, asr r2
    7fc4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7fc8:	003d0802 	eorseq	r0, sp, r2, lsl #16
    7fcc:	03960300 	orrseq	r0, r6, #0, 6
    7fd0:	3e232101 	sufccs	f2, f3, f1
    7fd4:	00060241 	andeq	r0, r6, r1, asr #4
    7fd8:	01e90101 	mvneq	r0, r1, lsl #2
    7fdc:	00020000 	andeq	r0, r2, r0
    7fe0:	00000167 	andeq	r0, r0, r7, ror #2
    7fe4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    7fe8:	0101000d 	tsteq	r1, sp
    7fec:	00000101 	andeq	r0, r0, r1, lsl #2
    7ff0:	00000100 	andeq	r0, r0, r0, lsl #2
    7ff4:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    7ff8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7ffc:	2f2e2e2f 	svccs	0x002e2e2f
    8000:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    8004:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    8008:	3a630062 	bcc	18c8198 <__ccfg+0x18a81f0>
    800c:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    8010:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    8014:	302e322e 	eorcc	r3, lr, lr, lsr #4
    8018:	3030302e 	eorscc	r3, r0, lr, lsr #32
    801c:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    8020:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    8024:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    8028:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    802c:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    8030:	6f6f745c 	svcvs	0x006f745c
    8034:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    8038:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    803c:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    8040:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    8044:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8048:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    804c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8050:	5f342d69 	svcpl	0x00342d69
    8054:	30322d39 	eorscc	r2, r2, r9, lsr sp
    8058:	33713531 	cmncc	r1, #205520896	; 0xc400000
    805c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    8060:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8064:	61652d65 	cmnvs	r5, r5, ror #26
    8068:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    806c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8070:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    8074:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    8078:	6300656e 	movwvs	r6, #1390	; 0x56e
    807c:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    8080:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8084:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    8088:	30302e30 	eorscc	r2, r0, r0, lsr lr
    808c:	5f393130 	svcpl	0x00393130
    8090:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    8094:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    8098:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    809c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    80a0:	6f745c36 	svcvs	0x00745c36
    80a4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    80a8:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    80ac:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    80b0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    80b4:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    80b8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    80bc:	61652d65 	cmnvs	r5, r5, ror #26
    80c0:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    80c4:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    80c8:	71353130 	teqvc	r5, r0, lsr r1
    80cc:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    80d0:	6f6e2d6d 	svcvs	0x006e2d6d
    80d4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    80d8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    80dc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    80e0:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    80e4:	00737973 	rsbseq	r7, r3, r3, ror r9
    80e8:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    80ec:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
    80f0:	00000100 	andeq	r0, r0, r0, lsl #2
    80f4:	5f6e6f61 	svcpl	0x006e6f61
    80f8:	2e637577 	mcrcs	5, 3, r7, cr3, cr7, {3}
    80fc:	00010068 	andeq	r0, r1, r8, rrx
    8100:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    8104:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    8108:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    810c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    8110:	00020068 	andeq	r0, r2, r8, rrx
    8114:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    8118:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    811c:	0300682e 	movweq	r6, #2094	; 0x82e
    8120:	65730000 	ldrbvs	r0, [r3, #-0]!
    8124:	5f707574 	svcpl	0x00707574
    8128:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    812c:	00010068 	andeq	r0, r1, r8, rrx
    8130:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    8134:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    8138:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    813c:	73000001 	movwvc	r0, #1
    8140:	70757465 	rsbsvc	r7, r5, r5, ror #8
    8144:	0100682e 	tsteq	r0, lr, lsr #16
    8148:	00000000 	andeq	r0, r0, r0
    814c:	3d240205 	sfmcc	f0, 4, [r4, #-20]!	; 0xffffffec
    8150:	8d030000 	stchi	0, cr0, [r3, #-0]
    8154:	03200102 			; <UNDEFINED> instruction: 0x03200102
    8158:	0200200a 	andeq	r2, r0, #10
    815c:	4f410104 	svcmi	0x00410104
    8160:	212d4342 			; <UNDEFINED> instruction: 0x212d4342
    8164:	0302041f 	movweq	r0, #9247	; 0x241f
    8168:	04660487 	strbteq	r0, [r6], #-1159	; 0xfffffb79
    816c:	7c860301 	stcvc	3, cr0, [r6], {1}
    8170:	0342363c 	movteq	r3, #9788	; 0x263c
    8174:	3d2d4a09 	vpushcc	{s8-s16}
    8178:	2f1f2f2f 	svccs	0x001f2f2f
    817c:	3123212f 			; <UNDEFINED> instruction: 0x3123212f
    8180:	0a032548 	beq	d16a8 <__ccfg+0xb1700>
    8184:	3f5d4158 	svccc	0x005d4158
    8188:	01001e02 	tsteq	r0, r2, lsl #28
    818c:	02050001 	andeq	r0, r5, #1
    8190:	00003df8 	strdeq	r3, [r0], -r8
    8194:	0100f003 	tsteq	r0, r3	; <UNPREDICTABLE>
    8198:	33433028 	movtcc	r3, #12328	; 0x3028
    819c:	3c090341 	stccc	3, cr0, [r9], {65}	; 0x41
    81a0:	2e0b0333 	mcrcs	3, 0, r0, cr11, cr3, {1}
    81a4:	273c0e03 	ldrcs	r0, [ip, -r3, lsl #28]!
    81a8:	03207903 			; <UNDEFINED> instruction: 0x03207903
    81ac:	09032015 	stmdbeq	r3, {r0, r2, r4, sp}
    81b0:	4967422e 	stmdbmi	r7!, {r1, r2, r3, r5, r9, lr}^
    81b4:	59200903 	stmdbpl	r0!, {r0, r1, r8, fp}
    81b8:	4b69242d 	blmi	1a51274 <__ccfg+0x1a312cc>
    81bc:	01040200 	mrseq	r0, R12_usr
    81c0:	13024d27 	movwne	r4, #11559	; 0x2d27
    81c4:	57010100 	strpl	r0, [r1, -r0, lsl #2]
    81c8:	02000004 	andeq	r0, r0, #4
    81cc:	00016500 	andeq	r6, r1, r0, lsl #10
    81d0:	fb010200 	blx	489da <__ccfg+0x28a32>
    81d4:	01000d0e 	tsteq	r0, lr, lsl #26
    81d8:	00010101 	andeq	r0, r1, r1, lsl #2
    81dc:	00010000 	andeq	r0, r1, r0
    81e0:	2f2e0100 	svccs	0x002e0100
    81e4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    81e8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    81ec:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    81f0:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    81f4:	63006269 	movwvs	r6, #617	; 0x269
    81f8:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    81fc:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8200:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    8204:	30302e30 	eorscc	r2, r0, r0, lsr lr
    8208:	5f393130 	svcpl	0x00393130
    820c:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    8210:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    8214:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    8218:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    821c:	6f745c36 	svcvs	0x00745c36
    8220:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    8224:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    8228:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    822c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    8230:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    8234:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8238:	61652d65 	cmnvs	r5, r5, ror #26
    823c:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    8240:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    8244:	71353130 	teqvc	r5, r0, lsr r1
    8248:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    824c:	6f6e2d6d 	svcvs	0x006e2d6d
    8250:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8254:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    8258:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    825c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8260:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    8264:	00656e69 	rsbeq	r6, r5, r9, ror #28
    8268:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    826c:	63635c69 	cmnvs	r3, #26880	; 0x6900
    8270:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    8274:	302e302e 	eorcc	r3, lr, lr, lsr #32
    8278:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    827c:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    8280:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    8284:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    8288:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    828c:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    8290:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    8294:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 812c <__exidx_end+0x2708>
    8298:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    829c:	63675c72 	cmnvs	r7, #29184	; 0x7200
    82a0:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    82a4:	6f6e2d6d 	svcvs	0x006e2d6d
    82a8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    82ac:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    82b0:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    82b4:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    82b8:	615c3371 	cmpvs	ip, r1, ror r3
    82bc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    82c0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    82c4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    82c8:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    82cc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    82d0:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    82d4:	65730000 	ldrbvs	r0, [r3, #-0]!
    82d8:	5f707574 	svcpl	0x00707574
    82dc:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    82e0:	00010063 	andeq	r0, r1, r3, rrx
    82e4:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    82e8:	725f7075 	subsvc	r7, pc, #117	; 0x75
    82ec:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    82f0:	00000100 	andeq	r0, r0, r0, lsl #2
    82f4:	5f737973 	svcpl	0x00737973
    82f8:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    82fc:	0100682e 	tsteq	r0, lr, lsr #16
    8300:	645f0000 	ldrbvs	r0, [pc], #-0	; 8308 <__exidx_end+0x28e4>
    8304:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    8308:	745f746c 	ldrbvc	r7, [pc], #-1132	; 8310 <__exidx_end+0x28ec>
    830c:	73657079 	cmnvc	r5, #121	; 0x79
    8310:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    8314:	735f0000 	cmpvc	pc, #0
    8318:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    831c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    8320:	64000003 	strvs	r0, [r0], #-3
    8324:	682e6964 	stmdavs	lr!, {r2, r5, r6, r8, fp, sp, lr}
    8328:	00000100 	andeq	r0, r0, r0, lsl #2
    832c:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    8330:	00010068 	andeq	r0, r1, r8, rrx
    8334:	05000000 	streq	r0, [r0, #-0]
    8338:	003e9c02 	eorseq	r9, lr, r2, lsl #24
    833c:	00ff0300 	rscseq	r0, pc, r0, lsl #6
    8340:	200b0301 	andcs	r0, fp, r1, lsl #6
    8344:	032e0e03 			; <UNDEFINED> instruction: 0x032e0e03
    8348:	0e032072 	mcreq	0, 0, r2, cr3, cr2, {3}
    834c:	0302042e 	movweq	r0, #9262	; 0x242e
    8350:	042000d7 	strteq	r0, [r0], #-215	; 0xffffff29
    8354:	7fa80301 	svcvc	0x00a80301
    8358:	03020420 	movweq	r0, #9248	; 0x2420
    835c:	2d2e00d9 	stccs	0, cr0, [lr, #-868]!	; 0xfffffc9c
    8360:	03010421 	movweq	r0, #5153	; 0x1421
    8364:	302e7fac 	eorcc	r7, lr, ip, lsr #31
    8368:	652f214d 	strvs	r2, [pc, #-333]!	; 8223 <__exidx_end+0x27ff>
    836c:	1e222222 	cdpne	2, 2, cr2, cr2, cr2, {1}
    8370:	58780322 	ldmdapl	r8!, {r1, r5, r8, r9}^
    8374:	03200d03 			; <UNDEFINED> instruction: 0x03200d03
    8378:	10033c73 	andne	r3, r3, r3, ror ip
    837c:	21212120 			; <UNDEFINED> instruction: 0x21212120
    8380:	000d0221 	andeq	r0, sp, r1, lsr #4
    8384:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8388:	003f1802 	eorseq	r1, pc, r2, lsl #16
    838c:	01bf0300 			; <UNDEFINED> instruction: 0x01bf0300
    8390:	78031a01 	stmdavc	r3, {r0, r9, fp, ip}
    8394:	0328204a 			; <UNDEFINED> instruction: 0x0328204a
    8398:	7a03200e 	bvc	d03d8 <__ccfg+0xb0430>
    839c:	0e03422e 	cdpeq	2, 0, cr4, cr3, cr14, {1}
    83a0:	2d31302e 	ldccs	0, cr3, [r1, #-184]!	; 0xffffff48
    83a4:	02042d43 	andeq	r2, r4, #4288	; 0x10c0
    83a8:	01042130 	tsteq	r4, r0, lsr r1
    83ac:	3d2e0b03 	fstmdbxcc	lr!, {d0}	;@ Deprecated
    83b0:	0323652f 			; <UNDEFINED> instruction: 0x0323652f
    83b4:	2c4d660c 	mcrrcs	6, 0, r6, sp, cr12
    83b8:	522d2830 	eorpl	r2, sp, #48, 16	; 0x300000
    83bc:	0015022d 	andseq	r0, r5, sp, lsr #4
    83c0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    83c4:	003fc402 	eorseq	ip, pc, r2, lsl #8
    83c8:	049f0300 	ldreq	r0, [pc], #768	; 83d0 <__exidx_end+0x29ac>
    83cc:	010c0301 	tsteq	ip, r1, lsl #6
    83d0:	03200903 			; <UNDEFINED> instruction: 0x03200903
    83d4:	31212077 			; <UNDEFINED> instruction: 0x31212077
    83d8:	30302733 	eorscc	r2, r0, r3, lsr r7
    83dc:	1d2d2231 	sfmne	f2, 4, [sp, #-196]!	; 0xffffff3c
    83e0:	3e3d3135 	mrccc	1, 1, r3, cr13, cr5, {1}
    83e4:	1d3b223d 	lfmne	f2, 4, [fp, #-244]!	; 0xffffff0c
    83e8:	20760327 	rsbscs	r0, r6, r7, lsr #6
    83ec:	022e1203 	eoreq	r1, lr, #805306368	; 0x30000000
    83f0:	01010006 	tsteq	r1, r6
    83f4:	20020500 	andcs	r0, r2, r0, lsl #10
    83f8:	03000040 	movweq	r0, #64	; 0x40
    83fc:	180104e5 	stmdane	r1, {r0, r2, r5, r6, r7, sl}
    8400:	20790334 	rsbscs	r0, r9, r4, lsr r3
    8404:	05023336 	streq	r3, [r2, #-822]	; 0xfffffcca
    8408:	00010100 	andeq	r0, r1, r0, lsl #2
    840c:	00000205 	andeq	r0, r0, r5, lsl #4
    8410:	81030000 	mrshi	r0, (UNDEF: 3)
    8414:	33180105 	tstcc	r8, #1073741825	; 0x40000001
    8418:	01000602 	tsteq	r0, r2, lsl #12
    841c:	02050001 	andeq	r0, r5, #1
    8420:	00004038 	andeq	r4, r0, r8, lsr r0
    8424:	01059503 	tsteq	r5, r3, lsl #10
    8428:	2e130319 	mrccs	3, 0, r0, cr3, cr9, {0}
    842c:	01000602 	tsteq	r0, r2, lsl #12
    8430:	02050001 	andeq	r0, r5, #1
    8434:	00004048 	andeq	r4, r0, r8, asr #32
    8438:	0105b803 	tsteq	r5, r3, lsl #16
    843c:	2e130319 	mrccs	3, 0, r0, cr3, cr9, {0}
    8440:	01000802 	tsteq	r0, r2, lsl #16
    8444:	02050001 	andeq	r0, r5, #1
    8448:	0000405c 	andeq	r4, r0, ip, asr r0
    844c:	0105db03 	tsteq	r5, r3, lsl #22
    8450:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
    8454:	77032009 	strvc	r2, [r3, -r9]
    8458:	20090320 	andcs	r0, r9, r0, lsr #6
    845c:	35207903 	strcc	r7, [r0, #-2307]!	; 0xfffff6fd
    8460:	3122322a 			; <UNDEFINED> instruction: 0x3122322a
    8464:	27473230 	smlaldxcs	r3, r7, r0, r2
    8468:	03473230 	movteq	r3, #29232	; 0x7230
    846c:	36372e17 			; <UNDEFINED> instruction: 0x36372e17
    8470:	0802273a 	stmdaeq	r2, {r1, r3, r4, r5, r8, r9, sl, sp}
    8474:	00010100 	andeq	r0, r1, r0, lsl #2
    8478:	40c00205 	sbcmi	r0, r0, r5, lsl #4
    847c:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    8480:	21150106 	tstcs	r5, r6, lsl #2
    8484:	20090355 	andcs	r0, r9, r5, asr r3
    8488:	01000302 	tsteq	r0, r2, lsl #6
    848c:	02050001 	andeq	r0, r5, #1
    8490:	000040d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    8494:	0106bc03 	tsteq	r6, r3, lsl #24
    8498:	03552115 	cmpeq	r5, #1073741829	; 0x40000005
    849c:	03022009 	movweq	r2, #8201	; 0x2009
    84a0:	00010100 	andeq	r0, r1, r0, lsl #2
    84a4:	40e80205 	rscmi	r0, r8, r5, lsl #4
    84a8:	cf030000 	svcgt	0x00030000
    84ac:	21150106 	tstcs	r5, r6, lsl #2
    84b0:	20090355 	andcs	r0, r9, r5, asr r3
    84b4:	01000302 	tsteq	r0, r2, lsl #6
    84b8:	02050001 	andeq	r0, r5, #1
    84bc:	000040fc 	strdeq	r4, [r0], -ip
    84c0:	0106e203 	tsteq	r6, r3, lsl #4
    84c4:	2f432116 	svccs	0x00432116
    84c8:	40207a03 	eormi	r7, r0, r3, lsl #20
    84cc:	71032c35 	tstvc	r3, r5, lsr ip
    84d0:	2e160320 	cdpcs	3, 1, cr0, cr6, cr0, {1}
    84d4:	01000302 	tsteq	r0, r2, lsl #6
    84d8:	02050001 	andeq	r0, r5, #1
    84dc:	00004124 	andeq	r4, r0, r4, lsr #2
    84e0:	01078203 	tsteq	r7, r3, lsl #4
    84e4:	06023316 			; <UNDEFINED> instruction: 0x06023316
    84e8:	00010100 	andeq	r0, r1, r0, lsl #2
    84ec:	41340205 	teqmi	r4, r5, lsl #4
    84f0:	94030000 	strls	r0, [r3], #-0
    84f4:	21160107 	tstcs	r6, r7, lsl #2
    84f8:	33342943 	teqcc	r4, #1097728	; 0x10c000
    84fc:	35207903 	strcc	r7, [r0, #-2307]!	; 0xfffff6fd
    8500:	2e71031e 	mrccs	3, 3, r0, cr1, cr14, {0}
    8504:	02201603 	eoreq	r1, r0, #3145728	; 0x300000
    8508:	01010005 	tsteq	r1, r5
    850c:	60020500 	andvs	r0, r2, r0, lsl #10
    8510:	03000041 	movweq	r0, #65	; 0x41
    8514:	150107b4 	strne	r0, [r1, #-1972]	; 0xfffff84c
    8518:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    851c:	00030220 	andeq	r0, r3, r0, lsr #4
    8520:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8524:	00417402 	subeq	r7, r1, r2, lsl #8
    8528:	07c80300 	strbeq	r0, [r8, r0, lsl #6]
    852c:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    8530:	02200a03 	eoreq	r0, r0, #12288	; 0x3000
    8534:	01010003 	tsteq	r1, r3
    8538:	88020500 	stmdahi	r2, {r8, sl}
    853c:	03000041 	movweq	r0, #65	; 0x41
    8540:	200102a7 	andcs	r0, r1, r7, lsr #5
    8544:	3d200903 			; <UNDEFINED> instruction: 0x3d200903
    8548:	2f4e211f 	svccs	0x004e211f
    854c:	ac02d103 	stfged	f5, [r2], {3}
    8550:	207db903 	rsbscs	fp, sp, r3, lsl #18
    8554:	2002c703 	andcs	ip, r2, r3, lsl #14
    8558:	207db903 	rsbscs	fp, sp, r3, lsl #18
    855c:	211f2f5c 	tstcs	pc, ip, asr pc	; <UNPREDICTABLE>
    8560:	211f2f3d 	tstcs	pc, sp, lsr pc	; <UNPREDICTABLE>
    8564:	211f3d3d 	tstcs	pc, sp, lsr sp	; <UNPREDICTABLE>
    8568:	3d6e3d43 	stclcc	13, cr3, [lr, #-268]!	; 0xfffffef4
    856c:	211f3d52 	tstcs	pc, r2, asr sp	; <UNPREDICTABLE>
    8570:	3d3c0903 			; <UNDEFINED> instruction: 0x3d3c0903
    8574:	3d660a03 	vstmdbcc	r6!, {s1-s3}
    8578:	3d660b03 	fstmdbxcc	r6!, {d16}	;@ Deprecated
    857c:	211f3d7c 	tstcs	pc, ip, ror sp	; <UNPREDICTABLE>
    8580:	12024b40 	andne	r4, r2, #64, 22	; 0x10000
    8584:	00010100 	andeq	r0, r1, r0, lsl #2
    8588:	42980205 	addsmi	r0, r8, #1342177280	; 0x50000000
    858c:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    8590:	02000107 	andeq	r0, r0, #-1073741823	; 0xc0000001
    8594:	0e030104 	adfeqs	f0, f3, f4
    8598:	1d235220 	sfmne	f5, 4, [r3, #-128]!	; 0xffffff80
    859c:	684d1d23 	stmdavs	sp, {r0, r1, r5, r8, sl, fp, ip}^
    85a0:	207a034b 	rsbscs	r0, sl, fp, asr #6
    85a4:	02004134 	andeq	r4, r0, #52, 2
    85a8:	5b3d0104 	blpl	f489c0 <__ccfg+0xf28a18>
    85ac:	000b0231 	andeq	r0, fp, r1, lsr r2
    85b0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    85b4:	0042fc02 	subeq	pc, r2, r2, lsl #24
    85b8:	08930300 	ldmeq	r3, {r8, r9}
    85bc:	01090301 	tsteq	r9, r1, lsl #6
    85c0:	22212d2f 	eorcs	r2, r1, #3008	; 0xbc0
    85c4:	01040200 	mrseq	r0, R12_usr
    85c8:	07024b3d 	smladxeq	r2, sp, fp, r4
    85cc:	00010100 	andeq	r0, r1, r0, lsl #2
    85d0:	43240205 			; <UNDEFINED> instruction: 0x43240205
    85d4:	9b030000 	blls	c85dc <__ccfg+0xa8634>
    85d8:	09030103 	stmdbeq	r3, {r0, r1, r8}
    85dc:	3c770301 	ldclcc	3, cr0, [r7], #-4
    85e0:	20090320 	andcs	r0, r9, r0, lsr #6
    85e4:	03313052 	teqeq	r1, #82	; 0x52
    85e8:	2b234a0a 	blcs	8dae18 <__ccfg+0x8bae70>
    85ec:	2f24484c 	svccs	0x0024484c
    85f0:	2933762d 	ldmdbcs	r3!, {r0, r2, r3, r5, r9, sl, ip, sp, lr}
    85f4:	26501c32 			; <UNDEFINED> instruction: 0x26501c32
    85f8:	4d4f3d52 	stclmi	13, cr3, [pc, #-328]	; 84b8 <__exidx_end+0x2a94>
    85fc:	4b845d2f 	blmi	fe11fac0 <_estack+0xde11aac0>
    8600:	003d243d 	eorseq	r2, sp, sp, lsr r4
    8604:	4b010402 	blmi	49614 <__ccfg+0x2966c>
    8608:	864b2f5b 			; <UNDEFINED> instruction: 0x864b2f5b
    860c:	09033f4d 	stmdbeq	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, sp}
    8610:	1e221e4a 	cdpne	14, 2, cr1, cr2, cr10, {2}
    8614:	043c0b03 	ldrteq	r0, [ip], #-2819	; 0xfffff4fd
    8618:	7db90303 	ldcvc	3, cr0, [r9, #12]!
    861c:	001f024a 	andseq	r0, pc, sl, asr #4
    8620:	03650101 	cmneq	r5, #1073741824	; 0x40000000
    8624:	00020000 	andeq	r0, r2, r0
    8628:	000001a8 	andeq	r0, r0, r8, lsr #3
    862c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    8630:	0101000d 	tsteq	r1, sp
    8634:	00000101 	andeq	r0, r0, r1, lsl #2
    8638:	00000100 	andeq	r0, r0, r0, lsl #2
    863c:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    8640:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8644:	2f2e2e2f 	svccs	0x002e2e2f
    8648:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    864c:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    8650:	3a630062 	bcc	18c87e0 <__ccfg+0x18a8838>
    8654:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    8658:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    865c:	302e322e 	eorcc	r3, lr, lr, lsr #4
    8660:	3030302e 	eorscc	r3, r0, lr, lsr #32
    8664:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    8668:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    866c:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    8670:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    8674:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    8678:	6f6f745c 	svcvs	0x006f745c
    867c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    8680:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    8684:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    8688:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    868c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8690:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8694:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8698:	5f342d69 	svcpl	0x00342d69
    869c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    86a0:	33713531 	cmncc	r1, #205520896	; 0xc400000
    86a4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    86a8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    86ac:	61652d65 	cmnvs	r5, r5, ror #26
    86b0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    86b4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    86b8:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    86bc:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    86c0:	6300656e 	movwvs	r6, #1390	; 0x56e
    86c4:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    86c8:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    86cc:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    86d0:	30302e30 	eorscc	r2, r0, r0, lsr lr
    86d4:	5f393130 	svcpl	0x00393130
    86d8:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    86dc:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    86e0:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    86e4:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    86e8:	6f745c36 	svcvs	0x00745c36
    86ec:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    86f0:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    86f4:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    86f8:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    86fc:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    8700:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8704:	61652d65 	cmnvs	r5, r5, ror #26
    8708:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    870c:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    8710:	71353130 	teqvc	r5, r0, lsr r1
    8714:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    8718:	6f6e2d6d 	svcvs	0x006e2d6d
    871c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8720:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    8724:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8728:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    872c:	00737973 	rsbseq	r7, r3, r3, ror r9
    8730:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8734:	2f2e2e2f 	svccs	0x002e2e2f
    8738:	692f2e2e 	stmdbvs	pc!, {r1, r2, r3, r5, r9, sl, fp, sp}	; <UNPREDICTABLE>
    873c:	0000636e 	andeq	r6, r0, lr, ror #6
    8740:	5f737973 	svcpl	0x00737973
    8744:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    8748:	0100632e 	tsteq	r0, lr, lsr #6
    874c:	6f610000 	svcvs	0x00610000
    8750:	75775f6e 	ldrbvc	r5, [r7, #-3950]!	; 0xfffff092
    8754:	00682e63 	rsbeq	r2, r8, r3, ror #28
    8758:	6f000001 	svcvs	0x00000001
    875c:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    8760:	00000100 	andeq	r0, r0, r0, lsl #2
    8764:	6d637270 	sfmvs	f7, 2, [r3, #-448]!	; 0xfffffe40
    8768:	0100682e 	tsteq	r0, lr, lsr #16
    876c:	65730000 	ldrbvs	r0, [r3, #-0]!
    8770:	5f707574 	svcpl	0x00707574
    8774:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    8778:	00010068 	andeq	r0, r1, r8, rrx
    877c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    8780:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    8784:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    8788:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    878c:	00020068 	andeq	r0, r2, r8, rrx
    8790:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    8794:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    8798:	0300682e 	movweq	r6, #2094	; 0x82e
    879c:	77680000 	strbvc	r0, [r8, -r0]!
    87a0:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    87a4:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    87a8:	00000400 	andeq	r0, r0, r0, lsl #8
    87ac:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    87b0:	00010068 	andeq	r0, r1, r8, rrx
    87b4:	73797300 	cmnvc	r9, #0, 6
    87b8:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    87bc:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    87c0:	61000001 	tstvs	r0, r1
    87c4:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
    87c8:	6f6d7461 	svcvs	0x006d7461
    87cc:	00682e6e 	rsbeq	r2, r8, lr, ror #28
    87d0:	00000001 	andeq	r0, r0, r1
    87d4:	00020500 	andeq	r0, r2, r0, lsl #10
    87d8:	03000000 	movweq	r0, #0
    87dc:	040100f9 	streq	r0, [r1], #-249	; 0xffffff07
    87e0:	02e90302 	rsceq	r0, r9, #134217728	; 0x8000000
    87e4:	03010401 	movweq	r0, #5121	; 0x1401
    87e8:	042e7d97 	strteq	r7, [lr], #-3479	; 0xfffff269
    87ec:	02e90302 	rsceq	r0, r9, #134217728	; 0x8000000
    87f0:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    87f4:	00ce0301 	sbceq	r0, lr, r1, lsl #6
    87f8:	00010420 	andeq	r0, r1, r0, lsr #8
    87fc:	03010402 	movweq	r0, #5122	; 0x1402
    8800:	032e7cd1 			; <UNDEFINED> instruction: 0x032e7cd1
    8804:	02002e0c 	andeq	r2, r0, #12, 28	; 0xc0
    8808:	89670104 	stmdbhi	r7!, {r2, r8}^
    880c:	4a09034b 	bmi	249540 <__ccfg+0x229598>
    8810:	a5030304 	strge	r0, [r3, #-772]	; 0xfffffcfc
    8814:	01045801 	tsteq	r4, r1, lsl #16
    8818:	4a7ee403 	bmi	1fc182c <__ccfg+0x1fa1884>
    881c:	01040200 	mrseq	r0, R12_usr
    8820:	0304045d 	movweq	r0, #17501	; 0x445d
    8824:	00740381 	rsbseq	r0, r4, r1, lsl #7
    8828:	03010402 	movweq	r0, #5122	; 0x1402
    882c:	01043c14 	tsteq	r4, r4, lsl ip
    8830:	01040200 	mrseq	r0, R12_usr
    8834:	2e7cef03 	cdpcs	15, 7, cr14, cr12, cr3, {0}
    8838:	b7030404 	strlt	r0, [r3, -r4, lsl #8]
    883c:	1c322e03 	ldcne	14, cr2, [r2], #-12
    8840:	20420324 	subcs	r0, r2, r4, lsr #6
    8844:	01040200 	mrseq	r0, R12_usr
    8848:	042e1403 	strteq	r1, [lr], #-1027	; 0xfffffbfd
    884c:	04020001 	streq	r0, [r2], #-1
    8850:	7cf70301 	ldclvc	3, cr0, [r7], #4
    8854:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
    8858:	83281b41 			; <UNDEFINED> instruction: 0x83281b41
    885c:	1b24384b 	blne	916990 <__ccfg+0x8f69e8>
    8860:	e7030404 	str	r0, [r3, -r4, lsl #8]
    8864:	02002e02 	andeq	r2, r0, #2, 28
    8868:	14030104 	strne	r0, [r3], #-260	; 0xfffffefc
    886c:	0001043c 	andeq	r0, r1, ip, lsr r4
    8870:	03010402 	movweq	r0, #5122	; 0x1402
    8874:	30207d8d 	eorcc	r7, r0, sp, lsl #27
    8878:	01001702 	tsteq	r0, r2, lsl #14
    887c:	02050001 	andeq	r0, r5, #1
    8880:	00004474 	andeq	r4, r0, r4, ror r4
    8884:	0101da03 	tsteq	r1, r3, lsl #20
    8888:	032e1d03 			; <UNDEFINED> instruction: 0x032e1d03
    888c:	1d032063 	stcne	0, cr2, [r3, #-396]	; 0xfffffe74
    8890:	412f5920 			; <UNDEFINED> instruction: 0x412f5920
    8894:	1c223232 	sfmne	f3, 4, [r2], #-200	; 0xffffff38
    8898:	5c942132 	ldfpls	f2, [r4], {50}	; 0x32
    889c:	05041b32 	streq	r1, [r4, #-2866]	; 0xfffff4ce
    88a0:	212e5f03 			; <UNDEFINED> instruction: 0x212e5f03
    88a4:	24030104 	strcs	r0, [r3], #-260	; 0xfffffefc
    88a8:	1b32432e 	blne	c99568 <__ccfg+0xc795c0>
    88ac:	03050433 	movweq	r0, #21555	; 0x5433
    88b0:	04212050 	strteq	r2, [r1], #-80	; 0xffffffb0
    88b4:	2e2e0301 	cdpcs	3, 2, cr0, cr14, cr1, {0}
    88b8:	51030504 	tstpl	r3, r4, lsl #10
    88bc:	0301042e 	movweq	r0, #5166	; 0x142e
    88c0:	05042034 	streq	r2, [r4, #-52]	; 0xffffffcc
    88c4:	04204d03 	strteq	r4, [r0], #-3331	; 0xfffff2fd
    88c8:	2e340301 	cdpcs	3, 3, cr0, cr4, cr1, {0}
    88cc:	6923652f 	stmdbvs	r3!, {r0, r1, r2, r3, r5, r8, sl, sp, lr}
    88d0:	3e214d2f 	cdpcc	13, 2, cr4, cr1, cr15, {1}
    88d4:	02003221 	andeq	r3, r0, #268435458	; 0x10000002
    88d8:	58060104 	stmdapl	r6, {r2, r8}
    88dc:	4a0f0306 	bmi	3c94fc <__ccfg+0x3a9554>
    88e0:	2a2f3fca 	bcs	bd8810 <__ccfg+0xbb8868>
    88e4:	322b2424 	eorcc	r2, fp, #36, 8	; 0x24000000
    88e8:	3d319340 	ldccc	3, cr9, [r1, #-256]!	; 0xffffff00
    88ec:	213e3d3e 	teqcs	lr, lr, lsr sp
    88f0:	2d3c6303 	ldccs	3, cr6, [ip, #-12]!
    88f4:	31202603 			; <UNDEFINED> instruction: 0x31202603
    88f8:	3d3e3d31 	ldccc	13, cr3, [lr, #-196]!	; 0xffffff3c
    88fc:	0b03213e 	bleq	d0dfc <__ccfg+0xb0e54>
    8900:	7803212e 	stmdavc	r3, {r1, r2, r3, r5, r8, sp}
    8904:	2009033c 	andcs	r0, r9, ip, lsr r3
    8908:	032e7703 			; <UNDEFINED> instruction: 0x032e7703
    890c:	03213c0e 			; <UNDEFINED> instruction: 0x03213c0e
    8910:	0f032071 	svceq	0x00032071
    8914:	231d7b3c 	tstcs	sp, #60, 22	; 0xf000
    8918:	21226521 			; <UNDEFINED> instruction: 0x21226521
    891c:	78032823 	stmdavc	r3, {r0, r1, r5, fp, sp}
    8920:	22213420 	eorcs	r3, r1, #32, 8	; 0x20000000
    8924:	3e213d4c 	cdpcc	13, 2, cr3, cr1, cr12, {2}
    8928:	3d322c40 	ldccc	12, cr2, [r2, #-256]!	; 0xffffff00
    892c:	01002102 	tsteq	r0, r2, lsl #2
    8930:	02050001 	andeq	r0, r5, #1
    8934:	00004694 	muleq	r0, r4, r6
    8938:	0103b603 	tsteq	r3, r3, lsl #12
    893c:	2f224027 	svccs	0x00224027
    8940:	404e24a2 	submi	r2, lr, r2, lsr #9
    8944:	02864e2a 	addeq	r4, r6, #672	; 0x2a0
    8948:	01010009 	tsteq	r1, r9
    894c:	00020500 	andeq	r0, r2, r0, lsl #10
    8950:	03000000 	movweq	r0, #0
    8954:	030103e5 	movweq	r0, #5093	; 0x13e5
    8958:	282f200c 	stmdacs	pc!, {r2, r3, sp}	; <UNPREDICTABLE>
    895c:	302d5a30 	eorcc	r5, sp, r0, lsr sl
    8960:	211f322d 	tstcs	pc, sp, lsr #4
    8964:	2c2f2b24 			; <UNDEFINED> instruction: 0x2c2f2b24
    8968:	302f2432 	eorcc	r2, pc, r2, lsr r4	; <UNPREDICTABLE>
    896c:	224b2f34 	subcs	r2, fp, #52, 30	; 0xd0
    8970:	0c023e1e 	stceq	14, cr3, [r2], {30}
    8974:	00010100 	andeq	r0, r1, r0, lsl #2
    8978:	46f40205 	ldrbtmi	r0, [r4], r5, lsl #4
    897c:	a6030000 	strge	r0, [r3], -r0
    8980:	3f130104 	svccc	0x00130104
    8984:	04022648 	streq	r2, [r2], #-1608	; 0xfffff9b8
    8988:	2b010100 	blcs	48d90 <__ccfg+0x28de8>
    898c:	02000002 	andeq	r0, r0, #2
    8990:	00014300 	andeq	r4, r1, r0, lsl #6
    8994:	fb010200 	blx	4919e <__ccfg+0x291f6>
    8998:	01000d0e 	tsteq	r0, lr, lsl #26
    899c:	00010101 	andeq	r0, r1, r1, lsl #2
    89a0:	00010000 	andeq	r0, r1, r0
    89a4:	2f2e0100 	svccs	0x002e0100
    89a8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    89ac:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    89b0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    89b4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    89b8:	63006269 	movwvs	r6, #617	; 0x269
    89bc:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    89c0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    89c4:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    89c8:	30302e30 	eorscc	r2, r0, r0, lsr lr
    89cc:	5f393130 	svcpl	0x00393130
    89d0:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    89d4:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    89d8:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    89dc:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    89e0:	6f745c36 	svcvs	0x00745c36
    89e4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    89e8:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    89ec:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    89f0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    89f4:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    89f8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    89fc:	61652d65 	cmnvs	r5, r5, ror #26
    8a00:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    8a04:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    8a08:	71353130 	teqvc	r5, r0, lsr r1
    8a0c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    8a10:	6f6e2d6d 	svcvs	0x006e2d6d
    8a14:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8a18:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    8a1c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8a20:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8a24:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    8a28:	00656e69 	rsbeq	r6, r5, r9, ror #28
    8a2c:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    8a30:	63635c69 	cmnvs	r3, #26880	; 0x6900
    8a34:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    8a38:	302e302e 	eorcc	r3, lr, lr, lsr #32
    8a3c:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    8a40:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    8a44:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    8a48:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    8a4c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8a50:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    8a54:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    8a58:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 88f0 <__exidx_end+0x2ecc>
    8a5c:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    8a60:	63675c72 	cmnvs	r7, #29184	; 0x7200
    8a64:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    8a68:	6f6e2d6d 	svcvs	0x006e2d6d
    8a6c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8a70:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    8a74:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    8a78:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    8a7c:	615c3371 	cmpvs	ip, r1, ror r3
    8a80:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    8a84:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8a88:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8a8c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    8a90:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8a94:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    8a98:	68630000 	stmdavs	r3!, {}^	; <UNPREDICTABLE>
    8a9c:	6e697069 	cdpvs	0, 6, cr7, cr9, cr9, {3}
    8aa0:	632e6f66 			; <UNDEFINED> instruction: 0x632e6f66
    8aa4:	00000100 	andeq	r0, r0, r0, lsl #2
    8aa8:	70696863 	rsbvc	r6, r9, r3, ror #16
    8aac:	6f666e69 	svcvs	0x00666e69
    8ab0:	0100682e 	tsteq	r0, lr, lsr #16
    8ab4:	645f0000 	ldrbvs	r0, [pc], #-0	; 8abc <__exidx_end+0x3098>
    8ab8:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    8abc:	745f746c 	ldrbvc	r7, [pc], #-1132	; 8ac4 <__exidx_end+0x30a0>
    8ac0:	73657079 	cmnvc	r5, #121	; 0x79
    8ac4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    8ac8:	735f0000 	cmpvc	pc, #0
    8acc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    8ad0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    8ad4:	00000003 	andeq	r0, r0, r3
    8ad8:	00020500 	andeq	r0, r2, r0, lsl #10
    8adc:	03000000 	movweq	r0, #0
    8ae0:	130100c4 	movwne	r0, #4292	; 0x10c4
    8ae4:	0006022f 	andeq	r0, r6, pc, lsr #4
    8ae8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8aec:	00000002 	andeq	r0, r0, r2
    8af0:	00d00300 	sbcseq	r0, r0, r0, lsl #6
    8af4:	032f1401 			; <UNDEFINED> instruction: 0x032f1401
    8af8:	08022e0a 	stmdaeq	r2, {r1, r3, r9, sl, fp, sp}
    8afc:	00010100 	andeq	r0, r1, r0, lsl #2
    8b00:	470c0205 	strmi	r0, [ip, -r5, lsl #4]
    8b04:	e6030000 	str	r0, [r3], -r0
    8b08:	2a1a0100 	bcs	688f10 <__ccfg+0x668f68>
    8b0c:	0302044e 	movweq	r0, #9294	; 0x244e
    8b10:	042e019b 	strteq	r0, [lr], #-411	; 0xfffffe65
    8b14:	7ee60301 	cdpvc	3, 14, cr0, cr6, cr1, {0}
    8b18:	4b4c232e 	blmi	13117d8 <__ccfg+0x12f1830>
    8b1c:	242f724b 	strtcs	r7, [pc], #-587	; 8b24 <__exidx_end+0x3100>
    8b20:	01000502 	tsteq	r0, r2, lsl #10
    8b24:	02050001 	andeq	r0, r5, #1
    8b28:	00000000 	andeq	r0, r0, r0
    8b2c:	01018303 	tsteq	r1, r3, lsl #6
    8b30:	b0030204 	andlt	r0, r3, r4, lsl #4
    8b34:	01042001 	tsteq	r4, r1
    8b38:	2e7ed603 	cdpcs	6, 7, cr13, cr14, cr3, {0}
    8b3c:	03233139 			; <UNDEFINED> instruction: 0x03233139
    8b40:	0a033c78 	beq	d7d28 <__ccfg+0xb7d80>
    8b44:	2e09034a 	cdpcs	3, 0, cr0, cr9, cr10, {2}
    8b48:	00050225 	andeq	r0, r5, r5, lsr #4
    8b4c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8b50:	00475802 	subeq	r5, r7, r2, lsl #16
    8b54:	01a60300 			; <UNDEFINED> instruction: 0x01a60300
    8b58:	03020401 	movweq	r0, #9217	; 0x2401
    8b5c:	032000e3 			; <UNDEFINED> instruction: 0x032000e3
    8b60:	6f032e11 	svcvs	0x00032e11
    8b64:	2011033c 	andscs	r0, r1, ip, lsr r3
    8b68:	03010425 	movweq	r0, #5157	; 0x1425
    8b6c:	923c7f8c 	eorsls	r7, ip, #140, 30	; 0x230
    8b70:	21222195 			; <UNDEFINED> instruction: 0x21222195
    8b74:	39414122 	stmdbcc	r1, {r1, r5, r8, lr}^
    8b78:	272e0903 	strcs	r0, [lr, -r3, lsl #18]!
    8b7c:	212e7303 			; <UNDEFINED> instruction: 0x212e7303
    8b80:	03206403 			; <UNDEFINED> instruction: 0x03206403
    8b84:	04022030 	streq	r2, [r2], #-48	; 0xffffffd0
    8b88:	00010100 	andeq	r0, r1, r0, lsl #2
    8b8c:	47c40205 	strbmi	r0, [r4, r5, lsl #4]
    8b90:	e0030000 	and	r0, r3, r0
    8b94:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    8b98:	2001a403 	andcs	sl, r1, r3, lsl #8
    8b9c:	dd030104 	stfles	f0, [r3, #-16]
    8ba0:	02042e7e 	andeq	r2, r4, #2016	; 0x7e0
    8ba4:	2e029003 	cdpcs	0, 0, cr9, cr2, cr3, {0}
    8ba8:	f0030104 			; <UNDEFINED> instruction: 0xf0030104
    8bac:	02002e7d 	andeq	r2, r0, #2000	; 0x7d0
    8bb0:	09030104 	stmdbeq	r3, {r2, r8}
    8bb4:	0002022e 	andeq	r0, r2, lr, lsr #4
    8bb8:	021e0101 	andseq	r0, lr, #1073741824	; 0x40000000
    8bbc:	00020000 	andeq	r0, r2, r0
    8bc0:	00000142 	andeq	r0, r0, r2, asr #2
    8bc4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    8bc8:	0101000d 	tsteq	r1, sp
    8bcc:	00000101 	andeq	r0, r0, r1, lsl #2
    8bd0:	00000100 	andeq	r0, r0, r0, lsl #2
    8bd4:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    8bd8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8bdc:	2f2e2e2f 	svccs	0x002e2e2f
    8be0:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    8be4:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    8be8:	3a630062 	bcc	18c8d78 <__ccfg+0x18a8dd0>
    8bec:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    8bf0:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    8bf4:	302e322e 	eorcc	r3, lr, lr, lsr #4
    8bf8:	3030302e 	eorscc	r3, r0, lr, lsr #32
    8bfc:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    8c00:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    8c04:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    8c08:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    8c0c:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    8c10:	6f6f745c 	svcvs	0x006f745c
    8c14:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    8c18:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    8c1c:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    8c20:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    8c24:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8c28:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8c2c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8c30:	5f342d69 	svcpl	0x00342d69
    8c34:	30322d39 	eorscc	r2, r2, r9, lsr sp
    8c38:	33713531 	cmncc	r1, #205520896	; 0xc400000
    8c3c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    8c40:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8c44:	61652d65 	cmnvs	r5, r5, ror #26
    8c48:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    8c4c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8c50:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    8c54:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    8c58:	6300656e 	movwvs	r6, #1390	; 0x56e
    8c5c:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    8c60:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8c64:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    8c68:	30302e30 	eorscc	r2, r0, r0, lsr lr
    8c6c:	5f393130 	svcpl	0x00393130
    8c70:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    8c74:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    8c78:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    8c7c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    8c80:	6f745c36 	svcvs	0x00745c36
    8c84:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    8c88:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    8c8c:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    8c90:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    8c94:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    8c98:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8c9c:	61652d65 	cmnvs	r5, r5, ror #26
    8ca0:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    8ca4:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    8ca8:	71353130 	teqvc	r5, r0, lsr r1
    8cac:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    8cb0:	6f6e2d6d 	svcvs	0x006e2d6d
    8cb4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8cb8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    8cbc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8cc0:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8cc4:	00737973 	rsbseq	r7, r3, r3, ror r9
    8cc8:	69646400 	stmdbvs	r4!, {sl, sp, lr}^
    8ccc:	0100682e 	tsteq	r0, lr, lsr #16
    8cd0:	64640000 	strbtvs	r0, [r4], #-0
    8cd4:	00632e69 	rsbeq	r2, r3, r9, ror #28
    8cd8:	5f000001 	svcpl	0x00000001
    8cdc:	61666564 	cmnvs	r6, r4, ror #10
    8ce0:	5f746c75 	svcpl	0x00746c75
    8ce4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    8ce8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    8cec:	5f000002 	svcpl	0x00000002
    8cf0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    8cf4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    8cf8:	00000300 	andeq	r0, r0, r0, lsl #6
    8cfc:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    8d00:	00010068 	andeq	r0, r1, r8, rrx
    8d04:	05000000 	streq	r0, [r0, #-0]
    8d08:	0047dc02 	subeq	sp, r7, r2, lsl #24
    8d0c:	01880300 	orreq	r0, r8, r0, lsl #6
    8d10:	30312001 	eorscc	r2, r1, r1
    8d14:	22221e50 	eorcs	r1, r2, #80, 28	; 0x500
    8d18:	05022c23 	streq	r2, [r2, #-3107]	; 0xfffff3dd
    8d1c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    8d20:	02050002 	andeq	r0, r5, #2
    8d24:	00004804 	andeq	r4, r0, r4, lsl #16
    8d28:	0100c303 	tsteq	r0, r3, lsl #6
    8d2c:	02010a03 	andeq	r0, r1, #12288	; 0x3000
    8d30:	01010004 	tsteq	r1, r4
    8d34:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    8d38:	00000002 	andeq	r0, r0, r2
    8d3c:	00d80300 	sbcseq	r0, r8, r0, lsl #6
    8d40:	010e0301 	tsteq	lr, r1, lsl #6
    8d44:	78032333 	stmdavc	r3, {r0, r1, r4, r5, r8, r9, sp}
    8d48:	4f35352e 	svcmi	0x0035352e
    8d4c:	01000402 	tsteq	r0, r2, lsl #8
    8d50:	00020401 	andeq	r0, r2, r1, lsl #8
    8d54:	00000205 	andeq	r0, r0, r5, lsl #4
    8d58:	85030000 	strhi	r0, [r3, #-0]
    8d5c:	11030101 	tstne	r3, r1, lsl #2
    8d60:	206f0320 	rsbcs	r0, pc, r0, lsr #6
    8d64:	032e1303 			; <UNDEFINED> instruction: 0x032e1303
    8d68:	09032e79 	stmdbeq	r3, {r0, r3, r4, r5, r6, r9, sl, fp, sp}
    8d6c:	7103342e 	tstvc	r3, lr, lsr #8
    8d70:	0c03442e 	cfstrseq	mvf4, [r3], {46}	; 0x2e
    8d74:	022d2f2e 	eoreq	r2, sp, #46, 30	; 0xb8
    8d78:	01010002 	tsteq	r1, r2
    8d7c:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    8d80:	00000002 	andeq	r0, r0, r2
    8d84:	01af0300 			; <UNDEFINED> instruction: 0x01af0300
    8d88:	20110301 	andscs	r0, r1, r1, lsl #6
    8d8c:	2e74031b 	mrccs	3, 3, r0, cr4, cr11, {0}
    8d90:	2f201303 	svccs	0x00201303
    8d94:	69030104 	stmdbvs	r3, {r2, r8}
    8d98:	234d3020 	movtcs	r3, #53280	; 0xd020
    8d9c:	2122231d 			; <UNDEFINED> instruction: 0x2122231d
    8da0:	1d030204 	sfmne	f0, 4, [r3, #-16]
    8da4:	0005022e 	andeq	r0, r5, lr, lsr #4
    8da8:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    8dac:	00020500 	andeq	r0, r2, r0, lsl #10
    8db0:	03000000 	movweq	r0, #0
    8db4:	030101de 	movweq	r0, #4574	; 0x11de
    8db8:	031b2011 	tsteq	fp, #17
    8dbc:	14032e74 	strne	r2, [r3], #-3700	; 0xfffff18c
    8dc0:	04302d2e 	ldrteq	r2, [r0], #-3374	; 0xfffff2d2
    8dc4:	7fb90301 	svcvc	0x00b90301
    8dc8:	234d3020 	movtcs	r3, #53280	; 0xd020
    8dcc:	2122231d 			; <UNDEFINED> instruction: 0x2122231d
    8dd0:	c8030204 	stmdagt	r3, {r2, r9}
    8dd4:	02422e00 	subeq	r2, r2, #0, 28
    8dd8:	01010005 	tsteq	r1, r5
    8ddc:	00000243 	andeq	r0, r0, r3, asr #4
    8de0:	01950003 	orrseq	r0, r5, r3
    8de4:	01020000 	mrseq	r0, (UNDEF: 2)
    8de8:	000d0efb 	strdeq	r0, [sp], -fp
    8dec:	01010101 	tsteq	r1, r1, lsl #2
    8df0:	01000000 	mrseq	r0, (UNDEF: 0)
    8df4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    8df8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8dfc:	2f2e2e2f 	svccs	0x002e2e2f
    8e00:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8e04:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8e08:	2f2e2e2f 	svccs	0x002e2e2f
    8e0c:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    8e10:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8e14:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    8e18:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 8c98 <__exidx_end+0x3274>
    8e1c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    8e20:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    8e24:	2e2f6d72 	mcrcs	13, 1, r6, cr15, cr2, {3}
    8e28:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8e2c:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    8e30:	00676e69 	rsbeq	r6, r7, r9, ror #28
    8e34:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    8e38:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8e3c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    8e40:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    8e44:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8e48:	61652d65 	cmnvs	r5, r5, ror #26
    8e4c:	382f6962 	stmdacc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    8e50:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    8e54:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    8e58:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8e5c:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    8e60:	2f646c69 	svccs	0x00646c69
    8e64:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8e68:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    8e6c:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    8e70:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    8e74:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8e78:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    8e7c:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    8e80:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8e84:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    8e88:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    8e8c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8e90:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    8e94:	2f007379 	svccs	0x00007379
    8e98:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    8e9c:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    8ea0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8ea4:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    8ea8:	2f787945 	svccs	0x00787945
    8eac:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8eb0:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    8eb4:	302e332e 	eorcc	r3, lr, lr, lsr #6
    8eb8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8ebc:	2f62696c 	svccs	0x0062696c
    8ec0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    8ec4:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
    8ec8:	00656c61 	rsbeq	r6, r5, r1, ror #24
    8ecc:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    8ed0:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    8ed4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8ed8:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    8edc:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    8ee0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8ee4:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    8ee8:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    8eec:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    8ef0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8ef4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8ef8:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    8efc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    8f00:	6d000065 	stcvs	0, cr0, [r0, #-404]	; 0xfffffe6c
    8f04:	70636d65 	rsbvc	r6, r3, r5, ror #26
    8f08:	00632e79 	rsbeq	r2, r3, r9, ror lr
    8f0c:	73000001 	movwvc	r0, #1
    8f10:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    8f14:	00682e66 	rsbeq	r2, r8, r6, ror #28
    8f18:	5f000002 	svcpl	0x00000002
    8f1c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    8f20:	00682e73 	rsbeq	r2, r8, r3, ror lr
    8f24:	72000003 	andvc	r0, r0, #3
    8f28:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    8f2c:	0300682e 	movweq	r6, #2094	; 0x82e
    8f30:	6f6c0000 	svcvs	0x006c0000
    8f34:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    8f38:	00000300 	andeq	r0, r0, r0, lsl #6
    8f3c:	6c746573 	cfldr64vs	mvdx6, [r4], #-460	; 0xfffffe34
    8f40:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    8f44:	00682e65 	rsbeq	r2, r8, r5, ror #28
    8f48:	73000004 	movwvc	r0, #4
    8f4c:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    8f50:	00682e62 	rsbeq	r2, r8, r2, ror #28
    8f54:	77000005 	strvc	r0, [r0, -r5]
    8f58:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    8f5c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    8f60:	6f6c0000 	svcvs	0x006c0000
    8f64:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    8f68:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    8f6c:	74730000 	ldrbtvc	r0, [r3], #-0
    8f70:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    8f74:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    8f78:	05000000 	streq	r0, [r0, #-0]
    8f7c:	02050001 	andeq	r0, r5, #1
    8f80:	0000480c 	andeq	r4, r0, ip, lsl #16
    8f84:	05013303 	streq	r3, [r1, #-771]	; 0xfffffcfd
    8f88:	010e0303 	tsteq	lr, r3, lsl #6
    8f8c:	16131313 			; <UNDEFINED> instruction: 0x16131313
    8f90:	03060105 	movweq	r0, #24837	; 0x6105
    8f94:	0605016b 	streq	r0, [r5], -fp, ror #2
    8f98:	053c1503 	ldreq	r1, [ip, #-1283]!	; 0xfffffafd
    8f9c:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    8fa0:	18052e01 	stmdane	r5, {r0, r9, sl, fp, sp}
    8fa4:	01040200 	mrseq	r0, R12_usr
    8fa8:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    8fac:	0b059e01 	bleq	1707b8 <__ccfg+0x150810>
    8fb0:	1a052806 	bne	152fd0 <__ccfg+0x133028>
    8fb4:	39301306 	ldmdbcc	r0!, {r1, r2, r8, r9, ip}
    8fb8:	2f060b05 	svccs	0x00060b05
    8fbc:	061a0513 			; <UNDEFINED> instruction: 0x061a0513
    8fc0:	060b0501 	streq	r0, [fp], -r1, lsl #10
    8fc4:	0106133d 	tsteq	r6, sp, lsr r3
    8fc8:	7a030d05 	bvc	cc3e4 <__ccfg+0xac43c>
    8fcc:	4a0a0320 	bmi	289c54 <__ccfg+0x269cac>
    8fd0:	20203c20 	eorcs	r3, r0, r0, lsr #24
    8fd4:	30060b05 	andcc	r0, r6, r5, lsl #22
    8fd8:	01061a05 	tsteq	r6, r5, lsl #20
    8fdc:	2f060b05 	svccs	0x00060b05
    8fe0:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    8fe4:	204a581d 	subcs	r5, sl, sp, lsl r8
    8fe8:	0b030e05 	bleq	cc804 <__ccfg+0xac85c>
    8fec:	20090520 	andcs	r0, r9, r0, lsr #10
    8ff0:	2e2e5e03 	cdpcs	14, 2, cr5, cr14, cr3, {0}
    8ff4:	03060505 	movweq	r0, #25861	; 0x6505
    8ff8:	0c052023 	stceq	0, cr2, [r5], {35}	; 0x23
    8ffc:	09050106 	stmdbeq	r5, {r1, r2, r8}
    9000:	3301053b 	movwcc	r0, #5435	; 0x153b
    9004:	59030905 	stmdbpl	r3, {r0, r2, r8, fp}
    9008:	030e0558 	movweq	r0, #58712	; 0xe558
    900c:	09052022 	stmdbeq	r5, {r1, r5, sp}
    9010:	3c0e0520 	cfstr32cc	mvfx0, [lr], {32}
    9014:	5e030905 	vmlapl.f16	s0, s6, s10	; <UNPREDICTABLE>
    9018:	030d0520 	movweq	r0, #54560	; 0xd520
    901c:	02022e17 	andeq	r2, r2, #368	; 0x170
    9020:	71010100 	mrsvc	r0, (UNDEF: 17)
    9024:	03000001 	movweq	r0, #1
    9028:	00011700 	andeq	r1, r1, r0, lsl #14
    902c:	fb010200 	blx	49836 <__ccfg+0x2988e>
    9030:	01000d0e 	tsteq	r0, lr, lsl #26
    9034:	00010101 	andeq	r0, r1, r1, lsl #2
    9038:	00010000 	andeq	r0, r1, r0
    903c:	2e2e0100 	sufcse	f0, f6, f0
    9040:	2f2e2e2f 	svccs	0x002e2e2f
    9044:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9048:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    904c:	2f2e2e2f 	svccs	0x002e2e2f
    9050:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    9054:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    9058:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    905c:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    9060:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    9064:	752f0062 	strvc	r0, [pc, #-98]!	; 900a <__exidx_end+0x35e6>
    9068:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 8ea4 <__exidx_end+0x3480>
    906c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    9070:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    9074:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    9078:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    907c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    9080:	332e382f 			; <UNDEFINED> instruction: 0x332e382f
    9084:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    9088:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    908c:	2f006564 	svccs	0x00006564
    9090:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    9094:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    9098:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    909c:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    90a0:	2f787945 	svccs	0x00787945
    90a4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    90a8:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    90ac:	302e332e 	eorcc	r3, lr, lr, lsr #6
    90b0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    90b4:	2f62696c 	svccs	0x0062696c
    90b8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    90bc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    90c0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    90c4:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    90c8:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    90cc:	2f646c69 	svccs	0x00646c69
    90d0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    90d4:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    90d8:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    90dc:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    90e0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    90e4:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    90e8:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    90ec:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    90f0:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    90f4:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    90f8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    90fc:	00006564 	andeq	r6, r0, r4, ror #10
    9100:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
    9104:	0100632e 	tsteq	r0, lr, lsr #6
    9108:	74730000 	ldrbtvc	r0, [r3], #-0
    910c:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    9110:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    9114:	745f0000 	ldrbvc	r0, [pc], #-0	; 911c <__exidx_end+0x36f8>
    9118:	73657079 	cmnvc	r5, #121	; 0x79
    911c:	0300682e 	movweq	r6, #2094	; 0x82e
    9120:	65720000 	ldrbvs	r0, [r2, #-0]!
    9124:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    9128:	00030068 	andeq	r0, r3, r8, rrx
    912c:	636f6c00 	cmnvs	pc, #0, 24
    9130:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    9134:	73000003 	movwvc	r0, #3
    9138:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    913c:	00682e62 	rsbeq	r2, r8, r2, ror #28
    9140:	00000004 	andeq	r0, r0, r4
    9144:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    9148:	0048b802 	subeq	fp, r8, r2, lsl #16
    914c:	013e0300 	teqeq	lr, r0, lsl #6
    9150:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    9154:	0305141d 	movweq	r1, #21533	; 0x541d
    9158:	061b0513 			; <UNDEFINED> instruction: 0x061b0513
    915c:	20202e01 	eorcs	r2, r0, r1, lsl #28
    9160:	062f0105 	strteq	r0, [pc], -r5, lsl #2
    9164:	1303054e 	movwne	r0, #13646	; 0x354e
    9168:	01061205 	tsteq	r6, r5, lsl #4
    916c:	051f0105 	ldreq	r0, [pc, #-261]	; 906f <__exidx_end+0x364b>
    9170:	1d052112 	stfnes	f2, [r5, #-72]	; 0xffffffb8
    9174:	03052506 	movweq	r2, #21766	; 0x5506
    9178:	06060513 			; <UNDEFINED> instruction: 0x06060513
    917c:	201e0513 	andscs	r0, lr, r3, lsl r5
    9180:	2e44054a 	cdpcs	5, 4, cr0, cr4, cr10, {2}
    9184:	05491b05 	strbeq	r1, [r9, #-2821]	; 0xfffff4fb
    9188:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    918c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    9190:	02012f01 	andeq	r2, r1, #1, 30
    9194:	0101000a 	tsteq	r1, sl
    9198:	000000dc 	ldrdeq	r0, [r0], -ip
    919c:	00d60003 	sbcseq	r0, r6, r3
    91a0:	01020000 	mrseq	r0, (UNDEF: 2)
    91a4:	000d0efb 	strdeq	r0, [sp], -fp
    91a8:	01010101 	tsteq	r1, r1, lsl #2
    91ac:	01000000 	mrseq	r0, (UNDEF: 0)
    91b0:	2f010000 	svccs	0x00010000
    91b4:	2f727375 	svccs	0x00727375
    91b8:	2f62696c 	svccs	0x0062696c
    91bc:	2f636367 	svccs	0x00636367
    91c0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    91c4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    91c8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    91cc:	2e382f69 	cdpcs	15, 3, cr2, cr8, cr9, {3}
    91d0:	2f312e33 	svccs	0x00312e33
    91d4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    91d8:	00656475 	rsbeq	r6, r5, r5, ror r4
    91dc:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    91e0:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    91e4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    91e8:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    91ec:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    91f0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    91f4:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    91f8:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    91fc:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    9200:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    9204:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    9208:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    920c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    9210:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    9214:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
    9218:	2f2e2e2f 	svccs	0x002e2e2f
    921c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9220:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    9224:	2f2e2e2f 	svccs	0x002e2e2f
    9228:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    922c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    9230:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    9234:	722f6362 	eorvc	r6, pc, #-2013265919	; 0x88000001
    9238:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    923c:	74730000 	ldrbtvc	r0, [r3], #-0
    9240:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    9244:	0100682e 	tsteq	r0, lr, lsr #16
    9248:	745f0000 	ldrbvc	r0, [pc], #-0	; 9250 <__exidx_end+0x382c>
    924c:	73657079 	cmnvc	r5, #121	; 0x79
    9250:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    9254:	65720000 	ldrbvs	r0, [r2, #-0]!
    9258:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    925c:	00020068 	andeq	r0, r2, r8, rrx
    9260:	636f6c00 	cmnvs	pc, #0, 24
    9264:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    9268:	69000002 	stmdbvs	r0, {r1}
    926c:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    9270:	00632e65 	rsbeq	r2, r3, r5, ror #28
    9274:	00000003 	andeq	r0, r0, r3
    9278:	0000019b 	muleq	r0, fp, r1
    927c:	00e20003 	rsceq	r0, r2, r3
    9280:	01020000 	mrseq	r0, (UNDEF: 2)
    9284:	000d0efb 	strdeq	r0, [sp], -fp
    9288:	01010101 	tsteq	r1, r1, lsl #2
    928c:	01000000 	mrseq	r0, (UNDEF: 0)
    9290:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    9294:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    9298:	2f2e2e2f 	svccs	0x002e2e2f
    929c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    92a0:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    92a4:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    92a8:	2f2e2e00 	svccs	0x002e2e00
    92ac:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    92b0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    92b4:	2f2e2e2f 	svccs	0x002e2e2f
    92b8:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    92bc:	2e2f6363 	cdpcs	3, 2, cr6, cr15, cr3, {3}
    92c0:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    92c4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    92c8:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
    92cc:	2f2e2e2f 	svccs	0x002e2e2f
    92d0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    92d4:	2f2e2f2e 	svccs	0x002e2f2e
    92d8:	00636367 	rsbeq	r6, r3, r7, ror #6
    92dc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    92e0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    92e4:	2f2e2e2f 	svccs	0x002e2e2f
    92e8:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 9238 <__exidx_end+0x3814>
    92ec:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    92f0:	2e2e2f63 	cdpcs	15, 2, cr2, cr14, cr3, {3}
    92f4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    92f8:	6e6f632f 	cdpvs	3, 6, cr6, cr15, cr15, {1}
    92fc:	2f676966 	svccs	0x00676966
    9300:	006d7261 	rsbeq	r7, sp, r1, ror #4
    9304:	62696c00 	rsbvs	r6, r9, #0, 24
    9308:	32636367 	rsbcc	r6, r3, #-1677721599	; 0x9c000001
    930c:	0100632e 	tsteq	r0, lr, lsr #6
    9310:	61680000 	cmnvs	r8, r0
    9314:	61746873 	cmnvs	r4, r3, ror r8
    9318:	00682e62 	rsbeq	r2, r8, r2, ror #28
    931c:	61000002 	tstvs	r0, r2
    9320:	692d6d72 	pushvs	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
    9324:	682e6173 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, sp, lr}
    9328:	00000300 	andeq	r0, r0, r0, lsl #6
    932c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    9330:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    9334:	00030068 	andeq	r0, r3, r8, rrx
    9338:	736e6900 	cmnvc	lr, #0, 18
    933c:	6f632d6e 	svcvs	0x00632d6e
    9340:	6174736e 	cmnvs	r4, lr, ror #6
    9344:	2e73746e 	cdpcs	4, 7, cr7, cr3, cr14, {3}
    9348:	00030068 	andeq	r0, r3, r8, rrx
    934c:	6d726100 	ldfvse	f6, [r2, #-0]
    9350:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    9354:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    9358:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    935c:	00682e32 	rsbeq	r2, r8, r2, lsr lr
    9360:	00000001 	andeq	r0, r0, r1
    9364:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    9368:	00490402 	subeq	r0, r9, r2, lsl #8
    936c:	04a40300 	strteq	r0, [r4], #768	; 0x300
    9370:	13030501 	movwne	r0, #13569	; 0x3501
    9374:	16051313 			; <UNDEFINED> instruction: 0x16051313
    9378:	01010101 	tsteq	r1, r1, lsl #2
    937c:	06010501 	streq	r0, [r1], -r1, lsl #10
    9380:	3116050f 	tstcc	r6, pc, lsl #10
    9384:	051d0105 	ldreq	r0, [sp, #-261]	; 0xfffffefb
    9388:	062e3116 			; <UNDEFINED> instruction: 0x062e3116
    938c:	0120202e 			; <UNDEFINED> instruction: 0x0120202e
    9390:	0620012e 	strteq	r0, [r0], -lr, lsr #2
    9394:	20200620 	eorcs	r0, r0, r0, lsr #12
    9398:	20062006 	andcs	r2, r6, r6
    939c:	0f060105 	svceq	0x00060105
    93a0:	00231605 	eoreq	r1, r3, r5, lsl #12
    93a4:	06010402 	streq	r0, [r1], -r2, lsl #8
    93a8:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    93ac:	02004a03 	andeq	r4, r0, #12288	; 0x3000
    93b0:	20060304 	andcs	r0, r6, r4, lsl #6
    93b4:	03040200 	movweq	r0, #16896	; 0x4200
    93b8:	22052006 	andcs	r2, r5, #6
    93bc:	03040200 	movweq	r0, #16896	; 0x4200
    93c0:	1e051406 	cdpne	4, 0, cr1, cr5, cr6, {0}
    93c4:	03040200 	movweq	r0, #16896	; 0x4200
    93c8:	0016052f 	andseq	r0, r6, pc, lsr #10
    93cc:	1d030402 	cfstrsne	mvf0, [r3, #-8]
    93d0:	02000c05 	andeq	r0, r0, #1280	; 0x500
    93d4:	05220304 	streq	r0, [r2, #-772]!	; 0xfffffcfc
    93d8:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
    93dc:	02001e03 	andeq	r1, r0, #3, 28	; 0x30
    93e0:	00200304 	eoreq	r0, r0, r4, lsl #6
    93e4:	06030402 	streq	r0, [r3], -r2, lsl #8
    93e8:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    93ec:	03050103 	movweq	r0, #20739	; 0x5103
    93f0:	03040200 	movweq	r0, #16896	; 0x4200
    93f4:	000c0514 	andeq	r0, ip, r4, lsl r5
    93f8:	06030402 	streq	r0, [r3], -r2, lsl #8
    93fc:	00030501 	andeq	r0, r3, r1, lsl #10
    9400:	06030402 	streq	r0, [r3], -r2, lsl #8
    9404:	00010523 	andeq	r0, r1, r3, lsr #10
    9408:	06030402 	streq	r0, [r3], -r2, lsl #8
    940c:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    9410:	05020103 	streq	r0, [r2, #-259]	; 0xfffffefd
    9414:	Address 0x0000000000009414 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	61657263 	cmnvs	r5, r3, ror #4
       4:	6d5f6574 	cfldr64vs	mvdx6, [pc, #-464]	; fffffe3c <_estack+0xdfffae3c>
       8:	61737365 	cmnvs	r3, r5, ror #6
       c:	45006567 	strmi	r6, [r0, #-1383]	; 0xfffffa99
    return node->data_base.item_array[index];
      10:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
      14:	6c700073 	ldclvs	0, cr0, [r0], #-460	; 0xfffffe34
      18:	6e5f6775 	mrcvs	7, 2, r6, cr15, cr5, {3}
};
      1c:	006c6c75 	rsbeq	r6, ip, r5, ror ip
      20:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
      24:	6263705f 	rsbvs	r7, r3, #95	; 0x5f
      28:	7000735f 	andvc	r7, r0, pc, asr r3
      2c:	646f6d64 	strbtvs	r6, [pc], #-3428	; 34 <g_pfnVectors+0x34>
      30:	6f5f0065 	svcvs	0x005f0065
      34:	78655f6e 	stmdavc	r5!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
      38:	615f7469 	cmpvs	pc, r9, ror #8
      3c:	00736772 	rsbseq	r6, r3, r2, ror r7
			i = k;
      40:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
				j->Next = k;
      44:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
      48:	5f007961 	svcpl	0x00007961
}
      4c:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
      50:	615f6261 	cmpvs	pc, r1, ror #4
      54:	665f6b73 			; <UNDEFINED> instruction: 0x665f6b73
		release;
      58:	725f726f 	subsvc	r7, pc, #-268435450	; 0xf0000006
      5c:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
			nq++;
      60:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	00786564 	rsbseq	r6, r8, r4, ror #10
      68:	7463775f 	strbtvc	r7, [r3], #-1887	; 0xfffff8a1
      6c:	5f626d6f 	svcpl	0x00626d6f
      70:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
      74:	725f0065 	subsvc	r0, pc, #101	; 0x65
      78:	72003834 	andvc	r3, r0, #52, 16	; 0x340000
      7c:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
      80:	00726576 	rsbseq	r6, r2, r6, ror r5
      84:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
      88:	5f62616c 	svcpl	0x0062616c
      8c:	5f746567 	svcpl	0x00746567
	if (!button_still_pressed (__button_list [pbutton]))
      90:	696f6863 	stmdbvs	pc!, {r0, r1, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
      94:	72006563 	andvc	r6, r0, #415236096	; 0x18c00000
      98:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
	if (baction == NULL)
      9c:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
      a0:	47007961 	strmi	r7, [r0, -r1, ror #18]
	(*baction) (pbutton);
      a4:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
endthread
      a8:	39203939 	stmdbcc	r0!, {r0, r3, r4, r5, r8, fp, ip, sp}
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
      b0:	31303220 	teqcc	r0, r0, lsr #4
endthread
      b4:	32303139 	eorscc	r3, r0, #1073741838	; 0x4000000e
      b8:	72282035 	eorvc	r2, r8, #53	; 0x35
      bc:	61656c65 	cmnvs	r5, r5, ror #24
      c0:	20296573 	eorcs	r6, r9, r3, ror r5
      c4:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
fsm sender(struct ResponseMessage *message) {
      c8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      cc:	622d392d 	eorvs	r3, sp, #737280	; 0xb4000
      d0:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
}
      d4:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
      d8:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
      e0:	39353737 	ldmdbcc	r5!, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}
      e4:	2d205d39 	stccs	13, cr5, [r0, #-228]!	; 0xffffff1c
      e8:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
		packet[0] = 0;
      ec:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
		*p = message->tpe;p++;
      f4:	2d20336d 	stccs	3, cr3, [r0, #-436]!	; 0xfffffe4c
      f8:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      fc:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
		*p = message->sender_id;p++;
     100:	6f6c666d 	svcvs	0x006c666d
		*p = message->receiver_id;p++;
     104:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
		switch(message->tpe) {
     108:	733d6962 	teqvc	sp, #1605632	; 0x188000
     10c:	2074666f 	rsbscs	r6, r4, pc, ror #12
     110:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
		tcv_endp(packet);
     114:	613d6863 	teqvs	sp, r3, ror #16
     118:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
		ser_out(CONFIRM_message, "Message sent\r\n");
     11c:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     120:	672d2067 	strvs	r2, [sp, -r7, rrx]!
}
     124:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
		finish;
     128:	20332d66 	eorscs	r2, r3, r6, ror #26
     12c:	7473672d 	ldrbtvc	r6, [r3], #-1837	; 0xfffff8d3
				*p = message->status;p++;
     130:	74636972 	strbtvc	r6, [r3], #-2418	; 0xfffff68e
     134:	6177642d 	cmnvs	r7, sp, lsr #8
				strncpy(p, message->record, sizeof(message->record));
     138:	2d206672 	stccs	6, cr6, [r0, #-456]!	; 0xfffffe38
				*p = message->padding;p++;
     13c:	2d20734f 	stccs	3, cr7, [r0, #-316]!	; 0xfffffec4
				strncpy(p, message->record, sizeof(message->record));
     140:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
				strncpy(p, message->record, sizeof(message->record));
     144:	20393963 	eorscs	r3, r9, r3, ror #18
     148:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0xfffff9d3
				strncpy(p, message->record, sizeof(message->record));
     14c:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
				*p = message->record_index;p++;
     150:	732d6e6f 			; <UNDEFINED> instruction: 0x732d6e6f
				*p = message->padding;
     154:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
				break;
     158:	20736e6f 	rsbscs	r6, r3, pc, ror #28
     15c:	6164662d 	cmnvs	r4, sp, lsr #12
     160:	732d6174 			; <UNDEFINED> instruction: 0x732d6174
     164:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     168:	20736e6f 	rsbscs	r6, r3, pc, ror #28
		node->nnodes[i] = 0;
     16c:	6f6e662d 	svcvs	0x006e662d
     170:	7274732d 	rsbsvc	r7, r4, #-1275068416	; 0xb4000000
     174:	2d746369 	ldclcs	3, cr6, [r4, #-420]!	; 0xfffffe5c
     178:	61696c61 	cmnvs	r9, r1, ror #24
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     17c:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
bool init_node(struct Node* node){
     180:	61662d20 	cmnvs	r6, r0, lsr #26
    node->id  = 0;                  // default id value 0
     184:	2d206d73 	stccs	13, cr6, [r0, #-460]!	; 0xfffffe34
    node->index = 0;                // default entry count 0
     188:	78616d66 	stmdavc	r1!, {r1, r2, r5, r6, r8, sl, fp, sp, lr}^
    node->data_base.item_count = 0; // default no items in array
     18c:	7272652d 	rsbsvc	r6, r2, #188743680	; 0xb400000
	reset_array(node);
     190:	3d73726f 	lfmcc	f7, 2, [r3, #-444]!	; 0xfffffe44
    DEBUG_PRINT("Error initializing node...\n");
     194:	5f003031 	svcpl	0x00003031
     198:	7373625f 	cmnvc	r3, #-268435451	; 0xf0000005
};
     19c:	6174735f 	cmnvs	r4, pc, asr r3
     1a0:	5f5f7472 	svcpl	0x005f7472
uint8_t generate_request_num(void){
     1a4:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    return (uint8_t) (rand() % 255);
     1a8:	746d745f 	strbtvc	r7, [sp], #-1119	; 0xfffffba1
     1ac:	6f6f7200 	svcvs	0x006f7200
     1b0:	6c5f0074 	mrrcvs	0, 7, r0, pc, cr4	; <UNPREDICTABLE>
}
     1b4:	69736662 	ldmdbvs	r3!, {r1, r5, r6, r9, sl, sp, lr}^
            node->nnodes[i] = 0; // set to null byte
     1b8:	5f00657a 	svcpl	0x0000657a
     1bc:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     1c0:	65680073 	strbvs	r0, [r8, #-115]!	; 0xffffff8d
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1c4:	5f006461 	svcpl	0x00006461
};
     1c8:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1cc:	735f6261 	cmpvc	pc, #268435462	; 0x10000006
     1d0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
        node->data_base.item_array[index].data_entry[0] = '\0';
     1d4:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
     1d8:	5f657465 	svcpl	0x00657465
     1dc:	746f7270 	strbtvc	r7, [pc], #-624	; 1e4 <delete_record+0x18>
        node->data_base.item_count -= 1;
     1e0:	5f5f006f 	svcpl	0x005f006f
};
     1e4:	616c7473 	smcvs	51011	; 0xc743
fsm receiver(struct Node* node_db) {
     1e8:	656e5f62 	strbvs	r5, [lr, #-3938]!	; 0xfffff09e
     1ec:	72675f77 	rsbvc	r5, r7, #476	; 0x1dc
     1f0:	5f70756f 	svcpl	0x0070756f
     1f4:	5f006469 	svcpl	0x00006469
     1f8:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     1fc:	675f6261 	ldrbvs	r6, [pc, -r1, ror #4]
     200:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     204:	6f665f64 	svcvs	0x00665f64
		incoming_packet = tcv_rnp(receiving, sfd);
     208:	65645f72 	strbvs	r5, [r4, #-3954]!	; 0xfffff08e
     20c:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
     210:	73657200 	cmnvc	r5, #0, 4
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     214:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     218:	656d5f65 	strbvs	r5, [sp, #-3941]!	; 0xfffff09b
     21c:	67617373 			; <UNDEFINED> instruction: 0x67617373
     220:	00305f65 	eorseq	r5, r0, r5, ror #30
		switch (tpe){
     224:	70736572 	rsbsvc	r6, r3, r2, ror r5
     228:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
     22c:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
     230:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     234:	7200315f 	andvc	r3, r0, #-1073741801	; 0xc0000017
     238:	6f707365 	svcvs	0x00707365
     23c:	5f65736e 	svcpl	0x0065736e
				DEBUG_PRINT("\r\nRECEIVED GID: %u", discovery_request_message->gid);
     240:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
     244:	5f656761 	svcpl	0x00656761
				DEBUG_PRINT("\rRECEIVED TYPE: %u", discovery_request_message->tpe);
     248:	4c5f0032 	mrrcmi	0, 3, r0, pc, cr2	; <UNPREDICTABLE>
     24c:	5f4b434f 	svcpl	0x004b434f
				DEBUG_PRINT("\r\nRECEIVED REQ NUM: %u", discovery_request_message->request_number);
     250:	55434552 	strbpl	r4, [r3, #-1362]	; 0xfffffaae
     254:	56495352 			; <UNDEFINED> instruction: 0x56495352
				DEBUG_PRINT("\r\nRECEIVED SID: %u", discovery_request_message->sender_id);
     258:	00545f45 	subseq	r5, r4, r5, asr #30
     25c:	70736572 	rsbsvc	r6, r3, r2, ror r5
				DEBUG_PRINT("\r\nRECEIVED RID: %u", discovery_request_message->receiver_id);
     260:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
     264:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
				if (discovery_request_message->gid == node_db->gid){
     268:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     26c:	7200345f 	andvc	r3, r0, #1593835520	; 0x5f000000
					response_message_0->gid = discovery_request_message->gid;
     270:	6f707365 	svcvs	0x00707365
					response_message_0->tpe = DISCOVERY_RESPONSE;
     274:	5f65736e 	svcpl	0x0065736e
					response_message_0->request_number = discovery_request_message->request_number;
     278:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
					response_message_0->sender_id = node_db->id;
     27c:	5f656761 	svcpl	0x00656761
					response_message_0->receiver_id = discovery_request_message->sender_id;
     280:	73750035 	cmnvc	r5, #53	; 0x35
					call sender(response_message_0, done_case);
     284:	705f7265 	subsvc	r7, pc, r5, ror #4
     288:	69766f72 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     28c:	5f646564 	svcpl	0x00646564
     290:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
     294:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
     298:	0064695f 	rsbeq	r6, r4, pc, asr r9
     29c:	646f6e6e 	strbtvs	r6, [pc], #-3694	; 2a4 <receiver+0xbc>
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
     2a0:	5f007365 	svcpl	0x00007365
     2a4:	6c72626d 	lfmvs	f6, 2, [r2], #-436	; 0xfffffe4c
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
     2a8:	735f6e65 	cmpvc	pc, #1616	; 0x650
     2ac:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
     2b0:	73694400 	cmnvc	r9, #0, 8
     2b4:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xfffff09d
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
     2b8:	65527972 	ldrbvs	r7, [r2, #-2418]	; 0xfffff68e
     2bc:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2c0:	654d6573 	strbvs	r6, [sp, #-1395]	; 0xfffffa8d
     2c4:	67617373 			; <UNDEFINED> instruction: 0x67617373
     2c8:	5f5f0065 	svcpl	0x005f0065
     2cc:	616c7473 	smcvs	51011	; 0xc743
     2d0:	656e5f62 	strbvs	r5, [lr, #-3938]!	; 0xfffff09e
     2d4:	6f6e5f77 	svcvs	0x006e5f77
     2d8:	695f6564 	ldmdbvs	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     2dc:	73660064 	cmnvc	r6, #100	; 0x64
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     2e0:	6b6c6274 	blvs	1b18cb8 <__ccfg+0x1af8d10>
     2e4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
					node_db->index+=1;
     2e8:	6c6f5f69 	stclvs	15, cr5, [pc], #-420	; 14c <_Min_Stack_Size+0x4c>
		tcv_endp(incoming_packet);
     2ec:	735f0064 	cmpvc	pc, #100	; 0x64
     2f0:	756f6474 	strbvc	r6, [pc, #-1140]!	; fffffe84 <_estack+0xdfffae84>
		proceed receiving;
     2f4:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
     2f8:	5f736f70 	svcpl	0x00736f70
		ser_out(response_1_create, "\r\nData Saved");
     2fc:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
     300:	5f00736e 	svcpl	0x0000736e
		proceed receiving;
     304:	6b6f6f63 	blvs	1bdc098 <__ccfg+0x1bbc0f0>
		ser_out(response_1_delete, "\r\nRecord Deleted");
     308:	74006569 	strvc	r6, [r0], #-1385	; 0xfffffa97
     30c:	695f7663 	ldmdbvs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
		proceed receiving;
     310:	006f666e 	rsbeq	r6, pc, lr, ror #12
     314:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     318:	745f7461 	ldrbvc	r7, [pc], #-1121	; 320 <receiver+0x138>
     31c:	625f5f00 	subsvs	r5, pc, #0, 30
     320:	655f7373 	ldrbvs	r7, [pc, #-883]	; ffffffb5 <_estack+0xdfffafb5>
     324:	5f5f646e 	svcpl	0x005f646e
		proceed receiving;
     328:	69425f00 	stmdbvs	r2, {r8, r9, sl, fp, ip, lr}^
     32c:	746e6967 	strbtvc	r6, [lr], #-2407	; 0xfffff699
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     330:	48544f00 	ldmdami	r4, {r8, r9, sl, fp, lr}^
     334:	455f5245 	ldrbmi	r5, [pc, #-581]	; f7 <sender+0x2f>
     338:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
		proceed receiving;
     33c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 344 <receiver+0x15c>
     340:	64775f6d 	ldrbtvs	r5, [r7], #-3949	; 0xfffff093
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     344:	62007961 	andvs	r7, r0, #1589248	; 0x184000
     348:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
     34c:	6165725f 	cmnvs	r5, pc, asr r2
		proceed receiving;
     350:	725f0064 	subsvc	r0, pc, #100	; 0x64
     354:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     358:	5f5f0074 	svcpl	0x005f0074
     35c:	685f6d74 	ldmdavs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     360:	0072756f 	rsbseq	r7, r2, pc, ror #10
		proceed receiving;
     364:	5f57454e 	svcpl	0x0057454e
     368:	45444f4e 	strbmi	r4, [r4, #-3918]	; 0xfffff0b2
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     36c:	0044495f 	subeq	r4, r4, pc, asr r9
		proceed receiving;
     370:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
     374:	0079706f 	rsbseq	r7, r9, pc, rrx
}
     378:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     37c:	5f62616c 	svcpl	0x0062616c
     380:	5f746567 	svcpl	0x00746567
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     384:	5f77656e 	svcpl	0x0077656e
     388:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
     38c:	0064695f 	rsbeq	r6, r4, pc, asr r9
     390:	6f635f5f 	svcvs	0x00635f5f
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     394:	00746e75 	rsbseq	r6, r4, r5, ror lr
     398:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     39c:	0064695f 	rsbeq	r6, r4, pc, asr r9
     3a0:	6b636170 	blvs	18d8968 <__ccfg+0x18b89c0>
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     3a4:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
     3a8:	00657a69 	rsbeq	r7, r5, r9, ror #20
     3ac:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     3b0:	5f747570 	svcpl	0x00747570
     3b4:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
     3b8:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 3c0 <receiver+0x1d8>
		strncpy(response_message->record, rec, 20);
     3bc:	696d5f6d 	stmdbvs	sp!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     3c0:	6e5f006e 	cdpvs	0, 5, cr0, cr15, cr14, {3}
     3c4:	66747865 	ldrbtvs	r7, [r4], -r5, ror #16
					call sender(response_message_4, done_case);
     3c8:	73657200 	cmnvc	r5, #0, 4
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3cc:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     3d0:	656d5f65 	strbvs	r5, [sp, #-3941]!	; 0xfffff09b
     3d4:	67617373 			; <UNDEFINED> instruction: 0x67617373
     3d8:	00335f65 	eorseq	r5, r3, r5, ror #30
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     3dc:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
     3e0:	00383464 	eorseq	r3, r8, r4, ror #8
					if (delete_record(node_db, delete_record_message->record_index)){
     3e4:	65736e69 	ldrbvs	r6, [r3, #-3689]!	; 0xfffff197
     3e8:	725f7472 	subsvc	r7, pc, #1912602624	; 0x72000000
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3ec:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
     3f0:	5f5f0064 	svcpl	0x005f0064
     3f4:	616c7473 	smcvs	51011	; 0xc743
     3f8:	72635f62 	rsbvc	r5, r3, #392	; 0x188
     3fc:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
     400:	6f72705f 	svcvs	0x0072705f
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     404:	735f6f74 	cmpvc	pc, #116, 30	; 0x1d0
     408:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    return node->data_base.item_array[index];
     40c:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
     410:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
     414:	5f006b5f 	svcpl	0x00006b5f
     418:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     41c:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     420:	6c006675 	stcvs	6, cr6, [r0], {117}	; 0x75
    return node->data_base.item_array[index];
     424:	20676e6f 	rsbcs	r6, r7, pc, ror #28
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     428:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     42c:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     430:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
		strncpy(response_message->record, rec, 20);
     434:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     438:	615f0074 	cmpvs	pc, r4, ror r0	; <UNPREDICTABLE>
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     43c:	69746373 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     440:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
     444:	6e006675 	mcrvs	6, 0, r6, cr0, cr5, {3}
     448:	5f65646f 	svcpl	0x0065646f
     44c:	5f006264 	svcpl	0x00006264
     450:	4946735f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
     454:	5f00454c 	svcpl	0x0000454c
				if(!response_flag){
     458:	00736477 	rsbseq	r6, r3, r7, ror r4
					response_flag=1;
     45c:	73616572 	cmnvc	r1, #478150656	; 0x1c800000
					trigger(&response_flag);
     460:	4e006e6f 	cdpmi	14, 0, cr6, cr0, cr15, {3}
				switch(response_message_5->status){
     464:	0065646f 	rsbeq	r6, r5, pc, ror #8
     468:	465f4244 	ldrbmi	r4, [pc], -r4, asr #4
     46c:	004c4c55 	subeq	r4, ip, r5, asr ip
     470:	49465f5f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     474:	7300454c 	movwvc	r4, #1356	; 0x54c
     478:	6e5f7465 	cdpvs	4, 5, cr7, cr15, cr5, {3}
     47c:	5f65646f 	svcpl	0x0065646f
     480:	5f006469 	svcpl	0x00006469
     484:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
     488:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
     48c:	5f726573 	svcpl	0x00726573
     490:	766f7270 			; <UNDEFINED> instruction: 0x766f7270
     494:	64656469 	strbtvs	r6, [r5], #-1129	; 0xfffffb97
     498:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
     49c:	0064726f 	rsbeq	r7, r4, pc, ror #4
     4a0:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     4a4:	5f62616c 	svcpl	0x0062616c
     4a8:	70736964 	rsbsvc	r6, r3, r4, ror #18
     4ac:	5f79616c 	svcpl	0x0079616c
     4b0:	74006264 	strvc	r6, [r0], #-612	; 0xfffffd9c
     4b4:	6f5f7663 	svcvs	0x005f7663
     4b8:	75006570 	strvc	r6, [r0, #-1392]	; 0xfffffa90
     4bc:	5f726573 	svcpl	0x00726573
     4c0:	766f7270 			; <UNDEFINED> instruction: 0x766f7270
     4c4:	64656469 	strbtvs	r6, [r5], #-1129	; 0xfffffb97
     4c8:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
     4cc:	5f007865 	svcpl	0x00007865
     4d0:	72656d65 	rsbvc	r6, r5, #6464	; 0x1940
     4d4:	636e6567 	cmnvs	lr, #432013312	; 0x19c00000
     4d8:	65730079 	ldrbvs	r0, [r3, #-121]!	; 0xffffff87
						if (response_checker[0] == response_message_5->request_number){
     4dc:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
     4e0:	0064695f 	rsbeq	r6, r4, pc, asr r9
     4e4:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
							switch(response_checker[1]){
     4e8:	5f62616c 	svcpl	0x0062616c
     4ec:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
     4f0:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
     4f4:	6f72705f 	svcvs	0x0072705f
									proceed response_1_create;
     4f8:	5f006f74 	svcpl	0x00006f74
						proceed response_2;
     4fc:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
									proceed response_1_delete;
     500:	635f6261 	cmpvs	pc, #268435462	; 0x10000006
									proceed response_1_retrieve;
     504:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
						proceed response_2;
     508:	69656e5f 	stmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
						proceed response_3;
     50c:	6f626867 	svcvs	0x00626867
						proceed response_4;
     510:	615f7275 	cmpvs	pc, r5, ror r2	; <UNPREDICTABLE>
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     514:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
     518:	675f5f00 	ldrbvs	r5, [pc, -r0, lsl #30]
}
     51c:	5f63756e 	svcpl	0x0063756e
     520:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
     524:	00747369 	rsbseq	r7, r4, r9, ror #6
     528:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
bool delete_all(struct Node *node){
     52c:	756f635f 	strbvc	r6, [pc, #-863]!	; 1d5 <delete_record+0x9>
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     530:	5f00746e 	svcpl	0x0000746e
        for(int i = 0; i <= node->data_base.item_count; i++){
     534:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
            node->data_base.item_array[i].data_entry[0] = '\0';
     538:	725f6261 	subsvc	r6, pc, #268435462	; 0x10000006
        for(int i = 0; i <= node->data_base.item_count; i++){
     53c:	6f707365 	svcvs	0x00707365
            node->data_base.item_array[i].timestamp = 0;
     540:	5f65736e 	svcpl	0x0065736e
        for(int i = 0; i <= node->data_base.item_count; i++){
     544:	65645f31 	strbvs	r5, [r4, #-3889]!	; 0xfffff0cf
    node->data_base.item_count = 0;
     548:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
}
     54c:	735f5f00 	cmpvc	pc, #0, 30
        return true;
     550:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
fsm root {
     554:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     558:	5f64695f 	svcpl	0x0064695f
     55c:	5f726f66 	svcpl	0x00726f66
     560:	61657263 	cmnvs	r5, r3, ror #4
     564:	5f006574 	svcpl	0x00006574
     568:	5f6d745f 	svcpl	0x006d745f
     56c:	00636573 	rsbeq	r6, r3, r3, ror r5
     570:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     574:	6164795f 	cmnvs	r4, pc, asr r9
     578:	695f0079 	ldmdbvs	pc, {r0, r3, r4, r5, r6}^	; <UNPREDICTABLE>
     57c:	5f00636e 	svcpl	0x0000636e
     580:	00646e69 	rsbeq	r6, r4, r9, ror #28
     584:	656e6567 	strbvs	r6, [lr, #-1383]!	; 0xfffffa99
     588:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
     58c:	7165725f 	cmnvc	r5, pc, asr r2
     590:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
     594:	6d756e5f 	ldclvs	14, cr6, [r5, #-380]!	; 0xfffffe84
     598:	735f5f00 	cmpvc	pc, #0, 30
     59c:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     5a0:	6174735f 	cmnvs	r4, pc, asr r3
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     5a4:	725f7472 	subsvc	r7, pc, #1912602624	; 0x72000000
     5a8:	69727465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     5ac:	5f657665 	svcpl	0x00657665
		init_node(node_db);
     5b0:	746f7270 	strbtvc	r7, [pc], #-624	; 5b8 <root+0x64>
		phys_cc1350(0, MAX_PKT_LEN);
     5b4:	6d5f006f 	ldclvs	0, cr0, [pc, #-444]	; 400 <receiver+0x218>
     5b8:	74727362 	ldrbtvc	r7, [r2], #-866	; 0xfffffc9e
		tcv_plug (0, &plug_null);
     5bc:	7363776f 	cmnvc	r3, #29097984	; 0x1bc0000
     5c0:	6174735f 	cmnvs	r4, pc, asr r3
		sfd = tcv_open (WNONE, 0, 0);
     5c4:	65006574 	strvs	r6, [r0, #-1396]	; 0xfffffa8c
     5c8:	00656764 	rsbeq	r6, r5, r4, ror #14
     5cc:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     5d0:	5f62616c 	svcpl	0x0062616c
     5d4:	74006b6f 	strvc	r6, [r0], #-2927	; 0xfffff491
			diag("Cannot open tcv interface");
     5d8:	73656d69 	cmnvc	r5, #6720	; 0x1a40
     5dc:	706d6174 	rsbvc	r6, sp, r4, ror r1
			halt();
     5e0:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
		tcv_control(sfd, PHYSOPT_ON, NULL);
     5e4:	6e5f7261 	cdpvs	2, 5, cr7, cr15, cr1, {3}
     5e8:	5f65646f 	svcpl	0x0065646f
		runfsm receiver(node_db);
     5ec:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
     5f0:	756f6268 	strbvc	r6, [pc, #-616]!	; 390 <receiver+0x1a8>
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     5f4:	72615f72 	rsbvc	r5, r1, #456	; 0x1c8
     5f8:	00796172 	rsbseq	r6, r9, r2, ror r1
     5fc:	61765f5f 	cmnvs	r6, pc, asr pc
     600:	0065756c 	rsbeq	r7, r5, ip, ror #10
     604:	7335705f 	teqvc	r5, #95	; 0x5f
     608:	625f5f00 	subsvs	r5, pc, #0, 30
		ser_inf(get_choice, "%c", &CHOICE);
     60c:	6f747475 	svcvs	0x00747475
     610:	696c5f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     614:	4d007473 	cfstrsmi	mvf7, [r0, #-460]	; 0xfffffe34
		switch(CHOICE) {
     618:	61737365 	cmnvs	r3, r5, ror #6
     61c:	79546567 	ldmdbvc	r4, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
     620:	5f006570 	svcpl	0x00006570
     624:	72736377 	rsbsvc	r6, r3, #-603979775	; 0xdc000001
     628:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
     62c:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
     630:	00657461 	rsbeq	r7, r5, r1, ror #8
     634:	6c626d5f 	stclvs	13, cr6, [r2], #-380	; 0xfffffe84
     638:	735f6e65 	cmpvc	pc, #1616	; 0x650
     63c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     640:	6f776100 	svcvs	0x00776100
     644:	65006472 	strvs	r6, [r0, #-1138]	; 0xfffffb8e
				proceed menu;
     648:	70746e76 	rsbsvc	r6, r4, r6, ror lr
     64c:	5553006e 	ldrbpl	r0, [r3, #-110]	; 0xffffff92
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     650:	53454343 	movtpl	r4, #21315	; 0x5343
     654:	656c0053 	strbvs	r0, [ip, #-83]!	; 0xffffffad
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     658:	636c6264 	cmnvs	ip, #100, 4	; 0x40000006
     65c:	735f5f00 	cmpvc	pc, #0, 30
     660:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
		DEBUG_PRINT("setting node group ID");
     664:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     668:	69766965 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    node->gid = gid; 
     66c:	5f00676e 	svcpl	0x0000676e
		proceed menu;
     670:	5f6d745f 	svcpl	0x006d745f
     674:	7961646d 	stmdbvc	r1!, {r0, r2, r3, r5, r6, sl, sp, lr}^
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     678:	735f5f00 	cmpvc	pc, #0, 30
     67c:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     680:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     684:	69645f74 	stmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     688:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     68c:	00797265 	rsbseq	r7, r9, r5, ror #4
     690:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
		if((node_db->id < 1) || (node_db->id > 25)){
     694:	6e75665f 	mrcvs	6, 3, r6, cr5, cr15, {2}
     698:	6d5f0063 	ldclvs	0, cr0, [pc, #-396]	; 514 <receiver+0x32c>
     69c:	6f747262 	svcvs	0x00747262
			strncpy(reason, "Out of Range", 50);
     6a0:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
     6a4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
			proceed invalid_node_id;
     6a8:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
     6ac:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
				strncpy(reason, "ID is already in use", 50);
     6b0:	656c0030 	strbvs	r0, [ip, #-48]!	; 0xffffffd0
		for(int i = 0; i < node_db->index; i++){
     6b4:	6b6c6264 	blvs	1b1904c <__ccfg+0x1af90a4>
     6b8:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     6bc:	79735f69 	ldmdbvc	r3!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
		proceed menu;
     6c0:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     6c4:	735f5f00 	cmpvc	pc, #0, 30
     6c8:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     6cc:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
     6d0:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
		proceed get_new_node_id;
     6d4:	5f315f65 	svcpl	0x00315f65
     6d8:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
		if (!clear_node_neighbour_array(node_db)){
     6dc:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
     6e0:	73657200 	cmnvc	r5, #0, 4
			strncpy(reason, "Error Clearing Node Array", 50);
     6e4:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     6e8:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     6ec:	656b6365 	strbvs	r6, [fp, #-869]!	; 0xfffffc9b
			proceed error;
     6f0:	69440072 	stmdbvs	r4, {r1, r4, r5, r6}^
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     6f4:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
     6f8:	52797265 	rsbspl	r7, r9, #1342177286	; 0x50000006
		request_packet->gid = node_db->gid;
     6fc:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
     700:	654d7473 	strbvs	r7, [sp, #-1139]	; 0xfffffb8d
		request_packet->tpe = DISCOVERY_REQUEST;
     704:	67617373 			; <UNDEFINED> instruction: 0x67617373
		request_packet->request_number = generate_request_num();
     708:	5f5f0065 	svcpl	0x005f0065
     70c:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; 634 <root+0xe0>	; <UNPREDICTABLE>
		call sender(request_packet, wait_discovery);
     710:	6b746e69 	blvs	1d1c0bc <__ccfg+0x1cfc114>
     714:	735f5f00 	cmpvc	pc, #0, 30
		request_packet->receiver_id=0;
     718:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
		call sender(request_packet, wait_discovery);
     71c:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     720:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xfffff09b
     724:	6c665f00 	stclvs	15, cr5, [r6], #-0
			release;
     728:	5f6b636f 	svcpl	0x006b636f
				proceed get_new_node_id;
     72c:	5f5f0074 	svcpl	0x005f0074
				proceed clear_neighbour_array;
     730:	616c7473 	smcvs	51011	; 0xc743
				proceed create_proto_start;
     734:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
				proceed start_delete_proto;
     738:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
				proceed retrieve_proto;
     73c:	325f6573 	subscc	r6, pc, #482344960	; 0x1cc00000
				proceed display_db;
     740:	735f5f00 	cmpvc	pc, #0, 30
				proceed del_local;
     744:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
			if(node_db->id == node_db->nnodes[i]){
     748:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
     74c:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     750:	00335f65 	eorseq	r5, r3, r5, ror #30
				strncpy(reason, "ID is already in use", 50);
     754:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     758:	5f62616c 	svcpl	0x0062616c
				proceed invalid_node_id;
     75c:	70736572 	rsbsvc	r6, r3, r2, ror r5
     760:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
		for(int i = 0; i < node_db->index; i++){
     764:	5f00345f 	svcpl	0x0000345f
		if (discovery_wait_flag == 0){
     768:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
			discovery_wait_flag=1;
     76c:	6f695f00 	svcvs	0x00695f00
     770:	73007362 	movwvc	r7, #866	; 0x362
			delay(3000, find_proto_start);
     774:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     778:	61640073 	smcvs	16387	; 0x4003
		if (discovery_wait_flag == 1){
     77c:	655f6174 	ldrbvs	r6, [pc, #-372]	; 610 <root+0xbc>
			discovery_wait_flag=0;
     780:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     784:	735f5f00 	cmpvc	pc, #0, 30
			delay(3000, display_neighbour_nodes);
     788:	69646964 	stmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
     78c:	0074696e 	rsbseq	r6, r4, lr, ror #18
     790:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     794:	5f62616c 	svcpl	0x0062616c
     798:	61766e69 	cmnvs	r6, r9, ror #28
     79c:	5f64696c 	svcpl	0x0064696c
     7a0:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
     7a4:	0064695f 	rsbeq	r6, r4, pc, asr r9
     7a8:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     7ac:	5f62616c 	svcpl	0x0062616c
     7b0:	5f746567 	svcpl	0x00746567
     7b4:	6f636572 	svcvs	0x00636572
     7b8:	745f6472 	ldrbvc	r6, [pc], #-1138	; 7c0 <root+0x26c>
     7bc:	72635f6f 	rsbvc	r5, r3, #444	; 0x1bc
     7c0:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
     7c4:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
     7c8:	76696572 			; <UNDEFINED> instruction: 0x76696572
     7cc:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
     7d0:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     7d4:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
     7d8:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7dc:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     7e0:	006e6964 	rsbeq	r6, lr, r4, ror #18
			if (node_db->nnodes[i] == 0) break;
     7e4:	6d61675f 	stclvs	7, cr6, [r1, #-380]!	; 0xfffffe84
     7e8:	735f616d 	cmpvc	pc, #1073741851	; 0x4000001b
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     7ec:	676e6769 	strbvs	r6, [lr, -r9, ror #14]!
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7f0:	6c006d61 	stcvs	13, cr6, [r0], {97}	; 0x61
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     7f4:	20676e6f 	rsbcs	r6, r7, pc, ror #28
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7f8:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
		proceed menu;
     7fc:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     800:	735f5f00 	cmpvc	pc, #0, 30
     804:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     808:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     80c:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
     810:	6f72675f 	svcvs	0x0072675f
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     814:	695f7075 	ldmdbvs	pc, {r0, r2, r4, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
     818:	665f0064 	ldrbvs	r0, [pc], -r4, rrx
			strncpy(reason, "Error: improper ID", 50);
     81c:	6c656572 	cfstr64vs	mvdx6, [r5], #-456	; 0xfffffe38
     820:	00747369 	rsbseq	r7, r4, r9, ror #6
     824:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
			proceed error;
     828:	00676e69 	rsbeq	r6, r7, r9, ror #28
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     82c:	6c756d5f 	ldclvs	13, cr6, [r5], #-380	; 0xfffffe84
     830:	544b0074 	strbpl	r0, [fp], #-116	; 0xffffff8c
		ser_in(get_record_to_create, user_provided_record, 20);
     834:	612f504d 			; <UNDEFINED> instruction: 0x612f504d
     838:	632e7070 			; <UNDEFINED> instruction: 0x632e7070
     83c:	555f5f00 	ldrbpl	r5, [pc, #-3840]	; fffff944 <_estack+0xdfffa944>
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     840:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
		create_message->gid = node_db->gid;
     844:	63775f00 	cmnvs	r7, #0, 30
     848:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!	; 688 <root+0x134>
     84c:	74735f62 	ldrbtvc	r5, [r3], #-3938	; 0xfffff09e
		create_message->tpe = 2;
     850:	00657461 	rsbeq	r7, r5, r1, ror #8
		create_message->request_number = generate_request_num();
     854:	6c69665f 	stclvs	6, cr6, [r9], #-380	; 0xfffffe84
		create_message->sender_id = node_db->id;
     858:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
     85c:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
     860:	665f6573 			; <UNDEFINED> instruction: 0x665f6573
		strncpy(create_message->record, user_provided_record, 20);
     864:	0067616c 	rsbeq	r6, r7, ip, ror #2
		create_message->receiver_id = user_provided_receiver_id;
     868:	70615f5f 	rsbvc	r5, r1, pc, asr pc
		strncpy(create_message->record, user_provided_record, 20);
     86c:	735f5f00 	cmpvc	pc, #0, 30
		response_checker[0] = create_message->request_number;
     870:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
		call sender(create_message, wait);
     874:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
		response_checker[1] = create_message->tpe;
     878:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
     87c:	5f006c61 	svcpl	0x00006c61
		call sender(create_message, wait);
     880:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
     884:	70756e61 	rsbsvc	r6, r5, r1, ror #28
     888:	735f5f00 	cmpvc	pc, #0, 30
     88c:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     890:	6f6f6c5f 	svcvs	0x006f6c5f
     894:	68745f70 	ldmdavs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     898:	67756f72 			; <UNDEFINED> instruction: 0x67756f72
     89c:	61645f68 	cmnvs	r4, r8, ror #30
     8a0:	44006174 	strmi	r6, [r0], #-372	; 0xfffffe8c
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     8a4:	54454c45 	strbpl	r4, [r5], #-3141	; 0xfffff3bb
     8a8:	52455f45 	subpl	r5, r5, #276	; 0x114
			strncpy(reason, "Error: improper node ID", 50);
     8ac:	00524f52 	subseq	r4, r2, r2, asr pc
     8b0:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
			proceed error;
     8b4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     8b8:	6e00745f 	cfmvsrvs	mvf0, r7
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     8bc:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
     8c0:	72756f62 	rsbsvc	r6, r5, #392	; 0x188
		ser_inf(get_index_for_delete, "%d", &user_provided_index);
     8c4:	6568635f 	strbvs	r6, [r8, #-863]!	; 0xfffffca1
     8c8:	73006b63 	movwvc	r6, #2915	; 0xb63
     8cc:	6e5f7465 	cdpvs	4, 5, cr7, cr15, cr5, {3}
		if (user_provided_index < 0 || user_provided_index > 40){
     8d0:	5f65646f 	svcpl	0x0065646f
			strncpy(reason, "Error: invalid index", 50);
     8d4:	00646967 	rsbeq	r6, r4, r7, ror #18
     8d8:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     8dc:	655f6d65 	ldrbvs	r6, [pc, #-3429]	; fffffb7f <_estack+0xdfffab7f>
			proceed error;
     8e0:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     8e4:	756f635f 	strbvc	r6, [pc, #-863]!	; 58d <root+0x39>
     8e8:	5f00746e 	svcpl	0x0000746e
		delete_record->gid = node_db->gid;
     8ec:	5f6d745f 	svcpl	0x006d745f
     8f0:	73647369 	cmnvc	r4, #-1543503871	; 0xa4000001
     8f4:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
		delete_record->tpe = DELETE_RECORD;
     8f8:	6d647071 	stclvs	0, cr7, [r4, #-452]!	; 0xfffffe3c
		delete_record->request_number = generate_request_num();
     8fc:	5f685f00 	svcpl	0x00685f00
     900:	6e727265 	cdpvs	2, 7, cr7, cr2, cr5, {3}
		delete_record->sender_id = node_db->id;
     904:	6374006f 	cmnvs	r4, #111	; 0x6f
		response_checker[0] = delete_record->request_number;
     908:	6c635f76 	stclvs	15, cr5, [r3], #-472	; 0xfffffe28
		delete_record->receiver_id = user_provided_receiver_id;
     90c:	6e6f006f 	cdpvs	0, 6, cr0, cr15, cr15, {3}
     910:	736e6d64 	cmnvc	lr, #100, 26	; 0x1900
		delete_record->record_index = user_provided_index;
     914:	756e7000 	strbvc	r7, [lr, #-0]!
     918:	5f5f006d 	svcpl	0x005f006d
		response_checker[0] = delete_record->request_number;
     91c:	616c7473 	smcvs	51011	; 0xc743
		call sender(&delete_record, wait);
     920:	656d5f62 	strbvs	r5, [sp, #-3938]!	; 0xfffff09e
     924:	7200756e 	andvc	r7, r0, #461373440	; 0x1b800000
     928:	69727465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     92c:	64657665 	strbtvs	r7, [r5], #-1637	; 0xfffff99b
     930:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     934:	0064726f 	rsbeq	r7, r4, pc, ror #4
     938:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
		ser_inf(get_id_for_retrieve, "%d", &user_provided_receiver_id);
     93c:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
     940:	4f410074 	svcmi	0x00410074
     944:	4354524e 	cmpmi	r4, #-536870908	; 0xe0000004
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     948:	47636553 			; <UNDEFINED> instruction: 0x47636553
     94c:	5f007465 	svcpl	0x00007465
			strncpy(reason, "Error: improper node ID", 50);
     950:	5f6d745f 	svcpl	0x006d745f
     954:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
     958:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0xfffffab2
			proceed error;
     95c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     960:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
     964:	735f5f00 	cmpvc	pc, #0, 30
		ser_inf(get_index_for_retrieve, "%d", &user_provided_index);
     968:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     96c:	6e69665f 	mcrvs	6, 3, r6, cr9, cr15, {2}
     970:	72705f64 	rsbsvc	r5, r0, #100, 30	; 0x190
		if (user_provided_index < 0 || user_provided_index > 40){
     974:	5f6f746f 	svcpl	0x006f746f
     978:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
			strncpy(reason, "Error: invalid index", 50);
     97c:	45520074 	ldrbmi	r0, [r2, #-116]	; 0xffffff8c
     980:	45495254 	strbmi	r5, [r9, #-596]	; 0xfffffdac
			proceed error;
     984:	525f4556 	subspl	r4, pc, #360710144	; 0x15800000
     988:	524f4345 	subpl	r4, pc, #335544321	; 0x14000001
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     98c:	69640044 	stmdbvs	r4!, {r2, r6}^
		retrieve_record->tpe = RETRIEVE_RECORD;
     990:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     994:	5f797265 	svcpl	0x00797265
		retrieve_record->gid = node_db->gid;
     998:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
		retrieve_record->tpe = RETRIEVE_RECORD;
     99c:	616c665f 	cmnvs	ip, pc, asr r6
		retrieve_record->request_number = generate_request_num();
     9a0:	5f5f0067 	svcpl	0x005f0067
     9a4:	616c7473 	smcvs	51011	; 0xc743
		retrieve_record->sender_id = node_db->id;
     9a8:	65675f62 	strbvs	r5, [r7, #-3938]!	; 0xfffff09e
     9ac:	64695f74 	strbtvs	r5, [r9], #-3956	; 0xfffff08c
     9b0:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
		call sender(&retrieve_record, wait);
     9b4:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
		retrieve_record->receiver_id = user_provided_receiver_id;
     9b8:	76656972 			; <UNDEFINED> instruction: 0x76656972
		retrieve_record->record_index = user_provided_index;
     9bc:	49440065 	stmdbmi	r4, {r0, r2, r5, r6}^
		response_checker[0] = retrieve_record->request_number;
     9c0:	564f4353 			; <UNDEFINED> instruction: 0x564f4353
		response_checker[1] = retrieve_record->tpe;
     9c4:	5f595245 	svcpl	0x00595245
     9c8:	50534552 	subspl	r4, r3, r2, asr r5
		call sender(&retrieve_record, wait);
     9cc:	45534e4f 	ldrbmi	r4, [r3, #-3663]	; 0xfffff1b1
     9d0:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
     9d4:	76656972 			; <UNDEFINED> instruction: 0x76656972
     9d8:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     9dc:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     9e0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
		if(node_db->data_base.item_count != 0){
     9e4:	65685f69 	strbvs	r5, [r8, #-3945]!	; 0xfffff097
     9e8:	6e655f78 	mcrvs	15, 3, r5, cr5, cr8, {3}
		ser_out(loop_through_data, "\r\n");
     9ec:	61745f63 	cmnvs	r4, r3, ror #30
     9f0:	00656c62 	rsbeq	r6, r5, r2, ror #24
		proceed menu;
     9f4:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     9f8:	5f62616c 	svcpl	0x0062616c
		delete_all(node_db);
     9fc:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
     a00:	00676e69 	rsbeq	r6, r7, r9, ror #28
		proceed menu;
     a04:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
		delay(3000, timeout);
     a08:	6576655f 	ldrbvs	r6, [r6, #-1375]!	; 0xfffffaa1
     a0c:	745f746e 	ldrbvc	r7, [pc], #-1134	; a14 <root+0x4c0>
     a10:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
		when(&response_flag, menu);
     a14:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
     a18:	626d5f00 	rsbvs	r5, sp, #0, 30
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a1c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     a20:	5f5f0065 	svcpl	0x005f0065
     a24:	616c7473 	smcvs	51011	; 0xc743
     a28:	65675f62 	strbvs	r5, [r7, #-3938]!	; 0xfffff09e
     a2c:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
     a30:	5f786564 	svcpl	0x00786564
     a34:	5f726f66 	svcpl	0x00726f66
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     a38:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
     a3c:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
     a40:	735f5f00 	cmpvc	pc, #0, 30
     a44:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a48:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     a4c:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
		ser_out(timeout, "\r\nFailed to reach the destination");
     a50:	665f7865 	ldrbvs	r7, [pc], -r5, ror #16
     a54:	645f726f 	ldrbvs	r7, [pc], #-623	; a5c <root+0x508>
		proceed menu;
     a58:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     a5c:	63740065 	cmnvs	r4, #101	; 0x65
     a60:	6d785f76 	ldclvs	15, cr5, [r8, #-472]!	; 0xfffffe28
     a64:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
		proceed menu;
     a68:	2074726f 	rsbscs	r7, r4, pc, ror #4
}
     a6c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     a70:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     a74:	5f62616c 	svcpl	0x0062616c
     a78:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     a7c:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0xfffffca1
     a80:	5f657461 	svcpl	0x00657461
     a84:	6f636572 	svcvs	0x00636572
     a88:	6d5f6472 	cfldrdvs	mvd6, [pc, #-456]	; 8c8 <root+0x374>
     a8c:	61737365 	cmnvs	r3, r5, ror #6
     a90:	73006567 	movwvc	r6, #1383	; 0x567
     a94:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
     a98:	656c0072 	strbvs	r0, [ip, #-114]!	; 0xffffff8e
     a9c:	73747364 	cmnvc	r4, #100, 6	; 0x90000001
     aa0:	735f5f00 	cmpvc	pc, #0, 30
     aa4:	69700066 	ldmdbvs	r0!, {r1, r2, r5, r6}^
     aa8:	646f696e 	strbtvs	r6, [pc], #-2414	; ab0 <root+0x55c>
     aac:	5f00745f 	svcpl	0x0000745f
     ab0:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     ab4:	675f0062 	ldrbvs	r0, [pc, -r2, rrx]
     ab8:	61626f6c 	cmnvs	r2, ip, ror #30
     abc:	6d695f6c 	stclvs	15, cr5, [r9, #-432]!	; 0xfffffe50
     ac0:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
     ac4:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
     ac8:	745f5f00 	ldrbvc	r5, [pc], #-3840	; ad0 <devinit_uart>
     acc:	65795f6d 	ldrbvs	r5, [r9, #-3949]!	; 0xfffff093
static void devinit_uart (int devnum) {
     ad0:	61007261 	tstvs	r0, r1, ror #4
	adddevfunc (ioreq_uart_a, devnum);
     ad4:	6d657373 	stclvs	3, cr7, [r5, #-460]!	; 0xfffffe34
     ad8:	5f656c62 	svcpl	0x00656c62
void udelay (volatile word n) {
     adc:	70736572 	rsbsvc	r6, r3, r2, ror r5
     ae0:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
	while (n) {
     ae4:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
     ae8:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
}
     aec:	735f5f00 	cmpvc	pc, #0, 30
	while (n--);
     af0:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     af4:	6b73615f 	blvs	1cd9078 <__ccfg+0x1cb90d0>
     af8:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
		n--;
     afc:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
     b00:	5f64726f 	svcpl	0x0064726f
     b04:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
void mdelay (volatile word n) {
     b08:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
     b0c:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
	while (n) {
     b10:	52007865 	andpl	r7, r0, #6619136	; 0x650000
     b14:	49525445 	ldmdbmi	r2, {r0, r2, r6, sl, ip, lr}^
}
     b18:	5f455645 	svcpl	0x00455645
		udelay (999);
     b1c:	4f525245 	svcmi	0x00525245
     b20:	5f5f0052 	svcpl	0x005f0052
		n--;
     b24:	616c7473 	smcvs	51011	; 0xc743
     b28:	72655f62 	rsbvc	r5, r5, #392	; 0x188
     b2c:	00726f72 	rsbseq	r6, r2, r2, ror pc
     b30:	454c4544 	strbmi	r4, [ip, #-1348]	; 0xfffffabc
void __pi_ondomain (lword d) {
     b34:	525f4554 	subspl	r4, pc, #84, 10	; 0x15000000
     b38:	524f4345 	subpl	r4, pc, #335544321	; 0x14000001
		if (__pi_systat.effpdm > 1)
     b3c:	6c5f0044 	mrrcvs	0, 4, r0, pc, cr4	; <UNPREDICTABLE>
     b40:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
			__pi_systat.effpdm = 1;
     b44:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
	PRCMPowerDomainOn (d);
     b48:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     b4c:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
     b50:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     b54:	76635f00 	strbtvc	r5, [r3], -r0, lsl #30
     b58:	6e656c74 	mcrvs	12, 3, r6, cr5, cr4, {3}
     b5c:	616d5f00 	cmnvs	sp, r0, lsl #30
	__pi_systat.ondmns |= d;
     b60:	73647778 	cmnvc	r4, #120, 14	; 0x1e00000
     b64:	366c5f00 	strbtcc	r5, [ip], -r0, lsl #30
}
     b68:	625f6134 	subsvs	r6, pc, #52, 2
     b6c:	5f006675 	svcpl	0x00006675
void __pi_offdomain (lword d) {
     b70:	736b6c62 	cmnvc	fp, #25088	; 0x6200
     b74:	00657a69 	rsbeq	r7, r5, r9, ror #20
	PRCMPowerDomainOff (d);
     b78:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     b7c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
     b80:	5f657465 	svcpl	0x00657465
     b84:	6f636572 	svcvs	0x00636572
	if (d & PRCM_DOMAIN_RFCORE) {
     b88:	5f006472 	svcpl	0x00006472
     b8c:	5f61765f 	svcpl	0x0061765f
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     b90:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     b94:	6f6c5f00 	svcvs	0x006c5f00
			__pi_systat.effpdm = __pi_systat.reqpdm;
     b98:	43006b63 	movwmi	r6, #2915	; 0xb63
     b9c:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
	__pi_systat.ondmns &= ~d;
     ba0:	63655265 	cmnvs	r5, #1342177286	; 0x50000006
     ba4:	4d64726f 	sfmmi	f7, 2, [r4, #-444]!	; 0xfffffe44
}
     ba8:	61737365 	cmnvs	r3, r5, ror #6
     bac:	61006567 	tstvs	r0, r7, ror #10
void __pi_syserror (word ec, const char *m) {
     bb0:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
	diag ("SYSERR: %x, %s", ec, m);
     bb4:	5f007373 	svcpl	0x00007373
     bb8:	5f69705f 	svcpl	0x0069705f
  __ASM volatile ("cpsid i" : : : "memory");
     bbc:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
     bc0:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     bc4:	7663725f 			; <UNDEFINED> instruction: 0x7663725f
     bc8:	696e5f00 	stmdbvs	lr!, {r8, r9, sl, fp, ip, lr}^
		all_leds_blink;
     bcc:	0073626f 	rsbseq	r6, r3, pc, ror #4
     bd0:	746e6977 	strbtvc	r6, [lr], #-2423	; 0xfffff689
     bd4:	5f00745f 	svcpl	0x0000745f
     bd8:	5f69705f 	svcpl	0x0069705f
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     bdc:	5f626370 	svcpl	0x00626370
     be0:	69540074 	ldmdbvs	r4, {r2, r4, r5, r6}^
     be4:	0072656d 	rsbseq	r6, r2, sp, ror #10
     be8:	43534944 	cmpmi	r3, #68, 18	; 0x110000
     bec:	5245564f 	subpl	r5, r5, #82837504	; 0x4f00000
     bf0:	45525f59 	ldrbmi	r5, [r2, #-3929]	; 0xfffff0a7
	while (1) {
     bf4:	53455551 	movtpl	r5, #21841	; 0x5551
     bf8:	5f5f0054 	svcpl	0x005f0054
     bfc:	616c7473 	smcvs	51011	; 0xc743
     c00:	4f435f62 	svcmi	0x00435f62
void tci_run_delay_timer () {
     c04:	5249464e 	subpl	r4, r9, #81788928	; 0x4e00000
	setdel = __pi_mintk - __pi_old;
     c08:	656d5f4d 	strbvs	r5, [sp, #-3917]!	; 0xfffff0b3
     c0c:	67617373 			; <UNDEFINED> instruction: 0x67617373
     c10:	645f0065 	ldrbvs	r0, [pc], #-101	; c18 <tci_run_delay_timer+0x14>
     c14:	685f6f73 	ldmdavs	pc, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c18:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     c1c:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
     c20:	696d6f63 	stmdbvs	sp!, {r0, r1, r5, r6, r8, r9, sl, fp, sp, lr}^
     c24:	705f676e 	subsvc	r6, pc, lr, ror #14
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     c28:	656b6361 	strbvs	r6, [fp, #-865]!	; 0xfffffc9f
	sti_tim;
     c2c:	5f5f0074 	svcpl	0x005f0074
}
     c30:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     c34:	5f5f0074 	svcpl	0x005f0074
     c38:	616c7473 	smcvs	51011	; 0xc743
     c3c:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
     c40:	61697469 	cmnvs	r9, r9, ror #8
	cli_aux;
     c44:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
     c48:	646f6e5f 	strbtvs	r6, [pc], #-3679	; c50 <tci_run_auxiliary_timer+0xc>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c4c:	635f0065 	cmpvs	pc, #101	; 0x65
     c50:	75627476 	strbvc	r7, [r2, #-1142]!	; 0xfffffb8a
     c54:	6e750066 	cdpvs	0, 7, cr0, cr5, cr6, {3}
     c58:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
	sti_aux;
     c5c:	63206465 			; <UNDEFINED> instruction: 0x63206465
}
     c60:	00726168 	rsbseq	r6, r2, r8, ror #2
     c64:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     c68:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
void AONRTCIntHandler () {
     c6c:	6d736600 	ldclvs	6, cr6, [r3, #-0]
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     c70:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     c74:	57454e00 	strbpl	r4, [r5, -r0, lsl #28]
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     c78:	444f4e5f 	strbmi	r4, [pc], #-3679	; c80 <AONRTCIntHandler+0x14>
		if (__pi_utims [0] == 0)
     c7c:	49475f45 	stmdbmi	r7, {r0, r2, r6, r8, r9, sl, fp, ip, lr}^
     c80:	5f5f0044 	svcpl	0x005f0044
		if (*(__pi_utims [0])) {
     c84:	00424350 	subeq	r4, r2, r0, asr r3
     c88:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
			(*(__pi_utims [0]))--;
     c8c:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
		if (__pi_utims [1] == 0)
     c90:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
		if (*(__pi_utims [1])) {
     c94:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
			aux_timer_inactive = 0;
     c98:	6d72665f 	ldclvs	6, cr6, [r2, #-380]!	; 0xfffffe84
			(*(__pi_utims [1]))--;
     c9c:	69617400 	stmdbvs	r1!, {sl, ip, sp, lr}^
		if (__pi_utims [2] == 0)
     ca0:	425f006c 	subsmi	r0, pc, #108	; 0x6c
		if (*(__pi_utims [2])) {
     ca4:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
			(*(__pi_utims [2]))--;
     ca8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
		if (__pi_utims [3] != 0) {
     cac:	646f6e5f 	strbtvs	r6, [pc], #-3679	; cb4 <AONRTCIntHandler+0x48>
			if (*(__pi_utims [3])) {
     cb0:	5f5f0065 	svcpl	0x005f0065
				aux_timer_inactive = 0;
     cb4:	66756273 			; <UNDEFINED> instruction: 0x66756273
				(*(__pi_utims [3]))--;
     cb8:	72617500 	rsbvc	r7, r1, #0, 10
	if (__pi_systat.ledsts) {
     cbc:	00745f74 	rsbseq	r5, r4, r4, ror pc
     cc0:	61746164 	cmnvs	r4, r4, ror #2
		if (__pi_systat.ledblc++ == 0) {
     cc4:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
     cc8:	675f0065 	ldrbvs	r0, [pc, -r5, rrx]
			if (__pi_systat.ledblk) {
     ccc:	0065756c 	rsbeq	r7, r5, ip, ror #10
     cd0:	67735f5f 			; <UNDEFINED> instruction: 0x67735f5f
     cd4:	0065756c 	rsbeq	r7, r5, ip, ror #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     cd8:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
     cdc:	5f6b6f74 	svcpl	0x006b6f74
				if (__pi_systat.ledsts & 0x2)
     ce0:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
     ce4:	626d5f00 	rsbvs	r5, sp, #0, 30
     ce8:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
				if (__pi_systat.ledsts & 0x4)
     cec:	6174735f 	cmnvs	r4, pc, asr r3
				__pi_systat.ledblk = 0;
     cf0:	64006574 	strvs	r6, [r0], #-1396	; 0xfffffa8c
     cf4:	6f637369 	svcvs	0x00637369
			if (__pi_systat.fstblk)
     cf8:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     cfc:	7165725f 	cmnvc	r5, pc, asr r2
				__pi_systat.ledblc = 200;
     d00:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
	if (events & AON_RTC_EVFLAGS_CH0) {
     d04:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
		cli_tim;
     d08:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
		__pi_new += setdel;
     d0c:	735f5f00 	cmpvc	pc, #0, 30
     d10:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
		setdel = 0;
     d14:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
		RISE_N_SHINE;
     d18:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
		__pi_new += setdel;
     d1c:	6772616e 	ldrbvs	r6, [r2, -lr, ror #2]!
		RISE_N_SHINE;
     d20:	63740073 	cmnvs	r4, #115	; 0x73
     d24:	756c7076 	strbvc	r7, [ip, #-118]!	; 0xffffff8a
		aux_timer_inactive = 1;
     d28:	00745f67 	rsbseq	r5, r4, r7, ror #30
     d2c:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
				if (__pi_systat.ledsts & 0x1)
     d30:	5f62616c 	svcpl	0x0062616c
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d34:	70736964 	rsbsvc	r6, r3, r4, ror #18
     d38:	5f79616c 	svcpl	0x0079616c
				if (__pi_systat.ledsts & 0x2)
     d3c:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
     d40:	756f6268 	strbvc	r6, [pc, #-616]!	; ae0 <udelay+0x4>
     d44:	6f6e5f72 	svcvs	0x006e5f72
				if (__pi_systat.ledsts & 0x8)
     d48:	00736564 	rsbseq	r6, r3, r4, ror #10
				__pi_systat.ledblk = 1;
     d4c:	6565725f 	strbvs	r7, [r5, #-607]!	; 0xfffffda1
     d50:	7300746e 	movwvc	r7, #1134	; 0x46e
		if (aux_timer_inactive) {
     d54:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
			cli_aux;
     d58:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     d5c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     d60:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     d64:	63740074 	cmnvs	r4, #116	; 0x74
     d68:	70646176 	rsbvc	r6, r4, r6, ror r1
     d6c:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
     d70:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
     d74:	6e5f7473 	mrcvs	4, 2, r7, cr15, cr3, {3}
     d78:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
     d7c:	5f5f0072 	svcpl	0x005f0072
word tci_update_delay_ticks (Boolean force) {
     d80:	616c7473 	smcvs	51011	; 0xc743
	cli_tim;
     d84:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
     d88:	645f7469 	ldrbvs	r7, [pc], #-1129	; d90 <tci_update_delay_ticks+0x10>
	if (setdel) {
     d8c:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d90:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     d94:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     d98:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
     d9c:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     da0:	735f5f00 	cmpvc	pc, #0, 30
				AON_RTC_O_CH0CMP)) - gettav ());
     da4:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
	return NO;
     da8:	6e6f645f 	mcrvs	4, 3, r6, cr15, cr15, {2}
			setdel = 0;
     dac:	61635f65 	cmnvs	r3, r5, ror #30
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     db0:	5f006573 	svcpl	0x00006573
     db4:	79746e66 	ldmdbvc	r4!, {r1, r2, r5, r6, r9, sl, fp, sp, lr}^
}
     db8:	00736570 	rsbseq	r6, r3, r0, ror r5
		sti_tim;
     dbc:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
		return YES;
     dc0:	5f62616c 	svcpl	0x0062616c
     dc4:	70736572 	rsbsvc	r6, r3, r2, ror r5
     dc8:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
     dcc:	635f315f 	cmpvs	pc, #-1073741801	; 0xc0000017
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     dd0:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
	UARTDisable (UART0_BASE);
     dd4:	5f5f0065 	svcpl	0x005f0065
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     dd8:	616c7473 	smcvs	51011	; 0xc743
	UARTDisable (UART0_BASE);
     ddc:	73615f62 	cmnvc	r1, #392	; 0x188
	UARTConfigSetExpClk (UART0_BASE,
     de0:	6f665f6b 	svcvs	0x00665f6b
     de4:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xfffff08e
     de8:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     dec:	5f6f745f 	svcpl	0x006f745f
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     df0:	61657263 	cmnvs	r5, r3, ror #4
     df4:	2f006574 	svccs	0x00006574
     df8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     dfc:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
     e00:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
     e04:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
	urates [0] = rate;
     e08:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
}
     e0c:	472f7374 			; <UNDEFINED> instruction: 0x472f7374
     e10:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
     e14:	69442f62 	stmdbvs	r4, {r1, r5, r6, r8, r9, sl, fp, sp}^
     e18:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     e1c:	65747562 	ldrbvs	r7, [r4, #-1378]!	; 0xfffffa9e
     e20:	61442d64 	cmpvs	r4, r4, ror #26
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e24:	532d6174 			; <UNDEFINED> instruction: 0x532d6174
     e28:	616f7274 	smcvs	63268	; 0xf724
     e2c:	532d6567 			; <UNDEFINED> instruction: 0x532d6567
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     e30:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     e34:	6f5f006d 	svcvs	0x005f006d
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     e38:	745f6666 	ldrbvc	r6, [pc], #-1638	; e40 <reinit_uart+0x1c>
     e3c:	6c654400 	cfstrdvs	mvd4, [r5], #-0
	__pi_uart_setrate (urates [0], __pi_uart);
     e40:	52657465 	rsbpl	r7, r5, #1694498816	; 0x65000000
     e44:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
     e48:	73654d64 	cmnvc	r5, #100, 26	; 0x1900
     e4c:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     e50:	626e5f00 	rsbvs	r5, lr, #0, 30
     e54:	5f006675 	svcpl	0x00006675
     e58:	73756e75 	cmnvc	r5, #1872	; 0x750
	switch (operation) {
     e5c:	725f6465 	subsvc	r6, pc, #1694498816	; 0x65000000
static int ioreq_uart_a (int operation, char *buf, int len) {
     e60:	00646e61 	rsbeq	r6, r4, r1, ror #28
     e64:	736e755f 	cmnvc	lr, #398458880	; 0x17c00000
     e68:	69636570 	stmdbvs	r3!, {r4, r5, r6, r8, sl, sp, lr}^
     e6c:	64656966 	strbtvs	r6, [r5], #-2406	; 0xfffff69a
     e70:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
				*buf++ = uart_a_read;
     e74:	5f656c61 	svcpl	0x00656c61
     e78:	6f666e69 	svcvs	0x00666e69
			while (len && uart_a_char_available) {
     e7c:	4f484300 	svcmi	0x00484300
     e80:	00454349 	subeq	r4, r5, r9, asr #6
     e84:	616c665f 	cmnvs	ip, pc, asr r6
			if (len != operation) {
     e88:	00327367 	eorseq	r7, r2, r7, ror #6
}
     e8c:	5f746573 	svcpl	0x00746573
     e90:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
			uart_a_disable_int;
     e94:	5f62645f 	svcpl	0x0062645f
			if (uart_a_char_available) {
     e98:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
				*buf++ = uart_a_read;
     e9c:	6f635f79 	svcvs	0x00635f79
			uart_a_disable_int;
     ea0:	00746e75 	rsbseq	r6, r4, r5, ror lr
     ea4:	5f73695f 	svcpl	0x0073695f
			if (uart_a_char_available) {
     ea8:	00617863 	rsbeq	r7, r1, r3, ror #16
     eac:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
				uart_a_enable_int;
     eb0:	656e5f64 	strbvs	r5, [lr, #-3940]!	; 0xfffff09c
     eb4:	5f007478 	svcpl	0x00007478
				goto Redo_rx;
     eb8:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     ebc:	5f656c61 	svcpl	0x00656c61
     ec0:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
			return -2;
     ec4:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     ec8:	61705f74 	cmnvs	r0, r4, ror pc
				uart_a_write (*buf);
     ecc:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xfffff49d
     ed0:	65735f00 	ldrbvs	r5, [r3, #-3840]!	; 0xfffff100
			while (len && uart_a_room_in_tx) {
     ed4:	52006b65 	andpl	r6, r0, #103424	; 0x19400
     ed8:	69727465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     edc:	52657665 	rsbpl	r7, r5, #105906176	; 0x6500000
			if (len != operation) {
     ee0:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
			uart_a_disable_int;
     ee4:	73654d64 	cmnvc	r5, #100, 26	; 0x1900
     ee8:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
			if (uart_a_room_in_tx) {
     eec:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
     ef0:	746e655f 	strbtvc	r6, [lr], #-1375	; 0xfffffaa1
				uart_a_enable_int;
     ef4:	5f007972 	svcpl	0x00007972
     ef8:	65647473 	strbvs	r7, [r4, #-1139]!	; 0xfffffb8d
				*buf++ = uart_a_read;
     efc:	5f007272 	svcpl	0x00007272
			if (uart_a_room_in_tx) {
     f00:	6c616d6e 	stclvs	13, cr6, [r1], #-440	; 0xfffffe48
				uart_a_write (*buf);
     f04:	00636f6c 	rsbeq	r6, r3, ip, ror #30
     f08:	7562755f 	strbvc	r7, [r2, #-1375]!	; 0xfffffaa1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     f0c:	52430066 	subpl	r0, r3, #102	; 0x66
     f10:	45544145 	ldrbmi	r4, [r4, #-325]	; 0xfffffebb
			uart_a_enable_int;
     f14:	4345525f 	movtmi	r5, #21087	; 0x525f
     f18:	0044524f 	subeq	r5, r4, pc, asr #4
     f1c:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0xfffffa9c
			return 0;
     f20:	615f6574 	cmpvs	pc, r4, ror r5	; <UNPREDICTABLE>
			if (len == UART_CNTRL_SETRATE) {
     f24:	65006c6c 	strvs	r6, [r0, #-3180]	; 0xfffff394
				if (__pi_uart_setrate (*((word*)buf),
     f28:	64706666 	ldrbtvs	r6, [r0], #-1638	; 0xfffff99a
     f2c:	776f006d 	strbvc	r0, [pc, -sp, rrx]!
     f30:	5f72656e 	svcpl	0x0072656e
				syserror (EREQPAR, "uar");
     f34:	72006469 	andvc	r6, r0, #1761607680	; 0x69000000
			syserror (ENOOPER, "uai");
     f38:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
			if (len == UART_CNTRL_GETRATE) {
     f3c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
				return 1;
     f40:	65735f4f 	ldrbvs	r5, [r3, #-3919]!	; 0xfffff0b1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     f44:	74754f74 	ldrbtvc	r4, [r5], #-3956	; 0xfffff08c
			syserror (ENOOPER, "uai");
     f48:	45747570 	ldrbmi	r7, [r4, #-1392]!	; 0xfffffa90
     f4c:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     f50:	6f694465 	svcvs	0x00694465
     f54:	4e4f4100 	dvfmie	f4, f7, f0
     f58:	4d746142 	ldfmie	f6, [r4, #-264]!	; 0xfffffef8
     f5c:	6e456e6f 	cdpvs	14, 4, cr6, cr5, cr15, {3}
     f60:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     f64:	33697500 	cmncc	r9, #0, 10
     f68:	646f4d32 	strbtvs	r4, [pc], #-3378	; f70 <UART0IntHandler+0x4>
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     f6c:	5f5f0065 	svcpl	0x005f0065
void UART0IntHandler () {
     f70:	6f5f6970 	svcvs	0x005f6970
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     f74:	6f646666 	svcvs	0x00646666
     f78:	6e69616d 	powvsez	f6, f1, #5.0
     f7c:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
     f80:	00766174 	rsbseq	r6, r6, r4, ror r1
     f84:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     f88:	5f007365 	svcpl	0x00007365
     f8c:	616e655f 	cmnvs	lr, pc, asr r5
		RISE_N_SHINE;
     f90:	5f656c62 	svcpl	0x00656c62
     f94:	00717269 	rsbseq	r7, r1, r9, ror #4
		i_trigger (devevent (UART_A, READ));
     f98:	72656877 	rsbvc	r6, r5, #7798784	; 0x770000
     f9c:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
     fa0:	696e6976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     fa4:	6e756674 	mrcvs	6, 3, r6, cr5, cr4, {3}
     fa8:	4100745f 	tstmi	r0, pc, asr r4
     fac:	55574e4f 	ldrbpl	r4, [r7, #-3663]	; 0xfffff1b1
     fb0:	78754143 	ldmdavc	r5!, {r0, r1, r6, r8, lr}^
     fb4:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
     fb8:	76457075 			; <UNDEFINED> instruction: 0x76457075
     fbc:	00746e65 	rsbseq	r6, r4, r5, ror #28
     fc0:	574e4f41 	strbpl	r4, [lr, -r1, asr #30]
     fc4:	6f504355 	svcvs	0x00504355
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     fc8:	53726577 	cmnpl	r2, #499122176	; 0x1dc00000
     fcc:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     fd0:	74654773 	strbtvc	r4, [r5], #-1907	; 0xfffff88d
		i_trigger (devevent (UART_A, WRITE));
     fd4:	52415500 	subpl	r5, r1, #0, 10
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     fd8:	746e4954 	strbtvc	r4, [lr], #-2388	; 0xfffff6ac
     fdc:	61656c43 	cmnvs	r5, r3, asr #24
		RISE_N_SHINE;
     fe0:	79730072 	ldmdbvc	r3!, {r1, r4, r5, r6}^
     fe4:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     fe8:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
		i_trigger (devevent (UART_A, WRITE));
     fec:	4f410074 	svcmi	0x00410074
     ff0:	4355574e 	cmpmi	r5, #20447232	; 0x1380000
     ff4:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
     ff8:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
     ffc:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1000:	7300656c 	movwvc	r6, #1388	; 0x56c
    1004:	65647465 	strbvs	r7, [r4, #-1125]!	; 0xfffffb9b
    1008:	5250006c 	subspl	r0, r0, #108	; 0x6c
    100c:	634d4d43 	movtvs	r4, #56643	; 0xdd43
    1010:	776f5075 			; <UNDEFINED> instruction: 0x776f5075
    1014:	664f7265 	strbvs	r7, [pc], -r5, ror #4
}
    1018:	5f5f0066 	svcpl	0x005f0066
    101c:	5f746573 	svcpl	0x00746573
    1020:	0050534d 	subseq	r5, r0, sp, asr #6
    1024:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    1028:	5f74696e 	svcpl	0x0074696e
void __buttons_setirq (int val) {
    102c:	5f5f0074 	svcpl	0x005f0074
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1030:	6f5f6970 	svcvs	0x005f6970
    1034:	6d6f646e 	cfstrdvs	mvd6, [pc, #-440]!	; e84 <ioreq_uart_a+0x28>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1038:	006e6961 	rsbeq	r6, lr, r1, ror #18
    103c:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
    1040:	6c467748 	mcrrvs	7, 4, r7, r6, cr8
		bn = BUTTON_GPIO (__button_list [i]);
    1044:	6f43776f 	svcvs	0x0043776f
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1048:	6f72746e 	svcvs	0x0072746e
    104c:	7369446c 	cmnvc	r9, #108, 8	; 0x6c000000
    1050:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1054:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    1058:	61755f69 	cmnvs	r5, r9, ror #30
    105c:	675f7472 			; <UNDEFINED> instruction: 0x675f7472
}
    1060:	61727465 	cmnvs	r2, r5, ror #8
    1064:	41006574 	tstmi	r0, r4, ror r5
    1068:	4f494e4f 	svcmi	0x00494e4f
    106c:	65724643 	ldrbvs	r4, [r2, #-1603]!	; 0xfffff9bd
void __pinlist_setirq (int val) {
    1070:	44657a65 	strbtmi	r7, [r5], #-2661	; 0xfffff59b
	for (i = 0; i < N_PINLIST; i++) {
    1074:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1078:	7500656c 	strvc	r6, [r0, #-1388]	; 0xfffffa94
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    107c:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
	for (i = 0; i < N_PINLIST; i++) {
    1080:	76654c78 			; <UNDEFINED> instruction: 0x76654c78
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1084:	52006c65 	andpl	r6, r0, #25856	; 0x6500
    1088:	5f6f6465 	svcpl	0x006f6465
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    108c:	75007872 	strvc	r7, [r0, #-2162]	; 0xfffff78e
    1090:	54323369 	ldrtpl	r3, [r2], #-873	; 0xfffffc97
    1094:	76654c78 			; <UNDEFINED> instruction: 0x76654c78
	for (i = 0; i < N_PINLIST; i++) {
    1098:	53006c65 	movwpl	r6, #3173	; 0xc65
}
    109c:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    10a0:	6c436c72 	mcrrvs	12, 7, r6, r3, cr2
    10a4:	476b636f 	strbmi	r6, [fp, -pc, ror #6]!
    10a8:	50007465 	andpl	r7, r0, r5, ror #8
void GPIOIntHandler () {
    10ac:	434d4352 	movtmi	r4, #54098	; 0xd352
if (buttons_int) {
    10b0:	65686361 	strbvs	r6, [r8, #-865]!	; 0xfffffc9f
    10b4:	65746552 	ldrbvs	r6, [r4, #-1362]!	; 0xfffffaae
	buttons_disable ();
    10b8:	6f69746e 	svcvs	0x0069746e
    10bc:	616e456e 	cmnvs	lr, lr, ror #10
	i_trigger ((aword)&__button_list);
    10c0:	00656c62 	rsbeq	r6, r5, r2, ror #24
    10c4:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
    10c8:	64616f4c 	strbtvs	r6, [r1], #-3916	; 0xfffff0b4
    10cc:	00746553 	rsbseq	r6, r4, r3, asr r5
    10d0:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    10d4:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    10d8:	6500656c 	strvs	r6, [r0, #-1388]	; 0xfffffa94
    10dc:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    10e0:	61755f65 	cmnvs	r5, r5, ror #30
    10e4:	695f7472 	ldmdbvs	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    10e8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
	RISE_N_SHINE;
    10ec:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
    10f0:	41550073 	cmpmi	r5, r3, ror r0
    10f4:	49465452 	stmdbmi	r6, {r1, r4, r6, sl, ip, lr}^
if (pin_sensor_int) {
    10f8:	6e454f46 	cdpvs	15, 4, cr4, cr5, cr6, {2}
    10fc:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
	i_trigger ((aword)(&__input_pins));
    1100:	33697500 	cmncc	r9, #0, 10
    1104:	746e4932 	strbtvc	r4, [lr], #-2354	; 0xfffff6ce
    1108:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    110c:	69640073 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^
    1110:	6d754e6f 	ldclvs	14, cr4, [r5, #-444]!	; 0xfffffe44
    1114:	00726562 	rsbseq	r6, r2, r2, ror #10
    1118:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    111c:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
    1120:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
    1124:	74617274 	strbtvc	r7, [r1], #-628	; 0xfffffd8c
    1128:	6f500065 	svcvs	0x00500065
	__pinsen_disable_and_clear;
    112c:	43726577 	cmnmi	r2, #499122176	; 0x1dc00000
	RISE_N_SHINE;
    1130:	496c7274 	stmdbmi	ip!, {r2, r4, r5, r6, r9, ip, sp, lr}^
    1134:	6572464f 	ldrbvs	r4, [r2, #-1615]!	; 0xfffff9b1
    1138:	44657a65 	strbtmi	r7, [r5], #-2661	; 0xfffff59b
}
    113c:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    1140:	5000656c 	andpl	r6, r0, ip, ror #10
    1144:	434d4352 	movtmi	r4, #54098	; 0xd352
    1148:	65686361 	strbvs	r6, [r8, #-865]!	; 0xfffffc9f
    114c:	65746552 	ldrbvs	r6, [r4, #-1362]!	; 0xfffffaae
void system_init () {
    1150:	6f69746e 	svcvs	0x0069746e
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1154:	7369446e 	cmnvc	r9, #1845493760	; 0x6e000000
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    1158:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    115c:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    1160:	65776f70 	ldrbvs	r6, [r7, #-3952]!	; 0xfffff090
    1164:	646f6d72 	strbtvs	r6, [pc], #-3442	; 116c <system_init+0x1c>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1168:	706f0065 	rsbvc	r0, pc, r5, rrx
    116c:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1170:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1174:	5f787561 	svcpl	0x00787561
    1178:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    117c:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1180:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1184:	70006576 	andvc	r6, r0, r6, ror r5
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1188:	5f74726f 	svcpl	0x0074726f
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    118c:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1190:	65520073 	ldrbvs	r0, [r2, #-115]	; 0xffffff8d
		pin = (port_confs [i] >> 19) & 0x1f;
    1194:	745f6f64 	ldrbvc	r6, [pc], #-3940	; 119c <system_init+0x4c>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1198:	69750078 	ldmdbvs	r5!, {r3, r4, r5, r6}^
		pin = (port_confs [i] >> 19) & 0x1f;
    119c:	6e493233 	mcrvs	2, 2, r3, cr9, cr3, {1}
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    11a0:	6c615663 	stclvs	6, cr5, [r1], #-396	; 0xfffffe74
    11a4:	75006575 	strvc	r6, [r0, #-1397]	; 0xfffffa8b
    11a8:	42323369 	eorsmi	r3, r2, #-1543503871	; 0xa4000001
    11ac:	00657361 	rsbeq	r7, r5, r1, ror #6
		if (port_confs [i] & 0x80)
    11b0:	6f645f5f 	svcvs	0x00645f5f
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    11b4:	6966775f 	stmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    11b8:	5f73615f 	svcpl	0x0073615f
		if (port_confs [i] & 0x40)
    11bc:	6465656e 	strbtvs	r6, [r5], #-1390	; 0xfffffa92
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11c0:	41006465 	tstmi	r0, r5, ror #8
    11c4:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11c8:	636e4943 	cmnvs	lr, #1097728	; 0x10c000
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    11cc:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11d0:	32684365 	rsbcc	r4, r8, #-1811939327	; 0x94000001
	all_leds_blink;
    11d4:	00746553 	rsbseq	r6, r4, r3, asr r5
    11d8:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    11dc:	5f74696e 	svcpl	0x0074696e
    11e0:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    11e4:	4e4f4100 	dvfmie	f4, f7, f0
    11e8:	49435452 	stmdbmi	r3, {r1, r4, r6, sl, ip, lr}^
    11ec:	6148746e 	cmpvs	r8, lr, ror #8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11f0:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    11f4:	61700072 	cmnvs	r0, r2, ror r0
    11f8:	006d6172 	rsbeq	r6, sp, r2, ror r1
    11fc:	5f696374 	svcpl	0x00696374
    1200:	5f6e7572 	svcpl	0x006e7572
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1204:	616c6564 	cmnvs	ip, r4, ror #10
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1208:	69745f79 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    120c:	0072656d 	rsbseq	r6, r2, sp, ror #10
	IntEnable (INT_AON_RTC_COMB);
    1210:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1214:	6c65725f 	sfmvs	f7, 2, [r5], #-380	; 0xfffffe84
    1218:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
	__pi_malloc_init ();
    121c:	64655200 	strbtvs	r5, [r5], #-512	; 0xfffffe00
	IntEnable (INT_AON_GPIO_EDGE);
    1220:	7270006f 	rsbsvc	r0, r0, #111	; 0x6f
    1224:	696e6965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, sp, lr}^
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1228:	61755f74 	cmnvs	r5, r4, ror pc
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    122c:	66007472 			; <UNDEFINED> instruction: 0x66007472
    1230:	6563726f 	strbvs	r7, [r3, #-623]!	; 0xfffffd91
    1234:	52415500 	subpl	r5, r1, #0, 10
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1238:	616e4554 	cmnvs	lr, r4, asr r5
    123c:	00656c62 	rsbeq	r6, r5, r2, ror #24
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1240:	4f495047 	svcmi	0x00495047
    1244:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
    1248:	76457261 	strbvc	r7, [r5], -r1, ror #4
	urates [0] = UART_RATE / 100;
    124c:	44746e65 	ldrbtmi	r6, [r4], #-3685	; 0xfffff19b
    1250:	5f006f69 	svcpl	0x00006f69
	reinit_uart ();
    1254:	7475625f 	ldrbtvc	r6, [r5], #-607	; 0xfffffda1
	EXTRA_INITIALIZERS;
    1258:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    125c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    1260:	00717269 	rsbseq	r7, r1, r9, ror #4
    1264:	6c65646d 	cfstrdvs	mvd6, [r5], #-436	; 0xfffffe4c
    1268:	5f007961 	svcpl	0x00007961
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    126c:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    1270:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1274:	7172695f 	cmnvc	r2, pc, asr r9
    1278:	6f682f00 	svcvs	0x00682f00
			devinit [i] . init (devinit [i] . param);
    127c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1280:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1284:	442f6e65 	strtmi	r6, [pc], #-3685	; 128c <system_init+0x13c>
    1288:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	IntEnable (INT_UART0_COMB);
    128c:	4f2f706f 	svcmi	0x002f706f
    1290:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
}
    1294:	502f5445 	eorpl	r5, pc, r5, asr #8
	tci_run_auxiliary_timer ();
    1298:	534f4349 	movtpl	r4, #62281	; 0xf349
		diag ("");
    129c:	6369502f 	cmnvs	r9, #47	; 0x2f
    12a0:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    12a4:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    12a8:	616d2f58 	cmnvs	sp, r8, asr pc
		diag ("Leftover RAM: %d bytes",
    12ac:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
    12b0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    12b4:	6c635f4f 	stclvs	15, cr5, [r3], #-316	; 0xfffffec4
    12b8:	44726165 	ldrbtmi	r6, [r2], #-357	; 0xfffffe9b
    12bc:	53006f69 	movwpl	r6, #3945	; 0xf69
    12c0:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    12c4:	6f416c72 	svcvs	0x00416c72
    12c8:	6e79536e 	cdpvs	3, 7, cr5, cr9, cr14, {3}
    12cc:	5f5f0063 	svcpl	0x005f0063
    12d0:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
    12d4:	6b636174 	blvs	18d98ac <__ccfg+0x18b9904>
    12d8:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    12dc:	69637400 	stmdbvs	r3!, {sl, ip, sp, lr}^
    12e0:	6e75725f 	mrcvs	2, 3, r7, cr5, cr15, {2}
    12e4:	7875615f 	ldmdavc	r5!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
    12e8:	61696c69 	cmnvs	r9, r9, ror #24
    12ec:	745f7972 	ldrbvc	r7, [pc], #-2418	; 12f4 <system_init+0x1a4>
    12f0:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    12f4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    12f8:	696c6e69 	stmdbvs	ip!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    12fc:	735f7473 	cmpvc	pc, #1929379840	; 0x73000000
    1300:	72697465 	rsbvc	r7, r9, #1694498816	; 0x65000000
    1304:	50470071 	subpl	r0, r7, r1, ror r0
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1308:	6e494f49 	cdpvs	15, 4, cr4, cr9, cr9, {2}
    130c:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
    1310:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1314:	6f6f4200 	svcvs	0x006f4200
    1318:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
    131c:	52415500 	subpl	r5, r1, #0, 10
    1320:	46494654 			; <UNDEFINED> instruction: 0x46494654
    1324:	76654c4f 	strbtvc	r4, [r5], -pc, asr #24
}
    1328:	65536c65 	ldrbvs	r6, [r3, #-3173]	; 0xfffff39b
__attribute__ ((noreturn)) void __pi_release () {
    132c:	79530074 	ldmdbvc	r3, {r2, r4, r5, r6}^
    1330:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    1334:	7379536c 	cmnvc	r9, #108, 6	; 0xb0000001
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1338:	526d6574 	rsbpl	r6, sp, #116, 10	; 0x1d000000
	check_stack_overflow;
    133c:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1340:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    1344:	00766174 	rsbseq	r6, r6, r4, ror r1
	update_n_wake (MAX_WORD, NO);
    1348:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
    134c:	75007374 	strvc	r7, [r0, #-884]	; 0xfffffc8c
    1350:	616c6564 	cmnvs	ip, r4, ror #10
	for_all_tasks (__pi_curr) {
    1354:	4f410079 	svcmi	0x00410079
    1358:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
    135c:	446e6f4d 	strbtmi	r6, [lr], #-3917	; 0xfffff0b3
  __ASM volatile ("cpsid i" : : : "memory");
    1360:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
	__SLEEP;
    1364:	5f00656c 	svcpl	0x0000656c
    1368:	5f69705f 	svcpl	0x0069705f
    136c:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    1370:	41006e6f 	tstmi	r0, pc, ror #28
	system_event_count ++;
    1374:	4f494e4f 	svcmi	0x00494e4f
    1378:	65724643 	ldrbvs	r4, [r2, #-1603]!	; 0xfffff9bd
	switch (__pi_systat.effpdm) {
    137c:	45657a65 	strbmi	r7, [r5, #-2661]!	; 0xfffff59b
    1380:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    1384:	4f410065 	svcmi	0x00410065
    1388:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
			__WFI ();
    138c:	426e6f4d 	rsbmi	r6, lr, #308	; 0x134
    1390:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
    1394:	6f567972 	svcvs	0x00567972
	check_stack_overflow;
    1398:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
    139c:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    13a0:	726f6900 	rsbvc	r6, pc, #0, 18
    13a4:	755f7165 	ldrbvc	r7, [pc, #-357]	; 1247 <system_init+0xf7>
			(__pi_curr->code) (tstate (__pi_curr));
    13a8:	5f747261 	svcpl	0x00747261
			goto Redo;
    13ac:	5f5f0061 	svcpl	0x005f0061
	for_all_tasks (__pi_curr) {
    13b0:	755f6970 	ldrbvc	r6, [pc, #-2416]	; a48 <root+0x4f4>
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    13b4:	736d6974 	cmnvc	sp, #116, 18	; 0x1d0000
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    13b8:	6e697300 	cdpvs	3, 6, cr7, cr9, cr0, {0}
    13bc:	50470074 	subpl	r0, r7, r4, ror r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    13c0:	735f4f49 	cmpvc	pc, #292	; 0x124
    13c4:	69447465 	stmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
    13c8:	6564006f 	strbvs	r0, [r4, #-111]!	; 0xffffff91
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    13cc:	696e6976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    13d0:	5f5f0074 	svcpl	0x005f0074
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    13d4:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
    13d8:	72657379 	rsbvc	r7, r5, #-469762047	; 0xe4000001
			__WFI ();
    13dc:	00726f72 	rsbseq	r6, r2, r2, ror pc
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    13e0:	6e766564 	cdpvs	5, 7, cr6, cr6, cr4, {3}
    13e4:	75006d75 	strvc	r6, [r0, #-3445]	; 0xfffff28b
}
    13e8:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    13ec:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    13f0:	6142746e 	cmpvs	r2, lr, ror #8
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    13f4:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
    13f8:	41550079 	cmpmi	r5, r9, ror r0
			PRCMPowerDomainOff (__pi_systat.ondmns |
    13fc:	6e495452 	mcrvs	4, 2, r5, cr9, cr2, {2}
    1400:	616e4574 	smcvs	58452	; 0xe454
    1404:	00656c62 	rsbeq	r6, r5, r2, ror #24
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1408:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    140c:	5575634d 	ldrbpl	r6, [r5, #-845]!	; 0xfffffcb3
    1410:	436f646c 	cmnmi	pc, #108, 8	; 0x6c000000
    1414:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1418:	65727567 	ldrbvs	r7, [r2, #-1383]!	; 0xfffffa99
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    141c:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
    1420:	45747570 	ldrbmi	r7, [r4, #-1392]!	; 0xfffffa90
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1424:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1428:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
    142c:	68006575 	stmdavs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    1430:	00746c61 	rsbseq	r6, r4, r1, ror #24
    1434:	4f706f74 	svcmi	0x00706f74
    1438:	69614d66 	stmdbvs	r1!, {r1, r2, r5, r6, r8, sl, fp, lr}^
			SysCtrlSetRechargeBeforePowerDown
    143c:	6174536e 	cmnvs	r4, lr, ror #6
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1440:	5f006b63 	svcpl	0x00006b63
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1444:	6c656467 	cfstrdvs	mvd6, [r5], #-412	; 0xfffffe64
    1448:	55007961 	strpl	r7, [r0, #-2401]	; 0xfffff69f
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    144c:	30545241 	subscc	r5, r4, r1, asr #4
    1450:	48746e49 	ldmdami	r4!, {r0, r3, r6, r9, sl, fp, sp, lr}^
    1454:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    1458:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
    145c:	53706565 	cmnpl	r0, #423624704	; 0x19400000
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1460:	7065656c 	rsbvc	r6, r5, ip, ror #10
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1464:	726f7000 	rsbvc	r7, pc, #0
    1468:	6f635f74 	svcvs	0x00635f74
    146c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1470:	69637400 	stmdbvs	r3!, {sl, ip, sp, lr}^
			while (!(AONWUCPowerStatusGet () &
    1474:	6470755f 	ldrbtvs	r7, [r0], #-1375	; 0xfffffaa1
			PRCMPowerDomainOn (__pi_systat.ondmns);
    1478:	5f657461 	svcpl	0x00657461
    147c:	616c6564 	cmnvs	ip, r4, ror #10
    1480:	69745f79 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    1484:	00736b63 	rsbseq	r6, r3, r3, ror #22
    1488:	7361654d 	cmnvc	r1, #322961408	; 0x13400000
    148c:	00657275 	rsbeq	r7, r5, r5, ror r2
    1490:	72766564 	rsbsvc	r6, r6, #100, 10	; 0x19000000
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1494:	75667165 	strbvc	r7, [r6, #-357]!	; 0xfffffe9b
    1498:	00745f6e 	rsbseq	r5, r4, lr, ror #30
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    149c:	6c6c696b 			; <UNDEFINED> instruction: 0x6c6c696b
    14a0:	5f007665 	svcpl	0x00007665
			SysCtrlAdjustRechargeAfterPowerDown ();
    14a4:	5f69705f 	svcpl	0x0069705f
			reinit_uart ();
    14a8:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
    14ac:	5f007970 	svcpl	0x00007970
    14b0:	5f69705f 	svcpl	0x0069705f
}
    14b4:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    14b8:	7500636f 	strvc	r6, [r0, #-879]	; 0xfffffc91
    14bc:	6961776e 	stmdbvs	r1!, {r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    14c0:	66710074 			; <UNDEFINED> instruction: 0x66710074
    14c4:	00656572 	rsbeq	r6, r5, r2, ror r5
    14c8:	65726f69 	ldrbvs	r6, [r2, #-3945]!	; 0xfffff097
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    14cc:	5f5f0071 	svcpl	0x005f0071
    14d0:	665f6970 			; <UNDEFINED> instruction: 0x665f6970
    14d4:	006b726f 	rsbeq	r7, fp, pc, ror #4
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    14d8:	6c6c696b 			; <UNDEFINED> instruction: 0x6c6c696b
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    14dc:	6f706d00 	svcvs	0x00706d00
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    14e0:	00736c6f 	rsbseq	r6, r3, pc, ror #24
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    14e4:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
    14e8:	615f7265 	cmpvs	pc, r5, ror #4
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    14ec:	55006464 	strpl	r6, [r0, #-1124]	; 0xfffffb9c
    14f0:	42545241 	subsmi	r5, r4, #268435460	; 0x10000004
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    14f4:	00797375 	rsbseq	r7, r9, r5, ror r3
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    14f8:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    14fc:	6c616d5f 	stclvs	13, cr6, [r1], #-380	; 0xfffffe84
    1500:	5f636f6c 	svcpl	0x00636f6c
			PRCMPowerDomainOff (
    1504:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1508:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	__SLEEP;
    150c:	72745f69 	rsbsvc	r5, r4, #420	; 0x1a4
    1510:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
  __ASM volatile ("cpsie i" : : : "memory");
    1514:	5f5f0072 	svcpl	0x005f0072
	goto Redo;
    1518:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
    151c:	656c7274 	strbvs	r7, [ip, #-628]!	; 0xfffffd8c
    1520:	5f5f006e 	svcpl	0x005f006e
    1524:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; 144c <__pi_release+0x120>	; <UNPREDICTABLE>
    1528:	72667861 	rsbvc	r7, r6, #6356992	; 0x610000
    152c:	63006565 	movwvs	r6, #1381	; 0x565
    1530:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
    1534:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1538:	6b68636e 	blvs	1a1a2f8 <__ccfg+0x19fa350>
    153c:	666e6d00 	strbtvs	r6, [lr], -r0, lsl #26
    1540:	00656572 	rsbeq	r6, r5, r2, ror r5
    1544:	636f7270 	cmnvs	pc, #112, 4
    1548:	00646565 	rsbeq	r6, r4, r5, ror #10
    154c:	6e656c6d 	cdpvs	12, 6, cr6, cr5, cr13, {3}
    1550:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    1554:	74705f69 	ldrbtvc	r5, [r0], #-3945	; 0xfffff097
    1558:	67676972 			; <UNDEFINED> instruction: 0x67676972
    155c:	61007265 	tstvs	r0, r5, ror #4
    1560:	65646464 	strbvs	r6, [r4, #-1124]!	; 0xfffffb9c
    1564:	6e756676 	mrcvs	6, 3, r6, cr5, cr6, {3}
    1568:	69700063 	ldmdbvs	r0!, {r0, r1, r5, r6}^
    156c:	72657664 	rsbvc	r7, r5, #100, 12	; 0x6400000
    1570:	61696400 	cmnvs	r9, r0, lsl #8
    1574:	5f5f0067 	svcpl	0x005f0067
    1578:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
    157c:	61637274 	smcvs	14116	; 0x3724
    1580:	656d0074 	strbvs	r0, [sp, #-116]!	; 0xffffff8c
	cli_tim;
    1584:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
    1588:	6d00745f 	cfstrsvs	mvf7, [r0, #-380]	; 0xfffffe84
    158c:	65726663 	ldrbvs	r6, [r2, #-1635]!	; 0xfffff99d
	diag ("PicOS halted");
    1590:	61770065 	cmnvs	r7, r5, rrx
	mdelay (500);
    1594:	00657473 	rsbeq	r7, r5, r3, ror r4
    1598:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
	setpowermode (2);
    159c:	65640079 	strbvs	r0, [r4, #-121]!	; 0xffffff87
	__PCB = NULL;
    15a0:	6d007473 	cfstrsvs	mvf7, [r0, #-460]	; 0xfffffe34
	release;
    15a4:	00737365 	rsbseq	r7, r3, r5, ror #6
    15a8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 14f4 <__pi_release+0x1c8>
    15ac:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    15b0:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
int main (void) {
    15b4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    15b8:	6f746b73 	svcvs	0x00746b73
    15bc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    15c0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    15c4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	system_init ();
    15c8:	2f534f43 	svccs	0x00534f43
	tcv_init ();
    15cc:	4f636950 	svcmi	0x00636950
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    15d0:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    15d4:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    15d8:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    15dc:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    15e0:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    15e4:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
    15e8:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	delay (16, 0);
    15ec:	61625f69 	cmnvs	r2, r9, ror #30
    15f0:	61747364 	cmnvs	r4, r4, ror #6
    15f4:	5f006574 	svcpl	0x00006574
	__pi_release ();
    15f8:	5f69705f 	svcpl	0x0069705f
    15fc:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
    1600:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    1604:	61775f69 	cmnvs	r7, r9, ror #30
    1608:	656d7469 	strbvs	r7, [sp, #-1129]!	; 0xfffffb97
    160c:	726c006d 	rsbvc	r0, ip, #109	; 0x6d
    1610:	5f00646e 	svcpl	0x0000646e
static void killev (__pi_pcb_t *pid) {
    1614:	5f69705f 	svcpl	0x0069705f
	wfun = (aword)(pid->code);
    1618:	666d656d 	strbtvs	r6, [sp], -sp, ror #10
	for_all_tasks (i) {
    161c:	00656572 	rsbeq	r6, r5, r2, ror r5
		for (j = 0; j < nevents (i); j++) {
    1620:	6e756863 	cdpvs	8, 7, cr6, cr5, cr3, {3}
    1624:	7075006b 	rsbsvc	r0, r5, fp, rrx
    1628:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
			    || i->Events [j] . Event == wfun
    162c:	775f6e5f 			; <UNDEFINED> instruction: 0x775f6e5f
		for (j = 0; j < nevents (i); j++) {
    1630:	00656b61 	rsbeq	r6, r5, r1, ror #22
			if (i->Events [j] . Event == (aword)pid
    1634:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1638:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
    163c:	65670064 	strbvs	r0, [r7, #-100]!	; 0xffffff9c
				wakeupev (i, j);
    1640:	646f6374 	strbtvs	r6, [pc], #-884	; 1648 <killev+0x34>
    1644:	6c640065 	stclvs	0, cr0, [r4], #-404	; 0xfffffe6c
	for_all_tasks (i) {
    1648:	00746665 	rsbseq	r6, r4, r5, ror #12
}
    164c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1650:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
static void qfree (aword *ch) {
    1654:	00797063 	rsbseq	r7, r9, r3, rrx
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1658:	756f6764 	strbvc	r6, [pc, #-1892]!	; efc <ioreq_uart_a+0xa0>
	cc = (aword*)(mpools + MA_NP);
    165c:	5f5f0074 	svcpl	0x005f0074
	m_setnextp (ch, chunk);
    1660:	755f6970 	ldrbvc	r6, [pc, #-2416]	; cf8 <AONRTCIntHandler+0x8c>
	m_setnextp (cc, ch);
    1664:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
}
    1668:	65735f72 	ldrbvs	r5, [r3, #-3954]!	; 0xfffff08e
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    166c:	66770074 			; <UNDEFINED> instruction: 0x66770074
    1670:	6e006e75 	mcrvs	14, 0, r6, cr0, cr5, {3}
    1674:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
			m_setnextp (cc, m_nextp (chunk));
    1678:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			m_size (chunk) += m_hdrlen + m_size (ch);
    167c:	72665f69 	rsbvc	r5, r6, #420	; 0x1a4
    1680:	44006565 	strmi	r6, [r0], #-1381	; 0xfffffa9b
    1684:	49535f49 	ldmdbmi	r3, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    1688:	5f5f0047 	svcpl	0x005f0047
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    168c:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; 15b4 <main>	; <UNPREDICTABLE>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    1690:	65736d65 	ldrbvs	r6, [r3, #-3429]!	; 0xfffff29b
    1694:	696b0074 	stmdbvs	fp!, {r2, r4, r5, r6}^
    1698:	6c616c6c 	stclvs	12, cr6, [r1], #-432	; 0xfffffe50
			m_setnextp (cc, m_nextp (chunk));
    169c:	5f5f006c 	svcpl	0x005f006c
			m_size (ch) += m_hdrlen + m_size (chunk);
    16a0:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
    16a4:	636e7274 	cmnvs	lr, #116, 4	; 0x40000007
    16a8:	5f007970 	svcpl	0x00007970
    16ac:	5f69705f 	svcpl	0x0069705f
    16b0:	6e696f6a 	cdpvs	15, 6, cr6, cr9, cr10, {3}
    16b4:	69747500 	ldmdbvs	r4!, {r8, sl, ip, sp, lr}^
			if (m_size (chunk) >= m_size (ch))
    16b8:	5f72656d 	svcpl	0x0072656d
    16bc:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0xfffffa9c
    16c0:	5f006574 	svcpl	0x00006574
		chunk = m_nextp (chunk))
    16c4:	5f69705f 	svcpl	0x0069705f
    16c8:	6e727473 	mrcvs	4, 3, r7, cr2, cr3, {3}
    16cc:	00746163 	rsbseq	r6, r4, r3, ror #2
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    16d0:	5f766374 	svcpl	0x00766374
	diag_wait (a);
    16d4:	7a697371 	bvc	1a5e4a0 <__ccfg+0x1a3e4f8>
	diag_wchar (c, a);
    16d8:	72700065 	rsbsvc	r0, r0, #101	; 0x65
    16dc:	5f007665 	svcpl	0x00007665
}
    16e0:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
    16e4:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
	syserror (ESTATE, "state");
    16e8:	745f7274 	ldrbvc	r7, [pc], #-628	; 16f0 <__pi_badstate+0x8>
    16ec:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    16f0:	5f796870 	svcpl	0x00796870
    16f4:	00706f74 	rsbseq	r6, r0, r4, ror pc
	for (i = 0; i < MAX_UTIMERS; i++)
    16f8:	5f766374 	svcpl	0x00766374
void utimer_add (address ut) {
    16fc:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
    1700:	006c6f72 	rsbeq	r6, ip, r2, ror pc
		if (__pi_utims [i] == NULL)
    1704:	5f766374 	svcpl	0x00766374
	for (i = 0; i < MAX_UTIMERS; i++)
    1708:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    170c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
		syserror (ERESOURCE, "ut a");
    1710:	69645f70 	stmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
	__pi_utims [i] = ut;
    1714:	736f7073 	cmnvc	pc, #115	; 0x73
}
    1718:	63740065 	cmnvs	r4, #101	; 0x65
    171c:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
    1720:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
	*t = v;
    1724:	72746300 	rsbsvc	r6, r4, #0, 6
	TCI_RUN_AUXILIARY_TIMER;
    1728:	6e75666c 	cdpvs	6, 7, cr6, cr5, cr12, {3}
void update_n_wake (word min, Boolean force) {
    172c:	2f00745f 	svccs	0x0000745f
	if (TCI_UPDATE_DELAY_TICKS (force))
    1730:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1734:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    1738:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    173c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1740:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1744:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1748:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    174c:	4349502f 	movtmi	r5, #36911	; 0x902f
    1750:	502f534f 	eorpl	r5, pc, pc, asr #6
    1754:	534f6369 	movtpl	r6, #62313	; 0xf369
    1758:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    175c:	562f7362 	strtpl	r7, [pc], -r2, ror #6
    1760:	4974654e 	ldmdbmi	r4!, {r1, r2, r3, r6, r8, sl, sp, lr}^
    1764:	7663742f 	strbtvc	r7, [r3], -pc, lsr #8
    1768:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
    176c:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
		for_all_tasks (i) {
    1770:	65675f79 	strbvs	r5, [r7, #-3961]!	; 0xfffff087
	__pi_mintk = znew + min;
    1774:	63740074 	cmnvs	r4, #116	; 0x74
    1778:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
			if (!twaiting (i))
    177c:	74006e65 	strvc	r6, [r0], #-3685	; 0xfffff19b
    1780:	645f7663 	ldrbvs	r7, [pc], #-1635	; 1788 <update_n_wake+0x5c>
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1784:	00706f72 	rsbseq	r6, r0, r2, ror pc
    1788:	73796870 	cmnvc	r9, #112, 16	; 0x700000
    178c:	6f666e69 	svcvs	0x00666e69
    1790:	706d6500 	rsbvc	r6, sp, r0, lsl #10
    1794:	74007974 	strvc	r7, [r0], #-2420	; 0xfffff68c
    1798:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
    179c:	72655f79 	rsbvc	r5, r5, #484	; 0x1e4
    17a0:	00657361 	rsbeq	r7, r5, r1, ror #6
    17a4:	70766374 	rsbsvc	r6, r6, r4, ror r3
    17a8:	7474615f 	ldrbtvc	r6, [r4], #-351	; 0xfffffea1
    17ac:	00686361 	rsbeq	r6, r8, r1, ror #6
    17b0:	6575716f 	ldrbvs	r7, [r5, #-367]!	; 0xfffffe91
				wakeuptm (i);
    17b4:	00736575 	rsbseq	r6, r3, r5, ror r5
    17b8:	63745f5f 	cmnvs	r4, #380	; 0x17c
		for_all_tasks (i) {
    17bc:	69715f76 	ldmdbvs	r1!, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
				d = i->Timer - znew;
    17c0:	5f6d6574 	svcpl	0x006d6574
    17c4:	5f5f0073 	svcpl	0x005f0073
    17c8:	5f766374 	svcpl	0x00766374
		if ((word)(__pi_mintk - znew) < min) 
    17cc:	65746971 	ldrbvs	r6, [r4, #-2417]!	; 0xfffff68f
    17d0:	00745f6d 	rsbseq	r5, r4, sp, ror #30
    17d4:	63745f5f 	cmnvs	r4, #380	; 0x17c
	__pi_old = znew;
    17d8:	62685f76 	rsbvs	r5, r8, #472	; 0x1d8
}
    17dc:	6b636f6c 	blvs	18dd594 <__ccfg+0x18bd5ec>
	TCI_RUN_DELAY_TIMER;
    17e0:	6100745f 	tstvs	r0, pc, asr r4
}
    17e4:	00707474 	rsbseq	r7, r0, r4, ror r4
    17e8:	65677275 	strbvs	r7, [r7, #-629]!	; 0xfffffd8b
    17ec:	4500746e 	strmi	r7, [r0, #-1134]	; 0xfffffb92
    17f0:	74725f72 	ldrbtvc	r5, [r2], #-3954	; 0xfffff08e
    17f4:	73656400 	cmnvc	r5, #0, 8
void proceed (word state) {
    17f8:	70697263 	rsbvc	r7, r9, r3, ror #4
	prcdstate (__pi_curr, state);
    17fc:	73726f74 	cmnvc	r2, #116, 30	; 0x1d0
    1800:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	release;
    1804:	6172655f 	cmnvs	r2, pc, asr r5
    1808:	74006573 	strvc	r6, [r0], #-1395	; 0xfffffa8d
void __pi_wait (aword event, word state) {
    180c:	655f7663 	ldrbvs	r7, [pc, #-1635]	; 11b1 <system_init+0x61>
	sint j = nevents (__pi_curr);
    1810:	0070646e 	rsbseq	r6, r0, lr, ror #8
	if (j >= MAX_EVENTS_PER_TASK)
    1814:	70766374 	rsbsvc	r6, r6, r4, ror r3
    1818:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
    181c:	75717200 	ldrbvc	r7, [r1, #-512]!	; 0xfffffe00
		syserror (ENEVENTS, "sw");
    1820:	00657565 	rsbeq	r7, r5, r5, ror #10
    1824:	73727470 	cmnvc	r2, #112, 8	; 0x70000000
	setestate (__pi_curr->Events [j], state, event);
    1828:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
	incwait (__pi_curr);
    182c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
	setestate (__pi_curr->Events [j], state, event);
    1830:	63740073 	cmnvs	r4, #115	; 0x73
}
    1834:	6e775f76 	mrcvs	15, 3, r5, cr7, cr6, {3}
    1838:	74007370 	strvc	r7, [r0], #-880	; 0xfffffc90
    183c:	775f7663 	ldrbvc	r7, [pc, -r3, ror #12]
void __pi_trigger (aword event) {
    1840:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
	for_all_tasks (i) {
    1844:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
		for (j = 0; j < nevents (i); j++) {
    1848:	6f6c635f 	svcvs	0x006c635f
    184c:	5f006573 	svcpl	0x00006573
    1850:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
    1854:	7365735f 	cmnvc	r5, #2080374785	; 0x7c000001
			if (i->Events [j] . Event == event) {
    1858:	63736564 	cmnvs	r3, #100, 10	; 0x19000000
    185c:	7000745f 	andvc	r7, r0, pc, asr r4
    1860:	00737968 	rsbseq	r7, r3, r8, ror #18
				wakeupev (i, j);
    1864:	73796870 	cmnvc	r9, #112, 16	; 0x700000
    1868:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
	for_all_tasks (i) {
    186c:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0xffffff00
}
    1870:	00646575 	rsbeq	r6, r4, r5, ror r5
aword __pi_join (aword pid, word st) {
    1874:	5f766374 	svcpl	0x00766374
	for_all_tasks (i) {
    1878:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    187c:	73657300 	cmnvc	r5, #0, 6
	return 0;
    1880:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
		if ((aword)i == pid) {
    1884:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
			__pi_wait (pid, st);
    1888:	6c635f70 	stclvs	15, cr5, [r3], #-448	; 0xfffffe40
}
    188c:	00656e6f 	rsbeq	r6, r5, pc, ror #28
	for_all_tasks (i) {
    1890:	70766374 	rsbsvc	r6, r6, r4, ror r3
    1894:	7373615f 	cmnvc	r3, #-1073741801	; 0xc0000017
void delay (word d, word state) {
    1898:	006e6769 	rsbeq	r6, lr, r9, ror #14
	settstate (__pi_curr, state);
    189c:	64696c70 	strbtvs	r6, [r9], #-3184	; 0xfffff390
    18a0:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    18a4:	5f796870 	svcpl	0x00796870
    18a8:	00646e65 	rsbeq	r6, r4, r5, ror #28
	update_n_wake (d, YES);
    18ac:	70747461 	rsbsvc	r7, r4, r1, ror #8
    18b0:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
	__pi_curr->Timer = __pi_old + d;
    18b4:	74006e72 	strvc	r6, [r0], #-3698	; 0xfffff18e
    18b8:	705f7663 	subsvc	r7, pc, r3, ror #12
	inctimer (__pi_curr);
    18bc:	0067756c 	rsbeq	r7, r7, ip, ror #10
    18c0:	72747461 	rsbsvc	r7, r4, #1627389952	; 0x61000000
    18c4:	74756269 	ldrbtvc	r6, [r5], #-617	; 0xfffffd97
}
    18c8:	5f007365 	svcpl	0x00007365
    18cc:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
	if (fun == NULL)
    18d0:	6568715f 	strbvs	r7, [r8, #-351]!	; 0xfffffea1
		return (int) __pi_curr;
    18d4:	745f6461 	ldrbvc	r6, [pc], #-1121	; 18dc <running+0xc>
    18d8:	756c7000 	strbvc	r7, [ip, #-0]!
	for_all_tasks (i)
    18dc:	006e6967 	rsbeq	r6, lr, r7, ror #18
}
    18e0:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
		if (i->code == fun)
    18e4:	64006874 	strvs	r6, [r0], #-2164	; 0xfffff78c
	for_all_tasks (i)
    18e8:	00707369 	rsbseq	r7, r0, r9, ror #6
    18ec:	5f766374 	svcpl	0x00766374
    18f0:	00706e72 	rsbseq	r6, r0, r2, ror lr
int __pi_strlen (const char *s) {
    18f4:	70766374 	rsbsvc	r6, r6, r4, ror r3
	for (i = 0; *(s+i) != '\0'; i++);
    18f8:	725f7968 	subsvc	r7, pc, #104, 18	; 0x1a0000
}
    18fc:	62007663 	andvs	r7, r0, #103809024	; 0x6300000
	for (i = 0; *(s+i) != '\0'; i++);
    1900:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
	while ((Boolean)(*d++ = *s++));
    1904:	6c700065 	ldclvs	0, cr0, [r0], #-404	; 0xfffffe6c
    1908:	6e696775 	mcrvs	7, 3, r6, cr9, cr5, {3}
    190c:	5f5f0073 	svcpl	0x005f0073
}
    1910:	5f766374 	svcpl	0x00766374
	while (n-- && (*s != '\0'))
    1914:	6f6c6268 	svcvs	0x006c6268
    1918:	735f6b63 	cmpvc	pc, #101376	; 0x18c00
	*d = '\0';
    191c:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
	while (n-- && (*s != '\0'))
    1920:	6e696f67 	cdpvs	15, 6, cr6, cr9, cr7, {3}
    1924:	63740067 	cmnvs	r4, #103	; 0x67
		*d++ = *s++;
    1928:	635f7076 	cmpvs	pc, #118	; 0x76
    192c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
	while (n--)
    1930:	5f006c6f 	svcpl	0x00006c6f
    1934:	61747365 	cmnvs	r4, r5, ror #6
		*dest++ = *src++;
    1938:	70006b63 	andvc	r6, r0, r3, ror #22
    193c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1940:	00637253 	rsbeq	r7, r3, r3, asr r2
	while (n--)
    1944:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
}
    1948:	52534974 	subspl	r4, r3, #116, 18	; 0x1d0000
		*dest++ = c;
    194c:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
void adddevfunc (devreqfun_t rf, int loc) {
    1950:	0072656c 	rsbseq	r6, r2, ip, ror #10
		syserror (EREQPAR, "addv");
    1954:	53696d4e 	cmnpl	r9, #4992	; 0x1380
		syserror (ERESOURCE, "addv");
    1958:	6e614852 	mcrvs	8, 3, r4, cr1, cr2, {2}
	if (ioreq [loc] != NULL)
    195c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1960:	74655f00 	strbtvc	r5, [r5], #-3840	; 0xfffff100
		syserror (ERESOURCE, "addv");
    1964:	00747865 	rsbseq	r7, r4, r5, ror #16
	ioreq [loc] = rf;
    1968:	7362655f 	cmnvc	r2, #398458880	; 0x17c00000
}
    196c:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    1970:	2f656d6f 	svccs	0x00656d6f
sint io (word retry, word dev, word operation, char *buf, word len) {
    1974:	70657473 	rsbvc	r7, r5, r3, ror r4
    1978:	2f6e6568 	svccs	0x006e6568
    197c:	6b736544 	blvs	1cdae94 <__ccfg+0x1cbaeec>
    1980:	2f706f74 	svccs	0x00706f74
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1984:	4f534c4f 	svcmi	0x00534c4f
    1988:	2f54454e 	svccs	0x0054454e
    198c:	4f434950 	svcmi	0x00434950
		syserror (ENODEVICE, "io");
    1990:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1994:	2f534f63 	svccs	0x00534f63
	if (len == 0)
    1998:	33314343 	teqcc	r1, #201326593	; 0xc000001
	ret = (ioreq [dev]) (operation, buf, len);
    199c:	732f5858 			; <UNDEFINED> instruction: 0x732f5858
    19a0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
	if (ret >= 0)
    19a4:	675f7075 			; <UNDEFINED> instruction: 0x675f7075
	if (ret == -1) {
    19a8:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
    19ac:	73625f00 	cmnvc	r2, #0, 30
		if (retry == WNONE)
    19b0:	655f0073 	ldrbvs	r0, [pc, #-115]	; 1945 <__pi_memset+0x3>
		iowait (dev, operation, retry);
    19b4:	61746164 	cmnvs	r4, r4, ror #2
    19b8:	746e4900 	strbtvc	r4, [lr], #-2304	; 0xfffff700
    19bc:	61666544 	cmnvs	r6, r4, asr #10
			release;
    19c0:	48746c75 	ldmdami	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
	if (ret == -2) {
    19c4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
		if (retry != WNONE) {
    19c8:	67007265 	strvs	r7, [r0, -r5, ror #4]
    19cc:	6e66705f 	mcrvs	0, 3, r7, cr6, cr15, {2}
			iowait (dev, operation, retry);
    19d0:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
    19d4:	0073726f 	rsbseq	r7, r3, pc, ror #4
			(ioreq [dev]) (NONE, buf, len);
    19d8:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
    19dc:	73654432 	cmnvc	r5, #838860800	; 0x32000000
    19e0:	65520074 	ldrbvs	r0, [r2, #-116]	; 0xffffff8c
		(ioreq [dev]) (NONE, buf, len);
    19e4:	49746573 	ldmdbmi	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    19e8:	43005253 	movwmi	r5, #595	; 0x253
    19ec:	5f474643 	svcpl	0x00474643
}
    19f0:	544c4f56 	strbpl	r4, [ip], #-3926	; 0xfffff0aa
	if (retry != WNONE) {
    19f4:	414f4c5f 	cmpmi	pc, pc, asr ip	; <UNPREDICTABLE>
		delay (-ret - 2, retry);
    19f8:	00305f44 	eorseq	r5, r0, r4, asr #30
    19fc:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1a00:	4c4f565f 	mcrrmi	6, 5, r5, pc, cr15
    1a04:	4f4c5f54 	svcmi	0x004c5f54
		release;
    1a08:	315f4441 	cmpcc	pc, r1, asr #8
    1a0c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1a10:	4c425f47 	mcrrmi	15, 4, r5, r2, cr7
    1a14:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
    1a18:	00474946 	subeq	r4, r7, r6, asr #18
    1a1c:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1a20:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
		syserror (ERESOURCE, "mal1");
    1a24:	46464f5f 			; <UNDEFINED> instruction: 0x46464f5f
    1a28:	00544553 	subseq	r4, r4, r3, asr r5
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1a2c:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1a30:	444f4d5f 	strbmi	r4, [pc], #-3423	; 1a38 <__pi_malloc_init+0x28>
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a34:	4f435f45 	svcmi	0x00435f45
	m_size (mpools [0]) = mlen - m_hdrlen;
    1a38:	5f00464e 	svcpl	0x0000464e
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a3c:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1a40:	43430067 	movtmi	r0, #12391	; 0x3067
    1a44:	535f4746 	cmppl	pc, #18350080	; 0x1180000
}
    1a48:	5f455a49 	svcpl	0x00455a49
    1a4c:	5f444e41 	svcpl	0x00444e41
    1a50:	5f534944 	svcpl	0x00534944
    1a54:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    1a58:	43430053 	movtmi	r0, #12371	; 0x3053
    1a5c:	495f4746 	ldmdbmi	pc, {r1, r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
void __pi_free (aword *ch) {
    1a60:	5f454545 	svcpl	0x00454545
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1a64:	5f43414d 	svcpl	0x0043414d
    1a68:	43430030 	movtmi	r0, #12336	; 0x3030
		syserror (EMALLOC, "malg");
    1a6c:	495f4746 	ldmdbmi	pc, {r1, r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    1a70:	5f454545 	svcpl	0x00454545
	mcfree [MA_NP] += m_size (ch);
    1a74:	5f43414d 	svcpl	0x0043414d
		m_size (ch) ^= MALLOC_UMASK;
    1a78:	682f0031 	stmdavs	pc!, {r0, r4, r5}	; <UNPREDICTABLE>
    1a7c:	2f656d6f 	svccs	0x00656d6f
	mcfree [MA_NP] += m_size (ch);
    1a80:	70657473 	rsbvc	r7, r5, r3, ror r4
	QFREE;
    1a84:	2f6e6568 	svccs	0x006e6568
	if (mevent [MA_NP] . nwait) {
    1a88:	6b736544 	blvs	1cdafa0 <__ccfg+0x1cbaff8>
    1a8c:	2f706f74 	svccs	0x00706f74
		trigger ((aword)(&(mevent [MA_NP])));
    1a90:	4f534c4f 	svcmi	0x00534c4f
		mevent [MA_NP] . nwait --;
    1a94:	2f54454e 	svccs	0x0054454e
}
    1a98:	4f434950 	svcmi	0x00434950
    1a9c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1aa0:	2f534f63 	svccs	0x00534f63
    1aa4:	33314343 	teqcc	r1, #201326593	; 0xc000001
void kill (aword pid) {
    1aa8:	632f5858 			; <UNDEFINED> instruction: 0x632f5858
		pid = (aword) __pi_curr;
    1aac:	2e676663 	cdpcs	6, 6, cr6, cr7, cr3, {3}
	j = NULL;
    1ab0:	43430063 	movtmi	r0, #12387	; 0x3063
	for_all_tasks (i) {
    1ab4:	4d5f4746 	ldclmi	7, cr4, [pc, #-280]	; 19a4 <io+0x30>
	syserror (EREQPAR, "kpi");
    1ab8:	5f45444f 	svcpl	0x0045444f
    1abc:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
		if ((aword)i == pid) {
    1ac0:	4300315f 	movwmi	r3, #351	; 0x15f
    1ac4:	5f474643 	svcpl	0x00474643
				__PCB = i->Next;
    1ac8:	47464343 	strbmi	r4, [r6, -r3, asr #6]
			killev (i);
    1acc:	5041545f 	subpl	r5, r1, pc, asr r4
			ufree (i);
    1ad0:	5041445f 	subpl	r4, r1, pc, asr r4
			if (i == __pi_curr)
    1ad4:	4300305f 	movwmi	r3, #95	; 0x5f
    1ad8:	5f474643 	svcpl	0x00474643
				release;
    1adc:	47464343 	strbmi	r4, [r6, -r3, asr #6]
				j->Next = i->Next;
    1ae0:	5041545f 	subpl	r5, r1, pc, asr r4
    1ae4:	5041445f 	subpl	r4, r1, pc, asr r4
    1ae8:	6300315f 	movwvs	r3, #351	; 0x15f
}
    1aec:	5f676663 	svcpl	0x00676663
    1af0:	43430074 	movtmi	r0, #12404	; 0x3074
    1af4:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
	if (size < 8)
    1af8:	5f474643 	svcpl	0x00474643
		_size = 2;
    1afc:	544f5250 	strbpl	r5, [pc], #-592	; 1b04 <__pi_malloc+0xc>
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1b00:	3732315f 			; <UNDEFINED> instruction: 0x3732315f
		_size = (((aword)size) + 3) >> 2;
    1b04:	0036395f 	eorseq	r3, r6, pc, asr r9
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b08:	47464343 	strbmi	r4, [r6, -r3, asr #6]
		_size = (((aword)size) + 3) >> 2;
    1b0c:	4152455f 	cmpmi	r2, pc, asr r5
		if (mevent [MA_NP] . nfail != 255)
    1b10:	435f4553 	cmpmi	pc, #348127232	; 0x14c00000
    1b14:	00464e4f 	subeq	r4, r6, pc, asr #28
			mevent [MA_NP] . nfail ++;
    1b18:	47464343 	strbmi	r4, [r6, -r3, asr #6]
		mnfree [MA_NP] = 0;
    1b1c:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
    1b20:	52505f47 	subspl	r5, r0, #284	; 0x11c
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b24:	335f544f 	cmpcc	pc, #1325400064	; 0x4f000000
    1b28:	00305f31 	eorseq	r5, r0, r1, lsr pc
			syserror (EMALLOC, "malc");
    1b2c:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1b30:	414d495f 	cmpmi	sp, pc, asr r9
		if (m_size (chunk) >= _size)
    1b34:	565f4547 	ldrbpl	r4, [pc], -r7, asr #10
    1b38:	44494c41 	strbmi	r4, [r9], #-3137	; 0xfffff3bf
		chunk = m_nextp (chunk)) {
    1b3c:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
		m_setnextp (cc, m_nextp (chunk));
    1b40:	43430046 	movtmi	r0, #12358	; 0x3046
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1b44:	465f4746 	ldrbmi	r4, [pc], -r6, asr #14
    1b48:	5f514552 	svcpl	0x00514552
			m_size (chunk) = _size;
    1b4c:	5346464f 	movtpl	r4, #26191	; 0x664f
			cc = chunk + _size + m_hdrlen;
    1b50:	43005445 	movwmi	r5, #1093	; 0x445
    1b54:	5f474643 	svcpl	0x00474643
			m_size (cc) = waste - m_hdrlen;
    1b58:	47464343 	strbmi	r4, [r6, -r3, asr #6]
			QFREE;
    1b5c:	4f52505f 	svcmi	0x0052505f
		mevent [MA_NP] . nfail = 0;
    1b60:	33365f54 	teqcc	r6, #84, 30	; 0x150
		mcfree [MA_NP] -= m_size (chunk);
    1b64:	0032335f 	eorseq	r3, r2, pc, asr r3
    1b68:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1b6c:	4545495f 	strbmi	r4, [r5, #-2399]	; 0xfffff6a1
    1b70:	4c425f45 	mcrrmi	15, 4, r5, r2, cr5
		m_size (chunk) |= MALLOC_UMASK;
    1b74:	00305f45 	eorseq	r5, r0, r5, asr #30
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1b78:	47464343 	strbmi	r4, [r6, -r3, asr #6]
		m_size (chunk) |= MALLOC_UMASK;
    1b7c:	4545495f 	strbmi	r4, [r5, #-2399]	; 0xfffff6a1
			mnfree [MA_NP] = mcfree [MA_NP];
    1b80:	4c425f45 	mcrrmi	15, 4, r5, r2, cr5
}
    1b84:	00315f45 	eorseq	r5, r1, r5, asr #30
    1b88:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1b8c:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
    1b90:	52505f47 	subspl	r5, r0, #284	; 0x11c
    1b94:	395f544f 	ldmdbcc	pc, {r0, r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1b98:	34365f35 	ldrtcc	r5, [r6], #-3893	; 0xfffff0cb
    1b9c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
aword __pi_fork (fsmcode func, aword data) {
    1ba0:	58455f47 	stmdapl	r5, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1ba4:	464c5f54 			; <UNDEFINED> instruction: 0x464c5f54
    1ba8:	4b4c435f 	blmi	131292c <__ccfg+0x12f2984>
    1bac:	46434300 	strbmi	r4, [r3], -r0, lsl #6
		if ((j = __PCB) == NULL)
    1bb0:	43435f47 	movtmi	r5, #16199	; 0x3f47
	i->Next = NULL;
    1bb4:	545f4746 	ldrbpl	r4, [pc], #-1862	; 1bbc <__pi_fork+0x1c>
	i->data = data;
    1bb8:	504f5f49 	subpl	r5, pc, r9, asr #30
		if ((j = __PCB) == NULL)
    1bbc:	4e4f4954 			; <UNDEFINED> instruction: 0x4e4f4954
}
    1bc0:	50470053 	subpl	r0, r7, r3, asr r0
			for (; j->Next != NULL; j = j->Next);
    1bc4:	725f4f49 	subsvc	r4, pc, #292	; 0x124
    1bc8:	44646165 	strbtmi	r6, [r4], #-357	; 0xfffffe9b
	return (aword) i;
    1bcc:	2f006f69 	svccs	0x00006f69
    1bd0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	if (mevent [MA_NP] . nwait != 255)
    1bd4:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    1bd8:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    1bdc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
		mevent [MA_NP] . nwait ++;
    1be0:	706f746b 	rsbvc	r7, pc, fp, ror #8
	wait ((aword)(&(mevent [MA_NP])), state);
    1be4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1be8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
void diag (const char *mess, ...) {
    1bec:	4349502f 	movtmi	r5, #36911	; 0x902f
    1bf0:	502f534f 	eorpl	r5, pc, pc, asr #6
    1bf4:	534f6369 	movtpl	r6, #62313	; 0xf369
	diag_disable_int (a, is);
    1bf8:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    1bfc:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    1c00:	6f736e65 	svcvs	0x00736e65
				d = (bc == 16) ? 10000 : 1000000000;
    1c04:	702f7372 	eorvc	r7, pc, r2, ror r3	; <UNPREDICTABLE>
	diag_disable_int (a, is);
    1c08:	735f6e69 	cmpvc	pc, #1680	; 0x690
	while (*mess != '\0') {
    1c0c:	6f736e65 	svcvs	0x00736e65
	dgout ('\r');
    1c10:	00632e72 	rsbeq	r2, r3, r2, ror lr
	dgout ('\n');
    1c14:	6b6e756a 	blvs	1b9f1c4 <__ccfg+0x1b7f21c>
    1c18:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    1c1c:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
	diag_wait (a);
    1c20:	5f726f73 	svcpl	0x00726f73
	diag_enable_int (a, is);
    1c24:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1c28:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
}
    1c2c:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
    1c30:	5f726f73 	svcpl	0x00726f73
    1c34:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
		if (*mess == '%') {
    1c38:	72655400 	rsbvc	r5, r5, #0, 8
    1c3c:	6162006d 	cmnvs	r2, sp, rrx
			if (*mess == 'l') {
    1c40:	6f697463 	svcvs	0x00697463
    1c44:	6544006e 	strbvs	r0, [r4, #-110]	; 0xffffff92
				mess++;
    1c48:	6e756f62 	cdpvs	15, 7, cr6, cr5, cr2, {3}
				val = va_arg (ap, lword);
    1c4c:	70006563 	andvc	r6, r0, r3, ror #10
				bc = 32;
    1c50:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
				bc = 16;
    1c54:	5f006e6f 	svcpl	0x00006e6f
			switch (*mess) {
    1c58:	5f69705f 	svcpl	0x0069705f
    1c5c:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    1c60:	00736e6f 	rsbseq	r6, r3, pc, ror #28
				dgout ('%');
    1c64:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    1c68:	5f736e6f 	svcpl	0x00736e6f
				dgout (*mess);
    1c6c:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    1c70:	2f006e6f 	svccs	0x00006e6f
			switch (*mess) {
    1c74:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
					v = __pi_hex_enc_table [
    1c78:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
					i += 4;
    1c7c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
					(val >> (bc - i)) & 0xf];
    1c80:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1c84:	706f746b 	rsbvc	r7, pc, fp, ror #8
					dgout (v);
    1c88:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1c8c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
				while (i < bc) {
    1c90:	4349502f 	movtmi	r5, #36911	; 0x902f
			mess++;
    1c94:	502f534f 	eorpl	r5, pc, pc, asr #6
					d /= 10;
    1c98:	534f6369 	movtpl	r6, #62313	; 0xf369
				if ((val >> (bc - 1)) & 1) {
    1c9c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    1ca0:	492f7362 	stmdbmi	pc!, {r1, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
					dgout ('-');
    1ca4:	75622f4f 	strbvc	r2, [r2, #-3919]!	; 0xfffff0b1
    1ca8:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
						val |= 0xffff0000;
    1cac:	00632e73 	rsbeq	r2, r3, r3, ror lr
    1cb0:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
    1cb4:	65650074 	strbvs	r0, [r5, #-116]!	; 0xffffff8c
				d = (bc == 16) ? 10000 : 1000000000;
    1cb8:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1cbc:	72655f74 	rsbvc	r5, r5, #116, 30	; 0x1d0
    1cc0:	00657361 	rsbeq	r7, r5, r1, ror #6
					v = (word) (val / d);
    1cc4:	6f747075 	svcvs	0x00747075
					if (v || d == 1) break;
    1cc8:	646d6300 	strbtvs	r6, [sp], #-768	; 0xfffffd00
    1ccc:	6500305f 	strvs	r3, [r0, #-95]	; 0xffffffa1
					d /= 10;
    1cd0:	6c635f65 	stclvs	15, cr5, [r3], #-404	; 0xfffffe6c
				d = (bc == 16) ? 10000 : 1000000000;
    1cd4:	0065736f 	rsbeq	r7, r5, pc, ror #6
					dgout (v + '0');
    1cd8:	655f6565 	ldrbvs	r6, [pc, #-1381]	; 177b <update_n_wake+0x4f>
    1cdc:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
    1ce0:	5f656500 	svcpl	0x00656500
					d /= 10;
    1ce4:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
					val = val - (v * d);
    1ce8:	6f640065 	svcvs	0x00640065
					if (d == 0) break;
    1cec:	006e6570 	rsbeq	r6, lr, r0, ror r5
					v = (word) (val / d);
    1cf0:	6f5f6565 	svcvs	0x005f6565
    1cf4:	006e6570 	rsbeq	r6, lr, r0, ror r5
				if (bc == 16)
    1cf8:	6e6f4357 	mcrvs	3, 3, r4, cr15, cr7, {2}
				d = (bc == 16) ? 10000 : 1000000000;
    1cfc:	6d630074 	stclvs	0, cr0, [r3, #-464]!	; 0xfffffe30
					val &= 0xffff;
    1d00:	00335f64 	eorseq	r5, r3, r4, ror #30
					dgout (*s);
    1d04:	705f6565 	subsvc	r6, pc, r5, ror #10
					s++;
    1d08:	63696e61 	cmnvs	r9, #1552	; 0x610
				while (*s != '\0') {
    1d0c:	5f656500 	svcpl	0x00656500
    1d10:	636e7973 	cmnvs	lr, #1884160	; 0x1cc000
			dgout (*mess++);
    1d14:	6f726600 	svcvs	0x00726600
    1d18:	6565006d 	strbvs	r0, [r5, #-109]!	; 0xffffff93
    1d1c:	6165725f 	cmnvs	r5, pc, asr r2
    1d20:	64720064 	ldrbtvs	r0, [r2], #-100	; 0xffffff9c
    1d24:	63007273 	movwvs	r7, #627	; 0x273
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1d28:	736f6c63 	cmnvc	pc, #25344	; 0x6300
    1d2c:	73640065 	cmnvc	r4, #101	; 0x65
    1d30:	00746174 	rsbseq	r6, r4, r4, ror r1
    1d34:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1c80 <diag+0x94>
	^ entropy
    1d38:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
}
    1d3c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    1d40:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1d44:	6f746b73 	svcvs	0x00746b73
    1d48:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1d4c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	word cs = size + hblenb;
    1d50:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1d54:	2f534f43 	svccs	0x00534f43
    1d58:	4f636950 	svcmi	0x00636950
	p -> length = size;
    1d5c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
}
    1d60:	2f736269 	svccs	0x00736269
	if (p->attributes.b.queued) {
    1d64:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1d68:	2f656761 	svccs	0x00656761
    1d6c:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1d70:	5f656761 	svcpl	0x00656761
		p->attributes.b.queued = 0;
    1d74:	3532786d 	ldrcc	r7, [r2, #-2157]!	; 0xfffff793
    1d78:	33303872 	teqcc	r0, #7471104	; 0x720000
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1d7c:	00632e35 	rsbeq	r2, r3, r5, lsr lr
	deq (p);	// Remove from queue
    1d80:	65706f63 	ldrbvs	r6, [r0, #-3939]!	; 0xfffff09d
}
    1d84:	7063006e 	rsbvc	r0, r3, lr, rrx
	tfree ((address)p);
    1d88:	65007274 	strvs	r7, [r0, #-628]	; 0xfffffd8c
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1d8c:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1d90:	7200657a 	andvc	r6, r0, #511705088	; 0x1e800000
    1d94:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1d98:	6f444500 	svcvs	0x00444500
    1d9c:	7000656e 	andvc	r6, r0, lr, ror #10
	if (q_empty (q))
    1da0:	6e776f64 	cdpvs	15, 7, cr6, cr7, cr4, {3}
    1da4:	61777700 	cmnvs	r7, r0, lsl #14
		trigger (q);
    1da8:	67007469 	strvs	r7, [r0, -r9, ror #8]
	if (p->attributes.b.urgent) {
    1dac:	625f7465 	subsvs	r7, pc, #1694498816	; 0x65000000
		p->u.bqueue.next = q->next;
    1db0:	00657479 	rsbeq	r7, r5, r9, ror r4
		p->u.bqueue.prev = q;
    1db4:	5f747570 	svcpl	0x00747570
		q->next->prev = (qitem_t*) p;
    1db8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
	p->attributes.b.queued = 1;
    1dbc:	6f682f00 	svcvs	0x00682f00
    1dc0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
}
    1dc4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
		p->u.bqueue.prev = q->prev;
    1dc8:	442f6e65 	strtmi	r6, [pc], #-3685	; 1dd0 <enq+0x44>
		q->prev->next = (qitem_t*) p;
    1dcc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		q->prev = (qitem_t*) p;
    1dd0:	4f2f706f 	svcmi	0x002f706f
    1dd4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1dd8:	502f5445 	eorpl	r5, pc, r5, asr #8
	deq (p);	// Soft dequeue, timer and hook left intact
    1ddc:	534f4349 	movtpl	r4, #62281	; 0xf349
	switch (dv) {
    1de0:	6369502f 	cmnvs	r9, #47	; 0x2f
    1de4:	502f534f 	eorpl	r5, pc, pc, asr #6
    1de8:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    1dec:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
			p->attributes.b.urgent = 1;
    1df0:	2f6c6169 	svccs	0x006c6169
    1df4:	5f726573 	svcpl	0x00726573
			verify_ses (p, "dispose ses");
    1df8:	2e74756f 	cdpcs	5, 7, cr7, cr4, cr15, {3}
    1dfc:	65730063 	ldrbvs	r0, [r3, #-99]!	; 0xffffff9d
    1e00:	756f5f72 	strbvc	r5, [pc, #-3954]!	; e96 <ioreq_uart_a+0x3a>
    1e04:	682f0074 	stmdavs	pc!, {r2, r4, r5, r6}	; <UNPREDICTABLE>
    1e08:	2f656d6f 	svccs	0x00656d6f
			verify_phy (p, "dispose phy");
    1e0c:	70657473 	rsbvc	r7, r5, r3, ror r4
    1e10:	2f6e6568 	svccs	0x006e6568
}
    1e14:	6b736544 	blvs	1cdb32c <__ccfg+0x1cbb384>
			enq (oqueues [p->attributes.b.phys], p);
    1e18:	2f706f74 	svccs	0x00706f74
			p->attributes.b.urgent = 1;
    1e1c:	4f534c4f 	svcmi	0x00534c4f
    1e20:	2f54454e 	svccs	0x0054454e
			verify_phy (p, "dispose phy");
    1e24:	4f434950 	svcmi	0x00434950
    1e28:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1e2c:	2f534f63 	svccs	0x00534f63
    1e30:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    1e34:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    1e38:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
			enq (oqueues [p->attributes.b.phys], p);
    1e3c:	7265732f 	rsbvc	r7, r5, #-1140850688	; 0xbc000000
    1e40:	2e6e695f 			; <UNDEFINED> instruction: 0x2e6e695f
}
    1e44:	5f5f0063 	svcpl	0x005f0063
			rlp (p);
    1e48:	6c706e69 	ldclvs	14, cr6, [r0], #-420	; 0xfffffe5c
}
    1e4c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    1e50:	5f726573 	svcpl	0x00726573
    1e54:	73006e69 	movwvc	r6, #3689	; 0xe69
    1e58:	6f5f7265 	svcvs	0x005f7265
    1e5c:	00667475 	rsbeq	r7, r6, r5, ror r4
    1e60:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1dac <enq+0x20>
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1e64:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
	if (b->attributes.b.outgoing) {
    1e68:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
	b = header (p);
    1e6c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	if (b->attributes.b.outgoing) {
    1e70:	6f746b73 	svcvs	0x00746b73
		verify_ses (b, "tcv02");
    1e74:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1e78:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1e7c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1e80:	2f534f43 	svccs	0x00534f43
    1e84:	4f636950 	svcmi	0x00636950
		verify_plg (b, tcv_out, "tcv03");
    1e88:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    1e8c:	2f736269 	svccs	0x00736269
    1e90:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1e94:	732f6c61 			; <UNDEFINED> instruction: 0x732f6c61
    1e98:	6f5f7265 	svcvs	0x005f7265
    1e9c:	2e667475 	mcrcs	4, 3, r7, cr6, cr5, {3}
    1ea0:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
    1ea4:	2f656d6f 	svccs	0x00656d6f
    1ea8:	70657473 	rsbvc	r7, r5, r3, ror r4
		dispose (b, plugins [b->attributes.b.plugin] ->
    1eac:	2f6e6568 	svccs	0x006e6568
}
    1eb0:	6b736544 	blvs	1cdb3c8 <__ccfg+0x1cbb420>
		dispose (b, plugins [b->attributes.b.plugin] ->
    1eb4:	2f706f74 	svccs	0x00706f74
		rlp (b);
    1eb8:	4f534c4f 	svcmi	0x00534c4f
}
    1ebc:	2f54454e 	svccs	0x0054454e
		rlp (b);
    1ec0:	4f434950 	svcmi	0x00434950
    1ec4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1ec8:	2f534f63 	svccs	0x00534f63
    1ecc:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    1ed0:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1ed4:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    1ed8:	7265732f 	rsbvc	r7, r5, #-1140850688	; 0xbc000000
    1edc:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1ee0:	7300632e 	movwvc	r6, #814	; 0x32e
	va_start (ap, plid);
    1ee4:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1ee8:	6900666e 	stmdbvs	r0, {r1, r2, r3, r5, r6, r9, sl, sp, lr}
    1eec:	65757373 	ldrbvs	r7, [r5, #-883]!	; 0xfffffc8d
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1ef0:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    1ef4:	646f6d00 	strbtvs	r6, [pc], #-3328	; 1efc <tcv_open+0x28>
    1ef8:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
    1efc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
			syserror (ENODEVICE, "tcv04");
    1f00:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
		syserror (EMALLOC, "tcv05");
    1f04:	4e646e61 	cdpmi	14, 6, cr6, cr4, cr1, {3}
	attp.b.outgoing = 1;
    1f08:	4162006f 	cmnmi	r2, pc, rrx
    1f0c:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
    1f10:	61745364 	cmnvs	r4, r4, ror #6
    1f14:	00737574 	rsbseq	r7, r3, r4, ror r5
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f18:	6f5f6672 	svcvs	0x005f6672
		if (descriptors [fd] == NULL)
    1f1c:	6672006e 	ldrbtvs	r0, [r2], -lr, rrx
    1f20:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f24:	61566200 	cmpvs	r6, r0, lsl #4
		return ERROR;
    1f28:	6e654c72 	mcrvs	12, 3, r4, cr5, cr2, {3}
}
    1f2c:	6b507000 	blvs	141df34 <__ccfg+0x13fdf8c>
    1f30:	65630074 	strbvs	r0, [r3, #-116]!	; 0xffffff8c
    1f34:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
	s->attpattern.b.session = fd;
    1f38:	71657246 	cmnvc	r5, r6, asr #4
    1f3c:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
	descriptors [fd] = s;
    1f40:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
	q_init (&(s->rqueue));
    1f44:	65476572 	strbvs	r6, [r7, #-1394]	; 0xfffffa8e
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1f48:	6b73666e 	blvs	1cdb908 <__ccfg+0x1cbb960>
    1f4c:	63746150 	cmnvs	r4, #80, 2
    1f50:	68770068 	ldmdavs	r7!, {r3, r5, r6}^
    1f54:	6e657469 	cdpvs	4, 6, cr7, cr5, cr9, {3}
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1f58:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1f5c:	63667200 	cmnvs	r6, #0, 4
    1f60:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
	descriptors [fd] = s;
    1f64:	4f52505f 	svcmi	0x0052505f
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1f68:	53435f50 	movtpl	r5, #16208	; 0x3f50
    1f6c:	7000735f 	andvc	r7, r0, pc, asr r3
	if (s == NULL)
    1f70:	54747361 	ldrbtpl	r7, [r4], #-865	; 0xfffffc9f
		syserror (EMALLOC, "tcv05");
    1f74:	00676972 	rsbeq	r6, r7, r2, ror r9
    1f78:	72546672 	subsvc	r6, r4, #119537664	; 0x7200000
    1f7c:	745f6d69 	ldrbvc	r6, [pc], #-3433	; 1f84 <tcv_open+0xb0>
    1f80:	75627200 	strbvc	r7, [r2, #-512]!	; 0xfffffe00
    1f84:	006c6666 	rsbeq	r6, ip, r6, ror #12
    1f88:	4c5f5244 	lfmmi	f5, 2, [pc], {68}	; 0x44
    1f8c:	5f504f4f 	svcpl	0x00504f4f
    1f90:	4f70005f 	svcmi	0x0070005f
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1f94:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1f98:	52620074 	rsbpl	r0, r2, #116	; 0x74
    1f9c:	61657065 	cmnvs	r5, r5, rrx
    1fa0:	006b4f74 	rsbeq	r4, fp, r4, ror pc
	plugins [ord] = pl;
    1fa4:	4978526e 	ldmdbmi	r8!, {r1, r2, r3, r5, r6, r9, ip, lr}^
	return 0;
    1fa8:	726f6e67 	rsbvc	r6, pc, #1648	; 0x670
		return ERROR;
    1fac:	66006465 	strvs	r6, [r0], -r5, ror #8
}
    1fb0:	6f4d6365 	svcvs	0x004d6365
    1fb4:	6e006564 	cfsh32vs	mvfx6, mvfx0, #52
	verify_fds (fd, "tcv10");
    1fb8:	6f4e7852 	svcvs	0x004e7852
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    1fbc:	666f006b 	strbtvs	r0, [pc], -fp, rrx
	verify_fds (fd, "tcv10");
    1fc0:	6c656466 	cfstrdvs	mvd6, [r5], #-408	; 0xfffffe68
    1fc4:	70007961 	andvc	r7, r0, r1, ror #18
    1fc8:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
	verify_plg (b, tcv_frm, "tcv11");
    1fcc:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
	b = q_first (rq);
    1fd0:	75437000 	strbvc	r7, [r3, #-0]
	if (q_end (b, rq)) {
    1fd4:	6e457272 	mcrvs	2, 2, r7, cr5, cr2, {3}
		if (state != WNONE) {
    1fd8:	00797274 	rsbseq	r7, r9, r4, ror r2
    1fdc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
			when (rq, state);
    1fe0:	6d617453 	cfstrdvs	mvd7, [r1, #-332]!	; 0xfffffeb4
			release;
    1fe4:	72690070 	rsbvc	r0, r9, #112	; 0x70
	deq (b);	// Dequeue the packet ...
    1fe8:	746e4971 	strbtvc	r4, [lr], #-2417	; 0xfffff68f
    1fec:	61770076 	cmnvs	r7, r6, ror r0
	p = ((address)(b + 1));
    1ff0:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
	verify_plg (b, tcv_frm, "tcv11");
    1ff4:	6600646d 	strvs	r6, [r0], -sp, ror #8
    1ff8:	616d726f 	cmnvs	sp, pc, ror #4
    1ffc:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    2000:	74730066 	ldrbtvc	r0, [r3], #-102	; 0xffffff9a
    2004:	54747261 	ldrbtpl	r7, [r4], #-609	; 0xfffffd9f
    2008:	00656d69 	rsbeq	r6, r5, r9, ror #26
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    200c:	70704162 	rsbsvc	r4, r0, r2, ror #2
    2010:	54646e65 	strbtpl	r6, [r4], #-3685	; 0xfffff19b
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2014:	73656d69 	cmnvc	r5, #6720	; 0x1a40
    2018:	706d6174 	rsbvc	r6, sp, r4, ror r1
	b->u.pointers.tail =
    201c:	654e7000 	strbvs	r7, [lr, #-0]
}
    2020:	6e457478 	mcrvs	4, 2, r7, cr5, cr8, {3}
		return NULL;
    2024:	00797274 	rsbseq	r7, r9, r4, ror r2
    2028:	635f4652 	cmpvs	pc, #85983232	; 0x5200000
    202c:	7250646d 	subsvc	r6, r0, #1828716544	; 0x6d000000
    2030:	6152706f 	cmpvs	r2, pc, rrx
    2034:	446f6964 	strbtmi	r6, [pc], #-2404	; 203c <tcv_wnps+0x4>
	verify_fds (fd, "tcv16");
    2038:	65537669 	ldrbvs	r7, [r3, #-1641]	; 0xfffff997
								Boolean urg) {
    203c:	00707574 	rsbseq	r7, r0, r4, ror r5
    2040:	65766571 	ldrbvs	r6, [r6, #-1393]!	; 0xfffffa8f
	verify_fds (fd, "tcv16");
    2044:	7000746e 	andvc	r7, r0, lr, ror #8
    2048:	6f43746b 	svcvs	0x0043746b
    204c:	7000666e 	andvc	r6, r0, lr, ror #12
	verify_pld (s, tcv_frm, "tcv17");
    2050:	5f737968 	svcpl	0x00737968
    2054:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    2058:	63003035 	movwvs	r3, #53	; 0x35
    205c:	35333163 	ldrcc	r3, [r3, #-355]!	; 0xfffffe9d
    2060:	72645f30 	rsbvc	r5, r4, #48, 30	; 0xc0
    2064:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2068:	63667200 	cmnvs	r6, #0, 4
    206c:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
	ptrs.head = (word) fd;
    2070:	5f53465f 	svcpl	0x0053465f
	ptrs.tail = (word) urg;
    2074:	66720073 			; <UNDEFINED> instruction: 0x66720073
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    2078:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    207c:	53465f44 	movtpl	r5, #28484	; 0x6f44
		if (state != WNONE) {
    2080:	7400745f 	strvc	r7, [r0], #-1119	; 0xfffffba1
    2084:	776f5078 			; <UNDEFINED> instruction: 0x776f5078
}
    2088:	72007265 	andvc	r7, r0, #1342177286	; 0x50000006
			when (eid, state);
    208c:	00774278 	rsbseq	r4, r7, r8, ror r2
    2090:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
			release;
    2094:	6e654779 	mcrvs	7, 3, r4, cr5, cr9, {3}
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    2098:	506b7366 	rsbpl	r7, fp, r6, ror #6
    209c:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    20a0:	61686300 	cmnvs	r8, r0, lsl #6
    20a4:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    20a8:	6e797300 	cdpvs	3, 7, cr7, cr9, cr0, {0}
    20ac:	6f436874 	svcvs	0x00436874
    20b0:	6200666e 	andvs	r6, r0, #115343360	; 0x6e00000
    20b4:	52616e45 	rsbpl	r6, r1, #1104	; 0x450
		if (state != WNONE) {
    20b8:	00697373 	rsbeq	r7, r9, r3, ror r3
    20bc:	74754162 	ldrbtvc	r4, [r5], #-354	; 0xfffffe9e
			tmwait (state);
    20c0:	756c466f 	strbvc	r4, [ip, #-1647]!	; 0xfffff991
    20c4:	72436873 	subvc	r6, r3, #7536640	; 0x730000
	b->attributes = s->attpattern;
    20c8:	72724563 	rsbsvc	r4, r2, #415236096	; 0x18c00000
		b->attributes.b.urgent = 1;
    20cc:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
    20d0:	52676966 	rsbpl	r6, r7, #1671168	; 0x198000
	b->u.pointers.head = ptrs.head;
    20d4:	6f724666 	svcvs	0x00724666
	b->u.pointers.tail = length;
    20d8:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
	return (address) (b + 1);
    20dc:	54620064 	strbtpl	r0, [r2], #-100	; 0xffffff9c
    20e0:	646f4d78 	strbtvs	r4, [pc], #-3448	; 20e8 <tcv_wnps+0xb0>
    20e4:	6e610065 	cdpvs	0, 6, cr0, cr1, cr5, {3}
    20e8:	676f6c61 	strbvs	r6, [pc, -r1, ror #24]!
    20ec:	4d676643 	stclmi	6, cr6, [r7, #-268]!	; 0xfffffef4
    20f0:	0065646f 	rsbeq	r6, r5, pc, ror #8
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    20f4:	616e4562 	cmnvs	lr, r2, ror #10
	if (len >= b->u.pointers.tail)
    20f8:	00646d43 	rsbeq	r6, r4, r3, asr #26
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    20fc:	436d756e 	cmnmi	sp, #461373440	; 0x1b800000
    2100:	4972726f 	ldmdbmi	r2!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
	if (len > 0) {
    2104:	7000766e 	andvc	r7, r0, lr, ror #12
		memcpy ((char*)buf, ((char*)p) + b->u.pointers.head, len);
    2108:	50717249 	rsbspl	r7, r1, r9, asr #4
    210c:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    2110:	61507000 	cmpvs	r0, r0
		b->u.pointers.tail -= len;
    2114:	56686374 			; <UNDEFINED> instruction: 0x56686374
    2118:	52006365 	andpl	r6, r0, #-1811939327	; 0x94000001
    211c:	70434346 	subvc	r4, r3, r6, asr #6
		b->u.pointers.head += len;
    2120:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
    2124:	61736944 	cmnvs	r3, r4, asr #18
    2128:	00656c62 	rsbeq	r6, r5, r2, ror #24
}
    212c:	5078616d 	rsbspl	r6, r8, sp, ror #2
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2130:	654c746b 	strbvs	r7, [ip, #-1131]	; 0xfffffb95
    2134:	6f63006e 	svcvs	0x0063006e
    2138:	6f437272 	svcvs	0x00437272
	verify_fph (phy, "tcv23");
    213c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2140:	74617200 	strbtvc	r7, [r1], #-512	; 0xfffffe00
    2144:	69620030 	stmdbvs	r2!, {r4, r5}^
    2148:	6f4d7361 	svcvs	0x004d7361
}
    214c:	52006564 	andpl	r6, r0, #100, 10	; 0x19000000
	return (physical [phy]) (opt, arg);
    2150:	70434346 	subvc	r4, r3, r6, asr #6
    2154:	6e493065 	cdpvs	0, 4, cr3, cr9, cr5, {3}
    2158:	616e4574 	smcvs	58452	; 0xe454
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    215c:	00656c62 	rsbeq	r6, r5, r2, ror #24
	if (opt < 0) {
    2160:	636e4962 	cmnvs	lr, #1605632	; 0x188000
		if (fd < 0)
    2164:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
		if (opt == PHYSOPT_PLUGINFO) {
    2168:	00637243 	rsbeq	r7, r3, r3, asr #4
			if (fd >= TCV_MAX_PLUGS)
    216c:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
			if ((p = plugins [fd]) == NULL)
    2170:	66496769 	strbvs	r6, [r9], -r9, ror #14
    2174:	00636441 	rsbeq	r6, r3, r1, asr #8
}
    2178:	5f636672 	svcpl	0x00636672
		if (fd >= TCV_MAX_PHYS)
    217c:	5f444d43 	svcpl	0x00444d43
		return physinfo [fd];
    2180:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    2184:	5f58525f 	svcpl	0x0058525f
	verify_fds (fd, "tcv22");
    2188:	6e650073 	mcrvs	0, 3, r0, cr5, cr3, {3}
    218c:	69725464 	ldmdbvs	r2!, {r2, r5, r6, sl, ip, lr}^
    2190:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    2194:	63667200 	cmnvs	r6, #0, 4
    2198:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
}
    219c:	4f52505f 	svcmi	0x0052505f
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    21a0:	53435f50 	movtpl	r5, #16208	; 0x3f50
    21a4:	6600745f 			; <UNDEFINED> instruction: 0x6600745f
			return 0;
    21a8:	746e6f72 	strbtvc	r6, [lr], #-3954	; 0xfffff08e
    21ac:	4d646e45 	stclmi	14, cr6, [r4, #-276]!	; 0xfffffeec
    21b0:	0065646f 	rsbeq	r6, r5, pc, ror #8
    21b4:	67697274 			; <UNDEFINED> instruction: 0x67697274
    21b8:	4e726567 	cdpmi	5, 7, cr6, cr2, cr7, {3}
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    21bc:	5170006f 	cmnpl	r0, pc, rrx
    21c0:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
	if (dsp != TCV_DSP_PASS) {
    21c4:	646e6500 	strbtvs	r6, [lr], #-1280	; 0xfffffb00
		if (ses == NONE)
    21c8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
			syserror (EREQPAR, "tcv26");
    21cc:	646d6300 	strbtvs	r6, [sp], #-768	; 0xfffffd00
		verify_fds (ses, "tcv27");
    21d0:	0073635f 	rsbseq	r6, r3, pc, asr r3
    21d4:	69737372 	ldmdbvs	r3!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}^
    21d8:	00726854 	rsbseq	r6, r2, r4, asr r8
    21dc:	436d756e 	cmnmi	sp, #461373440	; 0x1b800000
    21e0:	4272726f 	rsbsmi	r7, r2, #-268435450	; 0xf0000006
		if ((p = apb (size)) != NULL) {
    21e4:	00797375 	rsbseq	r7, r9, r5, ror r3
    21e8:	6c615652 	stclvs	6, cr5, [r1], #-328	; 0xfffffeb8
		return NULL;
    21ec:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
			p->attributes = descriptors [ses] -> attpattern;
    21f0:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
			dispose (p, dsp);
    21f4:	62006e6f 	andvs	r6, r0, #1776	; 0x6f0
			p->attributes = descriptors [ses] -> attpattern;
    21f8:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
			p->attributes.b.outgoing = 0;
    21fc:	48656475 	stmdami	r5!, {r0, r2, r4, r5, r6, sl, sp, lr}^
			dispose (p, dsp);
    2200:	6c007264 	sfmvs	f7, 4, [r0], {100}	; 0x64
			return (address)(p + 1);
    2204:	52747361 	rsbspl	r7, r4, #-2080374783	; 0x84000001
    2208:	00697373 	rsbeq	r7, r9, r3, ror r3
	if ((p = apb (size)) != NULL)
    220c:	54646f6d 	strbtpl	r6, [r4], #-3949	; 0xfffff093
    2210:	00657079 	rsbeq	r7, r5, r9, ror r0
		return (address)(p + 1);
    2214:	73614c70 	cmnvc	r1, #112, 24	; 0x7000
    2218:	746e4574 	strbtvc	r4, [lr], #-1396	; 0xfffffa8c
    221c:	6e007972 			; <UNDEFINED> instruction: 0x6e007972
    2220:	75427852 	strbvc	r7, [r2, #-2130]	; 0xfffff7ae
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2224:	6c754666 	ldclvs	6, cr4, [r5], #-408	; 0xfffffe68
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2228:	7872006c 	ldmdavc	r2!, {r2, r3, r5, r6}^
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    222c:	0063615f 	rsbeq	r6, r3, pc, asr r1
    2230:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
		syserror (EREQPAR, "tcv28");
    2234:	6b73614d 	blvs	1cda770 <__ccfg+0x1cba7c8>
		syserror (EMALLOC, "tcv29");
    2238:	45736300 	ldrbmi	r6, [r3, #-768]!	; 0xfffffd00
	physical [phy] = ps;
    223c:	7254646e 	subsvc	r6, r4, #1845493760	; 0x6e000000
	physinfo [phy] = info;
    2240:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
    2244:	42620072 	rsbmi	r0, r2, #114	; 0x72
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2248:	65527469 	ldrbvs	r7, [r2, #-1129]	; 0xfffffb97
    224c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    2250:	5f006c61 	svcpl	0x00006c61
		syserror (EMALLOC, "tcv29");
    2254:	6d75645f 	cfldrdvs	mvd6, [r5, #-380]!	; 0xfffffe84
    2258:	0030796d 	eorseq	r7, r0, sp, ror #18
	q_init (q);
    225c:	626d7973 	rsbvs	r7, sp, #1884160	; 0x1cc000
}
    2260:	61526c6f 	cmpvs	r2, pc, ror #24
    2264:	69006574 	stmdbvs	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
    2268:	5f74696e 	svcpl	0x0074696e
    226c:	66756272 			; <UNDEFINED> instruction: 0x66756272
    2270:	70007366 	andvc	r7, r0, r6, ror #6
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2274:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0xfffffab2
	verify_fph (phy, "tcv30");
    2278:	6900704f 	stmdbvs	r0, {r0, r1, r2, r3, r6, ip, sp, lr}
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    227c:	7246746e 	subvc	r7, r6, #1845493760	; 0x6e000000
    2280:	62007165 	andvs	r7, r0, #1073741849	; 0x40000019
	verify_fph (phy, "tcv30");
    2284:	6f747541 	svcvs	0x00747541
    2288:	73756c46 	cmnvc	r5, #17920	; 0x4600
    228c:	6e674968 	vnmulvs.f16	s9, s14, s17	; <UNPREDICTABLE>
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2290:	6465726f 	strbtvs	r7, [r5], #-623	; 0xfffffd91
    2294:	63667200 	cmnvs	r6, #0, 4
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2298:	6461725f 	strbtvs	r7, [r1], #-607	; 0xfffffda1
    229c:	704f6f69 	subvc	r6, pc, r9, ror #30
		if (plugins [plg] == NULL)
    22a0:	7300745f 	movwvc	r7, #1119	; 0x45f
    22a4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    22a8:	67697254 			; <UNDEFINED> instruction: 0x67697254
}
    22ac:	00726567 	rsbseq	r6, r2, r7, ror #10
    22b0:	63746170 	cmnvs	r4, #112, 2
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    22b4:	616d4968 	cmnvs	sp, r8, ror #18
    22b8:	65476567 	strbvs	r6, [r7, #-1383]	; 0xfffffa99
    22bc:	6b73666e 	blvs	1cdbc7c <__ccfg+0x1cbbcd4>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    22c0:	5f667200 	svcpl	0x00667200
    22c4:	0066666f 	rsbeq	r6, r6, pc, ror #12
    22c8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2214 <tcvp_new+0x58>
    22cc:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    22d0:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    22d4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	len -= (ap.head + ap.tail);
    22d8:	6f746b73 	svcvs	0x00746b73
    22dc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    22e0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    22e4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    22e8:	2f534f43 	svccs	0x00534f43
    22ec:	4f636950 	svcmi	0x00636950
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    22f0:	43432f53 	movtmi	r2, #16211	; 0x3f53
    22f4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    22f8:	7066722f 	rsbvc	r7, r6, pc, lsr #4
	return 1;
    22fc:	2e706f72 	mrccs	15, 3, r6, cr0, cr2, {3}
    2300:	45620063 	strbmi	r0, [r2, #-99]!	; 0xffffff9d
    2304:	6f43616e 	svcvs	0x0043616e
    2308:	62007272 	andvs	r7, r0, #536870919	; 0x20000007
    230c:	664f7346 	strbvs	r7, [pc], -r6, asr #6
	verify_fph (phy, "tcv32");
    2310:	6c644966 			; <UNDEFINED> instruction: 0x6c644966
    2314:	46520065 	ldrbmi	r0, [r2], -r5, rrx
    2318:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    231c:	70007346 	andvc	r7, r0, r6, asr #6
    2320:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    2324:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
	oq = oqueues [phy];
    2328:	6e797300 	cdpvs	3, 7, cr7, cr9, cr0, {0}
	b = q_first (oq);
    232c:	726f5763 	rsbvc	r5, pc, #25952256	; 0x18c0000
	if (q_end (b, oq)) {
    2330:	706f0064 	rsbvc	r0, pc, r4, rrx
	*len = b->length;
    2334:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	deq (b);	// Dequeue the packet ...
    2338:	74617000 	strbtvc	r7, [r1], #-0
}
    233c:	65476863 	strbvs	r6, [r7, #-2147]	; 0xfffff79d
		return NULL;
    2340:	6b73666e 	blvs	1cdbd00 <__ccfg+0x1cbbd58>
    2344:	00656652 	rsbeq	r6, r5, r2, asr r6
    2348:	6e457363 	cdpvs	3, 4, cr7, cr5, cr3, {3}
    234c:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
	verify_fph (phy, "tcv33");
    2350:	61720065 	cmnvs	r2, r5, rrx
    2354:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    2358:	00745f65 	rsbseq	r5, r4, r5, ror #30
    235c:	72726f63 	rsbsvc	r6, r2, #396	; 0x18c
    2360:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2364:	7000646f 	andvc	r6, r0, pc, ror #8
	oq = oqueues [phy];
    2368:	7267756c 	rsbvc	r7, r7, #108, 10	; 0x1b000000
	b = q_first (oq);
    236c:	46520074 			; <UNDEFINED> instruction: 0x46520074
		return NULL;
    2370:	65704343 	ldrbvs	r4, [r0, #-835]!	; 0xfffffcbd
	return (address)(b + 1);
    2374:	43746e49 	cmnmi	r4, #1168	; 0x490
}
    2378:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    237c:	756c7000 	strbvc	r7, [ip, #-0]!
    2380:	00686367 	rsbeq	r6, r8, r7, ror #6
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    2384:	61746172 	cmnvs	r4, r2, ror r1
	verify_plg (b, tcv_xmt, "tcv34");
    2388:	00656c62 	rsbeq	r6, r5, r2, ror #24
	hblock_t *b = header (pkt);
    238c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
	verify_plg (b, tcv_xmt, "tcv34");
    2390:	5274756f 	rsbspl	r7, r4, #465567744	; 0x1bc00000
    2394:	66007365 	strvs	r7, [r0], -r5, ror #6
    2398:	74636172 	strbtvc	r6, [r3], #-370	; 0xfffffe8e
    239c:	71657246 	cmnvc	r5, r6, asr #4
    23a0:	65727000 	ldrbvs	r7, [r2, #-0]!
    23a4:	6c616353 	stclvs	3, cr6, [r1], #-332	; 0xfffffeb4
    23a8:	536e0065 	cmnpl	lr, #101	; 0x65
	dispose (b, plugins [b->attributes.b.plugin] ->
    23ac:	74694277 	strbtvc	r4, [r9], #-631	; 0xfffffd89
}
    23b0:	75620073 	strbvc	r0, [r2, #-115]!	; 0xffffff8d
	dispose (b, plugins [b->attributes.b.plugin] ->
    23b4:	704f7973 	subvc	r7, pc, r3, ror r9	; <UNPREDICTABLE>
    23b8:	446f6c00 	strbtmi	r6, [pc], #-3072	; 23c0 <tcv_init>
    23bc:	64697669 	strbtvs	r7, [r9], #-1641	; 0xfffff997
}
    23c0:	73007265 	movwvc	r7, #613	; 0x265
    while(1)
    23c4:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
{
    23c8:	66720064 	ldrbtvs	r0, [r2], -r4, rrx
    SetupTrimDevice();
    23cc:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
    pui32Src = &_etext;
    23d0:	635f6863 	cmpvs	pc, #6488064	; 0x630000
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    23d4:	675f6570 			; <UNDEFINED> instruction: 0x675f6570
    __asm("    ldr     r0, =_bss\n"
    23d8:	73666e65 	cmnvc	r6, #1616	; 0x650
    23dc:	7872006b 	ldmdavc	r2!, {r0, r1, r3, r5, r6}^
    23e0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    23e4:	6f4e6200 	svcvs	0x004e6200
    23e8:	6f507346 	svcvs	0x00507346
   main();
    23ec:	55726577 	ldrbpl	r6, [r2, #-1399]!	; 0xfffffa89
    FaultISR();
    23f0:	524f0070 	subpl	r0, pc, #112	; 0x70
        *pui32Dest++ = *pui32Src++;
    23f4:	746e7645 	strbtvc	r7, [lr], #-1605	; 0xfffff9bb
    23f8:	73466200 	movtvc	r6, #25088	; 0x6200
    23fc:	4266664f 	rsbmi	r6, r6, #82837504	; 0x4f00000
    2400:	00797375 	rsbseq	r7, r9, r5, ror r3
    2404:	74617276 	strbtvc	r7, [r1], #-630	; 0xfffffd8a
    2408:	78740065 	ldmdavc	r4!, {r0, r2, r5, r6}^
    240c:	65697274 	strbvs	r7, [r9, #-628]!	; 0xfffffd8c
    2410:	4d620073 	stclmi	0, cr0, [r2, #-460]!	; 0xfffffe34
static byte get_byte () {
    2414:	69466273 	stmdbvs	r6, {r0, r1, r4, r5, r6, r9, sp, lr}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2418:	00747372 	rsbseq	r7, r4, r2, ror r3
    241c:	645f7872 	ldrbvs	r7, [pc], #-2162	; 2424 <get_byte+0x10>
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2420:	78720065 	ldmdavc	r2!, {r0, r2, r5, r6}^
    2424:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
		if (ee_inp)
    2428:	616e655f 	cmnvs	lr, pc, asr r5
			b |= 1;
    242c:	00656c62 	rsbeq	r6, r5, r2, ror #24
    2430:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2434:	30737365 	rsbscc	r7, r3, r5, ror #6
	for (b = 0, i = 0; i < 8; i++) {
    2438:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
}
    243c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    2440:	66720031 			; <UNDEFINED> instruction: 0x66720031
    2444:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
static void put_byte (byte b) {
    2448:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    244c:	525f504f 	subspl	r5, pc, #79	; 0x4f
    2450:	4f494441 	svcmi	0x00494441
    2454:	5649445f 			; <UNDEFINED> instruction: 0x5649445f
		if (b & 0x80)
    2458:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    245c:	735f5055 	cmpvc	pc, #85	; 0x55
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2460:	63667200 	cmnvs	r6, #0, 4
	for (i = 0; i < 8; i++) {
    2464:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
		b <<= 1;
    2468:	4f52505f 	svcmi	0x0052505f
	for (i = 0; i < 8; i++) {
    246c:	41525f50 	cmpmi	r2, r0, asr pc
}
    2470:	5f4f4944 	svcpl	0x004f4944
    2474:	5f564944 	svcpl	0x00564944
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2478:	55544553 	ldrbpl	r4, [r4, #-1363]	; 0xfffffaad
    247c:	00745f50 	rsbseq	r5, r4, r0, asr pc
	put_byte (cmd);
    2480:	5f636672 	svcpl	0x00636672
    2484:	5f444d43 	svcpl	0x00444d43
}
    2488:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    248c:	5f58525f 	svcpl	0x0058525f
static void wwait (word st, word del) {
    2490:	61700074 	cmnvs	r0, r4, ror r0
    2494:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    2498:	526e0065 	rsbpl	r0, lr, #101	; 0x65
	while (dopen && (rdsr () & 1)) {
    249c:	6f745378 	svcvs	0x00745378
    24a0:	64657070 	strbtvs	r7, [r5], #-112	; 0xffffff90
    24a4:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
    24a8:	69737352 	ldmdbvs	r3!, {r1, r4, r6, r8, r9, ip, sp, lr}^
	put_byte (CMD_RDSR);
    24ac:	656c6449 	strbvs	r6, [ip, #-1097]!	; 0xfffffbb7
	r = get_byte ();
    24b0:	74617200 	strbtvc	r7, [r1], #-512	; 0xfffffe00
    24b4:	726f5765 	rsbvc	r5, pc, #26476544	; 0x1940000
	while (dopen && (rdsr () & 1)) {
    24b8:	78720064 	ldmdavc	r2!, {r2, r5, r6}^
}
    24bc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
		if (st == WNONE)
    24c0:	65527000 	ldrbvs	r7, [r2, #-0]
    24c4:	65764f67 	ldrbvs	r4, [r6, #-3943]!	; 0xfffff099
			mdelay (1);
    24c8:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
    24cc:	61720065 	cmnvs	r2, r5, rrx
			delay (del, st);
    24d0:	5f726d74 	svcpl	0x00726d74
    24d4:	41620074 	smcmi	8196	; 0x2004
			release;
    24d8:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
    24dc:	73735264 	cmnvc	r3, #100, 4	; 0x40000006
    24e0:	66720069 	ldrbtvs	r0, [r2], -r9, rrx
static void ready () {
    24e4:	72705f63 	rsbsvc	r5, r0, #396	; 0x18c
	if (dopen) {
    24e8:	7852706f 	ldmdavc	r2, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
		wwait (WNONE, 1);
    24ec:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    24f0:	735f7475 	cmpvc	pc, #1962934272	; 0x75000000
    24f4:	63667200 	cmnvs	r6, #0, 4
	dstat = 0;
    24f8:	6f72705f 	svcvs	0x0072705f
}
    24fc:	4f785270 	svcmi	0x00785270
    2500:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    2504:	00745f74 	rsbseq	r5, r4, r4, ror pc
	udelay (1);
    2508:	43434652 	movtmi	r4, #13906	; 0x3652
    250c:	6b636f6c 	blvs	18de2c4 <__ccfg+0x18be31c>
	udelay (1);
    2510:	61736944 	cmnvs	r3, r4, asr #18
		dopen = DOPEN_TEMP;
    2514:	00656c62 	rsbeq	r6, r5, r2, ror #24
    2518:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    251c:	79536769 	ldmdbvc	r3, {r0, r3, r5, r6, r8, r9, sl, sp, lr}^
    2520:	0068746e 	rsbeq	r7, r8, lr, ror #8
static void cclose () {
    2524:	6f637874 	svcvs	0x00637874
	if (dopen == DOPEN_TEMP) {
    2528:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
    252c:	656c0072 	strbvs	r0, [ip, #-114]!	; 0xffffff8e
		wwait (WNONE, 1);
    2530:	007a536e 	rsbseq	r5, sl, lr, ror #6
    2534:	5f636672 	svcpl	0x00636672
	cmd_0 (CMD_DP);
    2538:	69646172 	stmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    253c:	5f704f6f 	svcpl	0x00704f6f
		dopen = 0;
    2540:	52620073 	rsbpl	r0, r2, #115	; 0x73
}
    2544:	61657065 	cmnvs	r5, r5, rrx
word ee_open () {
    2548:	6b6f4e74 	blvs	1bd5f20 <__ccfg+0x1bb5f78>
	ready ();
    254c:	6c696600 	stclvs	6, cr6, [r9], #-0
	dopen = DOPEN_PERM;
    2550:	4f726574 	svcmi	0x00726574
    2554:	66720070 			; <UNDEFINED> instruction: 0x66720070
}
    2558:	61645f63 	cmnvs	r4, r3, ror #30
	if (dopen) {
    255c:	6e456174 	mcrvs	1, 2, r6, cr5, cr4, {3}
    2560:	47797274 			; <UNDEFINED> instruction: 0x47797274
		dopen = DOPEN_TEMP;
    2564:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
		cclose ();
    2568:	735f6c61 	cmpvc	pc, #24832	; 0x6100
}
    256c:	63667200 	cmnvs	r6, #0, 4
int ser_out (word st, const char *m) {
    2570:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
	if ((prcs = running (__outserial)) != 0) {
    2574:	746e4561 	strbtvc	r4, [lr], #-1377	; 0xfffffa9f
    2578:	65477972 	strbvs	r7, [r7, #-2418]	; 0xfffff68e
    257c:	6172656e 	cmnvs	r2, lr, ror #10
		join (prcs, st);
    2580:	00745f6c 	rsbseq	r5, r4, ip, ror #30
		release;
    2584:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
	if (*m)
    2588:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
		prcs = strlen (m) +1;
    258c:	6566725f 	strbvs	r7, [r6, #-607]!	; 0xfffffda1
    2590:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    2594:	006b7366 	rsbeq	r7, fp, r6, ror #6
    2598:	4f78526e 	svcmi	0x0078526e
    259c:	5252006b 	subspl	r0, r2, #107	; 0x6b
		umwait (st);
    25a0:	5f007465 	svcpl	0x00007465
    25a4:	6d75645f 	cfldrdvs	mvd6, [r5, #-380]!	; 0xfffffe84
		prcs =  m [1] + 3;
    25a8:	0031796d 	eorseq	r7, r1, sp, ror #18
	if (*m)
    25ac:	75645f5f 	strbvc	r5, [r4, #-3935]!	; 0xfffff0a1
		strcpy (buf, m);
    25b0:	32796d6d 	rsbscc	r6, r9, #6976	; 0x1b40
    25b4:	645f5f00 	ldrbvs	r5, [pc], #-3840	; 25bc <ser_out+0x4c>
	if (runstrand (__outserial, buf) == 0) {
    25b8:	796d6d75 	stmdbvc	sp!, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    25bc:	496e0033 	stmdbmi	lr!, {r0, r1, r4, r5}^
		ufree (buf);
    25c0:	61726574 	cmnvs	r2, r4, ror r5
    25c4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
		memcpy (buf, m, prcs);
    25c8:	6b700073 	blvs	1c0279c <__ccfg+0x1be27f4>
    25cc:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    25d0:	6c757200 	lfmvs	f7, 2, [r5], #-0
}
    25d4:	46520065 	ldrbmi	r0, [r2], -r5, rrx
    25d8:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
int ser_in (word st, char *buf, int len) {
    25dc:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
    25e0:	52007852 	andpl	r7, r0, #5373952	; 0x520000
	if (len == 0)
    25e4:	50434346 	subpl	r4, r3, r6, asr #6
	if (__inpline == NULL) {
    25e8:	6e493045 	cdpvs	0, 4, cr3, cr9, cr5, {2}
		if ((prcs = running (__inserial)) == 0) {
    25ec:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
    25f0:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
			prcs = runthread (__inserial);
    25f4:	76726400 	ldrbtvc	r6, [r2], -r0, lsl #8
    25f8:	73637270 	cmnvc	r3, #112, 4
			if (prcs == 0) {
    25fc:	72506e00 	subsvc	r6, r0, #0, 28
				npwait (st);
    2600:	426d6165 	rsbmi	r6, sp, #1073741849	; 0x40000019
		release;
    2604:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
		join (prcs, st);
    2608:	6b636200 	blvs	18dae10 <__ccfg+0x18bae68>
    260c:	69745f66 	ldmdbvs	r4!, {r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
	if (*__inpline == NULL) // bin cmd
    2610:	0072656d 	rsbseq	r6, r2, sp, ror #10
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2614:	5f636672 	svcpl	0x00636672
	if (prcs >= len)
    2618:	5f444d43 	svcpl	0x00444d43
		prcs = len-1;
    261c:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
	memcpy (buf, __inpline, prcs);
    2620:	5f58545f 	svcpl	0x0058545f
    2624:	66720074 			; <UNDEFINED> instruction: 0x66720074
    2628:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
	ufree (__inpline);
    262c:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
	__inpline = NULL;
    2630:	545f504f 	ldrbpl	r5, [pc], #-79	; 2638 <ser_in+0x5c>
	if (*buf) // if it's NULL, it's a bin cmd
    2634:	00735f58 	rsbseq	r5, r3, r8, asr pc
		buf [prcs] = '\0';
    2638:	656c6469 	strbvs	r6, [ip, #-1129]!	; 0xfffffb97
}
    263c:	6600704f 	strvs	r7, [r0], -pc, asr #32
		prcs = strlen (__inpline);
    2640:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    2644:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
		return 0;
    2648:	61507000 	cmpvs	r0, r0
    264c:	54686374 	strbtpl	r6, [r8], #-884	; 0xfffffc8c
    2650:	63006261 	movwvs	r6, #609	; 0x261
int ser_outf (word st, const char *m, ...) {
    2654:	43734673 	cmnmi	r3, #120586240	; 0x7300000
    2658:	00666e6f 	rsbeq	r6, r6, pc, ror #28
	if ((prcs = running (__outserial)) != 0) {
    265c:	5f646d63 	svcpl	0x00646d63
    2660:	00747273 	rsbseq	r7, r4, r3, ror r2
		join (prcs, st);
    2664:	4f734662 	svcmi	0x00734662
    2668:	63006666 	movwvs	r6, #1638	; 0x666
		release;
    266c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2670:	73694d67 	cmnvc	r9, #6592	; 0x19c0
    2674:	63644163 	cmnvs	r4, #-1073741800	; 0xc0000018
    2678:	646e6500 	strbtvs	r6, [lr], #-1280	; 0xfffffb00
		umwait (st);
    267c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2680:	68436200 	stmdavs	r3, {r9, sp, lr}^
	if (runstrand (__outserial, buf) == 0) {
    2684:	6464416b 	strbtvs	r4, [r4], #-363	; 0xfffffe95
    2688:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    268c:	746e6500 	strbtvc	r6, [lr], #-1280	; 0xfffffb00
		ufree (buf);
    2690:	65477265 	strbvs	r7, [r7, #-613]	; 0xfffffd9b
		npwait (st);
    2694:	6b73666e 	blvs	1cdc054 <__ccfg+0x1cbc0ac>
}
    2698:	50657043 	rsbpl	r7, r5, r3, asr #32
    269c:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    26a0:	63667200 	cmnvs	r6, #0, 4
    26a4:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
int ser_inf (word st, const char *fmt, ...) {
    26a8:	4e59535f 	mrcmi	3, 2, r5, cr9, cr15, {2}
    26ac:	54535f43 	ldrbpl	r5, [r3], #-3907	; 0xfffff0bd
	if (fmt == NULL)
    26b0:	5f545241 	svcpl	0x00545241
	if (__inpline == NULL) {
    26b4:	5f544152 	svcpl	0x00544152
		if ((prcs = running (__inserial)) == 0) {
    26b8:	66720073 			; <UNDEFINED> instruction: 0x66720073
    26bc:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
			prcs = runthread (__inserial);
    26c0:	59535f44 	ldmdbpl	r3, {r2, r6, r8, r9, sl, fp, ip, lr}^
    26c4:	535f434e 	cmppl	pc, #939524097	; 0x38000001
			if (prcs == 0) {
    26c8:	54524154 	ldrbpl	r4, [r2], #-340	; 0xfffffeac
				npwait (st);
    26cc:	5441525f 	strbpl	r5, [r1], #-607	; 0xfffffda1
		release;
    26d0:	7000745f 	andvc	r7, r0, pc, asr r4
		join (prcs, st);
    26d4:	656c7961 	strbvs	r7, [ip, #-2401]!	; 0xfffff69f
    26d8:	756e006e 	strbvc	r0, [lr, #-110]!	; 0xffffff92
	va_start (ap, fmt);
    26dc:	7373526d 	cmnvc	r3, #-805306362	; 0xd0000006
	prcs = vscan (__inpline, fmt, ap);
    26e0:	73754269 	cmnvc	r5, #-1879048186	; 0x90000006
    26e4:	73740079 	cmnvc	r4, #121	; 0x79
	ufree (__inpline);
    26e8:	00746174 	rsbseq	r6, r4, r4, ror r1
	__inpline = NULL;
    26ec:	65735562 	ldrbvs	r5, [r3, #-1378]!	; 0xfffffa9e
}
    26f0:	00637243 	rsbeq	r7, r3, r3, asr #4
    26f4:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
    26f8:	6e654772 	mcrvs	7, 3, r4, cr5, cr2, {3}
		return 0;
    26fc:	536b7366 	cmnpl	fp, #-1744830463	; 0x98000001
    2700:	61507379 	cmpvs	r0, r9, ror r3
    2704:	00686374 	rsbeq	r6, r8, r4, ror r3
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2708:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    270c:	6f697461 	svcvs	0x00697461
    2710:	7363006e 	cmnvc	r3, #110	; 0x6e
	RF_cmdFs.frequency = 
    2714:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
}
    2718:	74616400 	strbtvc	r6, [r1], #-1024	; 0xfffffc00
    271c:	65755161 	ldrbvs	r5, [r5, #-353]!	; 0xfffffe9f
    2720:	745f6575 	ldrbvc	r6, [pc], #-1397	; 2728 <option>
    2724:	6b536e00 	blvs	14ddf2c <__ccfg+0x14bdf84>
static int option (int opt, address val) {
    2728:	70007069 	andvc	r7, r0, r9, rrx
    272c:	69737968 	ldmdbvs	r3!, {r3, r5, r6, r8, fp, ip, sp, lr}^
    2730:	46520064 	ldrbmi	r0, [r2], -r4, rrx
    2734:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    2738:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
    273c:	72007854 	andvc	r7, r0, #84, 16	; 0x540000
    2740:	72466665 	subvc	r6, r6, #105906176	; 0x6500000
    2744:	52007165 	andpl	r7, r0, #1073741849	; 0x40000019
    2748:	6c434346 	mcrrvs	3, 4, r4, r3, cr6
    274c:	456b636f 	strbmi	r6, [fp, #-879]!	; 0xfffffc91
    2750:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    2754:	72740065 	rsbsvc	r0, r4, #101	; 0x65
    2758:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
			goto RVal;
    275c:	70795472 	rsbsvc	r5, r9, r2, ror r4
			_BIS (dstate, DSTATE_RXON);
    2760:	544b0065 	strbpl	r0, [fp], #-101	; 0xffffff9b
    2764:	702f504d 	eorvc	r5, pc, sp, asr #32
	int ret = 0;
    2768:	5f67756c 	svcpl	0x0067756c
			p_trigger (drvprcs, qevent);
    276c:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
    2770:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
    2774:	6f5f7663 	svcvs	0x005f7663
    2778:	6e5f7475 	mrcvs	4, 2, r7, cr15, cr5, {3}
    277c:	006c6c75 	rsbeq	r6, ip, r5, ror ip
    2780:	5f766374 	svcpl	0x00766374
    2784:	5f766372 	svcpl	0x00766372
    2788:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
    278c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    2790:	65706f5f 	ldrbvs	r6, [r0, #-3935]!	; 0xfffff0a1
}
    2794:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
			_BIC (dstate, DSTATE_RXON);
    2798:	6374006c 	cmnvs	r4, #108	; 0x6c
    279c:	72665f76 	rsbvc	r5, r6, #472	; 0x1d8
			statid = (val == NULL) ? 0 : *val;
    27a0:	756e5f6d 	strbvc	r5, [lr, #-3949]!	; 0xfffff093
    27a4:	74006c6c 	strvc	r6, [r0], #-3180	; 0xfffff394
	int ret = 0;
    27a8:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
			ret = (int) statid;
    27ac:	6e5f6f6c 	cdpvs	15, 5, cr6, cr15, cr12, {3}
	if (val != NULL)
    27b0:	006c6c75 	rsbeq	r6, ip, r5, ror ip
		*val = ret;
    27b4:	5f766374 	svcpl	0x00766374
			ret = rbuffl + 2;
    27b8:	5f746d78 	svcpl	0x00746d78
    27bc:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
			if (val != NULL) {
    27c0:	756f6200 	strbvc	r6, [pc, #-512]!	; 25c8 <ser_out+0x58>
				memcpy (val, &rxstat,
    27c4:	0073646e 	rsbseq	r6, r3, lr, ror #8
    27c8:	6373646e 	cmnvs	r3, #1845493760	; 0x6e000000
				memset (&rxstat, 0, 
    27cc:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    27d0:	7571006c 	ldrbvc	r0, [r1, #-108]!	; 0xffffff94
			if (val == NULL)
    27d4:	00746e61 	rsbseq	r6, r4, r1, ror #28
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    27d8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2724 <plugch+0x1c>
    27dc:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
				utimer_set (bckf_timer, *val);
    27e0:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    27e4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    27e8:	6f746b73 	svcvs	0x00746b73
			for (ret = 0; ret < 8; ret++)
    27ec:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
				if (RF_cmdPropRadioDivSetup.txPower
    27f0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
					== patable [ret])
    27f4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
				if (RF_cmdPropRadioDivSetup.txPower
    27f8:	2f534f43 	svccs	0x00534f43
			for (ret = 0; ret < 8; ret++)
    27fc:	4f636950 	svcmi	0x00636950
    2800:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2804:	2f736269 	svccs	0x00736269
    2808:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    280c:	5f2f6c61 	svcpl	0x002f6c61
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2810:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    2814:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
			_BIS (dstate, DSTATE_IRST);
    2818:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
    281c:	6f5f5f00 	svcvs	0x005f5f00
    2820:	65737475 	ldrbvs	r7, [r3, #-1141]!	; 0xfffffb8b
			ret = (int) channel;
    2824:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
			goto RVal;
    2828:	4f5f5f00 	svcmi	0x005f5f00
				(*val > 7) ? 7 : *val;
    282c:	52575f4d 	subspl	r5, r7, #308	; 0x134
    2830:	00455449 	subeq	r5, r5, r9, asr #8
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2834:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    2838:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
			plugch ();
    283c:	2f006c61 	svccs	0x00006c61
			_BIS (dstate, DSTATE_IRST);
    2840:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    2844:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
			ret = (int) vrate;
    2848:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    284c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2850:	706f746b 	rsbvc	r7, pc, fp, ror #8
    2854:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    2858:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    285c:	4349502f 	movtmi	r5, #36911	; 0x902f
    2860:	502f534f 	eorpl	r5, pc, pc, asr #6
    2864:	534f6369 	movtpl	r6, #62313	; 0xf369
    2868:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    286c:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    2870:	61697265 	cmnvs	r9, r5, ror #4
    2874:	5f5f2f6c 	svcpl	0x005f2f6c
    2878:	65736e69 	ldrbvs	r6, [r3, #-3689]!	; 0xfffff197
			syserror (EREQPAR, "cc13 op");
    287c:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    2880:	2f00632e 	svccs	0x0000632e
    2884:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    2888:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    288c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    2890:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2894:	706f746b 	rsbvc	r7, pc, fp, ror #8
    2898:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    289c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    28a0:	4349502f 	movtmi	r5, #36911	; 0x902f
    28a4:	502f534f 	eorpl	r5, pc, pc, asr #6
    28a8:	534f6369 	movtpl	r6, #62313	; 0xf369
    28ac:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    28b0:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    28b4:	61697265 	cmnvs	r9, r5, ror #4
static void issue_cmd (lword cmd) {
    28b8:	66762f6c 	ldrbtvs	r2, [r6], -ip, ror #30
    28bc:	2e6d726f 	cdpcs	2, 6, cr7, cr13, cr15, {3}
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    28c0:	67410063 	strbvs	r0, [r1, -r3, rrx]
    28c4:	006e6961 	rsbeq	r6, lr, r1, ror #18
    28c8:	6374756f 	cmnvs	r4, #465567744	; 0x1bc00000
		if (res != 0x86)
    28cc:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			syserror (EHARDWARE, "hang ic0");
    28d0:	66765f69 	ldrbtvs	r5, [r6], -r9, ror #30
    28d4:	73726170 	cmnvc	r2, #112, 2
		if (cnt-- == 0) {
    28d8:	66760065 	ldrbtvs	r0, [r6], -r5, rrx
			diag ("HUP %lx %lx", cmd, res);
    28dc:	006d726f 	rsbeq	r7, sp, pc, ror #4
    28e0:	72746552 	rsbsvc	r6, r4, #343932928	; 0x14800000
			syserror (EHARDWARE, "hang ic0");
    28e4:	5f645f79 	svcpl	0x00645f79
		udelay (1);
    28e8:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    28ec:	6f682f00 	svcvs	0x00682f00
}
    28f0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    28f4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    28f8:	442f6e65 	strtmi	r6, [pc], #-3685	; 2900 <rx_de>
    28fc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
static void rx_de () {
    2900:	4f2f706f 	svcmi	0x002f706f
	if ((dstate & DSTATE_RXAC) == 0)
    2904:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    2908:	502f5445 	eorpl	r5, pc, r5, asr #8
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    290c:	534f4349 	movtpl	r4, #62281	; 0xf349
	_BIC (dstate, DSTATE_RXAC);
    2910:	6369502f 	cmnvs	r9, #47	; 0x2f
    2914:	502f534f 	eorpl	r5, pc, pc, asr #6
}
    2918:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    291c:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    2920:	2f6c6169 	svccs	0x006c6169
static void rf_off () {
    2924:	61637376 	smcvs	14134	; 0x3736
	if ((dstate & DSTATE_RFON) == 0)
    2928:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    292c:	61637376 	smcvs	14134	; 0x3736
	IntDisable (INT_RFC_CPE_0);
    2930:	6552006e 	ldrbvs	r0, [r2, #-110]	; 0xffffff92
    2934:	5f797274 	svcpl	0x00797274
    2938:	776c5f64 	strbvc	r5, [ip, -r4, ror #30]!
	RFCAdi3VcoLdoVoltageMode (false);
    293c:	0064726f 	rsbeq	r7, r4, pc, ror #4
	RFCSynthPowerDown ();
    2940:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 288c <option+0x164>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2944:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    2948:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    294c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2950:	6f746b73 	svcvs	0x00746b73
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2954:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2958:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    295c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    2960:	2f534f43 	svccs	0x00534f43
	_BIC (dstate, DSTATE_RFON);
    2964:	4f636950 	svcmi	0x00636950
    2968:	43432f53 	movtmi	r2, #16211	; 0x3f53
}
    296c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    2970:	616d732f 	cmnvs	sp, pc, lsr #6
    2974:	66727472 			; <UNDEFINED> instruction: 0x66727472
    2978:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    297c:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2980:	706c5f73 	rsbvc	r5, ip, r3, ror pc
    2984:	2e72685f 	mrccs	8, 3, r6, cr2, cr15, {2}
    2988:	69750063 	ldmdbvs	r5!, {r0, r1, r5, r6}^
		if (cmd->status == tstat)
    298c:	7470746e 	ldrbtvc	r7, [r0], #-1134	; 0xfffffb92
		if (timeout-- == 0) {
    2990:	00745f72 	rsbseq	r5, r4, r2, ror pc
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2994:	65764f70 	ldrbvs	r4, [r6, #-3952]!	; 0xfffff090
    2998:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
    299c:	5f007365 	svcpl	0x00007365
			syserror (EHARDWARE, "rt2");
    29a0:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
    29a4:	5f323374 	svcpl	0x00323374
		udelay (1);
    29a8:	49620074 	stmdbmi	r2!, {r2, r4, r5, r6}^
		if (cmd->status == tstat)
    29ac:	6e457172 	mcrvs	1, 2, r7, cr5, cr2, {3}
}
    29b0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    29b4:	61530064 	cmpvs	r3, r4, rrx
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    29b8:	61486566 	cmpvs	r8, r6, ror #10
    29bc:	75416970 	strbvc	r6, [r1, #-2416]	; 0xfffff690
static void rf_on () {
    29c0:	69644178 	stmdbvs	r4!, {r3, r4, r5, r6, r8, lr}^
    29c4:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
	OSCHF_TurnOnXosc();
    29c8:	46007463 	strmi	r7, [r0], -r3, ror #8
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    29cc:	5f525450 	svcpl	0x00525450
    29d0:	44494f56 	strbmi	r4, [r9], #-3926	; 0xfffff0aa
    29d4:	494f565f 	stmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    29d8:	00545f44 	subseq	r5, r4, r4, asr #30
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    29dc:	4f524f4e 	svcmi	0x00524f4e
    29e0:	50435f4d 	subpl	r5, r3, sp, asr #30
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    29e4:	73706355 	cmnvc	r0, #1409286145	; 0x54000001
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    29e8:	4e006469 	cdpmi	4, 0, cr6, cr0, cr9, {3}
	issue_cmd (
    29ec:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 28b8 <issue_cmd>
    29f0:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    29f4:	69737063 	ldmdbvs	r3!, {r0, r1, r5, r6, ip, sp, lr}^
    29f8:	61530065 	cmpvs	r3, r5, rrx
    29fc:	61486566 	cmpvs	r8, r6, ror #10
   pPatchTab[80] = 0;
    2a00:	6f566970 	svcvs	0x00566970
   } while (--nIterations);
    2a04:	5f006469 	svcpl	0x00006469
   pPatchTab[53] = 2;
    2a08:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
    2a0c:	745f3874 	ldrbvc	r3, [pc], #-2164	; 2a14 <rf_on.part.0+0x5c>
   pPatchTab[55] = 3;
    2a10:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
   pPatchTab[110] = 4;
    2a14:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
   pPatchTab[107] = 5;
    2a18:	2f2e2e2f 	svccs	0x002e2e2f
   pPatchTab[65] = 6;
    2a1c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    2a20:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
   pPatchTab[57] = 1;
    2a24:	64612f62 	strbtvs	r2, [r1], #-3938	; 0xfffff09e
   pIrqPatch[1] = _IRQ_PATCH_0;
    2a28:	00632e69 	rsbeq	r2, r3, r9, ror #28
   const uint32_t *pS = patchGenfskRfe;
    2a2c:	20554e47 	subscs	r4, r5, r7, asr #28
      t2 = *pS++;
    2a30:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
      t4 = *pS++;
    2a34:	20332e39 	eorscs	r2, r3, r9, lsr lr
      t6 = *pS++;
    2a38:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
      t8 = *pS++;
    2a3c:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
      *pD++ = t1;
    2a40:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
      *pD++ = t2;
    2a44:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
      *pD++ = t3;
    2a48:	5b202965 	blpl	80cfe4 <__ccfg+0x7ed03c>
      *pD++ = t5;
    2a4c:	2f4d5241 	svccs	0x004d5241
      *pD++ = t7;
    2a50:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
   } while (--nIterations);
    2a54:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
    2a58:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
      *pD++ = t8;
    2a5c:	6172622d 	cmnvs	r2, sp, lsr #4
   } while (--nIterations);
    2a60:	2068636e 	rsbcs	r6, r8, lr, ror #6
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2a64:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
   *pD++ = t2;
    2a68:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
   *pD++ = t3;
    2a6c:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
   *pD++ = t4;
    2a70:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
   *pD++ = t5;
    2a74:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
    2a78:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
	RFCAdi3VcoLdoVoltageMode (true);
    2a7c:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
    2a80:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
       	RFCRfTrimSet (&rfTrim);
    2a84:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2a88:	336d2d78 	cmncc	sp, #120, 26	; 0x1e00
    2a8c:	20672d20 	rsbcs	r2, r7, r0, lsr #26
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2a90:	20734f2d 	rsbscs	r4, r3, sp, lsr #30
    2a94:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
	issue_cmd ((lword)&cmd_srt);
    2a98:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
    2a9c:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
	issue_cmd ((lword)&RF_cmdFs);
    2aa0:	74732d6f 	ldrbtvc	r2, [r3], #-3439	; 0xfffff291
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2aa4:	74636972 	strbtvc	r6, [r3], #-2418	; 0xfffff68e
    2aa8:	696c612d 	stmdbvs	ip!, {r0, r2, r3, r5, r8, sp, lr}^
    2aac:	6e697361 	cdpvs	3, 6, cr7, cr9, cr1, {3}
	IntEnable (INT_RFC_CPE_0);
    2ab0:	662d2067 	strtvs	r2, [sp], -r7, rrx
	_BIC (dstate, DSTATE_IRST);
    2ab4:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
    2ab8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    2abc:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2ac0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2ac4:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
	IntEnable (INT_RFC_CPE_0);
    2ac8:	61746164 	cmnvs	r4, r4, ror #2
    2acc:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
}
    2ad0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	IntEnable (INT_RFC_CPE_0);
    2ad4:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
    2ad8:	006d7361 	rsbeq	r7, sp, r1, ror #6
    2adc:	72745066 	rsbsvc	r5, r4, #102	; 0x66
    2ae0:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2ae4:	4f565f52 	svcmi	0x00565f52
    2ae8:	555f4449 	ldrbpl	r4, [pc, #-1097]	; 26a7 <ser_outf+0x53>
    2aec:	38544e49 	ldmdacc	r4, {r0, r3, r6, r9, sl, fp, lr}^
    2af0:	4300545f 	movwmi	r5, #1119	; 0x45f
    2af4:	654a5c3a 	strbvs	r5, [sl, #-3130]	; 0xfffff3c6
    2af8:	6e696b6e 	vnmulvs.f64	d22, d9, d30
    2afc:	6f6a5c73 	svcvs	0x006a5c73
    2b00:	465c7362 	ldrbmi	r7, [ip], -r2, ror #6
    2b04:	6f724757 	svcvs	0x00724757
    2b08:	442d7075 	strtmi	r7, [sp], #-117	; 0xffffff8b
    2b0c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2b10:	62694c72 	rsbvs	r4, r9, #29184	; 0x7200
    2b14:	726f775c 	rsbvc	r7, pc, #92, 14	; 0x1700000
    2b18:	6170736b 	cmnvs	r0, fp, ror #6
    2b1c:	6d5c6563 	cfldr64vs	mvdx6, [ip, #-396]	; 0xfffffe74
    2b20:	6c75646f 	cfldrdvs	mvd6, [r5], #-444	; 0xfffffe44
    2b24:	6f5c7365 	svcvs	0x005c7365
    2b28:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    2b2c:	63635c74 	cmnvs	r3, #116, 24	; 0x7400
    2b30:	78783331 	ldmdavc	r8!, {r0, r4, r5, r8, r9, ip, sp}^
    2b34:	6168635f 	cmnvs	r8, pc, asr r3
static void rx_int_enable () {
    2b38:	305f325f 	subscc	r3, pc, pc, asr r2	; <UNPREDICTABLE>
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2b3c:	7478655f 	ldrbtvc	r6, [r8], #-1375	; 0xfffffaa1
    2b40:	6972645c 	ldmdbvs	r2!, {r2, r3, r4, r6, sl, sp, lr}^
    2b44:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    2b48:	625c6269 	subsvs	r6, ip, #-1879048186	; 0x90000006
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2b4c:	675c6e69 	ldrbvs	r6, [ip, -r9, ror #28]
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2b50:	75006363 	strvc	r6, [r0, #-867]	; 0xfffffc9d
    2b54:	69533874 	ldmdbvs	r3, {r2, r4, r5, r6, fp, ip, sp}^
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2b58:	6c616e67 	stclvs	14, cr6, [r1], #-412	; 0xfffffe64
    2b5c:	524f4e00 	subpl	r4, pc, #0, 28
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2b60:	415f4d4f 	cmpmi	pc, pc, asr #26
    2b64:	61424e4f 	cmpvs	r2, pc, asr #28
    2b68:	6e6f4d74 	mcrvs	13, 3, r4, cr15, cr4, {3}
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2b6c:	706d6554 	rsbvc	r6, sp, r4, asr r5
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2b70:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2b74:	47657275 			; <UNDEFINED> instruction: 0x47657275
		if (db->status == DATA_ENTRY_FINISHED) {
    2b78:	65447465 	strbvs	r7, [r4, #-1125]	; 0xfffffb9b
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2b7c:	76004367 	strvc	r4, [r0], -r7, ror #6
    2b80:	61746c6f 	cmnvs	r4, pc, ror #24
			nr++;
    2b84:	6c536567 	cfldr64vs	mvdx6, [r3], {103}	; 0x67
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2b88:	0065706f 	rsbeq	r7, r5, pc, rrx
    2b8c:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    2b90:	5f323374 	svcpl	0x00323374
    2b94:	5f5f0074 	svcpl	0x005f0074
				__dp [pl + 1] = __dp [pl] - 128;
    2b98:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
				pl = __dp [1] + 2;
    2b9c:	2e00745f 	cfmvsrcs	mvf0, r7
				__dp [pl + 1] = __dp [pl] - 128;
    2ba0:	2f2e2e2f 	svccs	0x002e2e2f
    2ba4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
				__dp [pl] = 0;
    2ba8:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2bac:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2bb0:	2f62696c 	svccs	0x0062696c
    2bb4:	5f6e6f61 	svcpl	0x006e6f61
			db->status = DATA_ENTRY_PENDING;
    2bb8:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2bbc:	632e6e6f 			; <UNDEFINED> instruction: 0x632e6e6f
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2bc0:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
				diag ("BAD RX");
    2bc4:	726f4370 	rsbvc	r4, pc, #112, 6	; 0xc0000001
    2bc8:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
	if (nr) {
    2bcc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2bd0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
}
    2bd4:	65546465 	ldrbvs	r6, [r4, #-1125]	; 0xfffffb9b
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2bd8:	7200706d 	andvc	r7, r0, #109	; 0x6d
    2bdc:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
    2be0:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
}
    2be4:	75006575 	strvc	r6, [r0, #-1397]	; 0xfffffa8b
    2be8:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
    2bec:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    2bf0:	6553746e 	ldrbvs	r7, [r3, #-1134]	; 0xfffffb92
    2bf4:	4f4e0063 	svcmi	0x004e0063
    2bf8:	5f4d4f52 	svcpl	0x004d4f52
    2bfc:	524e4f41 	subpl	r4, lr, #260	; 0x104
    2c00:	75434354 	strbvc	r4, [r3, #-852]	; 0xfffffcac
    2c04:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
thread (cc1350_driver)
    2c08:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 2a40 <rf_on.part.0+0x88>
    2c0c:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
    2c10:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    2c14:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
    2c18:	33697500 	cmncc	r9, #0, 10
		if (dstate & DSTATE_IRST) {
    2c1c:	63655332 	cmnvs	r5, #-939524096	; 0xc8000000
    2c20:	53646e6f 	cmnpl	r4, #1776	; 0x6f0
    2c24:	65526365 	ldrbvs	r6, [r2, #-869]	; 0xfffffc9b
			rf_off ();
    2c28:	5f006461 	svcpl	0x00006461
			_BIC (dstate,
    2c2c:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
    2c30:	5f343674 	svcpl	0x00343674
		if (dstate & DSTATE_RXAC) {
    2c34:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
    2c38:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
			if ((dstate & DSTATE_RXON) == 0)
    2c3c:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
				rx_de ();
    2c40:	62755374 	rsbsvs	r5, r5, #116, 6	; 0xd0000001
		if (paylen == 0) {
    2c44:	00636553 	rsbeq	r6, r3, r3, asr r5
    2c48:	4f524f4e 	svcmi	0x00524f4e
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2c4c:	4f415f4d 	svcmi	0x00415f4d
    2c50:	4354524e 	cmpmi	r4, #-536870908	; 0xe0000004
    2c54:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    2c58:	36746e65 	ldrbtcc	r6, [r4], -r5, ror #28
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2c5c:	74694234 	strbtvc	r4, [r9], #-564	; 0xfffffdcc
    2c60:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    2c64:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
    2c68:	72756300 	rsbsvc	r6, r5, #0, 6
    2c6c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    2c70:	00637452 	rsbeq	r7, r3, r2, asr r4
    2c74:	41636573 	smcmi	13907	; 0x3653
    2c78:	7553646e 	ldrbvc	r6, [r3, #-1134]	; 0xfffffb92
		} else if (dstate & DSTATE_RXON) {
    2c7c:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
	if (dstate & DSTATE_RFON)
    2c80:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2c84:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
		re->status = DATA_ENTRY_PENDING;
    2c88:	2f2e2e2f 	svccs	0x002e2e2f
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2c8c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
	issue_cmd ((lword)&RF_cmdPropRx);
    2c90:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
	_BIS (dstate, DSTATE_RXAC);
    2c94:	6f612f62 	svcvs	0x00612f62
    2c98:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
    2c9c:	00632e63 	rsbeq	r2, r3, r3, ror #28
    2ca0:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
	if (dstate & DSTATE_RXAC)
    2ca4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    2ca8:	524f4e00 	subpl	r4, pc, #0, 28
				if (statid != 0xffff)
    2cac:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    2cb0:	61625550 	cmnvs	r2, r0, asr r5
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2cb4:	72706573 	rsbsvc	r6, r0, #482344960	; 0x1cc00000
				RF_cmdPropTx.pktLen = (byte) paylen;
    2cb8:	74654769 	strbtvc	r4, [r5], #-1897	; 0xfffff897
		if (paylen == 0) {
    2cbc:	524f4e00 	subpl	r4, pc, #0, 28
			wait (qevent, DR_LOOP);
    2cc0:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    2cc4:	65645550 	strbvs	r5, [r4, #-1360]!	; 0xfffffab0
			if (dstate & DSTATE_RXAC) {
    2cc8:	0079616c 	rsbseq	r6, r9, ip, ror #2
    2ccc:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
				rx_int_enable ();
    2cd0:	00746552 	rsbseq	r6, r4, r2, asr r5
			release;
    2cd4:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
			} else if (dstate & DSTATE_RFON) {
    2cd8:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
				delay (offdelay, DR_GOOF);
    2cdc:	2f2e0074 	svccs	0x002e0074
    2ce0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2ce4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
		if (bckf_timer) {
    2ce8:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
			wait (qevent, DR_LOOP);
    2cec:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    2cf0:	632f6269 			; <UNDEFINED> instruction: 0x632f6269
    2cf4:	632e7570 			; <UNDEFINED> instruction: 0x632e7570
			delay (bckf_timer, DR_LOOP);
    2cf8:	524f4e00 	subpl	r4, pc, #0, 28
    2cfc:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
			if (dstate & DSTATE_RXAC)
    2d00:	72705550 	rsbsvc	r5, r0, #80, 10	; 0x14000000
    2d04:	73616d69 	cmnvc	r1, #6720	; 0x1a40
	if (dstate & DSTATE_RFON)
    2d08:	4f4e006b 	svcmi	0x004e006b
    2d0c:	5f4d4f52 	svcpl	0x004d4f52
		rx_de ();
    2d10:	4343534f 	movtmi	r5, #13135	; 0x334f
		RF_cmdPropTx . status = 0;
    2d14:	6b636f6c 	blvs	18deacc <__ccfg+0x18beb24>
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2d18:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2d1c:	65536563 	ldrbvs	r6, [r3, #-1379]	; 0xfffffa9d
    2d20:	50460074 	subpl	r0, r6, r4, ror r0
		issue_cmd ((lword)&cmd_cs);
    2d24:	465f5254 			; <UNDEFINED> instruction: 0x465f5254
		if (dstate & DSTATE_IRST)
    2d28:	4354454c 	cmpmi	r4, #76, 10	; 0x13000000
    2d2c:	33524548 	cmpcc	r2, #72, 10	; 0x12000000
    2d30:	00545f32 	subseq	r5, r4, r2, lsr pc
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2d34:	52545046 	subspl	r5, r4, #70	; 0x46
    2d38:	4454535f 	ldrbmi	r5, [r4], #-863	; 0xfffffca1
			delay (1, DR_XMIT);
    2d3c:	4c415644 	mcrrmi	6, 4, r5, r1, cr4
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2d40:	4e00545f 	cfmvsrmi	mvf0, r5
    2d44:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2c10 <cc1350_driver+0x8>
    2d48:	43534f5f 	cmpmi	r3, #380	; 0x17c
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2d4c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2d50:	756f536b 	strbvc	r5, [pc, #-875]!	; 29ed <rf_on.part.0+0x35>
				RF_cmdPropTx . status = 0;
    2d54:	47656372 			; <UNDEFINED> instruction: 0x47656372
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2d58:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
				issue_cmd ((lword)&RF_cmdPropTx);
    2d5c:	4f323369 	svcmi	0x00323369
				proceed (DR_XMIT);
    2d60:	53006373 	movwpl	r6, #883	; 0x373
    2d64:	63656c65 	cmnvs	r5, #25856	; 0x6500
			txtries++;
    2d68:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 2ba0 <rx_int_enable+0x68>
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2d6c:	65524270 	ldrbvs	r4, [r2, #-624]	; 0xfffffd90
    2d70:	50460066 	subpl	r0, r6, r6, rrx
    2d74:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2d78:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
		goto DR_LOOP__;
    2d7c:	34444556 	strbcc	r4, [r4], #-1366	; 0xfffffaaa
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2d80:	7400545f 	strvc	r5, [r0], #-1119	; 0xfffffba1
		paylen = 0;
    2d84:	58656d69 	stmdapl	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2d88:	4f63736f 	svcmi	0x0063736f
		txtries = 0;
    2d8c:	56435f6e 	strbpl	r5, [r3], -lr, ror #30
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2d90:	524f4e00 	subpl	r4, pc, #0, 28
    2d94:	4f5f4d4f 	svcmi	0x005f4d4f
    2d98:	46484353 			; <UNDEFINED> instruction: 0x46484353
    2d9c:	7474415f 	ldrbtvc	r4, [r4], #-351	; 0xfffffea1
    2da0:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xfffff29b
		    tcvphy_top (physid) == NULL)
    2da4:	77536f54 			; <UNDEFINED> instruction: 0x77536f54
    2da8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2dac:	6f586f54 	svcvs	0x00586f54
    2db0:	48006373 	stmdami	r0, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
			rf_off ();
    2db4:	756f5346 	strbvc	r5, [pc, #-838]!	; 2a76 <rf_on.part.0+0xbe>
endthread
    2db8:	53656372 	cmnpl	r5, #-939524095	; 0xc8000001
    2dbc:	53656661 	cmnpl	r5, #101711872	; 0x6100000
    2dc0:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    2dc4:	65740068 	ldrbvs	r0, [r4, #-104]!	; 0xffffff98
    2dc8:	6f58706d 	svcvs	0x0058706d
    2dcc:	664f6373 			; <UNDEFINED> instruction: 0x664f6373
    2dd0:	656e0066 	strbvs	r0, [lr, #-102]!	; 0xffffff9a
    2dd4:	61745377 	cmnvs	r4, r7, ror r3
    2dd8:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2ddc:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2de0:	73556e49 	cmpvc	r5, #1168	; 0x490
    2de4:	72617000 	rsbvc	r7, r1, #0
    2de8:	31506d61 	cmpcc	r0, r1, ror #26
    2dec:	72617000 	rsbvc	r7, r1, #0
    2df0:	32506d61 	subscc	r6, r0, #6208	; 0x1840
    2df4:	72617000 	rsbvc	r7, r1, #0
void RFCCPE0IntHandler (void) {
    2df8:	33506d61 	cmpcc	r0, #6208	; 0x1840
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2dfc:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 1f04 <tcv_open+0x30>
		_BIS (dstate, DSTATE_IRST);
    2e00:	31746e69 	cmncc	r4, r9, ror #28
    2e04:	00745f36 	rsbseq	r5, r4, r6, lsr pc
    2e08:	52545046 	subspl	r5, r4, #70	; 0x46
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2e0c:	5345525f 	movtpl	r5, #21087	; 0x525f
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2e10:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    2e14:	545f3344 	ldrbpl	r3, [pc], #-836	; 2e1c <RFCCPE0IntHandler+0x24>
	p_trigger (drvprcs, qevent);
    2e18:	65727000 	ldrbvs	r7, [r2, #-0]!
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2e1c:	756f6976 	strbvc	r6, [pc, #-2422]!	; 24ae <wwait+0x1e>
    2e20:	61745373 	cmnvs	r4, r3, ror r3
    2e24:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2e28:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2e2c:	73556e49 	cmpvc	r5, #1168	; 0x490
    2e30:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    2e34:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2e38:	2f2e2e2f 	svccs	0x002e2e2f
    2e3c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    2e40:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
	RISE_N_SHINE;
    2e44:	736f2f62 	cmnvc	pc, #392	; 0x188
    2e48:	00632e63 	rsbeq	r2, r3, r3, ror #28
    2e4c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
}
    2e50:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2e54:	62617453 	rsbvs	r7, r1, #1392508928	; 0x53000000
    2e58:	435f656c 	cmpmi	pc, #108, 10	; 0x1b000000
    2e5c:	65740056 	ldrbvs	r0, [r4, #-86]!	; 0xffffffaa
    2e60:	6544706d 	strbvs	r7, [r4, #-109]	; 0xffffff93
    2e64:	0061746c 	rsbeq	r7, r1, ip, ror #8
void phys_cc1350 (int phy, int mbs) {
    2e68:	54776f6c 	ldrbtpl	r6, [r7], #-3948	; 0xfffff094
	if (rbuffl != 0)
    2e6c:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
    2e70:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xfffff098
		syserror (ETOOMANY, "cc13");
    2e74:	73655200 	cmnvc	r5, #0, 4
		syserror (EREQPAR, "cc13 mb");
    2e78:	65447465 	strbvs	r7, [r4, #-1125]	; 0xfffffb9b
	if (mbs == 0)
    2e7c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2e80:	524f4e00 	subpl	r4, pc, #0, 28
		syserror (EREQPAR, "cc13 mb");
    2e84:	4f5f4d4f 	svcmi	0x005f4d4f
    2e88:	46484353 			; <UNDEFINED> instruction: 0x46484353
	i = 0;
    2e8c:	7275545f 	rsbsvc	r5, r5, #1593835520	; 0x5f000000
	rbuffl = (byte) mbs;
    2e90:	586e4f6e 	stmdapl	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, lr}^
		db->config.type = 0;	// General (data in structure)
    2e94:	0063736f 	rsbeq	r7, r3, pc, ror #6
	rbuffl = (byte) mbs;
    2e98:	52545046 	subspl	r5, r4, #70	; 0x46
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2e9c:	5345525f 	movtpl	r5, #21087	; 0x525f
    2ea0:	45445445 	strbmi	r5, [r4, #-1093]	; 0xfffffbbb
		if (db == NULL)
    2ea4:	00545f56 	subseq	r5, r4, r6, asr pc
			syserror (EMALLOC, "cc13");
    2ea8:	52545046 	subspl	r5, r4, #70	; 0x46
    2eac:	5345525f 	movtpl	r5, #21087	; 0x525f
    2eb0:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
		db->status = DATA_ENTRY_PENDING;
    2eb4:	545f3244 	ldrbpl	r3, [pc], #-580	; 2ebc <phys_cc1350+0x54>
		if (i)
    2eb8:	73655200 	cmnvc	r5, #0, 4
			da->pNextEntry = (byte*) db;
    2ebc:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
		db->length = rbuffl + 2;
    2ec0:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    2ec4:	6f697461 	svcvs	0x00697461
		db->config.type = 0;	// General (data in structure)
    2ec8:	6100336e 	tstvs	r0, lr, ror #6
		db->length = rbuffl + 2;
    2ecc:	6156706d 	cmpvs	r6, sp, rrx
	db->pNextEntry = (byte*) re;
    2ed0:	0065756c 	rsbeq	r7, r5, ip, ror #10
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2ed4:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2ed8:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
	if (rbuffs == NULL)
    2edc:	61636f4c 	cmnvs	r3, ip, asr #30
	rbuffs->pCurrEntry = (byte*) re;
    2ee0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	rbuffs->pLastEntry = NULL;
    2ee4:	4f4e0034 	svcmi	0x004e0034
    2ee8:	5f4d4f52 	svcpl	0x004d4f52
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2eec:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2ef0:	77535f46 	ldrbvc	r5, [r3, -r6, asr #30]
    2ef4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2ef8:	63526f54 	cmpvs	r2, #84, 30	; 0x150
	rbuffl -= 2;
    2efc:	5463734f 	strbtpl	r7, [r3], #-847	; 0xfffffcb1
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f00:	4f6e7275 	svcmi	0x006e7275
	rbuffl -= 2;
    2f04:	6f586666 	svcvs	0x00586666
	physid = phy;
    2f08:	46006373 			; <UNDEFINED> instruction: 0x46006373
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f0c:	5f525450 	svcpl	0x00525450
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f10:	5658414d 	ldrbpl	r4, [r8], -sp, asr #2
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f14:	545f4c41 	ldrbpl	r4, [pc], #-3137	; 2f1c <phys_cc1350+0xb4>
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f18:	6c655300 	stclvs	3, cr5, [r5], #-0
    2f1c:	41746365 	cmnmi	r4, r5, ror #6
	utimer_add (&bckf_timer);
    2f20:	6f434344 	svcvs	0x00434344
	drvprcs = runthread (cc1350_driver);
    2f24:	4942706d 	stmdbmi	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
    2f28:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    2f2c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
	if (drvprcs == 0)
    2f30:	69546174 	ldmdbvs	r4, {r2, r4, r5, r6, r8, sp, lr}^
		syserror (ERESOURCE, "cc13");
    2f34:	4d00656d 	cfstr32mi	mvfx6, [r0, #-436]	; 0xfffffe4c
    2f38:	61567861 	cmpvs	r6, r1, ror #16
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2f3c:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2f40:	4f524f4e 	svcmi	0x00524f4e
    2f44:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2f48:	50485f43 	subpl	r5, r8, r3, asr #30
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2f4c:	5243534f 	subpl	r5, r3, #1006632961	; 0x3c000001
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2f50:	74616c65 	strbtvc	r6, [r1], #-3173	; 0xfffff39b
    2f54:	46657669 	strbtmi	r7, [r5], -r9, ror #12
    2f58:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    2f5c:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2f60:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    2f64:	65477465 	strbvs	r7, [r7, #-1125]	; 0xfffffb9b
    2f68:	4f4e0074 	svcmi	0x004e0074
    2f6c:	5f4d4f52 	svcpl	0x004d4f52
    2f70:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
	plugch ();
    2f74:	65445f46 	strbvs	r5, [r4, #-3910]	; 0xfffff0ba
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2f78:	47677562 	strbmi	r7, [r7, -r2, ror #10]!
    2f7c:	72437465 	subvc	r7, r3, #1694498816	; 0x65000000
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2f80:	61747379 	cmnvs	r4, r9, ror r3
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2f84:	706d416c 	rsbvc	r4, sp, ip, ror #2
    2f88:	7574696c 	ldrbvc	r6, [r4, #-2412]!	; 0xfffff694
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2f8c:	4d006564 	cfstr32mi	mvfx6, [r0, #-400]	; 0xfffffe70
}
    2f90:	566e6165 	strbtpl	r6, [lr], -r5, ror #2
    2f94:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    2f98:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2f9c:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    2fa0:	56524553 			; <UNDEFINED> instruction: 0x56524553
    2fa4:	5f314445 	svcpl	0x00314445
    2fa8:	72430054 	subvc	r0, r3, #84	; 0x54
    2fac:	00323363 	eorseq	r3, r2, r3, ror #6
    2fb0:	74656c46 	strbtvc	r6, [r5], #-3142	; 0xfffff3ba
    2fb4:	72656863 	rsbvc	r6, r5, #6488064	; 0x630000
    2fb8:	47003233 	smladxmi	r0, r3, r2, r3
    2fbc:	68437465 	stmdavs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    2fc0:	64497069 	strbvs	r7, [r9], #-105	; 0xffffff97
    2fc4:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2fc8:	454d5f52 	strbmi	r5, [sp, #-3922]	; 0xfffff0ae
    2fcc:	41564e41 	cmpmi	r6, r1, asr #28
    2fd0:	00545f4c 	subseq	r5, r4, ip, asr #30
    2fd4:	52545046 	subspl	r5, r4, #70	; 0x46
    2fd8:	4344415f 	movtmi	r4, #16735	; 0x415f
    2fdc:	504d4f43 	subpl	r4, sp, r3, asr #30
    2fe0:	5f4e4942 	svcpl	0x004e4942
    2fe4:	50460054 	subpl	r0, r6, r4, asr r0
    2fe8:	435f5254 	cmpmi	pc, #84, 4	; 0x40000005
    2fec:	42504d4f 	subsmi	r4, r0, #5056	; 0x13c0
    2ff0:	5f464552 	svcpl	0x00464552
    2ff4:	65530054 	ldrbvs	r0, [r3, #-84]	; 0xffffffac
    2ff8:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2ffc:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    3000:	706e4941 	rsbvc	r4, lr, r1, asr #18
    3004:	46007475 			; <UNDEFINED> instruction: 0x46007475
    3008:	5f525450 	svcpl	0x00525450
    300c:	504d4f43 	subpl	r4, sp, r3, asr #30
    3010:	5f4e4941 	svcpl	0x004e4941
    3014:	65740054 	ldrbvs	r0, [r4, #-84]!	; 0xffffffac
    3018:	6544706d 	strbvs	r7, [r4, #-109]	; 0xffffff93
    301c:	5861746c 	stmdapl	r1!, {r2, r3, r5, r6, sl, ip, sp, lr}^
    3020:	736f0032 	cmnvc	pc, #50	; 0x32
    3024:	47664863 	strbmi	r4, [r6, -r3, ror #16]!
    3028:	61626f6c 	cmnvs	r2, ip, ror #30
    302c:	4800736c 	stmdami	r0, {r2, r3, r5, r6, r8, r9, ip, sp, lr}
    3030:	43534f50 	cmpmi	r3, #80, 30	; 0x140
    3034:	6c65525f 	sfmvs	f5, 2, [r5], #-380	; 0xfffffe84
    3038:	71657246 	cmnvc	r5, r6, asr #4
    303c:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    3040:	64007465 	strvs	r7, [r0], #-1125	; 0xfffffb9b
    3044:	61746c65 	cmnvs	r4, r5, ror #24
    3048:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    304c:	636e6953 	cmnvs	lr, #1359872	; 0x14c000
    3050:	736f5865 	cmnvc	pc, #6619136	; 0x650000
    3054:	496e4f63 	stmdbmi	lr!, {r0, r1, r5, r6, r8, r9, sl, fp, lr}^
    3058:	00734d6e 	rsbseq	r4, r3, lr, ror #26
    305c:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
    3060:	6d655461 	cfstrdvs	mvd5, [r5, #-388]!	; 0xfffffe7c
    3064:	6e695370 	mcrvs	3, 3, r5, cr9, cr0, {3}
    3068:	6f586563 	svcvs	0x00586563
    306c:	6e4f6373 	mcrvs	3, 2, r6, cr15, cr3, {3}
    3070:	74696600 	strbtvc	r6, [r9], #-1536	; 0xfffffa00
    3074:	61726150 	cmnvs	r2, r0, asr r1
    3078:	7300736d 	movwvc	r7, #877	; 0x36d
strand (__outserial, const char*)
    307c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    3080:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    3084:	6e49656d 	cdpvs	5, 4, cr6, cr9, cr13, {3}
    3088:	74007355 	strvc	r7, [r0], #-853	; 0xfffffcab
endstrand
    308c:	58656d69 	stmdapl	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    3090:	4f63736f 	svcmi	0x0063736f
	ptr = data;
    3094:	435f6666 	cmpmi	pc, #106954752	; 0x6600000
    3098:	534f0056 	movtpl	r0, #61526	; 0xf056
	if (*ptr)
    309c:	53664843 	cmnpl	r6, #4390912	; 0x430000
		len = strlen (ptr);
    30a0:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    30a4:	61655265 	cmnvs	r5, r5, ror #4
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    30a8:	61007964 	tstvs	r0, r4, ror #18
    30ac:	6f43706d 	svcvs	0x0043706d
    30b0:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
    30b4:	734f0031 	movtvc	r0, #61489	; 0xf031
    30b8:	47664863 	strbmi	r4, [r6, -r3, ror #16]!
	len -= quant;
    30bc:	61626f6c 	cmnvs	r2, ip, ror #30
    30c0:	745f736c 	ldrbvc	r7, [pc], #-876	; 30c8 <__outserial+0x4c>
    30c4:	52414800 	subpl	r4, r1, #0, 16
	if (len == 0) {
    30c8:	50415f44 	subpl	r5, r1, r4, asr #30
		ufree (data);
    30cc:	00545f49 	subseq	r5, r4, r9, asr #30
		finish;
    30d0:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    30d4:	69746e55 	ldmdbvs	r4!, {r0, r2, r4, r6, r9, sl, fp, sp, lr}^
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    30d8:	6b61576c 	blvs	1858e90 <__ccfg+0x1838ee8>
    30dc:	49707565 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, ip, sp, lr}^
    30e0:	00734d6e 	rsbseq	r4, r3, lr, ror #26
    30e4:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    30e8:	43637253 	cmnmi	r3, #805306373	; 0x30000005
strand (__inserial, address)
    30ec:	4f006b6c 	svcmi	0x00006b6c
    30f0:	66484353 			; <UNDEFINED> instruction: 0x66484353
    30f4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    30f8:	77536563 	ldrbvc	r6, [r3, -r3, ror #10]
    30fc:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
	if (__inpline != NULL)
    3100:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    3104:	52435f52 	subpl	r5, r3, #328	; 0x148
		finish;
    3108:	5f323343 	svcpl	0x00323343
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    310c:	65740054 	ldrbvs	r0, [r4, #-84]!	; 0xffffffac
    3110:	6544706d 	strbvs	r7, [r4, #-109]	; 0xffffff93
    3114:	46004367 	strmi	r4, [r0], -r7, ror #6
    3118:	5f525450 	svcpl	0x00525450
		umwait (IM_INIT);
    311c:	564e494d 	strbpl	r4, [lr], -sp, asr #18
		release;
    3120:	545f4c41 	ldrbpl	r4, [pc], #-3137	; 3128 <__inserial+0x3c>
	savedata (data);
    3124:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
	len = MAX_LINE_LENGTH;
    3128:	46485f52 			; <UNDEFINED> instruction: 0x46485f52
	io (IM_READ, __cport, READ, ptr, 1);
    312c:	52554f53 	subspl	r4, r5, #332	; 0x14c
    3130:	41534543 	cmpmi	r3, r3, asr #10
    3134:	57534546 	ldrbpl	r4, [r3, -r6, asr #10]
    3138:	48435449 	stmdami	r3, {r0, r3, r6, sl, ip, lr}^
	if (ptr == (char*) data) { // new line
    313c:	4d00545f 	cfstrsmi	mvf5, [r0, #-380]	; 0xfffffe84
    3140:	61566e69 	cmpvs	r6, r9, ror #28
		if (*ptr == '\0') { // bin cmd
    3144:	0065756c 	rsbeq	r7, r5, ip, ror #10
			proceed (IM_BIN);
    3148:	76657270 			; <UNDEFINED> instruction: 0x76657270
    314c:	6d6d694c 			; <UNDEFINED> instruction: 0x6d6d694c
		if (*ptr < 0x20)
    3150:	35327469 	ldrcc	r7, [r2, #-1129]!	; 0xfffffb97
    3154:	73556e49 	cmpvc	r5, #1168	; 0x490
			proceed (IM_READ);
    3158:	524f4e00 	subpl	r4, pc, #0, 28
    315c:	4f5f4d4f 	svcmi	0x005f4d4f
	if (*ptr == '\n' || *ptr == '\r') {
    3160:	485f4353 	ldmdami	pc, {r0, r1, r4, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    3164:	43534f50 	cmpmi	r3, #80, 30	; 0x140
    3168:	616c6552 	cmnvs	ip, r2, asr r5
		*ptr = '\0';
    316c:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
		__inpline = (char*)data;
    3170:	71657246 	cmnvc	r5, r6, asr #4
		finish;
    3174:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
	if (len) {
    3178:	66664f79 	uqsub16vs	r4, r6, r9
		ptr++;
    317c:	54746573 	ldrbtpl	r6, [r4], #-1395	; 0xfffffa8d
    3180:	4346526f 	movtmi	r5, #25199	; 0x626f
		len--;
    3184:	4665726f 	strbtmi	r7, [r5], -pc, ror #4
	proceed (IM_READ);
    3188:	616d726f 	cmnvs	sp, pc, ror #4
	io (IM_BIN, __cport, READ, ptr, 1);
    318c:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    3190:	74726576 	ldrbtvc	r6, [r2], #-1398	; 0xfffffa8a
    3194:	6c655300 	stclvs	3, cr5, [r5], #-0
    3198:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
    319c:	41706d6f 	cmnmi	r0, pc, ror #26
	len -= 2;
    31a0:	00666552 	rsbeq	r6, r6, r2, asr r5
	if (len > *ptr + 1) // 1 for 0x04
    31a4:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    31a8:	636f6c43 	cmnvs	pc, #17152	; 0x4300
		len = *ptr + 1;
    31ac:	756f536b 	strbvc	r5, [pc, #-875]!	; 2e49 <RFCCPE0IntHandler+0x51>
    31b0:	00656372 	rsbeq	r6, r5, r2, ror r3
	ptr++;
    31b4:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
	quant = io (IM_BINL, __cport, READ, ptr, len);
    31b8:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    31bc:	61636f4c 	cmnvs	r3, ip, asr #30
    31c0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    31c4:	65520031 	ldrbvs	r0, [r2, #-49]	; 0xffffffcf
    31c8:	76726573 			; <UNDEFINED> instruction: 0x76726573
    31cc:	6f4c6465 	svcvs	0x004c6465
	len -= quant;
    31d0:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
		__inpline = (char*)data;
    31d4:	00326e6f 	eorseq	r6, r2, pc, ror #28
		finish;
    31d8:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
	ptr += quant;
    31dc:	5f363174 	svcpl	0x00363174
    31e0:	65520074 	ldrbvs	r0, [r2, #-116]	; 0xffffff8c
endstrand
    31e4:	76726573 			; <UNDEFINED> instruction: 0x76726573
    31e8:	6f4c6465 	svcvs	0x004c6465
	proceed (IM_BINL);
    31ec:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
endstrand
    31f0:	00356e6f 	eorseq	r6, r5, pc, ror #28
    31f4:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    31f8:	76654464 	strbtvc	r4, [r5], -r4, ror #8
    31fc:	69746169 	ldmdbvs	r4!, {r0, r3, r5, r6, r8, sp, lr}^
    3200:	61566e6f 	cmpvs	r6, pc, ror #28
    3204:	0065756c 	rsbeq	r7, r5, ip, ror #10
		if (res && (d < n))
    3208:	6f436672 	svcvs	0x00436672
    320c:	72466572 	subvc	r6, r6, #478150656	; 0x1c800000
    3210:	664f7165 	strbvs	r7, [pc], -r5, ror #2
    3214:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
			res [d] = (char) c;
    3218:	67696800 	strbvs	r6, [r9, -r0, lsl #16]!
		d++;
    321c:	72685468 	rsbvc	r5, r8, #104, 8	; 0x68000000
    3220:	6f687365 	svcvs	0x00687365
    3224:	4e00646c 	cdpmi	4, 0, cr6, cr0, cr12, {3}
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3228:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 30f4 <__inserial+0x8>
    322c:	43534f5f 	cmpmi	r3, #380	; 0x17c
    3230:	445f4648 	ldrbmi	r4, [pc], #-1608	; 3238 <__pi_vfparse+0x10>
				enci (10000);
    3234:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3238:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0xfffffab9
    323c:	63657078 	cmnvs	r5, #120	; 0x78
	d = 0;
    3240:	41646574 	smcmi	18004	; 0x4654
		c = *fm++;
    3244:	61726576 	cmnvs	r2, r6, ror r5
		if (c == '\\') {
    3248:	72436567 	subvc	r6, r3, #432013312	; 0x19c00000
			if ((c = *fm++) == '\0') {
    324c:	61747379 	cmnvs	r4, r9, ror r3
    3250:	706d416c 	rsbvc	r4, sp, ip, ror #2
				outc ('\\');
    3254:	7574696c 	ldrbvc	r6, [r4, #-2412]!	; 0xfffff694
			if ((c = *fm++) == '\0') {
    3258:	6f006564 	svcvs	0x00006564
				outc ('\\');
    325c:	66436373 			; <UNDEFINED> instruction: 0x66436373
    3260:	67655267 	strbvs	r5, [r5, -r7, ror #4]!
			outc (c);
    3264:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
    3268:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
			if (c == '\0')
    326c:	45475f52 	strbmi	r5, [r7, #-3922]	; 0xfffff0ae
    3270:	534c4654 	movtpl	r4, #50772	; 0xc654
			outc (c);
    3274:	5f455a49 	svcpl	0x00455a49
				outc (val);
    3278:	4f4e0054 	svcmi	0x004e0054
				val = (word) va_arg (ap, aword);
    327c:	5f4d4f52 	svcpl	0x004d4f52
		if (c == '%') {
    3280:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    3284:	65475f46 	strbvs	r5, [r7, #-3910]	; 0xfffff0ba
			c = *fm++;
    3288:	61745374 	cmnvs	r4, r4, ror r3
			switch (c) {
    328c:	70757472 	rsbsvc	r7, r5, r2, ror r4
    3290:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    3294:	616c4600 	cmnvs	ip, r0, lsl #12
    3298:	65476873 	strbvs	r6, [r7, #-2163]	; 0xfffff78d
    329c:	7a695374 	bvc	1a58074 <__ccfg+0x1a380cc>
    32a0:	50460065 	subpl	r0, r6, r5, rrx
    32a4:	435f5254 	cmpmi	pc, #84, 4	; 0x40000005
    32a8:	41504d4f 	cmpmi	r0, pc, asr #26
				outc ('%');
    32ac:	5f464552 	svcpl	0x00464552
    32b0:	50460054 	subpl	r0, r6, r4, asr r0
				outc (c);
    32b4:	475f5254 			; <UNDEFINED> instruction: 0x475f5254
    32b8:	48435445 	stmdami	r3, {r0, r2, r6, sl, ip, lr}^
    32bc:	44495049 	strbmi	r5, [r9], #-73	; 0xffffffb7
				if (c == '\0')
    32c0:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
				return d;
    32c4:	5f525450 	svcpl	0x00525450
}
    32c8:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    32cc:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
			switch (c) {
    32d0:	00545f35 	subseq	r5, r4, r5, lsr pc
    32d4:	61726170 	cmnvs	r2, r0, ror r1
    32d8:	0030506d 	eorseq	r5, r0, sp, rrx
				for (i = 12; ; i -= 4) {
    32dc:	4f524f4e 	svcmi	0x00524f4e
				val = (word) va_arg (ap, aword);
    32e0:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
						[ (val >> i) & 0xf ]);
    32e4:	65704343 	ldrbvs	r4, [r0, #-835]!	; 0xfffffcbd
    32e8:	47746e49 	ldrbmi	r6, [r4, -r9, asr #28]!
    32ec:	6e417465 	cdpvs	4, 4, cr7, cr1, cr5, {3}
					outc (__pi_hex_enc_table
    32f0:	656c4364 	strbvs	r4, [ip, #-868]!	; 0xfffffc9c
    32f4:	70007261 	andvc	r7, r0, r1, ror #4
					if (i == 0)
    32f8:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
    32fc:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
				for (i = 12; ; i -= 4) {
    3300:	7a697300 	bvc	1a5ff08 <__ccfg+0x1a3ff60>
				val = (word) va_arg (ap, aword);
    3304:	00745f65 	rsbseq	r5, r4, r5, ror #30
				if (c == 'd' && (val & 0x8000) != 0) {
    3308:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
				val = (word) va_arg (ap, aword);
    330c:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
				if (c == 'd' && (val & 0x8000) != 0) {
    3310:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
    3314:	4e007865 	cdpmi	8, 0, cr7, cr0, cr5, {3}
					outc ('-');
    3318:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 31e4 <__inserial+0xf8>
    331c:	4346525f 	movtmi	r5, #25183	; 0x625f
					val = (~val) + 1;
    3320:	33696441 	cmncc	r9, #1090519040	; 0x41000000
    3324:	4c6f6356 	stclmi	3, cr6, [pc], #-344	; 31d4 <__inserial+0xe8>
				for (i = 12; ; i -= 4) {
    3328:	6f566f64 	svcvs	0x00566f64
				enci (10000);
    332c:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
    3330:	646f4d65 	strbtvs	r4, [pc], #-3429	; 3338 <__pi_vfparse+0x110>
    3334:	66720065 	ldrbtvs	r0, [r2], -r5, rrx
    3338:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    333c:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    3340:	525f504f 	subspl	r5, pc, #79	; 0x4f
    3344:	4f494441 	svcmi	0x00494441
    3348:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    334c:	745f5055 	ldrbvc	r5, [pc], #-85	; 3354 <__pi_vfparse+0x12c>
    3350:	524f4e00 	subpl	r4, pc, #0, 28
    3354:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
    3358:	66524346 	ldrbvs	r4, [r2], -r6, asr #6
    335c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3360:	00746553 	rsbseq	r6, r4, r3, asr r5
    3364:	4f524f4e 	svcmi	0x00524f4e
    3368:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
    336c:	6e795343 	cdpvs	3, 7, cr5, cr9, cr3, {2}
    3370:	6f506874 	svcvs	0x00506874
				if (c == 'd' || c == 'u') {
    3374:	44726577 	ldrbtmi	r6, [r2], #-1399	; 0xfffffa89
    3378:	006e776f 	rsbeq	r7, lr, pc, ror #14
					if (c == 'd' &&
    337c:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
					val = va_arg (ap, lword);
    3380:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
					fm++;
    3384:	7274725f 	rsbsvc	r7, r4, #-268435451	; 0xf0000005
					if (c == 'd' &&
    3388:	70006d69 	andvc	r6, r0, r9, ror #26
    338c:	6553704f 	ldrbvs	r7, [r3, #-79]	; 0xffffffb1
						outc ('-');
    3390:	00707574 	rsbseq	r7, r0, r4, ror r5
    3394:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
						val = (~val) + 1;
    3398:	00676649 	rsbeq	r6, r7, r9, asr #12
				enci (10000);
    339c:	5f636672 	svcpl	0x00636672
					enci (1000000000UL);
    33a0:	61666564 	cmnvs	r6, r4, ror #10
    33a4:	49746c75 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    33a8:	64417172 	strbvs	r7, [r1], #-370	; 0xfffffe8e
    33ac:	4e007264 	cdpmi	2, 0, cr7, cr0, cr4, {3}
    33b0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 327c <__pi_vfparse+0x54>
    33b4:	4346525f 	movtmi	r5, #25183	; 0x625f
    33b8:	50455043 	subpl	r5, r5, r3, asr #32
    33bc:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    33c0:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    33c4:	66720074 			; <UNDEFINED> instruction: 0x66720074
    33c8:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    33cc:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    33d0:	525f504f 	subspl	r5, pc, #79	; 0x4f
    33d4:	4f494441 	svcmi	0x00494441
    33d8:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    33dc:	735f5055 	cmpvc	pc, #85	; 0x55
    33e0:	66527000 	ldrbvs	r7, [r2], -r0
				} else if (c == 'x') {
    33e4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
					for (i = 28; ; i -= 4) {
    33e8:	65766f00 	ldrbvs	r6, [r6, #-3840]!	; 0xfffff100
					val = va_arg (ap, lword);
    33ec:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
							[ (val >> i) & 0xf ]);
    33f0:	61765f65 	cmnvs	r6, r5, ror #30
    33f4:	0065756c 	rsbeq	r7, r5, ip, ror #10
						outc (__pi_hex_enc_table
    33f8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    33fc:	2f2e2e2f 	svccs	0x002e2e2f
    3400:	642f2e2e 	strtvs	r2, [pc], #-3630	; 3408 <__pi_vfparse+0x1e0>
						if (i == 0)
    3404:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    3408:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
					for (i = 28; ; i -= 4) {
    340c:	6366722f 	cmnvs	r6, #-268435454	; 0xf0000002
					outc ('%');
    3410:	7200632e 	andvc	r6, r0, #-1207959552	; 0xb8000000
    3414:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    3418:	525f444d 	subspl	r4, pc, #1291845632	; 0x4d000000
					outc ('l');
    341c:	4f494441 	svcmi	0x00494441
    3420:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
				val = (word) va_arg (ap, aword);
    3424:	735f5055 	cmpvc	pc, #85	; 0x55
				outc (val);
    3428:	63667200 	cmnvs	r6, #0, 4
    342c:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
				while (*st != '\0') {
    3430:	4441525f 	strbmi	r5, [r1], #-607	; 0xfffffda1
    3434:	535f4f49 	cmppl	pc, #292	; 0x124
    3438:	50555445 	subspl	r5, r5, r5, asr #8
    343c:	6200745f 	andvs	r7, r0, #1593835520	; 0x5f000000
					outc (*st);
    3440:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    3444:	6600656c 	strvs	r6, [r0], -ip, ror #10
					st++;
    3448:	31676663 	cmncc	r7, r3, ror #12
		c = *fm++;
    344c:	7274725f 	rsbsvc	r7, r4, #-268435451	; 0xf0000005
    3450:	4e006d69 	cdpmi	13, 0, cr6, cr0, cr9, {3}
    3454:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3320 <__pi_vfparse+0xf8>
char *vform (char *res, const char *fm, va_list aq) {
    3458:	4346525f 	movtmi	r5, #25183	; 0x625f
    345c:	69725452 	ldmdbvs	r2!, {r1, r4, r6, sl, ip, lr}^
	if (res != NULL) {
    3460:	4f4e006d 	svcmi	0x004e006d
		__pi_vfparse (res, MAX_WORD, fm, aq);
    3464:	5f4d4f52 	svcpl	0x004d4f52
    3468:	44434652 	strbmi	r4, [r3], #-1618	; 0xfffff9ae
    346c:	62726f6f 	rsbsvs	r6, r2, #444	; 0x1bc
}
    3470:	536c6c65 	cmnpl	ip, #25856	; 0x6500
    3474:	54646e65 	strbtpl	r6, [r4], #-3685	; 0xfffff19b
	fml = strlen (fm) + 17;
    3478:	4652006f 	ldrbmi	r0, [r2], -pc, rrx
    347c:	6b634143 	blvs	18d3990 <__ccfg+0x18b39e8>
    3480:	43746e49 	cmnmi	r4, #1168	; 0x490
	if ((res = (char*) umalloc (fml)) == NULL)
    3484:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    3488:	76696400 	strbtvc	r6, [r9], -r0, lsl #8
    348c:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    3490:	524f4e00 	subpl	r4, pc, #0, 28
    3494:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
    3498:	66524346 	ldrbvs	r4, [r2], -r6, asr #6
    349c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
		ufree (res);
    34a0:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
		goto Again;
    34a4:	31706d00 	cmncc	r0, r0, lsl #26
	if (buf == NULL || fmt == NULL)
    34a8:	00766572 	rsbseq	r6, r6, r2, ror r5
int vscan (const char *buf, const char *fmt, va_list ap) {
    34ac:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
	if (buf == NULL || fmt == NULL)
    34b0:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    34b4:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 32f4 <__pi_vfparse+0xcc>
    34b8:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
		    	    case 'u': scanu (lword); break;
    34bc:	61577465 	cmpvs	r7, r5, ror #8
			while (isspace (*buf)) buf++;
    34c0:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    34c4:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 33b4 <__pi_vfparse+0x18c>
	while (*fmt != '\0') {
    34c8:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
		if (*fmt++ != '%')
    34cc:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
		switch (*fmt++) {
    34d0:	524f4e00 	subpl	r4, pc, #0, 28
    34d4:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    34d8:	70757465 	rsbsvc	r7, r5, r5, ror #8
    34dc:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    34e0:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 3320 <__pi_vfparse+0xf8>
    34e4:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    34e8:	61577465 	cmpvs	r7, r5, ror #8
}
    34ec:	7075656b 	rsbsvc	r6, r5, fp, ror #10
		switch (*fmt++) {
    34f0:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 33e0 <__pi_vfparse+0x1b8>
    34f4:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    34f8:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    34fc:	31676643 	cmncc	r7, r3, asr #12
			while (isspace (*buf)) buf++;
    3500:	524f4e00 	subpl	r4, pc, #0, 28
    3504:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3508:	70757465 	rsbsvc	r7, r5, r5, ror #8
    350c:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    3510:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 3350 <__pi_vfparse+0x128>
    3514:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
			if (*buf == '\0')
    3518:	61577465 	cmpvs	r7, r5, ror #8
			if (*buf != ',') {
    351c:	7075656b 	rsbsvc	r6, r5, fp, ror #10
			sap = va_arg (ap, char*);
    3520:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 3410 <__pi_vfparse+0x1e8>
			nc++;
    3524:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
			if (*buf != ',') {
    3528:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
				while (!isspace (*buf) && *buf != ',' &&
    352c:	32676643 	rsbcc	r6, r7, #70254592	; 0x4300000
    3530:	524f4e00 	subpl	r4, pc, #0, 28
    3534:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3538:	70757465 	rsbsvc	r7, r5, r5, ror #8
    353c:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    3540:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 3380 <__pi_vfparse+0x158>
    3544:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
			while (isspace (*buf)) buf++;
    3548:	61577465 	cmpvs	r7, r5, ror #8
    354c:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    3550:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 3440 <__pi_vfparse+0x218>
    3554:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    3558:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
			if (*buf == ',') buf++;
    355c:	33676643 	cmncc	r7, #70254592	; 0x4300000
    3560:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
			*sap = '\0';
    3564:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
			break;
    3568:	2f2e2e2f 	svccs	0x002e2e2f
		    case 'd': scani (word); break;
    356c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3570:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3574:	65732f62 	ldrbvs	r2, [r3, #-3938]!	; 0xfffff09e
    3578:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    357c:	4f4e0063 	svcmi	0x004e0063
    3580:	5f4d4f52 	svcpl	0x004d4f52
    3584:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3588:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
    358c:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
    3590:	646f4d65 	strbtvs	r4, [pc], #-3429	; 3598 <vscan+0xf0>
    3594:	63634165 	cmnvs	r3, #1073741849	; 0x40000019
    3598:	6964726f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    359c:	6f54676e 	svcvs	0x0054676e
    35a0:	67666343 	strbvs	r6, [r6, -r3, asr #6]!
    35a4:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0xfffffaad
    35a8:	00676e69 	rsbeq	r6, r7, r9, ror #28
    35ac:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    35b0:	67666346 	strbvs	r6, [r6, -r6, asr #6]!
    35b4:	76655231 			; <UNDEFINED> instruction: 0x76655231
    35b8:	6f697369 	svcvs	0x00697369
    35bc:	4f41006e 	svcmi	0x0041006e
    35c0:	4355574e 	cmpmi	r5, #20447232	; 0x1380000
    35c4:	6761744a 	strbvs	r7, [r1, -sl, asr #8]!
    35c8:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    35cc:	66664f72 	uqsub16vs	r4, r6, r2
    35d0:	69725400 	ldmdbvs	r2!, {sl, ip, lr}^
    35d4:	7466416d 	strbtvc	r4, [r6], #-365	; 0xfffffe93
    35d8:	6f437265 	svcvs	0x00437265
		    case 'u': scanu (word); break;
    35dc:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    35e0:	00746573 	rsbseq	r6, r4, r3, ror r5
    35e4:	4f524f4e 	svcmi	0x00524f4e
    35e8:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    35ec:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
    35f0:	446d6972 	strbtmi	r6, [sp], #-2418	; 0xfffff68e
    35f4:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    35f8:	74760065 	ldrbtvc	r0, [r6], #-101	; 0xffffff9b
    35fc:	5f6d6972 	svcpl	0x006d6972
    3600:	67696475 			; <UNDEFINED> instruction: 0x67696475
    3604:	33697500 	cmncc	r9, #0, 10
    3608:	6e6f4132 	mcrvs	1, 3, r4, cr15, cr2, {1}
    360c:	52737953 	rsbspl	r7, r3, #1359872	; 0x14c000
    3610:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    3614:	006c7463 	rsbeq	r7, ip, r3, ror #8
    3618:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    361c:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 3624 <vscan+0x17c>
    3620:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
		    case 'x': scanx (word); break;
    3624:	67655266 	strbvs	r5, [r5, -r6, ror #4]!
    3628:	69725400 	ldmdbvs	r2!, {sl, ip, lr}^
    362c:	7466416d 	strbtvc	r4, [r6], #-365	; 0xfffffe93
    3630:	6f437265 	svcvs	0x00437265
    3634:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    3638:	57746573 			; <UNDEFINED> instruction: 0x57746573
    363c:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    3640:	6f724670 	svcvs	0x00724670
    3644:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
    3648:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
    364c:	6b61576e 	blvs	185940c <__ccfg+0x1839464>
    3650:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
    3654:	506d6f72 	rsbpl	r6, sp, r2, ror pc
    3658:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    365c:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    3660:	524f4e00 	subpl	r4, pc, #0, 28
    3664:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 366c <vscan+0x1c4>
    3668:	43736968 	cmnmi	r3, #104, 18	; 0x1a0000
    366c:	4965646f 	stmdbmi	r5!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
    3670:	69754273 	ldmdbvs	r5!, {r0, r1, r4, r5, r6, r9, lr}^
    3674:	6f46746c 	svcvs	0x0046746c
    3678:	31434372 	hvccc	13362	; 0x3432
    367c:	48787833 	ldmdami	r8!, {r0, r1, r4, r5, fp, ip, sp, lr}^
    3680:	76655277 			; <UNDEFINED> instruction: 0x76655277
    3684:	6e413032 	mcrvs	0, 2, r3, cr1, cr2, {1}
    3688:	74614c64 	strbtvc	r4, [r1], #-3172	; 0xfffff39c
    368c:	485f7265 	ldmdami	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    3690:	49746c61 	ldmdbmi	r4!, {r0, r5, r6, sl, fp, sp, lr}^
    3694:	6f695666 	svcvs	0x00695666
    3698:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0xfffffe94
			switch (*fmt++) {
    369c:	74760064 	ldrbtvc	r0, [r6], #-100	; 0xffffff9c
    36a0:	5f6d6972 	svcpl	0x006d6972
    36a4:	00646f62 	rsbeq	r6, r4, r2, ror #30
    36a8:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    36ac:	4c747845 	ldclmi	8, cr7, [r4], #-276	; 0xfffffeec
    36b0:	6b6c4366 	blvs	1b14450 <__ccfg+0x1af44a8>
		    	    case 'd': scani (lword); break;
    36b4:	72756300 	rsbsvc	r6, r5, #0, 6
    36b8:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    36bc:	6c436648 	mcrrvs	6, 4, r6, r3, cr8
    36c0:	006b636f 	rsbeq	r6, fp, pc, ror #6
    36c4:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    36c8:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    36cc:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    36d0:	006c6156 	rsbeq	r6, ip, r6, asr r1
    36d4:	4f524f4e 	svcmi	0x00524f4e
    36d8:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    36dc:	47707574 			; <UNDEFINED> instruction: 0x47707574
    36e0:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    36e4:	6f466d69 	svcvs	0x00466d69
    36e8:	616e4172 	smcvs	58386	; 0xe412
    36ec:	61707962 	cmnvs	r0, r2, ror #18
    36f0:	61567373 	cmpvs	r6, r3, ror r3
    36f4:	3165756c 	cmncc	r5, ip, ror #10
    36f8:	524f4e00 	subpl	r4, pc, #0, 28
    36fc:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3700:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3704:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    3708:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    370c:	6244726f 	subvs	r7, r4, #-268435450	; 0xf0000006
		    	    case 'x': scanx (lword); break;
    3710:	6f4c726c 	svcvs	0x004c726c
    3714:	6946706f 	stmdbvs	r6, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    3718:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    371c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    3720:	6c6f5674 	stclvs	6, cr5, [pc], #-464	; 3558 <vscan+0xb0>
    3724:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    3728:	72756300 	rsbsvc	r6, r5, #0, 6
    372c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    3730:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3734:	6d697600 	stclvs	6, cr7, [r9, #-0]
    3738:	6c744373 	ldclvs	3, cr4, [r4], #-460	; 0xfffffe34
    373c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    3740:	62690030 	rsbvs	r0, r9, #48	; 0x30
    3744:	4f736169 	svcmi	0x00736169
    3748:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    374c:	65670074 	strbvs	r0, [r7, #-116]!	; 0xffffff8c
    3750:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3754:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3758:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    375c:	74436668 	strbvc	r6, [r3], #-1640	; 0xfffff998
    3760:	6c61566c 	stclvs	6, cr5, [r1], #-432	; 0xfffffe50
    3764:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    3768:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3634 <vscan+0x18c>
    376c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3770:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    3774:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3778:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    377c:	63736f58 	cmnvs	r3, #88, 30	; 0x160
		    	    case 'd': scani (lword); break;
    3780:	61466648 	cmpvs	r6, r8, asr #12
    3784:	74537473 	ldrbvc	r7, [r3], #-1139	; 0xfffffb8d
    3788:	00747261 	rsbseq	r7, r4, r1, ror #4
    378c:	4f524f4e 	svcmi	0x00524f4e
    3790:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3794:	47707574 			; <UNDEFINED> instruction: 0x47707574
    3798:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
		    	    case 'u': scanu (lword); break;
    379c:	6f466d69 	svcvs	0x00466d69
    37a0:	4f635272 	svcmi	0x00635272
    37a4:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    37a8:	61694249 	cmnvs	r9, r9, asr #4
    37ac:	69725473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, lr}^
    37b0:	6564006d 	strbvs	r0, [r4, #-109]!	; 0xffffff93
    37b4:	4161746c 	cmnmi	r1, ip, ror #8
    37b8:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    37bc:	4f4e0074 	svcmi	0x004e0074
    37c0:	5f4d4f52 	svcpl	0x004d4f52
    37c4:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    37c8:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    37cc:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    37d0:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    37d4:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    37d8:	6c744366 	ldclvs	3, cr4, [r4], #-408	; 0xfffffe68
    37dc:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    37e0:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
		    	    case 'x': scanx (lword); break;
    37e4:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    37e8:	45636461 	strbmi	r6, [r3, #-1121]!	; 0xfffffb9f
			if ((c = *buf++) == '\0')
    37ec:	66437478 			; <UNDEFINED> instruction: 0x66437478
    37f0:	6c615667 	stclvs	6, cr5, [r1], #-412	; 0xfffffe64
			sap = va_arg (ap, char*);
    37f4:	64006575 	strvs	r6, [r0], #-1397	; 0xfffffa8b
			nc++;
    37f8:	61746c65 	cmnvs	r4, r5, ror #24
			break;
    37fc:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
			while (isspace (*buf)) buf++;
    3800:	33697500 	cmncc	r9, #0, 10
    3804:	736f5832 	cmnvc	pc, #3276800	; 0x320000
    3808:	46664863 	strbtmi	r4, [r6], -r3, ror #16
						*sap++ = *buf++;
    380c:	53747361 	cmnpl	r4, #-2080374783	; 0x84000001
    3810:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
			while (isspace (*buf)) buf++;
    3814:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3818:	4f4e0065 	svcmi	0x004e0065
    381c:	5f4d4f52 	svcpl	0x004d4f52
		return 0;
    3820:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3824:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
		    case 'x': scanx (word); break;
    3828:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    382c:	41726f46 	cmnmi	r2, r6, asr #30
		    	    case 'x': scanx (lword); break;
    3830:	6f63706d 	svcvs	0x0063706d
    3834:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
    3838:	4f4e0031 	svcmi	0x004e0031
    383c:	5f4d4f52 	svcpl	0x004d4f52
    3840:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3844:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    3848:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    384c:	41726f46 	cmnmi	r2, r6, asr #30
    3850:	6f63706d 	svcvs	0x0063706d
    3854:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
    3858:	4f4e0032 	svcmi	0x004e0032
    385c:	5f4d4f52 	svcpl	0x004d4f52
    3860:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3864:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    3868:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    386c:	41726f46 	cmnmi	r2, r6, asr #30
    3870:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    3874:	66756256 			; <UNDEFINED> instruction: 0x66756256
    3878:	4e006e45 	cdpmi	14, 0, cr6, cr0, cr5, {2}
    387c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3748 <vscan+0x2a0>
    3880:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3884:	65523233 	ldrbvs	r3, [r2, #-563]	; 0xfffffdcd
    3888:	69725767 	ldmdbvs	r2!, {r0, r1, r2, r5, r6, r8, r9, sl, ip, lr}^
    388c:	66006574 			; <UNDEFINED> instruction: 0x66006574
    3890:	31676663 	cmncc	r7, r3, ror #12
    3894:	61746144 	cmnvs	r4, r4, asr #2
    3898:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
    389c:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    38a0:	734f6352 	movtvc	r6, #62290	; 0xf352
    38a4:	49664c63 	stmdbmi	r6!, {r0, r1, r5, r6, sl, fp, lr}^
    38a8:	73616942 	cmnvc	r1, #1081344	; 0x108000
    38ac:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    38b0:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    38b4:	61740065 	cmnvs	r4, r5, rrx
    38b8:	74656772 	strbtvc	r6, [r5], #-1906	; 0xfffff88e
    38bc:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    38c0:	524f4e00 	subpl	r4, pc, #0, 28
    38c4:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    38c8:	70757465 	rsbsvc	r7, r5, r5, ror #8
    38cc:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    38d0:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    38d4:	6152726f 	cmpvs	r2, pc, ror #4
    38d8:	78456364 	stmdavc	r5, {r2, r5, r6, r8, r9, sp, lr}^
    38dc:	67664374 			; <UNDEFINED> instruction: 0x67664374
    38e0:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    38e4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    38e8:	2f2e2e2f 	svccs	0x002e2e2f
    38ec:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    38f0:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    38f4:	65732f62 	ldrbvs	r2, [r3, #-3938]!	; 0xfffff09e
    38f8:	5f707574 	svcpl	0x00707574
    38fc:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    3900:	75730063 	ldrbvc	r0, [r3, #-99]!	; 0xffffff9d
    3904:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
    3908:	00636e49 	rsbeq	r6, r3, r9, asr #28
    390c:	4f524f4e 	svcmi	0x00524f4e
    3910:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3914:	47707574 			; <UNDEFINED> instruction: 0x47707574
    3918:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    391c:	6f466d69 	svcvs	0x00466d69
    3920:	4f635272 	svcmi	0x00635272
    3924:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    3928:	6e757452 	mrcvs	4, 3, r7, cr5, cr2, {2}
    392c:	75744365 	ldrbvc	r4, [r4, #-869]!	; 0xfffffc9b
    3930:	7254656e 	subsvc	r6, r4, #461373440	; 0x1b800000
    3934:	4e006d69 	cdpmi	13, 0, cr6, cr0, cr9, {3}
    3938:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3804 <vscan+0x35c>
    393c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3940:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    3944:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3948:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    394c:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    3950:	6552664c 	ldrbvs	r6, [r2, #-1612]	; 0xfffff9b4
    3954:	616c7567 	cmnvs	ip, r7, ror #10
    3958:	41726f74 	cmnmi	r2, r4, ror pc
    395c:	6d43646e 	cfstrdvs	mvd6, [r3, #-440]	; 0xfffffe48
    3960:	77727269 	ldrbvc	r7, [r2, -r9, ror #4]!
    3964:	74615272 	strbtvc	r5, [r1], #-626	; 0xfffffd8e
    3968:	75006f69 	strvc	r6, [r0, #-3945]	; 0xfffff097
    396c:	54323369 	ldrtpl	r3, [r2], #-873	; 0xfffffc97
    3970:	006d6972 	rsbeq	r6, sp, r2, ror r9
    3974:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3978:	67695370 			; <UNDEFINED> instruction: 0x67695370
    397c:	7478456e 	ldrbtvc	r4, [r8], #-1390	; 0xfffffa92
    3980:	56646e65 	strbtpl	r6, [r4], -r5, ror #28
    3984:	54726464 	ldrbtpl	r6, [r2], #-1124	; 0xfffffb9c
    3988:	566d6972 			; <UNDEFINED> instruction: 0x566d6972
    398c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3990:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    3994:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3998:	41726f46 	cmnmi	r2, r6, asr #30
    399c:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    39a0:	66756256 			; <UNDEFINED> instruction: 0x66756256
    39a4:	61566e45 	cmpvs	r6, r5, asr #28
    39a8:	0065756c 	rsbeq	r7, r5, ip, ror #10
    39ac:	4f524f4e 	svcmi	0x00524f4e
    39b0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    39b4:	47707574 			; <UNDEFINED> instruction: 0x47707574
    39b8:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    39bc:	6f466d69 	svcvs	0x00466d69
    39c0:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    39c4:	6f4d6853 	svcvs	0x004d6853
    39c8:	6e456564 	cdpvs	5, 4, cr6, cr5, cr4, {3}
    39cc:	32336900 	eorscc	r6, r3, #0, 18
    39d0:	6e676953 			; <UNDEFINED> instruction: 0x6e676953
    39d4:	64566465 	ldrbvs	r6, [r6], #-1125	; 0xfffffb9b
    39d8:	61567264 	cmpvs	r6, r4, ror #4
    39dc:	6f6d006c 	svcvs	0x006d006c
    39e0:	6f436564 	svcvs	0x00436564
    39e4:	0031666e 	eorseq	r6, r1, lr, ror #12
    39e8:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    39ec:	67666346 	strbvs	r6, [r6, -r6, asr #6]!
    39f0:	6c615631 	stclvs	6, cr5, [r1], #-196	; 0xffffff3c
    39f4:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    39f8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 38c4 <NOROM_AONRTCCurrent64BitValueGet+0x14>
    39fc:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3a00:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    3a04:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3a08:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3a0c:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    3a10:	62496648 	subvs	r6, r9, #72, 12	; 0x4800000
    3a14:	74736169 	ldrbtvc	r6, [r3], #-361	; 0xfffffe97
    3a18:	6d726568 	cfldr64vs	mvdx6, [r2, #-416]!	; 0xfffffe60
    3a1c:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    3a20:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3a24:	41726f46 	cmnmi	r2, r6, asr #30
    3a28:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    3a2c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    3a30:	61566e45 	cmpvs	r6, r5, asr #28
    3a34:	0065756c 	rsbeq	r7, r5, ip, ror #10
    3a38:	56323369 	ldrtpl	r3, [r2], -r9, ror #6
    3a3c:	53726464 	cmnpl	r2, #100, 8	; 0x64000000
    3a40:	7065656c 	rsbvc	r6, r5, ip, ror #10
    3a44:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3a48:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    3a4c:	734f3167 	movtvc	r3, #61799	; 0xf167
    3a50:	6e6f4363 	cdpvs	3, 6, cr4, cr15, cr3, {3}
    3a54:	62640066 	rsbvs	r0, r4, #102	; 0x66
    3a58:	6f4c726c 	svcvs	0x004c726c
    3a5c:	6946706f 	stmdbvs	r6, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    3a60:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    3a64:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    3a68:	6c6f5674 	stclvs	6, cr5, [pc], #-464	; 38a0 <NOROM_AONRTCCurrentCompareValueGet+0x10>
    3a6c:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    3a70:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3a74:	72740065 	rsbsvc	r0, r4, #101	; 0x65
    3a78:	6f466d69 	svcvs	0x00466d69
    3a7c:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    3a80:	52664c63 	rsbpl	r4, r6, #25344	; 0x6300
    3a84:	6c756765 	ldclvs	7, cr6, [r5], #-404	; 0xfffffe6c
    3a88:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
    3a8c:	43646e41 	cmnmi	r4, #1040	; 0x410
    3a90:	7272696d 	rsbsvc	r6, r2, #1785856	; 0x1b4000
    3a94:	61527277 	cmpvs	r2, r7, ror r2
    3a98:	566f6974 			; <UNDEFINED> instruction: 0x566f6974
    3a9c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3aa0:	69626900 	stmdbvs	r2!, {r8, fp, sp, lr}^
    3aa4:	6e497361 	cdpvs	3, 4, cr7, cr9, cr1, {3}
    3aa8:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    3aac:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3978 <NOROM_OSCHF_AttemptToSwitchToXosc>
    3ab0:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3ab4:	65537075 	ldrbvs	r7, [r3, #-117]	; 0xffffff8b
    3ab8:	6e6f4174 	mcrvs	1, 3, r4, cr15, cr4, {3}
    3abc:	53637452 	cmnpl	r3, #1375731712	; 0x52000000
    3ac0:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
    3ac4:	636e4963 	cmnvs	lr, #1622016	; 0x18c000
    3ac8:	524f4e00 	subpl	r4, pc, #0, 28
    3acc:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3ad0:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3ad4:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    3ad8:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3adc:	6d41726f 	sfmvs	f7, 2, [r1, #-444]	; 0xfffffe44
    3ae0:	6d6f6370 	stclvs	3, cr6, [pc, #-448]!	; 3928 <NOROM_OSCClockSourceSet+0x50>
    3ae4:	72744370 	rsbsvc	r4, r4, #112, 6	; 0xc0000001
    3ae8:	6975006c 	ldmdbvs	r5!, {r2, r3, r5, r6}^
    3aec:	6f583233 	svcvs	0x00583233
    3af0:	66486373 			; <UNDEFINED> instruction: 0x66486373
    3af4:	00776f52 	rsbseq	r6, r7, r2, asr pc
    3af8:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3afc:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    3b00:	6f436648 	svcvs	0x00436648
    3b04:	4f4e006c 	svcmi	0x004e006c
    3b08:	5f4d4f52 	svcpl	0x004d4f52
    3b0c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3b10:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
    3b14:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    3b18:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
    3b1c:	656e006c 	strbvs	r0, [lr, #-108]!	; 0xffffff94
    3b20:	69725477 	ldmdbvs	r2!, {r0, r1, r2, r4, r5, r6, sl, ip, lr}^
    3b24:	7761526d 	strbvc	r5, [r1, -sp, ror #4]!
    3b28:	33697500 	cmncc	r9, #0, 10
    3b2c:	69725432 	ldmdbvs	r2!, {r1, r4, r5, sl, ip, lr}^
    3b30:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    3b34:	69006575 	stmdbvs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    3b38:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
    3b3c:	6d6f7473 	cfstrdvs	mvd7, [pc, #-460]!	; 3978 <NOROM_OSCHF_AttemptToSwitchToXosc>
    3b40:	65447265 	strbvs	r7, [r4, #-613]	; 0xfffffd9b
    3b44:	4161746c 	cmnmi	r1, ip, ror #8
    3b48:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    3b4c:	33690074 	cmncc	r9, #116	; 0x74
    3b50:	64645632 	strbtvs	r5, [r4], #-1586	; 0xfffff9ce
    3b54:	656c5372 	strbvs	r5, [ip, #-882]!	; 0xfffffc8e
    3b58:	65447065 	strbvs	r7, [r4, #-101]	; 0xffffff9b
    3b5c:	0061746c 	rsbeq	r7, r1, ip, ror #8
    3b60:	72646476 	rsbvc	r6, r4, #1979711488	; 0x76000000
    3b64:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3b68:	76746341 	ldrbtvc	r6, [r4], -r1, asr #6
    3b6c:	75630065 	strbvc	r0, [r3, #-101]!	; 0xffffff9b
    3b70:	6d655472 	cfstrdvs	mvd5, [r5, #-456]!	; 0xfffffe38
    3b74:	69640070 	stmdbvs	r4!, {r4, r5, r6}^
    3b78:	64566666 	ldrbvs	r6, [r6], #-1638	; 0xfffff99a
    3b7c:	63417264 	movtvs	r7, #4708	; 0x1264
    3b80:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
    3b84:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    3b88:	72700070 	rsbsvc	r0, r0, #112	; 0x70
    3b8c:	61526d63 	cmpvs	r2, r3, ror #26
    3b90:	7465526d 	strbtvc	r5, [r5], #-621	; 0xfffffd93
    3b94:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    3b98:	6c006e6f 	stcvs	14, cr6, [r0], {111}	; 0x6f
    3b9c:	0064616f 	rsbeq	r6, r4, pc, ror #2
    3ba0:	4f524f4e 	svcmi	0x00524f4e
    3ba4:	79535f4d 	ldmdbvc	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    3ba8:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    3bac:	6a64416c 	bvs	1914164 <__ccfg+0x18f41bc>
    3bb0:	52747375 	rsbspl	r7, r4, #-738197503	; 0xd4000001
    3bb4:	61686365 	cmnvs	r8, r5, ror #6
    3bb8:	41656772 	smcmi	22130	; 0x5672
    3bbc:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
    3bc0:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    3bc4:	776f4472 			; <UNDEFINED> instruction: 0x776f4472
    3bc8:	4f4e006e 	svcmi	0x004e006e
    3bcc:	5f4d4f52 	svcpl	0x004d4f52
    3bd0:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    3bd4:	536c7274 	cmnpl	ip, #116, 4	; 0x40000007
    3bd8:	65527465 	ldrbvs	r7, [r2, #-1125]	; 0xfffffb9b
    3bdc:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    3be0:	65426567 	strbvs	r6, [r2, #-1383]	; 0xfffffa99
    3be4:	65726f66 	ldrbvs	r6, [r2, #-3942]!	; 0xfffff09a
    3be8:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    3bec:	776f4472 			; <UNDEFINED> instruction: 0x776f4472
    3bf0:	2f2e006e 	svccs	0x002e006e
    3bf4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3bf8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3bfc:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    3c00:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    3c04:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    3c08:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    3c0c:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    3c10:	4f4e0063 	svcmi	0x004e0063
    3c14:	5f4d4f52 	svcpl	0x004d4f52
    3c18:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    3c1c:	526c7274 	rsbpl	r7, ip, #116, 4	; 0x40000007
    3c20:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    3c24:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    3c28:	65476563 	strbvs	r6, [r7, #-1379]	; 0xfffffa9d
    3c2c:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
    3c30:	6f443233 	svcvs	0x00443233
    3c34:	6e69616d 	powvsez	f6, f1, #5.0
    3c38:	65700073 	ldrbvs	r0, [r0, #-115]!	; 0xffffff8d
    3c3c:	70004572 	andvc	r4, r0, r2, ror r5
    3c40:	6d655464 	cfstrdvs	mvd5, [r5, #-400]!	; 0xfffffe70
    3c44:	69750070 	ldmdbvs	r5!, {r4, r5, r6}^
    3c48:	75413233 	strbvc	r3, [r1, #-563]	; 0xfffffdcd
    3c4c:	6f6c4378 	svcvs	0x006c4378
    3c50:	00736b63 	rsbseq	r6, r3, r3, ror #22
    3c54:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
    3c58:	616d6f44 	cmnvs	sp, r4, asr #30
    3c5c:	6e456e69 	cdpvs	14, 4, cr6, cr5, cr9, {3}
    3c60:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    3c64:	72657000 	rsbvc	r7, r5, #0
    3c68:	656e004d 	strbvs	r0, [lr, #-77]!	; 0xffffffb3
    3c6c:	63655277 	cmnvs	r5, #1879048199	; 0x70000007
    3c70:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    3c74:	72655065 	rsbvc	r5, r5, #101	; 0x65
    3c78:	00646f69 	rsbeq	r6, r4, r9, ror #30
    3c7c:	72646476 	rsbvc	r6, r4, #1979711488	; 0x76000000
    3c80:	00706143 	rsbseq	r6, r0, r3, asr #2
    3c84:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3c88:	00786449 	rsbseq	r6, r8, r9, asr #8
    3c8c:	74536470 	ldrbvc	r6, [r3], #-1136	; 0xfffffb90
    3c90:	00657461 	rsbeq	r7, r5, r1, ror #8
    3c94:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
    3c98:	52747365 	rsbspl	r7, r4, #-1811939327	; 0x94000001
    3c9c:	61686365 	cmnvs	r8, r5, ror #6
    3ca0:	50656772 	rsbpl	r6, r5, r2, ror r7
    3ca4:	6f697265 	svcvs	0x00697265
    3ca8:	65640064 	strbvs	r0, [r4, #-100]!	; 0xffffff9c
    3cac:	5661746c 	strbtpl	r7, [r1], -ip, ror #8
    3cb0:	53726464 	cmnpl	r2, #100, 8	; 0x64000000
    3cb4:	7065656c 	rsbvc	r6, r5, ip, ror #10
    3cb8:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3cbc:	74616200 	strbtvc	r6, [r1], #-512	; 0xfffffe00
    3cc0:	65726854 	ldrbvs	r6, [r2, #-2132]!	; 0xfffff7ac
    3cc4:	6c6f6873 	stclvs	8, cr6, [pc], #-460	; 3b00 <NOROM_RFCRfTrimRead+0x80>
    3cc8:	6f780064 	svcvs	0x00780064
    3ccc:	6f506373 	svcvs	0x00506373
    3cd0:	4d726577 	cfldr64mi	mvdx6, [r2, #-476]!	; 0xfffffe24
    3cd4:	0065646f 	rsbeq	r6, r5, pc, ror #8
    3cd8:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
    3cdc:	64616f4c 	strbtvs	r6, [r1], #-3916	; 0xfffff0b4
    3ce0:	00746547 	rsbseq	r6, r4, r7, asr #10
    3ce4:	66696873 			; <UNDEFINED> instruction: 0x66696873
    3ce8:	54646574 	strbtpl	r6, [r4], #-1396	; 0xfffffa8c
    3cec:	00706d65 	rsbseq	r6, r0, r5, ror #26
    3cf0:	65446374 	strbvs	r6, [r4, #-884]	; 0xfffffc8c
    3cf4:	0061746c 	rsbeq	r7, r1, ip, ror #8
    3cf8:	75705f67 	ldrbvc	r5, [r0, #-3943]!	; 0xfffff099
    3cfc:	4d323369 	ldcmi	3, cr3, [r2, #-420]!	; 0xfffffe5c
    3d00:	6c75646f 	cfldrdvs	mvd6, [r5], #-444	; 0xfffffe44
    3d04:	00474365 	subeq	r4, r7, r5, ror #6
    3d08:	53727563 	cmnpl	r2, #415236096	; 0x18c00000
    3d0c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    3d10:	6e6f6100 	powvse	f6, f7, f0
    3d14:	63737953 	cmnvs	r3, #1359872	; 0x14c000
    3d18:	77506c74 			; <UNDEFINED> instruction: 0x77506c74
    3d1c:	6c746372 	ldclvs	3, cr6, [r4], #-456	; 0xfffffe38
    3d20:	54647000 	strbtpl	r7, [r4], #-0
    3d24:	00656d69 	rsbeq	r6, r5, r9, ror #26
    3d28:	4f524f4e 	svcmi	0x00524f4e
    3d2c:	79535f4d 	ldmdbvc	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    3d30:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    3d34:	776f506c 	strbvc	r5, [pc, -ip, rrx]!
    3d38:	76457265 	strbvc	r7, [r5], -r5, ror #4
    3d3c:	74797265 	ldrbtvc	r7, [r9], #-613	; 0xfffffd9b
    3d40:	676e6968 	strbvs	r6, [lr, -r8, ror #18]!
    3d44:	6f4c7000 	svcvs	0x004c7000
    3d48:	70756b6f 	rsbsvc	r6, r5, pc, ror #22
    3d4c:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
    3d50:	64700065 	ldrbtvs	r0, [r0], #-101	; 0xffffff9b
    3d54:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    3d58:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    3d5c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3d60:	6100646f 	tstvs	r0, pc, ror #8
    3d64:	61426e6f 	cmpvs	r2, pc, ror #28
    3d68:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    3d6c:	00746142 	rsbseq	r6, r4, r2, asr #2
    3d70:	72646476 	rsbvc	r6, r4, #1979711488	; 0x76000000
    3d74:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3d78:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    3d7c:	6f500070 	svcvs	0x00500070
    3d80:	51726577 	cmnpl	r2, r7, ror r5
    3d84:	476c6175 			; <UNDEFINED> instruction: 0x476c6175
    3d88:	61626f6c 	cmnvs	r2, ip, ror #30
    3d8c:	745f736c 	ldrbvc	r7, [pc], #-876	; 3d94 <TrimAfterColdResetWakeupFromShutDown+0x70>
    3d90:	524f4e00 	subpl	r4, pc, #0, 28
    3d94:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3d98:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    3d9c:	445f6c72 	ldrbmi	r6, [pc], #-3186	; 3da4 <TrimAfterColdResetWakeupFromShutDown+0x80>
    3da0:	5f434443 	svcpl	0x00434443
    3da4:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
    3da8:	43656761 	cmnmi	r5, #25427968	; 0x1840000
    3dac:	69646e6f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3db0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    3db4:	6f436c61 	svcvs	0x00436c61
    3db8:	6f72746e 	svcvs	0x0072746e
    3dbc:	6f70006c 	svcvs	0x0070006c
    3dc0:	51726577 	cmnpl	r2, r7, ror r5
    3dc4:	476c6175 			; <UNDEFINED> instruction: 0x476c6175
    3dc8:	61626f6c 	cmnvs	r2, ip, ror #30
    3dcc:	5000736c 	andpl	r7, r0, ip, ror #6
    3dd0:	4f544f52 	svcmi	0x00544f52
    3dd4:	424c4f43 	submi	r4, ip, #268	; 0x10c
    3dd8:	505f5449 	subspl	r5, pc, r9, asr #8
    3ddc:	72706f72 	rsbsvc	r6, r0, #456	; 0x1c8
    3de0:	61746569 	cmnvs	r4, r9, ror #10
    3de4:	50007972 	andpl	r7, r0, r2, ror r9
    3de8:	414b4341 	cmpmi	fp, r1, asr #6
    3dec:	345f4547 	ldrbcc	r4, [pc], #-1351	; 3df4 <TrimAfterColdResetWakeupFromShutDown+0xd0>
    3df0:	43003478 	movwmi	r3, #1144	; 0x478
    3df4:	5f504948 	svcpl	0x00504948
    3df8:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    3dfc:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    3e00:	00303436 	eorseq	r3, r0, r6, lsr r4
    3e04:	65666177 	strbvs	r6, [r6, #-375]!	; 0xfffffe89
    3e08:	00644972 	rsbeq	r4, r4, r2, ror r9
    3e0c:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    3e10:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    3e14:	78363243 	ldmdavc	r6!, {r0, r1, r6, r9, ip, sp}
    3e18:	694c5f78 	stmdbvs	ip, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3e1c:	4f4e007a 	svcmi	0x004e007a
    3e20:	5f4d4f52 	svcpl	0x004d4f52
    3e24:	70696843 	rsbvc	r6, r9, r3, asr #16
    3e28:	6f666e49 	svcvs	0x00666e49
    3e2c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    3e30:	70696843 	rsbvc	r6, r9, r3, asr #16
    3e34:	696d6146 	stmdbvs	sp!, {r1, r2, r6, r8, sp, lr}^
    3e38:	4e00796c 	vmlsmi.f16	s14, s0, s25	; <UNPREDICTABLE>
    3e3c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3d08 <NOROM_RFCAdi3VcoLdoVoltageMode>
    3e40:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    3e44:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    3e48:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    3e4c:	63615074 	cmnvs	r1, #116	; 0x74
    3e50:	6567616b 	strbvs	r6, [r7, #-363]!	; 0xfffffe95
    3e54:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    3e58:	524f4e00 	subpl	r4, pc, #0, 28
    3e5c:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    3e60:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    3e64:	5f6f666e 	svcpl	0x006f666e
    3e68:	48746547 	ldmdami	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    3e6c:	76655277 			; <UNDEFINED> instruction: 0x76655277
    3e70:	6f697369 	svcvs	0x00697369
    3e74:	6170006e 	cmnvs	r0, lr, rrx
    3e78:	79546b63 	ldmdbvc	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    3e7c:	43006570 	movwmi	r6, #1392	; 0x570
    3e80:	54706968 	ldrbtpl	r6, [r0], #-2408	; 0xfffff698
    3e84:	5f657079 	svcpl	0x00657079
    3e88:	77480074 	smlsldxvc	r0, r8, r4, r0
    3e8c:	69766552 	ldmdbvs	r6!, {r1, r4, r6, r8, sl, sp, lr}^
    3e90:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    3e94:	4300745f 	movwmi	r7, #1119	; 0x45f
    3e98:	5f504948 	svcpl	0x00504948
    3e9c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    3ea0:	3143435f 	cmpcc	r3, pc, asr r3
    3ea4:	00303133 	eorseq	r3, r0, r3, lsr r1
    3ea8:	70696843 	rsbvc	r6, r9, r3, asr #16
    3eac:	696d6146 	stmdbvs	sp!, {r1, r2, r6, r8, sp, lr}^
    3eb0:	745f796c 	ldrbvc	r7, [pc], #-2412	; 3eb8 <NOROM_SetupSetVddrLevel+0x1c>
    3eb4:	52776800 	rsbspl	r6, r7, #0, 16
    3eb8:	43007665 	movwmi	r7, #1637	; 0x665
    3ebc:	5f504948 	svcpl	0x00504948
    3ec0:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    3ec4:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    3ec8:	00303536 	eorseq	r3, r0, r6, lsr r5
    3ecc:	4b434150 	blmi	10d4414 <__ccfg+0x10b446c>
    3ed0:	5f454741 	svcpl	0x00454741
    3ed4:	50534357 	subspl	r4, r3, r7, asr r3
    3ed8:	6e696d00 	cdpvs	13, 6, cr6, cr9, cr0, {0}
    3edc:	6552726f 	ldrbvs	r7, [r2, #-623]	; 0xfffffd91
    3ee0:	41460076 	hvcmi	24582	; 0x6006
    3ee4:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    3ee8:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    3eec:	5f787836 	svcpl	0x00787836
    3ef0:	43003252 	movwmi	r3, #594	; 0x252
    3ef4:	5f504948 	svcpl	0x00504948
    3ef8:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    3efc:	3143435f 	cmpcc	r3, pc, asr r3
    3f00:	00303533 	eorseq	r3, r0, r3, lsr r5
    3f04:	70696843 	rsbvc	r6, r9, r3, asr #16
    3f08:	6f666e49 	svcvs	0x00666e49
    3f0c:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    3f10:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    3f14:	49796c69 	ldmdbmi	r9!, {r0, r3, r5, r6, sl, fp, sp, lr}^
    3f18:	31434373 	hvccc	13363	; 0x3433
    3f1c:	00787833 	rsbseq	r7, r8, r3, lsr r8
    3f20:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    3f24:	555f594c 	ldrbpl	r5, [pc, #-2380]	; 35e0 <vscan+0x138>
    3f28:	6f6e6b6e 	svcvs	0x006e6b6e
    3f2c:	43006e77 	movwmi	r6, #3703	; 0xe77
    3f30:	5f504948 	svcpl	0x00504948
    3f34:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    3f38:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    3f3c:	00303236 	eorseq	r3, r0, r6, lsr r2
    3f40:	67666366 	strbvs	r6, [r6, -r6, ror #6]!
    3f44:	76655231 			; <UNDEFINED> instruction: 0x76655231
    3f48:	4d414600 	stclmi	6, cr4, [r1, #-0]
    3f4c:	5f594c49 	svcpl	0x00594c49
    3f50:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    3f54:	63007878 	movwvs	r7, #2168	; 0x878
    3f58:	46706968 	ldrbtmi	r6, [r0], -r8, ror #18
    3f5c:	48006d61 	stmdami	r0, {r0, r5, r6, r8, sl, fp, sp, lr}
    3f60:	56455257 			; <UNDEFINED> instruction: 0x56455257
    3f64:	6b6e555f 	blvs	1b994e8 <__ccfg+0x1b79540>
    3f68:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    3f6c:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    3f70:	72503167 	subsvc	r3, r0, #-1073741799	; 0xc0000019
    3f74:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
    3f78:	50006c6f 	andpl	r6, r0, pc, ror #24
    3f7c:	6f746f72 	svcvs	0x00746f72
    3f80:	426c6f63 	rsbmi	r6, ip, #396	; 0x18c
    3f84:	65567469 	ldrbvs	r7, [r6, #-1129]	; 0xfffffb97
    3f88:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    3f8c:	5000745f 	andpl	r7, r0, pc, asr r4
    3f90:	4f544f52 	svcmi	0x00544f52
    3f94:	424c4f43 	submi	r4, ip, #268	; 0x10c
    3f98:	495f5449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3f9c:	5f454545 	svcpl	0x00454545
    3fa0:	5f323038 	svcpl	0x00323038
    3fa4:	345f3531 	ldrbcc	r3, [pc], #-1329	; 3fac <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>
    3fa8:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    3fac:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    3fb0:	555f4550 	ldrbpl	r4, [pc, #-1360]	; 3a68 <NOROM_RFCSynthPowerDown+0x34>
    3fb4:	6f6e6b6e 	svcvs	0x006e6b6e
    3fb8:	48006e77 	stmdami	r0, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp, lr}
    3fbc:	56455257 			; <UNDEFINED> instruction: 0x56455257
    3fc0:	325f325f 	subscc	r3, pc, #-268435451	; 0xf0000005
    3fc4:	4d414600 	stclmi	6, cr4, [r1, #-0]
    3fc8:	5f594c49 	svcpl	0x00594c49
    3fcc:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3fd0:	50007878 	andpl	r7, r0, r8, ror r8
    3fd4:	414b4341 	cmpmi	fp, r1, asr #6
    3fd8:	375f4547 	ldrbcc	r4, [pc, -r7, asr #10]
    3fdc:	50003778 	andpl	r3, r0, r8, ror r7
    3fe0:	4f544f52 	svcmi	0x00544f52
    3fe4:	5f4c4f43 	svcpl	0x004c4f43
    3fe8:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    3fec:	006e776f 	rsbeq	r7, lr, pc, ror #14
    3ff0:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    3ff4:	5f325f56 	svcpl	0x00325f56
    3ff8:	4f4e0030 	svcmi	0x004e0030
    3ffc:	5f4d4f52 	svcpl	0x004d4f52
    4000:	70696843 	rsbvc	r6, r9, r3, asr #16
    4004:	6f666e49 	svcvs	0x00666e49
    4008:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    400c:	70696843 	rsbvc	r6, r9, r3, asr #16
    4010:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    4014:	52574800 	subspl	r4, r7, #0, 16
    4018:	325f5645 	subscc	r5, pc, #72351744	; 0x4500000
    401c:	5000315f 	andpl	r3, r0, pc, asr r1
    4020:	4f544f52 	svcmi	0x00544f52
    4024:	424c4f43 	submi	r4, ip, #268	; 0x10c
    4028:	425f5449 	subsmi	r5, pc, #1224736768	; 0x49000000
    402c:	4600454c 	strmi	r4, [r0], -ip, asr #10
    4030:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    4034:	43435f59 	movtmi	r5, #16217	; 0x3f59
    4038:	78783632 	ldmdavc	r8!, {r1, r4, r5, r9, sl, ip, sp}^
    403c:	6167415f 	cmnvs	r7, pc, asr r1
    4040:	52574800 	subspl	r4, r7, #0, 16
    4044:	325f5645 	subscc	r5, pc, #72351744	; 0x4500000
    4048:	6300335f 	movwvs	r3, #863	; 0x35f
    404c:	54706968 	ldrbtpl	r6, [r0], #-2408	; 0xfffff698
    4050:	00657079 	rsbeq	r7, r5, r9, ror r0
    4054:	50494843 	subpl	r4, r9, r3, asr #16
    4058:	5059545f 	subspl	r5, r9, pc, asr r4
    405c:	55435f45 	strbpl	r5, [r3, #-3909]	; 0xfffff0bb
    4060:	4d4f5453 	cfstrdmi	mvd5, [pc, #-332]	; 3f1c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x4>
    4064:	4300305f 	movwmi	r3, #95	; 0x5f
    4068:	5f504948 	svcpl	0x00504948
    406c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    4070:	5355435f 	cmppl	r5, #2080374785	; 0x7c000001
    4074:	5f4d4f54 	svcpl	0x004d4f54
    4078:	48430031 	stmdami	r3, {r0, r4, r5}^
    407c:	545f5049 	ldrbpl	r5, [pc], #-73	; 4084 <NOROM_SetupGetTrimForAmpcompCtrl+0x28>
    4080:	5f455059 	svcpl	0x00455059
    4084:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    4088:	48003033 	stmdami	r0, {r0, r1, r4, r5, ip, sp}
    408c:	56455257 			; <UNDEFINED> instruction: 0x56455257
    4090:	305f315f 	subscc	r3, pc, pc, asr r1	; <UNPREDICTABLE>
    4094:	43415000 	movtmi	r5, #4096	; 0x1000
    4098:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    409c:	6b6e555f 	blvs	1b99620 <__ccfg+0x1b79678>
    40a0:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    40a4:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    40a8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    40ac:	2f2e2e2f 	svccs	0x002e2e2f
    40b0:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    40b4:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    40b8:	68632f62 	stmdavs	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    40bc:	6e697069 	cdpvs	0, 6, cr7, cr9, cr9, {3}
    40c0:	632e6f66 			; <UNDEFINED> instruction: 0x632e6f66
    40c4:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    40c8:	73553167 	cmpvc	r5, #-1073741799	; 0xc0000019
    40cc:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
    40d0:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    40d4:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    40d8:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    40dc:	76654474 			; <UNDEFINED> instruction: 0x76654474
    40e0:	49656369 	stmdbmi	r5!, {r0, r3, r5, r6, r8, r9, sp, lr}^
    40e4:	52774864 	rsbspl	r4, r7, #100, 16	; 0x640000
    40e8:	6f437665 	svcvs	0x00437665
    40ec:	43006564 	movwmi	r6, #1380	; 0x564
    40f0:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    40f4:	5f6f666e 	svcpl	0x006f666e
    40f8:	4d746547 	cfldr64mi	mvdx6, [r4, #-284]!	; 0xfffffee4
    40fc:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
    4100:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    4104:	696d0076 	stmdbvs	sp!, {r1, r2, r4, r5, r6}^
    4108:	48726f6e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    410c:	76655277 			; <UNDEFINED> instruction: 0x76655277
    4110:	524f4e00 	subpl	r4, pc, #0, 28
    4114:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    4118:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    411c:	5f6f666e 	svcpl	0x006f666e
    4120:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    4124:	6f707075 	svcvs	0x00707075
    4128:	64657472 	strbtvs	r7, [r5], #-1138	; 0xfffffb8e
    412c:	746f7250 	strbtvc	r7, [pc], #-592	; 4134 <NOROM_SetupGetTrimForRadcExtCfg>
    4130:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 3f7c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x64>
    4134:	0056425f 	subseq	r4, r6, pc, asr r2
    4138:	4b434150 	blmi	10d4680 <__ccfg+0x10b46d8>
    413c:	5f454741 	svcpl	0x00454741
    4140:	45464157 	strbmi	r4, [r6, #-343]	; 0xfffffea9
    4144:	41500052 	cmpmi	r0, r2, asr r0
    4148:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    414c:	78355f45 	ldmdavc	r5!, {r0, r2, r6, r8, r9, sl, fp, ip, lr}
    4150:	61500035 	cmpvs	r0, r5, lsr r0
    4154:	67616b63 	strbvs	r6, [r1, -r3, ror #22]!
    4158:	70795465 	rsbsvc	r5, r9, r5, ror #8
    415c:	00745f65 	rsbseq	r5, r4, r5, ror #30
    4160:	70696843 	rsbvc	r6, r9, r3, asr #16
    4164:	6f666e49 	svcvs	0x00666e49
    4168:	5277485f 	rsbspl	r4, r7, #6225920	; 0x5f0000
    416c:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    4170:	496e6f69 	stmdbmi	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    4174:	54475f73 	strbpl	r5, [r7], #-3955	; 0xfffff08d
    4178:	325f5145 	subscc	r5, pc, #1073741841	; 0x40000011
    417c:	4300305f 	movwmi	r3, #95	; 0x5f
    4180:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    4184:	5f6f666e 	svcpl	0x006f666e
    4188:	55746547 	ldrbpl	r6, [r4, #-1351]!	; 0xfffffab9
    418c:	49726573 	ldmdbmi	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    4190:	69750064 	ldmdbvs	r5!, {r2, r5, r6}^
    4194:	65523233 	ldrbvs	r3, [r2, #-563]	; 0xfffffdcd
    4198:	4f4e0067 	svcmi	0x004e0067
    419c:	5f4d4f52 	svcpl	0x004d4f52
    41a0:	31494444 	cmpcc	r9, r4, asr #8
    41a4:	74694236 	strbtvc	r4, [r9], #-566	; 0xfffffdca
    41a8:	6c656966 			; <UNDEFINED> instruction: 0x6c656966
    41ac:	61655264 	cmnvs	r5, r4, ror #4
    41b0:	416e0064 	cmnmi	lr, r4, rrx
    41b4:	00726464 	rsbseq	r6, r2, r4, ror #8
    41b8:	4f524f4e 	svcmi	0x00524f4e
    41bc:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    41c0:	42363149 	eorsmi	r3, r6, #1073741842	; 0x40000012
    41c4:	65527469 	ldrbvs	r7, [r2, #-1129]	; 0xfffffb97
    41c8:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
    41cc:	00746552 	rsbseq	r6, r4, r2, asr r5
    41d0:	41787541 	cmnmi	r8, r1, asr #10
    41d4:	64446964 	strbvs	r6, [r4], #-2404	; 0xfffff69c
    41d8:	66615369 	strbtvs	r5, [r1], -r9, ror #6
    41dc:	69725765 	ldmdbvs	r2!, {r0, r2, r5, r6, r8, r9, sl, ip, lr}^
    41e0:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
    41e4:	44363169 	ldrtmi	r3, [r6], #-361	; 0xfffffe97
    41e8:	00617461 	rsbeq	r7, r1, r1, ror #8
    41ec:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    41f0:	61447257 	cmpvs	r4, r7, asr r2
    41f4:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
    41f8:	44323369 	ldrtmi	r3, [r2], #-873	; 0xfffffc97
    41fc:	00617461 	rsbeq	r7, r1, r1, ror #8
    4200:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    4204:	66696853 			; <UNDEFINED> instruction: 0x66696853
    4208:	4f4e0074 	svcmi	0x004e0074
    420c:	5f4d4f52 	svcpl	0x004d4f52
    4210:	31494444 	cmpcc	r9, r4, asr #8
    4214:	74694236 	strbtvc	r4, [r9], #-566	; 0xfffffdca
    4218:	6c656966 			; <UNDEFINED> instruction: 0x6c656966
    421c:	69725764 	ldmdbvs	r2!, {r2, r5, r6, r8, r9, sl, ip, lr}^
    4220:	6e006574 	cfrshl64vs	mvdx0, mvdx4, r6
    4224:	61746144 	cmnvs	r4, r4, asr #2
    4228:	33697500 	cmncc	r9, #0, 10
    422c:	6c615632 	stclvs	6, cr5, [r1], #-200	; 0xffffff38
    4230:	78754100 	ldmdavc	r5!, {r8, lr}^
    4234:	44696441 	strbtmi	r6, [r9], #-1089	; 0xfffffbbf
    4238:	61536964 	cmpvs	r3, r4, ror #18
    423c:	65526566 	ldrbvs	r6, [r2, #-1382]	; 0xfffffa9a
    4240:	4e006461 	cdpmi	4, 0, cr6, cr0, cr1, {3}
    4244:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 4110 <NOROM_SetupGetTrimForXoscHfCtl+0x14>
    4248:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    424c:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    4250:	69725774 	ldmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, ip, lr}^
    4254:	2e006574 	cfrshl64cs	mvdx0, mvdx4, r6
    4258:	2f2e2e2f 	svccs	0x002e2e2f
    425c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4260:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    4264:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    4268:	2f62696c 	svccs	0x0062696c
    426c:	2e696464 	cdpcs	4, 6, cr6, cr9, cr4, {3}
    4270:	69750063 	ldmdbvs	r5!, {r0, r1, r5, r6}^
    4274:	65523233 	ldrbvs	r3, [r2, #-563]	; 0xfffffdcd
    4278:	64644167 	strbtvs	r4, [r4], #-359	; 0xfffffe99
    427c:	536e0072 	cmnpl	lr, #114	; 0x72
    4280:	00657a69 	rsbeq	r7, r5, r9, ror #20
    4284:	6e5f435f 	mrcvs	3, 2, r4, cr15, cr15, {2}
    4288:	72656d75 	rsbvc	r6, r5, #7488	; 0x1d40
    428c:	6c5f6369 	mrrcvs	3, 6, r6, pc, cr9	; <UNPREDICTABLE>
    4290:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    4294:	75630065 	strbvc	r0, [r3, #-101]!	; 0xffffff9b
    4298:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    429c:	735f7963 	cmpvc	pc, #1622016	; 0x18c000
    42a0:	6f626d79 	svcvs	0x00626d79
    42a4:	7463006c 	strbtvc	r0, [r3], #-108	; 0xffffff94
    42a8:	5f657079 	svcpl	0x00657079
    42ac:	00727470 	rsbseq	r7, r2, r0, ror r4
    42b0:	30747364 	rsbscc	r7, r4, r4, ror #6
    42b4:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
    42b8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    42bc:	7473645f 	ldrbtvc	r6, [r3], #-1119	; 0xfffffba1
    42c0:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
    42c4:	735f6e5f 	cmpvc	pc, #1520	; 0x5f0
    42c8:	625f7065 	subsvs	r7, pc, #101	; 0x65
    42cc:	70735f79 	rsbsvc	r5, r3, r9, ror pc
    42d0:	00656361 	rsbeq	r6, r5, r1, ror #6
    42d4:	6e6f636c 	cdpvs	3, 6, cr6, cr15, cr12, {3}
    42d8:	6a630076 	bvs	18c44b8 <__ccfg+0x18a4510>
    42dc:	616c5f6b 	cmnvs	ip, fp, ror #30
    42e0:	6c00676e 	stcvs	7, cr6, [r0], {110}	; 0x6e
    42e4:	756e5f63 	strbvc	r5, [lr, #-3939]!	; 0xfffff09d
    42e8:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
    42ec:	00545f63 	subseq	r5, r4, r3, ror #30
    42f0:	745f435f 	ldrbvc	r4, [pc], #-863	; 42f8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>
    42f4:	5f656d69 	svcpl	0x00656d69
    42f8:	61636f6c 	cmnvs	r3, ip, ror #30
    42fc:	6900656c 	stmdbvs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    4300:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
    4304:	5f727275 	svcpl	0x00727275
    4308:	626d7973 	rsbvs	r7, sp, #1884160	; 0x1cc000
    430c:	6c006c6f 	stcvs	12, cr6, [r0], {111}	; 0x6f
    4310:	69745f63 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    4314:	545f656d 	ldrbpl	r6, [pc], #-1389	; 431c <NOROM_SetupSetAonRtcSubSecInc+0x20>
    4318:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    431c:	6769645f 			; <UNDEFINED> instruction: 0x6769645f
    4320:	00737469 	rsbseq	r7, r3, r9, ror #8
    4324:	635f435f 	cmpvs	pc, #2080374785	; 0x7c000001
    4328:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    432c:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    4330:	00656c61 	rsbeq	r6, r5, r1, ror #24
    4334:	705f6d61 	subsvc	r6, pc, r1, ror #26
    4338:	7265006d 	rsbvc	r0, r5, #109	; 0x6d
    433c:	5f645f61 	svcpl	0x00645f61
    4340:	6d665f74 	stclvs	15, cr5, [r6, #-464]!	; 0xfffffe30
    4344:	6f6e0074 	svcvs	0x006e0074
    4348:	00727473 	rsbseq	r7, r2, r3, ror r4
    434c:	6d5f636c 	ldclvs	3, cr6, [pc, #-432]	; 41a4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x1c>
    4350:	74656e6f 	strbtvc	r6, [r5], #-3695	; 0xfffff191
    4354:	5f797261 	svcpl	0x00797261
    4358:	656d0054 	strbvs	r0, [sp, #-84]!	; 0xffffffac
    435c:	67617373 			; <UNDEFINED> instruction: 0x67617373
    4360:	6f635f65 	svcvs	0x00635f65
    4364:	65736564 	ldrbvs	r6, [r3, #-1380]!	; 0xfffffa9c
    4368:	626d0074 	rsbvs	r0, sp, #116	; 0x74
    436c:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
    4370:	5f435f00 	svcpl	0x00435f00
    4374:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
    4378:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    437c:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    4380:	00656c61 	rsbeq	r6, r5, r1, ror #24
    4384:	5f746e69 	svcpl	0x00746e69
    4388:	69735f70 	ldmdbvs	r3!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    438c:	705f6e67 	subsvc	r6, pc, r7, ror #28
    4390:	006e736f 	rsbeq	r7, lr, pc, ror #6
    4394:	5f6e6f6d 	svcpl	0x006e6f6d
    4398:	756f7267 	strbvc	r7, [pc, #-615]!	; 4139 <NOROM_SetupGetTrimForRadcExtCfg+0x5>
    439c:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
    43a0:	665f5800 	ldrbvs	r5, [pc], -r0, lsl #16
    43a4:	6900746d 	stmdbvs	r0, {r0, r2, r3, r5, r6, sl, ip, sp, lr}
    43a8:	705f746e 	subsvc	r7, pc, lr, ror #8
    43ac:	5f73635f 	svcpl	0x0073635f
    43b0:	63657270 	cmnvs	r5, #112, 4
    43b4:	73656465 	cmnvc	r5, #1694498816	; 0x65000000
    43b8:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
    43bc:	6365645f 	cmnvs	r5, #1593835520	; 0x5f000000
    43c0:	6c616d69 	stclvs	13, cr6, [r1], #-420	; 0xfffffe5c
    43c4:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    43c8:	6300746e 	movwvs	r7, #1134	; 0x46e
    43cc:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    43d0:	74616400 	strbtvc	r6, [r1], #-1024	; 0xfffffc00
    43d4:	6d665f65 	stclvs	15, cr5, [r6, #-404]!	; 0xfffffe6c
    43d8:	656e0074 	strbvs	r0, [lr, #-116]!	; 0xffffff8c
    43dc:	69746167 	ldmdbvs	r4!, {r0, r1, r2, r5, r6, r8, sp, lr}^
    43e0:	735f6576 	cmpvc	pc, #494927872	; 0x1d800000
    43e4:	006e6769 	rsbeq	r6, lr, r9, ror #14
    43e8:	635f626d 	cmpvs	pc, #-805306362	; 0xd0000006
    43ec:	6d5f7275 	lfmvs	f7, 2, [pc, #-468]	; 4220 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x98>
    43f0:	77007861 	strvc	r7, [r0, -r1, ror #16]
    43f4:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    43f8:	7000745f 	andvc	r7, r0, pc, asr r4
    43fc:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    4400:	5f657669 	svcpl	0x00657669
    4404:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
    4408:	79746300 	ldmdbvc	r4!, {r8, r9, sp, lr}^
    440c:	635f6570 	cmpvs	pc, #112, 10	; 0x1c000000
    4410:	7365646f 	cmnvc	r5, #1862270976	; 0x6f000000
    4414:	6c007465 	cfstrsvs	mvf7, [r0], {101}	; 0x65
    4418:	20676e6f 	rsbcs	r6, r7, pc, ror #28
    441c:	62756f64 	rsbsvs	r6, r5, #100, 30	; 0x190
    4420:	6e00656c 	cfsh32vs	mvfx6, mvfx0, #60
    4424:	7078656f 	rsbsvc	r6, r8, pc, ror #10
    4428:	5f780072 	svcpl	0x00780072
    442c:	00746d66 	rsbseq	r6, r4, r6, ror #26
    4430:	6f627573 	svcvs	0x00627573
    4434:	72617470 	rsbvc	r7, r1, #112, 8	; 0x70000000
    4438:	6e690067 	cdpvs	0, 6, cr0, cr9, cr7, {3}
    443c:	5f705f74 	svcpl	0x00705f74
    4440:	5f706573 	svcpl	0x00706573
    4444:	735f7962 	cmpvc	pc, #1605632	; 0x188000
    4448:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    444c:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
    4450:	635f6e5f 	cmpvs	pc, #1520	; 0x5f0
    4454:	72705f73 	rsbsvc	r5, r0, #460	; 0x1cc
    4458:	64656365 	strbtvs	r6, [r5], #-869	; 0xfffffc9b
    445c:	2e007365 	cdpcs	3, 0, cr7, cr0, cr5, {3}
    4460:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4464:	2f2e2e2f 	svccs	0x002e2e2f
    4468:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    446c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4470:	2f2e2e2f 	svccs	0x002e2e2f
    4474:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    4478:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    447c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4480:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 4300 <NOROM_SetupSetAonRtcSubSecInc+0x4>
    4484:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    4488:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    448c:	6d2f6d72 	stcvs	13, cr6, [pc, #-456]!	; 42cc <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x34>
    4490:	70636d65 	rsbvc	r6, r3, r5, ror #26
    4494:	74732d79 	ldrbtvc	r2, [r3], #-3449	; 0xfffff287
    4498:	632e6275 			; <UNDEFINED> instruction: 0x632e6275
    449c:	5f646d00 	svcpl	0x00646d00
    44a0:	6564726f 	strbvs	r7, [r4, #-623]!	; 0xfffffd91
    44a4:	65790072 	ldrbvs	r0, [r9, #-114]!	; 0xffffff8e
    44a8:	72747373 	rsbsvc	r7, r4, #-872415231	; 0xcc000001
    44ac:	73657900 	cmnvc	r5, #0, 18
    44b0:	72707865 	rsbsvc	r7, r0, #6619136	; 0x650000
    44b4:	61726500 	cmnvs	r2, r0, lsl #10
    44b8:	665f645f 			; <UNDEFINED> instruction: 0x665f645f
    44bc:	6c00746d 	cfstrsvs	mvf7, [r0], {109}	; 0x6d
    44c0:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
    44c4:	5f657079 	svcpl	0x00657079
    44c8:	72650054 	rsbvc	r0, r5, #84	; 0x54
    44cc:	5f745f61 	svcpl	0x00745f61
    44d0:	00746d66 	rsbseq	r6, r4, r6, ror #26
    44d4:	6f746377 	svcvs	0x00746377
    44d8:	6d00626d 	sfmvs	f6, 4, [r0, #-436]	; 0xfffffe4c
    44dc:	745f6e6f 	ldrbvc	r6, [pc], #-3695	; 44e4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x70>
    44e0:	73756f68 	cmnvc	r5, #104, 30	; 0x1a0
    44e4:	73646e61 	cmnvc	r4, #1552	; 0x610
    44e8:	7065735f 	rsbvc	r7, r5, pc, asr r3
    44ec:	706d6100 	rsbvc	r6, sp, r0, lsl #2
    44f0:	6d665f6d 	stclvs	15, cr5, [r6, #-436]!	; 0xfffffe4c
    44f4:	636c0074 	cmnvs	ip, #116	; 0x74
    44f8:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
    44fc:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    4500:	00545f73 	subseq	r5, r4, r3, ror pc
    4504:	6b656577 	blvs	195dae8 <__ccfg+0x193db40>
    4508:	00796164 	rsbseq	r6, r9, r4, ror #2
    450c:	6d5f435f 	ldclvs	3, cr4, [pc, #-380]	; 4398 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x74>
    4510:	74656e6f 	strbtvc	r6, [r5], #-3695	; 0xfffff191
    4514:	5f797261 	svcpl	0x00797261
    4518:	61636f6c 	cmnvs	r3, ip, ror #30
    451c:	6300656c 	movwvs	r6, #1388	; 0x56c
    4520:	67657461 	strbvs	r7, [r5, -r1, ror #8]!
    4524:	6569726f 	strbvs	r7, [r9, #-623]!	; 0xfffffd91
    4528:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
    452c:	5f6e5f74 	svcpl	0x006e5f74
    4530:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
    4534:	736f705f 	cmnvc	pc, #95	; 0x5f
    4538:	6c61006e 	stclvs	0, cr0, [r1], #-440	; 0xfffffe48
    453c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
    4540:	72735f64 	rsbsvc	r5, r3, #100, 30	; 0x190
    4544:	4e470063 	cdpmi	0, 4, cr0, cr7, cr3, {3}
    4548:	31432055 	qdaddcc	r2, r5, r3
    454c:	2e382037 	mrccs	0, 1, r2, cr8, cr7, {1}
    4550:	20312e33 	eorscs	r2, r1, r3, lsr lr
    4554:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
    4558:	33303730 	teqcc	r0, #48, 14	; 0xc00000
    455c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
    4560:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    4564:	5b202965 	blpl	80eb00 <__ccfg+0x7eeb58>
    4568:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    456c:	72622d38 	rsbvc	r2, r2, #56, 26	; 0xe00
    4570:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
    4574:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
    4578:	6f697369 	svcvs	0x00697369
    457c:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
    4580:	37323033 			; <UNDEFINED> instruction: 0x37323033
    4584:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
    4588:	616f6c66 	cmnvs	pc, r6, ror #24
    458c:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
    4590:	6f733d69 	svcvs	0x00733d69
    4594:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
    4598:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
    459c:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
    45a0:	6f6c666d 	svcvs	0x006c666d
    45a4:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
    45a8:	733d6962 	teqvc	sp, #1605632	; 0x188000
    45ac:	2074666f 	rsbscs	r6, r4, pc, ror #12
    45b0:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
    45b4:	72613d75 	rsbvc	r3, r1, #7488	; 0x1d40
    45b8:	6474376d 	ldrbtvs	r3, [r4], #-1901	; 0xfffff893
    45bc:	2d20696d 			; <UNDEFINED> instruction: 0x2d20696d
    45c0:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
    45c4:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
    45c8:	7434766d 	ldrtvc	r7, [r4], #-1645	; 0xfffff993
    45cc:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    45d0:	20324f2d 	eorscs	r4, r2, sp, lsr #30
    45d4:	6f6e662d 	svcvs	0x006e662d
    45d8:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    45dc:	6e69746c 	cdpvs	4, 6, cr7, cr9, cr12, {3}
    45e0:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    45e4:	2f646c69 	svccs	0x00646c69
    45e8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    45ec:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    45f0:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    45f4:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    45f8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    45fc:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    4600:	622f302e 	eorvs	r3, pc, #46	; 0x2e
    4604:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    4608:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    460c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4610:	61652d65 	cmnvs	r5, r5, ror #26
    4614:	742f6962 	strtvc	r6, [pc], #-2402	; 461c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    4618:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    461c:	666f6e2f 	strbtvs	r6, [pc], -pc, lsr #28
    4620:	656e2f70 	strbvs	r2, [lr, #-3952]!	; 0xfffff090
    4624:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4628:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    462c:	616d2f63 	cmnvs	sp, r3, ror #30
    4630:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    4634:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    4638:	656c006d 	strbvs	r0, [ip, #-109]!	; 0xffffff93
    463c:	6900306e 	stmdbvs	r0, {r1, r2, r3, r5, r6, ip, sp}
    4640:	665f746e 	ldrbvs	r7, [pc], -lr, ror #8
    4644:	5f636172 	svcpl	0x00636172
    4648:	69676964 	stmdbvs	r7!, {r2, r5, r6, r8, fp, sp, lr}^
    464c:	73007374 	movwvc	r7, #884	; 0x374
    4650:	00306372 	eorseq	r6, r0, r2, ror r3
    4654:	5f746c61 	svcpl	0x00746c61
    4658:	746e6f6d 	strbtvc	r6, [lr], #-3949	; 0xfffff093
    465c:	2e2e0068 	cdpcs	0, 2, cr0, cr14, cr8, {3}
    4660:	2f2e2e2f 	svccs	0x002e2e2f
    4664:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4668:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    466c:	2f2e2e2f 	svccs	0x002e2e2f
    4670:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    4674:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4678:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    467c:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    4680:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    4684:	61722f62 	cmnvs	r2, r2, ror #30
    4688:	632e646e 			; <UNDEFINED> instruction: 0x632e646e
    468c:	61727300 	cmnvs	r2, r0, lsl #6
    4690:	2f00646e 	svccs	0x0000646e
    4694:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4698:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    469c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    46a0:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    46a4:	2f787945 	svccs	0x00787945
    46a8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    46ac:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    46b0:	302e332e 	eorcc	r3, lr, lr, lsr #6
    46b4:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    46b8:	612f646c 			; <UNDEFINED> instruction: 0x612f646c
    46bc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    46c0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    46c4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    46c8:	7568742f 	strbvc	r7, [r8, #-1071]!	; 0xfffffbd1
    46cc:	6e2f626d 	cdpvs	2, 2, cr6, cr15, cr13, {3}
    46d0:	2f70666f 	svccs	0x0070666f
    46d4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    46d8:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 453c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    46dc:	2f636269 	svccs	0x00636269
    46e0:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    46e4:	2f006269 	svccs	0x00006269
    46e8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    46ec:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    46f0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    46f4:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    46f8:	2f787945 	svccs	0x00787945
    46fc:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4700:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    4704:	302e332e 	eorcc	r3, lr, lr, lsr #6
    4708:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    470c:	612f646c 			; <UNDEFINED> instruction: 0x612f646c
    4710:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4714:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4718:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    471c:	7568742f 	strbvc	r7, [r8, #-1071]!	; 0xfffffbd1
    4720:	6e2f626d 	cdpvs	2, 2, cr6, cr15, cr13, {3}
    4724:	2f70666f 	svccs	0x0070666f
    4728:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    472c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 4590 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x11c>
    4730:	2f636269 	svccs	0x00636269
    4734:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    4738:	6d690074 	stclvs	0, cr0, [r9, #-464]!	; 0xfffffe30
    473c:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
    4740:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    4744:	2e2e0061 	cdpcs	0, 2, cr0, cr14, cr1, {3}
    4748:	2f2e2e2f 	svccs	0x002e2e2f
    474c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4750:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4754:	2f2e2e2f 	svccs	0x002e2e2f
    4758:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    475c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4760:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4764:	722f6362 	eorvc	r6, pc, #-2013265919	; 0x88000001
    4768:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    476c:	706d692f 	rsbvc	r6, sp, pc, lsr #18
    4770:	2e657275 	mcrcs	2, 3, r7, cr5, cr5, {3}
    4774:	41540063 	cmpmi	r4, r3, rrx
    4778:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    477c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4780:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4784:	61786574 	cmnvs	r8, r4, ror r5
    4788:	6f633731 	svcvs	0x00633731
    478c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4790:	69003761 	stmdbvs	r0, {r0, r5, r6, r8, r9, sl, ip, sp}
    4794:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4798:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
    479c:	62645f70 	rsbvs	r5, r4, #112, 30	; 0x1c0
    47a0:	7261006c 	rsbvc	r0, r1, #108	; 0x6c
    47a4:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    47a8:	695f6863 	ldmdbvs	pc, {r0, r1, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
    47ac:	786d6d77 	stmdavc	sp!, {r0, r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    47b0:	41540074 	cmpmi	r4, r4, ror r0
    47b4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    47b8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    47bc:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    47c0:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    47c4:	41003332 	tstmi	r0, r2, lsr r3
    47c8:	455f4d52 	ldrbmi	r4, [pc, #-3410]	; 3a7e <NOROM_RFCSynthPowerDown+0x4a>
    47cc:	41540051 	cmpmi	r4, r1, asr r0
    47d0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    47d4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    47d8:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    47dc:	36353131 			; <UNDEFINED> instruction: 0x36353131
    47e0:	73663274 	cmnvc	r6, #116, 4	; 0x40000007
    47e4:	61736900 	cmnvs	r3, r0, lsl #18
    47e8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    47ec:	7568745f 	strbvc	r7, [r8, #-1119]!	; 0xfffffba1
    47f0:	5400626d 	strpl	r6, [r0], #-621	; 0xfffffd93
    47f4:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    47f8:	50435f54 	subpl	r5, r3, r4, asr pc
    47fc:	6f635f55 	svcvs	0x00635f55
    4800:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4804:	63373561 	teqvs	r7, #406847488	; 0x18400000
    4808:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    480c:	33356178 	teqcc	r5, #120, 2
    4810:	6d5f5f00 	ldclvs	15, cr5, [pc, #-0]	; 4818 <memcpy+0xc>
    4814:	69646c75 	stmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    4818:	41420033 	cmpmi	r2, r3, lsr r0
    481c:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4820:	5f484352 	svcpl	0x00484352
    4824:	425f4d38 	subsmi	r4, pc, #56, 26	; 0xe00
    4828:	00455341 	subeq	r5, r5, r1, asr #6
    482c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4830:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4834:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4838:	31386d72 	teqcc	r8, r2, ror sp
    483c:	41540030 	cmpmi	r4, r0, lsr r0
    4840:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4844:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4848:	6567785f 	strbvs	r7, [r7, #-2143]!	; 0xfffff7a1
    484c:	0031656e 	eorseq	r6, r1, lr, ror #10
    4850:	5f4d5241 	svcpl	0x004d5241
    4854:	5f534350 	svcpl	0x00534350
    4858:	43504141 	cmpmi	r0, #1073741840	; 0x40000010
    485c:	57495f53 	smlsldpl	r5, r9, r3, pc	; <UNPREDICTABLE>
    4860:	54584d4d 	ldrbpl	r4, [r8], #-3405	; 0xfffff2b3
    4864:	53414200 	movtpl	r4, #4608	; 0x1200
    4868:	52415f45 	subpl	r5, r1, #276	; 0x114
    486c:	305f4843 	subscc	r4, pc, r3, asr #16
    4870:	53414200 	movtpl	r4, #4608	; 0x1200
    4874:	52415f45 	subpl	r5, r1, #276	; 0x114
    4878:	325f4843 	subscc	r4, pc, #4390912	; 0x430000
    487c:	53414200 	movtpl	r4, #4608	; 0x1200
    4880:	52415f45 	subpl	r5, r1, #276	; 0x114
    4884:	335f4843 	cmpcc	pc, #4390912	; 0x430000
    4888:	53414200 	movtpl	r4, #4608	; 0x1200
    488c:	52415f45 	subpl	r5, r1, #276	; 0x114
    4890:	345f4843 	ldrbcc	r4, [pc], #-2115	; 4898 <memcpy+0x8c>
    4894:	53414200 	movtpl	r4, #4608	; 0x1200
    4898:	52415f45 	subpl	r5, r1, #276	; 0x114
    489c:	365f4843 	ldrbcc	r4, [pc], -r3, asr #16
    48a0:	53414200 	movtpl	r4, #4608	; 0x1200
    48a4:	52415f45 	subpl	r5, r1, #276	; 0x114
    48a8:	375f4843 	ldrbcc	r4, [pc, -r3, asr #16]
    48ac:	52415400 	subpl	r5, r1, #0, 8
    48b0:	5f544547 	svcpl	0x00544547
    48b4:	5f555043 	svcpl	0x00555043
    48b8:	61637378 	smcvs	14136	; 0x3738
    48bc:	6800656c 	stmdavs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    48c0:	00686769 	rsbeq	r6, r8, r9, ror #14
    48c4:	5f617369 	svcpl	0x00617369
    48c8:	5f746962 	svcpl	0x00746962
    48cc:	64657270 	strbtvs	r7, [r5], #-624	; 0xfffffd90
    48d0:	00736572 	rsbseq	r6, r3, r2, ror r5
    48d4:	47524154 			; <UNDEFINED> instruction: 0x47524154
    48d8:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    48dc:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    48e0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    48e4:	33336d78 	teqcc	r3, #120, 26	; 0x1e00
    48e8:	49535500 	ldmdbmi	r3, {r8, sl, ip, lr}^
    48ec:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    48f0:	2f2e2e00 	svccs	0x002e2e00
    48f4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    48f8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    48fc:	2f2e2e2f 	svccs	0x002e2e2f
    4900:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    4904:	6c2f6363 	stcvs	3, cr6, [pc], #-396	; 4780 <NOROM_ChipInfo_GetHwRevision+0x28>
    4908:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    490c:	632e3263 			; <UNDEFINED> instruction: 0x632e3263
    4910:	52415400 	subpl	r5, r1, #0, 8
    4914:	5f544547 	svcpl	0x00544547
    4918:	5f555043 	svcpl	0x00555043
    491c:	376d7261 	strbcc	r7, [sp, -r1, ror #4]!
    4920:	696d6474 	stmdbvs	sp!, {r2, r4, r5, r6, sl, sp, lr}^
    4924:	61736900 	cmnvs	r3, r0, lsl #18
    4928:	626f6e5f 	rsbvs	r6, pc, #1520	; 0x5f0
    492c:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    4930:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4934:	50435f54 	subpl	r5, r3, r4, asr pc
    4938:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    493c:	3731316d 	ldrcc	r3, [r1, -sp, ror #2]!
    4940:	667a6a36 			; <UNDEFINED> instruction: 0x667a6a36
    4944:	73690073 	cmnvc	r9, #115	; 0x73
    4948:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    494c:	66765f74 	uhsub16vs	r5, r6, r4
    4950:	00327670 	eorseq	r7, r2, r0, ror r6
    4954:	5f4d5241 	svcpl	0x004d5241
    4958:	5f534350 	svcpl	0x00534350
    495c:	4e4b4e55 	mcrmi	14, 2, r4, cr11, cr5, {2}
    4960:	004e574f 	subeq	r5, lr, pc, asr #14
    4964:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4968:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    496c:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4970:	65396d72 	ldrvs	r6, [r9, #-3442]!	; 0xfffff28e
    4974:	53414200 	movtpl	r4, #4608	; 0x1200
    4978:	52415f45 	subpl	r5, r1, #276	; 0x114
    497c:	355f4843 	ldrbcc	r4, [pc, #-2115]	; 4141 <NOROM_SetupGetTrimForRadcExtCfg+0xd>
    4980:	004a4554 	subeq	r4, sl, r4, asr r5
    4984:	5f6d7261 	svcpl	0x006d7261
    4988:	73666363 	cmnvc	r6, #-1946157055	; 0x8c000001
    498c:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
    4990:	00657461 	rsbeq	r7, r5, r1, ror #8
    4994:	5f6d7261 	svcpl	0x006d7261
    4998:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    499c:	00657435 	rsbeq	r7, r5, r5, lsr r4
    49a0:	70736e75 	rsbsvc	r6, r3, r5, ror lr
    49a4:	735f6365 	cmpvc	pc, #-1811939327	; 0x94000001
    49a8:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    49ac:	69007367 	stmdbvs	r0, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}
    49b0:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    49b4:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
    49b8:	5f006365 	svcpl	0x00006365
    49bc:	7a6c635f 	bvc	1b1d740 <__ccfg+0x1afd798>
    49c0:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
    49c4:	4d524100 	ldfmie	f4, [r2, #-0]
    49c8:	0043565f 	subeq	r5, r3, pc, asr r6
    49cc:	5f6d7261 	svcpl	0x006d7261
    49d0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    49d4:	6373785f 	cmnvs	r3, #6225920	; 0x5f0000
    49d8:	00656c61 	rsbeq	r6, r5, r1, ror #24
    49dc:	5f4d5241 	svcpl	0x004d5241
    49e0:	4400454c 	strmi	r4, [r0], #-1356	; 0xfffffab4
    49e4:	696e7557 	stmdbvs	lr!, {r0, r1, r2, r4, r6, r8, sl, ip, sp, lr}^
    49e8:	41006e6f 	tstmi	r0, pc, ror #28
    49ec:	565f4d52 			; <UNDEFINED> instruction: 0x565f4d52
    49f0:	52410053 	subpl	r0, r1, #83	; 0x53
    49f4:	45475f4d 	strbmi	r5, [r7, #-3917]	; 0xfffff0b3
    49f8:	6d726100 	ldfvse	f6, [r2, #-0]
    49fc:	6e75745f 	mrcvs	4, 3, r7, cr5, cr15, {2}
    4a00:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
    4a04:	676e6f72 			; <UNDEFINED> instruction: 0x676e6f72
    4a08:	006d7261 	rsbeq	r7, sp, r1, ror #4
    4a0c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    4a10:	2078656c 	rsbscs	r6, r8, ip, ror #10
    4a14:	616f6c66 	cmnvs	pc, r6, ror #24
    4a18:	41540074 	cmpmi	r4, r4, ror r0
    4a1c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4a20:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4a24:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4a28:	61786574 	cmnvs	r8, r4, ror r5
    4a2c:	54003531 	strpl	r3, [r0], #-1329	; 0xfffffacf
    4a30:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4a34:	50435f54 	subpl	r5, r3, r4, asr pc
    4a38:	61665f55 	cmnvs	r6, r5, asr pc
    4a3c:	74363237 	ldrtvc	r3, [r6], #-567	; 0xfffffdc9
    4a40:	41540065 	cmpmi	r4, r5, rrx
    4a44:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4a48:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4a4c:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4a50:	61786574 	cmnvs	r8, r4, ror r5
    4a54:	41003731 	tstmi	r0, r1, lsr r7
    4a58:	475f4d52 			; <UNDEFINED> instruction: 0x475f4d52
    4a5c:	41540054 	cmpmi	r4, r4, asr r0
    4a60:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4a64:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4a68:	6f656e5f 	svcvs	0x00656e5f
    4a6c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    4a70:	00316e65 	eorseq	r6, r1, r5, ror #28
    4a74:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4a78:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4a7c:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4a80:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4a84:	66347278 			; <UNDEFINED> instruction: 0x66347278
    4a88:	53414200 	movtpl	r4, #4608	; 0x1200
    4a8c:	52415f45 	subpl	r5, r1, #276	; 0x114
    4a90:	375f4843 	ldrbcc	r4, [pc, -r3, asr #16]
    4a94:	47004d45 	strmi	r4, [r0, -r5, asr #26]
    4a98:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
    4a9c:	39203731 	stmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
    4aa0:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    4aa4:	31303220 	teqcc	r0, r0, lsr #4
    4aa8:	32303139 	eorscc	r3, r0, #1073741838	; 0x4000000e
    4aac:	72282035 	eorvc	r2, r8, #53	; 0x35
    4ab0:	61656c65 	cmnvs	r5, r5, ror #24
    4ab4:	20296573 	eorcs	r6, r9, r3, ror r5
    4ab8:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
    4abc:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4ac0:	622d392d 	eorvs	r3, sp, #737280	; 0xb4000
    4ac4:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
    4ac8:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
    4acc:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    4ad0:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
    4ad4:	39353737 	ldmdbcc	r5!, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}
    4ad8:	2d205d39 	stccs	13, cr5, [r0, #-228]!	; 0xffffff1c
    4adc:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
    4ae0:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
    4ae4:	6f6c666d 	svcvs	0x006c666d
    4ae8:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
    4aec:	733d6962 	teqvc	sp, #1605632	; 0x188000
    4af0:	2074666f 	rsbscs	r6, r4, pc, ror #12
    4af4:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
    4af8:	72613d75 	rsbvc	r3, r1, #7488	; 0x1d40
    4afc:	6474376d 	ldrbtvs	r3, [r4], #-1901	; 0xfffff893
    4b00:	2d20696d 			; <UNDEFINED> instruction: 0x2d20696d
    4b04:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
    4b08:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
    4b0c:	7434766d 	ldrtvc	r7, [r4], #-1645	; 0xfffff993
    4b10:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    4b14:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    4b18:	4f2d2067 	svcmi	0x002d2067
    4b1c:	4f2d2032 	svcmi	0x002d2032
    4b20:	4f2d2032 	svcmi	0x002d2032
    4b24:	662d2032 			; <UNDEFINED> instruction: 0x662d2032
    4b28:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4b2c:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    4b30:	62696c2d 	rsbvs	r6, r9, #11520	; 0x2d00
    4b34:	20636367 	rsbcs	r6, r3, r7, ror #6
    4b38:	6f6e662d 	svcvs	0x006e662d
    4b3c:	6174732d 	cmnvs	r4, sp, lsr #6
    4b40:	702d6b63 	eorvc	r6, sp, r3, ror #22
    4b44:	65746f72 	ldrbvs	r6, [r4, #-3954]!	; 0xfffff08e
    4b48:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    4b4c:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
    4b50:	6e692d6f 	cdpvs	13, 6, cr2, cr9, cr15, {3}
    4b54:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
    4b58:	76662d20 	strbtvc	r2, [r6], -r0, lsr #26
    4b5c:	62697369 	rsbvs	r7, r9, #-1543503871	; 0xa4000001
    4b60:	74696c69 	strbtvc	r6, [r9], #-3177	; 0xfffff397
    4b64:	69683d79 	stmdbvs	r8!, {r0, r3, r4, r5, r6, r8, sl, fp, ip, sp}^
    4b68:	6e656464 	cdpvs	4, 6, cr6, cr5, cr4, {3}
    4b6c:	52415400 	subpl	r5, r1, #0, 8
    4b70:	5f544547 	svcpl	0x00544547
    4b74:	5f555043 	svcpl	0x00555043
    4b78:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4b7c:	31617865 	cmncc	r1, r5, ror #16
    4b80:	61680032 	cmnvs	r8, r2, lsr r0
    4b84:	61766873 	cmnvs	r6, r3, ror r8
    4b88:	00745f6c 	rsbseq	r5, r4, ip, ror #30
    4b8c:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4b90:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4b94:	4b365f48 	blmi	d9c8bc <__ccfg+0xd7c914>
    4b98:	7369005a 	cmnvc	r9, #90	; 0x5a
    4b9c:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4ba0:	61007374 	tstvs	r0, r4, ror r3
    4ba4:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    4ba8:	5f686372 	svcpl	0x00686372
    4bac:	5f6d7261 	svcpl	0x006d7261
    4bb0:	69647768 	stmdbvs	r4!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    4bb4:	72610076 	rsbvc	r0, r1, #118	; 0x76
    4bb8:	70665f6d 	rsbvc	r5, r6, sp, ror #30
    4bbc:	65645f75 	strbvs	r5, [r4, #-3957]!	; 0xfffff08b
    4bc0:	69006373 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    4bc4:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4bc8:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
    4bcc:	00363170 	eorseq	r3, r6, r0, ror r1
    4bd0:	5f4d5241 	svcpl	0x004d5241
    4bd4:	69004948 	stmdbvs	r0, {r3, r6, r8, fp, lr}
    4bd8:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4bdc:	615f7469 	cmpvs	pc, r9, ror #8
    4be0:	00766964 	rsbseq	r6, r6, r4, ror #18
    4be4:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4be8:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4bec:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4bf0:	31316d72 	teqcc	r1, r2, ror sp
    4bf4:	736a3633 	cmnvc	sl, #53477376	; 0x3300000
    4bf8:	52415400 	subpl	r5, r1, #0, 8
    4bfc:	5f544547 	svcpl	0x00544547
    4c00:	5f555043 	svcpl	0x00555043
    4c04:	386d7261 	stmdacc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    4c08:	52415400 	subpl	r5, r1, #0, 8
    4c0c:	5f544547 	svcpl	0x00544547
    4c10:	5f555043 	svcpl	0x00555043
    4c14:	396d7261 	stmdbcc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    4c18:	52415400 	subpl	r5, r1, #0, 8
    4c1c:	5f544547 	svcpl	0x00544547
    4c20:	5f555043 	svcpl	0x00555043
    4c24:	32366166 	eorscc	r6, r6, #-2147483623	; 0x80000019
    4c28:	72610036 	rsbvc	r0, r1, #54	; 0x36
    4c2c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    4c30:	635f6863 	cmpvs	pc, #6488064	; 0x630000
    4c34:	0065736d 	rsbeq	r7, r5, sp, ror #6
    4c38:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4c3c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4c40:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4c44:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4c48:	00346d78 	eorseq	r6, r4, r8, ror sp
    4c4c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4c50:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4c54:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4c58:	30316d72 	eorscc	r6, r1, r2, ror sp
    4c5c:	41540065 	cmpmi	r4, r5, rrx
    4c60:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4c64:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4c68:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4c6c:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    4c70:	72610037 	rsbvc	r0, r1, #55	; 0x37
    4c74:	6f635f6d 	svcvs	0x00635f6d
    4c78:	635f646e 	cmpvs	pc, #1845493760	; 0x6e000000
    4c7c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    4c80:	5f4d5241 	svcpl	0x004d5241
    4c84:	5f534350 	svcpl	0x00534350
    4c88:	43504141 	cmpmi	r0, #1073741840	; 0x40000010
    4c8c:	73690053 	cmnvc	r9, #83	; 0x53
    4c90:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4c94:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
    4c98:	5f38766d 	svcpl	0x0038766d
    4c9c:	41420032 	cmpmi	r2, r2, lsr r0
    4ca0:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4ca4:	5f484352 	svcpl	0x00484352
    4ca8:	54004d33 	strpl	r4, [r0], #-3379	; 0xfffff2cd
    4cac:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4cb0:	50435f54 	subpl	r5, r3, r4, asr pc
    4cb4:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    4cb8:	3031376d 	eorscc	r3, r1, sp, ror #14
    4cbc:	72610074 	rsbvc	r0, r1, #116	; 0x74
    4cc0:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    4cc4:	695f6863 	ldmdbvs	pc, {r0, r1, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
    4cc8:	786d6d77 	stmdavc	sp!, {r0, r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    4ccc:	69003274 	stmdbvs	r0, {r2, r4, r5, r6, r9, ip, sp}
    4cd0:	6e5f6173 	mrcvs	1, 2, r6, cr15, cr3, {3}
    4cd4:	625f6d75 	subsvs	r6, pc, #7488	; 0x1d40
    4cd8:	00737469 	rsbseq	r7, r3, r9, ror #8
    4cdc:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4ce0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4ce4:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4ce8:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4cec:	70306d78 	eorsvc	r6, r0, r8, ror sp
    4cf0:	7373756c 	cmnvc	r3, #108, 10	; 0x1b000000
    4cf4:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    4cf8:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
    4cfc:	796c7069 	stmdbvc	ip!, {r0, r3, r5, r6, ip, sp, lr}^
    4d00:	52415400 	subpl	r5, r1, #0, 8
    4d04:	5f544547 	svcpl	0x00544547
    4d08:	5f555043 	svcpl	0x00555043
    4d0c:	6e797865 	cdpvs	8, 7, cr7, cr9, cr5, {3}
    4d10:	316d736f 	cmncc	sp, pc, ror #6
    4d14:	52415400 	subpl	r5, r1, #0, 8
    4d18:	5f544547 	svcpl	0x00544547
    4d1c:	5f555043 	svcpl	0x00555043
    4d20:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4d24:	35727865 	ldrbcc	r7, [r2, #-2149]!	; 0xfffff79b
    4d28:	73690032 	cmnvc	r9, #50	; 0x32
    4d2c:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4d30:	64745f74 	ldrbtvs	r5, [r4], #-3956	; 0xfffff08c
    4d34:	70007669 	andvc	r7, r0, r9, ror #12
    4d38:	65666572 	strbvs	r6, [r6, #-1394]!	; 0xfffffa8e
    4d3c:	656e5f72 	strbvs	r5, [lr, #-3954]!	; 0xfffff08e
    4d40:	665f6e6f 	ldrbvs	r6, [pc], -pc, ror #28
    4d44:	365f726f 	ldrbcc	r7, [pc], -pc, ror #4
    4d48:	74696234 	strbtvc	r6, [r9], #-564	; 0xfffffdcc
    4d4c:	73690073 	cmnvc	r9, #115	; 0x73
    4d50:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4d54:	70665f74 	rsbvc	r5, r6, r4, ror pc
    4d58:	6d663631 	stclvs	6, cr3, [r6, #-196]!	; 0xffffff3c
    4d5c:	4154006c 	cmpmi	r4, ip, rrx
    4d60:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4d64:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4d68:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4d6c:	61786574 	cmnvs	r8, r4, ror r5
    4d70:	54003233 	strpl	r3, [r0], #-563	; 0xfffffdcd
    4d74:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4d78:	50435f54 	subpl	r5, r3, r4, asr pc
    4d7c:	6f635f55 	svcvs	0x00635f55
    4d80:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4d84:	00353361 	eorseq	r3, r5, r1, ror #6
    4d88:	5f617369 	svcpl	0x00617369
    4d8c:	5f746962 	svcpl	0x00746962
    4d90:	36317066 	ldrtcc	r7, [r1], -r6, rrx
    4d94:	766e6f63 	strbtvc	r6, [lr], -r3, ror #30
    4d98:	736e7500 	cmnvc	lr, #0, 10
    4d9c:	76636570 			; <UNDEFINED> instruction: 0x76636570
    4da0:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    4da4:	73676e69 	cmnvc	r7, #1680	; 0x690
    4da8:	52415400 	subpl	r5, r1, #0, 8
    4dac:	5f544547 	svcpl	0x00544547
    4db0:	5f555043 	svcpl	0x00555043
    4db4:	316d7261 	cmncc	sp, r1, ror #4
    4db8:	74363531 	ldrtvc	r3, [r6], #-1329	; 0xfffffacf
    4dbc:	54007332 	strpl	r7, [r0], #-818	; 0xfffffcce
    4dc0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4dc4:	50435f54 	subpl	r5, r3, r4, asr pc
    4dc8:	6f635f55 	svcvs	0x00635f55
    4dcc:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4dd0:	63353761 	teqvs	r5, #25427968	; 0x1840000
    4dd4:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4dd8:	35356178 	ldrcc	r6, [r5, #-376]!	; 0xfffffe88
    4ddc:	52415400 	subpl	r5, r1, #0, 8
    4de0:	5f544547 	svcpl	0x00544547
    4de4:	5f555043 	svcpl	0x00555043
    4de8:	30366166 	eorscc	r6, r6, r6, ror #2
    4dec:	00657436 	rsbeq	r7, r5, r6, lsr r4
    4df0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4df4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4df8:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4dfc:	32396d72 	eorscc	r6, r9, #7296	; 0x1c80
    4e00:	736a6536 	cmnvc	sl, #226492416	; 0xd800000
    4e04:	53414200 	movtpl	r4, #4608	; 0x1200
    4e08:	52415f45 	subpl	r5, r1, #276	; 0x114
    4e0c:	345f4843 	ldrbcc	r4, [pc], #-2115	; 4e14 <__aeabi_lmul+0x510>
    4e10:	73690054 	cmnvc	r9, #84	; 0x54
    4e14:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4e18:	72635f74 	rsbvc	r5, r3, #116, 30	; 0x1d0
    4e1c:	6f747079 	svcvs	0x00747079
    4e20:	6d726100 	ldfvse	f6, [r2, #-0]
    4e24:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    4e28:	6e695f73 	mcrvs	15, 3, r5, cr9, cr3, {3}
    4e2c:	7165735f 	cmnvc	r5, pc, asr r3
    4e30:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    4e34:	73690065 	cmnvc	r9, #101	; 0x65
    4e38:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4e3c:	62735f74 	rsbsvs	r5, r3, #116, 30	; 0x1d0
    4e40:	53414200 	movtpl	r4, #4608	; 0x1200
    4e44:	52415f45 	subpl	r5, r1, #276	; 0x114
    4e48:	355f4843 	ldrbcc	r4, [pc, #-2115]	; 460d <NOROM_SysCtrlSetRechargeBeforePowerDown+0x199>
    4e4c:	69004554 	stmdbvs	r0, {r2, r4, r6, r8, sl, lr}
    4e50:	665f6173 			; <UNDEFINED> instruction: 0x665f6173
    4e54:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0xfffffe9b
    4e58:	69006572 	stmdbvs	r0, {r1, r4, r5, r6, r8, sl, sp, lr}
    4e5c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4e60:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
    4e64:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    4e68:	006c756d 	rsbeq	r7, ip, sp, ror #10
    4e6c:	5f6d7261 	svcpl	0x006d7261
    4e70:	676e616c 	strbvs	r6, [lr, -ip, ror #2]!
    4e74:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    4e78:	5f747570 	svcpl	0x00747570
    4e7c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
    4e80:	615f7463 	cmpvs	pc, r3, ror #8
    4e84:	69727474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, sp, lr}^
    4e88:	65747562 	ldrbvs	r7, [r4, #-1378]!	; 0xfffffa9e
    4e8c:	6f685f73 	svcvs	0x00685f73
    4e90:	69006b6f 	stmdbvs	r0, {r0, r1, r2, r3, r5, r6, r8, r9, fp, sp, lr}
    4e94:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4e98:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
    4e9c:	33645f70 	cmncc	r4, #112, 30	; 0x1c0
    4ea0:	52410032 	subpl	r0, r1, #50	; 0x32
    4ea4:	454e5f4d 	strbmi	r5, [lr, #-3917]	; 0xfffff0b3
    4ea8:	61736900 	cmnvs	r3, r0, lsl #18
    4eac:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4eb0:	3865625f 	stmdacc	r5!, {r0, r1, r2, r3, r4, r6, r9, sp, lr}^
    4eb4:	52415400 	subpl	r5, r1, #0, 8
    4eb8:	5f544547 	svcpl	0x00544547
    4ebc:	5f555043 	svcpl	0x00555043
    4ec0:	316d7261 	cmncc	sp, r1, ror #4
    4ec4:	6a363731 	bvs	d92b90 <__ccfg+0xd72be8>
    4ec8:	7000737a 	andvc	r7, r0, sl, ror r3
    4ecc:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xfffff08e
    4ed0:	726f7373 	rsbvc	r7, pc, #-872415231	; 0xcc000001
    4ed4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    4ed8:	6c610065 	stclvs	0, cr0, [r1], #-404	; 0xfffffe6c
    4edc:	70665f6c 	rsbvc	r5, r6, ip, ror #30
    4ee0:	61007375 	tstvs	r0, r5, ror r3
    4ee4:	705f6d72 	subsvc	r6, pc, r2, ror sp	; <UNPREDICTABLE>
    4ee8:	42007363 	andmi	r7, r0, #-1946157055	; 0x8c000001
    4eec:	5f455341 	svcpl	0x00455341
    4ef0:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    4ef4:	0054355f 	subseq	r3, r4, pc, asr r5
    4ef8:	5f6d7261 	svcpl	0x006d7261
    4efc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4f00:	54007434 	strpl	r7, [r0], #-1076	; 0xfffffbcc
    4f04:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4f08:	50435f54 	subpl	r5, r3, r4, asr pc
    4f0c:	6f635f55 	svcvs	0x00635f55
    4f10:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4f14:	63363761 	teqvs	r6, #25427968	; 0x1840000
    4f18:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4f1c:	35356178 	ldrcc	r6, [r5, #-376]!	; 0xfffffe88
    4f20:	6d726100 	ldfvse	f6, [r2, #-0]
    4f24:	6e75745f 	mrcvs	4, 3, r7, cr5, cr15, {2}
    4f28:	62775f65 	rsbsvs	r5, r7, #404	; 0x194
    4f2c:	68006675 	stmdavs	r0, {r0, r2, r4, r5, r6, r9, sl, sp, lr}
    4f30:	5f626174 	svcpl	0x00626174
    4f34:	68736168 	ldmdavs	r3!, {r3, r5, r6, r8, sp, lr}^
    4f38:	61736900 	cmnvs	r3, r0, lsl #18
    4f3c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4f40:	6975715f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, ip, sp, lr}^
    4f44:	6e5f6b72 	vmovvs.s8	r6, d15[3]
    4f48:	6f765f6f 	svcvs	0x00765f6f
    4f4c:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    4f50:	635f656c 	cmpvs	pc, #108, 10	; 0x1b000000
    4f54:	41540065 	cmpmi	r4, r5, rrx
    4f58:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4f5c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4f60:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4f64:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    4f68:	41540030 	cmpmi	r4, r0, lsr r0
    4f6c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4f70:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4f74:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4f78:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    4f7c:	41540031 	cmpmi	r4, r1, lsr r0
    4f80:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4f84:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4f88:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4f8c:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    4f90:	73690033 	cmnvc	r9, #51	; 0x33
    4f94:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4f98:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
    4f9c:	5f38766d 	svcpl	0x0038766d
    4fa0:	72610031 	rsbvc	r0, r1, #49	; 0x31
    4fa4:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    4fa8:	6e5f6863 	cdpvs	8, 5, cr6, cr15, cr3, {3}
    4fac:	00656d61 	rsbeq	r6, r5, r1, ror #26
    4fb0:	5f617369 	svcpl	0x00617369
    4fb4:	5f746962 	svcpl	0x00746962
    4fb8:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    4fbc:	00335f38 	eorseq	r5, r3, r8, lsr pc
    4fc0:	5f617369 	svcpl	0x00617369
    4fc4:	5f746962 	svcpl	0x00746962
    4fc8:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    4fcc:	00345f38 	eorseq	r5, r4, r8, lsr pc
    4fd0:	5f617369 	svcpl	0x00617369
    4fd4:	5f746962 	svcpl	0x00746962
    4fd8:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    4fdc:	00355f38 	eorseq	r5, r5, r8, lsr pc
    4fe0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4fe4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4fe8:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4fec:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4ff0:	33356178 	teqcc	r5, #120, 2
    4ff4:	52415400 	subpl	r5, r1, #0, 8
    4ff8:	5f544547 	svcpl	0x00544547
    4ffc:	5f555043 	svcpl	0x00555043
    5000:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    5004:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    5008:	41540035 	cmpmi	r4, r5, lsr r0
    500c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5010:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5014:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    5018:	61786574 	cmnvs	r8, r4, ror r5
    501c:	54003735 	strpl	r3, [r0], #-1845	; 0xfffff8cb
    5020:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5024:	50435f54 	subpl	r5, r3, r4, asr pc
    5028:	706d5f55 	rsbvc	r5, sp, r5, asr pc
    502c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    5030:	52415400 	subpl	r5, r1, #0, 8
    5034:	5f544547 	svcpl	0x00544547
    5038:	5f555043 	svcpl	0x00555043
    503c:	5f6d7261 	svcpl	0x006d7261
    5040:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5044:	6d726100 	ldfvse	f6, [r2, #-0]
    5048:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    504c:	6f6e5f68 	svcvs	0x006e5f68
    5050:	54006d74 	strpl	r6, [r0], #-3444	; 0xfffff28c
    5054:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5058:	50435f54 	subpl	r5, r3, r4, asr pc
    505c:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    5060:	3230316d 	eorscc	r3, r0, #1073741851	; 0x4000001b
    5064:	736a6536 	cmnvc	sl, #226492416	; 0xd800000
    5068:	53414200 	movtpl	r4, #4608	; 0x1200
    506c:	52415f45 	subpl	r5, r1, #276	; 0x114
    5070:	365f4843 	ldrbcc	r4, [pc], -r3, asr #16
    5074:	4142004a 	cmpmi	r2, sl, asr #32
    5078:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    507c:	5f484352 	svcpl	0x00484352
    5080:	42004b36 	andmi	r4, r0, #55296	; 0xd800
    5084:	5f455341 	svcpl	0x00455341
    5088:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    508c:	004d365f 	subeq	r3, sp, pc, asr r6
    5090:	5f617369 	svcpl	0x00617369
    5094:	5f746962 	svcpl	0x00746962
    5098:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    509c:	54007478 	strpl	r7, [r0], #-1144	; 0xfffffb88
    50a0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    50a4:	50435f54 	subpl	r5, r3, r4, asr pc
    50a8:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    50ac:	3331316d 	teqcc	r1, #1073741851	; 0x4000001b
    50b0:	73666a36 	cmnvc	r6, #221184	; 0x36000
    50b4:	4d524100 	ldfmie	f4, [r2, #-0]
    50b8:	00534c5f 	subseq	r4, r3, pc, asr ip
    50bc:	5f4d5241 	svcpl	0x004d5241
    50c0:	4200544c 	andmi	r5, r0, #76, 8	; 0x4c000000
    50c4:	5f455341 	svcpl	0x00455341
    50c8:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    50cc:	005a365f 	subseq	r3, sl, pc, asr r6
    50d0:	5f4d5241 	svcpl	0x004d5241
    50d4:	5f534350 	svcpl	0x00534350
    50d8:	43504141 	cmpmi	r0, #1073741840	; 0x40000010
    50dc:	46565f53 	usaxmi	r5, r6, r3
    50e0:	41540050 	cmpmi	r4, r0, asr r0
    50e4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    50e8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    50ec:	6d77695f 			; <UNDEFINED> instruction: 0x6d77695f
    50f0:	3274786d 	rsbscc	r7, r4, #7143424	; 0x6d0000
    50f4:	61736900 	cmnvs	r3, r0, lsl #18
    50f8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    50fc:	6f656e5f 	svcvs	0x00656e5f
    5100:	7261006e 	rsbvc	r0, r1, #110	; 0x6e
    5104:	70665f6d 	rsbvc	r5, r6, sp, ror #30
    5108:	74615f75 	strbtvc	r5, [r1], #-3957	; 0xfffff08b
    510c:	69007274 	stmdbvs	r0, {r2, r4, r5, r6, r9, ip, sp, lr}
    5110:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5114:	615f7469 	cmpvs	pc, r9, ror #8
    5118:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
    511c:	54006d65 	strpl	r6, [r0], #-3429	; 0xfffff29b
    5120:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5124:	50435f54 	subpl	r5, r3, r4, asr pc
    5128:	61665f55 	cmnvs	r6, r5, asr pc
    512c:	74363236 	ldrtvc	r3, [r6], #-566	; 0xfffffdca
    5130:	41540065 	cmpmi	r4, r5, rrx
    5134:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5138:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    513c:	72616d5f 	rsbvc	r6, r1, #6080	; 0x17c0
    5140:	6c6c6576 	cfstr64vs	mvdx6, [ip], #-472	; 0xfffffe28
    5144:	346a705f 	strbtcc	r7, [sl], #-95	; 0xffffffa1
    5148:	61746800 	cmnvs	r4, r0, lsl #16
    514c:	61685f62 	cmnvs	r8, r2, ror #30
    5150:	705f6873 	subsvc	r6, pc, r3, ror r8	; <UNPREDICTABLE>
    5154:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    5158:	61007265 	tstvs	r0, r5, ror #4
    515c:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 5164 <patchGenfskRfe+0xc4>
    5160:	5f656e75 	svcpl	0x00656e75
    5164:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    5168:	615f7865 	cmpvs	pc, r5, ror #16
    516c:	73690039 	cmnvc	r9, #57	; 0x39
    5170:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5174:	77695f74 			; <UNDEFINED> instruction: 0x77695f74
    5178:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    517c:	41540032 	cmpmi	r4, r2, lsr r0
    5180:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5184:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5188:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    518c:	61786574 	cmnvs	r8, r4, ror r5
    5190:	6f633237 	svcvs	0x00633237
    5194:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5198:	00333561 	eorseq	r3, r3, r1, ror #10
    519c:	5f617369 	svcpl	0x00617369
    51a0:	5f746962 	svcpl	0x00746962
    51a4:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    51a8:	42003262 	andmi	r3, r0, #536870918	; 0x20000006
    51ac:	5f455341 	svcpl	0x00455341
    51b0:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    51b4:	0041375f 	subeq	r3, r1, pc, asr r7
    51b8:	5f617369 	svcpl	0x00617369
    51bc:	5f746962 	svcpl	0x00746962
    51c0:	70746f64 	rsbsvc	r6, r4, r4, ror #30
    51c4:	00646f72 	rsbeq	r6, r4, r2, ror pc
    51c8:	5f6d7261 	svcpl	0x006d7261
    51cc:	36317066 	ldrtcc	r7, [r1], -r6, rrx
    51d0:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    51d4:	6f6e5f65 	svcvs	0x006e5f65
    51d8:	41006564 	tstmi	r0, r4, ror #10
    51dc:	4d5f4d52 	ldclmi	13, cr4, [pc, #-328]	; 509c <patable+0xe>
    51e0:	72610049 	rsbvc	r0, r1, #73	; 0x49
    51e4:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    51e8:	6b366863 	blvs	d9f37c <__ccfg+0xd7f3d4>
    51ec:	6d726100 	ldfvse	f6, [r2, #-0]
    51f0:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    51f4:	006d3668 	rsbeq	r3, sp, r8, ror #12
    51f8:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    51fc:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    5200:	52375f48 	eorspl	r5, r7, #72, 30	; 0x120
    5204:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    5208:	6f63706f 	svcvs	0x0063706f
    520c:	5f746e75 	svcpl	0x00746e75
    5210:	00626174 	rsbeq	r6, r2, r4, ror r1
    5214:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5218:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    521c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    5220:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5224:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5228:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    522c:	396c472d 	stmdbcc	ip!, {r0, r2, r3, r5, r8, r9, sl, lr}^
    5230:	2f39546b 	svccs	0x0039546b
    5234:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5238:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    523c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5240:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5244:	2d392d69 	ldccs	13, cr2, [r9, #-420]!	; 0xfffffe5c
    5248:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
    524c:	2f34712d 	svccs	0x0034712d
    5250:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5254:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    5258:	6f6e2d6d 	svcvs	0x006e2d6d
    525c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5260:	2f696261 	svccs	0x00696261
    5264:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    5268:	6f6e2f62 	svcvs	0x006e2f62
    526c:	6c2f7066 	stcvs	0, cr7, [pc], #-408	; 50dc <patchGenfskRfe+0x3c>
    5270:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    5274:	73690063 	cmnvc	r9, #99	; 0x63
    5278:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    527c:	6d635f74 	stclvs	15, cr5, [r3, #-464]!	; 0xfffffe30
    5280:	54006573 	strpl	r6, [r0], #-1395	; 0xfffffa8d
    5284:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5288:	50435f54 	subpl	r5, r3, r4, asr pc
    528c:	6f635f55 	svcvs	0x00635f55
    5290:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5294:	00333761 	eorseq	r3, r3, r1, ror #14
    5298:	47524154 			; <UNDEFINED> instruction: 0x47524154
    529c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    52a0:	675f5550 			; <UNDEFINED> instruction: 0x675f5550
    52a4:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    52a8:	37766369 	ldrbcc	r6, [r6, -r9, ror #6]!
    52ac:	41540061 	cmpmi	r4, r1, rrx
    52b0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    52b4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    52b8:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    52bc:	61786574 	cmnvs	r8, r4, ror r5
    52c0:	61003637 	tstvs	r0, r7, lsr r6
    52c4:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    52c8:	5f686372 	svcpl	0x00686372
    52cc:	765f6f6e 	ldrbvc	r6, [pc], -lr, ror #30
    52d0:	74616c6f 	strbtvc	r6, [r1], #-3183	; 0xfffff391
    52d4:	5f656c69 	svcpl	0x00656c69
    52d8:	42006563 	andmi	r6, r0, #415236096	; 0x18c00000
    52dc:	5f455341 	svcpl	0x00455341
    52e0:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    52e4:	0041385f 	subeq	r3, r1, pc, asr r8
    52e8:	5f617369 	svcpl	0x00617369
    52ec:	5f746962 	svcpl	0x00746962
    52f0:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    52f4:	42007435 	andmi	r7, r0, #889192448	; 0x35000000
    52f8:	5f455341 	svcpl	0x00455341
    52fc:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    5300:	0052385f 	subseq	r3, r2, pc, asr r8
    5304:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5308:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    530c:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    5310:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5314:	33376178 	teqcc	r7, #120, 2
    5318:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    531c:	33617865 	cmncc	r1, #6619136	; 0x650000
    5320:	52410035 	subpl	r0, r1, #53	; 0x35
    5324:	564e5f4d 	strbpl	r5, [lr], -sp, asr #30
    5328:	6d726100 	ldfvse	f6, [r2, #-0]
    532c:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    5330:	61003468 	tstvs	r0, r8, ror #8
    5334:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    5338:	36686372 			; <UNDEFINED> instruction: 0x36686372
    533c:	6d726100 	ldfvse	f6, [r2, #-0]
    5340:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    5344:	61003768 	tstvs	r0, r8, ror #14
    5348:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    534c:	38686372 	stmdacc	r8!, {r1, r4, r5, r6, r8, r9, sp, lr}^
    5350:	74494400 	strbvc	r4, [r9], #-1024	; 0xfffffc00
    5354:	00657079 	rsbeq	r7, r5, r9, ror r0
    5358:	5f6d7261 	svcpl	0x006d7261
    535c:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    5360:	6373785f 	cmnvs	r3, #6225920	; 0x5f0000
    5364:	00656c61 	rsbeq	r6, r5, r1, ror #24
    5368:	74735744 	ldrbtvc	r5, [r3], #-1860	; 0xfffff8bc
    536c:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    5370:	6b616d00 	blvs	1860778 <__ccfg+0x18407d0>
    5374:	5f676e69 	svcpl	0x00676e69
    5378:	736e6f63 	cmnvc	lr, #396	; 0x18c
    537c:	61745f74 	cmnvs	r4, r4, ror pc
    5380:	00656c62 	rsbeq	r6, r5, r2, ror #24
    5384:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    5388:	61635f62 	cmnvs	r3, r2, ror #30
    538c:	765f6c6c 	ldrbvc	r6, [pc], -ip, ror #24
    5390:	6c5f6169 	ldfvse	f6, [pc], {105}	; 0x69
    5394:	6c656261 	sfmvs	f6, 2, [r5], #-388	; 0xfffffe7c
    5398:	61736900 	cmnvs	r3, r0, lsl #18
    539c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    53a0:	7670665f 			; <UNDEFINED> instruction: 0x7670665f
    53a4:	73690035 	cmnvc	r9, #53	; 0x35
    53a8:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    53ac:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
    53b0:	6b36766d 	blvs	da2d6c <__ccfg+0xd82dc4>
    53b4:	52415400 	subpl	r5, r1, #0, 8
    53b8:	5f544547 	svcpl	0x00544547
    53bc:	5f555043 	svcpl	0x00555043
    53c0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    53c4:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    53c8:	52415400 	subpl	r5, r1, #0, 8
    53cc:	5f544547 	svcpl	0x00544547
    53d0:	5f555043 	svcpl	0x00555043
    53d4:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    53d8:	38617865 	stmdacc	r1!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    53dc:	52415400 	subpl	r5, r1, #0, 8
    53e0:	5f544547 	svcpl	0x00544547
    53e4:	5f555043 	svcpl	0x00555043
    53e8:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    53ec:	39617865 	stmdbcc	r1!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    53f0:	4d524100 	ldfmie	f4, [r2, #-0]
    53f4:	5343505f 	movtpl	r5, #12383	; 0x305f
    53f8:	4350415f 	cmpmi	r0, #-1073741801	; 0xc0000017
    53fc:	52410053 	subpl	r0, r1, #83	; 0x53
    5400:	43505f4d 	cmpmi	r0, #308	; 0x134
    5404:	54415f53 	strbpl	r5, [r1], #-3923	; 0xfffff0ad
    5408:	00534350 	subseq	r4, r3, r0, asr r3
    540c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    5410:	2078656c 	rsbscs	r6, r8, ip, ror #10
    5414:	62756f64 	rsbsvs	r6, r5, #100, 30	; 0x190
    5418:	5400656c 	strpl	r6, [r0], #-1388	; 0xfffffa94
    541c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5420:	50435f54 	subpl	r5, r3, r4, asr pc
    5424:	6f635f55 	svcvs	0x00635f55
    5428:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    542c:	63333761 	teqvs	r3, #25427968	; 0x1840000
    5430:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5434:	33356178 	teqcc	r5, #120, 2
    5438:	52415400 	subpl	r5, r1, #0, 8
    543c:	5f544547 	svcpl	0x00544547
    5440:	5f555043 	svcpl	0x00555043
    5444:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    5448:	306d7865 	rsbcc	r7, sp, r5, ror #16
    544c:	73756c70 	cmnvc	r5, #112, 24	; 0x7000
    5450:	6d726100 	ldfvse	f6, [r2, #-0]
    5454:	0063635f 	rsbeq	r6, r3, pc, asr r3
    5458:	5f617369 	svcpl	0x00617369
    545c:	5f746962 	svcpl	0x00746962
    5460:	61637378 	smcvs	14136	; 0x3738
    5464:	5f00656c 	svcpl	0x0000656c
    5468:	746e6f64 	strbtvc	r6, [lr], #-3940	; 0xfffff09c
    546c:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0xfffffaa1
    5470:	6572745f 	ldrbvs	r7, [r2, #-1119]!	; 0xfffffba1
    5474:	65685f65 	strbvs	r5, [r8, #-3941]!	; 0xfffff09b
    5478:	005f6572 	subseq	r6, pc, r2, ror r5	; <UNPREDICTABLE>
    547c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5480:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5484:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    5488:	30316d72 	eorscc	r6, r1, r2, ror sp
    548c:	696d6474 	stmdbvs	sp!, {r2, r4, r5, r6, sl, sp, lr}^
    5490:	52415400 	subpl	r5, r1, #0, 8
    5494:	5f544547 	svcpl	0x00544547
    5498:	5f555043 	svcpl	0x00555043
    549c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    54a0:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    54a4:	73616200 	cmnvc	r1, #0, 4
    54a8:	72615f65 	rsbvc	r5, r1, #404	; 0x194
    54ac:	74696863 	strbtvc	r6, [r9], #-2147	; 0xfffff79d
    54b0:	75746365 	ldrbvc	r6, [r4, #-869]!	; 0xfffffc9b
    54b4:	61006572 	tstvs	r0, r2, ror r5
    54b8:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    54bc:	5f686372 	svcpl	0x00686372
    54c0:	00637263 	rsbeq	r7, r3, r3, ror #4
    54c4:	47524154 			; <UNDEFINED> instruction: 0x47524154
    54c8:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    54cc:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    54d0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    54d4:	73316d78 	teqvc	r1, #120, 26	; 0x1e00
    54d8:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    54dc:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
    54e0:	796c7069 	stmdbvc	ip!, {r0, r3, r5, r6, ip, sp, lr}^
    54e4:	6d726100 	ldfvse	f6, [r2, #-0]
    54e8:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
    54ec:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    54f0:	0063635f 	rsbeq	r6, r3, pc, asr r3
    54f4:	5f617369 	svcpl	0x00617369
    54f8:	5f746962 	svcpl	0x00746962
    54fc:	33637263 	cmncc	r3, #805306374	; 0x30000006
    5500:	52410032 	subpl	r0, r1, #50	; 0x32
    5504:	4c505f4d 	mrrcmi	15, 4, r5, r0, cr13
    5508:	61736900 	cmnvs	r3, r0, lsl #18
    550c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5510:	7066765f 	rsbvc	r7, r6, pc, asr r6
    5514:	69003376 	stmdbvs	r0, {r1, r2, r4, r5, r6, r8, r9, ip, sp}
    5518:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    551c:	765f7469 	ldrbvc	r7, [pc], -r9, ror #8
    5520:	34767066 	ldrbtcc	r7, [r6], #-102	; 0xffffff9a
    5524:	53414200 	movtpl	r4, #4608	; 0x1200
    5528:	52415f45 	subpl	r5, r1, #276	; 0x114
    552c:	365f4843 	ldrbcc	r4, [pc], -r3, asr #16
    5530:	42003254 	andmi	r3, r0, #84, 4	; 0x40000005
    5534:	5f455341 	svcpl	0x00455341
    5538:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    553c:	5f4d385f 	svcpl	0x004d385f
    5540:	4e49414d 	dvfmiem	f4, f1, #5.0
    5544:	52415400 	subpl	r5, r1, #0, 8
    5548:	5f544547 	svcpl	0x00544547
    554c:	5f555043 	svcpl	0x00555043
    5550:	396d7261 	stmdbcc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    5554:	696d6474 	stmdbvs	sp!, {r2, r4, r5, r6, sl, sp, lr}^
    5558:	4d524100 	ldfmie	f4, [r2, #-0]
    555c:	004c415f 	subeq	r4, ip, pc, asr r1
    5560:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    5564:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    5568:	4d375f48 	ldcmi	15, cr5, [r7, #-288]!	; 0xfffffee0
    556c:	6d726100 	ldfvse	f6, [r2, #-0]
    5570:	7261745f 	rsbvc	r7, r1, #1593835520	; 0x5f000000
    5574:	5f746567 	svcpl	0x00746567
    5578:	6562616c 	strbvs	r6, [r2, #-364]!	; 0xfffffe94
    557c:	7261006c 	rsbvc	r0, r1, #108	; 0x6c
    5580:	61745f6d 	cmnvs	r4, sp, ror #30
    5584:	74656772 	strbtvc	r6, [r5], #-1906	; 0xfffff88e
    5588:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    558c:	4154006e 	cmpmi	r4, lr, rrx
    5590:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5594:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5598:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    559c:	72786574 	rsbsvc	r6, r8, #116, 10	; 0x1d000000
    55a0:	41540035 	cmpmi	r4, r5, lsr r0
    55a4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    55a8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    55ac:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    55b0:	72786574 	rsbsvc	r6, r8, #116, 10	; 0x1d000000
    55b4:	41540037 	cmpmi	r4, r7, lsr r0
    55b8:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    55bc:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    55c0:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    55c4:	72786574 	rsbsvc	r6, r8, #116, 10	; 0x1d000000
    55c8:	73690038 	cmnvc	r9, #56	; 0x38
    55cc:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    55d0:	706c5f74 	rsbvc	r5, ip, r4, ror pc
    55d4:	69006561 	stmdbvs	r0, {r0, r5, r6, r8, sl, sp, lr}
    55d8:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    55dc:	715f7469 	cmpvc	pc, r9, ror #8
    55e0:	6b726975 	blvs	1c9fbbc <__ccfg+0x1c7fc14>
    55e4:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    55e8:	7a6b3676 	bvc	1ad2fc8 <__ccfg+0x1ab3020>
    55ec:	61736900 	cmnvs	r3, r0, lsl #18
    55f0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    55f4:	746f6e5f 	strbtvc	r6, [pc], #-3679	; 55fc <patchGenfskRfe+0x55c>
    55f8:	7369006d 	cmnvc	r9, #109	; 0x6d
    55fc:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5600:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
    5604:	0034766d 	eorseq	r7, r4, sp, ror #12
    5608:	5f617369 	svcpl	0x00617369
    560c:	5f746962 	svcpl	0x00746962
    5610:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    5614:	73690036 	cmnvc	r9, #54	; 0x36
    5618:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    561c:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
    5620:	0037766d 	eorseq	r7, r7, sp, ror #12
    5624:	5f617369 	svcpl	0x00617369
    5628:	5f746962 	svcpl	0x00746962
    562c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    5630:	645f0038 	ldrbvs	r0, [pc], #-56	; 5638 <patchGenfskRfe+0x598>
    5634:	5f746e6f 	svcpl	0x00746e6f
    5638:	5f657375 	svcpl	0x00657375
    563c:	5f787472 	svcpl	0x00787472
    5640:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
    5644:	5155005f 	cmppl	r5, pc, asr r0
    5648:	70797449 	rsbsvc	r7, r9, r9, asr #8
    564c:	73690065 	cmnvc	r9, #101	; 0x65
    5650:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5654:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
    5658:	7435766d 	ldrtvc	r7, [r5], #-1645	; 0xfffff993
    565c:	72610065 	rsbvc	r0, r1, #101	; 0x65
    5660:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    5664:	6100656e 	tstvs	r0, lr, ror #10
    5668:	635f6d72 	cmpvs	pc, #7296	; 0x1c80
    566c:	695f7070 	ldmdbvs	pc, {r4, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    5670:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    5674:	6b726f77 	blvs	1ca1458 <__ccfg+0x1c814b0>
    5678:	52415400 	subpl	r5, r1, #0, 8
    567c:	5f544547 	svcpl	0x00544547
    5680:	5f555043 	svcpl	0x00555043
    5684:	396d7261 	stmdbcc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    5688:	00743032 	rsbseq	r3, r4, r2, lsr r0
    568c:	68755f5f 	ldmdavs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    5690:	61746800 	cmnvs	r4, r0, lsl #16
    5694:	71655f62 	cmnvc	r5, r2, ror #30
    5698:	52415400 	subpl	r5, r1, #0, 8
    569c:	5f544547 	svcpl	0x00544547
    56a0:	5f555043 	svcpl	0x00555043
    56a4:	32356166 	eorscc	r6, r5, #-2147483623	; 0x80000019
    56a8:	5f5f0036 	svcpl	0x005f0036
    56ac:	61006c75 	tstvs	r0, r5, ror ip
    56b0:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    56b4:	5f686372 	svcpl	0x00686372
    56b8:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    56bc:	77685f62 	strbvc	r5, [r8, -r2, ror #30]!
    56c0:	00766964 	rsbseq	r6, r6, r4, ror #18
    56c4:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    56c8:	5f71655f 	svcpl	0x0071655f
    56cc:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    56d0:	00726574 	rsbseq	r6, r2, r4, ror r5
    56d4:	5f6d7261 	svcpl	0x006d7261
    56d8:	5f636970 	svcpl	0x00636970
    56dc:	69676572 	stmdbvs	r7!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    56e0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    56e4:	52415400 	subpl	r5, r1, #0, 8
    56e8:	5f544547 	svcpl	0x00544547
    56ec:	5f555043 	svcpl	0x00555043
    56f0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    56f4:	306d7865 	rsbcc	r7, sp, r5, ror #16
    56f8:	6c616d73 	stclvs	13, cr6, [r1], #-460	; 0xfffffe34
    56fc:	6c756d6c 	ldclvs	13, cr6, [r5], #-432	; 0xfffffe50
    5700:	6c706974 			; <UNDEFINED> instruction: 0x6c706974
    5704:	41540079 	cmpmi	r4, r9, ror r0
    5708:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    570c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5710:	63706d5f 	cmnvs	r0, #6080	; 0x17c0
    5714:	6e65726f 	cdpvs	2, 6, cr7, cr5, cr15, {3}
    5718:	7066766f 	rsbvc	r7, r6, pc, ror #12
    571c:	61736900 	cmnvs	r3, r0, lsl #18
    5720:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5724:	6975715f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, ip, sp, lr}^
    5728:	635f6b72 	cmpvs	pc, #116736	; 0x1c800
    572c:	6c5f336d 	mrrcvs	3, 6, r3, pc, cr13	; <UNPREDICTABLE>
    5730:	00647264 	rsbeq	r7, r4, r4, ror #4
    5734:	5f4d5241 	svcpl	0x004d5241
    5738:	61004343 	tstvs	r0, r3, asr #6
    573c:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    5740:	38686372 	stmdacc	r8!, {r1, r4, r5, r6, r8, r9, sp, lr}^
    5744:	6100325f 	tstvs	r0, pc, asr r2
    5748:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    574c:	38686372 	stmdacc	r8!, {r1, r4, r5, r6, r8, r9, sp, lr}^
    5750:	6100335f 	tstvs	r0, pc, asr r3
    5754:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    5758:	38686372 	stmdacc	r8!, {r1, r4, r5, r6, r8, r9, sp, lr}^
    575c:	5400345f 	strpl	r3, [r0], #-1119	; 0xfffffba1
    5760:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5764:	50435f54 	subpl	r5, r3, r4, asr pc
    5768:	6d665f55 	stclvs	15, cr5, [r6, #-340]!	; 0xfffffeac
    576c:	36323670 			; <UNDEFINED> instruction: 0x36323670
    5770:	4d524100 	ldfmie	f4, [r2, #-0]
    5774:	0053435f 	subseq	r4, r3, pc, asr r3
    5778:	5f6d7261 	svcpl	0x006d7261
    577c:	36317066 	ldrtcc	r7, [r1], -r6, rrx
    5780:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    5784:	5f5f0074 	svcpl	0x005f0074
    5788:	61006876 	tstvs	r0, r6, ror r8
    578c:	625f6d72 	subsvs	r6, pc, #7296	; 0x1c80
    5790:	5f657361 	svcpl	0x00657361
    5794:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5798:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
    579c:	4154006c 	cmpmi	r4, ip, rrx
    57a0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    57a4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    57a8:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    57ac:	72786574 	rsbsvc	r6, r8, #116, 10	; 0x1d000000
    57b0:	41540034 	cmpmi	r4, r4, lsr r0
    57b4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    57b8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    57bc:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    57c0:	61786574 	cmnvs	r8, r4, ror r5
    57c4:	6f633531 	svcvs	0x00633531
    57c8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    57cc:	61003761 	tstvs	r0, r1, ror #14
    57d0:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    57d4:	37686372 			; <UNDEFINED> instruction: 0x37686372
    57d8:	54006d65 	strpl	r6, [r0], #-3429	; 0xfffff29b
    57dc:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    57e0:	50435f54 	subpl	r5, r3, r4, asr pc
    57e4:	6f635f55 	svcvs	0x00635f55
    57e8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    57ec:	00323761 	eorseq	r3, r2, r1, ror #14
    57f0:	5f6d7261 	svcpl	0x006d7261
    57f4:	5f736370 	svcpl	0x00736370
    57f8:	61666564 	cmnvs	r6, r4, ror #10
    57fc:	00746c75 	rsbseq	r6, r4, r5, ror ip
    5800:	5f4d5241 	svcpl	0x004d5241
    5804:	5f534350 	svcpl	0x00534350
    5808:	43504141 	cmpmi	r0, #1073741840	; 0x40000010
    580c:	4f4c5f53 	svcmi	0x004c5f53
    5810:	004c4143 	subeq	r4, ip, r3, asr #2
    5814:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5818:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    581c:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    5820:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5824:	35376178 	ldrcc	r6, [r7, #-376]!	; 0xfffffe88
    5828:	52415400 	subpl	r5, r1, #0, 8
    582c:	5f544547 	svcpl	0x00544547
    5830:	5f555043 	svcpl	0x00555043
    5834:	6f727473 	svcvs	0x00727473
    5838:	7261676e 	rsbvc	r6, r1, #28835840	; 0x1b80000
    583c:	7261006d 	rsbvc	r0, r1, #109	; 0x6d
    5840:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5844:	745f6863 	ldrbvc	r6, [pc], #-2147	; 584c <patchImageGenfsk+0xf8>
    5848:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    584c:	72610031 	rsbvc	r0, r1, #49	; 0x31
    5850:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5854:	745f6863 	ldrbvc	r6, [pc], #-2147	; 585c <patchImageGenfsk+0x108>
    5858:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    585c:	41540032 	cmpmi	r4, r2, lsr r0
    5860:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5864:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5868:	6d77695f 			; <UNDEFINED> instruction: 0x6d77695f
    586c:	0074786d 	rsbseq	r7, r4, sp, ror #16
    5870:	5f6d7261 	svcpl	0x006d7261
    5874:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5878:	5f007435 	svcpl	0x00007435
    587c:	0030785f 	eorseq	r7, r0, pc, asr r8
    5880:	31785f5f 	cmncc	r8, pc, asr pc
    5884:	785f5f00 	ldmdavc	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    5888:	5f5f0032 	svcpl	0x005f0032
    588c:	69003378 	stmdbvs	r0, {r3, r4, r5, r6, r8, r9, ip, sp}
    5890:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5894:	6d5f7469 	cfldrdvs	mvd7, [pc, #-420]	; 56f8 <patchGenfskRfe+0x658>
    5898:	72610070 	rsbvc	r0, r1, #112	; 0x70
    589c:	646c5f6d 	strbtvs	r5, [ip], #-3949	; 0xfffff093
    58a0:	6863735f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    58a4:	61006465 	tstvs	r0, r5, ror #8
    58a8:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    58ac:	38686372 	stmdacc	r8!, {r1, r4, r5, r6, r8, r9, sp, lr}^
    58b0:	Address 0x00000000000058b0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ccfg+0x10b0d7c>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
    return node->data_base.item_array[index];
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
};
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
			i = k;
  40:	6172622d 	cmnvs	r2, sp, lsr #4
				j->Next = k;
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
}
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
		release;
  58:	43434700 	movtmi	r4, #14080	; 0x3700
  5c:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
			nq++;
  60:	5420554e 	strtpl	r5, [r0], #-1358	; 0xfffffab2
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
  64:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  68:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  6c:	4d524120 	ldfmie	f4, [r2, #-128]	; 0xffffff80
  70:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  74:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  78:	72502064 	subsvc	r2, r0, #100	; 0x64
  7c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  80:	73726f73 	cmnvc	r2, #460	; 0x1cc
  84:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  88:	20332e39 	eorscs	r2, r3, r9, lsr lr
  8c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
	if (!button_still_pressed (__button_list [pbutton]))
  90:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
  94:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  98:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
	if (baction == NULL)
  9c:	5b202965 	blpl	80a638 <__ccfg+0x7ea690>
  a0:	2f4d5241 	svccs	0x004d5241
	(*baction) (pbutton);
  a4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
endthread
  a8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
  ac:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
  b0:	6172622d 	cmnvs	r2, sp, lsr #4
endthread
  b4:	2068636e 	rsbcs	r6, r8, lr, ror #6
  b8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  bc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  c0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
  c4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
fsm sender(struct ResponseMessage *message) {
  c8:	43434700 	movtmi	r4, #14080	; 0x3700
  cc:	3128203a 			; <UNDEFINED> instruction: 0x3128203a
  d0:	2d383a35 	vldmdbcs	r8!, {s6-s58}
}
  d4:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
  d8:	2d33712d 	ldfcss	f7, [r3, #-180]!	; 0xffffff4c
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  dc:	38202931 	stmdacc	r0!, {r0, r4, r5, r8, fp, sp}
  e0:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  e4:	31303220 	teqcc	r0, r0, lsr #4
  e8:	30373039 	eorscc	r3, r7, r9, lsr r0
		packet[0] = 0;
  ec:	72282033 	eorvc	r2, r8, #51	; 0x33
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  f0:	61656c65 	cmnvs	r5, r5, ror #24
		*p = message->tpe;p++;
  f4:	20296573 	eorcs	r6, r9, r3, ror r5
  f8:	6363675b 	cmnvs	r3, #23855104	; 0x16c0000
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  fc:	622d382d 	eorvs	r3, sp, #2949120	; 0x2d0000
		*p = message->sender_id;p++;
 100:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
		*p = message->receiver_id;p++;
 104:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
		switch(message->tpe) {
 108:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 10c:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
 110:	32303337 	eorscc	r3, r0, #-603979776	; 0xdc000000
		tcv_endp(packet);
 114:	Address 0x0000000000000114 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
    return node->data_base.item_array[index];
  10:	4d2d3705 	stcmi	7, cr3, [sp, #-20]!	; 0xffffffec
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	0901084d 	stmdbeq	r1, {r0, r2, r3, r6, fp}
};
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1e011a01 	vmlane.f32	s2, s2, s2
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    return node->data_base.item_array[index];
      10:	0000002c 	andeq	r0, r0, ip, lsr #32
      14:	00000000 	andeq	r0, r0, r0
      18:	000000c8 	andeq	r0, r0, r8, asr #1
};
      1c:	000000a4 	andeq	r0, r0, r4, lsr #1
      20:	83100e41 	tsthi	r0, #1040	; 0x410
      24:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
      28:	46018e02 	strmi	r8, [r1], -r2, lsl #28
      2c:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
      30:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
      34:	ce0a660b 	cfmadd32gt	mvax0, mvfx6, mvfx10, mvfx11
      38:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
      3c:	000b4300 	andeq	r4, fp, r0, lsl #6
			i = k;
      40:	0000000c 	andeq	r0, r0, ip
	...
}
      4c:	00000006 	andeq	r0, r0, r6
      50:	0000000c 	andeq	r0, r0, ip
	...
      5c:	00000006 	andeq	r0, r0, r6
			nq++;
      60:	0000000c 	andeq	r0, r0, ip
	...
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      6c:	00000008 	andeq	r0, r0, r8
      70:	0000000c 	andeq	r0, r0, ip
      74:	00000000 	andeq	r0, r0, r0
      78:	0000016c 	andeq	r0, r0, ip, ror #2
      7c:	00000014 	andeq	r0, r0, r4, lsl r0
      80:	00000014 	andeq	r0, r0, r4, lsl r0
      84:	00000000 	andeq	r0, r0, r0
      88:	00000180 	andeq	r0, r0, r0, lsl #3
      8c:	00000024 	andeq	r0, r0, r4, lsr #32
	if (!button_still_pressed (__button_list [pbutton]))
      90:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
      94:	00018e02 	andeq	r8, r1, r2, lsl #28
      98:	00000014 	andeq	r0, r0, r4, lsl r0
	if (baction == NULL)
      9c:	00000000 	andeq	r0, r0, r0
      a0:	000001a4 	andeq	r0, r0, r4, lsr #3
	(*baction) (pbutton);
      a4:	00000012 	andeq	r0, r0, r2, lsl r0
endthread
      a8:	83080e41 	movwhi	r0, #36417	; 0x8e41
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00018e02 	andeq	r8, r1, r2, lsl #28
      b0:	0000000c 	andeq	r0, r0, ip
	...
endthread
      bc:	0000000c 	andeq	r0, r0, ip
      c0:	0000000c 	andeq	r0, r0, ip
      c4:	00000000 	andeq	r0, r0, r0
fsm sender(struct ResponseMessage *message) {
      c8:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
      cc:	00000016 	andeq	r0, r0, r6, lsl r0
      d0:	0000000c 	andeq	r0, r0, ip
}
      d4:	00000000 	andeq	r0, r0, r0
      d8:	000001cc 	andeq	r0, r0, ip, asr #3
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	0000001c 	andeq	r0, r0, ip, lsl r0
      e0:	00000024 	andeq	r0, r0, r4, lsr #32
      e4:	00000000 	andeq	r0, r0, r0
      e8:	000001e8 	andeq	r0, r0, r8, ror #3
		packet[0] = 0;
      ec:	00000344 	andeq	r0, r0, r4, asr #6
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		*p = message->tpe;p++;
      f4:	86038504 	strhi	r8, [r3], -r4, lsl #10
      f8:	42018e02 	andmi	r8, r1, #2, 28
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      fc:	c502500e 	strgt	r5, [r2, #-14]
		*p = message->sender_id;p++;
     100:	41100e0a 	tstmi	r0, sl, lsl #28
		*p = message->receiver_id;p++;
     104:	0000000b 	andeq	r0, r0, fp
		switch(message->tpe) {
     108:	00000018 	andeq	r0, r0, r8, lsl r0
	...
		tcv_endp(packet);
     114:	0000001e 	andeq	r0, r0, lr, lsl r0
     118:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		ser_out(CONFIRM_message, "Message sent\r\n");
     11c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     120:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     124:	00000014 	andeq	r0, r0, r4, lsl r0
		finish;
     128:	00000000 	andeq	r0, r0, r0
     12c:	0000052c 	andeq	r0, r0, ip, lsr #10
				*p = message->status;p++;
     130:	00000026 	andeq	r0, r0, r6, lsr #32
     134:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				strncpy(p, message->record, sizeof(message->record));
     138:	00018e02 	andeq	r8, r1, r2, lsl #28
				*p = message->padding;p++;
     13c:	00000014 	andeq	r0, r0, r4, lsl r0
	...
				strncpy(p, message->record, sizeof(message->record));
     148:	00000012 	andeq	r0, r0, r2, lsl r0
				strncpy(p, message->record, sizeof(message->record));
     14c:	83080e41 	movwhi	r0, #36417	; 0x8e41
				*p = message->record_index;p++;
     150:	00018e02 	andeq	r8, r1, r2, lsl #28
				*p = message->padding;
     154:	00000024 	andeq	r0, r0, r4, lsr #32
				break;
     158:	00000000 	andeq	r0, r0, r0
     15c:	00000554 	andeq	r0, r0, r4, asr r5
     160:	0000057c 	andeq	r0, r0, ip, ror r5
     164:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     168:	86048505 	strhi	r8, [r4], -r5, lsl #10
		node->nnodes[i] = 0;
     16c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     170:	280e4101 	stmdacs	lr, {r0, r8, lr}
     174:	0e028b03 	vmlaeq.f64	d8, d2, d3
     178:	00000014 	andeq	r0, r0, r4, lsl r0
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     17c:	0000000c 	andeq	r0, r0, ip
bool init_node(struct Node* node){
     180:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    node->id  = 0;                  // default id value 0
     184:	7c020001 	stcvc	0, cr0, [r2], {1}
    node->index = 0;                // default entry count 0
     188:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    node->data_base.item_count = 0; // default no items in array
     18c:	0000000c 	andeq	r0, r0, ip
	reset_array(node);
     190:	0000017c 	andeq	r0, r0, ip, ror r1
    DEBUG_PRINT("Error initializing node...\n");
     194:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     198:	0000000c 	andeq	r0, r0, ip
};
     19c:	00000018 	andeq	r0, r0, r8, lsl r0
     1a0:	0000017c 	andeq	r0, r0, ip, ror r1
uint8_t generate_request_num(void){
     1a4:	00000adc 	ldrdeq	r0, [r0], -ip
    return (uint8_t) (rand() % 255);
     1a8:	0000002c 	andeq	r0, r0, ip, lsr #32
     1ac:	47080e41 	strmi	r0, [r8, -r1, asr #28]
     1b0:	41000e0a 	tstmi	r0, sl, lsl #28
}
     1b4:	0000000b 	andeq	r0, r0, fp
            node->nnodes[i] = 0; // set to null byte
     1b8:	00000018 	andeq	r0, r0, r8, lsl r0
     1bc:	0000017c 	andeq	r0, r0, ip, ror r1
     1c0:	00000b08 	andeq	r0, r0, r8, lsl #22
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1c4:	0000002a 	andeq	r0, r0, sl, lsr #32
};
     1c8:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1cc:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
     1d0:	000b4204 	andeq	r4, fp, r4, lsl #4
        node->data_base.item_array[index].data_entry[0] = '\0';
     1d4:	00000018 	andeq	r0, r0, r8, lsl r0
     1d8:	0000017c 	andeq	r0, r0, ip, ror r1
     1dc:	00000b34 	andeq	r0, r0, r4, lsr fp
        node->data_base.item_count -= 1;
     1e0:	0000003c 	andeq	r0, r0, ip, lsr r0
};
     1e4:	83100e41 	tsthi	r0, #1040	; 0x410
fsm receiver(struct Node* node_db) {
     1e8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     1ec:	00018e02 	andeq	r8, r1, r2, lsl #28
     1f0:	00000018 	andeq	r0, r0, r8, lsl r0
     1f4:	0000017c 	andeq	r0, r0, ip, ror r1
     1f8:	00000b70 	andeq	r0, r0, r0, ror fp
     1fc:	00000040 	andeq	r0, r0, r0, asr #32
     200:	83100e41 	tsthi	r0, #1040	; 0x410
     204:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		incoming_packet = tcv_rnp(receiving, sfd);
     208:	00018e02 	andeq	r8, r1, r2, lsl #28
     20c:	00000014 	andeq	r0, r0, r4, lsl r0
     210:	0000017c 	andeq	r0, r0, ip, ror r1
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     214:	00000000 	andeq	r0, r0, r0
     218:	00000020 	andeq	r0, r0, r0, lsr #32
     21c:	83080e42 	movwhi	r0, #36418	; 0x8e42
     220:	00018e02 	andeq	r8, r1, r2, lsl #28
		switch (tpe){
     224:	00000014 	andeq	r0, r0, r4, lsl r0
     228:	0000017c 	andeq	r0, r0, ip, ror r1
     22c:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
     230:	00000054 	andeq	r0, r0, r4, asr r0
     234:	87080e42 	strhi	r0, [r8, -r2, asr #28]
     238:	00018e02 	andeq	r8, r1, r2, lsl #28
     23c:	00000014 	andeq	r0, r0, r4, lsl r0
				DEBUG_PRINT("\r\nRECEIVED GID: %u", discovery_request_message->gid);
     240:	0000017c 	andeq	r0, r0, ip, ror r1
     244:	00000c04 	andeq	r0, r0, r4, lsl #24
				DEBUG_PRINT("\rRECEIVED TYPE: %u", discovery_request_message->tpe);
     248:	00000040 	andeq	r0, r0, r0, asr #32
     24c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				DEBUG_PRINT("\r\nRECEIVED REQ NUM: %u", discovery_request_message->request_number);
     250:	00018e02 	andeq	r8, r1, r2, lsl #28
     254:	00000014 	andeq	r0, r0, r4, lsl r0
				DEBUG_PRINT("\r\nRECEIVED SID: %u", discovery_request_message->sender_id);
     258:	0000017c 	andeq	r0, r0, ip, ror r1
     25c:	00000c44 	andeq	r0, r0, r4, asr #24
				DEBUG_PRINT("\r\nRECEIVED RID: %u", discovery_request_message->receiver_id);
     260:	00000028 	andeq	r0, r0, r8, lsr #32
     264:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
				if (discovery_request_message->gid == node_db->gid){
     268:	00018e02 	andeq	r8, r1, r2, lsl #28
     26c:	00000014 	andeq	r0, r0, r4, lsl r0
					response_message_0->gid = discovery_request_message->gid;
     270:	0000017c 	andeq	r0, r0, ip, ror r1
					response_message_0->tpe = DISCOVERY_RESPONSE;
     274:	00000c6c 	andeq	r0, r0, ip, ror #24
					response_message_0->request_number = discovery_request_message->request_number;
     278:	00000114 	andeq	r0, r0, r4, lsl r1
					response_message_0->sender_id = node_db->id;
     27c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
					response_message_0->receiver_id = discovery_request_message->sender_id;
     280:	00018e02 	andeq	r8, r1, r2, lsl #28
					call sender(response_message_0, done_case);
     284:	0000001c 	andeq	r0, r0, ip, lsl r0
     288:	0000017c 	andeq	r0, r0, ip, ror r1
     28c:	00000d80 	andeq	r0, r0, r0, lsl #27
     290:	00000050 	andeq	r0, r0, r0, asr r0
     294:	83180e41 	tsthi	r8, #1040	; 0x410
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
     298:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     29c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
     2a0:	00018e02 	andeq	r8, r1, r2, lsl #28
     2a4:	00000018 	andeq	r0, r0, r8, lsl r0
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
     2a8:	0000017c 	andeq	r0, r0, ip, ror r1
     2ac:	00000dd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
     2b0:	00000054 	andeq	r0, r0, r4, asr r0
     2b4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
     2b8:	86038504 	strhi	r8, [r3], -r4, lsl #10
     2bc:	00018e02 	andeq	r8, r1, r2, lsl #28
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2c0:	0000000c 	andeq	r0, r0, ip
     2c4:	0000017c 	andeq	r0, r0, ip, ror r1
     2c8:	00000e24 	andeq	r0, r0, r4, lsr #28
     2cc:	00000038 	andeq	r0, r0, r8, lsr r0
     2d0:	00000020 	andeq	r0, r0, r0, lsr #32
     2d4:	0000017c 	andeq	r0, r0, ip, ror r1
     2d8:	00000e5c 	andeq	r0, r0, ip, asr lr
     2dc:	00000110 	andeq	r0, r0, r0, lsl r1
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     2e0:	83200e43 			; <UNDEFINED> instruction: 0x83200e43
     2e4:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
					node_db->index+=1;
     2e8:	87058606 	strhi	r8, [r5, -r6, lsl #12]
		tcv_endp(incoming_packet);
     2ec:	89038804 	stmdbhi	r3, {r2, fp, pc}
     2f0:	00018e02 	andeq	r8, r1, r2, lsl #28
		proceed receiving;
     2f4:	0000000c 	andeq	r0, r0, ip
     2f8:	0000017c 	andeq	r0, r0, ip, ror r1
		ser_out(response_1_create, "\r\nData Saved");
     2fc:	00000000 	andeq	r0, r0, r0
     300:	0000000c 	andeq	r0, r0, ip
		proceed receiving;
     304:	00000018 	andeq	r0, r0, r8, lsl r0
		ser_out(response_1_delete, "\r\nRecord Deleted");
     308:	0000017c 	andeq	r0, r0, ip, ror r1
     30c:	00000f6c 	andeq	r0, r0, ip, ror #30
		proceed receiving;
     310:	000000c0 	andeq	r0, r0, r0, asr #1
     314:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     318:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     31c:	00000001 	andeq	r0, r0, r1
     320:	00000018 	andeq	r0, r0, r8, lsl r0
     324:	0000017c 	andeq	r0, r0, ip, ror r1
		proceed receiving;
     328:	0000102c 	andeq	r1, r0, ip, lsr #32
     32c:	00000044 	andeq	r0, r0, r4, asr #32
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     330:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     334:	86038504 	strhi	r8, [r3], -r4, lsl #10
     338:	00018e02 	andeq	r8, r1, r2, lsl #28
		proceed receiving;
     33c:	0000001c 	andeq	r0, r0, ip, lsl r0
     340:	0000017c 	andeq	r0, r0, ip, ror r1
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     344:	00001070 	andeq	r1, r0, r0, ror r0
     348:	0000003c 	andeq	r0, r0, ip, lsr r0
     34c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
		proceed receiving;
     350:	86048505 	strhi	r8, [r4], -r5, lsl #10
     354:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     358:	00000001 	andeq	r0, r0, r1
     35c:	00000018 	andeq	r0, r0, r8, lsl r0
     360:	0000017c 	andeq	r0, r0, ip, ror r1
		proceed receiving;
     364:	000010ac 	andeq	r1, r0, ip, lsr #1
     368:	000000a4 	andeq	r0, r0, r4, lsr #1
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     36c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		proceed receiving;
     370:	86038504 	strhi	r8, [r3], -r4, lsl #10
     374:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     378:	00000030 	andeq	r0, r0, r0, lsr r0
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     37c:	0000017c 	andeq	r0, r0, ip, ror r1
     380:	00001150 	andeq	r1, r0, r0, asr r1
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     384:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     388:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
     38c:	86078508 	strhi	r8, [r7], -r8, lsl #10
     390:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     394:	8a038904 	bhi	e27ac <__ccfg+0xc2804>
     398:	02018e02 	andeq	r8, r1, #2, 28
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     39c:	cace0aa2 	bgt	ff382e2c <_estack+0xdf37de2c>
     3a0:	c6c7c8c9 	strbgt	ip, [r7], r9, asr #17
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     3a4:	000ec4c5 	andeq	ip, lr, r5, asr #9
     3a8:	00000b42 	andeq	r0, r0, r2, asr #22
     3ac:	0000000c 	andeq	r0, r0, ip
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     3b0:	0000017c 	andeq	r0, r0, ip, ror r1
     3b4:	00001308 	andeq	r1, r0, r8, lsl #6
     3b8:	00000024 	andeq	r0, r0, r4, lsr #32
		strncpy(response_message->record, rec, 20);
     3bc:	0000000c 	andeq	r0, r0, ip
     3c0:	0000017c 	andeq	r0, r0, ip, ror r1
     3c4:	00000000 	andeq	r0, r0, r0
					call sender(response_message_4, done_case);
     3c8:	00000028 	andeq	r0, r0, r8, lsr #32
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     3d0:	0000017c 	andeq	r0, r0, ip, ror r1
     3d4:	0000132c 	andeq	r1, r0, ip, lsr #6
     3d8:	00000258 	andeq	r0, r0, r8, asr r2
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     3dc:	870c0e42 	strhi	r0, [ip, -r2, asr #28]
     3e0:	8e028b03 	vmlahi.f64	d8, d2, d3
					if (delete_record(node_db, delete_record_message->record_index)){
     3e4:	180e4101 	stmdane	lr, {r0, r8, lr}
     3e8:	00070d42 	andeq	r0, r7, r2, asr #26
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3ec:	00000014 	andeq	r0, r0, r4, lsl r0
     3f0:	0000017c 	andeq	r0, r0, ip, ror r1
     3f4:	00001584 	andeq	r1, r0, r4, lsl #11
     3f8:	00000030 	andeq	r0, r0, r0, lsr r0
     3fc:	83080e42 	movwhi	r0, #36418	; 0x8e42
     400:	00018e02 	andeq	r8, r1, r2, lsl #28
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     404:	00000018 	andeq	r0, r0, r8, lsl r0
     408:	0000017c 	andeq	r0, r0, ip, ror r1
    return node->data_base.item_array[index];
     40c:	00000000 	andeq	r0, r0, r0
     410:	0000005c 	andeq	r0, r0, ip, asr r0
     414:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     418:	86038504 	strhi	r8, [r3], -r4, lsl #10
     41c:	00018e02 	andeq	r8, r1, r2, lsl #28
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     420:	00000014 	andeq	r0, r0, r4, lsl r0
    return node->data_base.item_array[index];
     424:	0000017c 	andeq	r0, r0, ip, ror r1
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     428:	000015b4 			; <UNDEFINED> instruction: 0x000015b4
     42c:	00000060 	andeq	r0, r0, r0, rrx
     430:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		strncpy(response_message->record, rec, 20);
     434:	00018e02 	andeq	r8, r1, r2, lsl #28
     438:	0000000c 	andeq	r0, r0, ip
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     43c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     440:	7c020001 	stcvc	0, cr0, [r2], {1}
     444:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     448:	00000018 	andeq	r0, r0, r8, lsl r0
     44c:	00000438 	andeq	r0, r0, r8, lsr r4
     450:	00001614 	andeq	r1, r0, r4, lsl r6
     454:	0000003c 	andeq	r0, r0, ip, lsr r0
				if(!response_flag){
     458:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
					response_flag=1;
     45c:	86038504 	strhi	r8, [r3], -r4, lsl #10
					trigger(&response_flag);
     460:	00018e02 	andeq	r8, r1, r2, lsl #28
				switch(response_message_5->status){
     464:	00000018 	andeq	r0, r0, r8, lsl r0
     468:	00000438 	andeq	r0, r0, r8, lsr r4
     46c:	00001650 	andeq	r1, r0, r0, asr r6
     470:	00000080 	andeq	r0, r0, r0, lsl #1
     474:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     478:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     47c:	00000001 	andeq	r0, r0, r1
     480:	0000000c 	andeq	r0, r0, ip
     484:	00000438 	andeq	r0, r0, r8, lsr r4
     488:	000016d0 	ldrdeq	r1, [r0], -r0
     48c:	00000018 	andeq	r0, r0, r8, lsl r0
     490:	00000014 	andeq	r0, r0, r4, lsl r0
     494:	00000438 	andeq	r0, r0, r8, lsr r4
     498:	00000000 	andeq	r0, r0, r0
     49c:	00000024 	andeq	r0, r0, r4, lsr #32
     4a0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     4a4:	00018e02 	andeq	r8, r1, r2, lsl #28
     4a8:	00000014 	andeq	r0, r0, r4, lsl r0
     4ac:	00000438 	andeq	r0, r0, r8, lsr r4
     4b0:	000016e8 	andeq	r1, r0, r8, ror #13
     4b4:	00000010 	andeq	r0, r0, r0, lsl r0
     4b8:	83080e42 	movwhi	r0, #36418	; 0x8e42
     4bc:	00018e02 	andeq	r8, r1, r2, lsl #28
     4c0:	00000014 	andeq	r0, r0, r4, lsl r0
     4c4:	00000438 	andeq	r0, r0, r8, lsr r4
     4c8:	000016f8 	strdeq	r1, [r0], -r8
     4cc:	0000002c 	andeq	r0, r0, ip, lsr #32
     4d0:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
     4d4:	00018e02 	andeq	r8, r1, r2, lsl #28
     4d8:	00000014 	andeq	r0, r0, r4, lsl r0
						if (response_checker[0] == response_message_5->request_number){
     4dc:	00000438 	andeq	r0, r0, r8, lsr r4
     4e0:	00000000 	andeq	r0, r0, r0
     4e4:	0000004c 	andeq	r0, r0, ip, asr #32
							switch(response_checker[1]){
     4e8:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     4ec:	00018e02 	andeq	r8, r1, r2, lsl #28
     4f0:	0000000c 	andeq	r0, r0, ip
     4f4:	00000438 	andeq	r0, r0, r8, lsr r4
									proceed response_1_create;
     4f8:	00001724 	andeq	r1, r0, r4, lsr #14
						proceed response_2;
     4fc:	00000006 	andeq	r0, r0, r6
									proceed response_1_delete;
     500:	00000028 	andeq	r0, r0, r8, lsr #32
									proceed response_1_retrieve;
     504:	00000438 	andeq	r0, r0, r8, lsr r4
						proceed response_2;
     508:	0000172c 	andeq	r1, r0, ip, lsr #14
						proceed response_3;
     50c:	000000cc 	andeq	r0, r0, ip, asr #1
						proceed response_4;
     510:	83180e41 	tsthi	r8, #1040	; 0x410
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     514:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     518:	87038604 	strhi	r8, [r3, -r4, lsl #12]
}
     51c:	02018e02 	andeq	r8, r1, #2, 28
     520:	c7ce0a59 			; <UNDEFINED> instruction: 0xc7ce0a59
     524:	c3c4c5c6 	bicgt	ip, r4, #830472192	; 0x31800000
     528:	0b42000e 	bleq	1080568 <__ccfg+0x10605c0>
bool delete_all(struct Node *node){
     52c:	00000014 	andeq	r0, r0, r4, lsl r0
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     530:	00000438 	andeq	r0, r0, r8, lsr r4
        for(int i = 0; i <= node->data_base.item_count; i++){
     534:	000017f8 	strdeq	r1, [r0], -r8
            node->data_base.item_array[i].data_entry[0] = '\0';
     538:	00000014 	andeq	r0, r0, r4, lsl r0
        for(int i = 0; i <= node->data_base.item_count; i++){
     53c:	83080e41 	movwhi	r0, #36417	; 0x8e41
            node->data_base.item_array[i].timestamp = 0;
     540:	00018e02 	andeq	r8, r1, r2, lsl #28
        for(int i = 0; i <= node->data_base.item_count; i++){
     544:	00000014 	andeq	r0, r0, r4, lsl r0
    node->data_base.item_count = 0;
     548:	00000438 	andeq	r0, r0, r8, lsr r4
}
     54c:	0000180c 	andeq	r1, r0, ip, lsl #16
        return true;
     550:	00000034 	andeq	r0, r0, r4, lsr r0
fsm root {
     554:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     558:	00018e02 	andeq	r8, r1, r2, lsl #28
     55c:	00000018 	andeq	r0, r0, r8, lsl r0
     560:	00000438 	andeq	r0, r0, r8, lsr r4
     564:	00001840 	andeq	r1, r0, r0, asr #16
     568:	00000034 	andeq	r0, r0, r4, lsr r0
     56c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     570:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     574:	00000001 	andeq	r0, r0, r1
     578:	00000018 	andeq	r0, r0, r8, lsl r0
     57c:	00000438 	andeq	r0, r0, r8, lsr r4
     580:	00000000 	andeq	r0, r0, r0
     584:	0000002c 	andeq	r0, r0, ip, lsr #32
     588:	83100e41 	tsthi	r0, #1040	; 0x410
     58c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     590:	00018e02 	andeq	r8, r1, r2, lsl #28
     594:	00000014 	andeq	r0, r0, r4, lsl r0
     598:	00000438 	andeq	r0, r0, r8, lsr r4
     59c:	00001874 	andeq	r1, r0, r4, ror r8
     5a0:	00000024 	andeq	r0, r0, r4, lsr #32
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     5a4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     5a8:	00018e02 	andeq	r8, r1, r2, lsl #28
     5ac:	00000018 	andeq	r0, r0, r8, lsl r0
		init_node(node_db);
     5b0:	00000438 	andeq	r0, r0, r8, lsr r4
		phys_cc1350(0, MAX_PKT_LEN);
     5b4:	00001898 	muleq	r0, r8, r8
     5b8:	00000038 	andeq	r0, r0, r8, lsr r0
		tcv_plug (0, &plug_null);
     5bc:	83100e41 	tsthi	r0, #1040	; 0x410
     5c0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		sfd = tcv_open (WNONE, 0, 0);
     5c4:	00018e02 	andeq	r8, r1, r2, lsl #28
     5c8:	0000000c 	andeq	r0, r0, ip
     5cc:	00000438 	andeq	r0, r0, r8, lsr r4
     5d0:	00000000 	andeq	r0, r0, r0
     5d4:	00000014 	andeq	r0, r0, r4, lsl r0
			diag("Cannot open tcv interface");
     5d8:	00000014 	andeq	r0, r0, r4, lsl r0
     5dc:	00000438 	andeq	r0, r0, r8, lsr r4
			halt();
     5e0:	00000000 	andeq	r0, r0, r0
		tcv_control(sfd, PHYSOPT_ON, NULL);
     5e4:	00000040 	andeq	r0, r0, r0, asr #32
     5e8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		runfsm receiver(node_db);
     5ec:	00018e02 	andeq	r8, r1, r2, lsl #28
     5f0:	00000014 	andeq	r0, r0, r4, lsl r0
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     5f4:	00000438 	andeq	r0, r0, r8, lsr r4
     5f8:	00000000 	andeq	r0, r0, r0
     5fc:	00000018 	andeq	r0, r0, r8, lsl r0
     600:	83080e41 	movwhi	r0, #36417	; 0x8e41
     604:	00018e02 	andeq	r8, r1, r2, lsl #28
     608:	0000000c 	andeq	r0, r0, ip
		ser_inf(get_choice, "%c", &CHOICE);
     60c:	00000438 	andeq	r0, r0, r8, lsr r4
     610:	000018d0 	ldrdeq	r1, [r0], -r0
     614:	00000024 	andeq	r0, r0, r4, lsr #32
		switch(CHOICE) {
     618:	0000000c 	andeq	r0, r0, ip
     61c:	00000438 	andeq	r0, r0, r8, lsr r4
     620:	00000000 	andeq	r0, r0, r0
     624:	00000020 	andeq	r0, r0, r0, lsr #32
     628:	0000000c 	andeq	r0, r0, ip
     62c:	00000438 	andeq	r0, r0, r8, lsr r4
     630:	000018f4 	strdeq	r1, [r0], -r4
     634:	0000000e 	andeq	r0, r0, lr
     638:	0000000c 	andeq	r0, r0, ip
     63c:	00000438 	andeq	r0, r0, r8, lsr r4
     640:	00001902 	andeq	r1, r0, r2, lsl #18
     644:	00000010 	andeq	r0, r0, r0, lsl r0
				proceed menu;
     648:	0000000c 	andeq	r0, r0, ip
     64c:	00000438 	andeq	r0, r0, r8, lsr r4
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     650:	00001912 	andeq	r1, r0, r2, lsl r9
     654:	0000001c 	andeq	r0, r0, ip, lsl r0
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     658:	0000000c 	andeq	r0, r0, ip
     65c:	00000438 	andeq	r0, r0, r8, lsr r4
     660:	00000000 	andeq	r0, r0, r0
		DEBUG_PRINT("setting node group ID");
     664:	00000010 	andeq	r0, r0, r0, lsl r0
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     668:	0000000c 	andeq	r0, r0, ip
    node->gid = gid; 
     66c:	00000438 	andeq	r0, r0, r8, lsr r4
		proceed menu;
     670:	00000000 	andeq	r0, r0, r0
     674:	00000006 	andeq	r0, r0, r6
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     678:	0000000c 	andeq	r0, r0, ip
     67c:	00000438 	andeq	r0, r0, r8, lsr r4
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     680:	0000192e 	andeq	r1, r0, lr, lsr #18
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     684:	00000014 	andeq	r0, r0, r4, lsl r0
     688:	0000000c 	andeq	r0, r0, ip
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     68c:	00000438 	andeq	r0, r0, r8, lsr r4
     690:	00001942 	andeq	r1, r0, r2, asr #18
		if((node_db->id < 1) || (node_db->id > 25)){
     694:	0000000e 	andeq	r0, r0, lr
     698:	00000014 	andeq	r0, r0, r4, lsl r0
     69c:	00000438 	andeq	r0, r0, r8, lsr r4
			strncpy(reason, "Out of Range", 50);
     6a0:	00001950 	andeq	r1, r0, r0, asr r9
     6a4:	00000024 	andeq	r0, r0, r4, lsr #32
			proceed invalid_node_id;
     6a8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     6ac:	00018e02 	andeq	r8, r1, r2, lsl #28
				strncpy(reason, "ID is already in use", 50);
     6b0:	00000020 	andeq	r0, r0, r0, lsr #32
		for(int i = 0; i < node_db->index; i++){
     6b4:	00000438 	andeq	r0, r0, r8, lsr r4
     6b8:	00001974 	andeq	r1, r0, r4, ror r9
     6bc:	0000009c 	muleq	r0, ip, r0
		proceed menu;
     6c0:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     6c4:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     6c8:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     6cc:	89038804 	stmdbhi	r3, {r2, fp, pc}
     6d0:	00018e02 	andeq	r8, r1, r2, lsl #28
		proceed get_new_node_id;
     6d4:	00000014 	andeq	r0, r0, r4, lsl r0
     6d8:	00000438 	andeq	r0, r0, r8, lsr r4
		if (!clear_node_neighbour_array(node_db)){
     6dc:	00001a10 	andeq	r1, r0, r0, lsl sl
     6e0:	00000050 	andeq	r0, r0, r0, asr r0
			strncpy(reason, "Error Clearing Node Array", 50);
     6e4:	83080e42 	movwhi	r0, #36418	; 0x8e42
     6e8:	00018e02 	andeq	r8, r1, r2, lsl #28
     6ec:	00000014 	andeq	r0, r0, r4, lsl r0
			proceed error;
     6f0:	00000438 	andeq	r0, r0, r8, lsr r4
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     6f4:	00001a60 	andeq	r1, r0, r0, ror #20
     6f8:	00000048 	andeq	r0, r0, r8, asr #32
		request_packet->gid = node_db->gid;
     6fc:	83080e41 	movwhi	r0, #36417	; 0x8e41
     700:	00018e02 	andeq	r8, r1, r2, lsl #28
		request_packet->tpe = DISCOVERY_REQUEST;
     704:	00000014 	andeq	r0, r0, r4, lsl r0
		request_packet->request_number = generate_request_num();
     708:	00000438 	andeq	r0, r0, r8, lsr r4
     70c:	00001aa8 	andeq	r1, r0, r8, lsr #21
		call sender(request_packet, wait_discovery);
     710:	00000050 	andeq	r0, r0, r0, asr r0
     714:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		request_packet->receiver_id=0;
     718:	00018e02 	andeq	r8, r1, r2, lsl #28
		call sender(request_packet, wait_discovery);
     71c:	00000020 	andeq	r0, r0, r0, lsr #32
     720:	00000438 	andeq	r0, r0, r8, lsr r4
     724:	00000000 	andeq	r0, r0, r0
			release;
     728:	00000058 	andeq	r0, r0, r8, asr r0
				proceed get_new_node_id;
     72c:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
				proceed clear_neighbour_array;
     730:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
				proceed create_proto_start;
     734:	87058606 	strhi	r8, [r5, -r6, lsl #12]
				proceed start_delete_proto;
     738:	89038804 	stmdbhi	r3, {r2, fp, pc}
				proceed retrieve_proto;
     73c:	00018e02 	andeq	r8, r1, r2, lsl #28
				proceed display_db;
     740:	00000018 	andeq	r0, r0, r8, lsl r0
				proceed del_local;
     744:	00000438 	andeq	r0, r0, r8, lsr r4
			if(node_db->id == node_db->nnodes[i]){
     748:	00001af8 	strdeq	r1, [r0], -r8
     74c:	000000a8 	andeq	r0, r0, r8, lsr #1
     750:	83100e44 	tsthi	r0, #68, 28	; 0x440
				strncpy(reason, "ID is already in use", 50);
     754:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     758:	00018e02 	andeq	r8, r1, r2, lsl #28
				proceed invalid_node_id;
     75c:	00000018 	andeq	r0, r0, r8, lsl r0
     760:	00000438 	andeq	r0, r0, r8, lsr r4
		for(int i = 0; i < node_db->index; i++){
     764:	00001ba0 	andeq	r1, r0, r0, lsr #23
		if (discovery_wait_flag == 0){
     768:	00000034 	andeq	r0, r0, r4, lsr r0
			discovery_wait_flag=1;
     76c:	83100e41 	tsthi	r0, #1040	; 0x410
     770:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			delay(3000, find_proto_start);
     774:	00018e02 	andeq	r8, r1, r2, lsl #28
     778:	0000000c 	andeq	r0, r0, ip
		if (discovery_wait_flag == 1){
     77c:	00000438 	andeq	r0, r0, r8, lsr r4
			discovery_wait_flag=0;
     780:	00001bd4 	ldrdeq	r1, [r0], -r4
     784:	00000018 	andeq	r0, r0, r8, lsl r0
			delay(3000, display_neighbour_nodes);
     788:	00000014 	andeq	r0, r0, r4, lsl r0
     78c:	00000438 	andeq	r0, r0, r8, lsr r4
     790:	00000000 	andeq	r0, r0, r0
     794:	00000030 	andeq	r0, r0, r0, lsr r0
     798:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     79c:	00018e02 	andeq	r8, r1, r2, lsl #28
     7a0:	00000014 	andeq	r0, r0, r4, lsl r0
     7a4:	00000438 	andeq	r0, r0, r8, lsr r4
     7a8:	00000000 	andeq	r0, r0, r0
     7ac:	00000038 	andeq	r0, r0, r8, lsr r0
     7b0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     7b4:	00018e02 	andeq	r8, r1, r2, lsl #28
     7b8:	00000040 	andeq	r0, r0, r0, asr #32
     7bc:	00000438 	andeq	r0, r0, r8, lsr r4
     7c0:	00001bec 	andeq	r1, r0, ip, ror #23
     7c4:	0000013c 	andeq	r0, r0, ip, lsr r1
     7c8:	80100e41 	andshi	r0, r0, r1, asr #28
     7cc:	82038104 	andhi	r8, r3, #4, 2
     7d0:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     7d4:	0b84380e 	bleq	fe10e814 <_estack+0xde109814>
     7d8:	09860a85 	stmibeq	r6, {r0, r2, r7, r9, fp}
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7dc:	07880887 	streq	r0, [r8, r7, lsl #17]
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     7e0:	058e0689 	streq	r0, [lr, #1673]	; 0x689
			if (node_db->nnodes[i] == 0) break;
     7e4:	2c0e0a5e 			; <UNDEFINED> instruction: 0x2c0e0a5e
     7e8:	c8c9ce42 	stmiagt	r9, {r1, r6, r9, sl, fp, lr, pc}^
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     7ec:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7f0:	c341100e 	movtgt	r1, #4110	; 0x100e
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     7f4:	0ec0c1c2 	acseqdm	f4, f2
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     7f8:	000b4100 	andeq	r4, fp, r0, lsl #2
		proceed menu;
     7fc:	0000000c 	andeq	r0, r0, ip
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     800:	00000438 	andeq	r0, r0, r8, lsr r4
     804:	00001d28 	andeq	r1, r0, r8, lsr #26
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     808:	00000024 	andeq	r0, r0, r4, lsr #32
     80c:	0000000c 	andeq	r0, r0, ip
     810:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     814:	7c020001 	stcvc	0, cr0, [r2], {1}
     818:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			strncpy(reason, "Error: improper ID", 50);
     81c:	00000014 	andeq	r0, r0, r4, lsl r0
     820:	0000080c 	andeq	r0, r0, ip, lsl #16
     824:	00001d4c 	andeq	r1, r0, ip, asr #26
			proceed error;
     828:	00000016 	andeq	r0, r0, r6, lsl r0
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     82c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     830:	00018e02 	andeq	r8, r1, r2, lsl #28
		ser_in(get_record_to_create, user_provided_record, 20);
     834:	0000000c 	andeq	r0, r0, ip
     838:	0000080c 	andeq	r0, r0, ip, lsl #16
     83c:	00001d62 	andeq	r1, r0, r2, ror #26
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     840:	0000001a 	andeq	r0, r0, sl, lsl r0
		create_message->gid = node_db->gid;
     844:	00000018 	andeq	r0, r0, r8, lsl r0
     848:	0000080c 	andeq	r0, r0, ip, lsl #16
     84c:	00001d7c 	andeq	r1, r0, ip, ror sp
		create_message->tpe = 2;
     850:	0000000e 	andeq	r0, r0, lr
		create_message->request_number = generate_request_num();
     854:	83080e41 	movwhi	r0, #36417	; 0x8e41
		create_message->sender_id = node_db->id;
     858:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     85c:	000ec3ce 	andeq	ip, lr, lr, asr #7
     860:	00000018 	andeq	r0, r0, r8, lsl r0
		strncpy(create_message->record, user_provided_record, 20);
     864:	0000080c 	andeq	r0, r0, ip, lsl #16
		create_message->receiver_id = user_provided_receiver_id;
     868:	00001d8c 	andeq	r1, r0, ip, lsl #27
		strncpy(create_message->record, user_provided_record, 20);
     86c:	0000004c 	andeq	r0, r0, ip, asr #32
		response_checker[0] = create_message->request_number;
     870:	83100e41 	tsthi	r0, #1040	; 0x410
		call sender(create_message, wait);
     874:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		response_checker[1] = create_message->tpe;
     878:	00018e02 	andeq	r8, r1, r2, lsl #28
     87c:	00000020 	andeq	r0, r0, r0, lsr #32
		call sender(create_message, wait);
     880:	0000080c 	andeq	r0, r0, ip, lsl #16
     884:	00001dd8 	ldrdeq	r1, [r0], -r8
     888:	0000008c 	andeq	r0, r0, ip, lsl #1
     88c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     890:	5f018e02 	svcpl	0x00018e02
     894:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     898:	560b4200 	strpl	r4, [fp], -r0, lsl #4
     89c:	000ec4ce 	andeq	ip, lr, lr, asr #9
     8a0:	00000020 	andeq	r0, r0, r0, lsr #32
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     8a4:	0000080c 	andeq	r0, r0, ip, lsl #16
     8a8:	00001e64 	andeq	r1, r0, r4, ror #28
			strncpy(reason, "Error: improper node ID", 50);
     8ac:	00000070 	andeq	r0, r0, r0, ror r0
     8b0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			proceed error;
     8b4:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
     8b8:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     8bc:	430b4200 	movwmi	r4, #45568	; 0xb200
     8c0:	000ec4ce 	andeq	ip, lr, lr, asr #9
		ser_inf(get_index_for_delete, "%d", &user_provided_index);
     8c4:	0000003c 	andeq	r0, r0, ip, lsr r0
     8c8:	0000080c 	andeq	r0, r0, ip, lsl #16
     8cc:	00001ed4 	ldrdeq	r1, [r0], -r4
		if (user_provided_index < 0 || user_provided_index > 40){
     8d0:	000000c0 	andeq	r0, r0, r0, asr #1
			strncpy(reason, "Error: invalid index", 50);
     8d4:	82080e41 	andhi	r0, r8, #1040	; 0x410
     8d8:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     8dc:	0a84300e 	beq	fe10c91c <_estack+0xde10791c>
			proceed error;
     8e0:	08860985 	stmeq	r6, {r0, r2, r7, r8, fp}
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     8e4:	06880787 	streq	r0, [r8], r7, lsl #15
     8e8:	048a0589 	streq	r0, [sl], #1417	; 0x589
		delete_record->gid = node_db->gid;
     8ec:	0a6b038e 	beq	1ac172c <__ccfg+0x1aa1784>
     8f0:	ce42280e 	cdpgt	8, 4, cr2, cr2, cr14, {0}
     8f4:	c7c8c9ca 	strbgt	ip, [r8, sl, asr #19]
		delete_record->tpe = DELETE_RECORD;
     8f8:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
		delete_record->request_number = generate_request_num();
     8fc:	c2c34108 	sbcgt	r4, r3, #8, 2
     900:	0b41000e 	bleq	1040940 <__ccfg+0x1020998>
		delete_record->sender_id = node_db->id;
     904:	0000001c 	andeq	r0, r0, ip, lsl r0
		response_checker[0] = delete_record->request_number;
     908:	0000080c 	andeq	r0, r0, ip, lsl #16
		delete_record->receiver_id = user_provided_receiver_id;
     90c:	00000000 	andeq	r0, r0, r0
     910:	0000006c 	andeq	r0, r0, ip, rrx
		delete_record->record_index = user_provided_index;
     914:	83180e42 	tsthi	r8, #1056	; 0x420
     918:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		response_checker[0] = delete_record->request_number;
     91c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
		call sender(&delete_record, wait);
     920:	00018e02 	andeq	r8, r1, r2, lsl #28
     924:	0000000c 	andeq	r0, r0, ip
     928:	0000080c 	andeq	r0, r0, ip, lsl #16
     92c:	00001f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
     930:	00000024 	andeq	r0, r0, r4, lsr #32
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     934:	00000018 	andeq	r0, r0, r8, lsl r0
     938:	0000080c 	andeq	r0, r0, ip, lsl #16
		ser_inf(get_id_for_retrieve, "%d", &user_provided_receiver_id);
     93c:	00001fb8 			; <UNDEFINED> instruction: 0x00001fb8
     940:	00000080 	andeq	r0, r0, r0, lsl #1
     944:	83100e42 	tsthi	r0, #1056	; 0x420
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     948:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     94c:	00018e02 	andeq	r8, r1, r2, lsl #28
			strncpy(reason, "Error: improper node ID", 50);
     950:	00000014 	andeq	r0, r0, r4, lsl r0
     954:	0000080c 	andeq	r0, r0, ip, lsl #16
     958:	00000000 	andeq	r0, r0, r0
			proceed error;
     95c:	00000070 	andeq	r0, r0, r0, ror r0
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     960:	83080e42 	movwhi	r0, #36418	; 0x8e42
     964:	00018e02 	andeq	r8, r1, r2, lsl #28
		ser_inf(get_index_for_retrieve, "%d", &user_provided_index);
     968:	00000018 	andeq	r0, r0, r8, lsl r0
     96c:	0000080c 	andeq	r0, r0, ip, lsl #16
     970:	00000000 	andeq	r0, r0, r0
		if (user_provided_index < 0 || user_provided_index > 40){
     974:	00000078 	andeq	r0, r0, r8, ror r0
     978:	83100e42 	tsthi	r0, #1056	; 0x420
			strncpy(reason, "Error: invalid index", 50);
     97c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     980:	00018e02 	andeq	r8, r1, r2, lsl #28
			proceed error;
     984:	00000020 	andeq	r0, r0, r0, lsr #32
     988:	0000080c 	andeq	r0, r0, ip, lsl #16
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     98c:	00002038 	andeq	r2, r0, r8, lsr r0
		retrieve_record->tpe = RETRIEVE_RECORD;
     990:	000000bc 	strheq	r0, [r0], -ip
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     994:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
		retrieve_record->gid = node_db->gid;
     998:	86048505 	strhi	r8, [r4], -r5, lsl #10
		retrieve_record->tpe = RETRIEVE_RECORD;
     99c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
		retrieve_record->request_number = generate_request_num();
     9a0:	0e0a6701 	cdpeq	7, 0, cr6, cr10, cr1, {0}
     9a4:	000b4114 	andeq	r4, fp, r4, lsl r1
		retrieve_record->sender_id = node_db->id;
     9a8:	00000018 	andeq	r0, r0, r8, lsl r0
     9ac:	0000080c 	andeq	r0, r0, ip, lsl #16
     9b0:	000020f4 	strdeq	r2, [r0], -r4
		call sender(&retrieve_record, wait);
     9b4:	0000003a 	andeq	r0, r0, sl, lsr r0
		retrieve_record->receiver_id = user_provided_receiver_id;
     9b8:	83100e41 	tsthi	r0, #1040	; 0x410
		retrieve_record->record_index = user_provided_index;
     9bc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		response_checker[0] = retrieve_record->request_number;
     9c0:	00018e02 	andeq	r8, r1, r2, lsl #28
		response_checker[1] = retrieve_record->tpe;
     9c4:	00000018 	andeq	r0, r0, r8, lsl r0
     9c8:	0000080c 	andeq	r0, r0, ip, lsl #16
		call sender(&retrieve_record, wait);
     9cc:	00000000 	andeq	r0, r0, r0
     9d0:	00000038 	andeq	r0, r0, r8, lsr r0
     9d4:	83100e41 	tsthi	r0, #1040	; 0x410
     9d8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     9dc:	00018e02 	andeq	r8, r1, r2, lsl #28
     9e0:	0000000c 	andeq	r0, r0, ip
		if(node_db->data_base.item_count != 0){
     9e4:	0000080c 	andeq	r0, r0, ip, lsl #16
     9e8:	00000000 	andeq	r0, r0, r0
		ser_out(loop_through_data, "\r\n");
     9ec:	0000000a 	andeq	r0, r0, sl
     9f0:	00000018 	andeq	r0, r0, r8, lsl r0
		proceed menu;
     9f4:	0000080c 	andeq	r0, r0, ip, lsl #16
     9f8:	00002130 	andeq	r2, r0, r0, lsr r1
		delete_all(node_db);
     9fc:	0000002c 	andeq	r0, r0, ip, lsr #32
     a00:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
		proceed menu;
     a04:	4c018e02 	stcmi	14, cr8, [r1], {2}
		delay(3000, timeout);
     a08:	000ec4ce 	andeq	ip, lr, lr, asr #9
     a0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a10:	0000080c 	andeq	r0, r0, ip, lsl #16
		when(&response_flag, menu);
     a14:	0000215c 	andeq	r2, r0, ip, asr r1
     a18:	00000060 	andeq	r0, r0, r0, rrx
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a1c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     a20:	61018e02 	tstvs	r1, r2, lsl #28
     a24:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
     a28:	000b4300 	andeq	r4, fp, r0, lsl #6
     a2c:	00000014 	andeq	r0, r0, r4, lsl r0
     a30:	0000080c 	andeq	r0, r0, ip, lsl #16
     a34:	00000000 	andeq	r0, r0, r0
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     a38:	00000040 	andeq	r0, r0, r0, asr #32
     a3c:	83080e42 	movwhi	r0, #36418	; 0x8e42
     a40:	00018e02 	andeq	r8, r1, r2, lsl #28
     a44:	00000014 	andeq	r0, r0, r4, lsl r0
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a48:	0000080c 	andeq	r0, r0, ip, lsl #16
     a4c:	00000000 	andeq	r0, r0, r0
		ser_out(timeout, "\r\nFailed to reach the destination");
     a50:	0000002c 	andeq	r0, r0, ip, lsr #32
     a54:	83080e42 	movwhi	r0, #36418	; 0x8e42
		proceed menu;
     a58:	00018e02 	andeq	r8, r1, r2, lsl #28
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     a5c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a60:	0000080c 	andeq	r0, r0, ip, lsl #16
     a64:	00000000 	andeq	r0, r0, r0
		proceed menu;
     a68:	0000003c 	andeq	r0, r0, ip, lsr r0
}
     a6c:	83180e41 	tsthi	r8, #1040	; 0x410
     a70:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     a74:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     a78:	00018e02 	andeq	r8, r1, r2, lsl #28
     a7c:	0000000c 	andeq	r0, r0, ip
     a80:	0000080c 	andeq	r0, r0, ip, lsl #16
     a84:	00000000 	andeq	r0, r0, r0
     a88:	00000006 	andeq	r0, r0, r6
     a8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a90:	0000080c 	andeq	r0, r0, ip, lsl #16
     a94:	000021bc 			; <UNDEFINED> instruction: 0x000021bc
     a98:	00000068 	andeq	r0, r0, r8, rrx
     a9c:	83180e41 	tsthi	r8, #1040	; 0x410
     aa0:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     aa4:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     aa8:	00018e02 	andeq	r8, r1, r2, lsl #28
     aac:	00000014 	andeq	r0, r0, r4, lsl r0
     ab0:	0000080c 	andeq	r0, r0, ip, lsl #16
     ab4:	00002224 	andeq	r2, r0, r4, lsr #4
     ab8:	00000050 	andeq	r0, r0, r0, asr r0
     abc:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     ac0:	00018e02 	andeq	r8, r1, r2, lsl #28
     ac4:	0000002c 	andeq	r0, r0, ip, lsr #32
     ac8:	0000080c 	andeq	r0, r0, ip, lsl #16
     acc:	00002274 	andeq	r2, r0, r4, ror r2
static void devinit_uart (int devnum) {
     ad0:	0000009c 	muleq	r0, ip, r0
	adddevfunc (ioreq_uart_a, devnum);
     ad4:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     ad8:	86088509 	strhi	r8, [r8], -r9, lsl #10
void udelay (volatile word n) {
     adc:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     ae0:	8a048905 	bhi	122efc <__ccfg+0x102f54>
	while (n) {
     ae4:	8e028b03 	vmlahi.f64	d8, d2, d3
     ae8:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
}
     aec:	240e0a56 	strcs	r0, [lr], #-2646	; 0xfffff5aa
	while (n--);
     af0:	00000b42 	andeq	r0, r0, r2, asr #22
     af4:	00000014 	andeq	r0, r0, r4, lsl r0
     af8:	0000080c 	andeq	r0, r0, ip, lsl #16
		n--;
     afc:	00002310 	andeq	r2, r0, r0, lsl r3
     b00:	00000040 	andeq	r0, r0, r0, asr #32
     b04:	83080e42 	movwhi	r0, #36418	; 0x8e42
void mdelay (volatile word n) {
     b08:	00018e02 	andeq	r8, r1, r2, lsl #28
     b0c:	00000014 	andeq	r0, r0, r4, lsl r0
	while (n) {
     b10:	0000080c 	andeq	r0, r0, ip, lsl #16
     b14:	00002350 	andeq	r2, r0, r0, asr r3
}
     b18:	00000034 	andeq	r0, r0, r4, lsr r0
		udelay (999);
     b1c:	83080e42 	movwhi	r0, #36418	; 0x8e42
     b20:	00018e02 	andeq	r8, r1, r2, lsl #28
		n--;
     b24:	00000018 	andeq	r0, r0, r8, lsl r0
     b28:	0000080c 	andeq	r0, r0, ip, lsl #16
     b2c:	00002384 	andeq	r2, r0, r4, lsl #7
     b30:	0000003c 	andeq	r0, r0, ip, lsr r0
void __pi_ondomain (lword d) {
     b34:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     b38:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
		if (__pi_systat.effpdm > 1)
     b3c:	000ec4ce 	andeq	ip, lr, lr, asr #9
     b40:	00000018 	andeq	r0, r0, r8, lsl r0
			__pi_systat.effpdm = 1;
     b44:	0000080c 	andeq	r0, r0, ip, lsl #16
	PRCMPowerDomainOn (d);
     b48:	00000000 	andeq	r0, r0, r0
     b4c:	0000003c 	andeq	r0, r0, ip, lsr r0
     b50:	83100e42 	tsthi	r0, #1056	; 0x420
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     b54:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     b58:	00018e02 	andeq	r8, r1, r2, lsl #28
     b5c:	0000000c 	andeq	r0, r0, ip
	__pi_systat.ondmns |= d;
     b60:	0000080c 	andeq	r0, r0, ip, lsl #16
     b64:	000023c0 	andeq	r2, r0, r0, asr #7
}
     b68:	00000002 	andeq	r0, r0, r2
     b6c:	0000000c 	andeq	r0, r0, ip
void __pi_offdomain (lword d) {
     b70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b74:	7c020001 	stcvc	0, cr0, [r2], {1}
	PRCMPowerDomainOff (d);
     b78:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     b7c:	0000000c 	andeq	r0, r0, ip
     b80:	00000b6c 	andeq	r0, r0, ip, ror #22
     b84:	000023c2 	andeq	r2, r0, r2, asr #7
	if (d & PRCM_DOMAIN_RFCORE) {
     b88:	00000002 	andeq	r0, r0, r2
     b8c:	0000000c 	andeq	r0, r0, ip
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     b90:	00000b6c 	andeq	r0, r0, ip, ror #22
     b94:	000023c4 	andeq	r2, r0, r4, asr #7
			__pi_systat.effpdm = __pi_systat.reqpdm;
     b98:	00000002 	andeq	r0, r0, r2
     b9c:	0000000c 	andeq	r0, r0, ip
	__pi_systat.ondmns &= ~d;
     ba0:	00000b6c 	andeq	r0, r0, ip, ror #22
     ba4:	000023c6 	andeq	r2, r0, r6, asr #7
}
     ba8:	00000002 	andeq	r0, r0, r2
     bac:	00000014 	andeq	r0, r0, r4, lsl r0
void __pi_syserror (word ec, const char *m) {
     bb0:	00000b6c 	andeq	r0, r0, ip, ror #22
	diag ("SYSERR: %x, %s", ec, m);
     bb4:	000023c8 	andeq	r2, r0, r8, asr #7
     bb8:	00000044 	andeq	r0, r0, r4, asr #32
  __ASM volatile ("cpsid i" : : : "memory");
     bbc:	83080e41 	movwhi	r0, #36417	; 0x8e41
     bc0:	00018e02 	andeq	r8, r1, r2, lsl #28
     bc4:	0000000c 	andeq	r0, r0, ip
     bc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		all_leds_blink;
     bcc:	7c020001 	stcvc	0, cr0, [r2], {1}
     bd0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     bd4:	0000000c 	andeq	r0, r0, ip
     bd8:	00000bc4 	andeq	r0, r0, r4, asr #23
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     bdc:	00000000 	andeq	r0, r0, r0
     be0:	00000002 	andeq	r0, r0, r2
     be4:	00000018 	andeq	r0, r0, r8, lsl r0
     be8:	00000bc4 	andeq	r0, r0, r4, asr #23
     bec:	00000000 	andeq	r0, r0, r0
     bf0:	00000058 	andeq	r0, r0, r8, asr r0
	while (1) {
     bf4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     bf8:	86038504 	strhi	r8, [r3], -r4, lsl #10
     bfc:	00018e02 	andeq	r8, r1, r2, lsl #28
     c00:	0000000c 	andeq	r0, r0, ip
void tci_run_delay_timer () {
     c04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	setdel = __pi_mintk - __pi_old;
     c08:	7c020001 	stcvc	0, cr0, [r2], {1}
     c0c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     c10:	0000002c 	andeq	r0, r0, ip, lsr #32
     c14:	00000c00 	andeq	r0, r0, r0, lsl #24
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c18:	00000000 	andeq	r0, r0, r0
     c1c:	000000cc 	andeq	r0, r0, ip, asr #1
     c20:	83100e42 	tsthi	r0, #1056	; 0x420
     c24:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     c28:	02018e02 	andeq	r8, r1, #2, 28
	sti_tim;
     c2c:	c5ce0a54 	strbgt	r0, [lr, #2644]	; 0xa54
}
     c30:	000ec3c4 	andeq	ip, lr, r4, asr #7
     c34:	ce420b44 	vmlsgt.f64	d16, d2, d4
     c38:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
     c3c:	00000000 	andeq	r0, r0, r0
     c40:	00000024 	andeq	r0, r0, r4, lsr #32
	cli_aux;
     c44:	00000c00 	andeq	r0, r0, r0, lsl #24
     c48:	00000000 	andeq	r0, r0, r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c4c:	00000038 	andeq	r0, r0, r8, lsr r0
     c50:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     c54:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     c58:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
	sti_aux;
     c5c:	4a0b4300 	bmi	2d1864 <__ccfg+0x2b18bc>
}
     c60:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     c64:	000b4300 	andeq	r4, fp, r0, lsl #6
     c68:	0000000c 	andeq	r0, r0, ip
void AONRTCIntHandler () {
     c6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     c70:	7c020001 	stcvc	0, cr0, [r2], {1}
     c74:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     c78:	00000018 	andeq	r0, r0, r8, lsl r0
		if (__pi_utims [0] == 0)
     c7c:	00000c68 	andeq	r0, r0, r8, ror #24
     c80:	00002414 	andeq	r2, r0, r4, lsl r4
		if (*(__pi_utims [0])) {
     c84:	00000034 	andeq	r0, r0, r4, lsr r0
     c88:	84100e45 	ldrhi	r0, [r0], #-3653	; 0xfffff1bb
			(*(__pi_utims [0]))--;
     c8c:	86038504 	strhi	r8, [r3], -r4, lsl #10
		if (__pi_utims [1] == 0)
     c90:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (*(__pi_utims [1])) {
     c94:	00000018 	andeq	r0, r0, r8, lsl r0
			aux_timer_inactive = 0;
     c98:	00000c68 	andeq	r0, r0, r8, ror #24
			(*(__pi_utims [1]))--;
     c9c:	00002448 	andeq	r2, r0, r8, asr #8
		if (__pi_utims [2] == 0)
     ca0:	00000030 	andeq	r0, r0, r0, lsr r0
		if (*(__pi_utims [2])) {
     ca4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
			(*(__pi_utims [2]))--;
     ca8:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
		if (__pi_utims [3] != 0) {
     cac:	00000001 	andeq	r0, r0, r1
			if (*(__pi_utims [3])) {
     cb0:	00000014 	andeq	r0, r0, r4, lsl r0
				aux_timer_inactive = 0;
     cb4:	00000c68 	andeq	r0, r0, r8, ror #24
				(*(__pi_utims [3]))--;
     cb8:	00002478 	andeq	r2, r0, r8, ror r4
	if (__pi_systat.ledsts) {
     cbc:	00000018 	andeq	r0, r0, r8, lsl r0
     cc0:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
		if (__pi_systat.ledblc++ == 0) {
     cc4:	00018e02 	andeq	r8, r1, r2, lsl #28
     cc8:	0000001c 	andeq	r0, r0, ip, lsl r0
			if (__pi_systat.ledblk) {
     ccc:	00000c68 	andeq	r0, r0, r8, ror #24
     cd0:	00002490 	muleq	r0, r0, r4
     cd4:	00000054 	andeq	r0, r0, r4, asr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     cd8:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     cdc:	86058506 	strhi	r8, [r5], -r6, lsl #10
				if (__pi_systat.ledsts & 0x2)
     ce0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     ce4:	00018e02 	andeq	r8, r1, r2, lsl #28
     ce8:	0000001c 	andeq	r0, r0, ip, lsl r0
				if (__pi_systat.ledsts & 0x4)
     cec:	00000c68 	andeq	r0, r0, r8, ror #24
				__pi_systat.ledblk = 0;
     cf0:	000024e4 	andeq	r2, r0, r4, ror #9
     cf4:	00000040 	andeq	r0, r0, r0, asr #32
			if (__pi_systat.fstblk)
     cf8:	83180e41 	tsthi	r8, #1040	; 0x410
     cfc:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
				__pi_systat.ledblc = 200;
     d00:	87038604 	strhi	r8, [r3, -r4, lsl #12]
	if (events & AON_RTC_EVFLAGS_CH0) {
     d04:	00018e02 	andeq	r8, r1, r2, lsl #28
		cli_tim;
     d08:	00000014 	andeq	r0, r0, r4, lsl r0
		__pi_new += setdel;
     d0c:	00000c68 	andeq	r0, r0, r8, ror #24
     d10:	00002524 	andeq	r2, r0, r4, lsr #10
		setdel = 0;
     d14:	00000024 	andeq	r0, r0, r4, lsr #32
		RISE_N_SHINE;
     d18:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		__pi_new += setdel;
     d1c:	00018e02 	andeq	r8, r1, r2, lsl #28
		RISE_N_SHINE;
     d20:	00000014 	andeq	r0, r0, r4, lsl r0
     d24:	00000c68 	andeq	r0, r0, r8, ror #24
		aux_timer_inactive = 1;
     d28:	00002548 	andeq	r2, r0, r8, asr #10
     d2c:	00000014 	andeq	r0, r0, r4, lsl r0
				if (__pi_systat.ledsts & 0x1)
     d30:	83080e41 	movwhi	r0, #36417	; 0x8e41
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d34:	00018e02 	andeq	r8, r1, r2, lsl #28
     d38:	0000000c 	andeq	r0, r0, ip
				if (__pi_systat.ledsts & 0x2)
     d3c:	00000c68 	andeq	r0, r0, r8, ror #24
     d40:	0000255c 	andeq	r2, r0, ip, asr r5
     d44:	00000014 	andeq	r0, r0, r4, lsl r0
				if (__pi_systat.ledsts & 0x8)
     d48:	0000001c 	andeq	r0, r0, ip, lsl r0
				__pi_systat.ledblk = 1;
     d4c:	00000c68 	andeq	r0, r0, r8, ror #24
     d50:	00000000 	andeq	r0, r0, r0
		if (aux_timer_inactive) {
     d54:	00000064 	andeq	r0, r0, r4, rrx
			cli_aux;
     d58:	83180e41 	tsthi	r8, #1040	; 0x410
     d5c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     d60:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     d64:	00018e02 	andeq	r8, r1, r2, lsl #28
     d68:	0000001c 	andeq	r0, r0, ip, lsl r0
     d6c:	00000c68 	andeq	r0, r0, r8, ror #24
     d70:	00000000 	andeq	r0, r0, r0
     d74:	00000128 	andeq	r0, r0, r8, lsr #2
     d78:	83180e41 	tsthi	r8, #1040	; 0x410
     d7c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
word tci_update_delay_ticks (Boolean force) {
     d80:	87038604 	strhi	r8, [r3, -r4, lsl #12]
	cli_tim;
     d84:	00018e02 	andeq	r8, r1, r2, lsl #28
     d88:	00000024 	andeq	r0, r0, r4, lsr #32
	if (setdel) {
     d8c:	00000c68 	andeq	r0, r0, r8, ror #24
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d90:	00000000 	andeq	r0, r0, r0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     d94:	000000ec 	andeq	r0, r0, ip, ror #1
     d98:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
     d9c:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     da0:	87078608 	strhi	r8, [r7, -r8, lsl #12]
				AON_RTC_O_CH0CMP)) - gettav ());
     da4:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
	return NO;
     da8:	8b038a04 	blhi	e35c0 <__ccfg+0xc3618>
			setdel = 0;
     dac:	00018e02 	andeq	r8, r1, r2, lsl #28
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     db0:	0000000c 	andeq	r0, r0, ip
     db4:	00000c68 	andeq	r0, r0, r8, ror #24
}
     db8:	00000000 	andeq	r0, r0, r0
		sti_tim;
     dbc:	00000002 	andeq	r0, r0, r2
		return YES;
     dc0:	0000000c 	andeq	r0, r0, ip
     dc4:	00000c68 	andeq	r0, r0, r8, ror #24
     dc8:	00000000 	andeq	r0, r0, r0
     dcc:	00000004 	andeq	r0, r0, r4
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     dd0:	0000000c 	andeq	r0, r0, ip
	UARTDisable (UART0_BASE);
     dd4:	00000c68 	andeq	r0, r0, r8, ror #24
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     dd8:	00000000 	andeq	r0, r0, r0
	UARTDisable (UART0_BASE);
     ddc:	00000014 	andeq	r0, r0, r4, lsl r0
	UARTConfigSetExpClk (UART0_BASE,
     de0:	00000018 	andeq	r0, r0, r8, lsl r0
     de4:	00000c68 	andeq	r0, r0, r8, ror #24
     de8:	00000000 	andeq	r0, r0, r0
     dec:	0000001a 	andeq	r0, r0, sl, lsl r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     df0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     df4:	4a018e02 	bmi	64604 <__ccfg+0x4465c>
     df8:	000ec3ce 	andeq	ip, lr, lr, asr #7
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     dfc:	0000000c 	andeq	r0, r0, ip
     e00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e04:	7c020001 	stcvc	0, cr0, [r2], {1}
	urates [0] = rate;
     e08:	000d0c0e 	andeq	r0, sp, lr, lsl #24
}
     e0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e10:	00000dfc 	strdeq	r0, [r0], -ip
     e14:	00002570 	andeq	r2, r0, r0, ror r5
     e18:	0000006c 	andeq	r0, r0, ip, rrx
     e1c:	83180e41 	tsthi	r8, #1040	; 0x410
     e20:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e24:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     e28:	00018e02 	andeq	r8, r1, r2, lsl #28
     e2c:	0000000c 	andeq	r0, r0, ip
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     e30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e34:	7c020001 	stcvc	0, cr0, [r2], {1}
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     e38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e3c:	0000001c 	andeq	r0, r0, ip, lsl r0
	__pi_uart_setrate (urates [0], __pi_uart);
     e40:	00000e2c 	andeq	r0, r0, ip, lsr #28
     e44:	000025dc 	ldrdeq	r2, [r0], -ip
     e48:	00000078 	andeq	r0, r0, r8, ror r0
     e4c:	83180e41 	tsthi	r8, #1040	; 0x410
     e50:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     e54:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     e58:	00018e02 	andeq	r8, r1, r2, lsl #28
	switch (operation) {
     e5c:	0000000c 	andeq	r0, r0, ip
static int ioreq_uart_a (int operation, char *buf, int len) {
     e60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e64:	7c020001 	stcvc	0, cr0, [r2], {1}
     e68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e6c:	00000030 	andeq	r0, r0, r0, lsr r0
     e70:	00000e5c 	andeq	r0, r0, ip, asr lr
				*buf++ = uart_a_read;
     e74:	00002654 	andeq	r2, r0, r4, asr r6
     e78:	00000054 	andeq	r0, r0, r4, asr r0
			while (len && uart_a_char_available) {
     e7c:	810c0e41 	tsthi	ip, r1, asr #28
     e80:	83028203 	movwhi	r8, #8707	; 0x2203
     e84:	280e4101 	stmdacs	lr, {r0, r8, lr}
			if (len != operation) {
     e88:	06850784 	streq	r0, [r5], r4, lsl #15
}
     e8c:	048e0586 	streq	r0, [lr], #1414	; 0x586
     e90:	421c0e61 	andsmi	r0, ip, #1552	; 0x610
			uart_a_disable_int;
     e94:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
			if (uart_a_char_available) {
     e98:	c3410c0e 	movtgt	r0, #7182	; 0x1c0e
				*buf++ = uart_a_read;
     e9c:	000ec1c2 	andeq	ip, lr, r2, asr #3
			uart_a_disable_int;
     ea0:	0000000c 	andeq	r0, r0, ip
     ea4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			if (uart_a_char_available) {
     ea8:	7c020001 	stcvc	0, cr0, [r2], {1}
     eac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
				uart_a_enable_int;
     eb0:	00000030 	andeq	r0, r0, r0, lsr r0
     eb4:	00000ea0 	andeq	r0, r0, r0, lsr #29
				goto Redo_rx;
     eb8:	000026a8 	andeq	r2, r0, r8, lsr #13
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     ebc:	00000060 	andeq	r0, r0, r0, rrx
     ec0:	810c0e41 	tsthi	ip, r1, asr #28
			return -2;
     ec4:	83028203 	movwhi	r8, #8707	; 0x2203
     ec8:	200e4101 	andcs	r4, lr, r1, lsl #2
				uart_a_write (*buf);
     ecc:	05850684 	streq	r0, [r5, #1668]	; 0x684
     ed0:	0a64048e 	beq	1902110 <__ccfg+0x18e2168>
			while (len && uart_a_room_in_tx) {
     ed4:	ce42180e 	cdpgt	8, 4, cr1, cr2, cr14, {0}
     ed8:	0c0ec4c5 	cfstrseq	mvf12, [lr], {197}	; 0xc5
     edc:	c1c2c341 	bicgt	ip, r2, r1, asr #6
			if (len != operation) {
     ee0:	0b41000e 	bleq	1040f20 <__ccfg+0x1020f78>
			uart_a_disable_int;
     ee4:	0000000c 	andeq	r0, r0, ip
     ee8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			if (uart_a_room_in_tx) {
     eec:	7c020001 	stcvc	0, cr0, [r2], {1}
     ef0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
				uart_a_enable_int;
     ef4:	0000000c 	andeq	r0, r0, ip
     ef8:	00000ee4 	andeq	r0, r0, r4, ror #29
				*buf++ = uart_a_read;
     efc:	00002708 	andeq	r2, r0, r8, lsl #14
			if (uart_a_room_in_tx) {
     f00:	00000020 	andeq	r0, r0, r0, lsr #32
				uart_a_write (*buf);
     f04:	00000018 	andeq	r0, r0, r8, lsl r0
     f08:	00000ee4 	andeq	r0, r0, r4, ror #29
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     f0c:	00002728 	andeq	r2, r0, r8, lsr #14
     f10:	00000190 	muleq	r0, r0, r1
			uart_a_enable_int;
     f14:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     f18:	86038504 	strhi	r8, [r3], -r4, lsl #10
     f1c:	00018e02 	andeq	r8, r1, r2, lsl #28
			return 0;
     f20:	00000018 	andeq	r0, r0, r8, lsl r0
			if (len == UART_CNTRL_SETRATE) {
     f24:	00000ee4 	andeq	r0, r0, r4, ror #29
				if (__pi_uart_setrate (*((word*)buf),
     f28:	000028b8 			; <UNDEFINED> instruction: 0x000028b8
     f2c:	00000048 	andeq	r0, r0, r8, asr #32
     f30:	83100e41 	tsthi	r0, #1040	; 0x410
				syserror (EREQPAR, "uar");
     f34:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			syserror (ENOOPER, "uai");
     f38:	00018e02 	andeq	r8, r1, r2, lsl #28
			if (len == UART_CNTRL_GETRATE) {
     f3c:	00000014 	andeq	r0, r0, r4, lsl r0
				return 1;
     f40:	00000ee4 	andeq	r0, r0, r4, ror #29
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     f44:	00002900 	andeq	r2, r0, r0, lsl #18
			syserror (ENOOPER, "uai");
     f48:	00000024 	andeq	r0, r0, r4, lsr #32
     f4c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     f50:	00018e02 	andeq	r8, r1, r2, lsl #28
     f54:	00000018 	andeq	r0, r0, r8, lsl r0
     f58:	00000ee4 	andeq	r0, r0, r4, ror #29
     f5c:	00002924 	andeq	r2, r0, r4, lsr #18
     f60:	0000005c 	andeq	r0, r0, ip, asr r0
     f64:	83100e41 	tsthi	r0, #1040	; 0x410
     f68:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     f6c:	00018e02 	andeq	r8, r1, r2, lsl #28
void UART0IntHandler () {
     f70:	00000018 	andeq	r0, r0, r8, lsl r0
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     f74:	00000ee4 	andeq	r0, r0, r4, ror #29
     f78:	00002980 	andeq	r2, r0, r0, lsl #19
     f7c:	00000038 	andeq	r0, r0, r8, lsr r0
     f80:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     f84:	86038504 	strhi	r8, [r3], -r4, lsl #10
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     f88:	00018e02 	andeq	r8, r1, r2, lsl #28
     f8c:	00000028 	andeq	r0, r0, r8, lsr #32
		RISE_N_SHINE;
     f90:	00000ee4 	andeq	r0, r0, r4, ror #29
     f94:	000029b8 			; <UNDEFINED> instruction: 0x000029b8
		i_trigger (devevent (UART_A, READ));
     f98:	00000180 	andeq	r0, r0, r0, lsl #3
     f9c:	84180e45 	ldrhi	r0, [r8], #-3653	; 0xfffff1bb
     fa0:	86058506 	strhi	r8, [r5], -r6, lsl #10
     fa4:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     fa8:	02018e02 	andeq	r8, r1, #2, 28
     fac:	c7c8ce88 	strbgt	ip, [r8, r8, lsl #29]
     fb0:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     fb4:	00000000 	andeq	r0, r0, r0
     fb8:	00000030 	andeq	r0, r0, r0, lsr r0
     fbc:	00000ee4 	andeq	r0, r0, r4, ror #29
     fc0:	00002b38 	andeq	r2, r0, r8, lsr fp
     fc4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     fc8:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     fcc:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     fd0:	87058606 	strhi	r8, [r5, -r6, lsl #12]
		i_trigger (devevent (UART_A, WRITE));
     fd4:	89038804 	stmdbhi	r3, {r2, fp, pc}
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     fd8:	02018e02 	andeq	r8, r1, #2, 28
     fdc:	c9ce0a4d 	stmibgt	lr, {r0, r2, r3, r6, r9, fp}^
		RISE_N_SHINE;
     fe0:	c5c6c7c8 	strbgt	ip, [r6, #1992]	; 0x7c8
     fe4:	000ec3c4 	andeq	ip, lr, r4, asr #7
     fe8:	00000b46 	andeq	r0, r0, r6, asr #22
		i_trigger (devevent (UART_A, WRITE));
     fec:	00000020 	andeq	r0, r0, r0, lsr #32
     ff0:	00000ee4 	andeq	r0, r0, r4, ror #29
     ff4:	00002c08 	andeq	r2, r0, r8, lsl #24
     ff8:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     ffc:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1000:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1004:	02018e02 	andeq	r8, r1, #2, 28
    1008:	c5c6ced8 	strbgt	ip, [r6, #3800]	; 0xed8
    100c:	00000ec4 	andeq	r0, r0, r4, asr #29
    1010:	00000018 	andeq	r0, r0, r8, lsl r0
    1014:	00000ee4 	andeq	r0, r0, r4, ror #29
}
    1018:	00002df8 	strdeq	r2, [r0], -r8
    101c:	00000070 	andeq	r0, r0, r0, ror r0
    1020:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    1024:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1028:	00000001 	andeq	r0, r0, r1
void __buttons_setirq (int val) {
    102c:	00000024 	andeq	r0, r0, r4, lsr #32
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1030:	00000ee4 	andeq	r0, r0, r4, ror #29
    1034:	00002e68 	andeq	r2, r0, r8, ror #28
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1038:	00000174 	andeq	r0, r0, r4, ror r1
    103c:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
    1040:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
		bn = BUTTON_GPIO (__button_list [i]);
    1044:	87078608 	strhi	r8, [r7, -r8, lsl #12]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1048:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
    104c:	8b038a04 	blhi	e3864 <__ccfg+0xc38bc>
    1050:	00018e02 	andeq	r8, r1, r2, lsl #28
    1054:	0000000c 	andeq	r0, r0, ip
    1058:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    105c:	7c020001 	stcvc	0, cr0, [r2], {1}
}
    1060:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1064:	00000014 	andeq	r0, r0, r4, lsl r0
    1068:	00001054 	andeq	r1, r0, r4, asr r0
    106c:	00002fdc 	ldrdeq	r2, [r0], -ip
void __pinlist_setirq (int val) {
    1070:	00000024 	andeq	r0, r0, r4, lsr #32
	for (i = 0; i < N_PINLIST; i++) {
    1074:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1078:	00018e02 	andeq	r8, r1, r2, lsl #28
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    107c:	0000000c 	andeq	r0, r0, ip
	for (i = 0; i < N_PINLIST; i++) {
    1080:	00001054 	andeq	r1, r0, r4, asr r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1084:	00003000 	andeq	r3, r0, r0
    1088:	00000024 	andeq	r0, r0, r4, lsr #32
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    108c:	0000000c 	andeq	r0, r0, ip
    1090:	00001054 	andeq	r1, r0, r4, asr r0
    1094:	00003024 	andeq	r3, r0, r4, lsr #32
	for (i = 0; i < N_PINLIST; i++) {
    1098:	00000008 	andeq	r0, r0, r8
}
    109c:	0000000c 	andeq	r0, r0, ip
    10a0:	00001054 	andeq	r1, r0, r4, asr r0
    10a4:	0000302c 	andeq	r3, r0, ip, lsr #32
    10a8:	00000004 	andeq	r0, r0, r4
void GPIOIntHandler () {
    10ac:	0000000c 	andeq	r0, r0, ip
if (buttons_int) {
    10b0:	00001054 	andeq	r1, r0, r4, asr r0
    10b4:	00003030 	andeq	r3, r0, r0, lsr r0
	buttons_disable ();
    10b8:	00000004 	andeq	r0, r0, r4
    10bc:	00000018 	andeq	r0, r0, r8, lsl r0
	i_trigger ((aword)&__button_list);
    10c0:	00001054 	andeq	r1, r0, r4, asr r0
    10c4:	00003034 	andeq	r3, r0, r4, lsr r0
    10c8:	00000048 	andeq	r0, r0, r8, asr #32
    10cc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    10d0:	86038504 	strhi	r8, [r3], -r4, lsl #10
    10d4:	00018e02 	andeq	r8, r1, r2, lsl #28
    10d8:	0000000c 	andeq	r0, r0, ip
    10dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    10e0:	7c020001 	stcvc	0, cr0, [r2], {1}
    10e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    10e8:	00000028 	andeq	r0, r0, r8, lsr #32
	RISE_N_SHINE;
    10ec:	000010d8 	ldrdeq	r1, [r0], -r8
    10f0:	0000307c 	andeq	r3, r0, ip, ror r0
    10f4:	00000070 	andeq	r0, r0, r0, ror r0
if (pin_sensor_int) {
    10f8:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
    10fc:	86048505 	strhi	r8, [r4], -r5, lsl #10
	i_trigger ((aword)(&__input_pins));
    1100:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1104:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
    1108:	c7ce4214 	bfigt	r4, r4, #4, #11
    110c:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    1110:	000b4200 	andeq	r4, fp, r0, lsl #4
    1114:	0000000c 	andeq	r0, r0, ip
    1118:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    111c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1120:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1124:	00000028 	andeq	r0, r0, r8, lsr #32
    1128:	00001114 	andeq	r1, r0, r4, lsl r1
	__pinsen_disable_and_clear;
    112c:	000030ec 	andeq	r3, r0, ip, ror #1
	RISE_N_SHINE;
    1130:	0000011c 	andeq	r0, r0, ip, lsl r1
    1134:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
    1138:	86048505 	strhi	r8, [r4], -r5, lsl #10
}
    113c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1140:	0e7c0201 	cdpeq	2, 7, cr0, cr12, cr1, {0}
    1144:	c7ce4214 	bfigt	r4, r4, #4, #11
    1148:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    114c:	00000000 	andeq	r0, r0, r0
void system_init () {
    1150:	0000000c 	andeq	r0, r0, ip
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1154:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    1158:	7c020001 	stcvc	0, cr0, [r2], {1}
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    115c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1160:	0000000c 	andeq	r0, r0, ip
    1164:	00001150 	andeq	r1, r0, r0, asr r1
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1168:	00003208 	andeq	r3, r0, r8, lsl #4
    116c:	00000020 	andeq	r0, r0, r0, lsr #32
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1170:	00000028 	andeq	r0, r0, r8, lsr #32
    1174:	00001150 	andeq	r1, r0, r0, asr r1
    1178:	00003228 	andeq	r3, r0, r8, lsr #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    117c:	00000230 	andeq	r0, r0, r0, lsr r2
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1180:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1184:	86078508 	strhi	r8, [r7], -r8, lsl #10
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1188:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    118c:	8a038904 	bhi	e35a4 <__ccfg+0xc35fc>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1190:	02018e02 	andeq	r8, r1, #2, 28
		pin = (port_confs [i] >> 19) & 0x1f;
    1194:	200e0a4f 	andcs	r0, lr, pc, asr #20
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1198:	00000b42 	andeq	r0, r0, r2, asr #22
		pin = (port_confs [i] >> 19) & 0x1f;
    119c:	0000001c 	andeq	r0, r0, ip, lsl r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    11a0:	00001150 	andeq	r1, r0, r0, asr r1
    11a4:	00003458 	andeq	r3, r0, r8, asr r4
    11a8:	00000050 	andeq	r0, r0, r0, asr r0
    11ac:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
		if (port_confs [i] & 0x80)
    11b0:	86058506 	strhi	r8, [r5], -r6, lsl #10
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    11b4:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    11b8:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (port_confs [i] & 0x40)
    11bc:	0000000c 	andeq	r0, r0, ip
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11c4:	7c020001 	stcvc	0, cr0, [r2], {1}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11c8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    11cc:	00000020 	andeq	r0, r0, r0, lsr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11d0:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
	all_leds_blink;
    11d4:	000034a8 	andeq	r3, r0, r8, lsr #9
    11d8:	00000390 	muleq	r0, r0, r3
    11dc:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xfffff1bd
    11e0:	86068507 	strhi	r8, [r6], -r7, lsl #10
    11e4:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    11e8:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
    11ec:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11f0:	0000000c 	andeq	r0, r0, ip
    11f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11f8:	7c020001 	stcvc	0, cr0, [r2], {1}
    11fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1200:	00000024 	andeq	r0, r0, r4, lsr #32
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1204:	000011f0 	strdeq	r1, [r0], -r0
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1208:	00003838 	andeq	r3, r0, r8, lsr r8
    120c:	00000028 	andeq	r0, r0, r8, lsr #32
	IntEnable (INT_AON_RTC_COMB);
    1210:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1214:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1218:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
	__pi_malloc_init ();
    121c:	c5c6ce0a 	strbgt	ip, [r6, #3594]	; 0xe0a
	IntEnable (INT_AON_GPIO_EDGE);
    1220:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
    1224:	0000000b 	andeq	r0, r0, fp
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1228:	00000028 	andeq	r0, r0, r8, lsr #32
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    122c:	000011f0 	strdeq	r1, [r0], -r0
    1230:	00000000 	andeq	r0, r0, r0
    1234:	0000002c 	andeq	r0, r0, ip, lsr #32
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1238:	83180e41 	tsthi	r8, #1040	; 0x410
    123c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1240:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    1244:	50018e02 	andpl	r8, r1, r2, lsl #28
    1248:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
	urates [0] = UART_RATE / 100;
    124c:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    1250:	000b4200 	andeq	r4, fp, r0, lsl #4
	reinit_uart ();
    1254:	0000000c 	andeq	r0, r0, ip
	EXTRA_INITIALIZERS;
    1258:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    125c:	7c020001 	stcvc	0, cr0, [r2], {1}
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    1260:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1264:	0000000c 	andeq	r0, r0, ip
    1268:	00001254 	andeq	r1, r0, r4, asr r2
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    126c:	00003860 	andeq	r3, r0, r0, ror #16
    1270:	00000030 	andeq	r0, r0, r0, lsr r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1274:	0000000c 	andeq	r0, r0, ip
    1278:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			devinit [i] . init (devinit [i] . param);
    127c:	7c020001 	stcvc	0, cr0, [r2], {1}
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1280:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1284:	0000000c 	andeq	r0, r0, ip
    1288:	00001274 	andeq	r1, r0, r4, ror r2
	IntEnable (INT_UART0_COMB);
    128c:	00003890 	muleq	r0, r0, r8
    1290:	00000020 	andeq	r0, r0, r0, lsr #32
}
    1294:	0000000c 	andeq	r0, r0, ip
	tci_run_auxiliary_timer ();
    1298:	00001274 	andeq	r1, r0, r4, ror r2
		diag ("");
    129c:	000038b0 			; <UNDEFINED> instruction: 0x000038b0
    12a0:	00000018 	andeq	r0, r0, r8, lsl r0
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    12a4:	0000000c 	andeq	r0, r0, ip
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    12a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		diag ("Leftover RAM: %d bytes",
    12ac:	7c020001 	stcvc	0, cr0, [r2], {1}
    12b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12b4:	0000000c 	andeq	r0, r0, ip
    12b8:	000012a4 	andeq	r1, r0, r4, lsr #5
    12bc:	000038c8 	andeq	r3, r0, r8, asr #17
    12c0:	00000008 	andeq	r0, r0, r8
    12c4:	0000000c 	andeq	r0, r0, ip
    12c8:	000012a4 	andeq	r1, r0, r4, lsr #5
    12cc:	00000000 	andeq	r0, r0, r0
    12d0:	00000006 	andeq	r0, r0, r6
    12d4:	0000000c 	andeq	r0, r0, ip
    12d8:	000012a4 	andeq	r1, r0, r4, lsr #5
    12dc:	000038d0 	ldrdeq	r3, [r0], -r0
    12e0:	00000008 	andeq	r0, r0, r8
    12e4:	0000000c 	andeq	r0, r0, ip
    12e8:	000012a4 	andeq	r1, r0, r4, lsr #5
    12ec:	00000000 	andeq	r0, r0, r0
    12f0:	00000006 	andeq	r0, r0, r6
    12f4:	0000000c 	andeq	r0, r0, ip
    12f8:	000012a4 	andeq	r1, r0, r4, lsr #5
    12fc:	00000000 	andeq	r0, r0, r0
    1300:	00000008 	andeq	r0, r0, r8
    1304:	0000000c 	andeq	r0, r0, ip
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1308:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    130c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1310:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1314:	0000001c 	andeq	r0, r0, ip, lsl r0
    1318:	00001304 	andeq	r1, r0, r4, lsl #6
    131c:	000038d8 	ldrdeq	r3, [r0], -r8
    1320:	0000005c 	andeq	r0, r0, ip, asr r0
    1324:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
}
    1328:	86038504 	strhi	r8, [r3], -r4, lsl #10
__attribute__ ((noreturn)) void __pi_release () {
    132c:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
    1330:	0000100e 	andeq	r1, r0, lr
    1334:	00000014 	andeq	r0, r0, r4, lsl r0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1338:	00001304 	andeq	r1, r0, r4, lsl #6
	check_stack_overflow;
    133c:	00003934 	andeq	r3, r0, r4, lsr r9
    1340:	0000002c 	andeq	r0, r0, ip, lsr #32
    1344:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	update_n_wake (MAX_WORD, NO);
    1348:	00018e02 	andeq	r8, r1, r2, lsl #28
    134c:	00000018 	andeq	r0, r0, r8, lsl r0
    1350:	00001304 	andeq	r1, r0, r4, lsl #6
	for_all_tasks (__pi_curr) {
    1354:	00000000 	andeq	r0, r0, r0
    1358:	00000090 	muleq	r0, r0, r0
    135c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
  __ASM volatile ("cpsid i" : : : "memory");
    1360:	86038504 	strhi	r8, [r3], -r4, lsl #10
	__SLEEP;
    1364:	00018e02 	andeq	r8, r1, r2, lsl #28
    1368:	00000014 	andeq	r0, r0, r4, lsl r0
    136c:	00001304 	andeq	r1, r0, r4, lsl #6
    1370:	00003960 	andeq	r3, r0, r0, ror #18
	system_event_count ++;
    1374:	00000018 	andeq	r0, r0, r8, lsl r0
    1378:	83080e41 	movwhi	r0, #36417	; 0x8e41
	switch (__pi_systat.effpdm) {
    137c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1380:	00000014 	andeq	r0, r0, r4, lsl r0
    1384:	00001304 	andeq	r1, r0, r4, lsl #6
    1388:	00003978 	andeq	r3, r0, r8, ror r9
			__WFI ();
    138c:	00000060 	andeq	r0, r0, r0, rrx
    1390:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1394:	00018e02 	andeq	r8, r1, r2, lsl #28
	check_stack_overflow;
    1398:	00000014 	andeq	r0, r0, r4, lsl r0
    139c:	00001304 	andeq	r1, r0, r4, lsl #6
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    13a0:	000039d8 	ldrdeq	r3, [r0], -r8
    13a4:	00000034 	andeq	r0, r0, r4, lsr r0
			(__pi_curr->code) (tstate (__pi_curr));
    13a8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			goto Redo;
    13ac:	00018e02 	andeq	r8, r1, r2, lsl #28
	for_all_tasks (__pi_curr) {
    13b0:	00000018 	andeq	r0, r0, r8, lsl r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    13b4:	00001304 	andeq	r1, r0, r4, lsl #6
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    13b8:	00000000 	andeq	r0, r0, r0
    13bc:	00000038 	andeq	r0, r0, r8, lsr r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    13c0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    13c4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    13c8:	00000001 	andeq	r0, r0, r1
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    13cc:	0000000c 	andeq	r0, r0, ip
    13d0:	00001304 	andeq	r1, r0, r4, lsl #6
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    13d4:	00000000 	andeq	r0, r0, r0
    13d8:	0000000c 	andeq	r0, r0, ip
			__WFI ();
    13dc:	00000018 	andeq	r0, r0, r8, lsl r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    13e0:	00001304 	andeq	r1, r0, r4, lsl #6
    13e4:	00000000 	andeq	r0, r0, r0
}
    13e8:	00000034 	andeq	r0, r0, r4, lsr r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    13ec:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    13f0:	86038504 	strhi	r8, [r3], -r4, lsl #10
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    13f4:	00018e02 	andeq	r8, r1, r2, lsl #28
    13f8:	0000000c 	andeq	r0, r0, ip
			PRCMPowerDomainOff (__pi_systat.ondmns |
    13fc:	00001304 	andeq	r1, r0, r4, lsl #6
    1400:	00000000 	andeq	r0, r0, r0
    1404:	0000001c 	andeq	r0, r0, ip, lsl r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1408:	0000000c 	andeq	r0, r0, ip
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    140c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1410:	7c020001 	stcvc	0, cr0, [r2], {1}
    1414:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1418:	0000000c 	andeq	r0, r0, ip
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    141c:	00001408 	andeq	r1, r0, r8, lsl #8
    1420:	00000000 	andeq	r0, r0, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1424:	00000014 	andeq	r0, r0, r4, lsl r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1428:	0000000c 	andeq	r0, r0, ip
    142c:	00001408 	andeq	r1, r0, r8, lsl #8
    1430:	00003a0c 	andeq	r3, r0, ip, lsl #20
    1434:	00000028 	andeq	r0, r0, r8, lsr #32
    1438:	0000000c 	andeq	r0, r0, ip
			SysCtrlSetRechargeBeforePowerDown
    143c:	00001408 	andeq	r1, r0, r8, lsl #8
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1440:	00003a34 	andeq	r3, r0, r4, lsr sl
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1444:	0000004c 	andeq	r0, r0, ip, asr #32
    1448:	0000000c 	andeq	r0, r0, ip
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    144c:	00001408 	andeq	r1, r0, r8, lsl #8
    1450:	00003a80 	andeq	r3, r0, r0, lsl #21
    1454:	00000150 	andeq	r0, r0, r0, asr r1
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    1458:	00000018 	andeq	r0, r0, r8, lsl r0
    145c:	00001408 	andeq	r1, r0, r8, lsl #8
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1460:	00003bd0 	ldrdeq	r3, [r0], -r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1464:	00000118 	andeq	r0, r0, r8, lsl r1
    1468:	84100e43 	ldrhi	r0, [r0], #-3651	; 0xfffff1bd
    146c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1470:	00018e02 	andeq	r8, r1, r2, lsl #28
			while (!(AONWUCPowerStatusGet () &
    1474:	00000018 	andeq	r0, r0, r8, lsl r0
			PRCMPowerDomainOn (__pi_systat.ondmns);
    1478:	00001408 	andeq	r1, r0, r8, lsl #8
    147c:	00003ce8 	andeq	r3, r0, r8, ror #25
    1480:	00000020 	andeq	r0, r0, r0, lsr #32
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    1484:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1488:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    148c:	00000001 	andeq	r0, r0, r1
    1490:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1494:	00001408 	andeq	r1, r0, r8, lsl #8
    1498:	00000000 	andeq	r0, r0, r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    149c:	00000060 	andeq	r0, r0, r0, rrx
    14a0:	83080e41 	movwhi	r0, #36417	; 0x8e41
			SysCtrlAdjustRechargeAfterPowerDown ();
    14a4:	00018e02 	andeq	r8, r1, r2, lsl #28
			reinit_uart ();
    14a8:	0000000c 	andeq	r0, r0, ip
    14ac:	00001408 	andeq	r1, r0, r8, lsl #8
    14b0:	00003d08 	andeq	r3, r0, r8, lsl #26
}
    14b4:	0000001c 	andeq	r0, r0, ip, lsl r0
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    14b8:	0000000c 	andeq	r0, r0, ip
    14bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    14c0:	7c020001 	stcvc	0, cr0, [r2], {1}
    14c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    14c8:	00000018 	andeq	r0, r0, r8, lsl r0
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    14cc:	000014b8 			; <UNDEFINED> instruction: 0x000014b8
    14d0:	00003d24 	andeq	r3, r0, r4, lsr #26
    14d4:	000000d4 	ldrdeq	r0, [r0], -r4
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    14d8:	83100e41 	tsthi	r0, #1040	; 0x410
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    14dc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    14e0:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    14e4:	00000014 	andeq	r0, r0, r4, lsl r0
    14e8:	000014b8 			; <UNDEFINED> instruction: 0x000014b8
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    14ec:	00003df8 	strdeq	r3, [r0], -r8
    14f0:	000000a4 	andeq	r0, r0, r4, lsr #1
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    14f4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    14f8:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    14fc:	0000000c 	andeq	r0, r0, ip
    1500:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			PRCMPowerDomainOff (
    1504:	7c020001 	stcvc	0, cr0, [r2], {1}
    1508:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    150c:	00000018 	andeq	r0, r0, r8, lsl r0
	__SLEEP;
    1510:	000014fc 	strdeq	r1, [r0], -ip
  __ASM volatile ("cpsie i" : : : "memory");
    1514:	00003e9c 	muleq	r0, ip, lr
	goto Redo;
    1518:	0000007c 	andeq	r0, r0, ip, ror r0
    151c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    1520:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1524:	00000001 	andeq	r0, r0, r1
    1528:	00000014 	andeq	r0, r0, r4, lsl r0
    152c:	000014fc 	strdeq	r1, [r0], -ip
    1530:	00003f18 	andeq	r3, r0, r8, lsl pc
    1534:	000000ac 	andeq	r0, r0, ip, lsr #1
    1538:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
    153c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1540:	0000000c 	andeq	r0, r0, ip
    1544:	000014fc 	strdeq	r1, [r0], -ip
    1548:	00003fc4 	andeq	r3, r0, r4, asr #31
    154c:	0000005c 	andeq	r0, r0, ip, asr r0
    1550:	0000000c 	andeq	r0, r0, ip
    1554:	000014fc 	strdeq	r1, [r0], -ip
    1558:	00004020 	andeq	r4, r0, r0, lsr #32
    155c:	00000018 	andeq	r0, r0, r8, lsl r0
    1560:	0000000c 	andeq	r0, r0, ip
    1564:	000014fc 	strdeq	r1, [r0], -ip
    1568:	00000000 	andeq	r0, r0, r0
    156c:	00000010 	andeq	r0, r0, r0, lsl r0
    1570:	0000000c 	andeq	r0, r0, ip
    1574:	000014fc 	strdeq	r1, [r0], -ip
    1578:	00004038 	andeq	r4, r0, r8, lsr r0
    157c:	00000010 	andeq	r0, r0, r0, lsl r0
    1580:	0000000c 	andeq	r0, r0, ip
	cli_tim;
    1584:	000014fc 	strdeq	r1, [r0], -ip
    1588:	00004048 	andeq	r4, r0, r8, asr #32
    158c:	00000014 	andeq	r0, r0, r4, lsl r0
	diag ("PicOS halted");
    1590:	00000018 	andeq	r0, r0, r8, lsl r0
	mdelay (500);
    1594:	000014fc 	strdeq	r1, [r0], -ip
    1598:	0000405c 	andeq	r4, r0, ip, asr r0
	setpowermode (2);
    159c:	00000064 	andeq	r0, r0, r4, rrx
	__PCB = NULL;
    15a0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	release;
    15a4:	86038504 	strhi	r8, [r3], -r4, lsl #10
    15a8:	00018e02 	andeq	r8, r1, r2, lsl #28
    15ac:	0000000c 	andeq	r0, r0, ip
    15b0:	000014fc 	strdeq	r1, [r0], -ip
int main (void) {
    15b4:	000040c0 	andeq	r4, r0, r0, asr #1
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    15b8:	00000014 	andeq	r0, r0, r4, lsl r0
    15bc:	0000000c 	andeq	r0, r0, ip
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    15c0:	000014fc 	strdeq	r1, [r0], -ip
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    15c4:	000040d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
	system_init ();
    15c8:	00000014 	andeq	r0, r0, r4, lsl r0
	tcv_init ();
    15cc:	0000000c 	andeq	r0, r0, ip
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    15d0:	000014fc 	strdeq	r1, [r0], -ip
    15d4:	000040e8 	andeq	r4, r0, r8, ror #1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    15d8:	00000014 	andeq	r0, r0, r4, lsl r0
    15dc:	0000000c 	andeq	r0, r0, ip
    15e0:	000014fc 	strdeq	r1, [r0], -ip
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    15e4:	000040fc 	strdeq	r4, [r0], -ip
    15e8:	00000028 	andeq	r0, r0, r8, lsr #32
	delay (16, 0);
    15ec:	0000000c 	andeq	r0, r0, ip
    15f0:	000014fc 	strdeq	r1, [r0], -ip
    15f4:	00004124 	andeq	r4, r0, r4, lsr #2
	__pi_release ();
    15f8:	00000010 	andeq	r0, r0, r0, lsl r0
    15fc:	0000000c 	andeq	r0, r0, ip
    1600:	000014fc 	strdeq	r1, [r0], -ip
    1604:	00004134 	andeq	r4, r0, r4, lsr r1
    1608:	0000002c 	andeq	r0, r0, ip, lsr #32
    160c:	0000000c 	andeq	r0, r0, ip
    1610:	000014fc 	strdeq	r1, [r0], -ip
static void killev (__pi_pcb_t *pid) {
    1614:	00004160 	andeq	r4, r0, r0, ror #2
	wfun = (aword)(pid->code);
    1618:	00000014 	andeq	r0, r0, r4, lsl r0
	for_all_tasks (i) {
    161c:	0000000c 	andeq	r0, r0, ip
		for (j = 0; j < nevents (i); j++) {
    1620:	000014fc 	strdeq	r1, [r0], -ip
    1624:	00004174 	andeq	r4, r0, r4, ror r1
    1628:	00000014 	andeq	r0, r0, r4, lsl r0
			    || i->Events [j] . Event == wfun
    162c:	0000001c 	andeq	r0, r0, ip, lsl r0
		for (j = 0; j < nevents (i); j++) {
    1630:	000014fc 	strdeq	r1, [r0], -ip
			if (i->Events [j] . Event == (aword)pid
    1634:	00004188 	andeq	r4, r0, r8, lsl #3
    1638:	00000110 	andeq	r0, r0, r0, lsl r1
    163c:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
				wakeupev (i, j);
    1640:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1644:	02018e02 	andeq	r8, r1, #2, 28
	for_all_tasks (i) {
    1648:	00100e76 	andseq	r0, r0, r6, ror lr
}
    164c:	00000018 	andeq	r0, r0, r8, lsl r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1650:	000014fc 	strdeq	r1, [r0], -ip
static void qfree (aword *ch) {
    1654:	00004298 	muleq	r0, r8, r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1658:	00000064 	andeq	r0, r0, r4, rrx
	cc = (aword*)(mpools + MA_NP);
    165c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
	m_setnextp (ch, chunk);
    1660:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	m_setnextp (cc, ch);
    1664:	00000001 	andeq	r0, r0, r1
}
    1668:	0000000c 	andeq	r0, r0, ip
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    166c:	000014fc 	strdeq	r1, [r0], -ip
    1670:	000042fc 	strdeq	r4, [r0], -ip
    1674:	00000028 	andeq	r0, r0, r8, lsr #32
			m_setnextp (cc, m_nextp (chunk));
    1678:	00000014 	andeq	r0, r0, r4, lsl r0
			m_size (chunk) += m_hdrlen + m_size (ch);
    167c:	000014fc 	strdeq	r1, [r0], -ip
    1680:	00004324 	andeq	r4, r0, r4, lsr #6
    1684:	00000150 	andeq	r0, r0, r0, asr r1
    1688:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    168c:	00018e02 	andeq	r8, r1, r2, lsl #28
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    1690:	0000000c 	andeq	r0, r0, ip
    1694:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1698:	7c020001 	stcvc	0, cr0, [r2], {1}
			m_setnextp (cc, m_nextp (chunk));
    169c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16a0:	0000001c 	andeq	r0, r0, ip, lsl r0
			m_size (ch) += m_hdrlen + m_size (chunk);
    16a4:	00001690 	muleq	r0, r0, r6
    16a8:	00000000 	andeq	r0, r0, r0
    16ac:	000000f4 	strdeq	r0, [r0], -r4
    16b0:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
    16b4:	86058506 	strhi	r8, [r5], -r6, lsl #10
			if (m_size (chunk) >= m_size (ch))
    16b8:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    16bc:	00018e02 	andeq	r8, r1, r2, lsl #28
    16c0:	00000028 	andeq	r0, r0, r8, lsr #32
		chunk = m_nextp (chunk))
    16c4:	00001690 	muleq	r0, r0, r6
    16c8:	00004474 	andeq	r4, r0, r4, ror r4
    16cc:	00000220 	andeq	r0, r0, r0, lsr #4
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    16d0:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
	diag_wait (a);
    16d4:	86088509 	strhi	r8, [r8], -r9, lsl #10
	diag_wchar (c, a);
    16d8:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    16dc:	8a048905 	bhi	123af8 <__ccfg+0x103b50>
}
    16e0:	8e028b03 	vmlahi.f64	d8, d2, d3
    16e4:	0eee0201 	cdpeq	2, 14, cr0, cr14, cr1, {0}
	syserror (ESTATE, "state");
    16e8:	00000024 	andeq	r0, r0, r4, lsr #32
    16ec:	00000014 	andeq	r0, r0, r4, lsl r0
    16f0:	00001690 	muleq	r0, r0, r6
    16f4:	00004694 	muleq	r0, r4, r6
	for (i = 0; i < MAX_UTIMERS; i++)
    16f8:	00000060 	andeq	r0, r0, r0, rrx
void utimer_add (address ut) {
    16fc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1700:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (__pi_utims [i] == NULL)
    1704:	00000014 	andeq	r0, r0, r4, lsl r0
	for (i = 0; i < MAX_UTIMERS; i++)
    1708:	00001690 	muleq	r0, r0, r6
    170c:	00000000 	andeq	r0, r0, r0
		syserror (ERESOURCE, "ut a");
    1710:	00000078 	andeq	r0, r0, r8, ror r0
	__pi_utims [i] = ut;
    1714:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
}
    1718:	00018e02 	andeq	r8, r1, r2, lsl #28
    171c:	0000000c 	andeq	r0, r0, ip
    1720:	00001690 	muleq	r0, r0, r6
	*t = v;
    1724:	000046f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
	TCI_RUN_AUXILIARY_TIMER;
    1728:	00000018 	andeq	r0, r0, r8, lsl r0
void update_n_wake (word min, Boolean force) {
    172c:	0000000c 	andeq	r0, r0, ip
	if (TCI_UPDATE_DELAY_TICKS (force))
    1730:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1734:	7c020001 	stcvc	0, cr0, [r2], {1}
    1738:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    173c:	0000000c 	andeq	r0, r0, ip
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1740:	0000172c 	andeq	r1, r0, ip, lsr #14
    1744:	00000000 	andeq	r0, r0, r0
    1748:	00000010 	andeq	r0, r0, r0, lsl r0
    174c:	0000000c 	andeq	r0, r0, ip
    1750:	0000172c 	andeq	r1, r0, ip, lsr #14
    1754:	00000000 	andeq	r0, r0, r0
    1758:	00000018 	andeq	r0, r0, r8, lsl r0
    175c:	0000000c 	andeq	r0, r0, ip
    1760:	0000172c 	andeq	r1, r0, ip, lsr #14
    1764:	0000470c 	andeq	r4, r0, ip, lsl #14
    1768:	0000004c 	andeq	r0, r0, ip, asr #32
    176c:	00000014 	andeq	r0, r0, r4, lsl r0
		for_all_tasks (i) {
    1770:	0000172c 	andeq	r1, r0, ip, lsr #14
	__pi_mintk = znew + min;
    1774:	00000000 	andeq	r0, r0, r0
    1778:	00000030 	andeq	r0, r0, r0, lsr r0
			if (!twaiting (i))
    177c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1780:	00018e02 	andeq	r8, r1, r2, lsl #28
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1784:	00000018 	andeq	r0, r0, r8, lsl r0
    1788:	0000172c 	andeq	r1, r0, ip, lsr #14
    178c:	00004758 	andeq	r4, r0, r8, asr r7
    1790:	0000006c 	andeq	r0, r0, ip, rrx
    1794:	83100e41 	tsthi	r0, #1040	; 0x410
    1798:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    179c:	00018e02 	andeq	r8, r1, r2, lsl #28
    17a0:	00000014 	andeq	r0, r0, r4, lsl r0
    17a4:	0000172c 	andeq	r1, r0, ip, lsr #14
    17a8:	000047c4 	andeq	r4, r0, r4, asr #15
    17ac:	00000016 	andeq	r0, r0, r6, lsl r0
    17b0:	83080e41 	movwhi	r0, #36417	; 0x8e41
				wakeuptm (i);
    17b4:	00018e02 	andeq	r8, r1, r2, lsl #28
    17b8:	0000000c 	andeq	r0, r0, ip
		for_all_tasks (i) {
    17bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
				d = i->Timer - znew;
    17c0:	7c020001 	stcvc	0, cr0, [r2], {1}
    17c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    17c8:	00000024 	andeq	r0, r0, r4, lsr #32
		if ((word)(__pi_mintk - znew) < min) 
    17cc:	000017b8 			; <UNDEFINED> instruction: 0x000017b8
    17d0:	000047dc 	ldrdeq	r4, [r0], -ip
    17d4:	00000028 	andeq	r0, r0, r8, lsr #32
	__pi_old = znew;
    17d8:	83100e41 	tsthi	r0, #1040	; 0x410
}
    17dc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	TCI_RUN_DELAY_TIMER;
    17e0:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
}
    17e4:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
    17e8:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
    17ec:	0000000b 	andeq	r0, r0, fp
    17f0:	0000000c 	andeq	r0, r0, ip
    17f4:	000017b8 			; <UNDEFINED> instruction: 0x000017b8
void proceed (word state) {
    17f8:	00004804 	andeq	r4, r0, r4, lsl #16
	prcdstate (__pi_curr, state);
    17fc:	00000008 	andeq	r0, r0, r8
    1800:	0000000c 	andeq	r0, r0, ip
	release;
    1804:	000017b8 			; <UNDEFINED> instruction: 0x000017b8
    1808:	00000000 	andeq	r0, r0, r0
void __pi_wait (aword event, word state) {
    180c:	00000022 	andeq	r0, r0, r2, lsr #32
	sint j = nevents (__pi_curr);
    1810:	00000018 	andeq	r0, r0, r8, lsl r0
	if (j >= MAX_EVENTS_PER_TASK)
    1814:	000017b8 			; <UNDEFINED> instruction: 0x000017b8
    1818:	00000000 	andeq	r0, r0, r0
    181c:	0000002e 	andeq	r0, r0, lr, lsr #32
		syserror (ENEVENTS, "sw");
    1820:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1824:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
	setestate (__pi_curr->Events [j], state, event);
    1828:	000ec4ce 	andeq	ip, lr, lr, asr #9
	incwait (__pi_curr);
    182c:	00000018 	andeq	r0, r0, r8, lsl r0
	setestate (__pi_curr->Events [j], state, event);
    1830:	000017b8 			; <UNDEFINED> instruction: 0x000017b8
}
    1834:	00000000 	andeq	r0, r0, r0
    1838:	00000034 	andeq	r0, r0, r4, lsr r0
    183c:	83100e41 	tsthi	r0, #1040	; 0x410
void __pi_trigger (aword event) {
    1840:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	for_all_tasks (i) {
    1844:	00018e02 	andeq	r8, r1, r2, lsl #28
		for (j = 0; j < nevents (i); j++) {
    1848:	00000018 	andeq	r0, r0, r8, lsl r0
    184c:	000017b8 			; <UNDEFINED> instruction: 0x000017b8
    1850:	00000000 	andeq	r0, r0, r0
    1854:	00000040 	andeq	r0, r0, r0, asr #32
			if (i->Events [j] . Event == event) {
    1858:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    185c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1860:	00018e02 	andeq	r8, r1, r2, lsl #28
				wakeupev (i, j);
    1864:	0000000c 	andeq	r0, r0, ip
    1868:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	for_all_tasks (i) {
    186c:	7c020001 	stcvc	0, cr0, [r2], {1}
}
    1870:	000d0c0e 	andeq	r0, sp, lr, lsl #24
aword __pi_join (aword pid, word st) {
    1874:	00000020 	andeq	r0, r0, r0, lsr #32
	for_all_tasks (i) {
    1878:	00001864 	andeq	r1, r0, r4, ror #16
    187c:	0000480c 	andeq	r4, r0, ip, lsl #16
	return 0;
    1880:	000000aa 	andeq	r0, r0, sl, lsr #1
		if ((aword)i == pid) {
    1884:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
			__pi_wait (pid, st);
    1888:	86048505 	strhi	r8, [r4], -r5, lsl #10
}
    188c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
	for_all_tasks (i) {
    1890:	180e4201 	stmdane	lr, {r0, r9, lr}
    1894:	00000688 	andeq	r0, r0, r8, lsl #13
void delay (word d, word state) {
    1898:	0000000c 	andeq	r0, r0, ip
	settstate (__pi_curr, state);
    189c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    18a0:	7c020001 	stcvc	0, cr0, [r2], {1}
    18a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    18a8:	0000000c 	andeq	r0, r0, ip
	update_n_wake (d, YES);
    18ac:	00001898 	muleq	r0, r8, r8
    18b0:	000048b8 			; <UNDEFINED> instruction: 0x000048b8
	__pi_curr->Timer = __pi_old + d;
    18b4:	00000014 	andeq	r0, r0, r4, lsl r0
    18b8:	00000014 	andeq	r0, r0, r4, lsl r0
	inctimer (__pi_curr);
    18bc:	00001898 	muleq	r0, r8, r8
    18c0:	000048cc 	andeq	r4, r0, ip, asr #17
    18c4:	00000038 	andeq	r0, r0, r8, lsr r0
}
    18c8:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    18cc:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (fun == NULL)
    18d0:	0000000c 	andeq	r0, r0, ip
		return (int) __pi_curr;
    18d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    18d8:	7c020001 	stcvc	0, cr0, [r2], {1}
	for_all_tasks (i)
    18dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
}
    18e0:	00000020 	andeq	r0, r0, r0, lsr #32
		if (i->code == fun)
    18e4:	000018d0 	ldrdeq	r1, [r0], -r0
	for_all_tasks (i)
    18e8:	00004904 	andeq	r4, r0, r4, lsl #18
    18ec:	00000054 	andeq	r0, r0, r4, asr r0
    18f0:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
int __pi_strlen (const char *s) {
    18f4:	86048505 	strhi	r8, [r4], -r5, lsl #10
	for (i = 0; *(s+i) != '\0'; i++);
    18f8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
}
    18fc:	180e5301 	stmdane	lr, {r0, r8, r9, ip, lr}
	for (i = 0; *(s+i) != '\0'; i++);
    1900:	00000688 	andeq	r0, r0, r8, lsl #13
